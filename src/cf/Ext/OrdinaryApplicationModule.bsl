Перем ПараметрыПриложения Экспорт;
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
Перем КонтекстЭДО Экспорт;
Перем глОбщиеЗначения Экспорт;
Перем глЗапрашиватьПодтверждениеПриЗакрытии Экспорт;
Перем ПараметрыВнешнихРегламентированныхОтчетов Экспорт;

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)
	//СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	ShareСервер.Share_УдалитьСсылкиПоДате();
	Если ПараметрыПриложения=Неопределено Тогда
		ПараметрыПриложения=Новый Соответствие;
	КонецЕсли;
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	//*** СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();

	ЗаголовокСистемы=Константы.ЗаголовокСистемы.Получить();
	Если НЕ Пустаястрока(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли;

	ПервыйЗапуск=Ложь;

	ВыполнитьОбновлениеИнформационнойБазы(ПервыйЗапуск);
	
	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(МодульВалютногоУчета.ПолучитьВалюту("Бух")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	//СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	
	//////Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
	//////	ЗапрашиватьПотверждение = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ЗапрашиватьПодтверждениеПриЗакрытии");
	//////	Если ЗапрашиватьПотверждение Тогда
	//////		Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
	//////		Отказ = (Ответ = КодВозвратаДиалога.Нет);
	//////	КонецЕсли;
	//////КонецЕсли;
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()
	
КонецПроцедуры

Функция КонфигураторОткрыт()
	МассивСоединений=ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из МассивСоединений Цикл
		Если Соединение.ИмяПриложения="Designer" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ВыполнитьОбновлениеИнформационнойБазы(ПервыйЗапуск) Экспорт
	//*** Константы.НомерВерсииКонфигурации.Установить("4.17.09.25");  //Временно, для проверки

	// Проверка необходимости обновления информационной базы.
	НомерВерсии = Константы.НомерВерсииКонфигурации.Получить();
	ПервыйЗапуск = (НомерВерсии = "");	
	
	Если НЕ ПустаяСтрока(Метаданные.Версия) И НомерВерсии <> Метаданные.Версия Тогда
		Если Не ПервыйЗапуск Тогда
			Сообщить("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.");
		КонецЕслИ;
	Иначе
		Возврат;
	КонецЕсли;
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
	 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИБ) 
	 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИБ) Тогда

	 	Сообщить("Недостаточно прав для выполнения обновления.");	Возврат;
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		ПоказатьПредупреждение(, "Не удалось установить монопольный режим. Работа системы будет завершена.");
		глЗапрашиватьПодтверждениеПриЗакрытии=Ложь;
		ЗавершитьРаботуСистемы(); Возврат;
	КонецПопытки;

	текОбработка=Обработки.ОбновлениеИБ.Создать();
	текОбработка.ОбновлениеВыполнено=Истина;
	текОбработка.ПолучитьФорму().ОткрытьМодально();

	УстановитьМонопольныйРежим(Ложь); // Откючение монопольного режима.

    Если НЕ текОбработка.ОбновлениеВыполнено Тогда
		Действие=?(ПервыйЗапуск, "начальное заполнение", "обновление");
		Сообщить("Не выполнено "+Действие+" информационной базы .", СтатусСообщения.Важное);
		Текст="Не выполнено "+Действие+" информационной базы! Завершить работу системы?";
		Ответ=Вопрос(Текст, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да, );
		Если Ответ=КодВозвратаДиалога.Да Тогда
			глЗапрашиватьПодтверждениеПриЗакрытии=Ложь;
			ЗавершитьРаботуСистемы();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция глЗначениеПеременной(Имя) Экспорт
	Возврат ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
КонецФункции

Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
КонецПроцедуры