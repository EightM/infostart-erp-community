Функция БухгалтерскаяСправка(СтруктураПараметров, стрВидРегистра, НУ="") Экспорт
	СсылкаНаОбъект=СтруктураПараметров.СсылкаНаОбъект;
	ЕстьОрганизаця=УправлениеМетаданными.ЕстьРеквизит("Организация", СсылкаНаОбъект.Метаданные());

	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	"+?(ЕстьОрганизаця, "ИсточникДанных.Организация", "Null")+" Как Организация,
	|	ИсточникДанных.Номер,
	|	ИсточникДанных.Дата,
	|	ИсточникДанных.Ответственный,
	|	ИсточникДанных.Комментарий
	|ИЗ
	|	Документ."+СсылкаНаОбъект.Метаданные().Имя+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";	
	Док=Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	стрДополнительныеПараметры=?(стрВидРегистра="Хозрасчетный", "ИсточникДанных.ВалютаДт,
	|	ИсточникДанных.ВалютаКт,
	|	ИсточникДанных.ВалютнаяСуммаДт,
	|	ИсточникДанных.ВалютнаяСуммаКт,","Null КАК ВалютаДт,
	|	Null КАК ВалютаКт,
	|	Null КАК ВалютнаяСуммаДт,
	|	Null КАК ВалютнаяСуммаКт,");

	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаОбъект);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.НомерСтроки КАК НомерСтроки,
	|	ИсточникДанных.СчетДт,
	|	ИсточникДанных.СубконтоДт1,
	|	ИсточникДанных.СубконтоДт2,
	|	ИсточникДанных.СубконтоДт3,
	|	ИсточникДанных.СчетКт,
	|	ИсточникДанных.СубконтоКт1,
	|	ИсточникДанных.СубконтоКт2,
	|	ИсточникДанных.СубконтоКт3,
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.СуммаНУДт,
	|	ИсточникДанных.СуммаНУКт,
	|	ИсточникДанных.Сумма,
//	"
//	+?(НУ="НУ","ИсточникДанных.СуммаНУДт, ИсточникДанных.СуммаНУКт,","ИсточникДанных.Сумма,")+"
	|	"+стрДополнительныеПараметры+"
	|	ИсточникДанных.КоличествоДт,
	|	ИсточникДанных.КоличествоКт,
	|	ИсточникДанных.Содержание
	|ИЗ
	|	РегистрБухгалтерии."+стрВидРегистра+".ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ИсточникДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	ВыборкаДвижений=Запрос.Выполнить().Выбрать();

	//Определяем макет
	Макет=СтруктураПараметров.МакетШаблон;
	Если Макет=Неопределено Тогда
		Макет=ПолучитьОбщийМакет("БухгалтерскаяСправка");
	КонецЕсли;
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент=Новый ТабличныйДокумент;
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БухгалтерскаяСправка_ОтражениеВзаиморасчетовПрочее";

	Если ЕстьОрганизаця Тогда
		// Выведем шапку документа.
		СведенияОбОрганизации = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	    ШапкаДокумента.Параметры.Организация    = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации);
	КонецЕсли;

	ШапкаДокумента.Параметры.НомерДокумента = ОбщегоНазначенияСервер.НомерНаПечать(СсылкаНаОбъект);
	ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
	ШапкаДокумента.Параметры.Содержание     = Док.Комментарий;
	
	ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		СтрокаТаблицы.Параметры.СуммаНУ=?(ВыборкаДвижений.СуммаНУДт<>0,ВыборкаДвижений.СуммаНУДт,ВыборкаДвижений.СуммаНУКт);
		
		АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоДт3);
					
		АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
		            + Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
                    + Строка(ВыборкаДвижений.СубконтоКт3);
					
		СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
		СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
									 
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом=Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		
		Если НЕ ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			ТабДокумент.Вывести(ПодвалТаблицы); // Выведем подвал таблицы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); // Выведем разрыв страницы.
			ТабДокумент.Вывести(ЗаголовокТаблицы); // Выведем заголовок таблицы.
		КонецЕсли;

		ТабДокумент.Вывести(СтрокаТаблицы);
	КонецЦикла;

	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);

	// Выведем подвал документа.
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Док.Ответственный), "", ОбщегоНазначения.ФамилияИнициалыФизЛица(Док.Ответственный.ФизЛицо));
	ТабДокумент.Вывести(ПодвалДокумента);

	Возврат ТабДокумент;		
КонецФункции 

// Функция формирует табличный документ с печатной формой прихода или расхода
//  с розничных складов в ценах АТТ.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма.
//
Функция ПриходРасходСРозничныхСкладовВЦенахАТТ(Док, ВалютаРегламентированногоУчета, ЭтоПриход) Экспорт
	Если ЭтоПриход Тогда
		ТекстНетДвижений = "Данным документом не выполнен приход ни на один розничный склад!";
		ТекстВсегоПринятоОтпущено = "Всего принято ";
		ТекстПринялОтпустил = "Принял";
	Иначе
		ТекстНетДвижений = "Данным документом не выполнен расход ни с одного розничного склада!";
		ТекстВсегоПринятоОтпущено = "Всего отпущено ";
		ТекстПринялОтпустил = "Отпустил";
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Док", Док);
	Запрос.УстановитьПараметр("ДатаСреза", Док.Дата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Склад КАК Склад,
	|	ИсточникДанных.Номенклатура.Представление КАК Номенклатура,
	|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ИсточникДанных.ХарактеристикаНоменклатуры.Представление КАК Характеристика,
	|	ИсточникДанных.СерияНоменклатуры.Представление КАК Серия,
	|	ИсточникДанных.Качество.Представление КАК Качество,
	|	СУММА(ИсточникДанных.Количество) КАК Количество,
	|	ЕстьNULL(ЦеныНоменклатуры.Цена, 0) Как Цена
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза) КАК ЦеныНоменклатуры
	|		ПО ИсточникДанных.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ИсточникДанных.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
	|			И ИсточникДанных.Склад.ТипЦенРозничнойТорговли = ЦеныНоменклатуры.ТипЦен
	|ГДЕ
	|	ИсточникДанных.Регистратор = &Док
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.СерияНоменклатуры,
	|	ИсточникДанных.Качество,
	|	ИсточникДанных.Номенклатура.Представление,
	|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	ИсточникДанных.ХарактеристикаНоменклатуры.Представление,
	|	ИсточникДанных.СерияНоменклатуры.Представление,
	|	ИсточникДанных.Качество.Представление,
	|	ЦеныНоменклатуры.Цена
	|
	|ИМЕЮЩИЕ
	|	СУММА(ИсточникДанных.Количество) <> 0
	|ИТОГИ ПО
	|	Склад
	|";
	РезультатЗапроса=Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНетДвижений);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент=Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходСРозничныхСкладовВЦенахАТТ";

	Макет=ПолучитьОбщийМакет("ПриходРасходВЦенахАТТ");
	
	ОбластьЗаголовок     = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСклад         = Макет.ПолучитьОбласть("Склад");
	ОбластьСтроки        = Макет.ПолучитьОбласть("Строка");
	ОбластьИтого         = Макет.ПолучитьОбласть("Итого");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписи       = Макет.ПолучитьОбласть("Подписи");
	
	ЗаголовокДокумента = ОбщегоНазначения.СформироватьЗаголовокДокумента(Док, Док.Метаданные().Синоним);
	
	ВыборкаСклады=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	Пока ВыборкаСклады.Следующий() Цикл
		ВыбМОЛ=РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(Док.Дата, Новый Структура("СтруктурнаяЕдиница", ВыборкаСклады.Склад)).ФизическоеЛицо;
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка=ЗаголовокДокумента;
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьСклад.Параметры.ПредставлениеСклада=СокрЛП(ВыборкаСклады.Склад)+?(ЗначениеЗаполнено(ВыбМОЛ), " (материально-ответственное лицо: "+ВыбМОЛ+")", "");
		ТабДокумент.Вывести(ОбластьСклад);
		
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		
		НомерСтроки=0; Сумма=0;
		
		Выборка=ВыборкаСклады.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомерСтроки=НомерСтроки+1;
			Количество=ОбщегоНазначения.МодульЧисла(Выборка.Количество);
			СуммаПродажная=Выборка.Цена*Количество;
			Сумма=Сумма+СуммаПродажная;

			ОбластьСтроки.Параметры.Заполнить(Выборка);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтроки.Параметры.Товар = СокрЛП(Выборка.Номенклатура)+ПечатныеФормыСервер.ПредставлениеСерий(Выборка);
			ОбластьСтроки.Параметры.Цена = Выборка.Цена;
			ОбластьСтроки.Параметры.СуммаПродажная=СуммаПродажная;
			
			ТабДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;
		
		ОбластьИтого.Параметры.Всего=ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьИтого);
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока=ТекстВсегоПринятоОтпущено+НомерСтроки+" наименований, на сумму "+ОбщегоНазначения.ФорматСумм(Сумма, ВалютаРегламентированногоУчета);
		ОбластьСуммаПрописью.Параметры.СуммаПрописью=ОбщегоНазначения.СформироватьСуммуПрописью(Сумма, ВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(ОбластьСуммаПрописью);
		
		ОбластьПодписи.Параметры.ПринялОтпустил=ТекстПринялОтпустил;
		ТабДокумент.Вывести(ОбластьПодписи);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;

	Возврат ТабДокумент;
КонецФункции //2020 Перенести в другой модуль


Функция СписокВстроенныхФорм(ВладелецСсылка) Экспорт
	Если ВладелецСсылка.Предопределенный Тогда
		стрТипВидОбъекта=Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(ВладелецСсылка);
		стрТипВидОбъекта=стрЗаменить(стрТипВидОбъекта, "_", Символы.ПС);
	Иначе
		стрТипВидОбъекта=ВладелецСсылка.ПолноеИмя;
		стрТипВидОбъекта=стрЗаменить(стрТипВидОбъекта, ".", Символы.ПС);
	КонецЕсли; 

	стрТипОбъекта=СтрПолучитьСтроку(стрТипВидОбъекта, 1);
	стрВидОбъекта=СтрПолучитьСтроку(стрТипВидОбъекта, 2);

	Попытка
		Если стрТипОбъекта="Справочник" Тогда				
			ОбъектМенеджер=Справочники[стрВидОбъекта];
		ИначеЕсли стрТипОбъекта="Документ" Тогда
			ОбъектМенеджер=Документы[стрВидОбъекта];
		КонецЕсли;
	Исключение
		Возврат Новый СписокЗначений; 
	КонецПопытки;

	спПечатныеФормы=Новый СписокЗначений; СтруктураПечатныхФорм=Новый Структура;
	Попытка ОбъектМенеджер.СтруктураПечатныхФорм(СтруктураПечатныхФорм);
	Исключение Возврат спПечатныеФормы;
	КонецПопытки;

	Если ТипЗнч(СтруктураПечатныхФорм)=Тип("Структура") Тогда
		Для каждого КлючИЗначение Из СтруктураПечатныхФорм Цикл
			спПечатныеФормы.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат спПечатныеФормы;
КонецФункции

Процедура ОбновитьПечатныеФормы() Экспорт
	МассивРодителей=Новый Массив;
	МассивРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Справочники);
	МассивРодителей.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Документы);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", МассивРодителей);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Родитель В (&Родитель) 
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокФорм=СписокВстроенныхФорм(Выборка.Ссылка);
		Для каждого СтрокаКоллекции Из СписокФорм Цикл
			Ссылка=Справочники.ПечатныеФормы.НайтиПоКоду(СтрокаКоллекции.Значение, Ложь,,Выборка.Ссылка);
			Если НЕ Ссылка.Пустая() Тогда
				Объект=Ссылка.ПолучитьОбъект();
			Иначе
				Объект=Справочники.ПечатныеФормы.СоздатьЭлемент();
				Объект.Владелец=Выборка.Ссылка;
				Объект.Код=СтрокаКоллекции.Значение;
			КонецЕсли;
			Объект.Наименование=СтрокаКоллекции.Представление;
			Объект.Встроенная=Истина;
			Объект.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
 
Функция ИнициализацияОтбора(Ссылка, Владелец, КомпоновщикНастроек=Неопределено) Экспорт
	стрИсточникДанных=СтрЗаменить(Владелец.ИмяПредопределенныхДанных, "_", ".");
	
	СхемаКомпоновкиДанных=Новый СхемаКомпоновкиДанных;

	ИсточникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя="ИсточникДанных";
	ИсточникДанных.СтрокаСоединения="";
	ИсточникДанных.ТипИсточникаДанных="Local";
	
	НаборДанных=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя="НаборДанных";
	НаборДанных.ИсточникДанных="ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей=Истина;
	НаборДанных.Запрос="Выбрать *, &ТекущийПользователь Как ТекущийПользователь Из "+стрИсточникДанных+" Как ИсточникДанных";

	АдресСхемыКомпоновкиДанных=ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);

	Если КомпоновщикНастроек=Неопределено Тогда
		КомпоновщикНастроек=Новый КомпоновщикНастроекКомпоновкиДанных;
	КонецЕсли;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));

	стрНастройкиОтбора=Ссылка.НастройкиОтбора;
	Если ЗначениеЗаполнено(стрНастройкиОтбора) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(УниверсальныеМеханизмыСервер.ЗначениеИзСтрокиXML(стрНастройкиОтбора));
	КонецЕсли;

	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Возврат КомпоновщикНастроек; 
КонецФункции

Функция УсловиеВыполнено(Ссылка, ПечатнаяФормаСсылка, ПечатнаяФормаВладелец) Экспорт
	Возврат МетаконфигураторСервер.УсловиеВыполнено(ПечатнаяФормаВладелец.ИмяПредопределенныхДанных, ПечатнаяФормаСсылка.НастройкиОтбора, Ссылка);

	//стрНастройкиОтбора=ПечатнаяФормаСсылка.НастройкиОтбора;
	//Если Не ЗначениеЗаполнено(стрНастройкиОтбора) Тогда Возврат Истина; КонецЕсли;

	//стрИсточникДанных=СтрЗаменить(ПечатнаяФормаВладелец.ИмяПредопределенныхДанных, "_", ".");	
	
	//СхемаКомпоновкиДанных=Новый СхемаКомпоновкиДанных;

	//ИсточникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	//ИсточникДанных.Имя="ИсточникДанных";
	//ИсточникДанных.СтрокаСоединения="";
	//ИсточникДанных.ТипИсточникаДанных="Local";
	//
	//НаборДанных=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	//НаборДанных.Имя="НаборДанных";
	//НаборДанных.ИсточникДанных="ИсточникДанных";
	//НаборДанных.АвтоЗаполнениеДоступныхПолей=Истина;
	//НаборДанных.Запрос="
	//|Выбрать *, &ТекущийПользователь Как ТекущийПользователь
	//|Из "+стрИсточникДанных+" Как ИсточникДанных
	//|Где Ссылка = &Ссылка
	//|";

	//КомпоновщикНастроек=Новый КомпоновщикНастроекКомпоновкиДанных;
	//КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//КомпоновщикНастроек.ЗагрузитьНастройки(УниверсальныеМеханизмыСервер.ЗначениеИзСтрокиXML(стрНастройкиОтбора));
	//КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	//КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", Ссылка);
	//	
	//ГруппировкаКомпоновкиДанных=КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	//ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	//ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	//
	//ПолеГруппировки=ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//ПолеГруппировки.Использование=Истина;
	//ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных("Ссылка");
	//
	//КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	//
	//тзДанные=Новый ТаблицаЗначений;
	//ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	//ПроцессорВывода.УстановитьОбъект(тзДанные);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	//
	//Возврат НЕ тзДанные.Количество()=0; 
КонецФункции



Функция ОтветственныеЛицаОрганизации(Организация, ДатаСреза, Объект=Неопределено, МассивВидовДокументов=Неопределено) Экспорт

	Результат=Новый Структура("Руководитель,РуководительДолжность,РуководительФизЛицо,ГлавныйБухгалтер,ГлавныйБухгалтерДолжность,ГлавныйБухгалтерФизЛицо,Кассир,
	|КассирДолжность,КассирФизЛицо,РуководительКадровойСлужбы,РуководительКадровойСлужбыДолжность,РуководительКадровойСлужбыФизЛицо,Исполнитель,ИсполнительДолжность,
	|ИсполнительФизЛицо,ПредседательКомиссии, ПредседательКомиссииДолжность,ПредседательКомиссииФизЛицо,ЧленКомиссии1,ЧленКомиссииДолжность1,ЧленКомиссииФизЛицо1,
	|ЧленКомиссии2,ЧленКомиссииДолжность2,ЧленКомиссииФизЛицо2,ЧленКомиссии3,ЧленКомиссииДолжность3,ЧленКомиссииФизЛицо3,РуководительДействуетНаОсновании,
	|ГлавныйБухгалтерДействуетНаОсновании,РуководительКадровойСлужбыДействуетНаОсновании,КассирДействуетНаОсновании,ИсполнительДействуетНаОсновании,
	|ПредседательКомиссииДействуетНаОсновании,ЧленКомиссии1ДействуетНаОсновании,ЧленКомиссии2ДействуетНаОсновании,ЧленКомиссии3ДействуетНаОсновании");
	
	Если Организация=Неопределено Тогда Возврат Результат; КонецЕсли;	
	
	Если МассивВидовДокументов=Неопределено Тогда
		МассивВидовДокументов=Новый Массив;
		МассивВидовДокументов.Добавить(Неопределено);
		МассивВидовДокументов.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
		Если НЕ Объект=Неопределено Тогда
			стрТипВидОбъекта=УправлениеКонфигурациейСервер.ТипОбъекта(Объект, 1, "_");
			МассивВидовДокументов.Добавить(УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(стрТипВидОбъекта));
		КонецЕсли;
	КонецЕсли;
	
	ЗапросПоЛицам=Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза", ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("ВидДокумента", МассивВидовДокументов);
	ЗапросПоЛицам.Текст="
	|ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ВидДокумента,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ДействуетНаОсновании КАК ДействуетНаОсновании,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОПолное
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ ОтветственныеЛицаОрганизацийСрезПоследних.ВидДокумента В (&ВидДокумента)
	|";
	тзВыборка=ЗапросПоЛицам.Выполнить().Выгрузить();
	тзВыборка.Сортировать("ВидДокумента Убыв");

	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.Руководитель          = ОтветственноеЛицо[0].ФИОПолное;
		Результат.РуководительДолжность = ОтветственноеЛицо[0].Должность;
		Результат.РуководительФизЛицо   = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.РуководительДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	
	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.ГлавныйБухгалтер      = ОтветственноеЛицо[0].ФИОПолное;
		Результат.ГлавныйБухгалтерДолжность= ОтветственноеЛицо[0].Должность;
		Результат.ГлавныйБухгалтерФизЛицо= ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.ГлавныйБухгалтерДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	
	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.РуководительКадровойСлужбы      = ОтветственноеЛицо[0].ФИОПолное;
		Результат.РуководительКадровойСлужбыДолжность= ОтветственноеЛицо[0].Должность;
		Результат.РуководительКадровойСлужбыФизЛицо = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.РуководительКадровойСлужбыДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	
	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Кассир));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.Кассир                = ОтветственноеЛицо[0].ФИОПолное;
		Результат.КассирДолжность       = ОтветственноеЛицо[0].Должность;
		Результат.КассирФизЛицо         = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.КассирДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	
	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.Исполнитель                = ОтветственноеЛицо[0].ФИОПолное;
		Результат.ИсполнительДолжность       = ОтветственноеЛицо[0].Должность;
		Результат.ИсполнительФизЛицо         = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.ИсполнительДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;

	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ПредседательКомиссии));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.ПредседательКомиссии  = ОтветственноеЛицо[0].ФИОПолное;
		Результат.ПредседательКомиссииДолжность = ОтветственноеЛицо[0].Должность;
		Результат.ПредседательКомиссииФизЛицо  = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.ПредседательКомиссииДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	
	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ЧленКомиссии1));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.ЧленКомиссии1         = ОтветственноеЛицо[0].ФИОПолное;
		Результат.ЧленКомиссииДолжность1= ОтветственноеЛицо[0].Должность;
		Результат.ЧленКомиссииФизЛицо1  = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.ЧленКомиссии1ДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	
	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ЧленКомиссии2));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.ЧленКомиссии2         = ОтветственноеЛицо[0].ФИОПолное;
		Результат.ЧленКомиссииДолжность2= ОтветственноеЛицо[0].Должность;
		Результат.ЧленКомиссииФизЛицо2  = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.ЧленКомиссии2ДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	ОтветственноеЛицо=тзВыборка.НайтиСтроки(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ЧленКомиссии3));
	Если ОтветственноеЛицо.Количество()>0 Тогда
		Результат.ЧленКомиссии3         = ОтветственноеЛицо[0].ФИОПолное;
		Результат.ЧленКомиссииДолжность3= ОтветственноеЛицо[0].Должность;
		Результат.ЧленКомиссииФизЛицо3  = ОтветственноеЛицо[0].ФизическоеЛицо;
		Результат.ЧленКомиссии3ДействуетНаОсновании   = ОтветственноеЛицо[0].ДействуетНаОсновании;
	КонецЕсли;
	
	Возврат Результат;  
КонецФункции

Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт
	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	Если Организация <> Неопределено тогда
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
				Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Исполнитель <> Неопределено тогда
			
			ЗапросПоИсполнителям = Новый Запрос();
			ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
			ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
			ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
			
			ЗапросПоИсполнителям.Текст = 
			"ВЫБРАТЬ
			|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
			|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ, РаботникиОрганизацииСрезПоследних.Сотрудник.Наименование) КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|		&ДатаСреза,
			|		Организация = &ГоловнаяОрганизация
			|			И Сотрудник.ФизЛицо = &Исполнитель
			|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
			|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
			|ГДЕ
			|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация";
			ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();
			
			Если ВыборкаИсполнителей.Следующий() тогда
				Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
				Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции



// Подключает компоненту, выполненную по технологии Native API и COM.
// Компонента должна храниться в макете конфигурации в виде ZIP-архива.
//
// Параметры:
//  Идентификатор   - Строка - идентификатор объекта внешней компоненты.
//  ПолноеИмяМакета - Строка - полное имя макета конфигурации, хранящего ZIP-архив.
//
// Возвращаемое значение:
//  AddIn, Неопределено - экземпляр объекта внешней компоненты или Неопределено, если не удалось создать.
//
// Пример:
//
//  ПодключаемыйМодуль = ОбщегоНазначения.ПодключитьКомпонентуИзМакета(
//      "CNameDecl",
//      "ОбщийМакет.КомпонентаСклоненияФИО");
//
//  Если ПодключаемыйМодуль <> Неопределено Тогда 
//      // ПодключаемыйМодуль содержит созданный экземпляр подключенной компоненты.
//  КонецЕсли;
//
//  ПодключаемыйМодуль = Неопределено;
//
Функция ПодключитьКомпонентуИзМакета(Идентификатор, ПолноеИмяМакета) Экспорт
	ПодключаемыйМодуль = Неопределено;
	Если Не МакетСуществует(ПолноеИмяМакета) Тогда 
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на сервере
			           |из %2
			           |по причине:
			           |Подключение на сервере не из макета запрещено'"),
			Идентификатор,
			ПолноеИмяМакета);
	КонецЕсли;
	
	Местоположение = ПолноеИмяМакета;
	СимволическоеИмя = Идентификатор + "SymbolicName";
	
	Если ПодключитьВнешнююКомпоненту(Местоположение, СимволическоеИмя) Тогда
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + СимволическоеИмя + "." + Идентификатор);
			Если ПодключаемыйМодуль = Неопределено Тогда 
				ВызватьИсключение НСтр("ru = 'Оператор Новый вернул Неопределено'");
			КонецЕсли;
		Исключение
			ПодключаемыйМодуль = Неопределено;
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если ПодключаемыйМодуль = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать объект внешней компоненты ""%1"", подключенной на сервере
				           |из макета ""%2"",
				           |по причине:
				           |%3'"),
				Идентификатор,
				Местоположение,
				ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение внешней компоненты на сервере'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на сервере из макета ""%2"" по причине: Метод ПодключитьВнешнююКомпоненту вернул Ложь.'"), Идентификатор, Местоположение);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение внешней компоненты на сервере'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецЕсли;

	Возврат ПодключаемыйМодуль;	
КонецФункции



// Проверка существования макета по метаданным конфигурации и расширений.
//
// Параметры:
//  ПолноеИмяМакета - Строка - полное имя макета.
//
// Возвращаемое значение:
//  Булево - признак существования макета.
//
Функция МакетСуществует(ПолноеИмяМакета)
	Макет=Метаданные.НайтиПоПолномуИмени(ПолноеИмяМакета);
	Если ТипЗнч(Макет)=Тип("ОбъектМетаданных") Тогда 
		Шаблон=Новый Структура("ТипМакета");
		ЗаполнитьЗначенияСвойств(Шаблон, Макет);
		ТипМакета=Неопределено;
		Если Шаблон.Свойство("ТипМакета", ТипМакета) Тогда 
			Возврат НЕ ТипМакета=Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;	
КонецФункции

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список="", СПрефиксом=Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",                " ИНН ");
	СоответствиеПараметров.Вставить("КПП",                " КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",	  " ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",           " тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",         " р/с ");
	СоответствиеПараметров.Вставить("Банк",               " в банке ");
	СоответствиеПараметров.Вставить("БИК",                " БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           " к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          " Код по ОКПО ");

	Результат="";
	Список=Список+?(Прав(Список, 1)=",", "", ",");
	ЧислоПараметров=СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл
		ПозЗапятой = Найти(Список, ",");
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			Попытка
				СтрокаДополнения="";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				Если ПустаяСтрока(СтрокаДополнения) Тогда Продолжить; КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат=Результат+?(СПрефиксом=Истина, Префикс, "")+СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	Возврат СокрЛП(Результат);
КонецФункции

Функция ДолжностьОтветственногоЛица(ФизЛицо, ДатаПериода, Организация) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация) Тогда Возврат ""; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо"    , ФизЛицо);
	Запрос.УстановитьПараметр("ДатаПериода", ДатаПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Должность.Представление КАК Должность
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаПериода, СтруктурнаяЕдиница = &Организация И ФизическоеЛицо = &ФизЛицо)
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Должность, ""); 
КонецФункции

// Функция собирает паспортные данные физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить паспортные данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с паспортными данными.
//
Функция ПаспортныеДанные(ФизЛицо, ДатаПериода) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);
	Запрос.УстановитьПараметр("ДокументВид", ?(ФизЛицо.ОсновнойПаспорт.Пустая(), Справочники.ДокументыУдостоверяющиеЛичность.ПАСПОРТ_РОССИИ, ФизЛицо.ОсновнойПаспорт));
	Запрос.Текст=" 
	|ВЫБРАТЬ
	|	ДокументВид        КАК Вид,
	|	ДокументСерия      КАК Серия,
	|	ДокументНомер      КАК Номер,
	|	ДокументДатаВыдачи КАК ДатаВыдачи,
	|	ДокументКемВыдан   КАК Выдан
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ПарДатаПериода, ДокументВид=&ДокументВид И ФизЛицо = &ПарФизЛицо)
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда Возврат ""; КонецЕсли; 

	Результат=Новый Структура("Вид,Серия,Номер,ДатаВыдачи,Выдан");
    ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт
	Результат=Новый Структура("Фамилия, Имя, Отчество");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ДатаПериода", ДатаПериода);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаПериода, ФизЛицо = &ФизЛицо)
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт
	ЦелаяЧасть=Цел(Количество);
	ДробнаяЧасть=Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);
КонецФункции

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СуммаПрописью(Сумма, Валюта) Экспорт //ОбщегоНазначения.СформироватьСуммуПрописью
	Если Валюта.ПараметрыПрописиНаРусском="" Тогда
		Возврат ОбщегоНазначения.ФорматСумм(Сумма);
	КонецЕсли;
	Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ГенераторQRКода=КомпонентаФормированияQRКода();
	Если ГенераторQRКода=Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	Попытка ДвоичныеДанныеКартинки=ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат ДвоичныеДанныеКартинки;
КонецФункции

Процедура ВывестиQRКод(QRСтрока, ОбластьМакета, ИмяРисунка="QRКод", Ссылка=Неопределено) Экспорт
	Если ПустаяСтрока(QRСтрока) Тогда Возврат; КонецЕсли;
		
	ДанныеQRКода=ПечатныеФормыСервер.ДанныеQRКода(QRСтрока, 0, 190);

	Если ТипЗнч(ДанныеQRКода)=Тип("ДвоичныеДанные") Тогда
		//ОбластьМакета.Рисунки.QRКод.Картинка=Новый Картинка(ДанныеQRКода);
		ОбластьМакета.Рисунки[ИмяРисунка].Картинка=Новый Картинка(ДанныеQRКода);
	Иначе
		Шаблон = Нстр("ru = 'Не удалось сформировать QR-код для документа %1.
		|Технические подробности см. в журнале регистрации.'");
		ТекстСообщения=СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Функция КомпонентаФормированияQRКода()
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода. Подробности в журнале регистрации.'");

	QRCodeGenerator=ПодключитьКомпонентуИзМакета("QRCodeExtension", "ОбщийМакет.КомпонентаПечатиQRКода");
	Если QRCodeGenerator=Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат QRCodeGenerator;
КонецФункции

// Формирует описание серий и характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ
Функция ПредставлениеСерий(Выборка, Параметр=Истина) Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат)

КонецФункции

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       – Табличный документ
//  ВыводимыеОбласти  – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке=Истина) Экспорт
	Попытка Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение Возврат РезультатПриОшибке;
	КонецПопытки;
КонецФункции