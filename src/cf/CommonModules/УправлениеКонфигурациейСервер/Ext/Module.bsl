Функция ПараметрыСеансаИнтернетСервиса(ИнтернетСервис) Экспорт
	ТекущийПользователь=НастройкиПользователяСервер.ТекущийПользователь();

	тзПравила=Новый ТаблицаЗначений;
	тзПравила.Колонки.Добавить("ИндексПользователя");
	тзПравила.Колонки.Добавить("Настройка");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Сервис", ИнтернетСервис);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Настройка КАК Настройка,
	|	ИсточникДанных.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ИнтернетСервисыНастройки КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Сервис = &Сервис
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИндексПользователя=УправлениеПользователямиСервер.ИндексПользователя(Истина, ТекущийПользователь, Выборка.Пользователь);
		Если ИндексПользователя=Неопределено Тогда Продолжить;	КонецЕсли;
		
		НоваяСтрока=тзПравила.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИндексПользователя=ИндексПользователя;
	КонецЦикла;
	Если НЕ тзПравила.Количество()=0 Тогда
		тзПравила.Сортировать("ИндексПользователя Возр");
		СтруктураДанных=тзПравила[0].Настройка.Получить();
		Если ТипЗнч(СтруктураДанных)=Тип("Структура") Тогда
			Возврат СтруктураДанных;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Режим: 0 - тип объекта, 1 - тип+вид объекта
Функция ТипОбъекта(Объект, Режим=0, Разделитель=".") Экспорт
	Попытка мдОбъект=Объект.Метаданные();
	Исключение Возврат Строка(ТипЗнч(Объект));
	КонецПопытки;

	стрТипВид=мдОбъект.ПолноеИмя();
	
	Если Режим=0 Тогда
		Возврат СтрЗаменить(стрТипВид, "."+мдОбъект.Имя, "");
	КонецЕсли;
	
	Если Разделитель<>"." Тогда
		стрТипВид=стрЗаменить(стрТипВид, ".", Разделитель);
	КонецЕсли;

	Возврат стрТипВид;	
КонецФункции

Функция ИдентификаторОбъектовМетаданныхСсылка(стрТипВид) Экспорт
	ОбъектМетаданныхСсылка=Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", стрЗаменить(стрТипВид, "_", "."));
	Если ОбъектМетаданныхСсылка.Пустая() Тогда
		Попытка ОбъектМетаданныхСсылка=Справочники.ИдентификаторыОбъектовМетаданных[стрЗаменить(стрТипВид, ".", "_")];
		Исключение
		КонецПопытки;		
	КонецЕсли;
	Возврат ОбъектМетаданныхСсылка;
КонецФункции

Функция ЗначениеРеквизитаПоСсылке(Ссылка, Путь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|"+Путь+" Как Реквизит
	|ИЗ
	|	"+Ссылка.Метаданные().ПолноеИмя()+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Реквизит, Неопределено); 
КонецФункции

Функция ЭтоФоновоеЗадание() Экспорт
    Соединения=ПолучитьСоединенияИнформационнойБазы();
	Если Соединения=Неопределено Тогда Возврат Ложь; КонецЕсли;

	НСИБ=НомерСоединенияИнформационнойБазы();
	Для Каждого СтрокаКоллекции Из Соединения Цикл
		Если СтрокаКоллекции.НомерСоединения=НСИБ Тогда
			Возврат СтрокаКоллекции.ИмяПриложения="BackgroundJob" или СтрокаКоллекции.ИмяПриложения="JobScheduler" Или СтрокаКоллекции.ИмяПриложения="COMConnection";
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ПолучитьЗначениеПараметраСеанса(стрПараметр) Экспорт
	Возврат ПараметрыСеанса[стрПараметр]; 
КонецФункции

Функция ПолучитьДанныеИБ(стрЗначение) Экспорт
	Если стрЗначение="ПолучитьБлокировкуСеансов" Тогда
		Структура=Новый Структура;
		Структура.Вставить("Значение", ПолучитьБлокировкуСеансов());
		Возврат Структура;

	ИначеЕсли стрЗначение="ПолучитьСоединенияИнформационнойБазы" Тогда
		Массив=Новый Массив;
		Массив.Добавить(ПолучитьСоединенияИнформационнойБазы());
		Возврат Массив;

	ИначеЕсли стрЗначение="НомерСоединенияИнформационнойБазы" Тогда
		Возврат НомерСоединенияИнформационнойБазы();

	ИначеЕсли стрЗначение="КонфигурацияБазыДанныхИзмененаДинамически" Тогда
		Возврат КонфигурацияБазыДанныхИзмененаДинамически();		
	КонецЕсли;
КонецФункции

Функция КонтрольЗавершенияРаботыПользователей() Экспорт
	Если ПараметрыСеанса.БлокировщикСеансов Тогда Возврат Неопределено; КонецЕсли; 
	ТекущийРежим=ПолучитьБлокировкуСеансов();

	Если ТекущийРежим.Установлена Тогда //Блокировка установлена
		Если ЗначениеЗаполнено(ТекущийРежим.Конец) И ТекущаяДата() > ТекущийРежим.Конец Тогда
			Возврат Неопределено;
		КонецЕсли;

		ТекущийМомент=ТекущаяДата();

		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТекстМодуля");
		СтруктураПараметров.Вставить("Сообщение");

		Если НЕ ЗначениеЗаполнено(ТекущийРежим.Начало) ИЛИ ТекущийРежим.Начало - ТекущийМомент <= -120 Тогда			
			СтруктураПараметров.ТекстМодуля="ПрекратитьРаботуСистемы(Истина);";

		ИначеЕсли ТекущийРежим.Начало - ТекущийМомент <= -60 Тогда
			СтруктураПараметров.ТекстМодуля="ЗавершитьРаботуСистемы(Ложь, Истина);";
			СтруктураПараметров.Сообщение="Работа системы завершается." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение);

		ИначеЕсли ТекущийРежим.Начало - ТекущийМомент <= 0 Тогда
			СтруктураПараметров.ТекстМодуля="ЗавершитьРаботуСистемы(Ложь, Истина);";
			СтруктураПараметров.Сообщение="Работа системы завершается." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение);

		ИначеЕсли ТекущийРежим.Начало - ТекущийМомент <= 300 Тогда
			СтруктураПараметров.Сообщение="Работа системы завершается." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметров; 
КонецФункции

Функция ПараметрыПубликацииИБ() Экспорт
	ПараметрыПубликации=Константы.ПараметрыПубликацииИБ.Получить();
	Возврат ПараметрыПубликации.Получить();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа системной информацией

Функция ПолучитьСистемнуюИнформацию() Экспорт
	//СистемнаяИнформация=Новый СистемнаяИнформация;	
	Структура=Новый Структура("ВерсияОС,ВерсияПриложения,ОперативнаяПамять,Процессор");
	ЗаполнитьЗначенияСвойств(Структура, Новый СистемнаяИнформация);	
	Возврат Структура; 
КонецФункции
 
Функция ПолучитьИмяКомпьютера() Экспорт
	Возврат ИмяКомпьютера();
КонецФункции

Функция ПолучитьКаталогВременныхФайлов() Экспорт
	Возврат КаталогВременныхФайлов();
КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Константы."+ИмяКонстанты+" КАК Ссылка
	|ИЗ
	|	Константы КАК Константы";
	Выборка=Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Склонение ФИО

Функция ФИО(Сотрудник, Падеж="Именительный", КраткоеФИО=Ложь, НаДату="") Экспорт
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда Возврат ""; КонецЕсли; 

	Если ТипЗнч(Сотрудник)=Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если Не ЗначениеЗаполнено(НаДату) Тогда НаДату=ТекущаяДата(); КонецЕсли;
		стрПол=Строка(Сотрудник.Пол);
		СтруктураФИО=РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(НаДату, Новый Структура("ФизЛицо", Сотрудник));
		
		стрФамилия=СокрЛП(СтруктураФИО.Фамилия);
		стрИмя=СокрЛП(СтруктураФИО.Имя);
		стрОтчество=СокрЛП(СтруктураФИО.Отчество);

	Иначе //Строка
		стрПол=Строка(НаДату); //Пусть данный параметр выступает в качестве пола
		стрСотрудник=стрЗаменить(Сотрудник, " ", Символы.ПС);
		стрФамилия=СтрПолучитьСтроку(стрСотрудник, 1);
		стрИмя=СтрПолучитьСтроку(стрСотрудник, 2);
		стрОтчество=СтрПолучитьСтроку(стрСотрудник, 3);
	КонецЕсли;

	Если Падеж="Именительный" Тогда
		Если НЕ КраткоеФИО Тогда Возврат стрФамилия+" "+стрИмя+" "+стрОтчество; КонецЕсли;
		Возврат стрФамилия+" "+Лев(стрИмя, 1)+"."+Лев(стрОтчество, 1)+".";
	КонецЕсли;

	МассивДанныхФамилия=ПолучитьСклоненияСтроки(стрФамилия, "ПЛ="+стрПол,"ПД="+Падеж);
	Если Не КраткоеФИО Тогда
		МассивДанныхИмя=ПолучитьСклоненияСтроки(стрИмя, "ПЛ="+стрПол,"ПД="+Падеж);
		МассивДанныхОтчество=ПолучитьСклоненияСтроки(стрОтчество, "ПЛ="+стрПол,"ПД="+Падеж);
		Возврат МассивДанныхФамилия[0]+" "+МассивДанныхИмя[0]+" "+МассивДанныхОтчество[0];
	КонецЕсли;

	Возврат МассивДанныхФамилия[0]+" "+Лев(стрИмя, 1)+"."+Лев(стрОтчество, 1)+".";
КонецФункции

Функция ВыполнитьСклонениеСлова(Слово, Род="Женский", КатегорияСлова="") Экспорт
	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("Именительный", "");
	СтруктураВозврата.Вставить("Родительный", "");
	СтруктураВозврата.Вставить("Дательный", "");
	СтруктураВозврата.Вставить("Винительный", "");
	СтруктураВозврата.Вставить("Творительный", "");
	СтруктураВозврата.Вставить("Предложный", "");
	Если ПустаяСтрока(Слово) Тогда Возврат СтруктураВозврата; КонецЕсли;

	//МассивДанных=ПолучитьСклоненияСтроки(Слово, "ПЛ="+Род, "ПД=Именительный;ПД=Родительный;ПД=Дательный;ПД=Винительный;ПД=Творительный;ПД=Предложный");
		
	СтруктураВозврата.Именительный=ПолучитьСклоненияСтроки(Слово, "ПЛ="+Род, "ПД=Именительный")[0];
	СтруктураВозврата.Родительный=ПолучитьСклоненияСтроки(Слово, "ПЛ="+Род, "ПД=Родительный")[0];
	СтруктураВозврата.Дательный=ПолучитьСклоненияСтроки(Слово, "ПЛ="+Род, "ПД=Дательный")[0];
	СтруктураВозврата.Винительный=ПолучитьСклоненияСтроки(Слово, "ПЛ="+Род, "ПД=Винительный")[0];
	СтруктураВозврата.Творительный=ПолучитьСклоненияСтроки(Слово, "ПЛ="+Род, "ПД=Творительный")[0];
	СтруктураВозврата.Предложный=ПолучитьСклоненияСтроки(Слово, "ПЛ="+Род, "ПД=Предложный")[0];

	Возврат СтруктураВозврата;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с датами\временем

Функция ПолучитьРазностьДат(Дата1, Дата2, Масштаб="День") Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗНОСТЬДАТ(&Дата1, &Дата2, "+Масштаб+") КАК РазностьДат";
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2+86400);
	Возврат Запрос.Выполнить().Выгрузить()[0].РазностьДат;	
КонецФункции

Функция ПолучитьРазностьВремени(Время1, Время2) Экспорт
    Минуты=Цел(Время1-Время2)/60;
	Если Минуты>60 Тогда
		Часы=Формат(Минуты/60, "ЧЦ=2; ЧВН=");
		Минуты=Формат(Минуты%60, "ЧЦ=2; ЧВН=");
		Секунды=Формат((Время1-Время2)%60, "ЧЦ=2; ЧВН=");
	Иначе
		Часы="00";
		Минуты=Формат(Минуты, "ЧЦ=2; ЧВН=");
		Секунды=Формат((Время1-Время2)%60, "ЧЦ=2; ЧВН=");
	КонецЕсли;
	
	Возврат СокрЛП(Часы)+":"+СокрЛП(Минуты)+":"+СокрЛП(Секунды);
КонецФункции
 
Функция НомерКвартала(ДляДаты) Экспорт
	Возврат Цел((Месяц(ДляДаты)-1)/3)+1;
КонецФункции

Функция НомерНедели(ДляДаты) Экспорт
	НомерНедели=0; ОдинДень=86400;
	текДата=НачалоМесяца(ДляДаты);
	Пока ДляДаты+ОдинДень>текДата Цикл
		текДата=КонецНедели(текДата)+ОдинДень;
		НомерНедели=НомерНедели+1;
	КонецЦикла;
	Возврат НомерНедели;
КонецФункции

Функция ОпределитьДату(ДатаНач, ЧислоДней) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ЧислоДней",           ЧислоДней);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейКалендаря.Предпраздничный);
	
	Если ЧислоДней > 0 Тогда
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ "+ЧислоДней+"
		|	ИсточникДанных.Дата
		|ИЗ
		|	РегистрСведений.Календарь КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Дата > &ДатаНач И (ИсточникДанных.ВидДня = &РабочийДень ИЛИ ИсточникДанных.ВидДня = &ПредпраздничныйДень)
		|";		
	Иначе
		ЧислоДней = -ЧислоДней;
		
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ "+ЧислоДней+"
		|	ИсточникДанных.Дата
		|ИЗ
		|	РегистрСведений.Календарь КАК ИсточникДанных
		|ГДЕ 
		|	ИсточникДанных.Дата < &ДатаНач И (ИсточникДанных.ВидДня = &РабочийДень ИЛИ ИсточникДанных.ВидДня = &ПредпраздничныйДень)
        |УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|";		
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать();	
	Если Выборка.Количество()=ЧислоДней Тогда
		Пока Выборка.Следующий() Цикл
			ТекДата=Выборка.Дата;
		КонецЦикла;
		Возврат ТекДата;
	КонецЕсли;
	
	Возврат Неопределено;	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Работа с типами данных

Функция НайтиСсылкуПоGUID(знач УИД) Экспорт
    
    ЭтоМассив=ТипЗнч(УИД) = Тип("Массив");

    МассивУидов=Новый Массив;
    Если ЭтоМассив Тогда
        МассивУидов=УИД;
    Иначе
        МассивУидов.Добавить(УИД);
    КонецЕсли;
    
    МассивМетаданных=Новый Массив;    
	МассивМетаданных.Добавить(Справочники);
	МассивМетаданных.Добавить(Документы);
	МассивМетаданных.Добавить(ПланыВидовХарактеристик);
	МассивМетаданных.Добавить(ПланыСчетов);
	МассивМетаданных.Добавить(ПланыВидовРасчета);
	МассивМетаданных.Добавить(ПланыОбмена);
	МассивМетаданных.Добавить(БизнесПроцессы);
	МассивМетаданных.Добавить(Задачи);
    
    МассивТипов=Новый Массив;     
    Для Каждого СтрокаМассива Из МассивМетаданных Цикл
        Для Каждого Тип Из СтрокаМассива.ТипВсеСсылки().Типы() Цикл
            МассивТипов.Добавить(Тип);
        КонецЦикла;
    КонецЦикла;
        
    ТаблицаСсылок=Новый ТаблицаЗначений;
    ТаблицаСсылок.Колонки.Добавить("УИД"    , Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
    ТаблицаСсылок.Колонки.Добавить("Ссылка" , Новый ОписаниеТипов(МассивТипов));
    
    Для Каждого СтрМетаданное Из МассивМетаданных Цикл
        Для Каждого Менеджер Из СтрМетаданное Цикл   
            Для Каждого СтрУИД Из МассивУидов Цикл
                Попытка
                    НоваяСтрока=ТаблицаСсылок.Добавить();
                    НоваяСтрока.Ссылка=Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрУИД));
                    НоваяСтрока.УИД=СтрУИД;
                Исключение
                КонецПопытки;
            КонецЦикла;
        КонецЦикла;
    КонецЦикла;
            
    Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	Запрос.Текст="
	|ВЫБРАТЬ
    |   ТаблицаСсылок.Ссылка КАК Ссылка,
	|   ТаблицаСсылок.УИД КАК УИД
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|   &ТаблицаСсылок КАК ТаблицаСсылок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ВТ.Ссылка КАК Ссылка,
	|   ВТ.УИД КАК УИД
	|ИЗ
	|   ВТ КАК ВТ
	|ГДЕ
	|   НЕ ВТ.Ссылка.ПометкаУдаления ЕСТЬ NULL
	|";
    РезультатЗапроса=Запрос.Выполнить();
    Если РезультатЗапроса.Пустой() Тогда Возврат Неопределено; КонецЕсли;
	Если ЭтоМассив Тогда Возврат РезультатЗапроса.Выгрузить(); КонецЕсли;
	
	ВыборкаДетальныеЗаписи=РезультатЗапроса.Выбрать();
    ВыборкаДетальныеЗаписи.Следующий();
    Возврат ВыборкаДетальныеЗаписи.Ссылка;
КонецФункции

Функция СоздатьТип(ИмяТипа, Длина=0, Точность=0) Экспорт
	Массив=Новый Массив;
	Массив.Добавить(Тип(ИмяТипа));
	Если ТипЗнч(ИмяТипа)=Тип("Строка") Тогда
		Если ИмяТипа="Строка" Тогда
			Если Точность=0 Тогда
				Квалификатор=Новый КвалификаторыСтроки(Длина);
			Иначе
				Квалификатор=Новый КвалификаторыСтроки(Длина, Точность);
			КонецЕсли;
			ОписаниеТипа=Новый ОписаниеТипов(Массив,, Квалификатор);
		ИначеЕсли ИмяТипа="Число" Тогда
			Квалификатор=Новый КвалификаторыЧисла(Длина, Точность);
			ОписаниеТипа=Новый ОписаниеТипов(Массив, Квалификатор);
		Иначе
			ОписаниеТипа=Новый ОписаниеТипов(Массив);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИмяТипа)=Тип("ОписаниеТипов") Тогда
		ОписаниеТипа=ИмяТипа;
	Иначе
		ОписаниеТипа=Массив;
	КонецЕсли;
	Возврат ОписаниеТипа;
КонецФункции

Функция ПолучитьЗначениеПоТипу(ОписаниеТипа) Экспорт
	Значение=Неопределено;
	Если ОписаниеТипа.Типы().Количество()=1 Тогда
		стрОписаниеТипа=СокрЛП(ОписаниеТипа);
		Если стрОписаниеТипа="Число" Тогда
			Значение=0;
		ИначеЕсли стрОписаниеТипа="Строка" Тогда
			Значение="";
		ИначеЕсли стрОписаниеТипа="Булево" Тогда
			Значение=Ложь;
		ИначеЕсли стрОписаниеТипа="Дата" Тогда
			Значение=Дата(01,01,0001);
		Иначе
			Значение=Новый(ОписаниеТипа.Типы()[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция ВидСравненияСтрокой(ВыбВидСравнения) Экспорт
	Если ВыбВидСравнения=ВидСравнения.Равно Тогда Возврат "="; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.НеРавно Тогда Возврат "<>"; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.Меньше Тогда Возврат "<"; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.Больше Тогда Возврат ">"; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.БольшеИлиРавно Тогда Возврат ">="; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.МеньшеИлиРавно Тогда Возврат "<="; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.ВИерархии Тогда Возврат "В иерархии"; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.НеВИерархии Тогда Возврат "Не В иерархии"; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.ВСписке Тогда Возврат " В "; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.НеВСписке Тогда Возврат " Не В "; КонецЕсли;
	Если ВыбВидСравнения=ВидСравнения.ВСпискеПоИерархии Тогда Возврат " В иерархии"; КонецЕсли; //В группе из списка
	Если ВыбВидСравнения=ВидСравнения.НеВСпискеПоИерархии Тогда Возврат " НЕ В иерархии"; КонецЕсли; //Не в группе из списка	
КонецФункции

Функция СтруктураОбъекта(ИмяФормы) Экспорт
	стрПуть=СтрЗаменить(ИмяФормы, ".", Символы.ПС);

	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("Тип", СтрПолучитьСтроку(стрПуть, 1));
	СтруктураВозврата.Вставить("Вид", СтрПолучитьСтроку(стрПуть, 2));

	Если СтруктураВозврата.Тип="Документ" Тогда
	    СтруктураВозврата.Вставить("ЭтоОбъект", НЕ Метаданные.Документы.Найти(СтруктураВозврата.Вид)=Неопределено);
	ИначеЕсли СтруктураВозврата.Тип="Справочник" Тогда
		СтруктураВозврата.Вставить("ЭтоОбъект", НЕ Метаданные.Справочники.Найти(СтруктураВозврата.Вид)=Неопределено);
	КонецЕсли;

	Возврат СтруктураВозврата;
КонецФункции

Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	МассивСтрок=СтрРазделить(Ссылка.Метаданные().ПолноеИмя(), ".");
	ТипОбъект=МассивСтрок[0];
	ИмяОбъекта=МассивСтрок[1];
	Если ТипОбъект="Справочник" Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли ТипОбъект="Документ" Тогда
		Возврат Документы[ИмяОбъекта];
	ИначеЕсли ТипОбъект="БизнесПроцесс" Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли ТипОбъект="ПланВидовХарактеристик" Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ТипОбъект="ПланСчетов" Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ТипОбъект="ПланВидовРасчета" Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли ТипОбъект="Задача" Тогда
		Возврат Задачи[ИмяОбъекта];
	ИначеЕсли ТипОбъект="ПланОбмена" Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли ТипОбъект="Перечисление" Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами справочника

Функция РодительВерхнегоУровня(СсылкаНаОбъект) Экспорт
	Если СсылкаНаОбъект.Родитель.Пустая() Тогда Возврат СсылкаНаОбъект; КонецЕсли; 
	Возврат РодительВерхнегоУровня(СсылкаНаОбъект.Родитель);
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ОписаниеПериода(ДатаНачала, ДатаКонца) Экспорт
	Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда
		Возврат "Период не установлен";
	КонецЕсли;

	Если ДатаНачала='00010101000000' ИЛИ ДатаКонца = '00010101000000' Тогда
		ОписаниеПериода=Формат(ДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""...""")+" - "+Формат(ДатаКонца, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
    Иначе
		Если ДатаНачала <= ДатаКонца Тогда
			ОписаниеПериода=ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаКонца), "ФП = Истина");
			Если Лев(Строка(ДатаНачала), 5)="01.06" И Лев(Строка(ДатаКонца), 5)="31.12" Тогда
				ОписаниеПериода="2 полугодие "+стрЗаменить(Строка(Год(ДатаКонца)), Символы.НПП, "")+" г.";
			КонецЕсли;			
		Иначе
			ОписаниеПериода="Неправильно задан период!"
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеПериода;
КонецФункции

Функция ВыполнитьСкалярный(Запрос, стрАтрибут=Неопределено, ЗначениеПоУмолчанию=0) Экспорт
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ЗначениеПоУмолчанию; КонецЕсли;
	СтрокаТаблицыЗначений=РезультатЗапроса.Выгрузить()[0];
	Возврат ?(ЗначениеЗаполнено(стрАтрибут), СтрокаТаблицыЗначений[стрАтрибут], СтрокаТаблицыЗначений);
КонецФункции

Функция ПолучитьЗначениеРеквизитаОбъекта(СсылкаНаОбъект, стрРеквизит, стрТабличнаяЧасть=Неопределено, ВыбратьПервые=1) Экспорт
    Запрос=Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);

	Если стрТабличнаяЧасть=Неопределено Тогда //Реквизит шапки
	    Запрос.Текст="
    	|ВЫБРАТЬ
    	|	ИсточникДанных."+стрРеквизит+"
    	|ИЗ
		|	"+СсылкаНаОбъект.Метаданные().ПолноеИмя()+" КАК ИсточникДанных
    	|ГДЕ
    	|    Ссылка = &Ссылка
    	|";
	Иначе //Реквизит табличной части
		Запрос.Текст="
		|ВЫБРАТЬ "+?(ВыбратьПервые=0, "", "Первые "+ВыбратьПервые)+"
		|	ИсточникДанных."+стрРеквизит+"
		|ИЗ
		|	"+СсылкаНаОбъект.Метаданные().ПолноеИмя()+"."+стрТабличнаяЧасть+" КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Ссылка = &Ссылка
		|";
		Если ВыбратьПервые=0 Тогда
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
	КонецЕсли;

	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка[стрРеквизит], Неопределено);
КонецФункции

Функция ПолучитьРеквизитыОбъекта(СсылкаНаОбъект, СтруктураРеквизитов=Неопределено) Экспорт
	мдОбъект=СсылкаНаОбъект.Метаданные(); стрРеквизиты="";

	Если СтруктураРеквизитов=Неопределено Тогда    
		СтруктураРеквизитов=Новый Структура;
		Для каждого мдРеквизит Из мдОбъект.Реквизиты Цикл
			стрРеквизиты=стрРеквизиты+","+Символы.ПС+"ИсточникДанных."+мдРеквизит.Имя;
			СтруктураРеквизитов.Вставить(мдРеквизит.Имя, "");
		КонецЦикла;

	ИначеЕсли ТипЗнч(СтруктураРеквизитов)=Тип("Строка") Тогда
        стрРеквизиты=СтруктураРеквизитов;
        СтруктураРеквизитов=Новый Структура;
        СтруктураРеквизитов.Вставить(стрРеквизиты, "");

    Иначе
        Для Каждого Элемент Из СтруктураРеквизитов Цикл
            стрКлюч=Элемент.Ключ;
            Если стрКлюч="Пустая" Тогда
                стрКлюч="Выбор Когда ИсточникДанных.Ссылка=Значение("+мдОбъект.ПолноеИмя()+".ПустаяСсылка) Тогда Истина Иначе Ложь Конец Как Пустая";
            КонецЕсли;
            стрРеквизиты=стрРеквизиты+","+Символы.ПС+"ИсточникДанных."+стрКлюч;
        КонецЦикла;
    КонецЕсли; 

    Запрос=Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
    Запрос.Текст="
    |ВЫБРАТЬ
	|	ИсточникДанных.Ссылка
    |    "+стрРеквизиты+"
    |ИЗ
	|	"+мдОбъект.ПолноеИмя()+" КАК ИсточникДанных
    |ГДЕ
    |    Ссылка = &Ссылка
    |";
    Выборка=Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
    КонецЕсли;

    Возврат СтруктураРеквизитов;
КонецФункции

Функция СформироватьШтрихКод(стрИсточникДанных="БизнесПроцессыТочки", стрПрефикс="300") Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(ИсточникДанных.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	Справочник."+стрИсточникДанных+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Штрихкод ПОДОБНО ""2"+стрПрефикс+"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]""
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	текКод=?(Выборка.Код=NULL, 1, Мин(Число(Выборка.Код)+1, 99999999));

	Штрихкод="2"+стрПрефикс+Формат(текКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Возврат Штрихкод+УправлениеРозничнойТорговлейСервер.КонтрольныйСимволEAN(ШтрихКод, 13);
КонецФункции

Функция СоздатьОбработку(Имя) Экспорт
	Возврат Обработки[Имя].Создать();
КонецФункции

Функция КонфигурацияЗарегистрированна() Экспорт
	Возврат Обработки.Регистрация.КонфигурацияЗарегистрированна();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Условия выполнения

Функция ПроверкаУсловия(ЗначениеРеквизита, ТипУсловия, ЗначениеУсловия) Экспорт
	Если ТипУсловия=ВидСравнения.Равно Тогда
		Если ЗначениеРеквизита=ЗначениеУсловия Тогда Возврат Истина; КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.НеРавно Тогда
		Если НЕ ЗначениеРеквизита=ЗначениеУсловия Тогда Возврат Истина; КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.Больше Тогда
		Если ЗначениеРеквизита > ЗначениеУсловия Тогда Возврат Истина; КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.БольшеИлиРавно Тогда
		Если ЗначениеРеквизита >= ЗначениеУсловия Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.Меньше Тогда
		Если ЗначениеРеквизита < ЗначениеУсловия Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.МеньшеИлиРавно Тогда
		Если ЗначениеРеквизита <= ЗначениеУсловия Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.Содержит Тогда
		Если Найти(ЗначениеРеквизита, ЗначениеУсловия) > 0 Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.НеСодержит Тогда
		Если Найти(ЗначениеРеквизита, ЗначениеУсловия) = 0 Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.ВИерархии Тогда
		Возврат ЗначениеРеквизита.ПринадлежитЭлементу();
	ИначеЕсли ТипУсловия=ВидСравнения.НЕВИерархии Тогда
		Возврат НЕ ЗначениеРеквизита.ПринадлежитЭлементу();
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция УсловиеВыполненоПоСсылке(Ссылка, Отбор) Экспорт
	Если Отбор.Элементы.Количество()=0 Тогда Возврат Истина; КонецЕсли;

	СхемаКомпоновкиДанных=Новый СхемаКомпоновкиДанных;

	ИсточникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя="ИсточникДанных";
	ИсточникДанных.СтрокаСоединения="";
	ИсточникДанных.ТипИсточникаДанных="Local";
	
	НаборДанных=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя="НаборДанных";
	НаборДанных.ИсточникДанных="ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей=Истина;
	НаборДанных.Запрос="
	|Выбрать *
	|Из "+Ссылка.Метаданные().ПолноеИмя()+" Как ИсточникДанных
	|Где Ссылка = &Ссылка
	|";
	КомпоновщикНастроек=Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));	
	
	//************************************** КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Для каждого СтрокаКоллекции Из Отбор.Элементы Цикл
		ДинамическиеСпискиСервер.СоздатьЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор.Элементы, СтрокаКоллекции)
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", Ссылка);
		
	ГруппировкаКомпоновкиДанных=КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ПолеГруппировки=ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование=Истина;
	ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных("Ссылка");
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	тзДанные=Новый ТаблицаЗначений;
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	ПроцессорВывода.УстановитьОбъект(тзДанные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат НЕ тзДанные.Количество()=0; 
КонецФункции

Функция УсловиеВыполненоПоОбъекту(Форма, Отбор) Экспорт
	Если Отбор.Элементы.Количество()=0 Тогда Возврат Истина; КонецЕсли;

	СтруктураОбъекта=СтруктураОбъекта(Форма.ИмяФормы);
	Если СтруктураОбъекта.Тип="Документ" Тогда
	    мдОбъект=Метаданные.Документы[СтруктураОбъекта.Вид];
	ИначеЕсли СтруктураОбъекта.Тип="Справочник" Тогда
		мдОбъект=Метаданные.Справочники[СтруктураОбъекта.Вид];
	КонецЕсли;

	СтруктураТЗ=Новый Структура;
	
	//Создаем таблицу источник (по которой будем делать запрос)
	тзДанные=Новый ТаблицаЗначений;
	НоваяСтрока=тзДанные.Добавить();
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		стрИмя=СокрЛП(ЭлементОтбора.ЛевоеЗначение);
		МассивСтрок=СтрРазделить(стрИмя, ".");
		стрИсточник=?(МассивСтрок[0]="Ссылка", МассивСтрок[1], МассивСтрок[0]);

		Если НЕ мдОбъект.ТабличныеЧасти.Найти(стрИсточник)=Неопределено Тогда //Табличная часть (Товары.Номенклатура.Родитель.Код)
			Если СтруктураТЗ.Свойство(стрИсточник) Тогда Продолжить; КонецЕсли; 
			СтруктураТЗ.Вставить(стрИсточник, Форма.РеквизитФормыВЗначение("Объект."+стрИсточник).Выгрузить());
		Иначе
			Типы=Новый Массив;
			Типы.Добавить((ТипЗнч(ЭлементОтбора.ПравоеЗначение)));			

			тзДанные.Колонки.Добавить(стрИсточник, Новый ОписаниеТипов(Типы));
			НоваяСтрока[стрИсточник]=Форма.Объект[стрИсточник];
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ тзДанные.Количество()=0 Тогда
		СтруктураТЗ.Вставить("Объект", тзДанные);
	КонецЕсли; 
	
	Для каждого СтрокаКоллекции Из СтруктураТЗ Цикл
		тзДанные=СтрокаКоллекции.Значение;
		Если тзДанные.Количество()=0 Тогда Продолжить; КонецЕсли;
		
		ВнешниеНаборыДанных=Новый Структура;
		ВнешниеНаборыДанных.Вставить("ТаблицаДанных", тзДанные);
		
		СхемаКомпоновкиДанных=Новый СхемаКомпоновкиДанных;
		
		ИсточникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
		ИсточникДанных.Имя="ИсточникДанных1";
		ИсточникДанных.ТипИсточникаДанных="Local";
		
		ВнешнийНаборДанных=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		ВнешнийНаборДанных.Имя="НаборДанных1";
		ВнешнийНаборДанных.ИмяОбъекта="ТаблицаДанных";
		ВнешнийНаборДанных.ИсточникДанных="ИсточникДанных1";	

		//Макет компоновки
		Для каждого Колонка Из тзДанные.Колонки Цикл
			Поле=ВнешнийНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Поле, Колонка);
			Поле.ПутьКДанным=Колонка.Имя;
			Поле.Поле=Колонка.Имя;
		КонецЦикла;
		
		//Группировки
		ГруппировкаКомпоновкиДанных=СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		ПолеГруппировки=ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование=Истина;
		ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных(тзДанные.Колонки[0].Имя);
		
		//Отборы
		Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
			стрИмя=СокрЛП(ЭлементОтбора.ЛевоеЗначение);
			МассивСтрок=СтрРазделить(стрИмя, ".");
			стрИсточник=?(МассивСтрок[0]="Ссылка", МассивСтрок[1], МассивСтрок[0]);

			//Если НЕ СтрокаКоллекции.Ключ=стрИсточник Тогда Продолжить; КонецЕсли;
			Если НЕ мдОбъект.ТабличныеЧасти.Найти(стрИсточник)=Неопределено Тогда //Табличная часть (Товары.Номенклатура.Родитель.Код)
				Если СтрокаКоллекции.Ключ="Объект" Тогда Продолжить; КонецЕсли; 
				стрИмя=СтрЗаменить(стрИмя, СтрокаКоллекции.Ключ+".", "");
			Иначе
				Если НЕ СтрокаКоллекции.Ключ="Объект" Тогда Продолжить; КонецЕсли; 
			КонецЕсли;
			стрИмя=стрЗаменить(стрИмя, "Ссылка.", "");
			
			НовыйЭлементОтбора=СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип(ЭлементОтбора));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			НовыйЭлементОтбора.ЛевоеЗначение=Новый ПолеКомпоновкиДанных(стрИмя);			
		КонецЦикла;
		
		//Вывод
		КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		//Компоновка данных	
		ПроцессорКомпоновки=Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
		
		тзДанные1=Новый ТаблицаЗначений;
		ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.ОтображатьПроцентВывода=Истина;
		ПроцессорВывода.УстановитьОбъект(тзДанные1);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если тзДанные1.Количество()=0 Тогда Возврат Ложь; КонецЕсли; 
	КонецЦикла;

	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блокировка\разблокировка данных

Функция ЗаблокироватьДанные(Ссылка, ВерсияДанных, УникальныйИдентификатор) Экспорт
	Попытка ЗаблокироватьДанныеДляРедактирования(Ссылка, ВерсияДанных, УникальныйИдентификатор);
	Исключение Возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат "";
КонецФункции

Процедура РазблокироватьДанные(Ссылка, УникальныйИдентификатор) Экспорт
	РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Фантомные ссылки

Функция ЗначениеФантомнойСсылки(ФантомнаяСсылка) Экспорт
	СтруктураСсылки=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ФантомнаяСсылка, "Владелец,Код");
	Если СтруктураСсылки.Владелец.Предопределенный Тогда
		МассивСтрок=СтрРазделить(СтруктураСсылки.Владелец.ИмяПредопределенныхДанных, "_");
	Иначе
		МассивСтрок=СтрРазделить(СтруктураСсылки.Владелец.ПолноеИмя, ".");
	КонецЕсли;
	Если МассивСтрок.Количество() < 2 Тогда Возврат Неопределено; КонецЕсли;

	Возврат XMLЗначение(Тип(МассивСтрок[0]+"Ссылка."+МассивСтрок[1]), СтруктураСсылки.Код);
КонецФункции

Функция ФантомнаяСсылка(Ссылка) Экспорт
	ID=xmlСтрока(Ссылка);
	ВладелецСсылки=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(Ссылка.Метаданные().ПолноеИмя());
	ФантомнаяСсылка=Справочники.ФантомныеСсылки.НайтиПоКоду(ID,,,ВладелецСсылки);
	Если ФантомнаяСсылка.Пустая() Тогда
		ФантомнаяОбъект=Справочники.ФантомныеСсылки.СоздатьЭлемент();
		ФантомнаяОбъект.Владелец=ВладелецСсылки;
		ФантомнаяОбъект.Код=ID;
		ФантомнаяОбъект.Наименование=СокрЛП(Ссылка);
		ФантомнаяОбъект.Записать();
		ФантомнаяСсылка=ФантомнаяОбъект.Ссылка;
	КонецЕсли;
	Возврат ФантомнаяСсылка;
КонецФункции
