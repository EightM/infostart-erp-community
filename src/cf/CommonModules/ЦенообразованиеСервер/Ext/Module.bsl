Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС) Экспорт
	ЗначениеСтавкиНДС=УчетНалоговСервер.СтавкаНДС(СтавкаНДС);
	Возврат Сумма*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
КонецФункции

Функция УчетнаяЦенаТовара(Организация, Номенклатура, Характеристика, Склад=Неопределено, Серия=Неопределено, Дата, ПризнакУчета="УУ") Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ТипЦены
	|ИЗ
	|	РегистрСведений.НастройкаСписанияПоТипуЦены КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Номенклатура = &Номенклатура
	|	И ИсточникДанных.Организация = &Организация
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Выборка.ТипЦены, Дата);
	КонецЕсли;
	
	//Учетная цена
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ДатаКонца", Дата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.СерияНоменклатуры,
	|	ИсточникДанных.КоличествоОстаток КАК Количество,
	|	ИсточникДанных."+"Стоимость"+?(ПризнакУчета="УУ", "", ПризнакУчета)+"Остаток КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаКонца) КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Номенклатура = &Номенклатура
	|";
	
	Если Не Склад.Пустая() Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.Текст=Запрос.Текст+" И ИсточникДанных.Склад = &Склад
		|";
	КонецЕсли;
	Если Не Характеристика.Пустая() Тогда
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Характеристика);
		Запрос.Текст=Запрос.Текст+" И ИсточникДанных.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	КонецЕсли; 
	Если Не Серия.Пустая() Тогда
		Запрос.УстановитьПараметр("СерияНоменклатуры", Серия);
		Запрос.Текст=Запрос.Текст+" И ИсточникДанных.СерияНоменклатуры = &СерияНоменклатуры";
	КонецЕсли;
	
	тзЗапрос=Запрос.Выполнить().Выгрузить();
	текКоличество=тзЗапрос.Итог("Количество");
	текСтоимость =тзЗапрос.Итог("Стоимость");
	
	Если текКоличество<=0 Тогда Возврат текСтоимость; КонецЕсли;
	
	Возврат текСтоимость/текКоличество;
КонецФункции

// Функция проверяет, является ли набор-комплект спец. предложением на указанную дату.
//
// Параметры:
//  Номенклатура - набор-комплект, который нужно проверить.
//  Дата - дата, на которую нужно проверить.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный набор-комплект является спец. предложением.
//
Функция ЭтоСпецПредложение(Дата, Номенклатура, ХарактеристикаНоменклатуры, МассивПолучателей) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДеньНедели", Перечисления.ДниНедели[ДеньНедели(Дата) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя", Дата(1, 1, 1, Час(Дата), Минута(Дата), Секунда(Дата)));
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата, ПолучательСкидки В (&МассивПолучателей)) КАК СкидкиНатуральные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|ПО
	|	СкидкиНатуральные.Регистратор = ВремяДействия.Регистратор
	|ГДЕ
	|	СкидкиНатуральные.СпецПредложение = &Номенклатура
	|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = &ХарактеристикаНоменклатуры
	|	И (ВремяДействия.Регистратор ЕСТЬ NULL
	|	ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	|	И (&ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|	И (СкидкиНатуральные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ СкидкиНатуральные.ДатаОкончания >= &Дата))
	|";
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

// Формирует и выполняет запрос по ценовым диапазонам
// Параметры:
//  ТипЦен - тип цен, для которого нужно получить шкалу диапазонов
//  Дата - дата, на которую требуется получить актуальную шкалу
//
Функция ПолучитьЗапросПоЦеновымДиапазонам(ТипЦен, Дата) Экспорт
	ЗапросДиапазоны=Новый Запрос;
	ЗапросДиапазоны.УстановитьПараметр("Дата", Дата);
	ЗапросДиапазоны.УстановитьПараметр("ТипЦен", ТипЦен);
	ЗапросДиапазоны.Текст = "
	|ВЫБРАТЬ
	|	ДиапазоныЦен.ВерхняяГраница,
	|	ДиапазоныЦен.Цена,
	|	ДиапазоныЦен.Валюта
	|ИЗ
	|	РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦен
	|СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДиапазоныЦенМакс.Период) КАК Период
	|	ИЗ
	|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦенМакс
	|	) КАК ДиапазоныЦенМакс
	|ПО
	|	ДиапазоныЦен.Период = ДиапазоныЦенМакс.Период
	|УПОРЯДОЧИТЬ ПО
	|	ДиапазоныЦен.ВерхняяГраница
	|";

	Возврат ЗапросДиапазоны.Выполнить();
КонецФункции

// Получает цену по ценовым диапазонам.
// Параметры:
//  ТипЦен - тип цен, для которого нужно получить шкалу диапазонов.
//  Дата - дата, на которую требуется получить актуальную шкалу.
//  Цена - входящая цена.
//  Валюта - переменная, куда функция возвращает валюту найденной цены.
//
Функция ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, Знач Цена, Валюта, ВалютаВходящая) Экспорт

	Если ВалютаВходящая <> ТипЦен.БазовыйТипЦен.ВалютаЦены Тогда
		СтруктураКурсВходящейВалюты = МодульВалютногоУчета.КурсВалюты(ВалютаВходящая, Дата);
		СтруктураКурсНовойВалюты = МодульВалютногоУчета.КурсВалюты(ТипЦен.БазовыйТипЦен.ВалютаЦены, Дата);

		Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Цена, ВалютаВходящая, ТипЦен.БазовыйТипЦен.ВалютаЦены,
		                                  СтруктураКурсВходящейВалюты.Курс, СтруктураКурсНовойВалюты.Курс,
		                                  СтруктураКурсВходящейВалюты.Кратность, СтруктураКурсНовойВалюты.Кратность);
	КонецЕсли;

	РасчетнаяЦена = 0;

	Если Цена > 0 Тогда
		ЗапросДиапазоны=Новый Запрос;
		ЗапросДиапазоны.УстановитьПараметр("Дата", Дата);
		ЗапросДиапазоны.УстановитьПараметр("ТипЦен", ТипЦен);
		ЗапросДиапазоны.УстановитьПараметр("Цена", Цена);
		ЗапросДиапазоны.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДиапазоныЦен.Цена,
		|	ДиапазоныЦен.Валюта
		|ИЗ
		|	РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦен
		|СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ДиапазоныЦенМакс.Период) КАК Период
		|	ИЗ
		|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ДиапазоныЦенМакс
		|	) КАК ДиапазоныЦенМакс
		|ПО
		|	ДиапазоныЦен.Период = ДиапазоныЦенМакс.Период
		|ГДЕ &Цена < ДиапазоныЦен.ВерхняяГраница
		|УПОРЯДОЧИТЬ ПО
		|	ДиапазоныЦен.ВерхняяГраница
		|";
		Выборка=ЗапросДиапазоны.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасчетнаяЦена=Выборка.Цена;
			Валюта=Выборка.Валюта;
		КонецЕсли;
	КонецЕсли;

	Возврат РасчетнаяЦена;
КонецФункции

// Функция возвращает таблицу значений, выгруженную из результата запроса по скидкам.
//
// Параметры:
//  ДатаСкидок - дата, на которую необходимо рассчитать скидки.
//  МассивНоменклатуры - массив с номенклатурой.
//  МассивХарактеристик - массив с характеристиками номенклатуры.
//  МассивКачество - массив с качеством.
//  МассивПолучателей - массив с получателями скидки.
//  КурсКратность - Кратность валюты документа / курс валюты документа.
//  СуммаДокумента - сумма документа.
//  ВидОплаты - вид оплаты.
//  ДисконтнаяКарта - дисконтная карта.
//  УчетнаяПолитика - структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗапросПоСкидкам(СтруктураПараметров, МассивНоменклатуры, МассивХарактеристик, МассивКачество, МассивПолучателей, КурсКратность)
	
	ЭтоНакопительнаяСкидка=Ложь; ПроцентНакопительнойСкидки=0;
	Если ЗначениеЗаполнено(СтруктураПараметров.ДисконтнаяКарта)
	   И СтруктураПараметров.УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И СтруктураПараметров.УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И СтруктураПараметров.УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		ЭтоНакопительнаяСкидка=Истина;
	КонецЕсли;

	Если ЭтоНакопительнаяСкидка Тогда
		ПериодНакопления=ПериодРасчетаНакопительныхСкидок(СтруктураПараметров.Дата, СтруктураПараметров.УчетнаяПолитика);

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.ДатаКон);
		Запрос.УстановитьПараметр("ДисконтнаяКарта", СтруктураПараметров.ДисконтнаяКарта);
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|	) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|			   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|		) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		ПроцентНакопительнойСкидки=?(Выборка.Следующий(), Выборка.ЗначениеПорога, 0);
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                     , СтруктураПараметров.Дата);
	Запрос.УстановитьПараметр("МассивНоменклатуры"       , МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристик"      , МассивХарактеристик);
	Запрос.УстановитьПараметр("МассивКачество"           , МассивКачество);
	Запрос.УстановитьПараметр("МассивПолучателей"        , МассивПолучателей);
	Запрос.УстановитьПараметр("ДеньНедели"               , Перечисления.ДниНедели[ДеньНедели(СтруктураПараметров.Дата) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя"             , Дата(1, 1, 1, Час(СтруктураПараметров.Дата), Минута(СтруктураПараметров.Дата), Секунда(СтруктураПараметров.Дата)));
	Запрос.УстановитьПараметр("КурсКратность"            , КурсКратность);
	Запрос.УстановитьПараметр("Сумма"                    , СтруктураПараметров.СуммаДокумента);
	Запрос.УстановитьПараметр("ВидОплаты"                , СтруктураПараметров.ВидОплаты);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"          , СтруктураПараметров.ДисконтнаяКарта);
	Запрос.УстановитьПараметр("ВидДисконтнойКарты"       , ?(ЗначениеЗаполнено(СтруктураПараметров.ДисконтнаяКарта), СтруктураПараметров.ДисконтнаяКарта.ВидДисконтнойКарты, Неопределено));
	Запрос.УстановитьПараметр("ПроцентНакопительнойСкидки" , ПроцентНакопительнойСкидки);
	Запрос.Текст="
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СпрКачество.Ссылка КАК Качество,
	|	РегСкидкиНоменклатуры.Условие КАК НУсловие,
	|	РегСкидкиНоменклатуры.ЗначениеУсловия КАК НЗначениеУсловия,
	|	РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки КАК НОграничениеСкидкиНаценки,
	|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиНоменклатуры.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиНоменклатуры.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиНоменклатуры.ПроцентСкидкиНаценки") + " КАК НПроцентСкидкиНаценки,
	|	РегСкидкиПоЦеновымГруппам.Условие КАК ЦУсловие,
	|	РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЦЗначениеУсловия,
	|	РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки КАК ЦОграничениеСкидкиНаценки,
	|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки") + " КАК ЦПроцентСкидкиНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ГДЕ
	|		СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СпрХарактеристики.Владелец,
	|		СпрХарактеристики.Ссылка
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	ГДЕ
	|		СпрХарактеристики.Ссылка В (&МассивХарактеристик)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	) КАК СпрНоменклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Качество КАК СпрКачество
	|	ПО
	|	СпрКачество.Ссылка В (&МассивКачество)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегСкидкиНоменклатуры.Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество,
	|		РегСкидкиНоменклатуры.Условие,
	|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиНоменклатуры.ЗначениеУсловия
	|		КОНЕЦ КАК ЗначениеУсловия,
	|		МАКСИМУМ(РегСкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата,
	|		   Номенклатура В (&МассивНоменклатуры)
	|		   И Качество В (&МассивКачество)
	|		   И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО
	|		РегСкидкиНоменклатуры.Регистратор = ВремяДействия.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
	|	ПО
	|		РегСкидкиНоменклатуры.Валюта = КурсыВалют.Валюта
	|	ГДЕ
	|		(ВремяДействия.ДеньНедели ЕСТЬ NULL ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|		   И РегСкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//|		   И РегСкидкиНоменклатуры.ПроцентСкидкиНаценки <> 0
	|		   И (РегСкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегСкидкиНоменклатуры.ДатаОкончания >= &Дата)
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
	|	СГРУППИРОВАТЬ ПО
	|		РегСкидкиНоменклатуры.Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество,
	|		РегСкидкиНоменклатуры.Условие,
	|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиНоменклатуры.ЗначениеУсловия
	|		КОНЕЦ,
	|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|	) КАК РегСкидкиНоменклатуры
	|ПО
	|	СпрНоменклатура.Номенклатура = РегСкидкиНоменклатуры.Номенклатура
	|	   И (СпрНоменклатура.ХарактеристикаНоменклатуры = РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры ИЛИ РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	   И СпрКачество.Ссылка = РегСкидкиНоменклатуры.Качество
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|		РегСкидкиПоЦеновымГруппам.Качество,
	|		РегСкидкиПоЦеновымГруппам.Условие,
	|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
	|		КОНЕЦ КАК ЗначениеУсловия,
	|		МАКСИМУМ(РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(&Дата, Качество В (&МассивКачество) И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиПоЦеновымГруппам
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО
	|		РегСкидкиПоЦеновымГруппам.Регистратор = ВремяДействия.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
	|	ПО
	|		РегСкидкиПоЦеновымГруппам.Валюта = КурсыВалют.Валюта
	|	ГДЕ
	|		(ВремяДействия.ДеньНедели ЕСТЬ NULL ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|		   И РегСкидкиПоЦеновымГруппам.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//|		   И РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки <> 0
	|		   И (РегСкидкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегСкидкиПоЦеновымГруппам.ДатаОкончания >= &Дата)
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
	|	СГРУППИРОВАТЬ ПО
	|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|		РегСкидкиПоЦеновымГруппам.Качество,
	|		РегСкидкиПоЦеновымГруппам.Условие,
	|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
	|		КОНЕЦ,
	|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|	) КАК РегСкидкиПоЦеновымГруппам
	|ПО
	|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа = РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа
	|	   И СпрКачество.Ссылка = РегСкидкиПоЦеновымГруппам.Качество
	|ГДЕ
	|	РегСкидкиНоменклатуры.Условие ЕСТЬ НЕ NULL
	|	ИЛИ РегСкидкиПоЦеновымГруппам.Условие ЕСТЬ НЕ NULL
	|";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Функция получает период для расчета накопительных скидок.
//
// Параметры:
//  ДатаСкидок - Дата, на которую рассчитываются скидки.
//  УчетнаяПолитика - Структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  Структура - структура с ключами "ДатаНач" и "ДатаКон", начало и конец периода.
//
Функция ПериодРасчетаНакопительныхСкидок(ДатаСкидок, УчетнаяПолитика) Экспорт
	ПериодНакопления=Новый Структура("ДатаНач, ДатаКон");

	ТекПериодичность=УчетнаяПолитика.ПериодичностьРасчетаНакопленияСкидок;
	ТекПрошлыйПериод=УчетнаяПолитика.АнализироватьПрошлыйПериодНакопленияСкидок;

	Если ТекПериодичность=Перечисления.ПериодичностьНакопленияСкидок.ВТечениеВсегоПериода Тогда
		ПериодНакопления.ДатаНач = '00010101';
		ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Месяц Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -1);

			ПериодНакопления.ДатаНач = НачалоМесяца(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецМесяца(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоМесяца(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Квартал Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -3);

			ПериодНакопления.ДатаНач = НачалоКвартала(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецКвартала(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоКвартала(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Полугодие Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -6);

			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ПериодМинус);
			ПериодНакопления.ДатаКон = ОбщегоНазначения.ПолучитьКонецПолугодия(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Год Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -12);

			ПериодНакопления.ДатаНач = НачалоГода(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецГода(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоГода(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	КонецЕсли;

	Возврат ПериодНакопления;
КонецФункции

// СтруктураПараметров:
//  Дата - дата, на которую необходимо рассчитать скидки.
//  КурсКратность - Кратность валюты документа / курс валюты документа.
//  СуммаДокумента - сумма документа.
//  ВидОплаты - вид оплаты.
//  ДисконтнаяКарта - дисконтная карта.
//  УчетнаяПолитика - структура, содержащая данные учетной политики.
//  ВидРеализации - Перечисление.ВидыСкидок.Розничная и т.д.
//	Товары - таблица значений
//	- Опциональные
//		УчитыватьНДС
//		Контрагент
//		ДоговорКонтрагента
//		Склад
//
Функция РассчитатьСкидкиПриПродаже(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.ТаблицаДанных.Количество()=0 Тогда Возврат Ложь; КонецЕсли;

	тзТовары=СтруктураПараметров.ТаблицаДанных; //(ТипЗнч(СтруктураПараметров.Товары)=Тип("ТаблицаЗначений"), СтруктураПараметров.Товары, СтруктураПараметров.Товары.Выгрузить());
	тзТовары.ЗаполнитьЗначения(0, "ПроцентАвтоматическихСкидок");
	тзТовары.ЗаполнитьЗначения(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка(), "УсловиеАвтоматическойСкидки");
	тзТовары.ЗаполнитьЗначения(Неопределено, "ЗначениеУсловияАвтоматическойСкидки");
	тзТовары.Колонки.Добавить("СуммаБезСкидки");

	Для Каждого СтрокаТаблицы Из тзТовары Цикл
		СтрокаТаблицы.СуммаБезСкидки=СтрокаТаблицы.Количество*СтрокаТаблицы.Цена;
	КонецЦикла;

	УчитыватьНДС=Ложь;
	Если СтруктураПараметров.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС=СтруктураПараметров.УчитыватьНДС;
	КонецЕсли; 

	ЕстьКоэффициент=тзТовары.Колонки.Найти("Коэффициент") <> Неопределено;

	МассивНоменклатуры=тзТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());

	Если тзТовары.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
		МассивХарактеристик=Новый Массив;

		тзТовары.Колонки.Добавить("ХарактеристикаНоменклатуры");
		тзТовары.ЗаполнитьЗначения(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "ХарактеристикаНоменклатуры");
	Иначе
		МассивХарактеристик=тзТовары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
	КонецЕсли;
	МассивХарактеристик.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Если тзТовары.Колонки.Найти("Качество")=Неопределено Тогда
		МассивКачество=Новый Массив;
		МассивКачество.Добавить(Справочники.Качество.Новый);

		тзТовары.Колонки.Добавить("Качество");
		тзТовары.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	Иначе
		МассивКачество=тзТовары.ВыгрузитьКолонку("Качество");
	КонецЕсли;

	МассивПолучателей=Новый Массив;
	Если СтруктураПараметров.ВидРеализации=Перечисления.ВидыСкидок.Розничная Тогда
		МассивПолучателей.Добавить(СтруктураПараметров.Склад);
		МассивПолучателей.Добавить(Справочники.Склады.ПустаяСсылка());
	Иначе
		МассивПолучателей.Добавить(СтруктураПараметров.Контрагент);
		МассивПолучателей.Добавить(СтруктураПараметров.ДоговорКонтрагента);
		МассивПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;

	КурсКратность=1;
	Если НЕ СтруктураПараметров.ВидРеализации=Перечисления.ВидыСкидок.Розничная Тогда
		КурсКратность=СтруктураПараметров.КурсКратность; //Кратность\курс
	КонецЕсли;

	тзСкидки=ЗапросПоСкидкам(СтруктураПараметров, МассивНоменклатуры, МассивХарактеристик, МассивКачество, МассивПолучателей, КурсКратность);
	тзСкидки.Индексы.Добавить("Номенклатура,Качество");

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	СтруктураПоиска.Вставить("Качество");

	ПустаяНоменклатура=Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	УсловиеКолво=Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;

	Для Каждого СтрокаТЧ Из тзТовары Цикл
		Если СтрокаТЧ.СуммаБезСкидки <> 0 Тогда
			СтруктураПоиска.Номенклатура=СтрокаТЧ.Номенклатура;
			СтруктураПоиска.Качество=СтрокаТЧ.Качество;

			МассивСтрок=тзСкидки.НайтиСтроки(СтруктураПоиска);

			СтруктураПоиска.Номенклатура=ПустаяНоменклатура;

			МассивСтрокБезНоменклатуры=тзСкидки.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаБезНоменклатуры Из МассивСтрокБезНоменклатуры Цикл
				МассивСтрок.Добавить(СтрокаБезНоменклатуры);
			КонецЦикла;

			МаксСуммаСкидки=Неопределено;
			ПодходящаяСкидка=Неопределено;
			ПроцентСкидки=Неопределено;
			ПодходящаяСкидкаНоменклатура=Неопределено;

			Для Каждого СтрокаСкидок Из МассивСтрок Цикл
				Если СтрокаСкидок.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры
				 Или СтрокаСкидок.ХарактеристикаНоменклатуры = ПустаяХарактеристика Тогда
					Если (СтрокаСкидок.НУсловие = УсловиеКолво
					   И СтрокаСкидок.НЗначениеУсловия < ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество)
					 Или СтрокаСкидок.НУсловие <> УсловиеКолво)
					   И (СтрокаСкидок.ЦУсловие = УсловиеКолво
					   И СтрокаСкидок.ЦЗначениеУсловия < ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество)
					 Или СтрокаСкидок.ЦУсловие <> УсловиеКолво) Тогда
						Если СтрокаСкидок.НПроцентСкидкиНаценки <> Null Тогда
							СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.НПроцентСкидкиНаценки / 100;
							Ограничение = СтрокаСкидок.НОграничениеСкидкиНаценки * ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество);

							// Проверим ограничение скидки.
							Если (Ограничение > 0 И СуммаСкидки > Ограничение)
							 Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
								СуммаСкидки = Ограничение;
							КонецЕсли;

							Если МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки Тогда
								МаксСуммаСкидки = СуммаСкидки;
								ПодходящаяСкидка = СтрокаСкидок;
								ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
								ПодходящаяСкидкаНоменклатура = Истина;
							КонецЕсли;
						КонецЕсли;

						Если СтрокаСкидок.ЦПроцентСкидкиНаценки <> Null Тогда
							СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.ЦПроцентСкидкиНаценки / 100;
							Ограничение = СтрокаСкидок.ЦОграничениеСкидкиНаценки * ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество);

							// Проверим ограничение скидки.
							Если (Ограничение > 0 И СуммаСкидки > Ограничение)
							 Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
								СуммаСкидки = Ограничение;
							КонецЕсли;

							Если МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки Тогда
								МаксСуммаСкидки = СуммаСкидки;
								ПодходящаяСкидка = СтрокаСкидок;
								ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
								ПодходящаяСкидкаНоменклатура = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если НЕ МаксСуммаСкидки=Неопределено Тогда
				СтрокаТЧ.ПроцентАвтоматическихСкидок=ПроцентСкидки;
				Если ПодходящаяСкидкаНоменклатура Тогда
					СтрокаТЧ.УсловиеАвтоматическойСкидки=ПодходящаяСкидка.НУсловие;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки=ПодходящаяСкидка.НЗначениеУсловия;
				Иначе
					СтрокаТЧ.УсловиеАвтоматическойСкидки=ПодходящаяСкидка.ЦУсловие;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки=ПодходящаяСкидка.ЦЗначениеУсловия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция МожноРассчитыватьАвтоматическиеСкидки(УчетнаяПолитика) Экспорт
	Если УчетнаяПолитика.ИспользоватьСкидкиПоКоличествуТовара
		Или УчетнаяПолитика.ИспользоватьСкидкиПоСуммеДокумента
		Или УчетнаяПолитика.ИспользоватьСкидкиПоВидуОплаты
		Или УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
КонецФункции

// Возвращает массив характеристик: ПустаяХарактеристика + ХарактеристикаНоменклатуры,
// если ХарактеристикаНоменклатуры <> Неопределено
//
// Параметры:
//  ХарактеристикаНоменклатуры - переданная характеристика номенклатуры.
//
// Возвращаемое значение:
//  Массив - если ХарактеристикаНоменклатуры = Неопределено, то в массиве только ПустаяХарактеристика.
//
Функция МассивХарактеристик(ХарактеристикаНоменклатуры) Экспорт
	Характеристики=Новый Массив;
	Характеристики.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Если НЕ ХарактеристикаНоменклатуры=Неопределено Тогда
		Характеристики.Добавить(ХарактеристикаНоменклатуры);
	КонецЕсли;

	Возврат Характеристики;
КонецФункции

Функция АктуальнаяДатаРасчетаЦен(ДатаЦен) Экспорт
	ТекДата = ТекущаяДата();
	Если НЕ ЗначениеЗаполнено(ДатаЦен) Тогда
		Результат = ТекДата;
	ИначеЕсли ДатаЦен = НачалоДня(ТекДата) Тогда
		Результат = ТекДата;
	Иначе
		Результат = ДатаЦен;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Пересчитывает цену для другой единицы измерения
//
// Параметры: 
//  Цена         - число, значение цены, которое надо пересчитать,
//  ЕдиницаЦены  - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую назначена Цена
//  НоваяЕдиница - ссылка на справочник "ЕдиницыИзмерения", определяет единицу, за которую надо получить
//                 новое значение цены. Если не заполнено, то устанавливается равной ЕдиницаЦены без пересчета.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииЕдиницы(Цена, ЕдиницаЦены, НоваяЕдиница) Экспорт
	НовоеЗначениеЦены = Цена;

	Если ЕдиницаЦены <> НоваяЕдиница Тогда
		Если НЕ ЗначениеЗаполнено(НоваяЕдиница) Тогда // параметр единицы не задан, значить надо возвращать в единице цены
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе
				НоваяЕдиница = ЕдиницаЦены;
			КонецЕсли;
		Иначе // если единица цены не совпадает с параметром, то надо пересчитать
			Если НЕ ЗначениеЗаполнено(ЕдиницаЦены) Тогда // если не задана единица цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе
				КоэффициентЦены = ЕдиницаЦены.Коэффициент;
				НовоеЗначениеЦены  = ?(НЕ ЗначениеЗаполнено(КоэффициентЦены), 0, НовоеЗначениеЦены * НоваяЕдиница.Коэффициент / КоэффициентЦены)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат НовоеЗначениеЦены;
КонецФункции

// Пересчитывает цену в другую валюту
//
//  Цена            - число, значение цены, которое надо пересчитать,
//  ВалютаЦены      - ссылка на справочник "Валюты", определяет валюту, в которой назначена Цена
//  НоваяВалюта     - ссылка на справочник "Валюты", определяет валюту, в которой надо получить
//                    новое значение цены. Если не заполнено, то устанавливается равной ВалютаЦены без пересчета,
//  КурсНовойВалюты - курс новой валюты, по которому надо пересчитать цену, если не задан, то берем курс по справочнику
//  КратностьНовойВалюты - кратность новой валюты, по которой надо пересчитать цену, если не задана, то берем курс по справочнику
//  Дата            - дата, на которую надо пересчитать цену.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, НоваяВалюта, КурсНовойВалюты = 0, КратностьНовойВалюты = 1, Дата = Неопределено ) Экспорт
	НовоеЗначениеЦены = Цена;
	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда // параметр валюты не задан, значить надо возвращать в валюте цены
		НоваяВалюта = ВалютаЦены;
	Иначе
		Если НоваяВалюта <> ВалютаЦены Тогда // если валюта цены не совпадает с параметром, то надо пересчитать
		
			Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда // если не задана валюта цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе // валюты заданы и не совпадают, надо пересчитывать
				СтруктураКурсЦены = МодульВалютногоУчета.КурсВалюты(ВалютаЦены, Дата);
				КурсЦены          = СтруктураКурсЦены.Курс;
				КратностьЦены     = СтруктураКурсЦены.Кратность;

				Если НЕ ЗначениеЗаполнено(КурсНовойВалюты) Тогда // если не задан курс, то курс берем по справочнику
					СтруктураКурсНовойВалюты = МодульВалютногоУчета.КурсВалюты(НоваяВалюта, Дата);
					КурсНовойВалюты          = СтруктураКурсНовойВалюты.Курс;
					КратностьНовойВалюты     = СтруктураКурсНовойВалюты.Кратность;
				КонецЕсли; 

				НовоеЗначениеЦены = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(НовоеЗначениеЦены, ВалютаЦены, НоваяВалюта, КурсЦены, КурсНовойВалюты,КратностьЦены,КратностьНовойВалюты);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	Возврат НовоеЗначениеЦены;	
КонецФункции

// Возвращает массив из двух элементов: номенклатурной и ценовой группы, к которым принадлежит
// переданная номенклатура.
//
// Параметры:
//  Номенклатура - переданная номенклатура.
//
// Возвращаемое значение:
//  Массив - номенклатурная и ценовая группа к которым принадлежит переданная номенклатура.
//
Функция МассивГруппНоменклатуры(Номенклатура) Экспорт
	Группы=Новый Массив;
	Группы.Добавить(Номенклатура.ЦеноваяГруппа);
	Группы.Добавить(Номенклатура.НоменклатурнаяГруппа);

	Возврат Группы;
КонецФункции

// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПараметрПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПараметрПорядокОкругления;
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена) Экспорт
	Если ПолученнаяЦена=0 ИЛИ НЕ ЗначениеЗаполнено(УсловиеПродаж) Тогда Возврат; КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("УсловиеПродаж", УсловиеПродаж);
	Запрос.УстановитьПараметр("Группы", МассивГруппНоменклатуры(Номенклатура));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ПроцентНаценки КАК ПроцентНаценки
	|ИЗ
	|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж И НоменклатурнаяЦеноваяГруппа В (&Группы)) КАК ИсточникДанных
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена=ПолученнаяЦена*(1+Выборка.ПроцентНаценки/100);
	КонецЕсли;	
КонецПроцедуры

Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	НоваяЦена		 = Цена;
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС И (НЕ ЦенаВключаетНДС) Тогда
				НадоВключитьНДС=Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС) И ЦенаВключаетНДС  Тогда
				НадоИсключитьНДС=Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе // Надо пересчитывать строго по флагам включения		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС И (НЕ ЦенаВключаетНДС) Тогда
				НадоВключитьНДС=Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)	И ЦенаВключаетНДС  Тогда
				НадоИсключитьНДС=Истина;
			КонецЕсли;
		Иначе
			Если ЦенаВключаетНДС Тогда
				НадоИсключитьНДС=Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;
КонецФункции

// Функция возвращает цену номенклатуры для требуемой номенклатуры в указанном типе цен,
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры:
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "ХарактеристикаНоменклатуры",
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра
//                         сведений "Курсы валют",
//  ПроцентСкидкиНаценки - число, процент наценки (скидки) на базовый тип цен, заполняется процентом
//                         наценки (скидки) цены для цен, которые не рассчитываются автоматически.
//  ЦенаПоДоговоруУсловийПоставок - Булево, функция установит в Истину если цена номенклатуры
//                         рассчиталась согласно договора с дополнительными условиями.
//  ТипЦенДляПерерасчетаЦены - ссылка на элемент справочника "Типы цен", будет переопределен на новый тип цены,
//                         который будет соответсвовать типу цены установленному на ценовую группу или номенклатурную группу.
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ЦенаНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Знач ТипЦен, СтруктураПараметров) Экспорт
	Дата=Неопределено; СтруктураПараметров.Свойство("Дата", Дата);
	Валюта=Неопределено; СтруктураПараметров.Свойство("Валюта", Валюта);
	//*** ЦенаПоДоговоруУсловийПоставок=Неопределено; СтруктураПараметров.Свойство("ЦенаПоДоговоруУсловийПоставок", ЦенаПоДоговоруУсловийПоставок); //Ложь
	ДоговорКонтрагента=Неопределено; СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	УсловиеПродаж=Неопределено; СтруктураПараметров.Свойство("УсловиеПродаж", УсловиеПродаж);	
	ТипЦенДляПерерасчетаЦены=Неопределено; СтруктураПараметров.Свойство("ТипЦенДляПерерасчетаЦены", ТипЦенДляПерерасчетаЦены);

	Курс=Неопределено; СтруктураПараметров.Свойство("Курс", Курс);
	Если Курс=Неопределено Тогда Курс=0; КонецЕсли; 

	Кратность=Неопределено; СтруктураПараметров.Свойство("Кратность", Кратность);
	Если Кратность=Неопределено Тогда Кратность=0; КонецЕсли; 

	ПроцентСкидкиНаценки=Неопределено; СтруктураПараметров.Свойство("ПроцентСкидкиНаценки", ПроцентСкидкиНаценки);
	Если ПроцентСкидкиНаценки=Неопределено Тогда ПроцентСкидкиНаценки=0; КонецЕсли; 

	ЕдиницаИзмерения=Неопределено; СтруктураПараметров.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Если ЕдиницаИзмерения=Неопределено Тогда ЕдиницаИзмерения=Справочники.ЕдиницыИзмерения.ПустаяСсылка(); КонецЕсли;

	ХарактеристикиНоменклатуры=МассивХарактеристик(ХарактеристикаНоменклатуры);

	Дата=АктуальнаяДатаРасчетаЦен(Дата); ПолученнаяЦена = 0;

	Если НЕ ДоговорКонтрагента=Неопределено Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставок.Цена,
		|	УсловияПоставок.ЕдиницаИзмерения,
		|	УсловияПоставок.ВалютаЦены
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата,
		|	   ДоговорКонтрагента = &Договор И Номенклатура = &Номенклатура
		|	   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)) КАК УсловияПоставок
		|ГДЕ
		|	УсловияПоставок.Цена <> 0
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена=ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена=ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Валюта, Курс, Кратность, Дата);
			//*** ЦенаПоДоговоруУсловийПоставок=Истина;
		КонецЕсли;

		// Проверим, не установлены ли по этому договору типы цен для групп.
		Если ПолученнаяЦена=0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Контрагент", ДоговорКонтрагента.Владелец);
			Запрос.УстановитьПараметр("Группы", МассивГруппНоменклатуры(Номенклатура));
			Запрос.Текст="
			|ВЫБРАТЬ
			|	ТипыЦенПоГруппам.ТипЦен КАК ТипЦен
			|ИЗ
			|	РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент И НоменклатурнаяЦеноваяГруппа В (&Группы)) КАК ТипыЦенПоГруппам
			|";
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Не Выборка.ТипЦен.Пустая() Тогда // переопределим тип цен для расчета
					ТипЦен=Выборка.ТипЦен;
					ТипЦенДляПерерасчетаЦены = Выборка.ТипЦен;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПолученнаяЦена=0 И ЗначениеЗаполнено(ТипЦен) Тогда // особых условий нет
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда // надо достать цену базового типа и рассчитать по наценке
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенРасчетный", ТипЦен);
			Запрос.УстановитьПараметр("СпособРасчета", ТипЦен.СпособРасчетаЦены);
			Запрос.УстановитьПараметр("ПроцентНаценки", ТипЦен.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		КонецЕсли;

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
		|";
		Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(ВложенныйЗапрос.ПроцентСкидкиНаценки, &ПроцентНаценки) КАК ПроцентСкидкиНаценки,
			|	ЕСТЬNULL(ВложенныйЗапрос.СпособРасчетаЦены, &СпособРасчета) КАК СпособРасчетаЦены,
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	ЦеныНоменклатурыСрезПоследних.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
		|	   И ТипЦен = &ТипЦен И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
		|	   ) КАК ЦеныНоменклатурыСрезПоследних
		|";
		Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены КАК СпособРасчетаЦены,
			|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
			|		   И ТипЦен = &ТипЦенРасчетный
			|		   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
			|		   ) КАК ЦеныНоменклатурыСрезПоследних
			|	) КАК ВложенныйЗапрос
			|ПО
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВалютаТекущая = Выборка.Валюта;
			Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда
				ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(Выборка.Цена, Выборка.Валюта, ВалютаТекущая, 0, 0, Дата);

				Если Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					ПолученнаяЦена = ЦенообразованиеСервер.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, ПолученнаяЦена, ВалютаТекущая, ВалютаТекущая);
				ИначеЕсли Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
			Иначе
				ПолученнаяЦена = Выборка.Цена;
			КонецЕсли;

			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, Валюта, Курс, Кратность, Дата);
		КонецЕсли;
	КонецЕсли;

	ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена);

	Возврат ПолученнаяЦена;
 КонецФункции

Функция ЦенаПродажи(Номенклатура, ХарактеристикаНоменклатуры, Знач ТипЦен, СтруктураПараметров) Экспорт
	Цена=ЦенаНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, ТипЦен, СтруктураПараметров);

	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
	Если ЗначениеЗаполнено(Цена) Тогда
		Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
					Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
					ТипЦен.ЦенаВключаетНДС,
					СтруктураПараметров.Свойство("УчитыватьНДС") И СтруктураПараметров.УчитыватьНДС,
					СтруктураПараметров.Свойство("СуммаВключаетНДС") И СтруктураПараметров.СуммаВключаетНДС,
					?(СтруктураПараметров.Свойство("СтавкаНДС"), УчетНалоговСервер.СтавкаНДС(СтруктураПараметров.СтавкаНДС),0));
	КонецЕсли;

	Возврат Цена;
КонецФункции

//*********************************************

Функция ПолучитьАктуальнуюДатуРасчетаЦен(ДатаЦен) Экспорт

	ТекДата = ТекущаяДата();

	Если НЕ ЗначениеЗаполнено(ДатаЦен) Тогда
		Результат = ТекДата;
	ИначеЕсли ДатаЦен = НачалоДня(ТекДата) Тогда
		Результат = ТекДата;
	Иначе
		Результат = ДатаЦен;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция МассивПолучателейСкидки(ВидРеализации, ДокументОбъект) Экспорт
	МассивПолучателей=Новый Массив;
	Если ВидРеализации=Перечисления.ВидыСкидок.Розничная Тогда
		МассивПолучателей.Добавить(ДокументОбъект.Склад);
		МассивПолучателей.Добавить(Справочники.Склады.ПустаяСсылка());
	Иначе
		МассивПолучателей.Добавить(ДокументОбъект.Контрагент);
		МассивПолучателей.Добавить(ДокументОбъект.ДоговорКонтрагента);
		МассивПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Возврат МассивПолучателей;
КонецФункции

// Возвращает массив из двух элементов: номенклатурной и ценовой группы, к которым принадлежит
// переданная номенклатура.
//
// Параметры:
//  Номенклатура - переданная номенклатура.
//
// Возвращаемое значение:
//  Массив - номенклатурная и ценовая группа к которым принадлежит переданная номенклатура.
//
Функция ПолучитьМассивГруппНоменклатуры(Номенклатура) Экспорт
	Группы=Новый Массив;
	Группы.Добавить(Номенклатура.ЦеноваяГруппа);
	Группы.Добавить(Номенклатура.НоменклатурнаяГруппа);

	Возврат Группы;
КонецФункции

// Возвращает массив характеристик: ПустаяХарактеристика + ХарактеристикаНоменклатуры,
// если ХарактеристикаНоменклатуры <> Неопределено
//
// Параметры:
//  ХарактеристикаНоменклатуры - переданная характеристика номенклатуры.
//
// Возвращаемое значение:
//  Массив - если ХарактеристикаНоменклатуры = Неопределено, то в массиве только ПустаяХарактеристика.
//
Функция ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры) Экспорт
	Характеристики=Новый Массив;
	Характеристики.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Если НЕ ХарактеристикаНоменклатуры=Неопределено Тогда
		Характеристики.Добавить(ХарактеристикаНоменклатуры);
	КонецЕсли;

	Возврат Характеристики;
КонецФункции

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значене:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны.
	СтруктураВозможныхВариантовРеквизитов=Новый Структура;
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("РегистрироватьЦеныПоставщика");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УсловиеПродаж");

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента=Новый Структура;
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если УправлениеМетаданными.ЕстьРеквизит(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// Теперь проверим исключения.
	Если НЕ СтруктураИсключений=Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда // надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе // надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции

// Функция возвращает цену номенклатуры для требуемой номенклатуры в указанном типе цен,
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры:
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "ХарактеристикаНоменклатуры",
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра
//                         сведений "Курсы валют",
//  ПроцентСкидкиНаценки - число, процент наценки (скидки) на базовый тип цен, заполняется процентом
//                         наценки (скидки) цены для цен, которые не рассчитываются автоматически.
//  ЦенаПоДоговоруУсловийПоставок - Булево, функция установит в Истину если цена номенклатуры
//                         рассчиталась согласно договора с дополнительными условиями.
//  ТипЦенДляПерерасчетаЦены - ссылка на элемент справочника "Типы цен", будет переопределен на новый тип цены,
//                         который будет соответсвовать типу цены установленному на ценовую группу или номенклатурную группу.
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Знач ТипЦен, ДатаПараметр = Неопределено, ЕдиницаИзмерения = Неопределено,
	                             Валюта = Неопределено, Курс = 0, Кратность = 1, ПроцентСкидкиНаценки = 0, ДоговорКонтрагента = Неопределено,
	                             УсловиеПродаж = Неопределено, ЦенаПоДоговоруУсловийПоставок = Ложь, ТипЦенДляПерерасчетаЦены = Неопределено) Экспорт

	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка(); // для услуг
	КонецЕсли;

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	Дата = ПолучитьАктуальнуюДатуРасчетаЦен(ДатаПараметр); ПолученнаяЦена = 0;

	Если ДоговорКонтрагента <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставок.Цена,
		|	УсловияПоставок.ЕдиницаИзмерения,
		|	УсловияПоставок.ВалютаЦены
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата,
		|	   ДоговорКонтрагента = &Договор И Номенклатура = &Номенклатура
		|	   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)) КАК УсловияПоставок
		|ГДЕ
		|	УсловияПоставок.Цена <> 0
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Валюта, Курс, Кратность, Дата);
			ЦенаПоДоговоруУсловийПоставок = Истина;
		КонецЕсли;

		// Проверим, не установлены ли по этому договору типы цен для групп.
		Если ПолученнаяЦена = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Контрагент", ДоговорКонтрагента.Владелец);
			Запрос.УстановитьПараметр("Группы", ПолучитьМассивГруппНоменклатуры(Номенклатура));
			Запрос.Текст="
			|ВЫБРАТЬ
			|	ТипыЦенПоГруппам.ТипЦен КАК ТипЦен
			|ИЗ
			|	РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент И НоменклатурнаяЦеноваяГруппа В (&Группы)) КАК ТипыЦенПоГруппам
			|";
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Не Выборка.ТипЦен.Пустая() Тогда // переопределим тип цен для расчета
					ТипЦен=Выборка.ТипЦен;
					ТипЦенДляПерерасчетаЦены = Выборка.ТипЦен;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПолученнаяЦена = 0 И ЗначениеЗаполнено(ТипЦен) Тогда // особых условий нет
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);

		Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда // надо достать цену базового типа и рассчитать по наценке
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенРасчетный", ТипЦен);
			Запрос.УстановитьПараметр("СпособРасчета", ТипЦен.СпособРасчетаЦены);
			Запрос.УстановитьПараметр("ПроцентНаценки", ТипЦен.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		КонецЕсли;

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
		|";
		Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(ВложенныйЗапрос.ПроцентСкидкиНаценки, &ПроцентНаценки) КАК ПроцентСкидкиНаценки,
			|	ЕСТЬNULL(ВложенныйЗапрос.СпособРасчетаЦены, &СпособРасчета) КАК СпособРасчетаЦены,
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	ЦеныНоменклатурыСрезПоследних.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
		|	   И ТипЦен = &ТипЦен И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
		|	   ) КАК ЦеныНоменклатурыСрезПоследних
		|";
		Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены КАК СпособРасчетаЦены,
			|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура
			|		   И ТипЦен = &ТипЦенРасчетный
			|		   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
			|		   ) КАК ЦеныНоменклатурыСрезПоследних
			|	) КАК ВложенныйЗапрос
			|ПО
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВалютаТекущая = Выборка.Валюта;
			Если ЗначениеЗаполнено(ТипЦен.Рассчитывается) И ТипЦен.Рассчитывается Тогда
				ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(Выборка.Цена, Выборка.Валюта, ВалютаТекущая, 0, 0, Дата);

				Если Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					ПолученнаяЦена = ЦенообразованиеСервер.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, ПолученнаяЦена, ВалютаТекущая, ВалютаТекущая);
				ИначеЕсли Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
			Иначе
				ПолученнаяЦена = Выборка.Цена;
			КонецЕсли;

			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, Валюта, Курс, Кратность, Дата);
		КонецЕсли;
	КонецЕсли;

	ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена);

	Возврат ПолученнаяЦена;

 КонецФункции

Функция ПолучитьЦенуНоменклатурыРозницы(Номенклатура, ТипЦен, ХарактеристикаНоменклатуры=Неопределено, НаДату=Неопределено, ЕдиницаИзмерения=Неопределено) Экспорт
	Если НаДату=Неопределено Тогда НаДату=ТекущаяДата(); КонецЕсли;
	
	стрУсловие="Номенклатура = &Номенклатура И ТипЦен = &ТипЦен";
	Если НЕ ХарактеристикаНоменклатуры=Неопределено Тогда
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	КонецЕсли;
	Если НЕ ЕдиницаИзмерения=Неопределено Тогда
		стрУсловие=стрУсловие+" И ЕдиницаИзмерения = &ЕдиницаИзмерения";
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Цена Как Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, "+стрУсловие+") КАК ИсточникДанных
	|";	
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Цена, 0);
КонецФункции
 
// Функция возвращает процент скидки (наценки) для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, используется, например, для.получения наценки цены в рознице.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата.
//  ТолькоИзРегистра           - булево, "Истина" если необходимо получать данные только из регистра.
//  НетДанных                  - булево, устанавливается в "Ложь" если нет данных в регистре сведений, "Истина" если есть.
//
// Возвращаемое значение:
//  Число, значение процента скидки (наценки).
//
Функция ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ТипЦен, Дата = Неопределено, ТолькоИзРегистра = Ложь, НетДанных = Истина, ВернутьВсегда = Ложь) Экспорт
	НетДанных=Истина; ПроцентСкидкиНаценки=0;

	// Если дата не заполнена, возьмем рабочую дату.
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата=ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры));
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроцентСкидкиНаценки
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ИсточникДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаНоменклатуры УБЫВ
	|";

	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентСкидкиНаценки=Выборка.ПроцентСкидкиНаценки;
		НетДанных = Ложь;
	КонецЕсли;

	Если (ТипЦен.Рассчитывается И Не ТолькоИзРегистра) Или ВернутьВсегда Тогда
		Если НЕ ЗначениеЗаполнено(ПроцентСкидкиНаценки) Тогда // процент скидки задан в типе цен
			ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЕсли;

	Возврат ПроцентСкидкиНаценки;
КонецФункции

// Функция возвращает цену контрагента для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "Характеристики номенклатуры",
//  Контрагент                 - ссылка на элемент справочника "Контрагенты", для которого надо получить цену,
//  ТипЦен                     - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                       - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения           - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                               цену, если не заполнен, то заполняется единицей цены
//  Валюта                     - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                               если не заполнен, то заполняется валютой цены
//  Курс                       - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                               сведений "Курсы валют".
//  Кратность                  - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                               сведений "Курсы валют".
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуКонтрагента(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Контрагент,
	                            ТипЦен, Дата = Неопределено, ЕдиницаИзмерения = Неопределено,
	                            Валюта = Неопределено, Курс = 0, Кратность = 1,
	                            ДоговорКонтрагента = Неопределено, УсловиеПродаж = Неопределено) Экспорт

	ХарактеристикиНоменклатуры = ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры);

	Дата = ПолучитьАктуальнуюДатуРасчетаЦен(Дата); ПолученнаяЦена = 0;

	Если ДоговорКонтрагента <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставок.Цена,
		|	УсловияПоставок.ЕдиницаИзмерения,
		|	УсловияПоставок.ВалютаЦены
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата,
		|	   ДоговорКонтрагента = &Договор И Номенклатура = &Номенклатура
		|	   И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)) КАК УсловияПоставок
		|ГДЕ
		|	УсловияПоставок.Цена <> 0
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Валюта, Курс, Кратность, Дата);
		КонецЕсли;
	КонецЕсли;

	Если ПолученнаяЦена = 0 Тогда // особых условий нет
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);		
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатуры.Цена,
		|	ЦеныНоменклатуры.ЕдиницаИзмерения,
		|	ЦеныНоменклатуры.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен
		|	   И ХарактеристикаНоменклатуры В(&ХарактеристикиНоменклатуры)) КАК ЦеныНоменклатуры
		|УПОРЯДОЧИТЬ ПО
		|	ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, ЕдиницаИзмерения);
			ПолученнаяЦена = ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.Валюта, Валюта, Курс, Кратность, КонецДня(Дата));
		КонецЕсли;
	КонецЕсли;

	ИзменитьЦенуПоУсловиюПродаж(Дата, Номенклатура, УсловиеПродаж, ПолученнаяЦена);

	Возврат ПолученнаяЦена;

КонецФункции

// Определяет необходимость пересчета табличной части документа при изменении флагов налогообложения 
// в форме "Цены и валюты".
//
// Параметры: 
//  СтруктураЗначений	- структура, содержащая значения реквизитов документа до и после их 
//						  изменеия в форме "Цены и валюта".
//
Функция ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений) Экспорт

	Возврат (СтруктураЗначений.НовыйУчитыватьНДС <> СтруктураЗначений.ТекущийУчитыватьНДС) ИЛИ
		    (СтруктураЗначений.НовыйСуммаВключаетНДС <> СтруктураЗначений.ТекущийСуммаВключаетНДС);

КонецФункции

// Формирует запрос, возвращающий цены для заданных позиций номенклатуры.
// Используется для получения цен по ТЧ редактирумого документа для последующего пересчета ТЧ
//
// Параметры: 
//  СтруктураЗначений   - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                        документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен - значение перечисления "Способы заполнения цен", определяет по какому из регистров
//                       ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос.
//  МассивНоменклатуры  - массив, содержащий ссылки на элементы номенклатуры, по которым надо узнать цены.
//  ДатаДокумента       - дата, на которую надо узнать цены 
//  Контрагент          - ссылка на справочник контрагентов, определяет для какого когнтрагента надо узнать цены,
//  ДоговорКонтрагента  - ссылка на договор контрагента.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЦенам(СтруктураЗначений, СпособЗаполненияЦен, МассивНоменклатуры, ДатаДокумента, Контрагент, ДоговорКонтрагента = Неопределено, Склад = Неопределено) Экспорт
Перем УсловиеПродаж;

	СтруктураЗначений.Свойство("НовыйУсловиеПродаж", УсловиеПродаж);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Дата", ПолучитьАктуальнуюДатуРасчетаЦен(ДатаДокумента));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("УсловиеПродаж", УсловиеПродаж);

	Если СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Или СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
		Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	БазовыеЦены.Номенклатура,
		|	БазовыеЦены.ХарактеристикаНоменклатуры,
		|	БазовыеЦены.Номенклатура.ЕдиницаХраненияОстатков,
		|	БазовыеЦены.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	БазовыеЦены.ТипЦен,

		|	ЕСТЬNULL(ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Цена
		|	ИНАЧЕ
		|		БазовыеЦены.Цена
		|	КОНЕЦ, 0) КАК Цена,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЕСТЬNULL(БазовыеЦены.СпособРасчетаЦены, БазовыеЦены.ТипЦен.СпособРасчетаЦены)
		|	ИНАЧЕ
		|		NULL
		|	КОНЕЦ КАК СпособРасчетаЦены,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЕСТЬNULL(БазовыеЦены.ПроцентСкидкиНаценки, БазовыеЦены.ТипЦен.ПроцентСкидкиНаценки)
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентСкидкиНаценки,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		БазовыеЦены.ТипЦен.БазовыйТипЦен.ВалютаЦены
		|	ИНАЧЕ
		|		БазовыеЦены.Валюта
		|	КОНЕЦ КАК ВалютаЦены,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		БазовыеЦены.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияЦены,

		|	ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.ЕдиницаИзмерения.Коэффициент
		|	ИНАЧЕ
		|		БазовыеЦены.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК КоэффициентЕдиницыЦены,

		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СпрНоменклатура.Номенклатура КАК Номенклатура,
		|		ЕСТЬNULL(УсловияПоставок.ХарактеристикаНоменклатуры, ЕСТЬNULL(ЦеныНоменклатуры.ХарактеристикаНоменклатуры, СпрНоменклатура.ХарактеристикаНоменклатуры)) КАК ХарактеристикаНоменклатуры,
		|		ВЫБОР КОГДА ТипыЦенПоГруппам.ТипЦен ЕСТЬ NULL
		|				ИЛИ ТипыЦенПоГруппам.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка) ТОГДА
		|			&ТипЦен
		|		ИНАЧЕ
		|			ТипыЦенПоГруппам.ТипЦен
		|		КОНЕЦ КАК ТипЦен,

		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура IS NULL ТОГДА
		|			ЦеныНоменклатуры.СпособРасчетаЦены
		|		ИНАЧЕ
		|			NULL
		|		КОНЕЦ КАК СпособРасчетаЦены,

		|		ВЫБОР КОГДА УсловияПоставок.Номенклатура IS NULL ТОГДА
		|			ЦеныНоменклатуры.ПроцентСкидкиНаценки
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ПроцентСкидкиНаценки,

		|		ЕСТЬNULL(УсловияПоставок.Цена, ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)) КАК Цена,
		|		ЕСТЬNULL(УсловияПоставок.ЕдиницаИзмерения, ЦеныНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|		ЕСТЬNULL(УсловияПоставок.ВалютаЦены, ЦеныНоменклатуры.Валюта) КАК Валюта
		|		ИЗ
		|		(	ВЫБРАТЬ
		|				СпрХарактеристики.Владелец КАК Номенклатура,
		|				СпрХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|			ГДЕ
		|				СпрХарактеристики.Владелец В (&МассивНоменклатуры)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				СпрНоменклатура.Ссылка КАК Номенклатура,
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.Номенклатура КАК СпрНоменклатура			
		|			ГДЕ
		|				СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
		|		) КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ТипыЦенПоГруппам
		|		ПО
		|			ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СпрНоменклатура.Номенклатура.ЦеноваяГруппа
		|			ИЛИ ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СпрНоменклатура.Номенклатура.НоменклатурнаяГруппа
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|		
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатуры
		|		ПО
		|			ЦеныНоменклатуры.Номенклатура = СпрНоменклатура.Номенклатура
		|			И ((ЦеныНоменклатуры.ТипЦен = ТипыЦенПоГруппам.ТипЦен ИЛИ (ТипыЦенПоГруппам.ТипЦен ЕСТЬ NULL ИЛИ ТипыЦенПоГруппам.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка))
		|			И ЦеныНоменклатуры.ТипЦен = &ТипЦен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, ДоговорКонтрагента = &ДоговорКонтрагента И Номенклатура В (&МассивНоменклатуры)) КАК УсловияПоставок
		|		ПО
		|			((УсловияПоставок.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И УсловияПоставок.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры)
		|			ИЛИ УсловияПоставок.Номенклатура = СпрНоменклатура.Номенклатура)
		|			И УсловияПоставок.Цена <> 0
		|		ГДЕ
		|			СпрНоменклатура.Номенклатура в (&МассивНоменклатуры)
		|	) КАК БазовыеЦены
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыРассчитываемые
		|ПО
		|	БазовыеЦены.Номенклатура = ЦеныНоменклатурыРассчитываемые.Номенклатура
		|	И БазовыеЦены.ХарактеристикаНоменклатуры = ЦеныНоменклатурыРассчитываемые.ХарактеристикаНоменклатуры
		|	И БазовыеЦены.ТипЦен.БазовыйТипЦен = ЦеныНоменклатурыРассчитываемые.ТипЦен
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	БазовыеЦены.Валюта = КурсыВалютСрезПоследних.Валюта
		|	ИЛИ БазовыеЦены.ТипЦен.БазовыйТипЦен.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	БазовыеЦены.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ БазовыеЦены.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|ГДЕ
		|	ЕСТЬNULL(ВЫБОР КОГДА БазовыеЦены.Цена = 0 И БазовыеЦены.ТипЦен.Рассчитывается Тогда
		|		ЦеныНоменклатурыРассчитываемые.Цена
		|	ИНАЧЕ
		|		БазовыеЦены.Цена
		|	КОНЕЦ, 0) <> 0
		|";
	ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура,
		|	ЦеныКонтрагентаСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков,
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
		|	ЦеныКонтрагентаСрезПоследних.Валюта КАК ВалютаЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияЦены,
		|	ЦеныКонтрагентаСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК КоэффициентЕдиницыЦены,
		|	ЦеныКонтрагентаСрезПоследних.Цена,
		|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
		|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
		|ИЗ
		|(
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ЕСТЬNULL(УсловияПоставок.Номенклатура, ЦеныКонтрагента.Номенклатура) КАК Номенклатура,
		|			ЕСТЬNULL(УсловияПоставок.ХарактеристикаНоменклатуры, ЦеныКонтрагента.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|			ЕСТЬNULL(УсловияПоставок.ВалютаЦены, ЦеныКонтрагента.Валюта) КАК Валюта,
		|			ЕСТЬNULL(УсловияПоставок.Цена, ЦеныКонтрагента.Цена) КАК Цена,
		|			ЕСТЬNULL(УсловияПоставок.ЕдиницаИзмерения, ЦеныКонтрагента.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|	ИЗ
		|	(	
		|		ВЫБРАТЬ
		|			  ХарактеристикаНоменклатуры.Владелец КАК Номенклатура
		|			, ХарактеристикаНоменклатуры.ССЫЛКА КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаНоменклатуры
		|		ГДЕ ХарактеристикаНоменклатуры.Владелец В (&МассивНоменклатуры)
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			  Номенклатура.ССЫЛКА КАК Номенклатура
		|			, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			Справочник.Номенклатура КАК Номенклатура
		|		ГДЕ Номенклатура.Ссылка В (&МассивНоменклатуры)
		|	) КАК УсловияПоставокЦеныКонтрагента
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныКонтрагента
		|	ПО
		|		ЦеныКонтрагента.Номенклатура = УсловияПоставокЦеныКонтрагента.Номенклатура
		|		И ЦеныКонтрагента.ХарактеристикаНоменклатуры = УсловияПоставокЦеныКонтрагента.ХарактеристикаНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ДоговорКонтрагента = &ДоговорКонтрагента) КАК УсловияПоставок
		|	ПО
		|		УсловияПоставок.Номенклатура = УсловияПоставокЦеныКонтрагента.Номенклатура
		|		И УсловияПоставок.ХарактеристикаНоменклатуры = УсловияПоставокЦеныКонтрагента.ХарактеристикаНоменклатуры
		|		И УсловияПоставок.Цена <> 0
		|) КАК ЦеныКонтрагентаСрезПоследних
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ПО
		|	ЦеныКонтрагентаСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
		|ПО
		|	ЦеныКонтрагентаСрезПоследних.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|	ИЛИ ЦеныКонтрагентаСрезПоследних.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
		|ГДЕ
		|	ЦеныКонтрагентаСрезПоследних.Цена <> 0
		|";
	//////ИначеЕсли СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
	//////	Запрос.УстановитьПараметр("Склад", Склад);

	//////	Запрос.Текст = "
	//////	|ВЫБРАТЬ
	//////	|	ЦеныПродажные.Номенклатура,
	//////	|	ЦеныПродажные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//////	|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков,
	//////	|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентОсновнойЕдиницы,
	//////	|	ТаблицаКонстант.ВалютаРегламентированногоУчета КАК ВалютаЦены,
	//////	|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияЦены,
	//////	|	ЦеныПродажные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыЦены,
	//////	|	ЦеныПродажные.Цена,
	//////	|	ЕСТЬNULL(НаценкиПоУсловиямПродаж.ПроцентНаценки, 0) КАК ПроцентНаценкиПоУсловиямПродаж,
	//////	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
	//////	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены
	//////	|ИЗ
	//////	|	РегистрСведений.ЦеныАТТ.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И Склад = &Склад) КАК ЦеныПродажные
	//////	|СОЕДИНЕНИЕ
	//////	|	Константы КАК ТаблицаКонстант
	//////	|ПО
	//////	|	ИСТИНА
	//////	|ЛЕВОЕ СОЕДИНЕНИЕ
	//////	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
	//////	|ПО
	//////	|	ТаблицаКонстант.ВалютаРегламентированногоУчета = КурсыВалютСрезПоследних.Валюта
	//////	|ЛЕВОЕ СОЕДИНЕНИЕ
	//////	|	РегистрСведений.НаценкиПоУсловиямПродаж.СрезПоследних(&Дата, УсловиеПродаж = &УсловиеПродаж) КАК НаценкиПоУсловиямПродаж
	//////	|ПО
	//////	|	ЦеныПродажные.Номенклатура.ЦеноваяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
	//////	|	ИЛИ ЦеныПродажные.Номенклатура.НоменклатурнаяГруппа = НаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
	//////	|";
	КонецЕсли;

	Возврат Запрос.Выполнить();
КонецФункции

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если УправлениеМетаданными.ЕстьРеквизит("УчитыватьНДС", МетаданныеДокумента)
		   И УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента)
		   И УправлениеМетаданными.ЕстьРеквизит("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ДокументОбъект.УчитыватьНДС
		   И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда Продолжить; КонецЕсли;
			Если УправлениеМетаданными.ЕстьРеквизит("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если УправлениеМетаданными.ЕстьРеквизит("УчитыватьНДС", МетаданныеДокумента)
					И УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента)
					И УправлениеМетаданными.ЕстьРеквизит("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС=СуммаНДС+ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если УправлениеМетаданными.ЕстьРеквизит("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаНДС=СуммаНДС+ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции

// Рассчитываем сумму документа без учета скидки
//
// Параметры: 
//  ТабличнаяЧасть   - табличная часть, в котором надо посчитать сумму без скидки.
//
// Возвращаемое значение:
//  Сумма документа со всеми налогамии без учета скидки.
//
Функция ПолучитьСуммуДокументаБезСкидки(ТабличнаяЧасть) Экспорт

	СуммаДокумента = 0;

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СуммаПоСтроке = Окр(СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество, 2);
		СуммаДокумента = СуммаДокумента + СуммаПоСтроке;
	КонецЦикла;

	Возврат СуммаДокумента;

КонецФункции

Процедура ПроверкаУсловийДоговора(ОбъектДок, Отказ) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатка", ОбъектДок.МоментВремени());
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	ОбъектДок.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Ссылка",	ОбъектДок.Ссылка);	 
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
	|	СРЕДНЕЕ(ЕСТЬNULL(УсловияПоставокПоДоговорамКонтрагентовОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|	СРЕДНЕЕ(ЕстьNULL(УсловияПоставокПоДоговорамКонтрагентовОстатки.Цена,0)) КАК Цена,
	|	ВЫБОР
	|		КОГДА УсловияПоставокПоДоговорамКонтрагентовОстатки.Цена = ТабличнаяЧасть.Цена
	|			ТОГДА 1
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК Сортировка,
	|	ВЫБОР
	|		КОГДА УсловияПоставокПоДоговорамКонтрагентовОстатки.Цена Есть NULL
	|			ТОГДА Ложь                                                    
	|		ИНАЧЕ Истина
	|	КОНЕЦ КАК НайденоУсловие
	|ИЗ
	|	Документ."+ОбъектДок.Метаданные().Имя+".Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УсловияПоставокПоДоговорамКонтрагентов.Остатки(&ДатаОстатка, ДоговорКонтрагента = &ДоговорКонтрагента) КАК УсловияПоставокПоДоговорамКонтрагентовОстатки
	|		ПО ТабличнаяЧасть.Номенклатура = УсловияПоставокПоДоговорамКонтрагентовОстатки.Номенклатура
	|			И ТабличнаяЧасть.ХарактеристикаНоменклатуры = УсловияПоставокПоДоговорамКонтрагентовОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ВЫБОР
	|		КОГДА УсловияПоставокПоДоговорамКонтрагентовОстатки.Цена = ТабличнаяЧасть.Цена
	|			ТОГДА 1
	|		ИНАЧЕ 9
	|	КОНЕЦ,	
	|	ВЫБОР
	|		КОГДА УсловияПоставокПоДоговорамКонтрагентовОстатки.Цена Есть NULL
	|			ТОГДА Ложь                                                    
	|		ИНАЧЕ Истина
	|	КОНЕЦ 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Сортировка";
	РезультатЗапроса=Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли; 
	тзРезультат=РезультатЗапроса.Выгрузить();
	
	тзНоменклатуры=тзРезультат.Скопировать(,"Номенклатура");
	тзНоменклатуры.Свернуть("Номенклатура",);
	Для каждого СтрокиТЗ Из тзНоменклатуры Цикл
		ТекНоменклатура = СтрокиТЗ.Номенклатура; 
		МассивСтрокПоДругойЦене = тзРезультат.НайтиСтроки(Новый Структура("Номенклатура,Сортировка", ТекНоменклатура, 9));
		МассивСтрокЕстьЦены = тзРезультат.НайтиСтроки(Новый Структура("Номенклатура,Сортировка", ТекНоменклатура, 1));       
		КоличествоСтрокПоДругойЦене = МассивСтрокПоДругойЦене.Количество();
		КоличествоСтрокЕстьЦены = МассивСтрокЕстьЦены.Количество();
		Если КоличествоСтрокПоДругойЦене<>0 и НЕ МассивСтрокПоДругойЦене[0].НайденоУсловие Тогда Продолжить; КонецЕсли;
		
		Если КоличествоСтрокЕстьЦены<>0 Тогда 
			Количество = МассивСтрокЕстьЦены[0].Количество; 
			КоличествоОстаток = МассивСтрокЕстьЦены[0].КоличествоОстаток; 
			Если Количество<КоличествоОстаток И КоличествоСтрокПоДругойЦене<>0 Тогда
				Разница = КоличествоОстаток - Количество;
				Сообщить("Остаток номенклатуры "+ТекНоменклатура+" по условию договора составляет "+Разница+" "+ТекНоменклатура.БазоваяЕдиницаИзмерения+", 
				|этот остаток должен быть продан по цене: "+МассивСтрокЕстьЦены[0].Цена+" "+МодульВалютногоУчета.ПолучитьВалюту("Бух"));
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли КоличествоСтрокПоДругойЦене<>0 И МассивСтрокПоДругойЦене[0].НайденоУсловие Тогда 
			Сообщить("Остаток номенклатуры "+ТекНоменклатура+" по условию договора составляет  "+МассивСтрокПоДругойЦене[0].КоличествоОстаток+" "+ТекНоменклатура.БазоваяЕдиницаИзмерения+" 
			|этот остаток должен быть продан по цене: "+МассивСтрокПоДругойЦене[0].Цена+" "+МодульВалютногоУчета.ПолучитьВалюту("Бух"));
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры
