Функция ОтборСтрок(ДинамическийСписок, стрПоле="Ссылка", ДополнительныеПоляВыбора=Неопределено, ДополнительныйОтбор=Неопределено) Экспорт
    // Описание переменной ДополнительныйОтбор:

    //ДополнительныйОтбор=Новый ТаблицаЗначений;
    //ДополнительныйОтбор.Колонки.Добавить("ЛевоеЗначение");
    //ДополнительныйОтбор.Колонки.Добавить("ВидСравнения");
    //ДополнительныйОтбор.Колонки.Добавить("ПравоеЗначение");

    СхемаКомпоновкиДанных=Новый СхемаКомпоновкиДанных;

    // Заполнение запроса источника данных
    ИсточникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
    ИсточникДанных.Имя="ИсточникДанных1";
    ИсточникДанных.ТипИсточникаДанных="Local";

	НаборДанныхЗапрос=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанныхЗапрос.Имя="НаборДанных";
    НаборДанныхЗапрос.ИсточникДанных="ИсточникДанных1";

    Если ДинамическийСписок.ПроизвольныйЗапрос Тогда
        НаборДанныхЗапрос.Запрос=ДинамическийСписок.ТекстЗапроса;
		Если ПустаяСтрока(НаборДанныхЗапрос.Запрос) Тогда
			НаборДанныхЗапрос.Запрос=ДинамическийСписок.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ТекстЗапроса;
		КонецЕсли;
		Для каждого СтрокаКоллекции Из ДинамическийСписок.Параметры.Элементы Цикл
			НовыйЭлемент=СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.ПараметрыДанных.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаКоллекции);
		КонецЦикла;
    Иначе
        НаборДанныхЗапрос.Запрос="
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	"+ДинамическийСписок.ОсновнаяТаблица+" КАК ИсточникДанных
		|";
    КонецЕсли;
	
    // Заполнение выводимых полей и группировок
    ВыбранноеПолеКомпоновкиДанных=СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПолеКомпоновкиДанных.Поле=Новый ПолеКомпоновкиДанных(стрПоле);

    Если НЕ ДополнительныеПоляВыбора=Неопределено Тогда
        Для Каждого ДополнительноеПолеВыбора Из ДополнительныеПоляВыбора Цикл
            ВыбранноеПолеКомпоновкиДанных=СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
            ВыбранноеПолеКомпоновкиДанных.Поле=Новый ПолеКомпоновкиДанных(ДополнительноеПолеВыбора);
        КонецЦикла;
    КонецЕсли;

    ГруппировкаКомпоновкиДанных=СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных=СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	Если НЕ стрПоле="Ссылка" Тогда
		ПолеГруппировки=ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование=Истина;
		ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных(стрПоле);

		ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;    

    // Сформируем настройки КД
    ИсточникДоступныхНастроекКомпоновкиДанных=Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);

    КомпоновщикНастроекКомпоновкиДанных=Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);

    // Сформируем отбор
    Для Каждого ЭлементОтбора Из ДинамическийСписок.Отбор.Элементы Цикл
        СоздатьЭлементОтбора(КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы,ЭлементОтбора);
    КонецЦикла;

    Если НЕ ДополнительныйОтбор=Неопределено Тогда
        Для Каждого ЭлементОтбора Из ДополнительныйОтбор Цикл
            НовыйЭлементОтбора=КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            НовыйЭлементОтбора.ЛевоеЗначение=Новый ПолеКомпоновкиДанных(ЭлементОтбора.ЛевоеЗначение);
            Если ЭлементОтбора.ВидСравнения=Неопределено Тогда
                НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
            Иначе
                НовыйЭлементОтбора.ВидСравнения=ЭлементОтбора.ВидСравнения;
            КонецЕсли;
            НовыйЭлементОтбора.ПравоеЗначение=ЭлементОтбора.ПравоеЗначение;
        КонецЦикла;
    КонецЕсли;

    // Получим итоговые настройки и макет
    НастройкиКомпоновкиДанных=КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
    КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновкиДанных=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    // Подготовим процессор и выполним компоновку
    ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

    тзРезультат=Новый ТаблицаЗначений;
    ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(тзРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);

    Возврат тзРезультат.ВыгрузитьКолонку(стрПоле);
КонецФункции

Процедура СоздатьЭлементОтбора(ЭлементыОтбора, ЭлементОтбораИсточник, РежимОтображения="Недоступный") Экспорт
    НовыйЭлементОтбора=ЭлементыОтбора.Добавить(Тип(ЭлементОтбораИсточник));
    ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбораИсточник);
	НовыйЭлементОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных[РежимОтображения];
	Если Тип(ЭлементОтбораИсточник)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбораИсточник.Элементы.Количество() > 0 Тогда
        Для Каждого ЭлементОтбора Из ЭлементОтбораИсточник.Элементы Цикл
            СоздатьЭлементОтбора(НовыйЭлементОтбора.Элементы, ЭлементОтбора)
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры

Процедура НастройкаПоПравилам(ДинамическийСписок, ЭтаФорма, Знач ИсточникДанных="", ИмяДинамическогоСписка="ДинамическийСписок") Экспорт
	//*** УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, ИмяДинамическогоСписка);
	РегистрыСведений.НастройкиФормыСписка.ВыполнитьНастройку(ДинамическийСписок, ЭтаФорма, ИсточникДанных, ИмяДинамическогоСписка);	
КонецПроцедуры

//Процедура ИзменитьНаСервере(ЭтаФорма, ИмяРеквизита)
//	МассивРеквизитов=Новый Массив;
//	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДинамическийСписок"),,"Поле таблицы"));

//	// изменяем реквизиты формы
//	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
//	ЭтаФорма[ИмяРеквизита].ОсновнаяТаблица = "РегистрСведений.ЗарплатаТрудовойСтаж";

//	// добавляем динамический список на форму
//	Элемент=ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ЭтаФорма);
//	Элемент.ПутьКДанным = ИмяРеквизита;
//	Элемент.Видимость = Истина;
//	
//	//добавляем колонки динамического списка
//	КолонкаКод=ЭтаФорма.Элементы.Добавить("ФизЛицо" + ИмяРеквизита, Тип("ПолеФормы"), ЭтаФорма.Элементы[ИмяРеквизита]);
//	КолонкаКод.Вид=ВидПоляФормы.ПолеВвода;
//	КолонкаКод.ПутьКДанным=ИмяРеквизита + ".ФизЛицо";	
//КонецПроцедуры

Функция СписокПодвидов(СсылкаНаОбъект) Экспорт
	спМеню=Новый СписокЗначений;
	спМеню.Добавить("", "<< Очистить подвид>>");	
	Выборка=Справочники.Подвиды.Выбрать(,УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(СсылкаНаОбъект.Метаданные().ПолноеИмя()));
	Пока Выборка.Следующий() Цикл
		Если НЕ ПустаяСтрока(Выборка.ИмяПредопределеного) Тогда Продолжить; КонецЕсли;
		спМеню.Добавить(Выборка.Ссылка, СокрЛП(Выборка.Наименование));
	КонецЦикла;
	Возврат ?(спМеню.Количество()=0, Новый СписокЗначений, спМеню);
КонецФункции

Процедура УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, ИмяСписка="ДинамическийСписок", ИмяЭлемента="Дата") Экспорт
	РеквизитСписок = ЭтотОбъект[ИмяСписка];
	
	Если ТипЗнч(РеквизитСписок) = Тип("ДинамическийСписок") Тогда 
		// ДинамическийСписок позволяет установить условное оформление с помощью собственного компоновщика.
		// При этом параметр ИмяЭлемента игнорируется, потому что компоновщик динамического списка
		// не знает как будут отображены реквизиты списка, потому путем к реквизиту и значения отбора и оформления 
		// является имя реквизита динамического списка.
		УсловноеОформление = РеквизитСписок.УсловноеОформление;
		//ПутьКРеквизиту = ЧастиПолногоИмени[1];
		//ИмяОформляемогоПоля = ПутьКРеквизиту;
	Иначе 
		// Остальные списки, например, ДанныеФормыДерево:
		// не имеют собственного компоновщика, потому используют компоновщик самой формы.
		УсловноеОформление = ЭтотОбъект.УсловноеОформление;
		//ПутьКРеквизиту = ПолноеИмяРеквизита;
		//ИмяОформляемогоПоля = ИмяЭлемента;
	КонецЕсли;
	ИмяОформляемогоПоля = ИмяЭлемента;
	ПутьКРеквизиту=ИмяСписка+"."+ИмяЭлемента;
	
	Если Не ЗначениеЗаполнено(УсловноеОформление.ИдентификаторПользовательскойНастройки) Тогда
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	КонецЕсли;
	
	// По умолчанию используется представление "10.06.2012".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты: ""10.06.2012""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	
	// Для сегодняшнего дня используется представления "09:46".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты сегодня: ""09:46""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);	
КонецПроцедуры

Процедура ___УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, ПолноеИмяРеквизита="ДинамическийСписок.Дата", ИмяЭлемента="Дата") Экспорт
	ЧастиПолногоИмени=СтрРазделить(ПолноеИмяРеквизита, ".");
	Если НЕ ЧастиПолногоИмени.Количество()=2 Тогда Возврат; КонецЕсли;
	
	ИмяСписка = ЧастиПолногоИмени[0];
	РеквизитСписок = ЭтотОбъект[ИмяСписка];
	
	Если ТипЗнч(РеквизитСписок) = Тип("ДинамическийСписок") Тогда 
		// ДинамическийСписок позволяет установить условное оформление с помощью собственного компоновщика.
		// При этом параметр ИмяЭлемента игнорируется, потому что компоновщик динамического списка
		// не знает как будут отображены реквизиты списка, потому путем к реквизиту и значения отбора и оформления 
		// является имя реквизита динамического списка.
		УсловноеОформление = РеквизитСписок.УсловноеОформление;
		ПутьКРеквизиту = ЧастиПолногоИмени[1];
		ИмяОформляемогоПоля = ПутьКРеквизиту;
	Иначе 
		// Остальные списки, например, ДанныеФормыДерево:
		// не имеют собственного компоновщика, потому используют компоновщик самой формы.
		УсловноеОформление = ЭтотОбъект.УсловноеОформление;
		ПутьКРеквизиту = ПолноеИмяРеквизита;
		ИмяОформляемогоПоля = ИмяЭлемента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УсловноеОформление.ИдентификаторПользовательскойНастройки) Тогда
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	КонецЕсли;
	
	// По умолчанию используется представление "10.06.2012".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты: ""10.06.2012""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	
	// Для сегодняшнего дня используется представления "09:46".
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты сегодня: ""09:46""'");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКРеквизиту);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);	
КонецПроцедуры