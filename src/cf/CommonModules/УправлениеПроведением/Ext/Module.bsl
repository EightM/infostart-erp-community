Функция УчетПартийТМЦ_ПолучитьОстаток(ВыбНоменклатура, ВыбХарактеристика=Неопределено, ВыбСерия=Неопределено, ВыбСклад=Неопределено, ВыбДата=Неопределено) Экспорт
	стрУсловие="Номенклатура = &Номенклатура";
	Если ЗначениеЗаполнено(ВыбХарактеристика) Тогда
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбСерия) Тогда
		стрУсловие=стрУсловие+" И СерияНоменклатуры = &СерияНоменклатуры";		
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбСклад) Тогда
		стрУсловие=стрУсловие+" И Склад В (&Склад)";
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ВыбНоменклатура);
	Запрос.УстановитьПараметр("ВыбДата", ?(ВыбДата=Неопределено, ТекущаяДата(), ВыбДата));
	Запрос.УстановитьПараметр("Склад", ВыбСклад);
	Запрос.УстановитьПараметр("СерияНоменклатуры", ВыбСерия);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ВыбХарактеристика);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.СерияНоменклатуры,
	|	ИсточникДанных.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ВыбДата, "+стрУсловие+") КАК ИсточникДанных
	|";
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли; 

	Возврат РезультатЗапроса.Выгрузить().Итог("КоличествоОстаток");
КонецФункции

Функция ЗаказыНаПроизводство_ПолучитьОстаток(СтруктураОтбора=Неопределено, ВыбДата=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ВыбДата", ВыбДата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Контрагент,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ЗаказНаряд,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.КоличествоОстаток Как Количество,
	|	ИсточникДанных.СтоимостьОстаток Как Стоимость
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(&ВыбДата) КАК ИсточникДанных
	|";

	Если СтруктураОтбора<>Неопределено Тогда
		стрТектУсловия="";
		Для каждого СтрокаКоллекции Из СтруктураОтбора Цикл
			стрКлюч=СтрокаКоллекции.Ключ;
			Запрос.УстановитьПараметр(стрКлюч, СтрокаКоллекции.Значение);
			стрТектУсловия=стрТектУсловия+Символы.ПС+?(стрТектУсловия="", " ГДЕ ", " И ")+"ИсточникДанных."+стрКлюч+" В (&"+стрКлюч+")";
		КонецЦикла; 
		Запрос.Текст=Запрос.Текст+Символы.ПС+стрТектУсловия;
	КонецЕсли;

	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат Неопределено; КонецЕсли; 

	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

Функция РегистрыБухгалтерии_ПолучитьОстаток(СтруктураОтбора=Неопределено, ИмяРегистра="Хозрасчетный", МоментВремени=Неопределено, Развернутый=Истина) Экспорт
    //Возврат РегистрыБухгалтерии[ИмяРегистра].Остатки(МоментВремени,,СтруктураОтбора);

	стрКоличествоОстатокДт="1 Как КоличествоОстатокДт";
	стрКоличествоОстатокКт="1 Как КоличествоОстатокКт";

	Запрос=Новый Запрос; стрУсловиеОбщее=""; стрУсловиеСчета=""; стрРазвернутый=?(Развернутый, "Развернутый", "");
	Запрос.УстановитьПараметр("МоментВремени", ?(МоментВремени=Неопределено, ТекущаяДата(), МоментВремени));
	Для каждого СтрокаОтбора Из СтруктураОтбора Цикл
		стрКлюч=СтрокаОтбора.Ключ;
		Запрос.УстановитьПараметр(стрКлюч, СтрокаОтбора.Значение);
		Если стрКлюч="Счет" Тогда
			Если СтрокаОтбора.Значение.Количественный Тогда
				стрКоличествоОстатокДт="ИсточникДанных.Количество"+стрРазвернутый+"ОстатокДт Как КоличествоОстатокДт";
				стрКоличествоОстатокКт="ИсточникДанных.Количество"+стрРазвернутый+"ОстатокКт Как КоличествоОстатокКт";
			КонецЕсли; 
			стрУсловиеСчета=стрКлюч+"=&"+стрКлюч;
		Иначе
			стрУсловиеОбщее=стрУсловиеОбщее+?(стрУсловиеОбщее="", "", " И ")+стрКлюч+"=&"+стрКлюч;
		КонецЕсли; 
	КонецЦикла; 
	Запрос.Текст="
	|ВЫБРАТЬ
	|	"+стрКоличествоОстатокДт+",
	|	"+стрКоличествоОстатокКт+",
	|	ИсточникДанных.СуммаОстаток Как СуммаОстаток,
	|	ИсточникДанных.КоличествоОстаток Как КоличествоОстаток,
	|	ИсточникДанных.ВалютнаяСуммаОстаток Как ВалютнаяСуммаОстаток,
	|	ИсточникДанных.СуммаНУОстаток Как СуммаНУОстаток,
	|	ИсточникДанных.СуммаВРОстаток Как СуммаВРОстаток,
	|	ИсточникДанных.СуммаПРОстаток Как СуммаПРОстаток,
	|	ИсточникДанных.Сумма"+стрРазвернутый+"ОстатокДт Как СуммаОстатокДт,
	|	ИсточникДанных.Сумма"+стрРазвернутый+"ОстатокКт Как СуммаОстатокКт,
	|	ИсточникДанных.СуммаНУ"+стрРазвернутый+"ОстатокДт Как СуммаНУОстатокДт,
	|	ИсточникДанных.СуммаНУ"+стрРазвернутый+"ОстатокКт Как СуммаНУОстатокКт,
	|	ИсточникДанных.СуммаВР"+стрРазвернутый+"ОстатокДт Как СуммаВРОстатокДт,
	|	ИсточникДанных.СуммаВР"+стрРазвернутый+"ОстатокКт Как СуммаВРОстатокКт,
	|	ИсточникДанных.СуммаПР"+стрРазвернутый+"ОстатокДт Как СуммаПРОстатокДт,
	|	ИсточникДанных.СуммаПР"+стрРазвернутый+"ОстатокКт Как СуммаПРОстатокКт,
	|	ИсточникДанных.Счет,
	|	ИсточникДанных.Субконто1,
	|	ИсточникДанных.Субконто2,
	|	ИсточникДанных.Субконто3,
	|	ИсточникДанных.Организация
	|ИЗ
	|	РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени,"+стрУсловиеСчета+",,"+стрУсловиеОбщее+") КАК ИсточникДанных
	|";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции


Процедура КонтрольНаценки(ДокументОбъект, Отказ)
	мдДвижения=ДокументОбъект.Метаданные().Движения; 
	Если НЕ мдДвижения.Содержит(Метаданные.РегистрыНакопления.Продажи) Тогда
		Возврат;
	КонецЕсли;

	ТипКонтроляНаценки=Константы.КонтрольНаценки.Получить();
	прчТипКонтроля=Перечисления.ТипыКонтроляОтрицательныхОстатков;

	Если ТипКонтроляНаценки=Неопределено Или ТипКонтроляНаценки=прчТипКонтроля.НеКонтролировать Тогда
		Возврат;
	КонецЕсли;

	тзДвижения=РегистрыНакопления["Продажи"].СоздатьНаборЗаписей();
	тзДвижения.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	тзДвижения.Прочитать();
	Если тзДвижения.Количество()=0 Тогда Возврат; КонецЕсли; 

	НижняяГраницаНаценки=Константы.НижняяГраницаНаценки.Получить();
	ВерхняяГраницаНаценки=Константы.ВерхняяГраницаНаценки.Получить();
	
	УчетНижнейГраницы=НижняяГраницаНаценки > 0;
	УчетВерхнейГраницы=ВерхняяГраницаНаценки > 0;

	Для каждого СтрокаКоллекции Из тзДвижения Цикл
		Если СтрокаКоллекции.Стоимость<=0 Тогда Продолжить; КонецЕсли;

		СтоимостьУчетная=СтрокаКоллекции.Себестоимость;	
		СтоимостьПродажи=СтрокаКоллекции.Стоимость;	
		Наценка=Окр(100*(СтоимостьПродажи-СтоимостьУчетная)/СтоимостьПродажи, 4, 1);

		ЭтоЛегальнаяНаценка=Истина;
		Если УчетНижнейГраницы И Наценка<Число(НижняяГраницаНаценки) Тогда
			ЭтоЛегальнаяНаценка=Ложь;
		ИначеЕсли УчетВерхнейГраницы И Наценка>Число(ВерхняяГраницаНаценки) Тогда
			ЭтоЛегальнаяНаценка=Ложь;
		КонецЕсли;
		Если ЭтоЛегальнаяНаценка Тогда Продолжить; КонецЕсли;

		стрОграничениеНаценки=?(УчетНижнейГраницы, СокрЛП(НижняяГраницаНаценки)+" %", " ")+
		";"+?(УчетВерхнейГраницы, СокрЛП(ВерхняяГраницаНаценки)+" %", " ");
		Сообщить("Наценка при реализации товара "+СокрЛП(СтрокаКоллекции.Номенклатура)+": "+
		СокрЛП(Наценка)+" % не входит в контрольный интервал ("+стрОграничениеНаценки+")."+Символы.ПС+
		"Стоимость товара без НДС: "+Строка(СтоимостьПродажи)+" себестоимость: "+Строка(СтоимостьУчетная));

		Если ТипКонтроляНаценки=прчТипКонтроля.ЗапретитьПроведения Тогда Отказ=Истина; КонецЕсли;
    КонецЦикла;

КонецПроцедуры

///////////////////////// КЛАСС - КОНТЕЙНЕР ///////////////////

Процедура ОчиститьТаблицыДвижений(Движения) Экспорт
	Если Константы.НеХранитьДанныеРегистраСписанныеТовары.Получить() Тогда
		Если Движения.Найти("СписанныеТовары")<>Неопределено Тогда
			Движения.СписанныеТовары.Очистить();
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаКоллекции Из Движения Цикл
		Если СтрокаКоллекции.ДополнительныеСвойства.Свойство("Использовать") Тогда
			СтрокаКоллекции.мТаблицаДвижений=Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
 
Процедура ПеренестиДвиженияДокумента(Док, Движения) Экспорт
	Док.Дата=Док.Дата+1;
	Если НЕ Док.ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
	Док.Записать(РежимЗаписиДокумента.Проведение);

	Для Каждого мдДвижения Из Док.Метаданные().Движения Цикл
		стрРегистр=мдДвижения.Имя;
		Если стрРегистр="СписанныеТовары" Тогда
			СтрокаТаблицыДвижения1=РегистрыСведений[стрРегистр].СоздатьНаборЗаписей();
		ИначеЕсли стрРегистр="Хозрасчетный" Или стрРегистр="Финансовый" Тогда
			СтрокаТаблицыДвижения1=РегистрыБухгалтерии[стрРегистр].СоздатьНаборЗаписей();
		Иначе
			СтрокаТаблицыДвижения1=РегистрыНакопления[стрРегистр].СоздатьНаборЗаписей();
		КонецЕсли;
		СтрокаТаблицыДвижения1.Отбор.Регистратор.Установить(Док.Ссылка);
		СтрокаТаблицыДвижения1.Прочитать();
		Если СтрокаТаблицыДвижения1.Количество()=0 Тогда Продолжить; КонецЕсли;
		
		СтрокаТаблицыДвижения2=Движения.Найти(стрРегистр);
		Если СтрокаТаблицыДвижения2=Неопределено Тогда Продолжить; КонецЕсли;

		тзИсточник=СтрокаТаблицыДвижения1.Выгрузить();
		Если СтрокаТаблицыДвижения2.мТаблицаДвижений=Неопределено Тогда
			СтрокаТаблицыДвижения2.мТаблицаДвижений=тзИсточник;
			СтрокаТаблицыДвижения2.ДополнительныеСвойства.Вставить("Использовать", Истина);
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(тзИсточник, СтрокаТаблицыДвижения2.мТаблицаДвижений);
		КонецЕсли; 
	КонецЦикла;
	
	Док.Удалить();
КонецПроцедуры

Процедура ЗаписатьДвиженияДокумента(ЭтотОбъект, Ссылка, Движения) Экспорт
	//проведение
	Для Каждого СтрокаТаблицыДвижения Из Движения Цикл
		Если СтрокаТаблицыДвижения.ДополнительныеСвойства.Свойство("Использовать")=Ложь Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДвижений=СтрокаТаблицыДвижения.мТаблицаДвижений;
		Если Не ЗначениеЗаполнено(ТаблицаДвижений) Тогда Продолжить; КонецЕсли;

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка.Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект, "Регистратор");
		Если СтрокаТаблицыДвижения=Движения.СписанныеТовары Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
				СтрокаТаблицы.НомерСтрокиДокумента=СтрокаТаблицы.НомерСтроки; //+++ ТаблицаДвижений.Индекс(СтрокаТаблицы)+1;
			КонецЦикла; 
		КонецЕсли;
		Если СтрокаТаблицыДвижения=Движения.ПартииТоваровНаСкладах Тогда
			//тзУчетнаяПолитика=УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(Ссылка.Дата);
			//Если Не тзУчетнаяПолитика[0].СпособОценкиМПЗУпр=Перечисления.СпособыОценки.ПоСредней Тогда
			УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ЭтотОбъект.Дата,,ЭтотОбъект.Организация);
			Если НЕ УчетнаяПолитика.СпособОценкиМПЗ=Перечисления.СпособыОценки.ПоСредней Тогда
				//** ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументОприходования");
				Для каждого СтрокаКоллекции Из ТаблицаДвижений Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.ДокументОприходования) Тогда
						СтрокаКоллекции.ДокументОприходования=Ссылка;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицыДвижения)=Тип("РегистрСведенийНаборЗаписей.СписанныеТовары") Тогда
			Счетчик=1;
			Для каждого СтрокаКоллекции Из ТаблицаДвижений Цикл
				СтрокаКоллекции.НомерСтрокиДокумента=Счетчик; Счетчик=Счетчик+1;
			КонецЦикла; 
		КонецЕсли; //20.12.2010
		СтрокаТаблицыДвижения.Загрузить(ТаблицаДвижений);
		СтрокаТаблицыДвижения.Записать();
	КонецЦикла;	
КонецПроцедуры

// Пост.обработка проведения (допроведение по регистрам после основного проведения)
Процедура ОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если Отказ Тогда Возврат; КонецЕсли; 

	ДополнительныеСвойства=Источник.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Если ДополнительныеСвойства.РегистрыДляПроведения.Количество()>0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; //Выборочное проведение по регистрам
	
	КонтрольНаценки(Источник, Отказ);	

	ВыполнятьТОП=Истина; Источник.ДополнительныеСвойства.Свойство("ВыполнятьТОП", ВыполнятьТОП);
	Если НЕ ВыполнятьТОП=Ложь Тогда
		РегистрыБухгалтерии_ВыполнитьДвижения(Источник, Отказ);
		Если Отказ Тогда Возврат; КонецЕсли;

		РегистрыНакопления_ВыполнитьДвижения(Источник, Отказ, РежимПроведения);
		Если Отказ Тогда Возврат; КонецЕсли;
	КонецЕсли;

	ОчиститьТаблицыДвижений(Источник.Движения);	
	СобытияМодуляОбъекта.ОбработкаПроведения(Источник, Отказ, РежимПроведения);
	
	Если СокрЛП(Источник.Метаданные().ЗаписьДвиженийПриПроведении)="ЗаписыватьВыбранные" Тогда
		Источник.Движения.Записать();
	КонецЕсли; //2018
КонецПроцедуры

Функция ПолучитьНастройкуКонтроляОстатков(РежимПроведения, Пользователь)
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Пользователь,
	|	ИсточникДанных.РежимПроведения,
	|	ИсточникДанных.ВидРегистра,
	|	ИсточникДанных.ТипКонтроля,
	|	ИсточникДанных.ВидКонтроля,
	|	ИсточникДанных.ВидыДокументов,
	|	ИсточникДанных.ВыводитьФорму,
	|	ИсточникДанных.Измерения,
	|	ИсточникДанных.Ресурсы
	|ИЗ
	|	РегистрСведений.КонтрольОтрицательныхОстатков КАК ИсточникДанных
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат Неопределено; КонецЕсли;
	
	тзПравила=Результат.Выгрузить();	
	тзПравила.Колонки.Добавить("ИсключитьСтроку");
	тзПравила.Колонки.Добавить("ИндексПользователя");
	тзПравила.Колонки.Добавить("ИндексРежимПроведения");
	тзПравила.ЗаполнитьЗначения(500, "ИндексПользователя,ИндексРежимПроведения");

	Для Каждого СтрокаКоллекции Из тзПравила Цикл
		СтрокаКоллекции.ИсключитьСтроку=Ложь;
		текПользователь=СтрокаКоллекции.Пользователь;
		Если ЗначениеЗаполнено(текПользователь) Тогда
			Если текПользователь.ЭтоГруппа И Пользователь.ПринадлежитЭлементу(текПользователь) Тогда
				СтрокаКоллекции.ИндексПользователя=2;
			ИначеЕсли текПользователь=Пользователь Тогда
				СтрокаКоллекции.ИндексПользователя=1;
			Иначе
				СтрокаКоллекции.ИндексПользователя=1000;
				СтрокаКоллекции.ИсключитьСтроку=Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКоллекции.РежимПроведения) Тогда
			СтрокаКоллекции.ИндексРежимПроведения=?(НРег(СтрокаКоллекции.РежимПроведения)=НРег(СокрЛП(РежимПроведения)), 1, 1000);
			СтрокаКоллекции.ИсключитьСтроку=СтрокаКоллекции.ИндексРежимПроведения=1000;
		КонецЕсли;
	КонецЦикла;

	Если тзПравила.Количество()=0 Тогда 
		Возврат Неопределено; 
	КонецЕсли;

	тзПравила=тзПравила.Скопировать(тзПравила.НайтиСтроки(Новый Структура("ИсключитьСтроку", Ложь)));
	тзПравила.Сортировать("ИндексПользователя Возр,ИндексРежимПроведения Возр");

	Возврат тзПравила;	
КонецФункции

///////////////////////////////////////////////////////////////////////
// Контроль остатов по регистрам (накопления\бухгалтерии)

Процедура КонтрольОстатковРегистровНакопления(Источник, Отказ, РежимПроведения) Экспорт
	тзПравила=ПолучитьНастройкуКонтроляОстатков(РежимПроведения, ПараметрыСеанса.ТекущийПользователь);
	Если тзПравила=Неопределено Тогда Возврат; КонецЕсли; 

	стрВидДок=Источник.Метаданные().Имя;
	СтруктураРегистров=Новый Структура;
	
	Для Каждого НаборЗаписей Из Источник.Движения Цикл		
		Если Найти(Строка(НаборЗаписей), "РегистрНакопленияНаборЗаписей")=0 Тогда Продолжить; КонецЕсли;

		стрРегистр=НаборЗаписей.Метаданные().Имя;
		мдРегистра=Метаданные.РегистрыНакопления[стрРегистр];
		Если Строка(мдРегистра.ВидРегистра)="Обороты" Тогда Продолжить; КонецЕсли;

		СтруктураЗаписей=тзПравила.Найти(стрРегистр, "ВидРегистра");
		Если СтруктураЗаписей=Неопределено Тогда Продолжить; КонецЕсли;
        Если Найти(СтруктураЗаписей.ВидыДокументов+",", стрВидДок+",")=0 Тогда Продолжить; КонецЕсли;

		//Устанавливаем блокировку
		Блокировка=Новый БлокировкаДанных();
        ЭлементБлокировки=Блокировка.Добавить("РегистрНакопления."+стрРегистр+".НаборЗаписей");
        ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Источник.Ссылка);
		Блокировка.Заблокировать();
		//Устанавливаем блокировку

		НаборЗаписей=Источник.Движения[стрРегистр];
		Если НаборЗаписей.Количество()=0 Тогда
			НаборЗаписей=РегистрыНакопления[стрРегистр].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
		КонецЕсли; 
		Если НаборЗаписей.Количество()=0 Тогда Продолжить; КонецЕсли;

		стрУсловия1=""; стрУсловия2="";	стрСоединения=""; стрКолонки="";
		
		стрИзмерения=СтрЗаменить(СтруктураЗаписей.Измерения, ",", Символы.ПС);
		Для ъ=1 По СтрЧислоСтрок(стрИзмерения) Цикл
			стрИзмерение=СтрПолучитьСтроку(стрИзмерения, ъ);
			стрКолонки=стрКолонки+?(стрКолонки="", "", ",")+стрИзмерение;
			стрУсловия1=стрУсловия1+?(стрУсловия1="", "", ",")+стрИзмерение;
			стрУсловия2=стрУсловия2+?(стрУсловия2="", "", ",")+"А."+стрИзмерение;
			стрСоединения=стрСоединения+?(стрСоединения="", "", " И ")+"Первая."+стрИзмерение+"="+стрРегистр+"."+стрИзмерение+" ";
		КонецЦикла;	
		
		стрРеквизитов=СтрЗаменить(стрУсловия2, "А.", "Первая.");
		стрРесурсы=СтрЗаменить(СтруктураЗаписей.Ресурсы, ",", Символы.ПС);
		Для ъ=1 По СтрЧислоСтрок(стрРесурсы) Цикл
			стрРесурс=СтрПолучитьСтроку(стрРесурсы, ъ);
			стрКолонки=стрКолонки+?(стрКолонки="", "", ",")+стрРесурс;		
			стрРеквизитов=стрРеквизитов+?(стрРеквизитов="", "", ",")+"Первая."+стрРесурс+?(стрРеквизитов="", "", ",")+"ЕстьNULL("+стрРегистр+"."+стрРесурс+"Остаток,0) КАК "+стрРесурс+"Остаток";
		КонецЦикла;

		ЕстьНомерСтрокиТабличнойЧасти=НЕ мдРегистра.Реквизиты.Найти("НомерСтрокиТабличнойЧасти")=Неопределено;
		Если ЕстьНомерСтрокиТабличнойЧасти Тогда
			стрКолонки=стрКолонки+",НомерСтрокиТабличнойЧасти";
			стрРеквизитов=стрРеквизитов+",Первая.НомерСтрокиТабличнойЧасти";
		КонецЕсли; 
		
		тзПроведения=НаборЗаписей.Выгрузить(,"ВидДвижения,"+стрКолонки);
		тзПроведения.Свернуть("ВидДвижения,"+СтруктураЗаписей.Измерения+?(ЕстьНомерСтрокиТабличнойЧасти, ",НомерСтрокиТабличнойЧасти", ""), СтруктураЗаписей.Ресурсы);
		//*** тзПроведения.Свернуть("ВидДвижения,"+СтруктураЗаписей.Измерения, СтруктураЗаписей.Ресурсы);

        МассивСтрок=тзПроведения.НайтиСтроки(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход));
		Если МассивСтрок.Количество()=0 Тогда Возврат; КонецЕсли; 

		тзПроведения=тзПроведения.Скопировать(МассивСтрок);
		тзПроведения.колонки.Удалить("ВидДвижения");

		////Устанавливаем блокировку
		//Блокировка=Новый БлокировкаДанных;
		//ЭлементБлокировки=Блокировка.Добавить("РегистрНакопления."+стрРегистр);
		//ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.ИсточникДанных=тзПроведения;
		//Для ъ=1 По СтрЧислоСтрок(стрИзмерения) Цикл
		//	стрИзмерение=СтрПолучитьСтроку(стрИзмерения, ъ);
		//	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(стрИзмерение, стрИзмерение);
		//КонецЦикла; 
		//Блокировка.Заблокировать();
		////Устанавливаем блокировку

		ОбщееУсловие = "("+стрУсловия1+") В ( Выбрать "+стрУсловия2+"
		| ИЗ Первая КАК А)" ;

		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("тзПроведения", тзПроведения);
		Запрос.УстановитьПараметр("ДатаОстатков", ?(СтруктураЗаписей.ВидКонтроля, Источник.МоментВремени(), Новый Граница(ТекущаяДата(),ВидГраницы.Включая)));
		Запрос.Текст="
		|Выбрать *
		| 	Поместить Первая	
		|ИЗ
		|	&тзПроведения КАК ИсточникДанных
		|	;
		|/////////////////////////////////////////////////////////////////////////////////
		|	Выбрать
		|"+стрРеквизитов+"
		|ИЗ Первая КАК Первая
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления."+стрРегистр+".Остатки(&ДатаОстатков,"+ОбщееУсловие+") КАК "+стрРегистр+"
		|	ПО "+стрСоединения;
		тзДанныеЗапроса=Запрос.Выполнить().Выгрузить(); Превышение=Ложь;
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		Если тзДанныеЗапроса.Количество()=0 Тогда Продолжить; КонецЕсли;

		Если СтруктураЗаписей.ВыводитьФорму Тогда
			тзДанные=тзДанныеЗапроса.СкопироватьКолонки();
			тзДанные.Колонки.Вставить(0, "НомерСтроки");
		КонецЕсли;

		Если СтруктураЗаписей.ВыводитьФорму Тогда
			Для ъ=1 По СтрЧислоСтрок(стрРесурсы) Цикл
				стрРесурс=СтрПолучитьСтроку(стрРесурсы, ъ);
				ИндексКолонки=тзДанные.Колонки.Индекс(тзДанные.Колонки.Найти(стрРесурс+"Остаток"));
				тзДанные.Колонки.Вставить(ИндексКолонки, стрРесурс+"Нехватает");
			КонецЦикла;
		КонецЕсли; //2016
		
		//ЕстьНоменклатура=НЕ мдРегистра.Измерения.Найти("Номенклатура")=Неопределено;
		ЕстьНоменклатура=НЕ тзДанныеЗапроса.Колонки.Найти("Номенклатура")=Неопределено;
		ЕстьХарактеристикаНоменклатуры=НЕ тзДанныеЗапроса.Колонки.Найти("ХарактеристикаНоменклатуры")=Неопределено;
		ЕстьСерияНоменклатуры=НЕ тзДанныеЗапроса.Колонки.Найти("СерияНоменклатуры")=Неопределено;
		
		стрСообщение="";
		Для Каждого СтрокаКоллекции Из тзДанныеЗапроса Цикл
			ЕСли НЕ СтруктураЗаписей.ВидКонтроля Тогда
				СтрокаКоллекции[стрРесурс+"Остаток"]=СтрокаКоллекции[стрРесурс+"Остаток"]+СтрокаКоллекции[стрРесурс];
			КонецЕсли;				
			Для ъ=1 По СтрЧислоСтрок(стрРесурсы) Цикл
				стрРесурс=СтрПолучитьСтроку(стрРесурсы, ъ);
				Необходимо=СтрокаКоллекции[стрРесурс];
				Остаток=СтрокаКоллекции[стрРесурс+"Остаток"];

				Если Остаток < Необходимо Тогда
					Превышение=Истина;
					Нехватает=Необходимо-Остаток;
					НомерСтроки=?(ЕстьНомерСтрокиТабличнойЧасти, СтрокаКоллекции.НомерСтрокиТабличнойЧасти, тзДанныеЗапроса.Индекс(СтрокаКоллекции)+1);
					Если СтруктураЗаписей.ВыводитьФорму Тогда						
						//Если тзДанные.Колонки.Найти(стрРесурс+"Нехватает")=Неопределено Тогда
						//	тзДанные.Колонки.Добавить(стрРесурс+"Нехватает");
						//КонецЕсли;
						НоваяСтрока=тзДанные.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
						НоваяСтрока[стрРесурс+"Остаток"]=Необходимо-Нехватает;
						НоваяСтрока[стрРесурс+"Нехватает"]=Нехватает;
						НоваяСтрока["НомерСтроки"]=НомерСтроки;
					Иначе
						//#Если Клиент Тогда
						стрСообщение=стрСообщение+?(стрСообщение="", "", Символы.ПС)+"Строка №"+Строка(НомерСтроки);
						Если ЕстьНоменклатура Тогда
							стрСообщение=стрСообщение+": Номенклатура: "+СокрЛП(СтрокаКоллекции.Номенклатура)+".";
						КонецЕсли;
						Если ЕстьХарактеристикаНоменклатуры Тогда
							Если ЗначениеЗаполнено(СтрокаКоллекции.ХарактеристикаНоменклатуры) Тогда
								стрСообщение=стрСообщение+": Характеристика: "+СокрЛП(СтрокаКоллекции.ХарактеристикаНоменклатуры)+".";
							КонецЕсли;
						КонецЕсли;
						Если ЕстьСерияНоменклатуры Тогда
							Если ЗначениеЗаполнено(СтрокаКоллекции.СерияНоменклатуры) Тогда
								стрСообщение=стрСообщение+": Серия: "+СокрЛП(СтрокаКоллекции.СерияНоменклатуры)+".";
							КонецЕсли;
						КонецЕсли;
						стрСообщение=стрСообщение+", "+стрРесурс+" необходимо: "+СокрЛП(Необходимо)+" --> в наличии: "+СокрЛП(Необходимо-Нехватает)+" --> не хватает: "+СокрЛП(Нехватает);
						//*** Сообщить(стрСообщение);
						//#КонецЕсли
					КонецЕсли; 					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если НЕ ПустаяСтрока(стрСообщение) Тогда
			стрСообщение="Проведение документа: "+СокрЛП(Источник.Ссылка)+Символы.ПС+стрСообщение;
			Сообщить(стрСообщение);
		КонецЕсли;
		Если Превышение И СтруктураЗаписей.ТипКонтроля Тогда Отказ=Истина; КонецЕсли;
		
		Если Превышение И СтруктураЗаписей.ВыводитьФорму Тогда
			СтруктураПараметров=Новый Структура("Данные,Параметры", тзДанные, СтруктураЗаписей);
			СтруктураРегистров.Вставить(стрРегистр, СтруктураПараметров);		
		КонецЕсли; 
	КонецЦикла;
	
	//////Если СтруктураРегистров.Количество()>0 Тогда
	//////	//#Если Клиент Тогда
	//////	Форма=РегистрыСведений.КонтрольОтрицательныхОстатков.ПолучитьФорму("ФормаОтображенияРезультата");	
	//////	Форма.СтруктураРегистров=СтруктураРегистров;
	//////	Форма.Открыть();
	//////	//#КонецЕсли
	//////КонецЕсли;
КонецПроцедуры

Процедура КонтрольОстатковРегистровБухгалтерии(Источник, ИмяРегистра="Хозрасчетный", Отказ) Экспорт
	НаборДвиженийРегистра=Источник.Движения[ИмяРегистра];
	Если НаборДвиженийРегистра.Количество()=0 Тогда Возврат; КонецЕсли; 

	// определяем список счетов по которым необходимо контролировать остаток
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка
	|ИЗ
	|	ПланСчетов."+ИмяРегистра+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.КонтролироватьОстаток = Истина
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат; КонецЕсли;
	
	спСчет=Новый СписокЗначений;
	
	Выборка=Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		спСчет.Добавить(Выборка.Ссылка);
	КонецЦикла;	

	// определяем записи таблицы-источника по которым необходимо контролировать остаток 
	тзИсточникДанных=НаборДвиженийРегистра.Выгрузить(, "Организация,СчетКт,ВидСубконтоКт1,ВидСубконтоКт2,ВидСубконтоКт3,СубконтоКт1,СубконтоКт2,СубконтоКт3,КоличествоКт");
	Для Каждого СтрокаКоллекции ИЗ тзИсточникДанных Цикл   ///******
		МассивСубконто=Новый Массив;
		МассивСубконто.Добавить(СтрокаКоллекции.СубконтоКт1);
		МассивСубконто.Добавить(СтрокаКоллекции.СубконтоКт2);
		МассивСубконто.Добавить(СтрокаКоллекции.СубконтоКт3);
		ъ=0;
		Для Каждого ВидыСубконто ИЗ СтрокаКоллекции.СчетКт.ВидыСубконто Цикл
			ъ=ъ+1;
			Если СтрокаКоллекции["ВидСубконтоКт1"]=ВидыСубконто.ВидСубконто Тогда
				СтрокаКоллекции["СубконтоКт1"]=МассивСубконто.Получить(ъ-1);
			КонецЕсли;	
			
			Если СтрокаКоллекции["ВидСубконтоКт2"]=ВидыСубконто.ВидСубконто Тогда
				СтрокаКоллекции["СубконтоКт2"]=МассивСубконто.Получить(ъ-1);
			КонецЕсли;	

			Если СтрокаКоллекции["ВидСубконтоКт3"]=ВидыСубконто.ВидСубконто Тогда
				СтрокаКоллекции["СубконтоКт3"]=МассивСубконто.Получить(ъ-1);
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	ПостроительЗапроса=Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных=Новый ОписаниеИсточникаДанных(тзИсточникДанных);

	НовыйОтбор=ПостроительЗапроса.Отбор.Добавить("СчетКт");
	НовыйОтбор.Использование=Истина;
	НовыйОтбор.ВидСравнения=ВидСравнения.ВСписке;
	НовыйОтбор.Значение=спСчет;

	НовыйОтбор=ПостроительЗапроса.Отбор.Добавить("КоличествоКт");
	НовыйОтбор.Использование=Истина;
	НовыйОтбор.Значение=0;
	НовыйОтбор.ВидСравнения=ВидСравнения.Больше;

	ПостроительЗапроса.Выполнить();
	тзДанные=ПостроительЗапроса.Результат.Выгрузить();
	
	//Проверяем остаток таблицы-источника по регистру бухгалтерии
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсточникДанных", тзДанные);
	Запрос.УстановитьПараметр("МоментВремени", Источник.МоментВремени());
	Запрос.Текст="
	|Выбрать *
 	|	Поместить Первая	
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|/////////////////////////////////////////////////////////////////////////////////
	|
	|Выбрать
	|	Первая.Организация,
	|	Первая.СчетКт Как Счет,
	|	Первая.СубконтоКт1 Как Субконто1,
	|	Первая.СубконтоКт2 Как Субконто2,
	|	Первая.СубконтоКт3 Как Субконто3,
	|	Первая.КоличествоКт Как Количество,
	|	ЕстьNULL(РегистрБухгалтерии.КоличествоОстатокДт, 0) КАК КоличествоОстаток
	|
	|ИЗ Первая КАК Первая
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии."+ИмяРегистра+".Остатки(&МоментВремени, Счет В (Выбрать A.СчетКт ИЗ Первая КАК A),,(Организация,Субконто1,ЕстьNULL(Субконто2, Неопределено),ЕстьNULL(Субконто3, Неопределено)) В (Выбрать А.Организация, А.СубконтоКт1, А.СубконтоКт2, А.СубконтоКт3
	|	 	ИЗ Первая КАК А)) КАК РегистрБухгалтерии
	|
	|	ПО Первая.Организация=РегистрБухгалтерии.Организация
	|	 И Первая.СчетКт=РегистрБухгалтерии.Счет
	|	 И Первая.СубконтоКт1=РегистрБухгалтерии.Субконто1
	|	 И Первая.СубконтоКт2=ЕстьNULL(РегистрБухгалтерии.Субконто2, Неопределено)
	|	 И Первая.СубконтоКт3=ЕстьNULL(РегистрБухгалтерии.Субконто3, Неопределено)
	|";
	Результат=Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Если Результат.Пустой() Тогда Возврат; КонецЕсли;

	Выборка=Результат.Выбрать(); Превышение=Ложь;		
	Пока Выборка.Следующий() Цикл
		Значение1=Выборка["КоличествоОстаток"];
		Значение2=Выборка["Количество"];
		Если Значение1 < Значение2 Тогда 
			Сообщить("На счете: "+Выборка.Счет+", субконто1: "+Выборка.Субконто1+", субконто2:"+Выборка.Субконто2+" нет необходимого количества, необходимо списать:"+Значение2+" в наличии:"+Значение1);
			Превышение = Истина;
		КонецЕсли;
		Если Превышение Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла	
КонецПроцедуры

////////////////////// Значения Аналитики\Ресурсов /////////////////////

Функция ПолучитьЗначениеАналитики(Док, Значение, СтрокаТабличнойЧасти, стрТабличнаяЧасть="", стДвиженияРегистров=Неопределено) Экспорт
    Если ТипЗнч(Значение)<>Тип("Строка") Тогда Возврат Значение; КонецЕсли;
	Если Значение="РШК.Ссылка" Тогда Возврат Док.Ссылка; КонецЕсли; 
	мдДокумент=Док.Метаданные();

	Для НомерСтроки=1 По СтрЧислоСтрок(Значение) Цикл
		стрПуть=СтрПолучитьСтроку(Значение, НомерСтроки);
		стрПуть=стрЗаменить(стрПуть, ".", Символы.ПС);

		стрПрефикс=СтрПолучитьСтроку(стрПуть, 1);
		стрАтрибут=СтрПолучитьСтроку(стрПуть, 2);

		Если стрПрефикс="РШК" Тогда //реквизит шапки
			Если стрАтрибут="Дата" Или стрАтрибут="Номер" Или УправлениеМетаданными.ЕстьРеквизит(стрАтрибут, мдДокумент) Тогда
				ЗначениеАналитики=Док[стрАтрибут];
			КонецЕсли;

		ИначеЕсли стрПрефикс="РТЧ" Тогда //ревизит табличной части
			Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("СтрокаТаблицыЗначений") Тогда
				Попытка ЗначениеАналитики=СтрокаТабличнойЧасти[стрАтрибут];
				Исключение Продолжить;
				КонецПопытки;
			Иначе
				ЕстьАтрибут=УправлениеМетаданными.ЕстьРеквизит(стрАтрибут, мдДокумент, ?(стрТабличнаяЧасть="", Неопределено, стрТабличнаяЧасть));
				Если ЕстьАтрибут=Ложь Тогда Продолжить; КонецЕсли;
				ЗначениеАналитики=?(СтрокаТабличнойЧасти=Неопределено, Док[стрАтрибут], СтрокаТабличнойЧасти[стрАтрибут]);				
			КонецЕсли;

		ИначеЕсли стрПрефикс="ДШК" Тогда //доп. реквизит шапки
			ЗначениеАналитики=МетаконфигураторСервер.ЗначениеРеквизита(Док, "Реквизиты."+стрАтрибут);
			
		ИначеЕсли стрПрефикс="ДТЧ" Тогда //доп. ревизит табличной части
			ЗначениеАналитики=МетаконфигураторСервер.ЗначениеРеквизита(Док, стрТабличнаяЧасть+"."+стрАтрибут, СтрокаТабличнойЧасти.ID);

		ИначеЕсли стрПрефикс="РНП" Или стрПрефикс="РНР" Или стрПрефикс="РНО" Тогда //ревизит регистра накопления приход/расход/оборот
			стрРегистр=стрАтрибут; стрАтрибут=СтрПолучитьСтроку(стрПуть, 3);
			тзДвижения=ПолучитьТаблицуДвиженийРегистра(Док, стрРегистр, стДвиженияРегистров);
			Если тзДвижения=Неопределено Тогда Продолжить; КонецЕсли;

			СтруктураОтбора=Новый Структура;
			Если Прав(стрПрефикс, 1)="П" Тогда
				СтруктураОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
			ИначеЕсли Прав(стрПрефикс, 1)="Р" Тогда
				СтруктураОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
			КонецЕсли;
			Если тзДвижения.Колонки.Найти("ВидТабличнойЧасти")<>Неопределено Тогда
				СтруктураОтбора.Вставить("ВидТабличнойЧасти", стрТабличнаяЧасть);
				Если НЕ тзДвижения.Колонки.Найти("НомерСтрокиТабличнойЧасти")=Неопределено Тогда
					СтруктураОтбора.Вставить("НомерСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.НомерСтроки);
				Иначе
					//СтруктураОтбора.Вставить("НомерСтроки", СтрокаТабличнойЧасти.НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		
			////Если стрТабличнаяЧасть="СоставНабора" И НЕ тзДвижения.Колонки.Найти("ВидТабличнойЧасти")=Неопределено Тогда
			////	//2016 СтруктураОтбора.Вставить("НомерКорСтроки", СтрокаТабличнойЧасти.НомерСтроки);
			////	Если СтруктураОтбора.Свойство("НомерСтрокиТабличнойЧасти") Тогда
			////		СтруктураОтбора.Удалить("НомерСтрокиТабличнойЧасти");
			////	КонецЕсли;
			////КонецЕсли; //3.08.2015

			Если СтруктураОтбора.Количество()=0 Тогда Продолжить; КонецЕсли;

			НайденныеСтроки=тзДвижения.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()=0 Тогда Продолжить; КонецЕсли;

			ЗначениеАналитики=НайденныеСтроки[0][стрАтрибут];

			//Переопределяем путь
			стрПуть=СтрПолучитьСтроку(Значение, НомерСтроки);
			стрПуть=стрЗаменить(стрПуть, стрРегистр+".", "");
			стрПуть=стрЗаменить(стрПуть, ".", Символы.ПС);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ЗначениеАналитики) Тогда Продолжить; КонецЕсли;

		ЧислоСтрок=СтрЧислоСтрок(стрПуть)-1;
		//Если ЧислоСтрок=1 Тогда
		//	Возврат ЗначениеАналитики;
		//ИначеЕсли ЧислоСтрок=2 Тогда
		//	Возврат ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)];
		//ИначеЕсли ЧислоСтрок=3 Тогда
		//	Возврат ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)][СтрПолучитьСтроку(стрПуть, 4)];
		//ИначеЕсли ЧислоСтрок=4 Тогда
		//	Возврат ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)][СтрПолучитьСтроку(стрПуть, 4)][СтрПолучитьСтроку(стрПуть, 5)];
		//ИначеЕсли ЧислоСтрок=5 Тогда
		//	Возврат ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)][СтрПолучитьСтроку(стрПуть, 4)][СтрПолучитьСтроку(стрПуть, 5)][СтрПолучитьСтроку(стрПуть, 6)];
		//КонецЕсли;

		Если ЧислоСтрок=1 Тогда Возврат ЗначениеАналитики; КонецЕсли;

		Если ЧислоСтрок=2 Тогда
			ЗначениеАналитики=ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)];
		ИначеЕсли ЧислоСтрок=3 Тогда
			ЗначениеАналитики=ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)][СтрПолучитьСтроку(стрПуть, 4)];
		ИначеЕсли ЧислоСтрок=4 Тогда
			ЗначениеАналитики=ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)][СтрПолучитьСтроку(стрПуть, 4)][СтрПолучитьСтроку(стрПуть, 5)];
		ИначеЕсли ЧислоСтрок=5 Тогда
			ЗначениеАналитики=ЗначениеАналитики[СтрПолучитьСтроку(стрПуть, 3)][СтрПолучитьСтроку(стрПуть, 4)][СтрПолучитьСтроку(стрПуть, 5)][СтрПолучитьСтроку(стрПуть, 6)];
		КонецЕсли;

		Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда Возврат ЗначениеАналитики; КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьТаблицуДвиженийРегистра(Док, стрРегистр, стДвиженияРегистров)
	тзДвижениеРегистра=Неопределено;
	стДвиженияРегистров.Свойство(стрРегистр, тзДвижениеРегистра);
	
	Если тзДвижениеРегистра<>Неопределено Тогда
		Возврат тзДвижениеРегистра;
	КонецЕсли;

	НаборДвижений=Док.Движения[стрРегистр];
	Если НаборДвижений.Количество()>0 Тогда
		тзДвижениеРегистра=Док.Движения[стрРегистр].Выгрузить();
		стДвиженияРегистров.Вставить(стрРегистр, тзДвижениеРегистра);
		Возврат тзДвижениеРегистра;
	КонецЕсли;

	НаборДвижений=РегистрыНакопления[стрРегистр].СоздатьНаборЗаписей();
	НаборДвижений.Отбор.Регистратор.Установить(Док.Ссылка);
	НаборДвижений.Прочитать();
	Если НаборДвижений.Количество()>0 Тогда
		тзДвижениеРегистра=НаборДвижений.Выгрузить();
		стДвиженияРегистров.Вставить(стрРегистр, тзДвижениеРегистра);
		Возврат тзДвижениеРегистра;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции 

Функция ПреобразоватьЗначение(ВыбЗначение)
	Если ВыбЗначение=0 Тогда Возврат 0; КонецЕсли; 
	Возврат стрЗаменить(Формат(ВыбЗначение, "ЧРГ='' ; ЧРД='.'  "), Символы.НПП, "");
КонецФункции 

Функция ПолучитьЗначениеРесурса(Док, СтрокаТОП, стрРесурс, стрИмяРегистра, тзАналитика, ИмяТабличнойЧасти=Неопределено, СтрокаТабличнойЧасти=Неопределено, тзОстаткиНаСчетах=Неопределено, стДвиженияРегистров, стКэшРесурсов=Неопределено, СтруктураПараметров) Экспорт
	Если Не ЗначениеЗаполнено(стрРесурс) Тогда Возврат 0; КонецЕсли; 
	
	Ресурс=СтрокаТОП[стрРесурс];
	Если Ресурс=Неопределено Тогда Возврат 0; КонецЕсли; 
	Если Не ЗначениеЗаполнено(Ресурс) Тогда Возврат 0; КонецЕсли; 

	Если НЕ стКэшРесурсов=Неопределено Тогда
		ЗначениеРесурса=стКэшРесурсов.Получить(Ресурс);
		Если НЕ ЗначениеРесурса=Неопределено Тогда
			Возврат ЗначениеРесурса;
		КонецЕсли;		
	КонецЕсли;

	стрВыражение="ЗначениеРесурса = "; ЗначениеРесурса=0; ИспользоватьТекстМодуля=Ложь;
    	
	Если ТипЗнч(Ресурс)=Тип("СправочникСсылка.НастройкаТОП") Тогда
		СтруктураВычисляемыхРесурсов=Новый Структура;
		ИспользоватьТекстМодуля=Ресурс.ИспользоватьТекстМодуля;
		Если ИспользоватьТекстМодуля Тогда
			стрВыражение=Ресурс.ТекстМодуля;
		КонецЕсли; 
		тзПараметрыНастройки=Ресурс.ПараметрыНастройки.Выгрузить();
		тзПараметрыНастройки.Колонки.Добавить("ЗначениеРесурса");
		тзПараметрыНастройки.Колонки.Добавить("Субконто1");
		тзПараметрыНастройки.Колонки.Добавить("Субконто2");
		тзПараметрыНастройки.Колонки.Добавить("Субконто3");
		тзПараметрыНастройки.Колонки.Добавить("ЗначениеРесурсаНовое");
		Если тзПараметрыНастройки.Количество()=0 Тогда
			НоваяСтрока=тзПараметрыНастройки.Добавить();
			НоваяСтрока.Ресурс=?(Ресурс.Предопределенный, Справочники.НастройкаТОП.ПолучитьИмяПредопределенного(Ресурс), Ресурс);
		КонецЕсли;
	Иначе
		тзПараметрыНастройки=Справочники.НастройкаТОП.СоздатьЭлемент().ПараметрыНастройки.Выгрузить();
		НоваяСтрока=тзПараметрыНастройки.Добавить();
		НоваяСтрока.Ресурс=Ресурс;
	КонецЕсли;

	Если тзПараметрыНастройки.Количество()=0 Тогда
		Если ИспользоватьТекстМодуля Тогда
			Попытка Выполнить(стрВыражение);
			Исключение ЗначениеРесурса=0; 
			КонецПопытки;
		КонецЕсли;
		Возврат ЗначениеРесурса;
	КонецЕсли;

	мдДокумент=Док.Метаданные();

	Если СтрокаТабличнойЧасти=Неопределено Тогда //ТОП в шапке
		Для Каждого СтрокаКоллекции Из тзПараметрыНастройки Цикл
			ИсточникДанных=СтрокаКоллекции.ВидРегистра;
			Если Не ЗначениеЗаполнено(ИсточникДанных) Тогда
				ИсточникДанных=Справочники.ИдентификаторыОбъектовМетаданных.Документы;
			КонецЕсли;
			стрАтрибут=СтрокаКоллекции.Ресурс; текЗначениеРесурса=0;
			Если ИсточникДанных=Справочники.ИдентификаторыОбъектовМетаданных.Документы Тогда
				стрПрефиксАтрибута=Лев(стрАтрибут, 3); стрАтрибут=Сред(стрАтрибут, 5);

				Если стрПрефиксАтрибута="РШК" Тогда
					текЗначениеРесурса=Док[стрАтрибут];

				ИначеЕсли стрПрефиксАтрибута="ДШК" Тогда
					текЗначениеРесурса=МетаконфигураторСервер.ЗначениеРеквизита(Док, "Реквизиты."+стрАтрибут);

				ИначеЕсли стрПрефиксАтрибута="РАТ" Тогда
					ВыбСчет=?(стрАтрибут="УчетнаяСтоимостьДебета", СтрокаТОП.СчетДебет, СтрокаТОП.СчетКредит);
					стрДК=?(стрАтрибут="УчетнаяСтоимостьДебета", "Д", "К");
					СтруктураОтбора=Новый Структура;
					СтруктураОтбора.Вставить("Счет", ВыбСчет);
					СтруктураОтбора.Вставить("Организация", СтруктураПараметров.Организация); //Док.Организация					
					Если ТипЗнч(Док)=Тип("ДокументОбъект.БухгалтерскаяСправка") Тогда
						Для каждого СтрокаКоллекции1 Из ВыбСчет.ВидыСубконто Цикл
							НомерСубконто=ВыбСчет.ВидыСубконто.Индекс(СтрокаКоллекции1)+1;
							ЗначениеСубконто=СтрокаТабличнойЧасти["Субконто"+стрДК+"т"+НомерСубконто];
							СтруктураОтбора.Вставить("Субконто"+НомерСубконто, ЗначениеСубконто);
						КонецЦикла;
					Иначе
						УстановитьСубконто(Док, ВыбСчет, СтруктураОтбора, тзАналитика, стрДК,,,стДвиженияРегистров);
					КонецЕсли; //Исключение из правил

					//*** тзРезультатЗапроса=РегистрыБухгалтерии[стрИмяРегистра].Остатки(Док.МоментВремени(),,СтруктураОтбора);
					тзРезультатЗапроса=РегистрыБухгалтерии_ПолучитьОстаток(СтруктураОтбора, стрИмяРегистра, Док.МоментВремени());
					Если тзРезультатЗапроса.Количество()>0 Тогда
						стрИмяРесурса=стрРесурс;
						стрИмяРесурса=стрЗаменить(стрИмяРесурса, "_Дт", "");
						стрИмяРесурса=стрЗаменить(стрИмяРесурса, "_Кт", "");

						СуммаОстаток=тзРезультатЗапроса.Итог(стрИмяРесурса+"Остаток");
						КолвоОстаток=тзРезультатЗапроса.Итог("КоличествоОстаток");

						текЗначениеРесурса=?(КолвоОстаток>0, СуммаОстаток/КолвоОстаток, СуммаОстаток);
						Если текЗначениеРесурса<0 Тогда текЗначениеРесурса=-текЗначениеРесурса; КонецЕсли;
						Если УправлениеМетаданными.ЕстьРеквизит("Количество", мдДокумент) Тогда
							текЗначениеРесурса=текЗначениеРесурса*Док.Количество;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли стрПрефиксАтрибута="РТЧ" Тогда //Реквизит табличной части 
					текЗначениеРесурса=Док[ИмяТабличнойЧасти].Итог(стрАтрибут);

				ИначеЕсли стрПрефиксАтрибута="ДТЧ" Тогда //Доп.реквизит табличной части (Товары.Сумма)
					ЗначениеАналитики=МетаконфигураторСервер.ЗначениеРеквизита(Док, ИмяТабличнойЧасти+"."+стрАтрибут);
					Если ТипЗнч(ЗначениеАналитики)=Тип("ТаблицаЗначений") Тогда
						ЗначениеАналитики=ЗначениеАналитики.Итог("Значение");
					КонецЕсли;
				КонецЕсли;

				Если ИспользоватьТекстМодуля Тогда
					СтрокаКоллекции.ЗначениеРесурса=текЗначениеРесурса;
				Иначе
					текЗначениеРесурса=ПреобразоватьЗначение(текЗначениеРесурса);
					стрВыражение=стрВыражение+" "+СокрЛП(СтрокаКоллекции.Префикс)+" "+текЗначениеРесурса+" "+СокрЛП(СтрокаКоллекции.Постфикс);
				КонецЕсли;
			Иначе //Данные из регистров
				стрТипВидРегистра=Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(ИсточникДанных);
				стрТипВидРегистра=стрЗаменить(стрТипВидРегистра, "_", Символы.ПС);
				
				стрТипРегистра=стрПолучитьСтроку(стрТипВидРегистра, 1);
				стрВидРегистра=стрПолучитьСтроку(стрТипВидРегистра, 2);
				
				Если стрТипРегистра="РегистрыБухгалтерии" Тогда
					ВыбСчет=СтрокаКоллекции.ВидДвижения;
					стрДК=?(Прав(СтрокаКоллекции.Ресурс, 2)="Дт", "Д", "К");
					СтруктураОтбора=Новый Структура;
					СтруктураОтбора.Вставить("Счет", ВыбСчет);
					СтруктураОтбора.Вставить("Организация", СтруктураПараметров.Организация); //Док.Организация 
					УстановитьСубконто(Док, ВыбСчет, СтруктураОтбора, тзАналитика, стрДК,,,стДвиженияРегистров);

					РесурсРассчитан=Ложь; стрКолонкаРасчет=стрЗаменить(стрАтрибут, "Остаток", "Расчет");

					МассивСтрок=тзОстаткиНаСчетах.НайтиСтроки(СтруктураОтбора);
					СтрокаТаблицыОстатковСчетов=?(МассивСтрок.Количество()=0, Неопределено, МассивСтрок[0]);

					Если НЕ СтрокаТаблицыОстатковСчетов=Неопределено Тогда
						РесурсРассчитан=СтрокаТаблицыОстатковСчетов[стрКолонкаРасчет];
					КонецЕсли; 
					Если РесурсРассчитан Тогда
						текЗначениеРесурса=СтрокаТаблицыОстатковСчетов[стрАтрибут];
					Иначе
						//*** тзРезультатЗапроса=РегистрыБухгалтерии[стрВидРегистра].Остатки(Док.МоментВремени(),,СтруктураОтбора);
						тзРезультатЗапроса=РегистрыБухгалтерии_ПолучитьОстаток(СтруктураОтбора, стрВидРегистра, Док.МоментВремени());
						Если тзРезультатЗапроса.Количество()>0 Тогда
							текЗначениеРесурса=тзРезультатЗапроса.Итог(стрАтрибут);
							//Заполним таблицу остатков счетов
							СтрокаТаблицыОстатковСчетов=тзОстаткиНаСчетах.Добавить();
							СтрокаТаблицыОстатковСчетов.Счет=ВыбСчет;
							СтрокаТаблицыОстатковСчетов[стрКолонкаРасчет]=Истина;
							СтрокаТаблицыОстатковСчетов[стрАтрибут]=текЗначениеРесурса;
							СтруктураОтбора.Свойство("Организация", СтрокаТаблицыОстатковСчетов.Организация);
							СтруктураОтбора.Свойство("Субконто1", СтрокаТаблицыОстатковСчетов.Субконто1);
							СтруктураОтбора.Свойство("Субконто2", СтрокаТаблицыОстатковСчетов.Субконто2);
							СтруктураОтбора.Свойство("Субконто3", СтрокаТаблицыОстатковСчетов.Субконто3);

							Если ИспользоватьТекстМодуля Тогда
								СтрокаКоллекции.Субконто1=СтрокаТаблицыОстатковСчетов.Субконто1;
								СтрокаКоллекции.Субконто2=СтрокаТаблицыОстатковСчетов.Субконто2;
								СтрокаКоллекции.Субконто3=СтрокаТаблицыОстатковСчетов.Субконто3;
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				Иначе
					тзДвижения=ПолучитьТаблицуДвиженийРегистра(Док, стрВидРегистра, стДвиженияРегистров);
					Если тзДвижения=Неопределено Тогда Продолжить; КонецЕсли; 

					ОбъектКолонки=тзДвижения.Колонки; текЗначениеРесурса=0;
					Если Не СтрокаКоллекции.ВидДвижения.Пустая() Тогда
						СтруктураОтбора=Новый Структура;
						СтруктураОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления[СокрЛП(СтрокаКоллекции.ВидДвижения)]);
						НайденныеСтроки=тзДвижения.НайтиСтроки(СтруктураОтбора);
					Иначе
						НайденныеСтроки=тзДвижения;
					КонецЕсли;
					Если НайденныеСтроки.Количество()=0 Тогда Продолжить; КонецЕсли;

					Для каждого СтрокаДвижения Из НайденныеСтроки Цикл
						текЗначениеРесурса=текЗначениеРесурса+СтрокаДвижения[стрАтрибут];
					КонецЦикла;
				КонецЕсли;
				Если ИспользоватьТекстМодуля Тогда
					СтрокаКоллекции.ЗначениеРесурса=текЗначениеРесурса;
				Иначе
					текЗначениеРесурса=ПреобразоватьЗначение(текЗначениеРесурса);
					стрВыражение=стрВыражение+" "+СокрЛП(СтрокаКоллекции.Префикс)+" "+текЗначениеРесурса+" "+СокрЛП(СтрокаКоллекции.Постфикс);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ИспользоватьТекстМодуля Тогда
				Если стрРесурс="Сумма" И СтрокаТОП.КоэфСуммы>0 Тогда
					стрВыражение=стрВыражение+("*"+ПреобразоватьЗначение(СтрокаТОП.КоэфСуммы));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе //ТОП в табличной части
		номСтроки=СтрокаТабличнойЧасти.НомерСтроки;
		
		Для Каждого СтрокаКоллекции Из тзПараметрыНастройки Цикл
			ИсточникДанных=СтрокаКоллекции.ВидРегистра;
			Если Не ЗначениеЗаполнено(ИсточникДанных) Тогда
				ИсточникДанных=Справочники.ИдентификаторыОбъектовМетаданных.Документы;
			КонецЕсли;

			стрАтрибут=СтрокаКоллекции.Ресурс; текЗначениеРесурса=0;
			Если ИсточникДанных=Справочники.ИдентификаторыОбъектовМетаданных.Документы Тогда
				стрПрефиксАтрибута=Лев(стрАтрибут, 3); стрАтрибут=Сред(стрАтрибут, 5);
				
				Если стрПрефиксАтрибута="РШК" Тогда //Атрибут шапки
					Если стрАтрибут="СуммаБезНДС" Тогда
						текЗначениеРесурса=Док.Сумма;
						Если УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", мдДокумент) Тогда
							Если Док.СуммаВключаетНДС Тогда
								текЗначениеРесурса=текЗначениеРесурса-Док.СуммаНДС;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли стрАтрибут="СуммаСНДС" Тогда
						текЗначениеРесурса=Док.Сумма;
						Если УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", мдДокумент) Тогда
							Если НЕ Док.СуммаВключаетНДС Тогда
								текЗначениеРесурса=текЗначениеРесурса+Док.СуммаНДС;
							КонецЕсли;
						КонецЕсли;						
					Иначе
						текЗначениеРесурса=Док[стрАтрибут];
					КонецЕсли;

				ИначеЕсли стрПрефиксАтрибута="ДШК" Тогда //Доп.атрибут шапки  (ДРШ)
					текЗначениеРесурса=МетаконфигураторСервер.ЗначениеРеквизита(Док, "Реквизиты."+стрАтрибут);

				ИначеЕсли стрПрефиксАтрибута="РТЧ" Тогда //Атрибут табличной части
					Если стрАтрибут="Количество" Тогда
						текЗначениеРесурса=СтрокаТабличнойЧасти.Количество;
						Если УправлениеМетаданными.ЕстьРеквизит("Коэффициент", мдДокумент, ИмяТабличнойЧасти) Тогда
							текЗначениеРесурса=текЗначениеРесурса*СтрокаТабличнойЧасти.Коэффициент;
							Если УправлениеМетаданными.ЕстьРеквизит("Номенклатура", мдДокумент, ИмяТабличнойЧасти) Тогда
								текЗначениеРесурса=текЗначениеРесурса/СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли стрАтрибут="СуммаСНДС" Тогда
						текЗначениеРесурса=СтрокаТабличнойЧасти.Сумма;
						Если УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", мдДокумент) Тогда
							Если НЕ Док.СуммаВключаетНДС Тогда
								текЗначениеРесурса=текЗначениеРесурса+СтрокаТабличнойЧасти.СуммаНДС;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли стрАтрибут="СуммаБезНДС" Тогда
						текЗначениеРесурса=СтрокаТабличнойЧасти.Сумма;
						Если УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", мдДокумент) Тогда
							Если Док.СуммаВключаетНДС Тогда
								текЗначениеРесурса=текЗначениеРесурса-СтрокаТабличнойЧасти.СуммаНДС;
							КонецЕсли;
						КонецЕсли;
					Иначе
						текЗначениеРесурса=СтрокаТабличнойЧасти[стрАтрибут];
					КонецЕсли;

				ИначеЕсли стрПрефиксАтрибута="ДТЧ" Тогда //Атрибут доп.табличной части (Товары.Сумма)					
					текЗначениеРесурса=МетаконфигураторСервер.ЗначениеРеквизита(Док, ИмяТабличнойЧасти+"."+стрАтрибут, СтрокаТабличнойЧасти.ID);

				ИначеЕсли стрПрефиксАтрибута="РАТ" Тогда //Регламентные атрибуты
					ВыбСчет=?(стрАтрибут="УчетнаяСтоимостьДебета", СтрокаТОП.СчетДебет, СтрокаТОП.СчетКредит);
					стрДК=?(стрАтрибут="УчетнаяСтоимостьДебета", "Д", "К");
					СтруктураОтбора=Новый Структура;
					СтруктураОтбора.Вставить("Счет", ВыбСчет);
					СтруктураОтбора.Вставить("Организация", СтруктураПараметров.Организация);
					Если ТипЗнч(Док)=Тип("ДокументОбъект.БухгалтерскаяСправка") Тогда
						Для каждого СтрокаКоллекции1 Из ВыбСчет.ВидыСубконто Цикл
							НомерСубконто=ВыбСчет.ВидыСубконто.Индекс(СтрокаКоллекции1)+1;
							ЗначениеСубконто=СтрокаТабличнойЧасти["Субконто"+стрДК+"т"+НомерСубконто];
							СтруктураОтбора.Вставить("Субконто"+НомерСубконто, ЗначениеСубконто);
						КонецЦикла;
					Иначе
						УстановитьСубконто(Док, ВыбСчет, СтруктураОтбора, тзАналитика, стрДК, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, стДвиженияРегистров);
					КонецЕсли;
					//*** тзРезультатЗапроса=РегистрыБухгалтерии[стрИмяРегистра].Остатки(Док.МоментВремени(),,СтруктураОтбора);
					тзРезультатЗапроса=РегистрыБухгалтерии_ПолучитьОстаток(СтруктураОтбора, стрИмяРегистра, Док.МоментВремени());
					Если тзРезультатЗапроса.Количество()>0 Тогда
						стрИмяРесурса=стрРесурс;
						стрИмяРесурса=стрЗаменить(стрИмяРесурса, "_Дт", "");
						стрИмяРесурса=стрЗаменить(стрИмяРесурса, "_Кт", "");
						СуммаОстаток=тзРезультатЗапроса.Итог(стрИмяРесурса+"Остаток");
						КолвоОстаток=тзРезультатЗапроса.Итог("КоличествоОстаток");
						текЗначениеРесурса=?(КолвоОстаток>0, СуммаОстаток/КолвоОстаток, СуммаОстаток);
						
						Если НЕ стрИмяРесурса="СуммаПР" И НЕ стрИмяРесурса="СуммаВР" Тогда
							Если текЗначениеРесурса < 0 Тогда текЗначениеРесурса=-текЗначениеРесурса; КонецЕсли;	
						КонецЕсли; //Исключение (суммы ПР и ВР их не надо брать по модулю) 18.10.2019

						Если УправлениеМетаданными.ЕстьРеквизит("Количество", мдДокумент, ИмяТабличнойЧасти) Тогда
							текЗначениеРесурса=текЗначениеРесурса*СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если ИспользоватьТекстМодуля Тогда
					СтрокаКоллекции.ЗначениеРесурса=текЗначениеРесурса; //***
				Иначе
					текЗначениеРесурса=ПреобразоватьЗначение(текЗначениеРесурса);
					стрВыражение=стрВыражение+" "+СокрЛП(СтрокаКоллекции.Префикс)+" "+текЗначениеРесурса+" "+СокрЛП(СтрокаКоллекции.Постфикс);
				КонецЕсли;
			Иначе 				
				//Данные из регистров (накопления,бухгалтерии)
				стрТипВидРегистра=Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(ИсточникДанных);
				стрТипВидРегистра=стрЗаменить(стрТипВидРегистра, "_", Символы.ПС);
				
				стрТипРегистра=стрПолучитьСтроку(стрТипВидРегистра, 1);
				стрВидРегистра=стрПолучитьСтроку(стрТипВидРегистра, 2);

				Если стрТипРегистра="РегистрыБухгалтерии" Тогда
					ВыбСчет=СтрокаКоллекции.ВидДвижения;
					стрДК=?(Прав(СтрокаКоллекции.Ресурс, 2)="Дт", "Д", "К");
					Если ТипЗнч(Док)=Тип("ДокументОбъект.КорректировкаДолга") Тогда стрДК="К"; КонецЕсли; //Временная заглушка
					СтруктураОтбора=Новый Структура;
					СтруктураОтбора.Вставить("Счет", ВыбСчет);
					СтруктураОтбора.Вставить("Организация", СтруктураПараметров.Организация);
					УстановитьСубконто(Док, ВыбСчет, СтруктураОтбора, тзАналитика, стрДК, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, стДвиженияРегистров);

					РесурсРассчитан=Ложь; стрКолонкаРасчет=стрЗаменить(стрАтрибут, "Остаток", "Расчет");

					МассивСтрок=тзОстаткиНаСчетах.НайтиСтроки(СтруктураОтбора);
					СтрокаТаблицыОстатковСчетов=?(МассивСтрок.Количество()=0, Неопределено, МассивСтрок[0]);

					Если СтрокаТаблицыОстатковСчетов<>Неопределено Тогда
						РесурсРассчитан=СтрокаТаблицыОстатковСчетов[стрКолонкаРасчет];
					КонецЕсли; 
					Если РесурсРассчитан Тогда
						текЗначениеРесурса=СтрокаТаблицыОстатковСчетов[стрАтрибут];
					Иначе
						тзРезультатЗапроса=РегистрыБухгалтерии_ПолучитьОстаток(СтруктураОтбора, стрВидРегистра, Док.МоментВремени());
						Если тзРезультатЗапроса.Количество()>0 Тогда
							текЗначениеРесурса=тзРезультатЗапроса.Итог(стрАтрибут);
							//Заполним таблицу остатков счетов
							СтрокаТаблицыОстатковСчетов=тзОстаткиНаСчетах.Добавить();
							СтрокаТаблицыОстатковСчетов.Счет=ВыбСчет;
							СтрокаТаблицыОстатковСчетов[стрКолонкаРасчет]=Истина;
							СтрокаТаблицыОстатковСчетов[стрАтрибут]=текЗначениеРесурса;
							СтруктураОтбора.Свойство("Организация", СтрокаТаблицыОстатковСчетов.Организация);
							СтруктураОтбора.Свойство("Субконто1", СтрокаТаблицыОстатковСчетов.Субконто1);
							СтруктураОтбора.Свойство("Субконто2", СтрокаТаблицыОстатковСчетов.Субконто2);
							СтруктураОтбора.Свойство("Субконто3", СтрокаТаблицыОстатковСчетов.Субконто3);
							Если ИспользоватьТекстМодуля Тогда
								СтрокаКоллекции.Субконто1=СтрокаТаблицыОстатковСчетов.Субконто1;
								СтрокаКоллекции.Субконто2=СтрокаТаблицыОстатковСчетов.Субконто2;
								СтрокаКоллекции.Субконто3=СтрокаТаблицыОстатковСчетов.Субконто3;
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				Иначе
					тзДвижения=ПолучитьТаблицуДвиженийРегистра(Док, стрВидРегистра, стДвиженияРегистров);
					Если тзДвижения=Неопределено Тогда Продолжить; КонецЕсли; 

					ОбъектКолонки=тзДвижения.Колонки; текЗначениеРесурса=0;

					СтруктураОтбора=Новый Структура;
					Если Не СтрокаКоллекции.ВидДвижения.Пустая() И НЕ тзДвижения.Колонки.Найти("ВидДвижения")=Неопределено Тогда
						СтруктураОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления[СокрЛП(СтрокаКоллекции.ВидДвижения)]);
					КонецЕсли;
					
					Если НЕ ОбъектКолонки.Найти("ВидТабличнойЧасти")=Неопределено Тогда
						СтруктураОтбора.Вставить("ВидТабличнойЧасти", ИмяТабличнойЧасти);
						Если НЕ ОбъектКолонки.Найти("НомерСтрокиТабличнойЧасти")=Неопределено Тогда
							СтруктураОтбора.Вставить("НомерСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.НомерСтроки);
						Иначе
							//СтруктураОтбора.Вставить("НомерСтроки", СтрокаТабличнойЧасти.НомерСтроки);
						КонецЕсли;
					КонецЕсли;

					//////Если ИмяТабличнойЧасти="СоставНабора" И НЕ ОбъектКолонки.Найти("ВидТабличнойЧасти")=Неопределено Тогда
					//////	//2016 СтруктураОтбора.Вставить("НомерКорСтроки", СтрокаТабличнойЧасти.НомерСтроки);
					//////	Если СтруктураОтбора.Свойство("НомерСтрокиТабличнойЧасти") Тогда
					//////		СтруктураОтбора.Удалить("НомерСтрокиТабличнойЧасти");
					//////	КонецЕсли;
					//////КонецЕсли; //3.08.2015

					НайденныеСтроки=тзДвижения.НайтиСтроки(СтруктураОтбора);
					Если НайденныеСтроки.Количество()=0 Тогда Продолжить; КонецЕсли;
					
					Для каждого СтрокаДвижения Из НайденныеСтроки Цикл
						текЗначениеРесурса=текЗначениеРесурса+СтрокаДвижения[стрАтрибут];
					КонецЦикла;
				КонецЕсли;

				Если ИспользоватьТекстМодуля Тогда
					СтрокаКоллекции.ЗначениеРесурса=текЗначениеРесурса;
				Иначе
					текЗначениеРесурса=ПреобразоватьЗначение(текЗначениеРесурса);
					стрВыражение=стрВыражение+" "+СокрЛП(СтрокаКоллекции.Префикс)+" "+текЗначениеРесурса+" "+СокрЛП(СтрокаКоллекции.Постфикс);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ИспользоватьТекстМодуля Тогда
				Если стрРесурс="Сумма" И СтрокаТОП.КоэфСуммы<>0 Тогда
					стрВыражение=стрВыражение+("*"+ПреобразоватьЗначение(СтрокаТОП.КоэфСуммы));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Попытка Выполнить(стрВыражение);
	Исключение ЗначениеРесурса=0; 
	КонецПопытки;

	Если СтрокаТОП.ИнвертироватьЗначениеРесурсов Тогда
		ЗначениеРесурса=-ЗначениеРесурса;
	КонецЕсли;

	Если СтрокаТОП.ЗначениеРесурсаПоМодулю Тогда
		ЗначениеРесурса=ОбщегоНазначения.МодульЧисла(ЗначениеРесурса);
	КонецЕсли;

	Если ИспользоватьТекстМодуля Тогда
		Для Каждого СтрокаКоллекции Из тзПараметрыНастройки Цикл
			Если СтрокаКоллекции.ВидРегистра.Родитель=Справочники.ИдентификаторыОбъектовМетаданных.РегистрыБухгалтерии Тогда
				ВыбСчет=СтрокаКоллекции.ВидДвижения;
				стрДК=?(Прав(СтрокаКоллекции.Ресурс, 2)="Дт", "Д", "К");
				Если ТипЗнч(Док)=Тип("ДокументОбъект.КорректировкаДолга") Тогда стрДК="К"; КонецЕсли; //Временная заглушка
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("Счет", ВыбСчет);
				СтруктураОтбора.Вставить("Организация", СтруктураПараметров.Организация);
				УстановитьСубконто(Док, ВыбСчет, СтруктураОтбора, тзАналитика, стрДК, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, стДвиженияРегистров);
				
				МассивСтрок=тзОстаткиНаСчетах.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество()=0 Тогда Продолжить; КонецЕсли; 
				Если СтрокаКоллекции.ЗначениеРесурсаНовое=Неопределено Тогда Продолжить; КонецЕсли; 
				МассивСтрок[0][СтрокаКоллекции.Ресурс]=СтрокаКоллекции.ЗначениеРесурсаНовое;
            КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;

	Если НЕ стКэшРесурсов=Неопределено И НЕ Лев(СокрЛП(Ресурс), 4)="РАТ." Тогда
		стКэшРесурсов.Вставить(Ресурс, ЗначениеРесурса);
	КонецЕсли;

	Возврат ЗначениеРесурса;
КонецФункции

////////////////////// Движения по регистрам накопления /////////////////////

Функция РегистрыНакопления_ВыполнитьТОП(Док, СтруктураНаборовДвижений, ИмяТабличнойЧасти=Неопределено, стрИмяАтрибута="ТОП") Экспорт
	мдДокумент=Док.Метаданные(); ДатаДок=Док.Дата;
	Если УправлениеМетаданными.ЕстьРеквизит("Оплачено", мдДокумент) Тогда
		Если Не Док.Оплачено Тогда Возврат Истина; КонецЕсли;
		Если УправлениеМетаданными.ЕстьРеквизит("ДатаОплаты", мдДокумент) Тогда
			ДатаДок=Дата(Формат(Док.ДатаОплаты, "ДФ=dd.MM.yyyy")+" "+Формат(Док.Дата, "ДЛФ=T"));
		КонецЕсли;
	КонецЕсли;
    стДвиженияРегистров=Новый Структура;
	Если Док.ДополнительныеСвойства.Свойство("ПроверкаЗаполненияТиповыхОпераций") Тогда
		ПроверкаЗаполненияТиповыхОпераций=Док.ДополнительныеСвойства.ПроверкаЗаполненияТиповыхОпераций;
	Иначе
		ПроверкаЗаполненияТиповыхОпераций=Константы.ПроверкаЗаполненияТиповыхОпераций.Получить();
	КонецЕсли;

	Результат=Истина;
	Если ИмяТабличнойЧасти=Неопределено Тогда //ТОП в шапке

	Иначе //ТОП в табличной части		
		ТабличнаяЧасть=Док[ИмяТабличнойЧасти]; //.Выгрузить();
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			///ТиповаяОперация=СтрокаТабличнойЧасти.ТОП;
			ТиповаяОперация=СтрокаТабличнойЧасти[стрИмяАтрибута];
			Если ПроверкаЗаполненияТиповыхОпераций Тогда
				Если ТиповаяОперация.Пустая() Тогда
					Сообщить("Документ {"+СокрЛП(Док)+"}, отсутствует типовая операция в табличной части {"+ИмяТабличнойЧасти+"}");
					Результат=Ложь; Возврат Ложь;
				КонецЕсли; 
			Иначе
				Если ТиповаяОперация.Пустая() Тогда Продолжить; КонецЕсли;
			КонецЕсли;

			ТиповаяОперацияОбщая=Справочники.ТиповыеОперации.НайтиПоРеквизиту("ОсновнаяНастройка", Истина,,ТиповаяОперация.Владелец);
			Если НЕ ТиповаяОперацияОбщая.Пустая() Тогда
				МассивРегистровИсключений=ТиповаяОперация["ПроводкиУУ"].ВыгрузитьКолонку("Регистр");
				РегистрыНакопления_ВыполнитьСтрокуТОП(Док, ДатаДок, ТиповаяОперацияОбщая, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураНаборовДвижений, стДвиженияРегистров, МассивРегистровИсключений);
			КонецЕсли;

			РегистрыНакопления_ВыполнитьСтрокуТОП(Док, ДатаДок, ТиповаяОперация, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураНаборовДвижений, стДвиженияРегистров);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура РегистрыНакопления_ВыполнитьСтрокуТОП(Док, ДатаДок, ТиповаяОперация, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, СтруктураНаборовДвижений, стДвиженияРегистров, МассивРегистровИсключений=Неопределено) Экспорт
	тзПроводки=ТиповаяОперация["ПроводкиУУ"].Выгрузить(); НаборДвижений=Неопределено;
	тзПроводки.Колонки.Добавить("ИнвертироватьЗначениеРесурсов"); //для совместимости с регистрами бухгалтерии
	тзПроводки.Колонки.Добавить("ЗначениеРесурсаПоМодулю");
	тзПроводки.Колонки.Добавить("КоэфСуммы", Новый ОписаниеТипов("Число"));
	
	Если НЕ МассивРегистровИсключений=Неопределено Тогда
		Для каждого СтрокаМассива Из МассивРегистровИсключений Цикл
			РезультатПоиска=тзПроводки.Найти(СтрокаМассива, "Регистр");
			Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
			тзПроводки.Удалить(РезультатПоиска);
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаТОП Из тзПроводки Цикл
		Если Не СтрокаТОП.Использование Тогда Продолжить; КонецЕсли;
		стрТипВидРегистра=Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(СтрокаТОП.Регистр);

		стрТипВид=стрЗаменить(стрТипВидРегистра, "_", Символы.ПС);
		стрТипРегистра=СтрПолучитьСтроку(стрТипВид, 1);
		стрВидРегистра=СтрПолучитьСтроку(стрТипВид, 2);
		
		СтруктураНаборовДвижений.Свойство(стрТипВидРегистра, НаборДвижений);
		Если НаборДвижений=Неопределено Тогда
			НаборДвижений=Док.Движения[стрВидРегистра];
			Если НаборДвижений.Количество()=0 Тогда
				НаборДвижений.Прочитать();
			КонецЕсли;
			СтруктураНаборовДвижений.Вставить(стрТипВидРегистра, НаборДвижений);
		КонецЕсли;

		Если СтрокаТОП.Заменять И НаборДвижений.Количество()>0 Тогда
			Если Метаданные.РегистрыНакопления[стрВидРегистра].Реквизиты.Найти("НомерСтрокиТабличнойЧасти")=Неопределено Тогда
				НаборДвижений.Очистить();
			Иначе
				МассивСтрок=Новый Массив; стрТЧ=?(ИмяТабличнойЧасти="ВозвратнаяТара", "Тара", ИмяТабличнойЧасти);
				Для каждого СтрокаКоллекции Из НаборДвижений Цикл
					Если СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаТабличнойЧасти.НомерСтроки Тогда
						Если стрТЧ=СокрЛП(СтрокаКоллекции.ВидТабличнойЧасти) Тогда
							МассивСтрок.Добавить(СтрокаКоллекции);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Для каждого СтрокаКоллекции Из МассивСтрок Цикл
					НаборДвижений.Удалить(СтрокаКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; //***

		ОтборПоID=Новый Структура("ID", СтрокаТОП.ID);
		
		//Добавляем новую строку в набор движений
		Проводка=НаборДвижений.Добавить();
		//*** Проводка.Регистратор = Док.Ссылка;
		Проводка.Активность	 = Истина;
		Проводка.Период      = ДатаДок;
		Если СокрЛП(Метаданные.РегистрыНакопления[стрВидРегистра].ВидРегистра)="Остатки" Тогда
			Проводка.ВидДвижения=ВидДвиженияНакопления[СокрЛП(СтрокаТОП.Направление)];
		КонецЕсли; 
		
		//Заполняем аналитику регистра
		тзАналитика=ТиповаяОперация.НастройкаАналитики.Выгрузить(ОтборПоID);
		Результат=УстановитьАналитику(Док, Проводка, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти);
		
		//Заполняем ресурсы регистра
		РесурсыЗаполнены=Ложь;
		тзРесурсы=ТиповаяОперация.РесурсыПроводкиУУ.Выгрузить(ОтборПоID);
		Для каждого СтрокаРесурса Из тзРесурсы Цикл
			Если Не СтрокаРесурса.Использование Тогда Продолжить; КонецЕсли; 
			стрРесурс=Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(СтрокаРесурса.Имя);
			стрРесурс=стрЗаменить(стрРесурс, стрТипВидРегистра+"_Ресурсы_", "");
			//{для совместимости с регистрами бухгалтерии
			Если тзПроводки.Колонки.Найти(стрРесурс)=Неопределено Тогда
				тзПроводки.Колонки.Добавить(стрРесурс); 
			КонецЕсли;
			СтрокаТОП[стрРесурс]=СтрокаРесурса.Значение;
			СтрокаТОП.ИнвертироватьЗначениеРесурсов=СтрокаРесурса.ИнвертироватьЗначениеРесурсов;
			СтрокаТОП.ЗначениеРесурсаПоМодулю=СтрокаРесурса.ЗначениеРесурсаПоМодулю;
			//}для совместимости с регистрами бухгалтерии
			ЗначениеРесурса=ПолучитьЗначениеРесурса(Док, СтрокаТОП, стрРесурс, стрВидРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ,стДвиженияРегистров,,Неопределено);
			Проводка[стрРесурс]=ЗначениеРесурса;
			Если ЗначениеРесурса<>0 Тогда РесурсыЗаполнены=Истина; КонецЕсли;
		КонецЦикла;
		
		Если Не РесурсыЗаполнены Тогда
			НаборДвижений.Удалить(Проводка);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
 
Функция РегистрыНакопления_ВыполнитьДвижения(Док, Отказ, РежимПроведения) Экспорт
	ДополнительныеСвойства=Док.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Если ДополнительныеСвойства.РегистрыДляПроведения.Количество()>0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; //Выборочное проведение по регистрам

	мдДокумент=Док.Метаданные(); СтруктураНаборовДвижений=Новый Структура;
	Для Каждого мдТабличнаяЧасть Из мдДокумент.ТабличныеЧасти Цикл
		Если НЕ мдТабличнаяЧасть.Реквизиты.Найти("ТОП")=Неопределено Тогда
			Результат=РегистрыНакопления_ВыполнитьТОП(Док, СтруктураНаборовДвижений, мдТабличнаяЧасть.Имя);
			Если Результат=Ложь Тогда Отказ=Истина; Возврат Ложь; КонецЕсли;
		КонецЕсли;

		Если НЕ мдТабличнаяЧасть.Реквизиты.Найти("ТОП2")=Неопределено Тогда
			Результат=РегистрыНакопления_ВыполнитьТОП(Док, СтруктураНаборовДвижений, мдТабличнаяЧасть.Имя, "ТОП2");
			Если Не Результат Тогда Отказ=Истина; Возврат Ложь; КонецЕсли;
		КонецЕсли; //Доп.типовая операция		
	КонецЦикла;
	
	Результат=РегистрыНакопления_ВыполнитьТОП(Док, СтруктураНаборовДвижений, Неопределено);
	Если Результат=Ложь Тогда Отказ=Истина; Возврат Ложь; КонецЕсли;

	КонтрольОстатковРегистровНакопления(Док, Отказ, РежимПроведения);
КонецФункции

Функция УстановитьАналитику(Док, Регистр, тзАналитика, ИмяТабличнойЧасти=Неопределено, СтрокаТабличнойЧасти=Неопределено, стДвиженияРегистров=Неопределено)
	Если тзАналитика.Количество()=0 Тогда Возврат Истина; КонецЕсли; 

	Результат=Истина; ЗначениеАналитики=Неопределено; ЭтотОбъект=Док; //Для совместимости
	Для Каждого СтрокаКоллекции Из тзАналитика Цикл
		ЗначениеАналитики=ПолучитьЗначениеАналитики(Док, СтрокаКоллекции.Значение, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, стДвиженияРегистров);
		
		//////Если ТипЗнч(ЗначениеАналитики)=Тип("СправочникСсылка.рпХранилищеПравил") Тогда
		//////	СтруктураПараметров=Новый Структура;
		//////	СтруктураПараметров.Вставить("ЭтотОбъект", Док);
		//////	СтруктураПараметров.Вставить("ДокументОбъект", Док);
		//////	СтруктураПараметров.Вставить("Регистр", Регистр);
		//////	СтруктураПараметров.Вставить("тзАналитика", тзАналитика);
		//////	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		//////	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
		//////	СтруктураПараметров.Вставить("стДвиженияРегистров", стДвиженияРегистров);				
		//////	Справочники.рпХранилищеПравил.ВыполнитьПравило(ЗначениеАналитики, СтруктураПараметров);	
		//////	СтруктураПараметров.Свойство("ЗначениеАналитики", ЗначениеАналитики);
		//////КонецЕсли;

		//Модуль
		Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда
			стрМодуль=СтрокаКоллекции.ТекстМодуля;
			Если Не ПустаяСтрока(стрМодуль) Тогда Выполнить(стрМодуль);	КонецЕсли;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда Продолжить; КонецЕсли;

		стрАналитика=Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(СтрокаКоллекции.ВидАналитики);
		стрАналитика=стрЗаменить(стрАналитика, "_", Символы.ПС);
		стрАналитика=СтрПолучитьСтроку(стрАналитика, СтрЧислоСтрок(стрАналитика));

		Регистр[стрАналитика]=ЗначениеАналитики;

		ЗначениеАналитики=Неопределено;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

////////////////////// Движения по регистрам бухгалтерии /////////////////////

Функция ОсновнаяНастройкаАналитики(ВладелецНастройки) Экспорт
	Если ТипЗнч(ВладелецНастройки)=Тип("Строка") Тогда
		Владелец=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(ВладелецНастройки);
		Возврат Справочники.ТиповыеОперации.НайтиПоРеквизиту("ОсновнаяНастройка", Истина,,Владелец);
	КонецЕсли;
	Возврат Справочники.ТиповыеОперации.НайтиПоРеквизиту("ОсновнаяНастройка", Истина,,ВладелецНастройки);	
КонецФункции //2020

Процедура ПровестиПоРегиструБухгалтерии(ДокументОбъект, МассивВидовРегистров, Отказ=Ложь) Экспорт
	РегистрыБухгалтерии_ВыполнитьДвижения(ДокументОбъект, Отказ, МассивВидовРегистров);
КонецПроцедуры

Функция РегистрыБухгалтерии_ВыполнитьДвижения(Док,  Отказ, МассивРегистров=Неопределено) Экспорт
	мдДокумент=Док.Метаданные();

	ОчищатьДвижения_Хозрасчетный=?(Док.ДополнительныеСвойства.Свойство("ОчищатьДвижения_Хозрасчетный"), Док.ДополнительныеСвойства.ОчищатьДвижения_Финансовый, Истина);
	ОчищатьДвижения_Финансовый=?(Док.ДополнительныеСвойства.Свойство("ОчищатьДвижения_Финансовый"), Док.ДополнительныеСвойства.ОчищатьДвижения_Финансовый, Истина);

	ЗаписыватьВыбранные=СокрЛП(мдДокумент.ЗаписьДвиженийПриПроведении)="ЗаписыватьВыбранные";

	//Сформируем массив регистров по которым необходимо сделать движения
	Если МассивРегистров=Неопределено Тогда
		МассивРегистров=Новый Массив;
		Если мдДокумент.Движения.Содержит(Метаданные.РегистрыБухгалтерии["Хозрасчетный"]) Тогда
			МассивРегистров.Добавить("Хозрасчетный");
			//Если ЗаписыватьВыбранные Тогда
			//	Док.Движения["Хозрасчетный"].Записывать=Истина;
			//КонецЕсли;
		КонецЕсли; 
		Если мдДокумент.Движения.Содержит(Метаданные.РегистрыБухгалтерии["Финансовый"]) Тогда
			МассивРегистров.Добавить("Финансовый");			
			//Если ЗаписыватьВыбранные Тогда
			//	Док.Движения["Финансовый"].Записывать=Истина;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если МассивРегистров.Количество()=0 Тогда Возврат Истина; КонецЕсли;

	//Очистим движения регистров
	Для каждого ИмяРегистра Из МассивРегистров Цикл
		ОбъектРегистр=Док.Движения[ИмяРегистра];			
		Если ОбъектРегистр.Количество()>0 Тогда
			Если Док.ДополнительныеСвойства.Свойство("ОчищатьДвижения_"+ИмяРегистра) И Док.ДополнительныеСвойства["ОчищатьДвижения_"+ИмяРегистра]=Ложь Тогда
				Продолжить;
			КонецЕсли;
			ОбъектРегистр.Очистить();
		КонецЕсли;
	КонецЦикла;

	//*******************************************
	//Если УправлениеМетаданными.ЕстьРеквизит("Организация", мдДокумент) Тогда
	//	Блокировка=Новый БлокировкаДанных;
	//	Для каждого СтрокаКоллекции Из МассивРегистров Цикл			
	//		ЭлементБлокировки=Блокировка.Добавить();
	//		ЭлементБлокировки.Область="РегистрБухгалтерии."+СтрокаКоллекции;
	//		//ЭлементБлокировки=Блокировка.Добавить("РегистрБухгалтерии."+СтрокаКоллекции);
	//		ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("Организация", Док.Организация);
	//	КонецЦикла;
	//	Блокировка.Заблокировать();
	//КонецЕсли;	
	//*******************************************
	//**** ОбъектРегистр.БлокироватьДляИзменения=Истина;
	//*******************************************
	
	//Определям дату документа
	ДатаДок=Док.Дата;
	Если УправлениеМетаданными.ЕстьРеквизит("Оплачено", мдДокумент) Тогда
		Если Не Док.Оплачено Тогда Возврат Истина; КонецЕсли;
		Если УправлениеМетаданными.ЕстьРеквизит("ДатаОплаты", мдДокумент) Тогда
			ДатаДок=Дата(Формат(Док.ДатаОплаты, "ДФ=dd.MM.yyyy")+" "+Формат(Док.Дата, "ДЛФ=T"));
		КонецЕсли;
	КонецЕсли;
	
	//Определям валюту документа
	//ВалютаШД=Док.ДополнительныеСвойства.ВалютаБухУчета;
	//Если УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", мдДокумент) Тогда
	//	ВалютаДК=Док.ДоговорКонтрагента.ВалютаВзаиморасчетов; //Валюта ДоговораКонтрагента
	//КонецЕсли;	
	//Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", мдДокумент) Тогда
	//	ВалютаШД=Док.ВалютаДокумента; //Валюта ШапкиДокумента
	//КонецЕсли;
	//*** Док.ДополнительныеСвойства.СтруктураШД
	
	//////////////////////////////ВалютаДок=Док.ДополнительныеСвойства.ВалютаБухУчета;
	//////////////////////////////Если УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", мдДокумент) Тогда
	//////////////////////////////	ВалютаДок=Док.ДоговорКонтрагента.ВалютаВзаиморасчетов; //Валюта ДоговораКонтрагента
	//////////////////////////////КонецЕсли;	
	//////////////////////////////Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", мдДокумент) Тогда
	//////////////////////////////	ВалютаДок=Док.ВалютаДокумента; //Валюта ШапкиДокумента
	//////////////////////////////КонецЕсли;

	////////////////КоэффициентПересчета=1;
	////////////////Если УправлениеМетаданными.ЕстьРеквизит("КурсВзаиморасчетов", мдДокумент) Тогда
	////////////////	Если Число(Док.КурсВзаиморасчетов)=0 Или Число(Док.КратностьВзаиморасчетов)=0 Тогда
	////////////////		КоэффициентПересчета=1;
	////////////////	Иначе
	////////////////		КоэффициентПересчета=Док.КурсВзаиморасчетов/Док.КратностьВзаиморасчетов;		
	////////////////	КонецЕсли;
	////////////////КонецЕсли;

	РазрешитьДвиженияНУ=Истина;
	Если Док.ДополнительныеСвойства.Свойство("УчетнаяПолитика") Тогда
		Если НЕ ТипЗнч(Док.ДополнительныеСвойства.УчетнаяПолитика)=Тип("Структура") Тогда
			текОрганизация=?(УправлениеМетаданными.ЕстьРеквизит("Организация", мдДокумент), Док.Организация, Неопределено);
			Док.ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(Док.ЭтоНовый(), ТекущаяДата(), Док.Дата), Ложь, текОрганизация);
		КонецЕсли;
		СистемаНалогообложения=Док.ДополнительныеСвойства.УчетнаяПолитика.СистемаНалогообложения;
		РазрешитьДвиженияНУ=СистемаНалогообложения=Перечисления.СистемыНалогообложения.Общая Или СистемаНалогообложения=Перечисления.СистемыНалогообложения.Общая_ЕНВД;	
	КонецЕсли; 

	ОсновнаяАналитикаТиповойОперации=ОсновнаяНастройкаАналитики("Документ_"+мдДокумент.Имя);

	//Структура параметров
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияХозрасчетный", Док.Организация);
	СтруктураПараметров.Вставить("ОрганизацияФинансовый", Док.Организация);
	СтруктураПараметров.Вставить("Док", Док);
	СтруктураПараметров.Вставить("мдДокумент", мдДокумент);
	СтруктураПараметров.Вставить("ПроверкаЗаполненияАналитикиТиповыхОпераций", Константы.ПроверкаЗаполненияАналитикиТиповыхОпераций.Получить());
	СтруктураПараметров.Вставить("ПроверкаЗаполненияТиповыхОпераций", Константы.ПроверкаЗаполненияТиповыхОпераций.Получить());
	СтруктураПараметров.Вставить("ДатаДок", ДатаДок);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", Неопределено);
	СтруктураПараметров.Вставить("МассивРегистров", МассивРегистров);

	Попытка СтруктураПараметров.Вставить("Аналитика", ОсновнаяАналитикаТиповойОперации.НастройкаАналитики.Выгрузить());
	Исключение СтруктураПараметров.Вставить("Аналитика", Неопределено);
	КонецПопытки;
	//*****СтруктураПараметров.Вставить("ВалютаДок", ВалютаДок);
	//СтруктураПараметров.Вставить("ВалютаШД", ВалютаШД);
	//СтруктураПараметров.Вставить("ВалютаДК", ВалютаДК);
	///СтруктураПараметров.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	СтруктураПараметров.Вставить("РазрешитьДвиженияНУ", РазрешитьДвиженияНУ);

	Если Док.ДополнительныеСвойства.Свойство("ПроверкаЗаполненияАналитикиТиповыхОпераций") Тогда
		СтруктураПараметров.Вставить("ПроверкаЗаполненияАналитикиТиповыхОпераций", Док.ДополнительныеСвойства.ПроверкаЗаполненияАналитикиТиповыхОпераций);
	КонецЕсли;
	Если Док.ДополнительныеСвойства.Свойство("ПроверкаЗаполненияТиповыхОпераций") Тогда
		СтруктураПараметров.Вставить("ПроверкаЗаполненияТиповыхОпераций", Док.ДополнительныеСвойства.ПроверкаЗаполненияТиповыхОпераций);
	КонецЕсли;

	//Таблица значений остатков бух.счетов
	ОписаниеТипаСуммы=ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТипаКолво=ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3);
	ОписаниеТипаБулево=Новый ОписаниеТипов("Булево");

	тзОстаткиНаСчетах=Новый ТаблицаЗначений;
	тзОстаткиНаСчетах.Колонки.Добавить("Счет");
	тзОстаткиНаСчетах.Колонки.Добавить("Субконто1");
	тзОстаткиНаСчетах.Колонки.Добавить("Субконто2");
	тзОстаткиНаСчетах.Колонки.Добавить("Субконто3");
	тзОстаткиНаСчетах.Колонки.Добавить("Организация");
	
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаОстаток", ОписаниеТипаСуммы);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаОстатокДт", ОписаниеТипаСуммы);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаОстатокКт", ОписаниеТипаСуммы);
	
	тзОстаткиНаСчетах.Колонки.Добавить("КоличествоОстаток", ОписаниеТипаКолво);
	тзОстаткиНаСчетах.Колонки.Добавить("КоличествоОстатокДт", ОписаниеТипаКолво);
	тзОстаткиНаСчетах.Колонки.Добавить("КоличествоОстатокКт", ОписаниеТипаКолво);

	тзОстаткиНаСчетах.Колонки.Добавить("ВалютнаяСуммаОстаток", ОписаниеТипаСуммы);
	тзОстаткиНаСчетах.Колонки.Добавить("ВалютнаяСуммаОстатокДт", ОписаниеТипаСуммы);
	тзОстаткиНаСчетах.Колонки.Добавить("ВалютнаяСуммаОстатокКт", ОписаниеТипаСуммы);

	тзОстаткиНаСчетах.Колонки.Добавить("СуммаНУОстатокДт", ОписаниеТипаСуммы);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаНУОстатокКт", ОписаниеТипаСуммы);

	тзОстаткиНаСчетах.Колонки.Добавить("СуммаВРОстатокДт", ОписаниеТипаСуммы);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаВРОстатокКт", ОписаниеТипаСуммы);

	тзОстаткиНаСчетах.Колонки.Добавить("СуммаПРОстатокДт", ОписаниеТипаСуммы);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаПРОстатокКт", ОписаниеТипаСуммы);

	//в данных колонках хранится признак расчета (истина\ложь)
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаРасчет", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаРасчетДт", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаРасчетКт", ОписаниеТипаБулево);
	
	тзОстаткиНаСчетах.Колонки.Добавить("КоличествоРасчет", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("КоличествоРасчетДт", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("КоличествоРасчетКт", ОписаниеТипаБулево);
	
	тзОстаткиНаСчетах.Колонки.Добавить("ВалютнаяСуммаРасчет", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("ВалютнаяСуммаРасчетДт", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("ВалютнаяСуммаРасчетКт", ОписаниеТипаБулево);

	тзОстаткиНаСчетах.Колонки.Добавить("СуммаНУРасчетДт", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаНУРасчетКт", ОписаниеТипаБулево);

	тзОстаткиНаСчетах.Колонки.Добавить("СуммаВРРасчетДт", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаВРРасчетКт", ОписаниеТипаБулево);

	тзОстаткиНаСчетах.Колонки.Добавить("СуммаПРРасчетДт", ОписаниеТипаБулево);
	тзОстаткиНаСчетах.Колонки.Добавить("СуммаПРРасчетКт", ОписаниеТипаБулево);

	тзОстаткиНаСчетах.Индексы.Добавить("Счет,Субконто1,Субконто2,Субконто3");	

	//Движение по регистрам бухгалтерии
	Если ТипЗнч(Док)=Тип("ДокументОбъект.АктВзаимозачета") Тогда
		ОбъектРегистр=Док.Движения["Хозрасчетный"];
		Если ОбъектРегистр.Количество()>0 Тогда
			ОбъектРегистр.Очистить();
		КонецЕсли; //*****
		Возврат Док.ДвижениеПоРегистрамБух(ОбъектРегистр, тзОстаткиНаСчетах);

	ИначеЕсли ТипЗнч(Док)=Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		Возврат Док.ДвиженияПоРегистрамБухгалтерии();
	КонецЕсли; //Исключение из правил

	стДвиженияРегистров=Новый Структура;

	//Проведение по табличным частям документа
	Для Каждого мдТабличнаяЧасть Из мдДокумент.ТабличныеЧасти Цикл
		ИмяТабличнойЧасти=мдТабличнаяЧасть.Имя;
		Если Док[ИмяТабличнойЧасти].Количество()=0 Тогда Продолжить; КонецЕсли;
		Если мдТабличнаяЧасть.Реквизиты.Найти("ТОП")=Неопределено Тогда Продолжить; КонецЕсли;
		СтруктураПараметров.ИмяТабличнойЧасти=ИмяТабличнойЧасти;

		ЕстьТоп2=УправлениеМетаданными.ЕстьРеквизит("ТОП2", мдДокумент, ИмяТабличнойЧасти);
		ТабличнаяЧасть=Док[ИмяТабличнойЧасти];		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			Результат=РегистрыБухгалтерии_ВыполнитьТОП(СтруктураПараметров, тзОстаткиНаСчетах, "ТОП" , стДвиженияРегистров, СтрокаТабличнойЧасти);
			Если Не Результат Тогда Отказ=Истина; Возврат Ложь; КонецЕсли;

			Если ЕстьТоп2 Тогда
				Результат=РегистрыБухгалтерии_ВыполнитьТОП(СтруктураПараметров, тзОстаткиНаСчетах, "ТОП2", стДвиженияРегистров, СтрокаТабличнойЧасти);
				Если Не Результат Тогда Отказ=Истина; Возврат Ложь; КонецЕсли;
			КонецЕсли; //Доп.типовая операция
		КонецЦикла;	
	КонецЦикла;

	//Проведение по шапке документа
	Если мдДокумент.Имя="УчетАвтотранспортаПутевыеЛисты" Тогда Возврат Истина; КонецЕсли; //Исключение из правил

	СтруктураПараметров.ИмяТабличнойЧасти=Неопределено;
	Для Каждого мдРеквизит Из мдДокумент.Реквизиты Цикл
		Если НЕ мдРеквизит.Тип.СодержитТип(Тип("СправочникСсылка.ТиповыеОперации")) Тогда Продолжить; КонецЕсли;			
		Результат=РегистрыБухгалтерии_ВыполнитьТОП(СтруктураПараметров, тзОстаткиНаСчетах, мдРеквизит.Имя, стДвиженияРегистров);
		Если Не Результат Тогда Отказ=Истина; Возврат Ложь; КонецЕсли;
	КонецЦикла;

	Для каждого ИмяРегистра Из МассивРегистров Цикл
		КонтрольОстатковРегистровБухгалтерии(Док, ИмяРегистра, Отказ);	
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция РегистрыБухгалтерии_ВыполнитьТОП(СтруктураПараметров, тзОстаткиНаСчетах, cтрАтрибут, стДвиженияРегистров, СтрокаТабличнойЧасти=Неопределено)
	Док=СтруктураПараметров.Док;
	ТиповаяОперация=?(СтрокаТабличнойЧасти=Неопределено, Док[cтрАтрибут], СтрокаТабличнойЧасти[cтрАтрибут]);
	Если ТиповаяОперация=Неопределено Тогда Возврат Истина; КонецЕсли;

	Если СтруктураПараметров.ПроверкаЗаполненияТиповыхОпераций Тогда
		Если ТиповаяОперация.Пустая() Тогда			
			Если ЗначениеЗаполнено(СтруктураПараметров.ИмяТабличнойЧасти) Тогда
				Сообщить("Документ {"+СокрЛП(Док)+"}, отсутствует типовая операция в табличной части {"+СтруктураПараметров.ИмяТабличнойЧасти+"}");
			Иначе
				Сообщить("Документ {"+СокрЛП(Док)+"}, отсутствует типовая операция в реквизите {"+cтрАтрибут+"}");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Если ТиповаяОперация.Пустая() Тогда Возврат Истина; КонецЕсли;
	КонецЕсли;

	Результат=РегистрыБухгалтерии_ВыполнитьСтрокуТОП(ТиповаяОперация, СтрокаТабличнойЧасти, СтруктураПараметров, тзОстаткиНаСчетах, стДвиженияРегистров);
	Если НЕ Результат Тогда Возврат Ложь; КонецЕсли; 
	
	ТиповаяОперацияОбщая=Справочники.ТиповыеОперации.НайтиПоРеквизиту("ОсновнаяНастройка", Истина,,ТиповаяОперация.Владелец);
	Если НЕ ТиповаяОперацияОбщая.Пустая() Тогда
		РегистрыБухгалтерии_ВыполнитьСтрокуТОП(ТиповаяОперацияОбщая, СтрокаТабличнойЧасти, СтруктураПараметров, тзОстаткиНаСчетах, стДвиженияРегистров);
		Если НЕ Результат Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция РегистрыБухгалтерии_ВыполнитьСтрокуТОП(ТиповаяОперация, СтрокаТабличнойЧасти, СтруктураПараметров, тзОстаткиНаСчетах, стДвиженияРегистров) Экспорт
	ВалютаБУ=МодульВалютногоУчета.ПолучитьВалюту("Бух");
	МассивРегистров=СтруктураПараметров.МассивРегистров;
	Док=СтруктураПараметров.Док;
	ПроверкаЗаполненияАналитикиТиповыхОпераций=СтруктураПараметров.ПроверкаЗаполненияАналитикиТиповыхОпераций;
	ДатаДок=СтруктураПараметров.ДатаДок;
	ИмяТабличнойЧасти=СтруктураПараметров.ИмяТабличнойЧасти;
	тзАналитика1=СтруктураПараметров.Аналитика;	
	тзАналитика2=ТиповаяОперация.НастройкаАналитики.Выгрузить();
	//**** КоэффициентПересчета=СтруктураПараметров.КоэффициентПересчета;
	РазрешитьДвиженияНУ=СтруктураПараметров.РазрешитьДвиженияНУ;

	мдДокумент=Док.Метаданные();
	стрВидДокумента=мдДокумент.Имя;
	
	Если стрВидДокумента="БюджетнаяОперация" Тогда
		ДатаДок=СтрокаТабличнойЧасти.Дата;
	КонецЕсли; //***

	//ВалютаТЧ=Док.ДополнительныеСвойства.ВалютаБухУчета;
	//Если УправлениеМетаданными.ЕстьРеквизит("Валюта", мдДокумент, ИмяТабличнойЧасти) Тогда
	//	ВалютаШД=СтрокаТабличнойЧасти.Валюта;
	//ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", мдДокумент, ИмяТабличнойЧасти) Тогда
	//	ВалютаШД=СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//КонецЕсли;
	//////ВалютаДок=Док.ДополнительныеСвойства.ВалютаБухУчета;
	//////Если УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", мдДокумент) Тогда
	//////	ВалютаДок=Док.ДоговорКонтрагента.ВалютаВзаиморасчетов; //Валюта ДоговораКонтрагента
	//////КонецЕсли;	
	//////Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", мдДокумент) Тогда
	//////	ВалютаДок=Док.ВалютаДокумента; //Валюта ШапкиДокумента
	//////КонецЕсли;
	//МодульВалютногоУчета.ПересчитатьСуммыВалюты(СтруктураШД, СтруктураШД.СуммаДокумента, СуммаБух, СуммаВал);

	//*****************************************************************************
	СтруктураШД=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(Док.ДополнительныеСвойства, "СтруктураШД", Новый Структура);
	ЕстьРеквизит_ВалютаДокумента=УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", мдДокумент);
	ВалютаДокумента=?(ЕстьРеквизит_ВалютаДокумента , Док.ВалютаДокумента, Док.ДополнительныеСвойства.ВалютаБухУчета);
	//*****************************************************************************

	//////////////////////Если УправлениеМетаданными.ЕстьРеквизит("Валюта", мдДокумент, ИмяТабличнойЧасти) Тогда
	//////////////////////	ВалютаДок=СтрокаТабличнойЧасти.Валюта;
	//////////////////////ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", мдДокумент, ИмяТабличнойЧасти) Тогда
	//////////////////////	ВалютаДок=СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//////////////////////КонецЕсли;
	
	Для каждого ИмяРегистра Из МассивРегистров Цикл
		ОбъектРегистр=Док.Движения[ИмяРегистра];

		Если ИмяРегистра="Хозрасчетный" Тогда
			СтруктураПараметров.Вставить("Организация", СтруктураПараметров.ОрганизацияХозрасчетный);
			ВидПроводки="ПроводкиБУ";
		ИначеЕсли ИмяРегистра="Финансовый" Тогда
			ВидПроводки="ПроводкиФУ";
			СтруктураПараметров.Вставить("Организация", СтруктураПараметров.ОрганизацияФинансовый);
		КонецЕсли;

		тзПроводки=ТиповаяОперация[ВидПроводки].Выгрузить();
		Для Каждого СтрокаТОП Из тзПроводки Цикл
			стКэшРесурсов=Новый Соответствие;
			
			СчетДт=СтрокаТОП.СчетДебет;
			СчетКт=СтрокаТОП.СчетКредит;

			ВалютныйУчетДт=СчетДт.Валютный;
			ВалютныйУчетКт=СчетКт.Валютный;

			тзАналитика=ПолучитьТаблицуАналитики(тзАналитика1, тзАналитика2, СтрокаТОП.ID);
			
			СуммаВал=0; СуммаНУ_Дт=0; СуммаПР_Дт=0; СуммаВР_Дт=0; СуммаНУ_Кт=0; СуммаПР_Кт=0; СуммаВР_Кт=0;
			Сумма=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "Сумма", ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
			Если ВидПроводки="ПроводкиБУ" Тогда
				Если ВалютныйУчетДт Или ВалютныйУчетКт Тогда
					СуммаВал=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "СуммаВал", ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
				КонецЕсли;

				Если РазрешитьДвиженияНУ Тогда
					НалоговыйУчетДт=СчетДт.НалоговыйУчет;
					НалоговыйУчетКт=СчетКт.НалоговыйУчет;
					
					Если НалоговыйУчетДт Тогда
						СуммаНУ_Дт=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "СуммаНУ_Дт" , ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
						СуммаПР_Дт=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "СуммаПР_Дт" , ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
						СуммаВР_Дт=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "СуммаВР_Дт" , ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
					КонецЕсли;
					
					Если НалоговыйУчетКт Тогда
						СуммаНУ_Кт=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "СуммаНУ_Кт" , ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
						СуммаПР_Кт=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "СуммаПР_Кт" , ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
						СуммаВР_Кт=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "СуммаВР_Кт" , ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
			Количество=ПолучитьЗначениеРесурса(Док, СтрокаТОП, "Количество", ИмяРегистра, тзАналитика, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров, стКэшРесурсов, СтруктураПараметров);
			Если Сумма=0 И Количество=0 И СуммаВал=0 И СуммаНУ_Дт=0 И СуммаПР_Дт=0 И СуммаВР_Дт=0 И СуммаНУ_Кт=0 И СуммаПР_Кт=0 И СуммаВР_Кт=0 Тогда Продолжить; КонецЕсли;
			
			//////Если НЕ ВалютаДок=Док.ДополнительныеСвойства.ВалютаБухУчета Тогда
			//////	Сумма=Окр(Сумма*КоэффициентПересчета, 2);
			//////	СуммаНУ_Дт=Окр(СуммаНУ_Дт*КоэффициентПересчета, 2);
			//////	СуммаПР_Дт=Окр(СуммаПР_Дт*КоэффициентПересчета, 2);
			//////	СуммаВР_Дт=Окр(СуммаВР_Дт*КоэффициентПересчета, 2);
			//////	СуммаНУ_Кт=Окр(СуммаНУ_Кт*КоэффициентПересчета, 2);
			//////	СуммаПР_Кт=Окр(СуммаПР_Кт*КоэффициентПересчета, 2);
			//////	СуммаВР_Кт=Окр(СуммаВР_Кт*КоэффициентПересчета, 2);
			//////КонецЕсли;
			
			//*******************************************************************************
			Если ЕстьРеквизит_ВалютаДокумента И СтруктураШД.Свойство("ВалютаВзаиморасчетов") Тогда				
				Если ВалютаДокумента=ВалютаБУ Тогда
					Если НЕ СтруктураШД.ВалютаВзаиморасчетов=ВалютаБУ Тогда
						СуммаВал=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВал, ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					//	Сумма     =МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма	 , ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					//	СуммаНУ_Дт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНУ_Дт, ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					//	СуммаПР_Дт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПР_Дт, ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					//	СуммаВР_Дт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВР_Дт, ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					//	СуммаНУ_Кт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНУ_Кт, ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					//	СуммаПР_Кт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПР_Кт, ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					//	СуммаВР_Кт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВР_Кт, ВалютаБУ, СтруктураШД.ВалютаВзаиморасчетов, 1, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов);
					КонецЕсли;
				Иначе
					Если СтрокаТОП.НеПересчитывать=Ложь Тогда
						Сумма     =МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(?(СуммаВал=0, Сумма, СуммаВал), СтруктураШД.ВалютаВзаиморасчетов, ВалютаБУ, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов, 1);
						СуммаНУ_Дт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНУ_Дт, СтруктураШД.ВалютаВзаиморасчетов, ВалютаБУ, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов, 1);
						СуммаПР_Дт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПР_Дт, СтруктураШД.ВалютаВзаиморасчетов, ВалютаБУ, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов, 1);
						СуммаВР_Дт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВР_Дт, СтруктураШД.ВалютаВзаиморасчетов, ВалютаБУ, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов, 1);
						СуммаНУ_Кт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНУ_Кт, СтруктураШД.ВалютаВзаиморасчетов, ВалютаБУ, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов, 1);
						СуммаПР_Кт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПР_Кт, СтруктураШД.ВалютаВзаиморасчетов, ВалютаБУ, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов, 1);
						СуммаВР_Кт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВР_Кт, СтруктураШД.ВалютаВзаиморасчетов, ВалютаБУ, СтруктураШД.КурсВзаиморасчетов, 1, СтруктураШД.КратностьВзаиморасчетов, 1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			//*******************************************************************************
	
			Проводка=ОбъектРегистр.Добавить();
			Проводка.Регистратор = Док;
			Проводка.Период      = ДатаДок;
			Проводка.Организация = СтруктураПараметров.Организация;
			Проводка.СчетДт      = СчетДт;
			Проводка.СчетКт      = СчетКт;
			Проводка.Сумма		 = Сумма;

			////Проводка.ВалютаДт=ВалютаДок;
			////Проводка.ВалютаКт=ВалютаДок;

			УстановитьВалюту(Док, СчетДт, Проводка, тзАналитика, "Дт", СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
			УстановитьВалюту(Док, СчетКт, Проводка, тзАналитика, "Кт", СтрокаТабличнойЧасти, ИмяТабличнойЧасти);

			Если ВалютныйУчетДт Тогда
				Проводка.ВалютнаяСуммаДт=СуммаВал;
			КонецЕсли;
			Если ВалютныйУчетКт Тогда
				Проводка.ВалютнаяСуммаКт=СуммаВал;
			КонецЕсли;
						
			Если ИмяРегистра="Хозрасчетный" Тогда
				Если РазрешитьДвиженияНУ Тогда
					Если НалоговыйУчетДт Тогда
						Проводка.СуммаНУДт = СуммаНУ_Дт;
						Проводка.СуммаПРДт = СуммаПР_Дт;
						Проводка.СуммаВРДт = СуммаВР_Дт;
					КонецЕсли;
					Если НалоговыйУчетКт Тогда
						Проводка.СуммаНУКт = СуммаНУ_Кт;
						Проводка.СуммаПРКт = СуммаПР_Кт;
						Проводка.СуммаВРКт = СуммаВР_Кт;
					КонецЕсли;
				КонецЕсли;

				Если стрВидДокумента="БухгалтерскаяСправка" Тогда
					Проводка.Содержание=СтрокаТабличнойЧасти.Комментарий;
				КонецЕсли;
				
			ИначеЕсли ИмяРегистра="Финансовый" Тогда
				
			КонецЕсли;
			
			Если СчетДт.Количественный Тогда
				Проводка.КоличествоДт=Количество;
			КонецЕсли;
			Если СчетКт.Количественный Тогда
				Проводка.КоличествоКт=Количество;
			КонецЕсли;
			
			Если НЕ СтрокаТабличнойЧасти=Неопределено Тогда
				Проводка.НомерСтрокиТабличнойЧасти=СтрокаТабличнойЧасти.НомерСтроки;
				//***Проводка.ВидТабличнойЧасти=СтруктураПараметров.ИмяТабличнойЧасти;
			КонецЕсли; //***
			
			Если ИмяРегистра="Хозрасчетный" Тогда
				Результат=УстановитьПодразделение(Док, СчетДт, Проводка, тзАналитика, "Дт", СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
				Если ПроверкаЗаполненияАналитикиТиповыхОпераций И Не Результат Тогда Возврат Ложь; КонецЕсли;
			
				Результат=УстановитьПодразделение(Док, СчетКт, Проводка, тзАналитика, "Кт", СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
				Если ПроверкаЗаполненияАналитикиТиповыхОпераций И Не Результат Тогда Возврат Ложь; КонецЕсли;

			ИначеЕсли ИмяРегистра="Финансовый" Тогда
				Результат=УстановитьЦФО(Док, СчетДт, Проводка, тзАналитика, "Дт", СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
				Если ПроверкаЗаполненияАналитикиТиповыхОпераций И Не Результат Тогда Возврат Ложь; КонецЕсли;
			
				Результат=УстановитьЦФО(Док, СчетКт, Проводка, тзАналитика, "Кт", СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
				Если ПроверкаЗаполненияАналитикиТиповыхОпераций И Не Результат Тогда Возврат Ложь; КонецЕсли;				
			КонецЕсли;

			Результат=УстановитьСубконто(Док, СчетДт, Проводка.СубконтоДт, тзАналитика, "Д", ИмяТабличнойЧасти, СтрокаТабличнойЧасти, стДвиженияРегистров);
			Если ПроверкаЗаполненияАналитикиТиповыхОпераций И Не Результат Тогда Возврат Ложь; КонецЕсли;
			
			Результат=УстановитьСубконто(Док, СчетКт, Проводка.СубконтоКт, тзАналитика, "К", ИмяТабличнойЧасти, СтрокаТабличнойЧасти, стДвиженияРегистров);
			Если ПроверкаЗаполненияАналитикиТиповыхОпераций И Не Результат Тогда Возврат Ложь; КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	Возврат Истина;
КонецФункции
	
Функция ПолучитьТаблицуАналитики(тзАналитика1, тзАналитика2, ID)
	МассивСтрок=тзАналитика2.НайтиСтроки(Новый Структура("ID", ID));
	Если МассивСтрок.Количество()=0 Тогда Возврат тзАналитика1; КонецЕсли;

	тзАналитика=тзАналитика1.Скопировать();
	СтруктураПоиска=Новый Структура("ВидАналитики,ДК");

	Для каждого СтрокаТаблицыИсточник Из МассивСтрок Цикл
		Если Не СтрокаТаблицыИсточник.Использование Тогда Продолжить; КонецЕсли; 
		СтруктураПоиска.ВидАналитики=СтрокаТаблицыИсточник.ВидАналитики;
		СтруктураПоиска.ДК=СтрокаТаблицыИсточник.ДК;
		МассивНайденныхСтрок=тзАналитика.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСтрок.Количество()=0 Тогда
			СтрокаТаблицыПриемник=тзАналитика.Добавить();
		Иначе
			СтрокаТаблицыПриемник=МассивНайденныхСтрок[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемник, СтрокаТаблицыИсточник);
	КонецЦикла;
	тзАналитика.Сортировать("ДК Убыв"); //Сортировка необходима, что бы данные в колонке "ДК" были первыми, иначе возникает проблемка...

	Возврат тзАналитика;
КонецФункции

Функция УстановитьСубконто(Док, Счет, ВидыСубконто, тзАналитика, ДК, ИмяТабличнойЧасти=Неопределено, СтрокаТабличнойЧасти=Неопределено, стДвиженияРегистров=Неопределено) Экспорт
	Если Счет.ВидыСубконто.Количество()=0 Тогда Возврат Истина; КонецЕсли;
    ЭтоБухСправка=ТипЗнч(Док)=Тип("ДокументОбъект.БухгалтерскаяСправка");
	//*** ЭтоНачальныеОстатки=ТипЗнч(Док)=Тип("ДокументОбъект.НачальныеОстатки");

	ИнвертироватьДК=Ложь;
	Если ТипЗнч(Док)=Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		Если Док.ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			ИнвертироватьДК=Истина;
		КонецЕсли; 
	КонецЕсли; //Исключение из правил
		
	Результат=Истина; ЗначениеАналитики=Неопределено; ЭтотОбъект=Док; //Для совместимости
	Для Каждого СтрокаКоллекции Из Счет.ВидыСубконто Цикл
		Если ЭтоБухСправка Тогда
			НомерСубконто=Счет.ВидыСубконто.Индекс(СтрокаКоллекции)+1;
			ЗначениеСубконто=СтрокаТабличнойЧасти["Субконто"+ДК+"т"+НомерСубконто];
			Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
		    	ВидыСубконто.Вставить(СтрокаКоллекции.ВидСубконто, ЗначениеСубконто);
				Продолжить;
			КонецЕсли;
		КонецЕсли; //Исключение из правил (8.02.2012)
		
		//Если ЭтоНачальныеОстатки Тогда
		//	НомерСубконто=Счет.ВидыСубконто.Индекс(СтрокаКоллекции)+1;
		//	ЗначениеСубконто=СтрокаТабличнойЧасти["Субконто"+НомерСубконто];
		//	Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
		//    	ВидыСубконто.Вставить(СтрокаКоллекции.ВидСубконто, ЗначениеСубконто);
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли; //Исключение из правил (10.05.2012)

		стрОшибка=""; //СокрЛП(Док.ДополнительныеСвойства.Заголовок);
		Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
			Попытка стрОшибка=стрОшибка+"Табличная часть {"+ИмяТабличнойЧасти+"}, Строка №"+СокрЛП(Док[ИмяТабличнойЧасти].Индекс(СтрокаТабличнойЧасти)+1+" - ");
			Исключение стрОшибка=стрОшибка+"Табличная часть {"+ИмяТабличнойЧасти+"}, Строка № - ";
			КонецПопытки;			
		КонецЕсли; // 18.05.2016
		
		РезультатПоиска=тзАналитика.НайтиСтроки(Новый Структура("ВидАналитики", СтрокаКоллекции.ВидСубконто));
		Если РезультатПоиска.Количество()=0 Тогда
			Сообщить(стрОшибка+" на счете "+Счет+" не заполнено субконто {"+СтрокаКоллекции.ВидСубконто.Наименование+"}");
			Результат=Ложь; Продолжить;
			//*** Если ПроверкаЗаполненияАналитикиТиповыхОпераций Тогда Результат=Ложь; КонецЕсли;
		КонецЕсли;

		Для Каждого СтрокаМассива Из РезультатПоиска Цикл
			Если Не ПустаяСтрока(СтрокаМассива.ДК) Тогда
				Если ИнвертироватьДК Тогда
					Если СокрЛП(СтрокаМассива.ДК) =ДК Тогда Продолжить; КонецЕсли;
				Иначе
					Если СокрЛП(СтрокаМассива.ДК)<>ДК Тогда Продолжить; КонецЕсли;
				КонецЕсли;
			КонецЕсли; //Фильтр по дебету\кредиту

			ЗначениеАналитики=ПолучитьЗначениеАналитики(Док, СтрокаМассива.Значение, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, стДвиженияРегистров);

			//Модуль
			Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда
				стрМодуль=СтрокаМассива.ТекстМодуля;
				Если Не ПустаяСтрока(стрМодуль) Тогда Выполнить(стрМодуль);	КонецЕсли;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда
				Сообщить(стрОшибка+" на счете "+Счет+" не заполнено субконто {"+СтрокаКоллекции.ВидСубконто.Наименование+"}");
				Результат=Ложь; Продолжить;
				//*** Если ПроверкаЗаполненияАналитикиТиповыхОпераций Тогда Результат=Ложь; Продолжить; КонецЕсли;
			КонецЕсли; 

			Если ТипЗнч(ВидыСубконто)=Тип(Новый Структура) Тогда
				ВидыСубконто.Вставить("Субконто"+СокрЛП(СтрокаКоллекции.НомерСтроки), ЗначениеАналитики);
			Иначе
				ВидыСубконто.Вставить(СтрокаКоллекции.ВидСубконто, ЗначениеАналитики);
			КонецЕсли;

			Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
				ЗначениеАналитики=Неопределено; Прервать;
			КонецЕсли;

			ЗначениеАналитики=Неопределено;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УстановитьЦФО(Док, Счет, Проводка, тзАналитика, ДтКт, СтрокаТабличнойЧасти, стрТабличнаяЧасть="")
	Если Не Счет.УчетПоЦФО Тогда Возврат Истина; КонецЕсли; Результат=Истина;
	
	Если Не ПустаяСтрока(ДтКт) Тогда
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ВидАналитики", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ФинансоваяСтруктура);
		СтруктураОтбора.Вставить("ДК", Лев(ДтКт, 1));
		МассивСтрок=тзАналитика.НайтиСтроки(СтруктураОтбора);
		СтрокаАналитики=?(МассивСтрок.Количество()=0, Неопределено, МассивСтрок[0]);
	КонецЕсли;

	Если СтрокаАналитики=Неопределено Тогда
		СтрокаАналитики=тзАналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ФинансоваяСтруктура, "ВидАналитики");
		Если СтрокаАналитики=Неопределено Тогда
			Сообщить("На счете "+Счет+" не заполнена аналитика <ЦФО>");
			Возврат Ложь;
		КонецЕсли; //19.08.14 //15.10.14
	КонецЕсли;

	ЗначениеАналитики=ПолучитьЗначениеАналитики(Док, СтрокаАналитики.Значение, СтрокаТабличнойЧасти, стрТабличнаяЧасть);
	////Если ТипЗнч(ЗначениеАналитики)=Тип("СправочникСсылка.рпХранилищеПравил") Тогда
	////	СтруктураПараметров=Новый Структура;
	////	СтруктураПараметров.Вставить("ЭтотОбъект", Док);
	////	СтруктураПараметров.Вставить("ДокументОбъект", Док);
	////	СтруктураПараметров.Вставить("тзАналитика", тзАналитика);
	////	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", стрТабличнаяЧасть);
	////	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	////	//СтруктураПараметров.Вставить("Регистр", Регистр);
	////	//СтруктураПараметров.Вставить("стДвиженияРегистров", стДвиженияРегистров);				
	////	Справочники.рпХранилищеПравил.ВыполнитьПравило(ЗначениеАналитики, СтруктураПараметров);	
	////	СтруктураПараметров.Свойство("ЗначениеАналитики", ЗначениеАналитики);
	////КонецЕсли;

	Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		стрМодуль=СтрокаАналитики.ТекстМодуля; ЭтотОбъект=Док;
		Если Не ПустаяСтрока(стрМодуль) Тогда Выполнить(стрМодуль);	КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		Сообщить("На счете "+Счет+" не заполнено ЦФО");
		Результат=Ложь;
	КонецЕсли;
		
	Проводка["ЦФО"+ДтКт]=ЗначениеАналитики;
	
	Возврат Результат;
КонецФункции

Функция УстановитьВалюту(Док, Счет, Проводка, тзАналитика, ДтКт, СтрокаТабличнойЧасти, стрТабличнаяЧасть="")
	Если Не Счет.Валютный Тогда Возврат Истина; КонецЕсли; Результат=Истина;
	
	Если Не ПустаяСтрока(ДтКт) Тогда
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ВидАналитики", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Валюты);
		СтруктураОтбора.Вставить("ДК", Лев(ДтКт, 1));
		МассивСтрок=тзАналитика.НайтиСтроки(СтруктураОтбора);
		СтрокаАналитики=?(МассивСтрок.Количество()=0, Неопределено, МассивСтрок[0]);
	КонецЕсли;

	Если СтрокаАналитики=Неопределено Тогда
		СтрокаАналитики=тзАналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Валюты, "ВидАналитики");
		Если СтрокаАналитики=Неопределено Тогда
			Сообщить("На счете "+Счет+" не заполнена <Валюта>");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	ЗначениеАналитики=ПолучитьЗначениеАналитики(Док, СтрокаАналитики.Значение, СтрокаТабличнойЧасти, стрТабличнаяЧасть);
	Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		стрМодуль=СтрокаАналитики.ТекстМодуля; ЭтотОбъект=Док;
		Если Не ПустаяСтрока(стрМодуль) Тогда Выполнить(стрМодуль);	КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		Сообщить("На счете "+Счет+" не заполнено <Валюта>");
		Результат=Ложь;
	КонецЕсли;
		
	Проводка["Валюта"+ДтКт]=ЗначениеАналитики;
	
	Возврат Результат;
КонецФункции

Функция УстановитьПодразделение(Док, Счет, Проводка, тзАналитика, ДтКт, СтрокаТабличнойЧасти, стрТабличнаяЧасть="")
	Если Не Счет.УчетПоПодразделениям Тогда Возврат Истина; КонецЕсли; Результат=Истина;
	
	Если Не ПустаяСтрока(ДтКт) Тогда
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ВидАналитики", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		СтруктураОтбора.Вставить("ДК", Лев(ДтКт, 1));
		МассивСтрок=тзАналитика.НайтиСтроки(СтруктураОтбора);
		СтрокаАналитики=?(МассивСтрок.Количество()=0, Неопределено, МассивСтрок[0]);
	КонецЕсли;

	Если СтрокаАналитики=Неопределено Тогда
		СтрокаАналитики=тзАналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения, "ВидАналитики");
		Если СтрокаАналитики=Неопределено Тогда
			Сообщить("На счете "+Счет+" не заполнена аналитика <Подразделение>");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	ЗначениеАналитики=ПолучитьЗначениеАналитики(Док, СтрокаАналитики.Значение, СтрокаТабличнойЧасти, стрТабличнаяЧасть);
	Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		стрМодуль=СтрокаАналитики.ТекстМодуля; ЭтотОбъект=Док;
		Если Не ПустаяСтрока(стрМодуль) Тогда Выполнить(стрМодуль);	КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЗначениеАналитики) Тогда
		Сообщить("На счете "+Счет+" не заполнено подразделение");
		Результат=Ложь;
	КонецЕсли;
		
	Проводка["Подразделение"+ДтКт]=ЗначениеАналитики;
	
	Возврат Результат;
КонецФункции
 