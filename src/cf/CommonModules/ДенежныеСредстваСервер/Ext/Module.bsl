Функция ПолучитьДатуДвижений(ДатаДокумента, ДатаОплаты, Организация=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаОплаты) Тогда
		ДатаДвижений=ДатаДокумента;

	ИначеЕсли КонецДня(ДатаДокумента)=КонецДня(ДатаОплаты) Тогда
		
		Отказ = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаДокумента, Отказ, Организация);
		
		Если Отказ Тогда
			ДатаДвижений = КонецДня(ДатаОплаты);
		Иначе
			СпособОпределения=УчетнаяПолитика.ОпределениеВремениПроведенияПлатежногоДокумента;
			Если СпособОпределения=Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента Тогда
				ДатаДвижений=ДатаДокумента;
			Иначе
				ДатаДвижений = КонецДня(ДатаОплаты);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДатаДвижений=КонецДня(ДатаОплаты);
	КонецЕсли;
	
	Возврат ДатаДвижений;
	
КонецФункции

Функция РассчитатьСуммуНДС(СуммаПлатежа, СтавкаНДС) Экспорт
	ЗначениеСтавкиНДС=УчетНалоговСервер.СтавкаНДС(СтавкаНДС);
	Возврат СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
КонецФункции

Функция РассчитатьСуммуПлатежа(СуммаПлатежаВал, Курс, Кратность) Экспорт
	Если Курс=0 ИЛИ Кратность=0 Тогда Возврат 0; КонецЕсли; 
	Возврат Окр((СуммаПлатежаВал*Курс*Кратность)/(Курс*Кратность), 2)
КонецФункции

Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации=Неопределено) Экспорт
	СПоставщиком=Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	СПокупателем=Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Прочее=Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);

	Если ЗначениеЗаполнено(ВидОперации) тогда
		//Определение вида операции
		ВидДоговораПоВидуОпераций=Новый Соответствие();

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,Прочее);
        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств,Прочее);
			
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам,Прочее);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,СПокупателем);

		ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];

		Возврат ?(ВидДоговора = Неопределено, Новый СписокЗначений, ВидДоговора);
	Конецесли;
	
	Возврат Новый СписокЗначений;
КонецФункции

Функция ДоговорКонтрагентаПоУмолчанию(Контрагент, Организация, ВидОперации) Экспорт
	СтруктураПраметров=Новый Структура;
	СтруктураПраметров.Вставить("Контрагент", Контрагент);
	СтруктураПраметров.Вставить("Организация", Организация);
	СтруктураПраметров.Вставить("ВидДоговора", ОпределитьВидДоговораСКонтрагентом(ВидОперации));
	Возврат УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);
КонецФункции

Функция НаправленияДвижения(ВидОперации=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат Перечисления.РасчетыВозврат.Расчеты;
	Конецесли;
	ВозвратПоВидуОпераций=Новый Массив;
	ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
	ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
	ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
	ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю);
	Возврат Перечисления.РасчетыВозврат[?(ВозвратПоВидуОпераций.Найти(ВидОперации)=Неопределено, "Расчеты", "Возврат")];
КонецФункции

Функция ЕстьВзаиморасчеты(ВидОперации=Неопределено) Экспорт
	Если ВидОперации=Неопределено Тогда Возврат Ложь; КонецЕсли;
	
	ЕстьРасчетыПоКонтрагентами = ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;

	ЕстьРасчетыПоКредитам = ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;		
		
	Возврат ЕстьРасчетыПоКонтрагентами Или ЕстьРасчетыПоКредитам; 	
КонецФункции

// Заполняет входящий платежный документ на основании исходящего (для расчетов между собственными организациями)
//
Процедура ЗаполнитьПоПлатежномуДокументу(Объект, Основание)
	
	ОпределитьВидОперацииПоПлатежномуДокументу(Основание.ВидОперации, Объект.ВидОперации);	
	
	// Получим преобразованный номер документа
	ПреобразованныйНомер = СокрЛП(Основание.Номер);

	Префикс = "";
	МетаданныеДокумента = Основание.Метаданные();

	Если ЗначениеЗаполнено(Основание.Организация) Тогда
		Префикс = СокрЛП(Основание.Организация.Префикс);
	КонецЕсли;

	// удаление префикса из номера документа
	Если Найти(ПреобразованныйНомер, Префикс)=1 Тогда 
		ПреобразованныйНомер = Сред(ПреобразованныйНомер, СтрДлина(Префикс)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(ПреобразованныйНомер, 1) = "-" Тогда
		ПреобразованныйНомер = Сред(ПреобразованныйНомер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(ПреобразованныйНомер, 1)="0" Цикл
		ПреобразованныйНомер=Сред(ПреобразованныйНомер, 2);
	КонецЦикла;
	
	Объект.НомерВходящегоДокумента = ПреобразованныйНомер;
	Объект.ДатаВходящегоДокумента  = Основание.Дата;
	
	// Поменяем организацию и контрагента местами.	
	Объект.Организация = ЗаполнениеДокументов.ОрганизацияПоКонтрагенту(Основание.Контрагент);
	Объект.Контрагент  = ЗаполнениеДокументов.КонтрагентПоОрганизации(Основание.Организация);
	
	Объект.СчетОрганизации=Основание.СчетКонтрагента;
	Объект.СчетКонтрагента=Основание.СчетОрганизации;	
	
	Если Объект.Организация = Объект.Контрагент.ОсновнойДоговорКонтрагента.Организация Тогда
		ДоговорКонтрагента=Объект.Контрагент.ОсновнойДоговорКонтрагента;
	Иначе
		ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
	
	// Получим список договоров между собственными организациями
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Ссылка КАК ДоговорКонтрагента,
	|	ИсточникДанных1.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ИсточникДанных1
	|
	|ГДЕ
	|	ИсточникДанных1.Владелец = &Владелец И ИсточникДанных1.Организация = &Организация
	|";
	тзДоговоры=Запрос.Выполнить().Выгрузить();
	тзДоговоры.Индексы.Добавить("ВалютаВзаиморасчетов,ДоговорКонтрагента");
	
	ВидДокумента=Основание.Метаданные().Имя;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Курс,
	|	ИсточникДанных1.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ИсточникДанных1.СуммаПлатежа,
	|	ИсточникДанных1.Кратность,
	|	ИсточникДанных1.СуммаВал,
	|	ИсточникДанных1.СтавкаНДС,
	|	ИсточникДанных1.СуммаНДС,
	|	ИсточникДанных1.СтатьяДвиженияДенежныхСредств,
	|	ИсточникДанных1.Проект,
	|	ИсточникДанных1.Ссылка.СуммаДокумента
	|ИЗ
	|	Документ."+ВидДокумента+".РасшифровкаПлатежа КАК ИсточникДанных1
	|ГДЕ
	|	ИсточникДанных1.Ссылка = &Ссылка
	|";	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.СуммаДокумента=Выборка.СуммаДокумента;
		Выборка.Сбросить();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СтрокаПлатеж=Объект.РасшифровкаПлатежа.Добавить();

		СтруктураПоискаДоговор=Новый Структура;
		СтруктураПоискаДоговор.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		СтруктураПоискаДоговор.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
		
		МассивДоговор=тзДоговоры.НайтиСтроки(СтруктураПоискаДоговор);
		Если МассивДоговор.Количество()=1 Тогда
			СтрокаПлатеж.ДоговорКонтрагента=ДоговорКонтрагента;
		Иначе
			СтруктураПоискаВалюта=Новый Структура;
			СтруктураПоискаВалюта.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
			МассивВалюта=тзДоговоры.НайтиСтроки(СтруктураПоискаВалюта);
			Если МассивВалюта.Количество()>0 Тогда
				СтрокаПлатеж.ДоговорКонтрагента=МассивВалюта[0].ДоговорКонтрагента;
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Выборка);
	КонецЦикла;

КонецПроцедуры

// Процедура стандартного заполнения входящего платежного документа при вводе на основании. 
//Применима ко всем документам, кроме приходного кассового ордера.
//
Процедура ЗаполнитьПриходПоОснованию(Объект, Основание) Экспорт
	Если Основание=Неопределено Тогда Возврат; КонецЕсли;
	
	ВалютаБухУчета=Объект.ДополнительныеСвойства.ВалютаБухУчета;
	СтавкаНДС=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	тчРасшифровкаПлатежа=Объект.РасшифровкаПлатежа;

	стрОснование=Основание.Метаданные().Имя;
	Если стрОснование="ЗаказПокупателя" Тогда
		СтрокаПлатеж=тчРасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		
		СтруктураКурса=МодульВалютногоУчета.КурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
		СтрокаПлатеж.Курс=СтруктураКурса.Курс;
		СтрокаПлатеж.Кратность=СтруктураКурса.Кратность;
		
		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			Объект.СчетОрганизации=Основание.СтруктурнаяЕдиница;
		Иначе
			Объект.СчетОрганизации=Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;		
		Объект.СчетКонтрагента=Объект.Контрагент.ОсновнойБанковскийСчет;
		
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
		
	ИначеЕсли стрОснование="РеализацияТоваровУслуг" Или стрОснование="КомиссияОтчетПродажиКомиссионера" Тогда
		Объект.ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;

		СтрокаПлатеж=тчРасшифровкаПлатежа.Добавить(); 
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, МодульВалютногоУчета.КурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата));

		Если стрОснование="РеализацияТоваровУслуг" Тогда
			Если ЗначениеЗаполнено(Основание.БанковскийСчетОрганизации) Тогда
				Объект.СчетОрганизации=Основание.БанковскийСчетОрганизации;
			Иначе
				Объект.СчетОрганизации=Объект.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
		Иначе
			Объект.СчетОрганизации=Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		Объект.СчетКонтрагента=Объект.Контрагент.ОсновнойБанковскийСчет;
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
		
	ИначеЕсли стрОснование="ВозвратТоваровПоставщику" Тогда
		//Реквизиты шапки
		Объект.ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		Объект.Контрагент=Основание.Контрагент;
		Объект.СчетОрганизации=Объект.Организация.ОсновнойБанковскийСчет;
		Объект.СчетКонтрагента=Объект.Контрагент.ОсновнойБанковскийСчет;
	
		//Реквизиты табличной части
		СтрокаПлатеж=тчРасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, МодульВалютногоУчета.КурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата));
		
	ИначеЕсли стрОснование="ПлатежноеПоручениеИсходящее" Или стрОснование="ПлатежноеПоручениеВходящее" Тогда
		ЗаполнитьПоПлатежномуДокументу(Объект, Основание);
	КонецЕсли;

	Если НЕ СтрокаПлатеж=Неопределено Тогда
		Если СтрокаПлатеж.СуммаПлатежа=0 Тогда
			СтрокаПлатеж.СуммаПлатежа=Объект.СуммаДокумента;
		КонецЕсли;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	Объект.СуммаДокумента=тчРасшифровкаПлатежа.Итог("СуммаПлатежа");
	Объект.ДокументОснование=Основание.Ссылка;
	
	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(Объект);
КонецПроцедуры

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(Объект, ВалютаРегламентированногоУчета = Неопределено, РасшифровкаПлатежа) Экспорт
Перем ТипЦен;

	МетаданныеДокумента = Объект.Метаданные();

	Если РасшифровкаПлатежа.Количество()=0 Тогда
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаПлатеж=РасшифровкаПлатежа[0];
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ВидОперации", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
			Объект.ВидОперации = Перечисления[Объект.ВидОперации.Метаданные().Имя][0];
		КонецЕсли;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("Организация", МетаданныеДокумента) Тогда
	  	Если (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
		    СписокПолей=новый СписокЗначений;
			СписокПолей.Добавить("ОсновнойБанковскийСчет");
			СписокПолей.Добавить("ОсновнойБанковскийСчет.ВалютаДенежныхСредств", "ОсновнойБанковскийСчетВалютаДенежныхСредств");

		  	ДанныеОрганизация =  УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями("ОсновнаяОрганизация", СписокПолей);

			Объект.Организация = ДанныеОрганизация.Значение;
		Иначе
			ДанныеОрганизация=Новый Структура("Значение, ОсновнойБанковскийСчет, ОсновнойБанковскийСчетВалютаДенежныхСредств", Объект.Организация,
				Объект.Организация.ОсновнойБанковскийСчет, Объект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств);
		КонецЕсли;
	
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("Подразделение", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.Подразделение)) Тогда
		Объект.Подразделение = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделение");
	КонецЕсли;
	
	Если УправлениеМетаданными.ЕстьРеквизит("Ответственный", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.Ответственный)) Тогда
		Объект.Ответственный = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ФормаОплаты", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) ИЛИ Объект.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные) Тогда
		Если УправлениеМетаданными.ЕстьРеквизит("БанковскийСчетКасса", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса)) Тогда
			СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ВалютаДенежныхСредств");
            ДанныеКасса =  УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями("ОсновнаяКасса", СписокПолей);

			БанковскийСчетКасса = ДанныеКасса.Значение;
			
			Если ЗначениеЗаполнено(ДанныеКасса) Тогда		
				Объект.БанковскийСчетКасса=ДанныеКасса.Значение;
			Иначе
				Объект.БанковскийСчетКасса=Справочники.Кассы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Объект.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		КонецЕсли;
	КонецЕсли;
		
	Если УправлениеМетаданными.ЕстьРеквизит("Касса", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.Касса))Тогда
		СписокПолей=новый СписокЗначений;
		СписокПолей.Добавить("ВалютаДенежныхСредств");
        ДанныеКасса= УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями("ОсновнаяКасса", СписокПолей);
		Объект.Касса=ДанныеКасса.Значение;		
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("КассаККМ", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.КассаККМ)) Тогда
		Объект.КассаККМ = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяКассаККМ");
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("СчетОрганизации", МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(Объект.СчетОрганизации)
		И (ЗначениеЗаполнено(Объект.Организация)) Тогда
		
		СчетПоУмолчанию=ДанныеОрганизация.ОсновнойБанковскийСчет;

		Объект.СчетОрганизации=СчетПоУмолчанию;
	КонецЕсли;

	Если ДенежныеСредстваСервер.ЕстьВзаиморасчеты(Объект.ВидОперации) Тогда
		флВыполнитьЗаполнениеСтруктуры = ложь;

		СписокПолей=Новый СписокЗначений;
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента");
		СписокПолей.Добавить("ОсновнойБанковскийСчет");
		СписокПолей.Добавить("ОсновнойБанковскийСчет.ВалютаДенежныхСредств", "ОсновнойБанковскийСчетВалютаДенежныхСредств");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.Организация", "ОсновнойДоговорКонтрагентаОрганизация");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.ВидДоговора", "ОсновнойДоговорКонтрагентаВидДоговора");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов", "ОсновнойДоговорКонтрагентаВалютаВзаиморасчетов");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.ТипЦен", "ОсновнойДоговорКонтрагентаТипЦен");
		СписокПолей.Добавить("ОсновноеКонтактноеЛицо");

		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПараметрДвижения=ОпределитьПараметрыВыбораСделки(Объект.ВидОперации);
			Если ПараметрДвижения.ВидДвиженияРасчеты="Приход" Тогда  // Приход по регистру "ВзаиморасчетыСКонтрагентами"
				ДанныеКонтрагент=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями("ОсновнойПоставщик", СписокПолей);
				Объект.Контрагент = ДанныеКонтрагент.Значение;

			ИначеЕсли ПараметрДвижения.ВидДвиженияРасчеты="Расход" Тогда
				ДанныеКонтрагент = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями("ОсновнойПокупатель", СписокПолей);
				Объект.Контрагент = ДанныеКонтрагент.Значение;
			Иначе
				флВыполнитьЗаполнениеСтруктуры = истина;
				текКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		Иначе
			флВыполнитьЗаполнениеСтруктуры = истина;
			текКонтрагент = Объект.Контрагент;
		КонецЕсли;

		Если флВыполнитьЗаполнениеСтруктуры Тогда
			ДанныеКонтрагент=новый Структура();
			ДанныеКонтрагент.Вставить("Значение", текКонтрагент);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагента", текКонтрагент.ОсновнойДоговорКонтрагента);
			ДанныеКонтрагент.Вставить("ОсновнойБанковскийСчет", текКонтрагент.ОсновнойБанковскийСчет);
			ДанныеКонтрагент.Вставить("ОсновнойБанковскийСчетВалютаДенежныхСредств", текКонтрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаОрганизация", текКонтрагент.ОсновнойДоговорКонтрагента.Организация);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаВидДоговора",текКонтрагент.ОсновнойДоговорКонтрагента.ВидДоговора);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаВалютаВзаиморасчетов", текКонтрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаТипЦен",текКонтрагент.ОсновнойДоговорКонтрагента.ТипЦен); 
			ДанныеКонтрагент.Вставить("ОсновноеКонтактноеЛицо",текКонтрагент.ОсновноеКонтактноеЛицо);
		КонецЕсли;

		Если УправлениеМетаданными.ЕстьРеквизит("СчетКонтрагента", МетаданныеДокумента)
			И НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента)
			И ЗначениеЗаполнено(ДанныеКонтрагент.ОсновнойБанковскийСчет) 
			И ДанныеКонтрагент.ОсновнойБанковскийСчетВалютаДенежныхСредств=ДанныеОрганизация.ОсновнойБанковскийСчетВалютаДенежныхСредств Тогда
			Объект.СчетКонтрагента = ДанныеКонтрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)  Тогда 
					
					Если НЕ ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ДанныеКонтрагент.ОсновнойДоговорКонтрагентаВидДоговора)=Неопределено Тогда
						//требуется оптимизация: нет смысла для каждой строки документа определять пустая ли организация в документе
						Если Объект.Организация.Пустая() Тогда
							СтрокаПлатеж.ДоговорКонтрагента = ДанныеКонтрагент.ОсновнойДоговорКонтрагента;
							Организация=ДанныеКонтрагент.ОсновнойДоговорКонтрагентаОрганизация;
						//если организация заполнена, проверяем соответствует ли она основному договору	
						ИначеЕсли ДанныеКонтрагент.ОсновнойДоговорКонтрагентаОрганизация.Пустая()
							ИЛИ ДанныеКонтрагент.ОсновнойДоговорКонтрагентаОрганизация=Объект.Организация Тогда
							СтрокаПлатеж.ДоговорКонтрагента = ДанныеКонтрагент.ОсновнойДоговорКонтрагента;
						КонецЕсли;
						
					КонецЕсли;
					
					Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)) И СтрокаПлатеж.Курс=0 Тогда
						СтруктураКурса=МодульВалютногоУчета.КурсВалюты(ДанныеКонтрагент.ОсновнойДоговорКонтрагентаВалютаВзаиморасчетов, ТекущаяДата());
						СтрокаПлатеж.Курс=СтруктураКурса.Курс;
						СтрокаПлатеж.Кратность=СтруктураКурса.Кратность;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли; // Контрагент
		
	Если УправлениеМетаданными.ЕстьРеквизит("ДатаОплаты", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.ДатаОплаты)) Тогда
		Объект.ДатаОплаты = Объект.Дата;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ДатаРасхода", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.ДатаРасхода)) Тогда
		Объект.ДатаРасхода = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если УправлениеМетаданными.ЕстьРеквизит("ДатаПоступления", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(Объект.ДатаПоступления)) Тогда
		Объект.ДатаПоступления = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
		
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "РасшифровкаПлатежа") И (НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС)) Тогда
			СтрокаПлатеж.СтавкаНДС = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	ЗначениеСтавкиНДС=УчетНалоговСервер.СтавкаНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС=СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
КонецПроцедуры

Функция СформироватьТаблицуПлатежей(Объект, Отказ=Ложь, Заголовок) Экспорт
	тзДанные=Объект.РасшифровкаПлатежа.Выгрузить();
	тзДанные.Колонки.Добавить("СуммаБух");
	тзДанные.Колонки.Добавить("ВидТабличнойЧасти");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзДанные.Колонки.Добавить("ВестиПлатежныйКалендарь");
	тзДанные.Колонки.Добавить("ВалютаВзаиморасчетов");
	тзДанные.Колонки.Добавить("ВидДоговора");
	тзДанные.Колонки.Добавить("Контрагент");
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.СуммаБух=СтрокаКоллекции.СуммаПлатежа;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.ВестиПлатежныйКалендарь=СтрокаКоллекции.ДоговорКонтрагента.ВестиПлатежныйКалендарь;
		СтрокаКоллекции.ВидДоговора=СтрокаКоллекции.ДоговорКонтрагента.ВидДоговора;
		СтрокаКоллекции.ВалютаВзаиморасчетов=СтрокаКоллекции.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(СтрокаКоллекции.ДоговорКонтрагента) Тогда
			Если НЕ Объект.Организация=СтрокаКоллекции.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	тзДанные.ЗаполнитьЗначения(Объект.Контрагент, "Контрагент");
	тзДанные.ЗаполнитьЗначения("РасшифровкаПлатежа", "ВидТабличнойЧасти");

	Возврат тзДанные;	
КонецФункции

Функция ОпределитьПараметрыВыбораСделки(ВидОперации=Неопределено) Экспорт
	
	ЗаказПокупателяПриход = Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПокупателя"); // Расход по регистру взаиморасчетов
    ЗаказПокупателяРасход = Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПокупателя"); // Приход по регистру взаиморасчетов
    ЗаказПоставщикуПриход = Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПоставщику"); // Расход по регистру взаиморасчетов
	ЗаказПоставщикуРасход = Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПоставщику"); // Приход по регистру взаиморасчетов
		
	Если ЗначениеЗаполнено(ВидОперации) тогда
		//Определение вида операции
		ПараметрыСделкиПоВидуОпераций = Новый Соответствие();

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ЗаказПокупателяПриход);
        ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);

		Если Не ПараметрыСделкиПоВидуОпераций[ВидОперации]=Неопределено Тогда
			Возврат ПараметрыСделкиПоВидуОпераций[ВидОперации];
		КонецЕсли;
		Возврат Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Прочие","Прочие");
	Конецесли;
	
	Возврат ЗаказПокупателяПриход;	
КонецФункции

// Определяет вид операции документа поступления по документу расхода - основанию
//
Процедура ОпределитьВидОперацииПоПлатежномуДокументу(ВидОперацииОснование, ВидОперацииДокумент) Экспорт
	
	Если  ВидОперацииДокумент.Метаданные().Имя="ВидыОперацийПоступлениеБезналичныхДенежныхСредств" Тогда
		Если ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		Иначе
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
		КонецЕсли;

	ИначеЕсли ВидОперацииДокумент.Метаданные().Имя="ВидыОперацийСписаниеБезналичныхДенежныхСредств" Тогда
		Если ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;

		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;

		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;

		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		Иначе
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры