// Возвращает полные данные ОКСМ классификатора.
//
// Возвращаемое значение:
//     ТаблицаЗначений - данные классификатора с колонками:
//         * Код                - Строка - данные страны.
//         * Наименование       - Строка - данные страны.
//         * НаименованиеПолное - Строка - данные страны.
//         * КодАльфа2          - Строка - данные страны.
//         * КодАльфа3          - Строка - данные страны.
//
//     Таблица значений проиндексирована по полям "Код", "Наименование".
//
Функция ТаблицаКлассификатора() Экспорт
	Макет=Справочники.КлассификаторСтранМира.ПолучитьМакет("Классификатор");

	Чтение=Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());

	Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
КонецФункции

Функция ЭтоСтранаУчастникЕАЭС(Страна) Экспорт
	Если ТипЗнч(Страна) = ТипЗнч(Справочники.КлассификаторСтранМира.ПустаяСсылка()) Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Страна);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	СтраныМира.УчастникЕАЭС КАК УчастникЕАЭС
		|ИЗ
		|	Справочник.КлассификаторСтранМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.Ссылка = &Ссылка
		|";
		РезультатЗапроса=Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтрокаРезультата=РезультатЗапроса.Выбрать();
			Если СтрокаРезультата.Следующий() Тогда
				Возврат (СтрокаРезультата.УчастникЕАЭС = ИСТИНА);
			КонецЕсли;
		КонецЕсли;		
	Иначе
		НайденнаяСтрана=СтранаМираПоКодуИлиНаименованию(Страна);
		Если ЗначениеЗаполнено(НайденнаяСтрана) Тогда
			Возврат НайденнаяСтрана.УчастникЕАЭС;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Ложь;	
КонецФункции

// Возвращает ссылку на элемент справочника страны мира по коду или наименованию.
// Если элемент справочника СтраныМиры не найден, то он будет создан на основании данных заполнения.
//
// Параметры:
//  КодИлиНаименование - Строка    - Код страны, код альфа2, код альфа3 или наименование страны.
//  ДанныеЗаполнения   - Структура - Необязательный. Данные для заполнения в случае создания нового элемента.
//                                   Ключи структуры соответствуют реквизитам справочника СтраныМира.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - Ссылка на элемент справочника СтраныМиры.
//                                Если найдено несколько значений, то будет возвращено первое.
//                                Если ничего не найдено, данные заполнения не указаны, то возвращается пустая ссылка.
//
Функция СтранаМираПоКодуИлиНаименованию(КодИлиНаименование, ДанныеЗаполнения = Неопределено) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КодИлиНаименование", КодИлиНаименование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК СтраныМира
	|ГДЕ
	|	(СтраныМира.Код = &КодИлиНаименование
	|		ИЛИ СтраныМира.КодАльфа2 = &КодИлиНаименование
	|		ИЛИ СтраныМира.КодАльфа3 = &КодИлиНаименование
	|		ИЛИ СтраныМира.Наименование = &КодИлиНаименование
	|		ИЛИ СтраныМира.НаименованиеПолное = &КодИлиНаименование)
	|";
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКлассификатор", ТаблицаКлассификатора());
	Запрос.УстановитьПараметр("КодИлиНаименование",   КодИлиНаименование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ТаблицаКлассификатор.Код,
	|	ТаблицаКлассификатор.КодАльфа2,
	|	ТаблицаКлассификатор.КодАльфа3,
	|	ТаблицаКлассификатор.Наименование,
	|	ТаблицаКлассификатор.НаименованиеПолное,
	|	ТаблицаКлассификатор.УчастникЕАЭС,
	|	ТаблицаКлассификатор.Неактуальный
	|ПОМЕСТИТЬ ТаблицаКлассификатор
	|ИЗ
	|	&ТаблицаКлассификатор КАК ТаблицаКлассификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтранаМира.Код,
	|	СтранаМира.КодАльфа2,
	|	СтранаМира.КодАльфа3,
	|	СтранаМира.Наименование,
	|	СтранаМира.НаименованиеПолное,
	|	СтранаМира.УчастникЕАЭС
	//|	СтранаМира.Неактуальный
	|ИЗ
	|	ТаблицаКлассификатор КАК СтранаМира
	|ГДЕ
	|	(СтранаМира.Код = &КодИлиНаименование
	|			ИЛИ СтранаМира.КодАльфа2 = &КодИлиНаименование
	|			ИЛИ СтранаМира.КодАльфа3 = &КодИлиНаименование
	|			ИЛИ СтранаМира.Наименование = &КодИлиНаименование
	|			ИЛИ СтранаМира.НаименованиеПолное = &КодИлиНаименование)
	|";
	РезультатЗапроса=Запрос.Выполнить().Выбрать();	
	Если РезультатЗапроса.Следующий() Тогда
		ДанныеЗаполнения=ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса);
	КонецЕсли;
	
	Если ДанныеЗаполнения=Неопределено ИЛИ НЕ ДанныеЗаполнения.Свойство("Наименование") ИЛИ ПустаяСтрока(ДанныеЗаполнения.Наименование) Тогда
		Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбъектСтраны=Справочники.КлассификаторСтранМира.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектСтраны, ДанныеЗаполнения);
	ОбъектСтраны.Записать();

	Возврат ОбъектСтраны.Ссылка;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	Если ПустаяСтрока(ВыбСтрока) Тогда Возврат ""; КонецЕсли; 
	Возврат ?(ПризнакЗапятой,",","")+" ";
КонецФункции

//Процедура дополняет представление адреса строкой 
Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Дополнение <> "" Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
  	
КонецПроцедуры

// Функция возвращает строковое представление адреса (в формате через запятую) , включая незаполненные поля
Функция ПолучитьПолныйАдрес(Запись) Экспорт
	
	Результат = "";
	
	Если Запись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ОпределитьДляОбъектаРоссийскийАдрес(Запись) Тогда	
		Результат = "," + 
		СокрЛП(Запись.Поле1) + ", " +
		СокрЛП(Запись.Поле2) +Символы.НПП+СокрЛП(Запись.РегионСокращение)+", " +
		СокрЛП(Запись.Поле3) +Символы.НПП+СокрЛП(Запись.РайонСокращение)+", " +
		СокрЛП(Запись.ГородСокращение)+Символы.НПП+СокрЛП(Запись.Поле4) + ", " +
		СокрЛП(Запись.НаселенныйПунктСокращение)+Символы.НПП+СокрЛП(Запись.Поле5) + ", " +
		СокрЛП(Запись.УлицаСокращение)+Символы.НПП+СокрЛП(Запись.Поле6) + ", " +
		СокрЛП(Запись.Поле7) + ", " +
		СокрЛП(Запись.Поле8) + ", " +
		СокрЛП(Запись.Поле9);
		
	Иначе
		Результат = Запись.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Результат, ",", "")) Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция по структуре с адресом возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) Экспорт
	
	ТекПредставление = "";
	
	Если СтруктураАдреса = Неопределено Тогда
		Возврат ТекПредставление;
	КонецЕсли;
	
	АдресЗаПределамиРФ = Неопределено;
	СтруктураАдреса.Свойство("ЗаПределамиРФ", АдресЗаПределамиРФ);
	Если АдресЗаПределамиРФ = Неопределено Тогда
		АдресЗаПределамиРФ = Ложь;
	КонецЕсли;
	
	Если Не АдресЗаПределамиРФ Тогда
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Индекс), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Регион), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Район), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Город), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.НаселенныйПункт), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Улица), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Дом), ", дом № ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Корпус), ", корпус ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Квартира), ", кв.");
		
		Если СтрДлина(ТекПредставление) > 2 Тогда
			ТекПредставление = Сред(ТекПредставление, 3);
		КонецЕсли;
	
	Иначе
		
		ТекПредставление = ?(СтруктураАдреса.Представление = "", СтруктураАдреса.Страна, СтруктураАдреса.Представление);
	
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеАдреса(Запись) Экспорт

	ТекПредставление = "";

	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;

	Если СокрЛП(Запись.Страна) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Страна);
	КонецЕсли;
	
	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2)+Символы.НПП+СокрЛП(Запись.РегионСокращение);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3)+ Символы.НПП+СокрЛП(Запись.РайонСокращение);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " +СокрЛП(Запись.Поле4)+Символы.НПП+СокрЛП(Запись.ГородСокращение);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " +СокрЛП(Запись.Поле5)+Символы.НПП+СокрЛП(Запись.НаселенныйПунктСокращение); 
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда                                      
		ТекПредставление = ТекПредставление + ", " +СокрЛП(Запись.Поле6)+Символы.НПП+СокрЛП(Запись.УлицаСокращение);
	КонецЕсли;

	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", "+Запись.ТипДома+" №" + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", "+Запись.ТипКорпуса+" "+ СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", "+Запись.ТипКвартиры+" №" + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

//Функция по строке адреса (разделенная через запятую) возвращает его представление
Функция ПолучитьПредставлениеАдресаПоСтрока(СтрокаАдреса) Экспорт
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаИзСтроки(СтрокаАдреса);
	ПредставлениеАдреса = ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса);
	Возврат ПредставлениеАдреса
	
КонецФункции

// функция определяет есть ли хотя бы одна не цифра в строке
Функция ЕстьНеЦифрыВСтроке(Знач СтрокаПроверки)
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Ложь;
	
КонецФункции

//Функция для объекта редактирования определяет Российский это адрес или нет
Функция ОпределитьДляОбъектаРоссийскийАдрес(ОбъектРедактирования) Экспорт
	
	Если (НЕ ПустаяСтрока(ОбъектРедактирования.Поле1)) Тогда
		// если хотя бы один символ не цифра, то это точно не индекс
		МожетБытьИностарнныйАдрес = ЕстьНеЦифрыВСтроке(ОбъектРедактирования.Поле1);
		// так, если есть хоть одна не цифра - это иностранный адрес, а если все цивры то Российский
		Возврат НЕ МожетБытьИностарнныйАдрес;
	КонецЕсли;
	
	// Сравниваем представления
	ЭтоРоссийскийАдрес = (ПолучитьПредставлениеАдреса(ОбъектРедактирования) = ОбъектРедактирования.Представление);
	Возврат ЭтоРоссийскийАдрес;
		
КонецФункции

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставлениеТелефона(НаборПолей) Экспорт

	НаборПолей.Представление = НаборПолей.Поле1;
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле2)),(ПроверкаПустойСтроки(НаборПолей.Представление, Ложь)+"(" + НаборПолей.Поле2 + ")"),"");
	НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле3)),(ПроверкаПустойСтроки(НаборПолей.Представление, ПустаяСтрока(НаборПолей.Поле2)) + НаборПолей.Поле3),"");
	Если НЕ ПустаяСтрока(НаборПолей.Представление) Тогда
		НаборПолей.Представление = НаборПолей.Представление + ?((Не ПустаяСтрока(НаборПолей.Поле4)),(ПроверкаПустойСтроки(НаборПолей.Представление) + "доб. " + НаборПолей.Поле4),"");
	Иначе
		НаборПолей.Представление = НаборПолей.Поле4;
	КонецЕсли; 

КонецПроцедуры // СформироватьПредставление()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТОБРАЖЕНИЯ КИ В ФОРМАХ ОБЪЕКТОВ

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура ЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Отказ) Экспорт

	ТаблицаНабора = НаборЗаписей.Выгрузить();
	
	Индекс = 0;
	Пока Индекс < НаборЗаписей.Количество() Цикл
		Запись = НаборЗаписей[Индекс];
		Если НЕ ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		Запись.Объект = Ссылка;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
		НаборЗаписей.Загрузить(ТаблицаНабора);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
//	ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка)
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция ВидОбъектаКИ(ОбъектСсылка) Экспорт

	Если ОбъектСсылка = Неопределено Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Подразделения") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации; //Подразделения;
	Иначе
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезаную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

КонецФункции

// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция ПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется допонение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классфикатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция ПолучитьНазвание(АдресныйЭлемент) Экспорт

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Функция формирует строку с полным названием адресного элемента,
// которое состоит из наименования и сокращения самого адресного
// элемента и его "родителей"
//
// Параметры:
//  КодЭлемента - Код адресного элемента.
//
// Возвращаемое значение:
//  Название адресного элемента и его родителей через запятую
//
Функция ПолучитьПолноеНазвание(Знач КодЭлемента, НачальныйУровеньДетализации = 1, КонечныйУровеньДетализации = 6) Экспорт
	
	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;

	РазложитькодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);
	
	Название = "";
	НовыйКод = 0;

	Если (КодРегиона > 0) Тогда
		НовыйКод = КодРегиона * МаскаРегиона();
		Если (1 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 1) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодРайона > 0) Тогда
		НовыйКод = НовыйКод + КодРайона * МаскаРайона();
		Если (2 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 2) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодГорода > 0) Тогда
		НовыйКод = НовыйКод + КодГорода * МаскаГорода();
		Если (3 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 3) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодНаселенногоПункта > 0) Тогда
		НовыйКод = НовыйКод + КодНаселенногоПункта * МаскаНасПункта();
		Если (4 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 4) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодУлицы > 0) Тогда
		НовыйКод = НовыйКод + КодУлицы * МаскаУлицы();
		Если (5 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 5) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если (КодДома > 0) Тогда
		НовыйКод = НовыйКод + КодДома * МаскаДома();
		Если (6 >= НачальныйУровеньДетализации) и (КонечныйУровеньДетализации >= 6) Тогда
			Название = Название + ", " + ПолучитьНазвание(ПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
		КонецЕсли;
	КонецЕсли;

	Если СтрДлина(Название) > 2 Тогда
		Название = Сред(Название, 3);
	КонецЕсли;

	Возврат Название;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат МаскаДома();

	Иначе
		Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента) Экспорт
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 1;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 100 Тогда // населнныйп ункт 12 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 6;
		
	Иначе // квартира
		Возврат 7;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт

	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде",
		                         Выборка.Код,
		                         Выборка.Наименование,
		                         Выборка.Сокращение,
		                         Выборка.ТипАдресногоЭлемента,
		                         Выборка.Индекс,
		                         Выборка.КодРегионаВКоде,
		                         Выборка.КодРайонаВКоде,
		                         Выборка.КодГородаВКоде,
		                         Выборка.КодНаселенногоПунктаВКоде,
		                         Выборка.КодУлицыВКоде);

	Иначе 
		Возврат ПолучитьПустуюСтруктуруАдреса();
		
	КонецЕсли;
	
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  АдресныйЭлемент - элемент справочника "Адресный классификатор"
// для которого необходимо получить маску.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаску(АдресныйЭлемент) Экспорт

	Возврат ПолучитьМаскуПоТипу(АдресныйЭлемент.ТипАдресногоЭлемента);

КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Струтктура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
	
КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал) Экспорт

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ТолькоЧисло(Номер) Тогда
		Возврат СтрЗаменить("" + Номер, " ", "") = СтрЗаменить("" + Интервал, " ", "");
	КонецЕсли;

	Номер = Число(Номер);

	Если ТолькоЧисло(Интервал) Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧисло(Интервал) Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = Число(Лев(Интервал, Позиция - 1));
		МаксЗначение = Число(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	Иначе
		Если ТолькоЧисло(Интервал) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал) Экспорт
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Маска  СС РРР ГГГ ППП УУУУ ДДДД КККК АА
//
//        СС   - код региона
//        РРР  - код района
//        ГГГ  - код города
//        ППП  - код населенного пункта
//        УУУУ - код улицы
//        ДДДД - код дома
//        КККК - код квартиры
//        АА   - код актуальности

Функция МаскаРегиона() Экспорт
	Возврат 100000000000000000000000;
КонецФункции

Функция МаскаРайона() Экспорт
	Возврат 100000000000000000000;
КонецФункции

Функция МаскаГорода() Экспорт
	Возврат 100000000000000000;
КонецФункции

Функция МаскаНасПункта() Экспорт
	Возврат 100000000000000;
КонецФункции

Функция МаскаУлицы() Экспорт
	Возврат 10000000000;
КонецФункции

Функция МаскаДома() Экспорт
	Возврат 1000000;
КонецФункции

Функция МаскаКвартиры() Экспорт
	Возврат 100;
КонецФункции

Функция ТолькоЧисло(ИспытуемаяСтрока)

	Попытка Временно = Число(ИспытуемаяСтрока);
	Исключение Возврат Ложь;
	КонецПопытки;

	Возврат Строка(Число(ИспытуемаяСтрока)) = ИспытуемаяСтрока;

КонецФункции

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, Знач ДатаПериода=Неопределено, ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено, Подразделение=Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДатаПериода) Тогда
		ДатаПериода=ТекущаяДата();
	КонецЕсли;

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, ФактическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮрФизЛицо);
		Сведения.Вставить("полноеНаименование", ЮрФизЛицо);
		Возврат Сведения;
	КонецЕсли;

	Если БанковскийСчет = Неопределено ИЛИ БанковскийСчет.Пустая() Тогда
		ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
	Иначе
		ТекБанковскийСчет = БанковскийСчет;
	КонецЕсли;

	// Выберем основные сведения о контрагенте и банковском счете
	Если ТекБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		ИмяРеквизитаБанка = "Банк";
	Иначе
		ИмяРеквизитаБанка = "БанкДляРасчетов";
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);

		Запрос.Текст="
		|ВЫБРАТЬ
		|	Организации.Представление      КАК Наименование,
		|	Организации.НаименованиеПолное КАК ПолноеНаименование,
		|	Организации.ИНН                КАК ИНН,
		|	Организации.КПП                КАК КПП,
		|	Организации.КодПоОКПО          КАК КодПоОКПО,";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	""""                           КАК НомерСчета,
		|	""""                           КАК Банк,
		|	""""                           КАК БИК,
		|	""""                           КАК КоррСчет,
		|	""""                           КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК БИК,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации,
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
	КонецЕсли;

	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
		Сведения.Вставить("КПП",       Данные.КПП);
		Сведения.Вставить("Свидетельство",	"");
	Иначе
		Сведения.Вставить("КодПоОКПО", "");
		Сведения.Вставить("КПП",       "");
		Если ИмяСправочника = "Организации" Тогда
			Сведения.Вставить("Свидетельство", "свидетельство " + Данные.СвидетельствоСерияНомер + " от " + Формат(Данные.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
	КонецЕсли;

	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",    Данные.Наименование);
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         ПолучитьТелефон(ЮрФизЛицо));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		
		ОбъектАдреса=ЮрФизЛицо;
		Если Подразделение<>Неопределено Тогда
			Если Подразделение.Обособленное Тогда
				ОбъектАдреса=Подразделение;
			КонецЕсли;
		КонецЕсли;

		Сведения.Вставить("ЮридическийАдрес", ПолучитьАдрес(ОбъектАдреса, "Юридический", "Представление"));
		Сведения.Вставить("ФактическийАдрес", ПолучитьАдрес(ОбъектАдреса, "Фактический", "Представление"));

		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции

Функция ПолучитьАдрес(Объект, ТипАдреса="", стрАтрибут="") Экспорт

	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда Возврат ""; КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации" ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Подразделения") Тогда	
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Окончание = "ФизЛица";
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Поле1 Как Индекс,
	|	КонтактнаяИнформация.Поле2 Как Регион,
	|	КонтактнаяИнформация.Поле3 Как Район,
	|	КонтактнаяИнформация.Поле4 Как Город,
	|	КонтактнаяИнформация.Поле5 Как НаселенныйПункт,
	|	КонтактнаяИнформация.Поле6 Как Улица,
	|	КонтактнаяИнформация.Поле7 Как Дом,
	|	КонтактнаяИнформация.Поле8 Как Корпус,
	|	КонтактнаяИнформация.Поле9 Как Квартира,
	|	КонтактнаяИнформация.РегионСокращение Как РегионСокращение,
	|	КонтактнаяИнформация.РайонСокращение Как РайонСокращение,
	|	КонтактнаяИнформация.ГородСокращение Как ГородСокращение,
	|	КонтактнаяИнформация.НаселенныйПунктСокращение Как НаселенныйПунктСокращение,
	|	КонтактнаяИнформация.УлицаСокращение Как УлицаСокращение,
	|	КонтактнаяИнформация.ТипДома,
	|	КонтактнаяИнформация.ТипКорпуса,
	|	КонтактнаяИнформация.ТипКвартиры,
	|	КонтактнаяИнформация.Страна
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип  = &Тип
	|	И КонтактнаяИнформация.Вид  = &Вид
	|";	
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка[стрАтрибут], "");
КонецФункции

Функция ПолучитьТелефон(Объект) Экспорт
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.Подразделения") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Окончание = "ФизЛицаДомашний";
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации["Телефон"+Окончание].ПолучитьОбъект().Ссылка); //Вид телефона
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип  = &Тип
	|	И КонтактнаяИнформация.Вид  = &Вид
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Представление, "");
КонецФункции

Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а=1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли; 
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер = "";
	НомерЦифры = 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ - СТАНДАРТНЫЕ ОБРАБОТЧИКИ ПРИ РАБОТЕ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция возвращает имя адресноно элемента определенного уровня по коду
Функция ПолучитьИмяАдресногоЭлементаПоКоду(КодЭлемента, ТипАдресногоЭлемента) Экспорт
	
	ИмяАдресногоЭлемента = "";
	// сначала по коду определим уровень элемента, если не совпадет с требуемым, то к БД не обращаемся
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлемента);
	Если  ТипЭлемента <> ТипАдресногоЭлемента Тогда
		Возврат ИмяАдресногоЭлемента;
	КонецЕсли;
	
	АдресныйЭлемент = ПолучитьСтруктуруАдресногоЭлемента(КодЭлемента);
	Если АдресныйЭлемент.ТипАдресногоЭлемента = ТипАдресногоЭлемента Тогда
		ИмяАдресногоЭлемента = ПолучитьНазвание(АдресныйЭлемент);
	КонецЕсли;
	
	Возврат ИмяАдресногоЭлемента;
	
КонецФункции

// Процедура по коду адресноно элемента возвращает строковые представления его иерерхии
Процедура ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Улица, Дом) Экспорт
	
	Элемент = ПолучитьСтруктуруАдресногоЭлемента(КодАдресногоЭлемента);
	
	Если Элемент.ТипАдресногоЭлемента >= 6 Тогда
		Дом = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаДома(), 6);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 5 Тогда
		Улица = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаУлицы(), 5);
	КонецЕсли;
	
	Если Элемент.ТипАдресногоЭлемента >= 4 Тогда
		НаселенныйПункт = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаНасПункта(), 4);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 3 Тогда
		Город = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаГорода(), 3);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 2 Тогда    
		Район = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРайона(), 2);
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента >= 1 Тогда
		Регион = ПолучитьИмяАдресногоЭлементаПоКоду(КодАдресногоЭлемента - КодАдресногоЭлемента%МаскаРегиона(), 1);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();
	АдресноеСокращение = "";

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

	
КонецФункции

// Процедура раскладывает код адресного элемента на составляющие:
// Код Региона, код района, код города, код населенного пункта, код улицы и код дома
Процедура РазложитькодАдресногоЭлементаНаСоставляющие(Знач Код, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома)
	
	КодЭлемента = Код;
	
	КодРегиона = Цел(КодЭлемента / МаскаРегиона());
	КодЭлемента = КодЭлемента % МаскаРегиона();

	КодРайона = Цел(КодЭлемента / МаскаРайона());
	КодЭлемента = КодЭлемента % МаскаРайона();

	КодГорода = Цел(КодЭлемента / МаскаГорода());
	КодЭлемента = КодЭлемента % МаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / МаскаНасПункта());
	КодЭлемента = КодЭлемента % МаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / МаскаУлицы());
	КодЭлемента = КодЭлемента % МаскаУлицы();

	КодДома = Цел(КодЭлемента / МаскаДома());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Функция выполняет "преобразование" строкового представления адреса в структуру
Функция ПолучитьСтруктуруАдресаИзСтроки(Знач СтроковыйАдрес) Экспорт
	Если ПустаяСтрока(СтроковыйАдрес) Тогда Возврат Неопределено; КонецЕсли;

	ЧислоВхожденийЗапятойВАдрес = СтрЧислоВхождений(СтроковыйАдрес, ","); 
	
	Если ЧислоВхожденийЗапятойВАдрес = 9 Тогда		
		СтруктураАдреса = КонтактнаяИнформацияСервер.РазложитьАдрес(СтроковыйАдрес);
		
	ИначеЕсли ЧислоВхожденийЗапятойВАдрес >= 1 Тогда		
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);
		СтруктураАдреса.Вставить("Страна", СокрЛП(Лев(СтроковыйАдрес, Найти(СтроковыйАдрес, ",") - 1)));
		СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);		
	Иначе
		// вообще запятых нет в представлении два варианта,
		// либо задана только страна, но не Россия
		// либо необычный Российский Адрес
		
		КлассификаторСтраны = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(ВРег(СтроковыйАдрес), Истина);
		СтруктураАдреса = Новый Структура;	
		СтруктураАдреса.Вставить("ЗаПределамиРФ", Истина);

		Если НЕ ЗначениеЗаполнено(КлассификаторСтраны) Тогда
			// необычный российский адрес
			СтруктураАдреса.Вставить("Страна", Справочники.КлассификаторСтранМира.Россия.Наименование);
			СтруктураАдреса.Вставить("Представление", СтроковыйАдрес);
		Иначе
			СтруктураАдреса.Вставить("Страна", СтроковыйАдрес);
			СтруктураАдреса.Вставить("Представление", "");
		КонецЕсли;		
	КонецЕсли;
		
	Возврат СтруктураАдреса;	
КонецФункции

// Процедура формирует представление для Адреса за пределами РФ
Функция СформироватьПредставлениеАдресаЗаПределамиРФ(Страна, Представление) Экспорт

	ТекущееПредставлениеАдреса = Представление;	
	
	Если ЗначениеЗаполнено(Страна) И Страна <> Справочники.КлассификаторСтранМира.Россия.Наименование Тогда
			
		ПозицияСтраныВАдресе = Найти(Врег(Представление), Врег(Страна));
		// добавляем страну в самое начало представления, если ее там еще нет
		Если ПозицияСтраныВАдресе <> 1 Тогда
			ТекущееПредставлениеАдреса = Страна + ?(ЗначениеЗаполнено(Представление), (", " + Представление), "");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущееПредставлениеАдреса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЙ
//

//Собирает из элементов структуры адреса строку записи адреса в формате 9 запятых
Функция СобратьАдрес(Знач СтруктураАдрес) Экспорт

	Возврат ""+ СтруктураАдрес.Страна + "," + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.Регион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселенныйПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Квартира

КонецФункции	 

//Возвращает строковое представление места рождения
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);

    Если СтруктураМестоРождения.Особое = 1 Тогда
	
		Представление	=	"особое" +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Иначе
	
		Представление	= "," + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		",",	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	",",	", " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	",",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	",",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		//Если Лев(Представление, 1) = ","  Тогда
		//	Представление = Сред(Представление, 2)
		//КонецЕсли;
			
	КонецЕсли; 

	Возврат Представление;
КонецФункции	 

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";
	
	ТипДома ="";
	ТипКорпуса ="";
	ТипКвартиры ="";


	МассивАдрес	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;
	
	//Расширенное представление
	Если ЭлементовВМассиве	>	10	тогда
		ТипДома	    = СокрЛП(МассивАдрес[10]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	11	тогда
		ТипКорпуса	= СокрЛП(МассивАдрес[11]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	12	тогда
		ТипКвартиры = СокрЛП(МассивАдрес[12]);
	КонецЕсли;


	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);
	СтруктураВозврата.Вставить("ТипДома",ТипДома);
	СтруктураВозврата.Вставить("ТипКорпуса",ТипКорпуса);
	СтруктураВозврата.Вставить("ТипКвартиры",ТипКвартиры);

	Возврат СтруктураВозврата;
	
КонецФункции	 

//Функция раскладывает строку с данными о месте рождения на элементы структуры
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	Особое=0; НаселенныйПункт=""; Район=""; Область=""; Страна="";
	МассивМестоРождения	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве	>	0	тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" тогда
			Особое	=	1;
		КонецЕсли;	 
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Район	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Область	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Страна	=	СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции	 
