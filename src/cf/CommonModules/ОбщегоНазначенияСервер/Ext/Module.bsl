Функция ЕстьПравоДоступа(стрПраво="МонопольныйРежим") Экспорт
	Возврат ПравоДоступа(стрПраво, Метаданные);
КонецФункции

Функция ЭтоСсылка(Тип) Экспорт	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	Возврат ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита)[ИмяРеквизита];	
КонецФункции 

Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	Если ТипЗнч(Реквизиты)=Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда Возврат Новый Структура; КонецЕсли;
		СтруктураРеквизитов=Новый Структура(Реквизиты);
		
	ИначеЕсли ТипЗнч(Реквизиты)=Тип("Структура") ИЛИ ТипЗнч(Реквизиты)=Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов=Реквизиты;

	ИначеЕсли ТипЗнч(Реквизиты)=Тип("Массив") ИЛИ ТипЗнч(Реквизиты)=Тип("ФиксированныйМассив") Тогда
		СтруктураРеквизитов=Новый Структура;
		Для каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;

	ТекстПолей="";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля=?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним=СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей=ТекстПолей+?(ПустаяСтрока(ТекстПолей), "", ",")+"
		|"+ИмяПоля+" КАК "+Псевдоним;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|"+ТекстПолей+"
	|ИЗ
	|	"+Ссылка.Метаданные().ПолноеИмя()+" КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат=Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции

Функция СсылкаИзНавигационнойСсылки(НавигационнаяСсылка) Экспорт
    ПерваяТочка=Найти(НавигационнаяСсылка, "e1cib/data/");
	Если ПерваяТочка=0 Тогда Возврат Неопределено; КонецЕсли; 
	
    ВтораяТочка=Найти(НавигационнаяСсылка, "?ref=");
	Если ВтораяТочка=0 Тогда Возврат Неопределено; КонецЕсли; 

    ПредставлениеТипа=Сред(НавигационнаяСсылка, ПерваяТочка+11, ВтораяТочка-ПерваяТочка-11);
    ШаблонЗначения=ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа+".ПустаяСсылка"));
    ЗначениеСсылки=СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка+5));

	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
КонецФункции
 
Функция ПроверкаРасширения(Имя) Экспорт
	МассивРасширений=РасширенияКонфигурации.Получить(Новый Структура("Имя", Имя));
	Возврат ?(МассивРасширений.Количество()=0, Ложь, МассивРасширений[0].Активно);
КонецФункции

Функция ПараметрыУчетнойПолитики(Организация, МоментВремени=Неопределено, Отказ=Ложь) Экспорт
	СтруктураУчетнойПолитики=Новый Структура;
	Для каждого мдРесурсы Из Метаданные.РегистрыСведений.УчетнаяПолитика.Ресурсы Цикл
		Значение="";
		Если мдРесурсы.Тип=Новый ОписаниеТипов("Булево") Тогда
			Значение=Ложь;
		ИначеЕсли мдРесурсы.Тип=Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
			Значение=Дата('00010101');
		КонецЕсли;
		СтруктураУчетнойПолитики.Вставить(мдРесурсы.Имя, Значение);
	КонецЦикла;

	СтруктураУчетнойПолитики.Вставить("СпособОценкиМПЗ", Перечисления.СпособыОценки.ФИФО);
	СтруктураУчетнойПолитики.Вставить("СложныйУчетНДСНал", Ложь);
	СтруктураУчетнойПолитики.Вставить("МоментОпределенияНалоговойБазыНДСБух", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);

	Если ТипЗнч(МоментВремени)=Тип("Дата") Тогда
		НаДату=МоментВремени;
	Иначе
		НаДату=?(ЗначениеЗаполнено(МоментВремени), МоментВремени.Дата, ТекущаяДата());
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НаДату) Тогда НаДату=ТекущаяДата(); КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("Организация", ?(Организация=Неопределено, Справочники.Организации.ПустаяСсылка(), Организация));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&НаДату, Организация=&Организация) КАК УчетнаяПолитика
	|";
	тзУчетнаяПолитика=Запрос.Выполнить().Выгрузить();

	Если тзУчетнаяПолитика.Количество()=0 Тогда
		Отказ=Истина; Возврат СтруктураУчетнойПолитики;
	КонецЕсли;

	СтрокаУчетнойПолитики=тзУчетнаяПолитика[0];
	Для Каждого Колонка Из тзУчетнаяПолитика.Колонки Цикл
		СтруктураУчетнойПолитики.Вставить(Колонка.Имя, СтрокаУчетнойПолитики[Колонка.Имя]);
	КонецЦикла;

	//Переопределим значения для упр. учета
	Если Организация=Неопределено Тогда
		СтруктураУчетнойПолитики.Вставить("ОрганизацияПрименяетУСН", (Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.УпрощеннаяСистемаНалогообложения));
	Иначе
		СтруктураУчетнойПолитики.Вставить("ОрганизацияПрименяетУСН", СтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	КонецЕсли;
	СтруктураУчетнойПолитики.МоментОпределенияНалоговойБазыНДСБух=СтруктураУчетнойПолитики.МоментОпределенияНалоговойБазыНДС;
	СтруктураУчетнойПолитики.СложныйУчетНДСНал=СтруктураУчетнойПолитики.СложныйУчетНДС;

	СтруктураУчетнойПолитики.Вставить("УСН", СтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	Если СтруктураУчетнойПолитики.Свойство("МоментОпределенияНалоговойБазыНДС") и СтруктураУчетнойПолитики.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
		СтруктураУчетнойПолитики.Вставить("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	КонецЕсли;	

	Возврат СтруктураУчетнойПолитики;	
КонецФункции

Функция СуществуетМодуль(Имя) Экспорт
	Возврат НЕ Метаданные.ОбщиеМодули.Найти(Имя)=Неопределено;	
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль=Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.
		
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Модуль)=Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;

	Возврат Модуль;	
КонецФункции

Функция СерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект метаданных ""%1"" не найден,
			|либо для него не поддерживается получение модуля менеджера.'"), Имя);
	КонецЕсли;
	
	Модуль=Вычислить(Имя); // ВычислитьВБезопасномРежиме не требуется, т.к. проверка надежная.

	Возврат Модуль;
КонецФункции

Функция НомерНаПечать(Документ, МассивПрефиксов=Неопределено) Экспорт
	Если Документ=Неопределено Тогда Возврат 0; КонецЕсли;

	Префикс=УправлениеПрефиксамиСервер.Сформировать(Документ, "");
	Возврат стрЗаменить(СокрЛП(Документ.Номер), Префикс, "");
КонецФункции

Функция ОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт
	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);
КонецФункции

Функция ИмяПеречисленияПоЗначению(Значение) Экспорт
	ИмяПеречисления=Значение.Метаданные().Имя;
	Возврат СокрЛП(Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Перечисления[ИмяПеречисления].Индекс(Значение)].Имя);
КонецФункции

Процедура ПереключитьРежимВариантаМасштаба() Экспорт
	НастройкиКлиентскогоПриложения=ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Если НастройкиКлиентскогоПриложения=Неопределено Тогда
		НастройкиКлиентскогоПриложения=Новый НастройкиКлиентскогоПриложения;		
	КонецЕсли;
	Если НастройкиКлиентскогоПриложения.ВариантМасштабаФормКлиентскогоПриложения=ВариантМасштабаФормКлиентскогоПриложения.Компактный Тогда
		НастройкиКлиентскогоПриложения.ВариантМасштабаФормКлиентскогоПриложения=ВариантМасштабаФормКлиентскогоПриложения.Обычный;
	Иначе
		НастройкиКлиентскогоПриложения.ВариантМасштабаФормКлиентскогоПриложения=ВариантМасштабаФормКлиентскогоПриложения.Компактный;
	КонецЕсли;
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", НастройкиКлиентскогоПриложения);
КонецПроцедуры

// Возвращает имя объекта метаданных по типу.
//
// Параметры:
//  Источник - Тип - объект.
// 
// Возвращаемое значение:
//   Строка.
Функция ИмяОбъектаМетаданных(Тип) Экспорт
	ОбъектМетаданных=Метаданные.НайтиПоТипу(Тип);
	Возврат ?(ОбъектМетаданных=Неопределено, Неопределено, ОбъектМетаданных.Имя);
КонецФункции


