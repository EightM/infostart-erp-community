Процедура УстановитьПараметрыПериода(КомпоновщикНастроек, ДатаНачала, ДатаКонца, ИспользоватьГриницу=Истина) Экспорт
	//Установим параметр "Дата начала"
	Параметр=КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если НЕ Параметр=Неопределено Тогда
		Параметр.Значение=НачалоДня(ДатаНачала);
		Параметр.Использование=Истина;
	КонецЕсли;

	//Установим параметр "Дата конца"
	Параметр=КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если НЕ Параметр=Неопределено Тогда
		Если ИспользоватьГриницу Тогда
			Параметр.Значение=Новый Граница(КонецДня(ДатаКонца), ВидГраницы.Включая);
		Иначе
			Параметр.Значение=КонецДня(ДатаКонца);
		КонецЕсли;
		Параметр.Использование=Истина;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьОтбор_ИсключениеСчетовИзОтчетов(КомпоновщикНастроек, Организация) Экспорт
	//Отбор по счету (по регистру правил)
	////СтруктураПараметров=Новый Структура;
	////СтруктураПараметров.Вставить("Организация", Организация);
	////СтруктураПараметров.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
	////Справочники.рпХранилищеПравил.ВыполнитьПравило_ИсключениеСчетовИзОтчетов(СтруктураПараметров);
	////Если НЕ ЗначениеЗаполнено(СтруктураПараметров.РезультатПравила) Тогда Возврат; КонецЕсли;
	
	////Атрибут=УправлениеДополнительнымиАтрибутами.АтрибутВСтроку(Справочники.рпХранилищеПравил.ИсключениеСчетовИзОтчетов_Ресурсы_Счет);
	////Если НЕ СтруктураПараметров.РезультатПравила.Свойство(Атрибут) Тогда Возврат; КонецЕсли;
	
	//////спСчета=Новый СписокЗначений;

	//////стрСчетаИсключение=СтруктураПараметров.РезультатПравила[Атрибут];
	//////стрСчетаИсключение=стрЗаменить(стрСчетаИсключение, "\", Символы.ПС);
	//////Для ъ=1 По СтрЧислоСтрок(стрСчетаИсключение) Цикл
	//////	стрСчет=СокрЛП(СтрПолучитьСтроку(стрСчетаИсключение, ъ));
	//////	Счет=ПланыСчетов.Хозрасчетный.НайтиПоКоду(стрСчет);
	//////	Если НЕ Счет.Пустая() Тогда
	//////		спСчета.Добавить(Счет);
	//////	КонецЕсли;
	//////КонецЦикла;
	//////
	//////МассивВозможныхВидовСчетов=Новый Массив;
	//////МассивВозможныхВидовСчетов.Добавить("Счет");
	//////МассивВозможныхВидовСчетов.Добавить("СчетДт");
	//////МассивВозможныхВидовСчетов.Добавить("СчетКт");
	////////** МассивВозможныхВидовСчетов.Добавить("КорСчет");

	//////Для каждого стрВидСчета Из МассивВозможныхВидовСчетов Цикл
	//////	Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти(стрВидСчета)=Неопределено Тогда
	//////		Продолжить;
	//////	КонецЕсли;

	//////	ЭлементОтбора=Неопределено; стрПредставление="Счета исключения ("+стрВидСчета+")";
	//////	Для каждого СтрокаКоллекции Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
	//////		Если СтрокаКоллекции.Представление=стрПредставление Тогда
	//////			ЭлементОтбора=СтрокаКоллекции; Прервать;
	//////		КонецЕсли;
	//////	КонецЦикла;
	//////	
	//////	Если ЭлементОтбора=Неопределено Тогда
	//////		ЭлементОтбора=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//////		ЭлементОтбора.Представление=стрПредставление;
	//////		ЭлементОтбора.ЛевоеЗначение=Новый ПолеКомпоновкиДанных(стрВидСчета);
	//////	КонецЕсли;

	//////	ЭлементОтбора.Использование=Истина;
	//////	ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	//////	ЭлементОтбора.ПравоеЗначение=спСчета;
	//////КонецЦикла;
КонецПроцедуры