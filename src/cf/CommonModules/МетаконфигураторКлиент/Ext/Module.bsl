Функция ЗначениеРеквизита(Объект, стрПутьКДанным, стрКлюч="") Экспорт
	Если Объект.ДополнительныеРеквизиты.Количество()=0 Тогда Возврат Неопределено; КонецЕсли;

	МассивСтрок=стрРазделить(стрПутьКДанным, ".");

	стрВладелец=УправлениеКонфигурациейСервер.ТипОбъекта(Объект.Ссылка, 1, "_")+"_"+МассивСтрок[0];
	стрРеквизит=МассивСтрок[1];

	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", МетаконфигураторСервер.ВладелецПоСтроке(стрВладелец));
	СтруктураОтбора.Вставить("Реквизит", МетаконфигураторСервер.РеквизитПоСтроке(стрРеквизит));
	Если ЗначениеЗаполнено(стрКлюч) Тогда
		СтруктураОтбора.Вставить("Ключ", стрКлюч);
	КонецЕсли;	 
	МассивСтрок=Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество()=0 Тогда Возврат Неопределено; КонецЕсли;
		
	Возврат МассивСтрок[0].Значение;	
КонецФункции

Функция ПроизвольныйАлгоритм(СтруктураПараметров, стрТипСвойства="СобытияФормы", стрВидСвойства="ПриОткрытии")
	Попытка ПроизвольныеАлгоритмы=СтруктураПараметров.Форма.ПроизвольныеАлгоритмы;
	Исключение Возврат Неопределено;
	КонецПопытки;	
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат Неопределено; КонецЕсли; 
	Если НЕ ПроизвольныеАлгоритмы.Свойство(стрТипСвойства) Тогда Возврат Неопределено; КонецЕсли; 
	Если НЕ ПроизвольныеАлгоритмы[стрТипСвойства].Свойство(стрВидСвойства) Тогда Возврат Неопределено; КонецЕсли; 
	Возврат ПроизвольныеАлгоритмы[стрТипСвойства][стрВидСвойства];	
КонецФункции

Процедура ПриОткрытии(Отказ, СтруктураПараметров) Экспорт
	//*** МетаконфигураторСервер.ВыполнитьНастройкуФормы(СтруктураПараметров, "ПриОткрытии", Отказ);
	
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ПриОткрытии");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;
	
	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, СтруктураПараметров) Экспорт
	//*** СтруктураПараметров.Вставить("ЗавершениеРаботы", ЗавершениеРаботы);
	//*** СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	//*** МетаконфигураторСервер.ВыполнитьНастройкуФормы(СтруктураПараметров, "ПередЗакрытием", Отказ, СтандартнаяОбработка);
	
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ПередЗакрытием");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии(ЗавершениеРаботы, СтруктураПараметров) Экспорт
	//*** СтруктураПараметров.Вставить("ЗавершениеРаботы", ЗавершениеРаботы);
	//*** МетаконфигураторСервер.ВыполнитьНастройкуФормы(СтруктураПараметров, "ПриЗакрытии");

	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ПриЗакрытии");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, СтруктураПараметров) Экспорт
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ОбработкаВыбора");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник, СтруктураПараметров) Экспорт
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ОбработкаОповещения");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ОбработкаАктивизации(АктивныйОбъект, Источник, СтруктураПараметров) Экспорт
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ОбработкаАктивизации");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, СтруктураПараметров) Экспорт
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ОбработкаЗаписиНового");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, ПараметрыЗаписи, СтруктураПараметров) Экспорт
	//*** СтруктураПараметров.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	//*** МетаконфигураторСервер.ВыполнитьНастройкуФормы(СтруктураПараметров, "ПередЗаписью", Отказ);

	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ПередЗаписью");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ПослеЗаписи(ПараметрыЗаписи, СтруктураПараметров) Экспорт
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ПослеЗаписи");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные, СтруктураПараметров) Экспорт
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ВнешнееСобытие");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры

Процедура ВыборЗначения(СтандартнаяОбработка, СтруктураПараметров) Экспорт
	Алгоритм=ПроизвольныйАлгоритм(СтруктураПараметров, "СобытияФормы", "ВыборЗначения");
	Если Алгоритм=Неопределено Тогда Возврат; КонецЕсли; ПараметрыАлгоритма=Неопределено;

	стрАлгоритм=МетаконфигураторСервер.ОбработатьАлгоритм(Алгоритм, СтруктураПараметров.Форма.ИмяФормы, ПараметрыАлгоритма);
	Если НЕ ПустаяСтрока(стрАлгоритм) Тогда Выполнить(стрАлгоритм); КонецЕсли;
КонецПроцедуры