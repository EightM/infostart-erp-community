Функция ОпределитьТекущегоПользователя() Экспорт
	ИмяПользователя=ИмяПользователя();
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя="НеАвторизован";
		ПолноеИмяПользователя="Не авторизован";
	Иначе
		ПолноеИмяПользователя=ПолноеИмяПользователя();
		Если ПустаяСтрока(ПолноеИмяПользователя) Тогда
			ПолноеИмяПользователя=ИмяПользователя;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаКодаПользователя=Метаданные.Справочники.Пользователи.ДлинаКода;	
	Если СтрДлина(ИмяПользователя) > ДлинаКодаПользователя Тогда
		ИмяПользователя=Лев(ИмяПользователя, ДлинаКодаПользователя);
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Код", ИмяПользователя);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ Как ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(НЕ Пользователи.ЭтоГруппа) И Пользователи.Код = &Код
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбъектПользователь=Справочники.Пользователи.СоздатьЭлемент();
		ОбъектПользователь.Код=ИмяПользователя;
		ОбъектПользователь.Наименование=ПолноеИмяПользователя;
		ОбъектПользователь.ИдентификаторПользователяИБ=ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;

		Попытка
			ОбъектПользователь.Записать();
		Исключение
			Сообщить("Пользователь : "+ИмяПользователя+" не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник."+ОписаниеОшибки());
			Возврат Справочники.Пользователи.ПустаяСсылка();
		КонецПопытки;

		Возврат ОбъектПользователь.Ссылка;
	КонецЕсли; 

	Выборка=Результат.Выбрать();
	Выборка.Следующий();

	Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
		ОбъектПользователь=Выборка.Ссылка.ПолучитьОбъект();
		ОбъектПользователь.ДополнительныеСвойства.Вставить("ОтключитьРегистрыПравил");
		ОбъектПользователь.ИдентификаторПользователяИБ=ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		ОбъектПользователь.ОбменДанными.Загрузка=Истина;
		ОбъектПользователь.Записать();
	КонецЕсли; //2019
	
    Возврат Выборка.Ссылка;
КонецФункции

// Функция по имени ищет пользователя ИБ, если не находит - создает нового и его возвращает
//
// Параметры:
//  ИмяПользователя                 - строка по которой ищется пользователь ИБ
//  ПолноеИмяПользователя           - строка, при добавлении пользователя ИБ таким будет установлено полное имя пользователя
//  СообщатьОДобавленииПользователя - Булево, нужно ли сообщать о добавлении нового пользователя ИБ
//  ЗаписатьПользователяВИБ         - Нужно ли при добавлении пользователя записывать его
Функция НайтиПользователяИБ(ИмяПользователя) Экспорт
	Если ИмяПользователя="НеАвторизован" Тогда Возврат Неопределено; КонецЕсли;

	Попытка ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Исключение ПользовательИБ = Неопределено;
	КонецПопытки;		

	Возврат ПользовательИБ;
КонецФункции

////////////////////////////////////////////////////////////////
//Управление дополнительными настройками пользователя

Функция ПолучитьЗначениеПраваДляТекущегоПользователя(стрПраво, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Возврат ПараметрыСеанса.ДопПраваПользователя[стрПраво];	
КонецФункции

Функция ПолучитьЗначениеПоУмолчанию(стрНастройка, Пользователь=Неопределено) Экспорт
	Если ТипЗнч(стрНастройка)<>Тип("Строка") Тогда стрНастройка=Пользователь; КонецЕсли; //***
	Возврат ПараметрыСеанса.НастройкиПользователя[стрНастройка];
КонецФункции

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - признак, для которого записывается значение по умолчанию
//  Значение     - значение по умолчанию
//
Процедура УстановитьЗначениеПоУмолчанию(стрНастройка, Значение) Экспорт
	МенеджерЗаписи=РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Настройка = ПланыВидовХарактеристик.НастройкиПользователей[стрНастройка];
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

// Функция возвращает значение по умолчанию и значения реквизитов данного значения для передаваемого пользователя, настройки и списка реквизитов.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//  СписокПолей  - список значений, содержащий имена реквизитов значения настройки, которые необходимо получить
//
// Возвращаемое значение:
//  Элемент выборки запроса либо структура (в случае пустой выборки).
//
Функция ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(Настройка, СписокПолей) Экспорт
	НастройкаТипЗнч=ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения;
	НастройкаТипЗнчСправочник=Справочники.ТипВсеСсылки().СодержитТип(НастройкаТипЗнч.Типы()[0]);
	Если НастройкаТипЗнчСправочник Тогда
		МетаданныеТипаНастройки=Метаданные.НайтиПоТипу(НастройкаТипЗнч.Типы()[0]);
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Значение КАК Значение";
	
	Если СписокПолей <> Неопределено И НастройкаТипЗнчСправочник Тогда
		СправочникИмя = МетаданныеТипаНастройки.Имя;
		Для каждого Элемент из СписокПолей цикл
			ИмяРеквизита = Элемент.Значение;
			Представление = Элемент.Представление;
			Если ПустаяСтрока(Представление) Тогда
				Представление = ИмяРеквизита;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ",
			|ВЫРАЗИТЬ(Значение КАК Справочник." + СправочникИмя + ")." + ИмяРеквизита + "  КАК " + Представление;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"		
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь И Настройка = &Настройка
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если СписокПолей = Неопределено Тогда
		ПустоеЗначение = НастройкаТипЗнч.ПривестиЗначение();
	Иначе
		ПустоеЗначение = новый Структура("Значение", НастройкаТипЗнч.ПривестиЗначение());
		Для каждого ЭлементСписка из СписокПолей цикл
			ПустоеЗначение.Вставить(?(ПустаяСтрока(ЭлементСписка.Представление), ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЦикла;				
	КонецЕсли;
	
	Если Не Выборка.Следующий() Тогда Возврат ПустоеЗначение; КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда Возврат ПустоеЗначение; КонецЕсли;		
		
	Если НастройкаТипЗнчСправочник И ПараметрыДоступа("Чтение", МетаданныеТипаНастройки, "Ссылка").ОграничениеУсловием Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ Справочник." + МетаданныеТипаНастройки.Имя + " ГДЕ Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Выборка.Значение);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда Возврат ПустоеЗначение; КонецЕсли;
	КонецЕсли;		
	
	Если СписокПолей = Неопределено Тогда Возврат Выборка.Значение; КонецЕсли;	

	ЗаполнитьЗначенияСвойств(ПустоеЗначение, Выборка);

	Возврат ПустоеЗначение;	
КонецФункции

Функция ИндексПользователя(Иерархический, ТекущийПользователь, ВыборкаПользователь) Экспорт
	Если НЕ ЗначениеЗаполнено(ВыборкаПользователь) Тогда Возврат 0; КонецЕсли;
	Если Иерархический И ВыборкаПользователь.ЭтоГруппа И ТекущийПользователь.Пользователь.ПринадлежитЭлементу(ВыборкаПользователь) Тогда
		Возврат ВыборкаПользователь.Уровень();
	ИначеЕсли ВыборкаПользователь=ТекущийПользователь Тогда
		Возврат 1000;
	КонецЕсли;
	Возврат Неопределено; 
КонецФункции

////////////////////////////////////////////////////////////////
//Управление дополнительными правами пользователя

Функция РазрешитьПечатьНепроведенныхДокументов(Проведен = Истина) Экспорт
	Если Проведен Тогда Возврат Истина; КонецЕсли;
	Возврат УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("ПечатьНепроведенныхДокументов", Ложь);
КонецФункции

Функция РазрешитьНулевыеЦеныВРознице() Экспорт
	Возврат УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РазрешитьНулевыеЦеныВРознице", Ложь);
КонецФункции

Функция РазрешитьНазначениеРучныхСкидок(Пользователь = Неопределено) Экспорт
	Возврат УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РазрешитьНазначениеРучныхСкидок", Ложь);
КонецФункции //***

Функция РазрешитьНулевыеЦеныВОпте() Экспорт
	Возврат УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РазрешитьНулевыеЦеныВОпте", Ложь);
КонецФункции

Функция РазрешитьРедактированиеЦенВДокументах() Экспорт
	Возврат УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РедактированиеЦенВДокументах", Ложь);
КонецФункции

Функция ЗащитаТаблиц() Экспорт
	Возврат Не УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РедактированиеТаблиц", Ложь);
КонецФункции

Функция РассчитыватьДолгПриОткрытииФорм() Экспорт
	Возврат УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РассчитыватьДолгПриОткрытииФорм", Истина);
КонецФункции