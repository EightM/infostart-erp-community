Процедура УстановитьКартинкуСостоянияОбъекта(Форма, Объект, стрТип="Документ") Экспорт
	Элемент=Форма.Элементы.Найти(стрТип);
	Если Элемент=Неопределено Тогда Возврат; КонецЕсли;

	Если стрТип="Документ" Тогда
		Если Объект.Проведен Тогда
			Элемент.Картинка=БиблиотекаКартинок.ДокументПроведен;
		ИначеЕсли Объект.ПометкаУдаления Тогда
			Элемент.Картинка=БиблиотекаКартинок.ДокументПометкаУдаления;
		Иначе
			Элемент.Картинка=БиблиотекаКартинок.Документ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодключаемыеКомандыИнициализация(Форма)
	Массив=СтрРазделить(Форма.ИмяФормы, "."); стрТип=Массив[0]; стрВид=Массив[1];
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТипПараметраКоманды", УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(стрТип+"."+стрВид));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка.Код КАК ИмяКоманды,
	|	ИсточникДанных.Ссылка.Наименование КАК Заголовок,
	|	ИсточникДанных.Ссылка.ИмяОбщегоМодуля КАК ИмяОбщегоМодуля,
	|	ИсточникДанных.Ссылка.Подсказка КАК Подсказка,
	|	ИсточникДанных.Ссылка.ВидКнопки КАК ВидКнопки,
	|
	|	ИсточникДанных.Ссылка.Размещение КАК РазмещениеШапка,
	|
	|	ИсточникДанных.Ссылка.Клавиша КАК Клавиша,
	|	ИсточникДанных.Ссылка.Ctrl КАК Ctrl,
	|	ИсточникДанных.Ссылка.Alt КАК Alt,
	|	ИсточникДанных.Ссылка.Shift КАК Shift,
	|
	|	ИсточникДанных.Ссылка.Свойства КАК Свойства,
	|	ИсточникДанных.Ссылка.Картинка КАК Картинка,
	|
	|	ИсточникДанных.Ссылка.ДоступГруппыПользователей КАК ГруппыПользователей,
	|	ИсточникДанных.Ссылка.ДоступПользователи КАК Пользователи,
	|
	|	ИсточникДанных.Ссылка.Отображение КАК Отображение,
	|	ИсточникДанных.Ссылка КАК Ссылка,
	|	ИсточникДанных.Размещение КАК Размещение,
	|	ИсточникДанных.Ссылка.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ПодключаемыеКоманды.ТипыПараметра КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ТипПараметра В(&ТипПараметраКоманды)
	|	И ИсточникДанных.Ссылка.ПометкаУдаления = Ложь
	|	И ИсточникДанных.Ссылка.ЭтоГруппа = Ложь
	|";
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;

	ИспользоватьГруппыПользователей=Истина; ///ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	Если ИспользоватьГруппыПользователей Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Ссылка Как Ссылка
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Пользователь В(&Пользователь)
		|	И ИсточникДанных.Ссылка.ПометкаУдаления = Ложь
		|";
		МассивГруппПользователей=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		МассивГруппПользователей.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	КонецЕсли;

	Выборка=РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		тзПользователи=Выборка.Пользователи.Выгрузить();
		Если НЕ тзПользователи.Количество()=0 Тогда
			Пользователь1=НЕ тзПользователи.Найти(ПараметрыСеанса.ТекущийПользователь, "Пользователь")=Неопределено;	
		Иначе
			Пользователь1=Истина;
		КонецЕсли; 

		Если ИспользоватьГруппыПользователей Тогда
			тзГруппыПользователей=Выборка.ГруппыПользователей.Выгрузить();
			Если НЕ тзГруппыПользователей.Количество()=0 Тогда
				Пользователь2=Ложь;
				Для каждого СтрокаКоллекции Из тзГруппыПользователей Цикл
					РезультатПоиска=МассивГруппПользователей.Найти(СтрокаКоллекции.Пользователь);
					Если НЕ РезультатПоиска=Неопределено Тогда Пользователь2=Истина; Прервать; КонецЕсли;
				КонецЦикла;
			Иначе
				Пользователь2=Истина;
			КонецЕсли;
		Иначе
			Пользователь2=Истина;
		КонецЕсли;
		МожноДобавитьКоманду=Пользователь1 ИЛИ Пользователь2;
		Если Не МожноДобавитьКоманду Тогда Продолжить; КонецЕсли;

		стрРазмещение=?(ПустаяСтрока(Выборка.Размещение), Выборка.РазмещениеШапка, Выборка.Размещение);
		Если НЕ ПустаяСтрока(стрРазмещение) Тогда
			МассивРазмещениеКоманды=СтрРазделить(стрРазмещение, ",");
			Для каждого Размещение Из МассивРазмещениеКоманды Цикл
				РодительКоманды=Форма.Элементы.Найти(Выборка.Размещение);
				Если НЕ РодительКоманды=Неопределено Тогда Прервать; КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(РодительКоманды)=Тип("ТаблицаФормы") Тогда
			РодительКоманды=РодительКоманды.КоманднаяПанель;
		КонецЕсли;		
		Если РодительКоманды=Неопределено Тогда
			РодительКоманды=Форма; //Форма.Элементы.ФормаКоманднаяПанель; (ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения. )
		КонецЕсли;
		//ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения. 

		//Создаем команду
		НоваяКоманда=Форма.Команды.Добавить(Выборка.ИмяОбщегоМодуля+"_ВыполнитьКоманду_"+Выборка.ИмяКоманды);
		НоваяКоманда.Действие="ВыполнитьДействие";
		НоваяКоманда.Заголовок=Выборка.Заголовок;
		НоваяКоманда.Подсказка=Выборка.Подсказка;
		НоваяКоманда.СочетаниеКлавиш=Новый СочетаниеКлавиш(Клавиша[Выборка.Клавиша], Выборка.Alt, Выборка.Ctrl, Выборка.Shift);
		Если НЕ ПустаяСтрока(Выборка.Отображение) Тогда
			НоваяКоманда.Отображение=ОтображениеКнопки[СокрЛП(Выборка.Отображение)];	
		КонецЕсли;
		
		//Создаем элемент на форме связанный с командой
		НовыйЭлемент=Форма.Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), РодительКоманды);	
		НовыйЭлемент.Заголовок=Выборка.Заголовок;
		Если ТипЗнч(РодительКоманды)=Тип("КоманднаяПанельФормы") Тогда
			стрВидКнопки=?(Выборка.ВидКнопки=0, "КнопкаКоманднойПанели", "ГиперссылкаКоманднойПанели");
		Иначе
			стрВидКнопки=?(Выборка.ВидКнопки=0, "ОбычнаяКнопка", "Гиперссылка");
		КонецЕсли;
		НовыйЭлемент.Вид=ВидКнопкиФормы[стрВидКнопки];
		НовыйЭлемент.ИмяКоманды=НоваяКоманда.Имя;

		Если НЕ ПустаяСтрока(Выборка.Картинка) Тогда
			НовыйЭлемент.Картинка=БиблиотекаКартинок[Выборка.Картинка];
		КонецЕсли;			
		
		Выборка2=Выборка.Свойства.Выбрать();
		Пока Выборка2.Следующий() Цикл
			Значение=?(Выборка2.Значение=Неопределено, Выборка2.Хранилище.Получить(), Выборка2.Значение);
			Если ПустаяСтрока(Значение) Тогда Продолжить; КонецЕсли;
			Если Значение=0 Тогда Продолжить; КонецЕсли; 
			Если Выборка2.Идентификатор="ПоложениеКартинки" Тогда
				Значение=ПоложениеКартинкиКнопкиФормы[Значение];
			ИначеЕсли Выборка2.Идентификатор="ОтображениеФигуры" Тогда
				Значение=ОтображениеФигурыКнопки[Значение];
			ИначеЕсли Выборка2.Идентификатор="ОтображениеПодсказки" Тогда
				Значение=ОтображениеПодсказки[Значение];
			ИначеЕсли Выборка2.Идентификатор="Фигура" Тогда
				Значение=ФигураКнопки[Значение];
			ИначеЕсли Выборка2.Идентификатор="ГоризонтальноеПоложениеВГруппе" Тогда
				Значение=ГоризонтальноеПоложениеЭлемента[Значение];
			ИначеЕсли Выборка2.Идентификатор="ВертикальноеПоложениеВГруппе" Тогда
				Значение=ВертикальноеПоложениеЭлемента[Значение];
			КонецЕсли;
			НовыйЭлемент[Выборка2.Идентификатор]=Значение;
		КонецЦикла;
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// События формы

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Форма, Объект=Неопределено) Экспорт
	ПодключаемыеКомандыИнициализация(Форма);

	Если НЕ Объект=Неопределено Тогда		
		СтруктураОбъекта=УправлениеКонфигурациейСервер.СтруктураОбъекта(Форма.ИмяФормы);
		Если СтруктураОбъекта.Тип="Документ" Или СтруктураОбъекта.Тип="Справочник" Или СтруктураОбъекта.Тип="Задача" Тогда
			СтруктураОбъекта.Вставить("Форма", Форма);
			СтруктураОбъекта.Вставить("Объект", Объект);
			СтруктураОбъекта.Вставить("Отказ", Отказ);
			СтруктураОбъекта.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
			
			мдОбъект=Объект.Ссылка.Метаданные();
			
			СтруктураПараметровФО=Новый Структура;
			
			Если УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", мдОбъект) Тогда
				СтруктураПараметровФО.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			КонецЕсли;			
			Если УправлениеМетаданными.ЕстьРеквизит("Контрагент", мдОбъект) Тогда
				СтруктураПараметровФО.Вставить("Контрагент", Объект.Контрагент);				
			КонецЕсли;
			
			Если НЕ СтруктураПараметровФО.Количество()=0 Тогда
				Форма.УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметровФО);
			КонецЕсли; 

			Если Не ТипЗнч(Форма.ПроизвольныеАлгоритмы)=Тип("Структура") Тогда
				Форма.ПроизвольныеАлгоритмы=Новый Структура;

				ОбъектМетаданныхСсылка=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(СтруктураОбъекта.Тип+"."+СтруктураОбъекта.Вид);
				//	ОбъектМетаданныхСсылка=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(СтруктураОбъекта.Тип+"_"+СтруктураОбъекта.Вид);
				СтруктураНастроек=РегистрыСведений.НастройкиФормыОбъекта.НайтиНастройкиПоДействию(ОбъектМетаданныхСсылка, "ВыполняемыйМодуль");
				Если НЕ СтруктураНастроек.Количество()=0 Тогда
					Форма.ПроизвольныеАлгоритмы.Вставить("СобытияФормы", СтруктураНастроек);
				КонецЕсли;
				//////Настройки=МетаконфигураторСервер.НастройкиПоПравилам(СтруктураОбъекта.Тип+"_"+СтруктураОбъекта.Вид, "НастройкиФормыОбъекта");
				//////Если НЕ Настройки=Неопределено Тогда
				//////	Форма.ПроизвольныеАлгоритмы.Вставить("СобытияФормы", Настройки);
				//////КонецЕсли;
			КонецЕсли; 

			МетаконфигураторСервер.ДопРеквизиты_Инициализация(Форма, Объект);
			МетаконфигураторСервер.ПриСозданииНаСервере(Форма, Объект, СтруктураОбъекта);
			Отказ=СтруктураОбъекта.Отказ;
			СтандартнаяОбработка=СтруктураОбъекта.СтандартнаяОбработка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект, Форма, Объект) Экспорт
	СтруктураПараметров=УправлениеКонфигурациейСервер.СтруктураОбъекта(Форма.ИмяФормы);
	СтруктураПараметров.Вставить("Форма", Форма);
	СтруктураПараметров.Вставить("Объект", Объект);

	УстановитьКартинкуСостоянияОбъекта(Форма, Объект, СтруктураПараметров.Тип);

	Если Не ТипЗнч(Форма.ПроизвольныеАлгоритмы)=Тип("Структура") Тогда
		Форма.ПроизвольныеАлгоритмы=Новый Структура;

		ОбъектМетаданныхСсылка=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(СтруктураПараметров.Тип+"."+СтруктураПараметров.Вид);
		СтруктураНастроек=РегистрыСведений.НастройкиФормыОбъекта.НайтиНастройкиПоДействию(ОбъектМетаданныхСсылка, "ВыполняемыйМодуль");
		Если НЕ СтруктураНастроек.Количество()=0 Тогда
			Форма.ПроизвольныеАлгоритмы.Вставить("СобытияФормы", СтруктураНастроек);
		КонецЕсли;
		//Настройки=МетаконфигураторСервер.НастройкиПоПравилам(СтруктураПараметров.Тип+"_"+СтруктураПараметров.Вид, "НастройкиФормыОбъекта");
		//Если НЕ Настройки=Неопределено Тогда
		//	Форма.ПроизвольныеАлгоритмы.Вставить("СобытияФормы", Настройки);
		//КонецЕсли;
	КонецЕсли;

	МетаконфигураторСервер.ДопРеквизиты_ОбновлениеПредставления(Форма);
	МетаконфигураторСервер.ПриЧтенииНаСервере(Форма, ТекущийОбъект, СтруктураПараметров);	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма, Объект) Экспорт
	МетаконфигураторСервер.ДопРеквизиты_Записать(Отказ, ТекущийОбъект, Форма);

	Если УправлениеМетаданными.ЕстьРеквизит("Автор", ТекущийОбъект.Метаданные()) Тогда
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Автор) Тогда
			ТекущийОбъект.Автор=ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ПоследнийАвтор", ТекущийОбъект.Метаданные()) Тогда
		ТекущийОбъект.ПоследнийАвтор=ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	СтруктураПараметров.Вставить("Отказ", Отказ);
	МетаконфигураторСервер.ПередЗаписьюНаСервере(Форма, ТекущийОбъект, СтруктураПараметров);
	Отказ=СтруктураПараметров.Отказ;	
КонецПроцедуры

Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма, Объект) Экспорт
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	СтруктураПараметров.Вставить("Отказ", Отказ);
	МетаконфигураторСервер.ПриЗаписиНаСервере(Форма, ТекущийОбъект, СтруктураПараметров);
	Отказ=СтруктураПараметров.Отказ;
КонецПроцедуры
 
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, Форма, Объект) Экспорт
	МетаконфигураторСервер.ДопРеквизиты_ОбновлениеПредставления(Форма);
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	МетаконфигураторСервер.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, СтруктураПараметров);	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
		
	//ДокументОбъект=Форма.РеквизитФормыВЗначение("Объект");

	//СтруктураОбъекта=УправлениеКонфигурациейСервер.СтруктураОбъекта(Форма.ИмяФормы);
	//Если СтруктураОбъекта.Тип="Документ" Тогда
	//	ДокументОбъект.ДополнительныеСвойства.ИнтерактивноеПроведение=Истина;
	//КонецЕсли; 
	//
	//Форма.ЗначениеВРеквизитФормы("Объект", ДокументОбъект);

	//СтруктураПараметров=ПолучитьИзВременногоХранилища("e1cib/tempstorage/"+Строка(Форма.УникальныйИдентификатор));
	//Если СтруктураПараметров=Неопределено Тогда
	//	СтруктураПараметров=Новый Структура;
	//	СтруктураПараметров.Вставить("ИнтерактивноеПроведение", Истина);
	//	ПоместитьВоВременноеХранилище(СтруктураПараметров, Строка(Форма.УникальныйИдентификатор));
	//КонецЕсли;
КонецПроцедуры
