Процедура УдалитьПустыеЭлементы(Массив)
	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		Инд=0;
		Пока Инд<Массив.Количество() Цикл
			Если НЕ ЗначениеЗаполнено(Массив[Инд]) Тогда
				Массив.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьРеквизитыОбъекта(ДокументСсылка, СтруктураРеквизитов) Экспорт
	
	ТипДок = ТипЗнч(ДокументСсылка);

	МетаДок = Метаданные.НайтиПоТипу(ТипДок);
	Если МетаДок = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДок) Тогда
		НазваниеТаблицы = "Справочник."+МетаДок.Имя;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипДок) Тогда
		НазваниеТаблицы = "Документ."+МетаДок.Имя;
	Иначе
		Возврат;
	КонецЕсли;

	СтрРеквизиты="";
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		СтрРеквизиты=СтрРеквизиты+", "+Элемент.Ключ;
	КонецЦикла;
		
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	"+Сред(СтрРеквизиты, 2)+"
	|ИЗ
	|	"+НазваниеТаблицы+"
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого Элемент Из СтруктураРеквизитов Цикл
			СтруктураРеквизитов.Вставить(Элемент.Ключ, Выборка[Элемент.Ключ]);
		КонецЦикла
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОписаниеТиповЗаказ()
	МассивТипов=Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции 

// Преобразует код операции в направление списания
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации, СтатьяЗатрат = Неопределено) Экспорт
	
	КодыОпераций=Перечисления.КодыОперацийПартииТоваров;
	НаправлениеСписания="";
	
	Если КодОперации=КодыОпераций.Реализация 
		ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации=КодыОпераций.РеализацияРозница
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателя 
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателяТекущийМесяц Тогда
		
		НаправлениеСписания = "СебестоимостьПродаж";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаНаКомиссию Тогда

		НаправлениеСписания = "Переданные";

	ИначеЕсли КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации   = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации   = КодыОпераций.Комплектация Тогда

		НаправлениеСписания = "НаСкладах";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаЗатраты Тогда
		НаправлениеСписания = "Затраты";
	КонецЕсли;

	Возврат НаправлениеСписания;	
КонецФункции

Функция ПолучитьИсточникПоКодуОперации(КодОперации)
	КодыОпераций=Перечисления.КодыОперацийПартииТоваров;
	Если КодОперации=КодыОпераций.ВозвратОтКомиссионера ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия Тогда
		Возврат "Переданные";
	КонецЕсли;
	Возврат "НаСкладах";	
КонецФункции

Функция ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров) Экспорт
	Возврат СтруктураПараметров["ТаблицаДвижений"+ИмяРегистра].Добавить();
КонецФункции

// Создает наборы записей для заданных учетов.
//
Процедура СоздатьНаборыЗаписей(СтруктураПараметров, УчетНДС=Ложь) Экспорт
	СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахУпр",   РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеУпр",  РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияЗатратыУпр",                  РегистрыНакопления.Затраты.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияПродажи",       			    РегистрыНакопления.Продажи.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияРеализованныеТовары",			РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияУчетПотребностей",		    РегистрыНакопления.УчетПотребностей.СоздатьНаборЗаписей());
	
	Если УчетНДС Тогда
		СтруктураПараметров.Вставить("ДвиженияНДСПартииТоваров",            РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСКосвенныеРасходы",         РегистрыНакопления.НДСКосвенныеРасходы.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСПредъявленный",            РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСВключенныйВСтоимость",     РегистрыНакопления.НДСВключенныйВСтоимость.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСПредъявленныйРеализация0", РегистрыНакопления.НДСПредъявленныйРеализация0.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСНачисленный",				РегистрыНакопления.НДСНачисленный.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСРеализация0",				РегистрыНакопления.НДСРеализация0.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСРасчетыСПокупателями",		РегистрыНакопления.НДСРасчетыСПокупателями.СоздатьНаборЗаписей());
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.БлокироватьДляИзменения=Истина; //1.04.14

	СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Отбор.Регистратор.Установить(Регистратор);

	СтруктураПараметров.ДвиженияЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);

	СтруктураПараметров.ДвиженияПродажи.Отбор.Регистратор.Установить(Регистратор);

	// Для партий на складах
	СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахУпр", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.ВыгрузитьКолонки());
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ДокументОприходованияДата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СтоимостьПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютаДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КурсДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КратностьДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КоличествоПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3)); // Количество поступления - для комплектации
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КоличествоПоступлениеДоп", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3)); // Количество поступления (доп) - для комплектации
	
	// Для партий товаров переданных
	СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеУпр", СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.ВыгрузитьКолонки());
	
	// Служебные колонки
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ДокументОприходованияДата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СтоимостьПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютаДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КурсДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КратностьДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КоличествоПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3)); // Количество поступления - для комплектации
		
	СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыУпр", СтруктураПараметров.ДвиженияЗатратыУпр.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийПродажи", СтруктураПараметров.ДвиженияПродажи.ВыгрузитьКолонки());

	СтруктураПараметров.ДвиженияРеализованныеТовары.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.Вставить("ТаблицаДвиженийРеализованныеТовары", СтруктураПараметров.ДвиженияРеализованныеТовары.ВыгрузитьКолонки());

	СтруктураПараметров.Вставить("ТаблицаДвиженийУчетПотребностей", СтруктураПараметров.ДвиженияУчетПотребностей.ВыгрузитьКолонки());
	СтруктураПараметров.ДвиженияУчетПотребностей.Отбор.Регистратор.Установить(Регистратор);
КонецПроцедуры

Процедура ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	Если Не СтруктураПараметров.Свойство("ДвиженияНДСПартииТоваров") Тогда Возврат; КонецЕсли; //***

	СтруктураПараметров.ДвиженияНДСПартииТоваров.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияНДСПредъявленный.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияНДСНачисленный.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияНДСРеализация0.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияНДСРасчетыСПокупателями.Отбор.Регистратор.Установить(Регистратор);

	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСКосвенныеРасходы",         СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленный",            СтруктураПараметров.ДвиженияНДСПредъявленный.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСВключенныйВСтоимость",     СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленныйРеализация0", СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСНачисленный",              СтруктураПараметров.ДвиженияНДСНачисленный.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСРеализация0",              СтруктураПараметров.ДвиженияНДСРеализация0.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСРасчетыСПокупателями",     СтруктураПараметров.ДвиженияНДСРасчетыСПокупателями.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПартииТоваров", 		   СтруктураПараметров.ДвиженияНДСПартииТоваров.ВыгрузитьКолонки());
	СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("КодОперацииПартииТоваров",Новый ОписаниеТипов("ПеречислениеСсылка.КодыОперацийПартииТоваров"));	
КонецПроцедуры

// Подготавливает параметры, необходимые для работы с наборами записей для заданных учетов.
//
Процедура ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина) Экспорт
	СтруктураПараметров.Вставить("Период",      Период);
	СтруктураПараметров.Вставить("Регистратор", Регистратор);
	
	ПодготовитьНаборыЗаписейУпр (СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
КонецПроцедуры

Процедура ЗаписатьДвижения(СтруктураПараметров, ДвиженияРегистра, ТаблицаДвиженийРегистра) Экспорт
	Если ТаблицаДвиженийРегистра=Неопределено Или ТаблицаДвиженийРегистра.Количество()=0 Тогда Возврат; КонецЕсли;

	//**********************************10.2018 ДвиженияРегистра.Прочитать(); //19.01.2016
	//***ДвиженияРегистра.Прочитать();

	//Если СтруктураПараметров.Свойство("НеОчищатьРегистр_УчетПартийТМЦ") Тогда
	//	ДвиженияРегистра.Прочитать();
	//КонецЕсли; //19.01.2016

	Для Каждого СтрокаКоллекции Из ТаблицаДвиженийРегистра Цикл
		НоваяСтрока=ДвиженияРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Активность=Истина;
	КонецЦикла;
	ДвиженияРегистра.БлокироватьДляИзменения=Истина;
	//*** ДвиженияРегистра.Записывать=Истина;
	ДвиженияРегистра.Записать(Ложь);
	//*** ДвиженияРегистра.Записать(Истина);
КонецПроцедуры

Процедура ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания)
	УчитыватьНДС=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "УчитыватьНДС", Ложь);
	СуммаВключаетНДС=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СуммаВключаетНДС", Ложь);
	ВалютаДокумента=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ВалютаДокумента");

	СтруктураКурсаУпр=МодульВалютногоУчета.КурсВалюты(МодульВалютногоУчета.ПолучитьВалюту("Упр"), СтруктураПараметров.Дата);
	ВалютаРегламентированногоУчета=МодульВалютногоУчета.ПолучитьВалюту();
	КурсВалютыРегламентированногоУчета=СтруктураКурсаУпр.Курс;
	КратностьВалютыРегламентированногоУчета=СтруктураКурсаУпр.Кратность;

	тзДвижения=СтруктураПараметров.ТаблицаДвиженийПродажи;
	Для каждого СтрокаКоллекции Из тзДвижения Цикл
		СтрокаКоллекции.СтоимостьБезСкидок=СтрокаКоллекции.Цена*СтрокаКоллекции.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаКоллекции.СтоимостьБезСкидок = СтрокаКоллекции.СтоимостьБезСкидок + СтрокаКоллекции.НДС;
			//УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаКоллекции.СтоимостьБезСкидок, УчитыватьНДС, СуммаВключаетНДС, УчетНалоговСервер.СтавкаНДС(СтрокаКоллекции.СтавкаНДС));
		КонецЕсли;
		Если ВалютаДокумента=Неопределено Тогда Продолжить; КонецЕсли; 
		
		//СтрокаКоллекции.СтоимостьБезСкидок=Окр(СтрокаКоллекции.СтоимостьБезСкидок*СтруктураПараметров.КоэффициентПересчета, 2); //10.2018
		СтрокаКоллекции.СтоимостьБезСкидок=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаКоллекции.СтоимостьБезСкидок, 
											СтруктураПараметров.ВалютаДокумента, ВалютаРегламентированногоУчета,
											СтруктураПараметров.КурсВзаиморасчетов, КурсВалютыРегламентированногоУчета,
											СтруктураПараметров.КратностьВзаиморасчетов, КратностьВалютыРегламентированногоУчета);
	КонецЦикла;
	
	//доп.движения по регистру "Продажи"		
	тзДвиденияПродажиДоп=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "РегистрНакопления_Продажи");
	Если НЕ тзДвиденияПродажиДоп=Неопределено Тогда
		Для каждого СтрокаКоллекции Из тзДвиденияПродажиДоп Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Период=СтруктураПараметров.Период;
			НоваяСтрока.Регистратор=СтруктураПараметров.Ссылка;
			НоваяСтрока.Активность=Истина;
			Если НЕ СуммаВключаетНДС Тогда
				НоваяСтрока.Стоимость=НоваяСтрока.Стоимость+НоваяСтрока.НДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Константы.УчетПоСетевымКонтрагентам.Получить() Тогда
		КонтрагентПродажи=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Грузополучатель");
		Если ЗначениеЗаполнено(КонтрагентПродажи) Тогда тзДвижения.ЗаполнитьЗначения(КонтрагентПродажи, "Контрагент"); КонецЕсли;
		
		ДоговорКонтрагентаПродажи=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ДоговорГрузополучателя");
		Если ЗначениеЗаполнено(ДоговорКонтрагентаПродажи) Тогда	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагентаПродажи, "ДоговорКонтрагента"); КонецЕсли;
	КонецЕсли;

	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияПродажи, тзДвижения);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр, СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр, СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияЗатратыУпр, СтруктураПараметров.ТаблицаДвиженийЗатратыУпр);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияРеализованныеТовары, СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияУчетПотребностей, СтруктураПараметров.ТаблицаДвиженийУчетПотребностей);
КонецПроцедуры

Процедура ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания)
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияНДСПартииТоваров, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияНДСКосвенныеРасходы, СтруктураПараметров.ТаблицаДвиженийНДСКосвенныеРасходы);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияНДСПредъявленный, СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость, СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0, СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияНДСНачисленный, СтруктураПараметров.ТаблицаДвиженийНДСНачисленный);
	ЗаписатьДвижения(СтруктураПараметров, СтруктураПараметров.ДвиженияНДСРеализация0, СтруктураПараметров.ТаблицаДвиженийНДСРеализация0);
КонецПроцедуры

Процедура ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания) Экспорт
	ЗаписатьДвиженияДокументаУпр (СтруктураПараметров, ТаблицаСписания);
	ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания);
КонецПроцедуры

Функция ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента)
	КачествоНовый=Справочники.Качество.Новый;
	Если ЗначениеЗаполнено(СтрокаПартии.Качество) Тогда 
		Если  ЗначениеЗаполнено(СтрокаДокумента.Качество) Тогда
			Если СтрокаПартии.Качество<>СтрокаДокумента.Качество Тогда Возврат Ложь; КонецЕсли;
		Иначе
			Если СтрокаПартии.Качество <> КачествоНовый Тогда Возврат Ложь;	КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПроверитьПартиюНаСкладеУпр(СтрокаПартии, СтрокаДокумента, СтруктураПараметров)
	Если НЕ ПроверитьПартиюПоСтатусу(СтрокаПартии, СтрокаДокумента) Тогда Возврат Ложь; КонецЕсли;
	Возврат  ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента) И ПроверитьПартиюПоСкладу(СтрокаПартии, СтрокаДокумента, СтруктураПараметров);
КонецФункции

Функция ПроверитьПартиюПоСтатусу(СтрокаПартии, СтрокаДокумента)
	
	// Проверка выполняется, когда заданы условия проверки
	Если ЗначениеЗаполнено(СтрокаПартии.СтатусПартии) 
		И (ЗначениеЗаполнено(СтрокаДокумента.ДопустимыйСтатус1)
		ИЛИ ЗначениеЗаполнено(СтрокаДокумента.ДопустимыйСтатус2)
		ИЛИ ЗначениеЗаполнено(СтрокаДокумента.ДопустимыйСтатус3)) Тогда
		
		Если СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус1
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус2
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус3
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус4
			// Статус "По ордеру" списывается всегда
			И СтрокаПартии.СтатусПартии <> Перечисления.СтатусыПартийТоваров.ПоОрдеру Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьПартиюПоСкладу(СтрокаПартии, СтрокаДокумента, СтруктураПараметров)
	 // пустые склады могут остаться со времени, когда не было партионного учета по складам
	Если СтрокаПартии.Склад <> СтрокаДокумента.Склад И ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции //УДАЛИТЬ!!!

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЯ (КРЕДИТ)

Процедура ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
		
	СтруктураОтбора.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	
	Если РегистрУчета="НаСкладах" Тогда
		// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
		// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
		// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
		Если СписыватьПустыеСерии тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
		Иначе
			// Серии не отбираются при резервировании т.к. в заказах нет серий
			Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
				И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
				
				СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИмяРегистра(ВидРегистра, РегистрУчета, СтрокаДокумента)
	Если ВидРегистра="ПартииТоваров" Тогда
		ИмяРегистра=ВидРегистра+РегистрУчета+"Упр";
	Иначе
		ИмяРегистра=ВидРегистра+"Упр";
	КонецЕсли;

	Возврат ИмяРегистра;	
КонецФункции

Функция ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаДокумента, РегистрУчета)
	
	// Структура отбор строк партий
	СтруктураОтбора = Новый Структура;
	
	ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	
	МассивСтрок = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
	
	// Для регистров "ПартииТоваровНаСкладах"...
	// Если серия заполнена - попытаемся отобрать дополнительно пустые серии
	// Если серия в документе не заполнена - пустые серии уже отобраны
	// Для переданных товаров учет по сериям не ведется.
	Если РегистрУчета ="НаСкладах" тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры) тогда
			// Серии не отбираются при резервировании т.к. в заказах нет серий
			Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
			   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
				ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				МассивСтрокСПустымиСериями = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
				Для каждого Элемент из МассивСтрокСПустымиСериями Цикл
					МассивСтрок.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции

Процедура ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	Если РегистрУчета="НаСкладах" Тогда
		Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
		Движение.Склад 			        = СтрокаПартии.Склад;
		Движение.Качество  				= СтрокаПартии.Качество;
	Иначе // Если РегистрУчета="Переданные" Тогда
		Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
		Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
		Движение.СтатусПередачи			= СтрокаПартии.СтатусПередачи;
		Движение.СтатусПередачи			= СтрокаПартии.СтатусПередачи;
	КонецЕсли;

	Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования		= СтрокаПартии.ДокументОприходования;
	Движение.СтатусПартии		    	= СтрокаПартии.СтатусПартии;
	Движение.Подразделение	        	= СтрокаДокумента.Подразделение;
	Движение.НомерСтрокиТабличнойЧасти  = СтруктураПараметров.НомерСтрокиТабличнойЧасти;
	Движение.ВалютаДокумента 			= СтрокаДокумента.ВалютаДокумента;
	Движение.КурсДокумента 				= СтрокаДокумента.КурсДокумента;
	Движение.КратностьДокумента 		= СтрокаДокумента.КратностьДокумента;		
	Движение.СуммаВыручкиБУ     		= Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
	Движение.СуммаНДСВыручкиБУ  		= Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
	Движение.СуммаВыручки 				= Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
	Движение.КоличествоПоступление  	= Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);

	Если НЕ СтрокаДокумента.КоличествоПоступлениеДоп=0 Тогда
		Движение.КоличествоПоступлениеДоп=Окр(СтрокаДокумента.КоличествоПоступлениеДоп*КоэффПоступления, 3); //13.04.2017
		СтрокаДокумента.КоличествоПоступлениеДоп=СтрокаДокумента.КоличествоПоступлениеДоп-Движение.КоличествоПоступлениеДоп; //13.04.2017
	КонецЕсли;

	// Уменьшим сумму в исх. строке
	СтрокаДокумента.СуммаЗадолженностиБУ  = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
	СтрокаДокумента.СуммаНДС 			  = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
	СтрокаДокумента.СуммаЗадолженности 	  = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
	СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;		
КонецПроцедуры

Процедура ЗаполнитьСтоимостьПоСтрокеСписанияПартии(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, ИмяРегистра, ПостфикРесурса="УУ")
	Если ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда Возврат; КонецЕСли;
	
	ЗначениеЯчейкиДокумента=СтрокаДокумента["СтоимостьСписание"+ПостфикРесурса];
	Если НЕ ЗначениеЯчейкиДокумента=0 Тогда
		Движение["Стоимость"+?(ПостфикРесурса="УУ", "", ПостфикРесурса)]=ЗначениеЯчейкиДокумента;
		Возврат;
	КонецЕсли;

	//Если учетная стоимость задана в параметрах номенклатуры
	РезультаПоиска=СтруктураПараметров.НастройкаСписанияПоТипуЦены.Найти(Движение.Номенклатура, "Номенклатура");
	Если Не РезультаПоиска=Неопределено Тогда
		УчетнаяЦена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаПартии.Номенклатура, СтрокаПартии.ХарактеристикаНоменклатуры, РезультаПоиска.ТипЦены, СтруктураПараметров.ДатаОстатков);
		Движение["Стоимость"+?(ПостфикРесурса="УУ", "", ПостфикРесурса)]=Окр(Движение.Количество * УчетнаяЦена, 2, 1);
	КонецЕсли;

	//Если Не Движение.Номенклатура.СписаниеТоваровТипЦены.Пустая() Тогда //Списание по типу цены
	//	текДатаОстатков=СтруктураПараметров.ДатаОстатков;
	//	УчетнаяЦена=ЦенообразованиеСервер.УчетнаяЦенаТовара(СтрокаПартии.Номенклатура, СтрокаПартии.ХарактеристикаНоменклатуры, СтрокаПартии.Склад, СтрокаПартии.СерияНоменклатуры, текДатаОстатков, ПостфикРесурса);
	//	Движение["Стоимость"+?(ПостфикРесурса="УУ", "", ПостфикРесурса)]=Окр(Движение.Количество * УчетнаяЦена, 2, 1);
	//КонецЕсли;	
КонецПроцедуры //2016
 
Процедура СписаниеПартий(СтрокаДокумента, СтруктураПараметров, РегистрУчета)
	// Партии для данного учета
	ИмяРегистра=ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента);
	Если ИмяРегистра="" Тогда Возврат; КонецЕсли;

	СтрокаДокумента.Вставить("СуммаПродажи", СтрокаДокумента.СуммаЗадолженности);
	СтрокаДокумента.Вставить("СуммаПродажиБезНДС", СтрокаДокумента.СуммаЗадолженности-СтрокаДокумента.СуммаНДС);
	СтрокаДокумента.Вставить("СуммаПродажиНДС", СтрокаДокумента.СуммаНДС);

	ДатаСписанияТМЦ=СтруктураПараметров.ДатаОстатков;

	стрПодвид=Неопределено; Регистратор=СтрокаДокумента.Регистратор;
	Если СтрокаДокумента.Количество <= 0 И УправлениеМетаданными.ЕстьРеквизит("Подвид", Регистратор.Метаданные()) Тогда
		Если ЗначениеЗаполнено(Регистратор.Подвид) И НЕ ТипЗнч(Регистратор)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			стрПодвид=УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Регистратор.Подвид);
			Если стрПодвид="Корректировка" Тогда
				Если Не СтрокаДокумента.Свойство("Заказ") Тогда
					СтрокаДокумента.Вставить("Заказ", Неопределено);
				КонецЕсли; 
				Если Не СтрокаДокумента.Свойство("СтатусПартии") Тогда
					СтрокаДокумента.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
				КонецЕсли;
				Если Не СтрокаДокумента.Свойство("ДокументОприходования") Тогда
					СтрокаДокумента.Вставить("ДокументОприходования", Регистратор);
				КонецЕсли;
				
				Движение=ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
				// Свойства
				Движение.Период 	 = СтруктураПараметров.Дата;
				Движение.Регистратор = Регистратор;
				Движение.Активность  = Истина;
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				// Измерения
				Движение.Номенклатура = СтрокаДокумента.Номенклатура;
				Движение.Организация  = СтруктураПараметров.Организация;
				// Ресурсы
				Движение.Количество = СтрокаДокумента.Количество;
				
				Если СтрокаДокумента.Количество <= 0 Тогда
					Движение.Стоимость  =СтрокаДокумента.СтоимостьСписаниеУУ;
					Движение.СтоимостьНУ=СтрокаДокумента.СтоимостьСписаниеНУ;

					Если Движение.Стоимость=0 Тогда
						СтруктураПоиска=Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура", СтрокаДокумента.Номенклатура);
						Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатуры) Тогда
							СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры) Тогда
							СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
						КонецЕсли;
						//Получаем движения по реквизиту "Сделка" - в котором хранится корректированая реализация						
						Если СтруктураПараметров.Свойство("Сделка") Тогда
							тзДанные=ОбщегоНазначения.Отладка_РН(СтруктураПараметров.Сделка, "ПартииТоваровНаСкладах").Выгрузить();
							тзБуфер=тзДанные.Скопировать(тзДанные.НайтиСтроки(СтруктураПоиска));
							текКоличество=тзБуфер.Итог("Количество");
							Если НЕ текКоличество=0 Тогда
								Движение.Стоимость=тзБуфер.Итог("Стоимость")/текКоличество*СтрокаДокумента.Количество;
								//Движение.ДокументОприходования=тзБуфер[0].ДокументОприходования; //Людмила
								//СтрокаДокумента.ДокументОприходования=тзБуфер[0].ДокументОприходования; //Людмила
								Если Движение.СтоимостьНУ=0 Тогда
									Движение.СтоимостьНУ=тзБуфер.Итог("СтоимостьНУ")/текКоличество*СтрокаДокумента.Количество;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					//тзДанные=ОбщегоНазначения.Отладка_РН(СтруктураПараметров.Сделка, "ПартииТоваровНаСкладах").Выгрузить();
					//тзБуфер=тзДанные.Скопировать(тзДанные.НайтиСтроки(СтруктураПоиска));
					//текКоличество=тзБуфер.Итог("Количество");
					//Если НЕ текКоличество=0 Тогда
					//	Если Движение.Стоимость=0 Тогда
					//		Движение.Стоимость=тзБуфер.Итог("Стоимость")/текКоличество*СтрокаДокумента.Количество;
					//	КонецЕсли;
					//	Если Движение.СтоимостьНУ=0 Тогда
					//		Движение.СтоимостьНУ=тзБуфер.Итог("СтоимостьНУ")/текКоличество*СтрокаДокумента.Количество;
					//	КонецЕсли;
					//КонецЕсли;
				Иначе
					//Движение.Стоимость  =СтрокаДокумента.Количество*СтрокаДокумента.Сумма;
					Движение.СтоимостьНУ=0;
					ПрерватьВыполнение=Ложь;
				КонецЕсли; 

				// Реквизиты
				Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
				Движение.ВидТабличнойЧасти = СтрокаДокумента.ВидТабличнойЧасти;			

				// Заполнение полей, специфических для учета
				ЗаполнитьПоляЗаписиСписания(Движение, СтрокаДокумента, СтрокаДокумента, СтруктураПараметров, РегистрУчета, 1, 1);

				Если НЕ тзБуфер=Неопределено И НЕ тзБуфер.Количество()=0 Тогда
					Движение.ДокументОприходования=тзБуфер[0].ДокументОприходования;
				КонецЕсли; //Людмила
				
				// Обработка поступления
				ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение);

				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистра];
	
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];

	СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");

	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить=СтрокаДокумента.Количество;
	КоличествоДопОсталосьПогасить=0;
	Если НЕ ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда
		КоличествоДопОсталосьПогасить=СтрокаДокумента.КоличествоДоп;
	КонецЕсли;
	Если КоличествоДопОсталосьПогасить=0 Тогда КоличествоДопОсталосьПогасить=Неопределено; КонецЕсли; 
	
	// В строке может быть указана стоимость поступления, если затем товар будет оприходован с другой стоимостью
	СтоимостьПоступлениеОсталосьПогасить = 0;
	СтоимостьПоступлениеОсталосьПогасить = СтрокаДокумента.СтоимостьПоступление;

	СписываетсяТолькоСумма=СтрокаДокумента.Количество=0;
	
	КоличествоПоступление=СтрокаДокумента.КоличествоПоступление;
	КоличествоСписанноеПоДоументуПартии=0; СтрокаПартии=Неопределено;	 
	
	Если НЕ СтрокаДереваПартий=Неопределено Тогда
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			Если Не СписываетсяТолькоСумма Тогда //для возможности списания суммы без учета количества...
				Если КоличествоОсталосьПогасить <= 0 Тогда Прервать; КонецЕсли;
			КонецЕсли;

			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);

			Если Не СписываетсяТолькоСумма Тогда //для возможности списания суммы без учета количества...
				// Количество по строке больше 0
				Если НЕ СтрокаПартии.Количество > 0 Тогда Продолжить; КонецЕсли; 
			КонецЕсли;

			КоэффСписания=1;
			Если НЕ СтрокаПартии.Количество=0 И СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания=КоличествоОсталосьПогасить/СтрокаПартии.Количество;
			КонецЕсли;
			
			Если НЕ ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда
				Если СтрокаПартии.КоличествоДоп=Неопределено Тогда СтрокаПартии.КоличествоДоп=0; КонецЕсли; //***

				Если НЕ КоличествоДопОсталосьПогасить=Неопределено Тогда
					КоэффСписанияДоп=1;
					Если СтрокаПартии.КоличествоДоп > 0 И СтрокаПартии.КоличествоДоп >= КоличествоДопОсталосьПогасить Тогда
						КоэффСписанияДоп=КоличествоДопОсталосьПогасить/СтрокаПартии.КоличествоДоп;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) И (СтрокаПартии.ДокументОприходования = СтрокаДокумента.ДокументПартии) Тогда
				КоличествоСписанноеПоДоументуПартии = КоличествоСписанноеПоДоументуПартии + Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			КонецЕсли;			
			
			// Добавим новую строку
			Движение=ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
			// Свойства
			Движение.Период 	 = СтруктураПараметров.Дата;
			Движение.Регистратор = Регистратор;
			Движение.Активность  = Истина;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			Если СписываетсяТолькоСумма Тогда //для возможности списания суммы без учета количества...
				// Измерения
				Движение.Номенклатура = СтрокаДокумента.Номенклатура;
				Движение.Организация  = СтруктураПараметров.Организация;
			Иначе
				// Измерения
				Движение.Номенклатура = СтрокаПартии.Номенклатура;
				Движение.Организация  = СтрокаПартии.Организация; //***
				// Ресурсы
				Если НЕ ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда
					Если НЕ КоличествоДопОсталосьПогасить=Неопределено Тогда
						Движение.КоличествоДоп=Окр(СтрокаПартии.КоличествоДоп * КоэффСписанияДоп, 3, 1);
					КонецЕсли;
				КонецЕсли;	
				Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания, 3, 1);
				Движение.Стоимость	= Окр(СтрокаПартии.Стоимость  * КоэффСписания, 2, 1);
				Если ИмяРегистра<>"ПартииТоваровПереданныеУпр" Тогда //*** Временно обход надо сделать нормально(добавить в регистр стоимости)
					Движение.СтоимостьНУ= Окр(СтрокаПартии.СтоимостьНУ * КоэффСписания, 2, 1);
				КонецЕсли;
            КонецЕсли;

			//Если учетная стоимость задана в параметрах номенклатуры
			РезультаПоиска=СтруктураПараметров.НастройкаСписанияПоТипуЦены.Найти(Движение.Номенклатура, "Номенклатура");
			Если Не РезультаПоиска=Неопределено Тогда
				УчетнаяЦена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаПартии.Номенклатура, СтрокаПартии.ХарактеристикаНоменклатуры, РезультаПоиска.ТипЦены, СтруктураПараметров.ДатаОстатков);
				Движение.Стоимость=Окр(Движение.Количество * УчетнаяЦена, 2, 1);
				Если НЕ ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда //*** Временно обход надо сделать нормально(добавить в регистр стоимости)
					Движение.СтоимостьНУ=Окр(Движение.Количество * УчетнаяЦена, 2, 1);
				КонецЕсли;
			КонецЕсли; //2016

			КоэффСписания1=1; КоэффПоступления=1;

			Если Не СписываетсяТолькоСумма Тогда //для возможности списания суммы без учета количества...
				Если СтрокаПартии.Количество < КоличествоОсталосьПогасить Тогда
					КоэффСписания1=СтрокаПартии.Количество/КоличествоОсталосьПогасить;
				КонецЕсли;
			КонецЕсли;

			//Если учетная стоимость задана в документе
			Если СтрокаДокумента.СтоимостьСписаниеУУ<>0 Тогда
				//***17.04.15 Движение.Стоимость=Окр(СтрокаДокумента.СтоимостьСписаниеУУ * КоэффСписания1, 2, 1);
				Движение.Стоимость=СтрокаДокумента.СтоимостьСписаниеУУ;
				Движение.Количество=КоличествоОсталосьПогасить;
			КонецЕсли;
			Если ИмяРегистра<>"ПартииТоваровПереданныеУпр" Тогда //*** Временно обход надо сделать нормально(добавить в регистр стоимости)
				Если СтрокаДокумента.СтоимостьСписаниеНУ<>0 Тогда
					//***17.04.15 Движение.СтоимостьНУ=Окр(СтрокаДокумента.СтоимостьСписаниеНУ * КоэффСписания1, 2, 1);
					Движение.СтоимостьНУ=СтрокаДокумента.СтоимостьСписаниеНУ;
					Движение.Количество=КоличествоОсталосьПогасить;
				КонецЕсли;
			КонецЕсли;

			// Вспомогательное поле, не являющееся ресурсом, но используемое
			// для формирования записей по переоценке принятого на комиссию.
			Движение.СтоимостьПоступление = СтоимостьПоступлениеОсталосьПогасить * КоэффПоступления;
			СтоимостьПоступлениеОсталосьПогасить = СтоимостьПоступлениеОсталосьПогасить - Движение.СтоимостьПоступление;

			// Реквизиты
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			Движение.ВидТабличнойЧасти = СтрокаДокумента.ВидТабличнойЧасти;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;

			СтрокаПартии.Количество  = СтрокаПартии.Количество  - Движение.Количество;
			СтрокаПартии.Стоимость   = СтрокаПартии.Стоимость   - Движение.Стоимость;
			Если НЕ ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда //*** Временно обход надо сделать нормально(добавить в регистр стоимости)
				Если НЕ КоличествоДопОсталосьПогасить=Неопределено Тогда
					КоличествоДопОсталосьПогасить = КоличествоДопОсталосьПогасить - Движение.КоличествоДоп;
					СтрокаПартии.КоличествоДоп = СтрокаПартии.КоличествоДоп - Движение.КоличествоДоп;
				КонецЕсли; 
				СтрокаПартии.СтоимостьНУ = СтрокаПартии.СтоимостьНУ - Движение.СтоимостьНУ;
            КонецЕсли;
			// Заполнение полей, специфических для учета
			ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);

			// Обработка поступления
			ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение);
		КонецЦикла;
	КонецЕсли;

	// Обработка поступления продукции которая не имеет комплектующих (побочные продукты)
	Если СтрокаДокумента.Номенклатура.Пустая() И НЕ СтрокаДокумента.НоменклатураНовая.Пустая() Тогда
		СтрокаДокумента.Вставить("ДокументОприходованияНовый", Регистратор);
		СтрокаДокумента.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
		СтрокаДокумента.Вставить("Стоимость", 0);

		ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);

		СтрокаДокумента.Удалить("СтатусПартии");
		СтрокаДокумента.Удалить("Стоимость");		
		СтрокаДокумента.Удалить("ДокументОприходованияНовый");
	КонецЕсли; //08.04.09
		
	//(Списываем количество в МИНУС)
	Если (КоличествоОсталосьПогасить<>0 Или ЗначениеЗаполнено(КоличествоДопОсталосьПогасить) ) И НЕ СтруктураПараметров.Авторезервирование Тогда
		КоэффСписания=1; КоэффПоступления=1;
		СтоимостьОсталосьПогасить=0; СтоимостьОсталосьПогаситьБУ=0; СтоимостьОсталосьПогаситьНУ=0;
		Если СтрокаПартии=Неопределено Тогда
			тзБуфер=ТаблицаОстатковПартий.СкопироватьКолонки();
			Если тзБуфер.Колонки.Найти("КоличествоДоп")=Неопределено Тогда
				тзБуфер.Колонки.Добавить("КоличествоДоп");
			КонецЕсли;
			СтрокаПартии=тзБуфер.Добавить();
			СтрокаПартии.Номенклатура=СтрокаДокумента.Номенклатура;
			СтрокаПартии.ХарактеристикаНоменклатуры=СтрокаДокумента.ХарактеристикаНоменклатуры;
			Если тзБуфер.Колонки.Найти("СерияНоменклатуры")<>Неопределено Тогда
				СтрокаПартии.СерияНоменклатуры=СтрокаДокумента.СерияНоменклатуры;
			КонецЕсли;
			Если тзБуфер.Колонки.Найти("Склад")<>Неопределено Тогда
				СтрокаПартии.Склад=СтрокаДокумента.Склад;
			КонецЕсли;
			СтрокаПартии.Количество=СтрокаДокумента.Количество;
			Если НЕ ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда
				СтрокаПартии.КоличествоДоп=СтрокаДокумента.КоличествоДоп;
			КонецЕсли;	
		Иначе
			СтрокаПартии.ДокументОприходования=""; текКолвоПартии=СтрокаДереваПартий.Строки.Итог("Количество");
		КонецЕсли;

		Если ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда
			СтрокаПартии.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию;
		Иначе
			СтрокаПартии.Качество=СтрокаДокумента.Качество;
		КонецЕсли;
		
		Если СтруктураПараметров.ТипЗначенияРегистратора=Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			СтрокаПартии.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.НаПереработку;
		КонецЕсли; //2016

		СтрокаПартии.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный; //СтрокаДокумента.СтатусПартииНовый;

		// Добавим новую строку
		Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
		// Свойства
		Движение.Период 	 = СтруктураПараметров.Дата;
		Движение.Регистратор = Регистратор;
		Движение.Активность  = Истина;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		// Измерения
		Движение.Номенклатура= СтрокаДокумента.Номенклатура;
		//***Движение.Организация = СтруктураПараметров.Организация; //СтрокаДокумента.Организация; //***
		Движение.Организация = СтруктураПараметров.Организация_ПартииТоваровНаСкладах;
		// Ресурсы
		Движение.Количество	 = КоличествоОсталосьПогасить;
		Если НЕ ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда
			Если НЕ КоличествоДопОсталосьПогасить=Неопределено Тогда
				Движение.КоличествоДоп=КоличествоДопОсталосьПогасить;
			КонецЕсли;	
		КонецЕсли;

    	// Реквизиты
		Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
		Движение.ВидТабличнойЧасти = СтрокаДокумента.ВидТабличнойЧасти;

		ЗаполнитьСтоимостьПоСтрокеСписанияПартии(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, ИмяРегистра, "УУ");
		ЗаполнитьСтоимостьПоСтрокеСписанияПартии(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, ИмяРегистра, "НУ");

		Если ИмяРегистра="ПартииТоваровПереданныеУпр" Тогда
			Если НЕ СтрокаДокумента.СтоимостьСписаниеУУ=0 Тогда
				Движение["Стоимость"]=СтрокаДокумента.СтоимостьСписаниеУУ;
			КонецЕсли;
		КонецЕСли; //lee (30.06.20)

		// Заполнение полей, специфических для учета
		ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);

		// Обработка поступления
		ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение);		
	КонецЕсли;

	Если Регистратор.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.УчетПотребностей) И СтруктураПараметров.Авторезервирование И НЕ КоличествоОсталосьПогасить=0 Тогда
		ОбъектРегистр=ДобавитьДвижениеВСтруктуруПараметров("УчетПотребностей", СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(ОбъектРегистр, СтрокаДокумента);
		ОбъектРегистр.Период=СтрокаДокумента.Период;
		ОбъектРегистр.Регистратор=СтрокаДокумента.Регистратор;
		ОбъектРегистр.Активность=Истина;
		ОбъектРегистр.ДокументРезерва=Регистратор;
		ОбъектРегистр.Количество=КоличествоОсталосьПогасить;
	КонецЕсли; //13.02.2012
	
	// Восстановим ранее сохраненное количество поступления для движений по НДС
	СтрокаДокумента.КоличествоПоступление = КоличествоПоступление;	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ

Процедура ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания)
	
	МассивДокументов = Новый Массив;
	
	КодОперации = Перечисления.КодыОперацийПартииТоваров;
	
	Для Сч=1 По 2 Цикл
		
		// Первый раз движения по партиям на складах, второй - по партиям на комиссии
		Если Сч=1 Тогда
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Скопировать();
			СписаноИз = "НаСкладах";
		Иначе
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Скопировать();
			СписаноИз = "Переданные";
		КонецЕсли;
		
		// Из таблицы удалим движения, не относящиеся к продаже купленных товаров
		Инд=0;
		Пока Инд<ТаблицаСписанныхПартий.Количество() Цикл
			Строка = ТаблицаСписанныхПартий[Инд];
			
			// Товар должен быть комиссионным и списываться (операции определенных типов)
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию 
				
				И ( Строка.КодОперации = КодОперации.Реализация
				ИЛИ Строка.КодОперации = КодОперации.РеализацияРозница
				ИЛИ Строка.КодОперации = КодОперации.РеализацияКомиссия
				ИЛИ Строка.КодОперации = КодОперации.СписаниеНаЗатраты
				ИЛИ Строка.КодОперации = КодОперации.СписаниеПоИнвентаризации
				ИЛИ Строка.КодОперации = КодОперации.Комплектация
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателя
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателяТекущийМесяц
				
				)Тогда
				
				Инд = Инд+1;
				МассивДокументов.Добавить(Строка.ДокументОприходования);
			Иначе
				ТаблицаСписанныхПартий.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;

		Если ТаблицаСписанныхПартий.Количество()=0 Тогда Продолжить; КонецЕсли;

		СоотвДок=Новый Соответствие;
		Выборка=ПолныеПрава.ПолучитьПараметрыДокументовОприходования(МассивДокументов, СтруктураПараметров.Период);		
		Пока Выборка.Следующий() Цикл
			СоотвДок.Вставить(Выборка.Ссылка, Новый Структура("ДоговорПоставки, Сделка, Ссылка, Валюта, Курс, Кратность", Выборка.ДоговорПоставки, Выборка.Сделка, Выборка.Ссылка, Выборка.Валюта, Выборка.Курс, Выборка.Кратность));
		КонецЦикла;	
			
		ДоговорПоставки        = Выборка.ДоговорПоставки;
		ВалютаДоговораПоставки = Выборка.Валюта;
		
		ВалютаУпр = Неопределено;
		КурсВалютыУпр = 0;
		КратностьВалютыУпр = 0;
		
		Для Каждого Движение Из ТаблицаСписанныхПартий Цикл			
			ДвижениеРТ=ДобавитьДвижениеВСтруктуруПараметров("РеализованныеТовары", СтруктураПараметров);
			ЗаполнитьЗначенияСвойств(ДвижениеРТ, Движение);
			ДвижениеРТ.Период = СтруктураПараметров.Период;

			Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
				ДвижениеРТ.ВидДвижения = Движение.ВидДвижения;
				ДвижениеРТ.Количество  = -Движение.Количество;
			Иначе
				Если Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Приход;
				Иначе
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЕсли;
			КонецЕсли;

			ДвижениеРТ.ДокументПоставки	 = Движение.ДокументОприходования;

			СтруктураДок=СоотвДок[Движение.ДокументОприходования];
			Если НЕ СтруктураДок=Неопределено Тогда
				ДвижениеРТ.ДоговорКонтрагента = СтруктураДок.ДоговорПоставки;
				
				Если ЗначениеЗаполнено(СтруктураДок.Сделка) Тогда
					ДвижениеРТ.Сделка = СтруктураДок.Сделка;
				Иначе
					ДвижениеРТ.Сделка = Неопределено;
				КонецЕсли;	
				
				Если Движение.СуммаВыручки<>0 Тогда // Пересчет выручки в валюту взаиморасчетов с комитентом
					ДвижениеРТ.Выручка = 
						ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Движение.СуммаВыручки, 
																	Движение.ВалютаДокумента, СтруктураДок.Валюта, 
																	Движение.КурсДокумента, СтруктураДок.Курс, 
																	Движение.КратностьДокумента, СтруктураДок.Кратность);

				Иначе // по стоимости принятия на комиссию
					//30.07.2015
					
					//Если ВалютаУпр = Неопределено Тогда
					//	ВалютаУпр = МодульВалютногоУчета.ПолучитьВалюту("Упр");
					//	СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
					//	КурсВалютыУпр = СтруктураКурсВалюты.Курс;
					//	КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
					//КонецЕсли;
					//
					//ДвижениеРТ.Выручка = 
					//ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Движение.Стоимость, 
					//ВалютаУпр, СтруктураДок.Валюта, 
					//КурсВалютыУпр, СтруктураДок.Курс, 
					//КратностьВалютыУпр, СтруктураДок.Кратность);
				КонецЕсли;
				
				Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
					ДвижениеРТ.Выручка = -ДвижениеРТ.Выручка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// КОРРЕСПОНДИРУЮЩИЕ СПИСАНИЮ ДВИЖЕНИЯ (ДЕБЕТ)

// Движение по регистру "Продажи"
//
Процедура СписаниеНаСебестоимостьПродаж(СтрокаДокумента, СтруктураПараметров, Строка=Неопределено, ТипЗаписи="Прямая")
	Если Строка=Неопределено Тогда Строка=СтрокаДокумента; КонецЕсли; 

	Если (ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта)) И (НЕ СтрокаДокумента.Количество = 0) Тогда
		Количество=СтрокаДокумента.КоличествоКомплекта*Строка.Количество/СтрокаДокумента.Количество;
	Иначе
		Количество=Строка.Количество;
	КонецЕсли;
	Если Количество=0 Тогда Возврат; КонецЕсли; 
	
	Движение=ДобавитьДвижениеВСтруктуруПараметров("Продажи", СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	Движение.Активность=Истина;
	Движение.ДокументОприходования=Строка.ДокументОприходования;
	Движение.ДокументПродажи=СтрокаДокумента.Регистратор;

	Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		Движение.ЗаказПокупателя = СтрокаДокумента.ЗаказСписания;
	Иначе
		Движение.ЗаказПокупателя = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта) Тогда
		Движение.Номенклатура = СтрокаДокумента.НоменклатураКомплекта;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаКомплекта) Тогда
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаКомплекта;
	КонецЕсли;

	////Если (ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта)) И (НЕ СтрокаДокумента.Количество = 0) Тогда
	////	Движение.Количество = СтрокаДокумента.КоличествоКомплекта*Строка.Количество/СтрокаДокумента.Количество;
	////Иначе
	////	Движение.Количество = Строка.Количество;
	////КонецЕсли;	
	Движение.Количество=Количество;

	Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ВалютаДокумента) Тогда
			ВалютаУпр=МодульВалютногоУчета.ПолучитьВалюту("Упр");
			СтруктураКурсВалюты=РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
			Движение.Себестоимость=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаВыручки, 
									СтрокаДокумента.ВалютаДокумента, ВалютаУпр, 
									СтрокаДокумента.КурсДокумента, СтруктураКурсВалюты.Курс,
									СтрокаДокумента.КратностьДокумента, СтруктураКурсВалюты.Кратность);
		Иначе
			Движение.Себестоимость=Строка.СуммаВыручки;
		КонецЕсли;	
	Иначе
		Движение.Себестоимость = Строка.Стоимость;
		//Движение.Стоимость=СтрокаДокумента.СуммаПродажи; //01.03.2010
		//Движение.НДС=СтрокаДокумента.СуммаПродажиНДС; //01.03.2010
		Коэфф=1;
		Если НЕ Движение.Количество=0 И НЕ ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта) Тогда
			Коэфф=ОбщегоНазначения.МодульЧисла(СтрокаДокумента.Количество/Движение.Количество);
		КонецЕсли;
		текСтоимость=СтрокаДокумента.СуммаПродажи/Коэфф;
		текНДС=СтрокаДокумента.СуммаПродажиНДС/Коэфф;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта) Тогда
			Если СтруктураПараметров.ТаблицаДвиженийПродажи.Итог("Стоимость")>=СтруктураПараметров.СуммаДокумента Тогда
				текСтоимость=0; текНДС=0;
			КонецЕсли;
		КонецЕсли;

		Движение.Стоимость=текСтоимость;
		Движение.НДС=текНДС;
	КонецЕсли;

	Если СокрЛП(СтрокаДокумента.ВидТабличнойЧасти)="СоставНабора" Тогда
		СтрокаДокумента.ВидТабличнойЧасти=СтрокаДокумента.ВидТабличнойЧастиНовая;
		СтрокаДокумента.НомерСтрокиТабличнойЧасти=СтрокаДокумента.НомерСтрокиТабличнойЧастиНовая;
	КонецЕсли; //2016

	Если ТипЗаписи="Сторно" Тогда
		Движение.Количество=-Движение.Количество;
		Движение.Себестоимость=-Движение.Себестоимость;
		Движение.Стоимость=-Движение.Стоимость;
		Движение.НДС=-Движение.НДС;
		Движение.СтоимостьБезСкидок=-Движение.СтоимостьБезСкидок;
	КонецЕсли;		
КонецПроцедуры

// Склад

Процедура УвеличитьСтоимостьНаПроцентНакладныхРасходов(Строка, ПроцентНакладныхРасходов, Движение)
	Если ПроцентНакладныхРасходов<>0 Тогда
		ДопСтоимость=Строка.Стоимость*ПроцентНакладныхРасходов/100;
		Движение.Стоимость=Движение.Стоимость+ДопСтоимость;
			
		ДопСтоимость=Строка.СтоимостьНУ*ПроцентНакладныхРасходов/100;
		Движение.СтоимостьНУ=Движение.СтоимостьНУ+ДопСтоимость;
	КонецЕсли;	
КонецПроцедуры
 
Процедура ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка=Неопределено)
	Если СтрокаДокумента.НеОприходовать Тогда Возврат; КонецЕсли;
	
	ЭтоПеремещениеТоваров=СтруктураПараметров.ТипЗначенияРегистратора=Тип("ДокументСсылка.ПеремещениеТоваров");
	ЭтоДокументВыпускПродукции=СтруктураПараметров.ТипЗначенияРегистратора=Тип("ДокументСсылка.ВыпускПродукции");
	ЭтоДокументПоступлениеИзПереработки = СтруктураПараметров.ТипЗначенияРегистратора=Тип("ДокументСсылка.ПоступлениеИзПереработки");
	Если ЭтоДокументВыпускПродукции ИЛИ ЭтоДокументПоступлениеИзПереработки Тогда
		текИзделие=СтрокаДокумента.НоменклатураНовая;
		Если ЗначениеЗаполнено(текИзделие) Тогда			
			Если текИзделие.ВидНоменклатуры.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга Тогда Возврат; КонецЕсли;
		КонецЕсли;

		тзДвижения=СтруктураПараметров["ТаблицаДвиженийПартииТоваровНаСкладахУпр"];
		текНомерСтрокиТЧ=?(СтрокаДокумента.НомерСтрокиТабличнойЧастиНовая=0, СтрокаДокумента.НомерСтрокиТабличнойЧасти, СтрокаДокумента.НомерСтрокиТабличнойЧастиНовая);
		
		Отбор=Новый Структура;
		Отбор.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		Отбор.Вставить("ВидТабличнойЧасти", СтрокаДокумента.ВидТабличнойЧастиНовая);
		Отбор.Вставить("НомерСтрокиТабличнойЧасти", текНомерСтрокиТЧ);
		МассивСтрок=тзДвижения.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество()=1 Тогда
			Движение=МассивСтрок[0];
			ПроцентНакладныхРасходов=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ПроцентНакладныхРасходов", 0);
			УвеличитьСтоимостьНаПроцентНакладныхРасходов(Строка, ПроцентНакладныхРасходов, Движение);
			//Если СтрокаДокумента.СтоимостьПоступление=0 Тогда
			//	Движение.Стоимость=Движение.Стоимость+Строка.Стоимость;
			//КонецЕсли;
			Если ЭтоДокументПоступлениеИзПереработки Тогда //2016
				Если НЕ СтрокаДокумента.СтоимостьПоступление=0 Тогда
					Если СтрокаДокумента.СтоимостьПоступление-СтрокаДокумента.СтоимостьДополнительная > 0 Тогда //Значит стоимость поступления задали вручную
						Движение.Стоимость=СтрокаДокумента.СтоимостьПоступление-СтрокаДокумента.СтоимостьДополнительная; //Оставляем плановую стоимость (стоимость введена вручную в докумете)
					Иначе
						Движение.Стоимость=Движение.Стоимость+Строка.Стоимость;
					КонецЕсли;
				Иначе
					Движение.Стоимость=Движение.Стоимость+Строка.Стоимость;
				КонецЕсли;
				Если НЕ СтрокаДокумента.СтоимостьПоступлениеНУ=0 Тогда
					Если СтрокаДокумента.СтоимостьПоступлениеНУ-СтрокаДокумента.СтоимостьДополнительная > 0 Тогда //Значит стоимость поступления задали вручную
						Движение.СтоимостьНУ=СтрокаДокумента.СтоимостьПоступлениеНУ-СтрокаДокумента.СтоимостьДополнительная;
					Иначе
						Движение.СтоимостьНУ=Движение.СтоимостьНУ+Строка.Стоимость;
					КонецЕсли;
				Иначе
					Движение.СтоимостьНУ=Движение.СтоимостьНУ+Строка.Стоимость;
				КонецЕсли;

				//Если СтрокаДокумента.СтоимостьПоступлениеНУ=0 Тогда
				//	Движение.СтоимостьНУ=Движение.Стоимость;
				//КонецЕсли;
			Иначе	
				Если СтрокаДокумента.СтоимостьПоступление=0 Тогда
					Движение.Стоимость=Движение.Стоимость+Строка.Стоимость;
				КонецЕсли;
				Если СтрокаДокумента.СтоимостьПоступлениеНУ=0 Тогда
					Движение.СтоимостьНУ=Движение.СтоимостьНУ+Строка.СтоимостьНУ;
				КонецЕсли;
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли; 

	//ДатаПоступленияТМЦ=УправлениеПроведением.ПолучитьДатуПоступленияТМЦ(Строка.Период);
	ДатаПоступленияТМЦ=Строка.Период;

	Движение=ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладахУпр", СтруктураПараметров);

	//Если ЭтоДокументВыпускПродукции или ЭтоДокументПоступлениеИзПереработки Тогда //2016
	Если ЭтоДокументВыпускПродукции Тогда
		Если Не СтрокаДокумента.Номенклатура.Пустая() Тогда
			тзДвижения.Сдвинуть(Движение, -1);
		КонецЕсли;
	КонецЕсли;

	Движение.Период      = ДатаПоступленияТМЦ;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Организация = Строка.Организация;
	Движение.НомерСтрокиТабличнойЧасти = Строка.НомерСтрокиТабличнойЧасти;
	Движение.ВидТабличнойЧасти = Строка.ВидТабличнойЧасти;

	// Измерения
	
	// Склад в движении есть, только если списано со склада
	Движение.Склад=?(СписаноИз="НаСкладах", Строка.Склад, СтрокаДокумента.Склад);
	// Если задан новый склад поступления, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
		Движение.Склад = СтрокаДокумента.СкладПолучатель;
	КонецЕсли;
	
	Движение.Номенклатура = Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Или СтрокаДокумента.ИзменитьСерию Тогда
		Движение.СерияНоменклатуры=СтрокаДокумента.СерияНоменклатурыНовая;
	Иначе
		// Серия номенклатуры в движении списания есть, только если списано со склада 
		Если СписаноИз="НаСкладах" Тогда
			Движение.СерияНоменклатуры=Строка.СерияНоменклатуры;
		КонецЕсли;
		// При возврате товара от комиссионера или переработчика серия есть в строке документа
		Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера Тогда
			Движение.СерияНоменклатуры=СтрокаДокумента.СерияНоменклатуры;
		КонецЕсли;
	КонецЕсли;

	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		Движение.Качество = Строка.Качество;
	КонецЕсли;

	// Если задано новое качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		Движение.Качество = СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Если задана новая табличная часть, подставляем её
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидТабличнойЧастиНовая) Тогда
		Движение.ВидТабличнойЧасти=СтрокаДокумента.ВидТабличнойЧастиНовая;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.НомерСтрокиТабличнойЧастиНовая) Тогда
		Движение.НомерСтрокиТабличнойЧасти=СтрокаДокумента.НомерСтрокиТабличнойЧастиНовая;
	КонецЕсли;

	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество=Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.СтатусПартии = Строка.СтатусПартии;
	
	// Новая номенклатура-для комплектации: меняется все
	// Аналогично обрабатывается включение оборудования в состав МПЗ
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		Движение.Номенклатура = СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;

		СпособОценкиМПЗ = ВРег(СтруктураПараметров.УчетнаяПолитика.СпособОценкиМПЗ);
		
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
			Движение.ДокументОприходованияДата = ДатаПоступленияТМЦ;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
			Движение.ДокументОприходованияДата = Строка.Период; //***
		КонецЕсли;

		// Комплект(ующее) приходуется со статусом партии, указанным в документе
		// Если значение не заполнено - статус партии "купленный"
		// Статус партии "по ордеру" не меняем
		Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру Тогда
				Движение.СтатусПартии = Строка.СтатусПартии;
			Иначе
				Если ЗначениеЗаполнено(СтрокаДокумента.СтатусПартииНовый) тогда
					Движение.СтатусПартии = СтрокаДокумента.СтатусПартииНовый;
				Иначе
					Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Движение.ДокументОприходования = Строка.ДокументОприходования;
		Движение.ДокументОприходованияДата = Строка.ДокументОприходованияДата;
	КонецЕсли;

	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;

	Если СписаноИз="Переданные" Тогда
		Если Движение.Стоимость=0 Тогда
			Движение.Стоимость=СтрокаДокумента.СтоимостьСписаниеУУ;
			Движение.СтоимостьНУ=СтрокаДокумента.СтоимостьСписаниеНУ;
		КонецЕсли;	
	КонецЕсли; //25.10.2016

	Если НЕ СписаноИз="Переданные" Тогда
		Если ТипЗнч(Строка)=Тип("СтрокаТаблицыЗначений") Тогда
			Если ЭтоДокументПоступлениеИзПереработки Тогда //2016
				Движение.СтоимостьНУ=Движение.Стоимость;
			Иначе
				Движение.СтоимостьНУ=Строка.СтоимостьНУ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; //25.10.2016
	
	Если Константы.ВключениеЗатратВСтоимостьГП.Получить() И НЕ ЭтоДокументПоступлениеИзПереработки Тогда // И НЕ ЭтоДокументПоступлениеИзПереработки //5.10.2016
		//Доп.стоимоть (работы,услуги - которые необходимо распределенить на себестоимость оприходованных партий)
		Если НЕ СтрокаДокумента.СтоимостьДополнительная=0 Тогда
			Движение.Стоимость=Движение.Стоимость+СтрокаДокумента.СтоимостьДополнительная;
			Движение.СтоимостьНУ=Движение.СтоимостьНУ+СтрокаДокумента.СтоимостьДополнительная;
		КонецЕсли;
	КонецЕсли;

	// Оприходование может быть с новой стоимостью
	Если ЭтоДокументПоступлениеИзПереработки Тогда  //5.10.2016
		Если НЕ СтрокаДокумента.СтоимостьПоступление=0 Тогда
			Если СтрокаДокумента.СтоимостьПоступление-СтрокаДокумента.СтоимостьДополнительная > 0 Тогда //Значит стоимость поступления задали вручную
				Движение.Стоимость=СтрокаДокумента.СтоимостьПоступление-СтрокаДокумента.СтоимостьДополнительная; //Оставляем плановую стоимость (стоимость введена вручную в докумете)
			Иначе
				Движение.Стоимость=Движение.Стоимость+СтрокаДокумента.СтоимостьПоступление;
			КонецЕсли;
		КонецЕсли;
		Если НЕ СтрокаДокумента.СтоимостьПоступлениеНУ=0 Тогда
			Если СтрокаДокумента.СтоимостьПоступлениеНУ-СтрокаДокумента.СтоимостьДополнительная > 0 Тогда //Значит стоимость поступления задали вручную
				Движение.СтоимостьНУ=СтрокаДокумента.СтоимостьПоступлениеНУ-СтрокаДокумента.СтоимостьДополнительная;
			Иначе
				Движение.СтоимостьНУ=Движение.СтоимостьНУ+СтрокаДокумента.СтоимостьПоступлениеНУ;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ СтрокаДокумента.СтоимостьПоступление  =0 Тогда Движение.Стоимость   = СтрокаДокумента.СтоимостьПоступление; КонецЕсли;
		Если НЕ СтрокаДокумента.СтоимостьПоступлениеНУ=0 Тогда Движение.СтоимостьНУ = СтрокаДокумента.СтоимостьПоступлениеНУ; КонецЕсли;
	КонецЕсли;
	
	//{2016
	//Если ЭтоДокументВыпускПродукции Тогда
	//	УвеличитьСтоимостьНаПроцентНакладныхРасходов(Движение, СтруктураПараметров.Регистратор.ПроцентНакладныхРасходов,Движение);
	//КонецЕсли;
	ПроцентНакладныхРасходов=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ПроцентНакладныхРасходов", 0);
	УвеличитьСтоимостьНаПроцентНакладныхРасходов(Движение, ПроцентНакладныхРасходов, Движение);
	//}2016
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Если Строка.Количество < 0 Тогда
			Движение.Количество	= -Строка.КоличествоПоступление;
			Движение.КоличествоДоп	= -Строка.КоличествоПоступлениеДоп;
		Иначе	
			Движение.Количество	= Строка.КоличествоПоступление;
			Движение.КоличествоДоп	= Строка.КоличествоПоступлениеДоп;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЭтоДокументПоступлениеИзПереработки Тогда
		Движение.Количество	= Строка.КоличествоПоступление;
	КонецЕсли; //2016
	Если ЭтоДокументВыпускПродукции ИЛИ ЭтоПеремещениеТоваров Тогда
		Движение.КоличествоДоп	= Строка.КоличествоПоступлениеДоп;
	КонецЕсли; //2017

	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;	
КонецПроцедуры

Процедура ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданныеУпр", СтруктураПараметров);

	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
    //Если СтрокаДокумента.СтатусПередачи = Перечисления.СтатусыПолученияПередачиТоваров.НаПереработку Тогда
		Движение.Организация		= СтрокаДокумента.Организация;
	//КонецЕсли; 
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.СтатусПартии	    = Строка.СтатусПартии;
	Движение.СтатусПередачи		= СтрокаДокумента.СтатусПередачи;

	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   = СтрокаДокумента.ДокументПередачи;

	// Вспомогательные поля для списания
	Движение.ДокументОприходованияДата	= Строка.ДокументОприходованияДата;

	// Ресурсы
	Движение.Количество = Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		Движение.Стоимость = Строка.СтоимостьПоступление;
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
КонецПроцедуры

Процедура СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	// Заказ списания
	ЗаказСписания=Неопределено;
	Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		Если ТипЗнч(СтрокаДокумента.ЗаказСписания)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказСписания=СтрокаДокумента.ЗаказСписания;
		КонецЕсли;
	КонецЕсли;

	Движение=ДобавитьДвижениеВСтруктуруПараметров("ЗатратыУпр", СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	Движение.Период=СтрокаДокумента.Период;
	Движение.Регистратор=СтрокаДокумента.Регистратор;
	Движение.Активность=Истина;
	Движение.Заказ=ЗаказСписания;
	Движение.Сумма=Строка.Стоимость;
КонецПроцедуры

Процедура ВыполнитьКорДвижениеУпр(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение)
	Если ПриходоватьВ = "НаСкладах" Тогда
		ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);

	ИначеЕсли ПриходоватьВ = "Переданные" Тогда
		ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Движение);

	ИначеЕсли ПриходоватьВ = "СебестоимостьПродаж" Тогда
		СписаниеНаСебестоимостьПродаж(СтрокаДокумента, СтруктураПараметров, Движение);

	ИначеЕсли ПриходоватьВ = "Затраты" Тогда
		СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Движение);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
	НаправлениеСписания=ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат);
	ВыполнитьКорДвижениеУпр(РегистрУчета, НаправлениеСписания, СтрокаДокумента, СтруктураПараметров, Движение);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СПЕЦИФИЧЕСКИЕ ПРОЦЕДУРЫ ДВИЖЕНИЯ ПАРТИЙ ДЛЯ ОПРЕДЕЛЕННЫХ ВИДОВ ДОКУМЕНТОВ

// Возвращает таблицу партий товаров, которую можно оприходовать документом "Возврат товаров от покупателя"
//
Функция ПолучитьТаблицуЗаписейОснованияВозврата(СтрокаДокумента, СтруктураПараметров, ДокументПартии, НаборОснование, ИмяРегистраПартии)
	// Партии, которые можно вернуть, получаем при первом вызове и помещаем в структуру параметров
	// Затем до конца обработки документа используем таблицы значений из структуры параметров
	ТаблицаЗаписейОснования = Неопределено;
	ТаблицыПартийВозврата = Неопределено;
	
	// В табличной части возврата от покупателя может быть указано произвольное количество документов партии
	Если СтруктураПараметров.Свойство("ТаблицыПартийВозвратаУправленческий", ТаблицыПартийВозврата) тогда
		ТаблицаЗаписейОснования = ТаблицыПартийВозврата.Получить(ДокументПартии.УникальныйИдентификатор());
		Если ТаблицаЗаписейОснования <> Неопределено тогда
			Возврат ТаблицаЗаписейОснования;
		КонецЕсли;
	КонецЕсли;
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	
	// Если указан партиеобразующий документ, данные берутся из него
	Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда		
		Если ТипЗнч(ДокументПартии)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			// выберем движения документа партии по регистру "ПартииТоваров" за исключением сторнирующих движений
			ЗапросПоДокументуПартии=Новый Запрос;
			ЗапросПоДокументуПартии.УстановитьПараметр("СтатусПартии",Перечисления.СтатусыПартийТоваров.ПоОрдеру);
			ЗапросПоДокументуПартии.УстановитьПараметр("Регистратор",ДокументПартии);
			ЗапросПоДокументуПартии.Текст="
			|ВЫБРАТЬ
			|	ПартииТоваровНаСкладах.Период,
			|	ПартииТоваровНаСкладах.Регистратор,
			|	ПартииТоваровНаСкладах.Номенклатура,
			|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
			|	ПартииТоваровНаСкладах.СерияНоменклатуры,
			|	ПартииТоваровНаСкладах.ДокументОприходования,
			|	ПартииТоваровНаСкладах.СтатусПартии,
			|	ПартииТоваровНаСкладах.Качество,
			|	ПартииТоваровНаСкладах.Количество,
			|	ПартииТоваровНаСкладах.Стоимость,
			|	ПартииТоваровНаСкладах.СтоимостьНУ
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
			|ГДЕ
			|	ПартииТоваровНаСкладах.СтатусПартии <> &СтатусПартии
			|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор
			|";
			ТаблицаЗаписейОснования = ЗапросПоДокументуПартии.Выполнить().Выгрузить();
		Иначе
			НаборОснование.Отбор.Регистратор.Установить(ДокументПартии);
			НаборОснование.Прочитать();
			ТаблицаЗаписейОснования=НаборОснование.Выгрузить();
		КонецЕсли;
		
		// Если указан документ списания, данные о партиях берутся из него
	Иначе
		// Движения реализации могут быть выполнены с неточной или нерассчитанной себестоимостью
		// Кроме того в управленческом учете при ордерной схеме движения реализации может выполнять поступление
		МассивРеализация = Новый Массив;
		МассивРеализация.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
		МассивРеализация.Добавить(КодыОпераций.Реализация);
		МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
		МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("КодыСписание",МассивРеализация);
		Запрос.УстановитьПараметр("Регистратор",ДокументПартии);
		Запрос.УстановитьПараметр("Период", СтруктураПараметров.Период); // Возврат не может быть раньше реализации
		Запрос.Текст="
		|ВЫБРАТЬ
		|	УчетПартий.Номенклатура КАК Номенклатура,
		|	УчетПартий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	УчетПартий.СерияНоменклатуры КАК СерияНоменклатуры,
		|	УчетПартий.ДокументОприходования КАК ДокументОприходования,
		|	УчетПартий.СтатусПартии КАК СтатусПартии,
		|	СУММА(УчетПартий.Количество) КАК Количество,
		|	СУММА(УчетПартий.Стоимость) КАК Стоимость,
		|	СУММА(УчетПартий.СтоимостьНУ) КАК СтоимостьНУ,
		|	0 КАК СтоимостьПоступление,
		|	УчетПартий.КодОперации КАК КодОперацииПартииТоваров,
		|	УчетПартий.Регистратор КАК Регистратор,
		|	УчетПартий.Период КАК Период,
		|	УчетПартий.Качество КАК Качество,
		|	УчетПартий.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК УчетПартий
		|ГДЕ
		|	УчетПартий.ВидДвижения = &ВидДвиженияРасход
		|	И УчетПартий.КодОперации В(&КодыСписание)
		|	И УчетПартий.Регистратор = &Регистратор
		|	И УчетПартий.Период < &Период
		|	
		|СГРУППИРОВАТЬ ПО
		|	УчетПартий.Номенклатура,
		|	УчетПартий.ХарактеристикаНоменклатуры,
		|	УчетПартий.СерияНоменклатуры,
		|	УчетПартий.ДокументОприходования,
		|	УчетПартий.СтатусПартии,
		|	УчетПартий.КодОперации,
		|	УчетПартий.Регистратор,
		|	УчетПартий.Период,
		|	УчетПартий.Качество,
		|	УчетПартий.Номенклатура.ВестиПартионныйУчетПоСериям
		|";
		ТаблицаЗаписейОснования=Запрос.Выполнить().Выгрузить();

	КонецЕсли; //Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
	
	// Добавим вспомогательное поле ДокументОприходованияДата
	ТаблицаЗаписейОснования.Колонки.Добавить("ДокументОприходованияДата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));

	Если НЕ СтруктураПараметров.Свойство("ТаблицыПартийВозвратаУправленческий", ТаблицыПартийВозврата) тогда
		ТаблицыПартийВозврата = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыПартийВозврата.Вставить(ДокументПартии.УникальныйИдентификатор(),ТаблицаЗаписейОснования);
	
	СтруктураПараметров.Вставить("ТаблицыПартийВозвратаУправленческий", ТаблицыПартийВозврата);
	
	Возврат ТаблицаЗаписейОснования;	
КонецФункции

// Выполняет движения документа возврат товаров от покупателя
//
Процедура ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания)

	Движение=ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
	Движение.Период      = СтрокаДокумента.Период;
	Движение.Регистратор = СтрокаДокумента.Регистратор;
	Движение.Активность  = Истина;
	Движение.Организация = СтрокаДокумента.Организация;
	
	// Возврат текущего месяца может быть с неизвестной стоимостью например, если возвращается продукция
	// в этом случае он учитывается как сторно расхода и обрабатывается корректировкой стоимости списания как расход
	ВозвратТекущегоМесяца = КонецМесяца(ДокументПартии.Дата) = КонецМесяца(СтруктураПараметров.Период);
	Если ВозвратТекущегоМесяца Тогда
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		КоэффициентСторно    = -1;
		ТипЗаписи = "Прямая";
	Иначе	
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		КоэффициентСторно    = 1;
		ТипЗаписи = "Сторно";
	КонецЕсли;

	СтрокаДокумента.Вставить("СуммаПродажи", СтрокаДокумента.СуммаЗадолженности*КоэффициентСторно);
	СтрокаДокумента.Вставить("СуммаПродажиБезНДС", (СтрокаДокумента.СуммаЗадолженности-СтрокаДокумента.СуммаНДС)*КоэффициентСторно);
	СтрокаДокумента.Вставить("СуммаПродажиНДС", СтрокаДокумента.СуммаНДС*КоэффициентСторно);	

	// Измерения
	Движение.Номенклатура = СтрокаДокумента.Номенклатура;
	Движение.СтатусПартии = Строка.СтатусПартии;
	Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
	Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	Движение.Качество = СтрокаДокумента.Качество;
	Движение.Склад = СтрокаДокумента.Склад;

	Если  ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
		Движение.Склад = СтрокаДокумента.СкладПолучатель;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество = Справочники.Качество.Новый;
	КонецЕсли;

	// Ресурсы
	ПогашаемоеКоличество = Окр(Строка.Количество * КоэффСписания, 3, 1);
	ПогашаемаяСтоимость  = Окр(Строка.Стоимость * КоэффСписания, 2, 1);
	
	Движение.Количество  = КоэффициентСторно*ПогашаемоеКоличество;
	Движение.Стоимость   = КоэффициентСторно*ПогашаемаяСтоимость;
	
	Если ИмяРегистраПартии="ПартииТоваровНаСкладахУпр" Тогда
		ПогашаемаяСтоимостьНУ = Окр(Строка.СтоимостьНУ * КоэффСписания, 2, 1);
		Движение.СтоимостьНУ  = КоэффициентСторно*ПогашаемаяСтоимостьНУ;
	КонецЕсли; 

	Если СокрЛП(СтрокаДокумента.ВидТабличнойЧасти)="ВозвратнаяТара" Тогда
		Если УправлениеМетаданными.ЕстьРеквизит("НеСторнироватьТару", СтрокаДокумента.Регистратор.Метаданные()) Тогда
			Если СтрокаДокумента.Регистратор.НеСторнироватьТару Тогда
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; //03.03.09
	
	// Реквизиты
	Движение.ВидТабличнойЧасти=СтрокаДокумента.ВидТабличнойЧасти;
	
	Если ВозвратТекущегоМесяца тогда
		Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц;
	Иначе
		Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
	КонецЕсли;
	
	Если ПогашаемоеКоличество < КоличествоОсталосьПогасить Тогда
		КоэффПоступления = ПогашаемоеКоличество / КоличествоОсталосьПогасить;
	Иначе
		КоэффПоступления = 1;
	КонецЕсли;
	
	// Сумма выручки в валюте документа - для отчета комитенту
	Движение.СуммаВыручки = КоэффициентСторно*Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
	// Валюты и курсы - для пересчета
	Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
	Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
	Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
		
	// Сумма выручки и сумма НДС  - для учета НДС
	Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
	Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
					
	// Уменьшим сумму в исх. строке
	СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
	СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
	
	СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
	
	КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
	
	Строка.Количество = Строка.Количество - ПогашаемоеКоличество;
	Строка.Стоимость  = Строка.Стоимость  - ПогашаемаяСтоимость;
	Если ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр" Тогда
		Строка.СтоимостьНУ = Строка.СтоимостьНУ- ПогашаемаяСтоимостьНУ;
	КонецЕсли;

	Движение.НомерСтрокиТабличнойЧасти = СтруктураПараметров.НомерСтрокиТабличнойЧасти;
	
	// Списание на себестоимость продаж (сторно)
	Если ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж" Тогда
		СписаниеНаСебестоимостьПродаж(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
	КонецЕсли;

Конецпроцедуры

// Поступление товаров по возврату от покупателя
//
Процедура ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров)
	// Возврат без указания документа партии обрабатывается в модуле документа
	ДокументПартии=СтрокаДокумента.ДокументПартии;
	Если НЕ ЗначениеЗаполнено(ДокументПартии) Тогда Возврат; КонецЕсли;

	ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";
	НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();

	ТаблицаЗаписейОснования = ПолучитьТаблицуЗаписейОснованияВозврата(СтрокаДокумента, СтруктураПараметров, ДокументПартии, НаборОснование, ИмяРегистраПартии);
	
	НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
			
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если КоличествоОсталосьПогасить <= 0 Тогда Прервать; КонецЕсли;
		Если Строка.Количество <= 0 Тогда Продолжить; КонецЕсли;

		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;

		ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров)

	ТаблицыСписанияРасходнымОрдером = Неопределено;
	ТаблицаСписанияРасходнымОрдером = Неопределено;

	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицаСписанияРасходнымОрдером = ТаблицыСписанияРасходнымОрдером.Получить("Упр");
		Если ТаблицаСписанияРасходнымОрдером <> Неопределено тогда
			Возврат ТаблицаСписанияРасходнымОрдером;
		КонецЕсли;
	КонецЕсли;
	
	// Сначала получим таблицу исходного документа
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером1"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	Регистратор=&Регистратор
	|";
	
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	
	ТаблицаСписанияРасходнымОрдером=Запрос.Выполнить().Выгрузить();	

	СтруктураПараметров.Вставить("ОсновнойДокумент",СтрокаДокумента.ОсновнойДокумент);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером2"" КАК QuieryId,
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	СУММА(Строки.Количество) КАК Количество,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|ГДЕ
	|	Строки.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Строки.ОсновнойДокумент = &ОсновнойДокумент
	|	И Строки.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад
	|";

	Запрос.УстановитьПараметр("ДатаНач", ТаблицаСписанияРасходнымОрдером[0].Период);
	Запрос.УстановитьПараметр("ДатаКон", СтрокаДокумента.Период);
	Запрос.УстановитьПараметр("ОсновнойДокумент", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);
	
	ТаблицаОрдеров = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.Период, "Период");
	
	// Пересчет сумм, уже списанных другими расходными ордерами
	Для каждого СтрокаСписания Из ТаблицаСписанияРасходнымОрдером Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, Склад",
										СтрокаСписания.Номенклатура,
										СтрокаСписания.СерияНоменклатуры,
										СтрокаСписания.ХарактеристикаНоменклатуры,
										СтрокаСписания.Склад
										);
		МассивСтрокОрдеров = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
			
		// Серия может быть указана в документе реализации и в ордере или только в ордере
		Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			МассивСтрокСПустойСерией = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
			Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
				МассивСтрокОрдеров.Добавить(Элемент);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаОрдера Из МассивСтрокОрдеров Цикл
			Если СтрокаОрдера.Количество <=0  Тогда Продолжить; КонецЕсли; 
			
			// В накладной и в ордере один и тот же товар может быть в разных строках
			Если СтрокаСписания.Количество > СтрокаОрдера.Количество Тогда
				// полностью списали количество по строке ордера
				КоэффСписания = СтрокаОрдера.Количество/СтрокаСписания.Количество;
				КоэффСписанияОрдера = 1;
			Иначе
				// полностью списали количество по строке накладной
				КоэффСписанияОрдера = СтрокаСписания.Количество/СтрокаОрдера.Количество;
				КоэффСписания = 1;
			КонецЕсли;
			
			КоличествоСписанияОрдера = Окр(КоэффСписанияОрдера * СтрокаОрдера.Количество,3);

			СтрокаСписания.Количество = СтрокаСписания.Количество - КоличествоСписанияОрдера;
			СтрокаОрдера.Количество   = СтрокаОрдера.Количество - КоличествоСписанияОрдера;
	
			СтрокаСписания.СуммаНДС                 = СтрокаСписания.СуммаНДС -Окр(СтрокаСписания.СуммаНДС *КоэффСписания,2);
			СтрокаСписания.СуммаЗадолженностиБУ     = СтрокаСписания.СуммаЗадолженностиБУ - Окр(КоэффСписания * СтрокаСписания.СуммаЗадолженностиБУ, 2);
			СтрокаСписания.СуммаЗадолженности       = СтрокаСписания.СуммаЗадолженности -Окр(СтрокаСписания.СуммаЗадолженности *КоэффСписания,2);
			СтрокаСписания.СтоимостьПоступление   = СтрокаСписания.СтоимостьПоступление - Окр(КоэффСписания * СтрокаСписания.СтоимостьПоступление, 2);
		КонецЦикла;
	
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицыСписанияРасходнымОрдером = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыСписанияРасходнымОрдером.Вставить("Упр", ТаблицаСписанияРасходнымОрдером);
	
	СтруктураПараметров.Вставить("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером);
	
	Возврат ТаблицаСписанияРасходнымОрдером;

КонецФункции

// Списание партий ордерного склада
// Обслуживаются документы:
// 1.Расходный ордер на товары
// 2 Приходный ордер на товары с видом операции "перемещение"
// 3 Поступление товаров и услуг в НТТ с видом операции "перемещение"
// Параметры СтрокаДокумента - 
// СтруктураПараметров - структура, хранящая основные переменные
Процедура СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров)
	ТаблицаСписанияРасходнымОрдером = ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером = Неопределено Или ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры",
									СтрокаДокумента.Номенклатура,
									СтрокаДокумента.СерияНоменклатуры,
									СтрокаДокумента.ХарактеристикаНоменклатуры
									);
									
	// В расходном ордере склад должен совпадать со складом в табличной части основного документа
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
		СтруктураПоиска.Вставить("Склад", СтрокаДокумента.Склад);
	КонецЕсли;

	МассивСтрокСписания = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
	
	// Серия может быть указана в документе реализации или в ордере
	Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
		МассивСтрокСПустойСерией = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
		Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
			МассивСтрокСписания.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	Для Каждого Строка Из МассивСтрокСписания Цикл
		Если КоличествоОсталосьПогасить <=0 Тогда Прервать; КонецЕсли;
		Если Строка.Количество <=0 Тогда Продолжить; КонецЕсли;

		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;

		// Заполнение параметров
		// Список свойств, не заполняющихся в строке ордера по строке реализации
		СписокИсключаемыхСвойств="СерияНоменклатуры,Количество,ОсновнойДокумент,ВидТабличнойЧасти,НомерСтрокиДокумента,Период,Регистратор";

		Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
			СписокИсключаемыхСвойств = СписокИсключаемыхСвойств +",Склад";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Строка,,СписокИсключаемыхСвойств);
		
		ПогашаемоеКоличество = Окр(КоэффСписания * Строка.Количество, 3);
		
		СтрокаДокумента.СуммаНДС               = Окр(КоэффСписания * Строка.СуммаНДС, 2);
		СтрокаДокумента.СуммаЗадолженности     = Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		СтрокаДокумента.СуммаЗадолженностиБУ   = Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		СтрокаДокумента.СтоимостьПоступление   = Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
		СтрокаДокумента.Количество = ПогашаемоеКоличество;

		СписаниеПартий(СтрокаДокумента, СтруктураПараметров, "НаСкладах");
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
		
		Строка.Количество             = Строка.Количество - ПогашаемоеКоличество;
		Строка.СуммаНДС               = Строка.СуммаНДС - Окр(КоэффСписания * Строка.СуммаНДС, 2);
		Строка.СуммаЗадолженности     = Строка.СуммаЗадолженности   - Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		Строка.СуммаЗадолженностиБУ   = Строка.СуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		Строка.СтоимостьПоступление   = Строка.СтоимостьПоступление   - Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
	КонецЦикла;
	
	// Товара не хватило
	Если КоличествоОсталосьПогасить > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Упр. учет. Документ " + СтрокаДокумента.Регистратор + Символы.ПС
		+ "Не найдено в документе списания "+ СтрокаДокумента.ОсновнойДокумент+ " "+ КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, ""));

		СтруктураПараметров.Вставить("Отказ", Истина);
	КонецЕсли;
	
	// Теперь отметим все выполненные движения как принадлежащие документу реализации:
	СтруктураРеквизитовДокумента = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(СтрокаДокумента.ОсновнойДокумент, СтруктураРеквизитовДокумента);
		
	Для Каждого Элемент Из СтруктураПараметров Цикл
		// В каждой таблице движений заполним реквизиты ДокументДвижения и ДокументДвиженияПериод
		Если Лев(Элемент.Ключ,15) = "ТаблицаДвижений" Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
				Если Элемент.Значение.Колонки.Найти("ДокументДвижения")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтрокаДокумента.ОсновнойДокумент, "ДокументДвижения");
				КонецЕсли;
				Если Элемент.Значение.Колонки.Найти("ДокументДвиженияПериод")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтруктураРеквизитовДокумента.Дата, "ДокументДвиженияПериод");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

Процедура ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, Знач МоментКон)
	Если ТаблицаСписания.Количество()=0 Тогда Возврат; КонецЕсли; 
	СтруктураПараметров.Вставить("ТаблицаСписания", ТаблицаСписания); ///*************************	
	
	ПерваяСтрокаТаблицыСписания=ТаблицаСписания[0];
	Регистратор=ПерваяСтрокаТаблицыСписания.Регистратор;

	стрРегистратор=Регистратор.Метаданные().Имя;

	СтруктураПараметров.Вставить("Организация_ПартииТоваровНаСкладах", СтруктураПараметров.Организация);
	СтруктураПараметров.Вставить("СпособОценкиМПЗ", Строка(СтруктураПараметров.УчетнаяПолитика.СпособОценкиМПЗ));
	СтруктураПараметров.Вставить("СтратегияСтатусПартииУпр",  СтруктураПараметров.УчетнаяПолитика.СтратегияСписанияПартийТоваровПоСтатусам);
	//2016 СтруктураПараметров.Вставить("СписыватьПартииРасходнымОрдером", Константы.СписыватьПартииРасходнымОрдером.Получить());
	СтруктураПараметров.Вставить("ТипЗначенияРегистратора", ТипЗнч(Регистратор));
	СтруктураПараметров.Вставить("КодыОпераций", Перечисления.КодыОперацийПартииТоваров);
	Если ЗначениеЗаполнено(ПерваяСтрокаТаблицыСписания.ОсновнойДокумент) Тогда
		СтруктураПараметров.Вставить("ОсновнойДокумент", ПерваяСтрокаТаблицыСписания.ОсновнойДокумент);
	КонецЕсли;

	//Списание по типу цены
	//*****************************************************************************************
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаСписания.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ТипЦены
	|ИЗ
	|	РегистрСведений.НастройкаСписанияПоТипуЦены КАК ИсточникДанных1
	|ГДЕ
	|	ИсточникДанных1.Организация = &Организация
	|	И ИсточникДанных1.Номенклатура В(&Номенклатура)
	|";
	тзНастройкаСписанияПоТипуЦены=Запрос.Выполнить().Выгрузить();
	тзНастройкаСписанияПоТипуЦены.Индексы.Добавить("Номенклатура");
	СтруктураПараметров.Вставить("НастройкаСписанияПоТипуЦены", тзНастройкаСписанияПоТипуЦены);
	//*****************************************************************************************	
	
	СтруктураПараметров.Вставить("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(Регистратор, Истина));

	// Подготовка наборов записей
	ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ПерваяСтрокаТаблицыСписания.Период, Регистратор, Истина);
	
	// В некоторых случаях получать остатки не нужно
	ТребуетсяПолучитьОстатки = Истина;
	
	// Ордерная схема поступления
	Если стрРегистратор="ПоступлениеТоваровУслуг" Или стрРегистратор="АвансовыйОтчет"  тогда
		ТребуетсяПолучитьОстатки = Ложь;

	// Возврат товаров от покупателя (возврат от комиссионера обрабатывается основным алгоритмом списания фактически являясь частным случаем перемещения товаров)
	ИначеЕсли стрРегистратор="ВозвратТоваровОтПокупателя" Тогда
		ТребуетсяПолучитьОстатки = НЕ ПерваяСтрокаТаблицыСписания.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя;
	КонецЕсли;

	Если ТребуетсяПолучитьОстатки Тогда // Добавление в структуру остатков по партионному учету
		ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон);
	КонецЕсли;
	
	СтрокаДокумента=Новый Структура;
	Для Каждого Колонка Из ТаблицаСписания.Колонки Цикл
		СтрокаДокумента.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
		Если СтрокаТаблицыСписания.НеСписывать Тогда Продолжить; КонецЕсли;

		// Сумма НДС и сумма задолженности распределяются на строки списанных партий
		// Однако они впоследствии нужны подсистеме НДС
		СуммаНДС = СтрокаТаблицыСписания.СуммаНДС;
		СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ;
		
		СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", СтрокаТаблицыСписания.НомерСтрокиТабличнойЧасти);

		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицыСписания);

		// Возврат от покупателя
		Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя Тогда
			ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров);

			// Документ, в котором указываются данные, которых нет в документе списания:
			// - Списание партий по расходному ордеру
			// - Перемещение партий по приходному ордеру
		ИначеЕсли  ЗначениеЗаполнено(СтрокаДокумента.ОсновнойДокумент) Тогда
			СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров);
			// Общий случай списания
		Иначе
			// Сначала обрабатывается списание
			СписаниеПартий(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента.ИсточникПоКодуОперации);
		КонецЕсли;

		// Восстановим сумму НДС и сумму задолженности 
		СтрокаДокумента.СуммаНДС = СуммаНДС;
		СтрокаДокумента.СуммаЗадолженностиБУ = СуммаЗадолженностиБУ;
	КонецЦикла; 

	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером") Тогда
		СтруктураПараметров.Удалить("ТаблицыСписанияРасходнымОрдером");
	КонецЕсли;

	// Дополнительные движения по результату списания документом определенных партий		
	ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания);
	ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания);

	ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания);
КонецПроцедуры

Процедура ДвижениеПартийТоваров(ОбрабатываемыйДокумент, СтруктураШД) Экспорт
	//СтруктураПараметров=СтруктураШД;
	СтруктураПараметров=Новый Структура;
	Для каждого СтрокаКоллекции Из СтруктураШД Цикл
		СтруктураПараметров.Вставить(СтрокаКоллекции.Ключ, СтрокаКоллекции.Значение);
	КонецЦикла;
	СтруктураПараметров.Вставить("ЕстьНаСкладах", Ложь);
	СтруктураПараметров.Вставить("ЕстьПереданные", Ложь);	

	СтруктураНаборовЗаписей=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СтруктураНаборовЗаписей");
	Авторезервирование=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Авторезервирование", Ложь);

	ТаблицаСписания=СтруктураШД.ТаблицаСписания;
	
	Если ТаблицаСписания.Количество()=0 Тогда
		НаборЗаписей=РегистрыСведений["СписанныеТовары"].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ОбрабатываемыйДокумент);
		НаборЗаписей.Прочитать();
		ТаблицаСписания=НаборЗаписей.Выгрузить();
		//***ТаблицаСписания=ОбщегоНазначения.Отладка_РС(ОбрабатываемыйДокумент, "СписанныеТовары")).Выгрузить();
	КонецЕсли;

	ТаблицаСписания.Колонки.Добавить("ИсточникПоКодуОперации");

	Если Не СтруктураПараметров.Свойство("ВидДокумента") Тогда
		СтруктураПараметров.Вставить("ВидДокумента", ОбрабатываемыйДокумент.Метаданные().Имя);
	КонецЕсли; 

	Если ТаблицаСписания.Количество() > 0 Тогда
		////Блокировка=Новый БлокировкаДанных;
		////ЭлементБлокировки=Блокировка.Добавить("РегистрНакопления.ПартииТоваровНаСкладах");
		////ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;
		////ЭлементБлокировки.ИсточникДанных=ТаблицаСписания;
		////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
		////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СерияНоменклатуры", "СерияНоменклатуры");
		////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
		//////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОприходования", "ДокументОприходования");
		//////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "");
		//////ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатусПартии", "");
		////Блокировка.Заблокировать();

		Если СтруктураНаборовЗаписей=Неопределено Тогда
			СоздатьНаборыЗаписей(СтруктураПараметров, Истина);
		Иначе
			Для каждого СтрокаКоллекции Из СтруктураНаборовЗаписей Цикл
				СтруктураПараметров.Вставить(СтрокаКоллекции.Ключ, СтрокаКоллекции.Значение);
			КонецЦикла;
		КонецЕсли;

		Для Каждого СтрокаКоллекции Из ТаблицаСписания Цикл
			СтрокаКоллекции.ИсточникПоКодуОперации=ПолучитьИсточникПоКодуОперации(СтрокаКоллекции.КодОперацииПартииТоваров);
			Если СтрокаКоллекции.ИсточникПоКодуОперации="НаСкладах" Тогда
				СтруктураПараметров.ЕстьНаСкладах=Истина;
			ИначеЕсли СтрокаКоллекции.ИсточникПоКодуОперации="Переданные" Тогда
				СтруктураПараметров.ЕстьПереданные=Истина;
			КонецЕсли;
		КонецЦикла;

		ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, СтруктураШД.МоментВремени);

	ИначеЕсли СтруктураПараметров.Свойство("РегистрНакопления_Продажи") Тогда //Только услуги
		СоздатьНаборыЗаписей(СтруктураПараметров);
		ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, СтруктураПараметров.Дата, ОбрабатываемыйДокумент, Истина);
		ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, Неопределено);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ ПО НДС

Процедура ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураПараметров, "УчетНДС") Тогда Возврат; КонецЕсли;
	УчетнаяПолитика=СтруктураПараметров.УчетнаяПолитика;
	Если УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;

	МассивНоменклатуры=ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

	СтруктураШД=СтруктураПараметров;
	
	УчитыватьНДС=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураШД, "УчитыватьНДС", Ложь);	
	//Если Не ЗначениеЗаполнено(УчитыватьНДС) Тогда Возврат; КонецЕсли;
	
	Если Не УчитыватьНДС И НЕ УчетнаяПолитика.СложныйУчетНДС Тогда Возврат; КонецЕсли;
	//***Если Не УчитыватьНДС Тогда Возврат; КонецЕсли;
	
	текТипРегистратора=ТипЗнч(СтруктураПараметров.Регистратор);
	Если текТипРегистратора=Тип("ДокументСсылка.ПередачаВПереработку") тогда
		Возврат;
	КонецЕсли;
	Если текТипРегистратора=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") тогда
		ТаблицаСписания=ПолучитьТаблицуСписанияРасходнымОрдером(ТаблицаСписания[0], СтруктураПараметров);
		Если ТаблицаСписания=Неопределено Тогда Возврат; КонецЕсли; 
	КонецЕсли;

	Если текТипРегистратора=Тип("ДокументСсылка.ЗаказПокупателя") Или текТипРегистратора=Тип("ДокументСсылка.ВнутреннийЗаказ") тогда
		Возврат;
	КонецЕсли;
	
	//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
	Если НЕ УчетнаяПолитика.СложныйУчетНДС тогда 
		СтруктураШД.Вставить("НДСвСтоимостиТоваров", Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
	КонецЕсли;

	ЭтоВозврат=СтруктураШД.ВидДокумента="ВозвратТоваровПоставщику";
				   
	ЭтоВозвратОтПокупателя=СтруктураШД.ВидДокумента="ВозвратТоваровОтПокупателя";
	
	ТаблицаПартий=ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров);

	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(СтруктураШД.Регистратор); Отказ=Ложь;
	
	// Особые случаи списания партий НДС
	Если ЭтоВозврат тогда
		УчетНДС.ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШД, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок);
		Возврат;
	ИначеЕсли ЭтоВозвратОтПокупателя тогда		
		РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШД, СтруктураПараметров);
		УчетНДС.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШД, СтруктураПараметров, РаспределеннаяТаблицаСписания, Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШД, СтруктураПараметров);

	Для каждого СтрокаРаспределеннойТаблицы из РаспределеннаяТаблицаСписания Цикл
		ОтражатьНДСКомитента = СтрокаРаспределеннойТаблицы.Комиссионный И СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС;
		Если ОтражатьНДСКомитента Тогда 
			СтрокаРаспределеннойТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		КонецЕсли;
	КонецЦикла;

	ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШД, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ);

	// Получим таблицу НДС партий
	ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШД, РаспределеннаяТаблицаСписания,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя, СтруктураПараметров);
	
	//Партии не найдены или отражение в партионном учете НДС не производится.
	//Дальнейшая обработка не требуется
	Если ТаблицаНДСПартииСписания.Количество()=0 Тогда Возврат; КонецЕсли;
	
	ВыполнитьДвиженияСписанияНДС(СтруктураШД, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
	
	МассивОрганизаций=ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Организация");
	МассивОрганизаций=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
	
	УдалитьПустыеЭлементы(МассивОрганизаций);
	
	МассивПартий = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Партия");
	МассивПартий = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);

	ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШД, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
	ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШД, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);
	ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШД, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС

Процедура ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШД, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);	
	ДанныеДляОбработки=ОтобратьСтрокиПартийПоКодамОпераций("СписаниеНаЗатраты", ТаблицаНДСПартииСписания,СтруктураПараметров);
	Если ДанныеДляОбработки=Неопределено Тогда Возврат; КонецЕсли;
	
	УчетНДС.СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШД, ДанныеДляОбработки, СтруктураПараметров, Отказ);
КонецПроцедуры

Процедура ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ)	
	Если ТаблицаНДСПартииСписания.Количество()=0 Тогда Возврат; КонецЕсли;

	Строка = "ВозвратОтКомиссионера, ВозвратОтПокупателя, 
			 |Комплектация, ПередачаНаКомиссию, ПеремещениеМеждуСкладами,
			 |РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ";
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	ВыполнятьПоступление=Ложь;
	Если СтруктураШапкиДокумента.ВидДокумента="РеализацияТоваровУслуг" тогда
	//   Если СтруктураШапкиДокумента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И СтруктураШапкиДокумента.УчетнаяПолитика.СложныйУчетНДС Тогда
	//		ВыполнятьПоступление=Истина;
	//	КонецЕсли;
		ВыполнятьПоступление=Ложь;

	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПередачаТМЦ" Тогда
		ВыполнятьПоступление=Ложь;

	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПриходныйОрдерНаТовары" Тогда //28.11.2016
		ВыполнятьПоступление=Ложь;		
	Иначе
		ВыполнятьПоступление=Истина;
	КонецЕсли;
	
	Если ВыполнятьПоступление Тогда
		ТаблицаДвиженийПартии=СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Скопировать();
		ТаблицаДвиженийПартии.Очистить();
		
		ДанныеДляОбработки.Колонки.ЗаказСписания.Имя="ЗаказПокупателя";
			
		Если ТаблицаДвиженийПартии.Колонки.Найти("ЗаказПокупателя")= Неопределено Тогда
			ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвиженийПартии);
		
		ТаблицаДвиженийПартии.Колонки.Добавить("Услуга",Новый ОписаниеТипов("Булево"));
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"Услуга");
		
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ)
	Если Отказ Или НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда Возврат; КонецЕсли;
	Если СтруктураШапкиДокумента.ВидДокумента="РеализацияТоваровУслуг" И УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(СтруктураШапкиДокумента.Подвид)="Корректировка" Тогда Возврат; КонецЕсли; //21.12.11
    Если СтруктураШапкиДокумента.ВидДокумента="КомиссияОтчетПродажиКомиссионера" Тогда Возврат; КонецЕсли;
	СписокОтбора=Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.КодыОперацийПартииТоваров.Реализация);
	СписокОтбора.Добавить(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия);
	СписокОтбора.Добавить(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница);
	
	ПостроительТаблицаПартийНДС=Новый ПостроительЗапроса();
	ПостроительТаблицаПартийНДС.ИсточникДанных=Новый ОписаниеИсточникаДанных(РаспределеннаяТаблицаСписания);

	ЭлементОтбора=ПостроительТаблицаПартийНДС.Отбор.Добавить("КодОперацииПартииТоваров");
	ЭлементОтбора.ВидСравнения=ВидСравнения.ВСписке;
	ЭлементОтбора.Значение=СписокОтбора;
	ЭлементОтбора.Использование=Истина;
		
	ПостроительТаблицаПартийНДС.Выполнить();
	Если ПостроительТаблицаПартийНДС.Результат.Пустой() Тогда Возврат; КонецЕсли;
		
	ДанныеДляОбработки=ПостроительТаблицаПартийНДС.Результат.Выгрузить();

	УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);
КонецПроцедуры

Процедура ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";	
	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	Если Не ДанныеДляОбработки = Неопределено тогда
		УчетНДС.ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Заголовок);
	КонецЕсли;	
КонецПроцедуры

Процедура ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
	// Включение НДС в стоимость может происходить только для строк с перечисленными ниже кодами операций
	СтрокаКодовОпераций = "Комплектация, ПередачаНаКомиссию, ПеремещениеМеждуСкладами, Реализация, 
						  |РеализацияРозница, РеализацияКомиссия, СписаниеНаЗатраты, СписаниеПоИнвентаризации, СписаниеПоОрдеру";

	ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	
	КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();
	КолНДСВключенныйВСтоимость = СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество();
	КолНДСПредъявленный = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество();
	
	Если ДанныеДляОбработки.Количество()>0 тогда
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
			
		// Включение НДС в стоимость
		УчетНДС.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Истина, СтруктураПараметров, Заголовок);
		// Исключение НДС из стоимости
		УчетНДС.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Ложь, СтруктураПараметров, Заголовок);
			
		Если ТаблицаДвиженийПартии.Количество() > 0 тогда
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
		КонецЕсли;
	Иначе
		// партии у которых не произошло включение - исключение НДС из стоимости
		СтрокаКодовОпераций = "РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ, ВозвратОтКомиссионера";
		ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);
	КонецЕсли;

	ТаблицаНДСПартииСписания = ДанныеДляОбработки;
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);
	
	ЭтоРазукомплектация=ТипЗнч(СтруктураШапкиДокумента.Ссылка)=Тип("ДокументСсылка.КомплектацияНоменклатуры") И СтруктураШапкиДокумента.ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;
	
	// НДС по партиям - отразить непосредственое списание.
	Для каждого СтрокаТаблицыНДСПартииСписания Из ТаблицаНДСПартииСписания Цикл
		СтрокаТаблицыНДСПартииСписания.ВидДвижения=ВидДвиженияНакопления.Расход;
		
		// Для ускорения поиска добавим строку в соответствие
		Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий") тогда
			МассивСтрокПоКоду=СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			Если МассивСтрокПоКоду=Неопределено Тогда
				СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров, Новый Массив);
				МассивСтрокПоКоду=СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров];
			КонецЕсли;
			МассивСтрокПоКоду.Добавить(СтрокаТаблицыНДСПартииСписания);
		КонецЕсли; //Удалить!!!	
						
		Движение=ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицыНДСПартииСписания);
		Движение.ВидДвижения=ВидДвиженияНакопления.Расход;

		// Для того, чтобы правильно отразить поступление партий НДС нужно изменить таблицу ТаблицаНДСПартииСписания
		Если СтруктураПараметров.УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СкладПолучатель) тогда
				Движение.Склад=СтрокаТаблицыНДСПартииСписания.СкладПолучатель;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураПараметров.УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая) Или СтрокаТаблицыНДСПартииСписания.ИзменитьХарактеристику тогда
				Движение.ХарактеристикаНоменклатуры=СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая) Или СтрокаТаблицыНДСПартииСписания.ИзменитьСерию тогда
				Движение.СерияНоменклатуры=СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая;
			КонецЕсли;
		КонецЕсли; //Людмила
		
		Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.НоменклатураНовая) тогда
			Движение.Номенклатура=СтрокаТаблицыНДСПартииСписания.НоменклатураНовая;
		КонецЕсли;		
		
		// Если это комплектация - поступление партий НДС выполняется особым способом
		Если СтрокаТаблицыНДСПартииСписания.КодОперацииПартииТоваров=КодыОпераций.Комплектация Тогда
			Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
			Движение.Партия=СтрокаТаблицыНДСПартииСписания.ДокументОприходованияНовый;
			
			ОбнулитьКоличество=СтруктураПараметров["ТаблицаДвиженийНДСПартииТоваров"].НайтиСтроки(Новый Структура("Номенклатура", Движение.Номенклатура)).Количество()>1;			
			Если ОбнулитьКоличество Тогда
				Движение.Количество=0;
			Иначе	
				Движение.Количество=СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;				
			КонецЕсли;		
		КонецЕсли;
		
		Если ЭтоРазукомплектация Тогда 
			//Для каждого СтрокаТаблицыНДСПартииСписания Из СтруктураПараметров.ТаблицаСписания Цикл
			//	Движение=ДобавитьДвижениеВСтруктуруПараметров("НДСПартииТоваров", СтруктураПараметров);
			//	ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицыНДСПартииСписания);
			//	Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
			//	
			//	Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СкладПолучатель) тогда
			//		Движение.Склад=СтрокаТаблицыНДСПартииСписания.СкладПолучатель;
			//	КонецЕсли;
			//	Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая) Или СтрокаТаблицыНДСПартииСписания.ИзменитьХарактеристику тогда
			//		Движение.ХарактеристикаНоменклатуры=СтрокаТаблицыНДСПартииСписания.ХарактеристикаНоменклатурыНовая;
			//	КонецЕсли;
			//	Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая) Или СтрокаТаблицыНДСПартииСписания.ИзменитьСерию тогда
			//		Движение.СерияНоменклатуры=СтрокаТаблицыНДСПартииСписания.СерияНоменклатурыНовая;
			//	КонецЕсли;
			//	Если ЗначениеЗаполнено(СтрокаТаблицыНДСПартииСписания.НоменклатураНовая) тогда
			//		Движение.Номенклатура=СтрокаТаблицыНДСПартииСписания.НоменклатураНовая;
			//	КонецЕсли;
			//	Движение.Количество=СтрокаТаблицыНДСПартииСписания.КоличествоПоступление;
			//КонецЦикла;
			////Прервать;
		КонецЕсли; 
		
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП

Функция РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров) Экспорт

	КопияТаблицыСписания=ТаблицаСписания.Скопировать();

	РаспределеннаяТаблица=КопияТаблицыСписания.Скопировать();
	РаспределеннаяТаблица.Очистить();
	
	// Дополнительные колонки, используемые подсистемой НДС
	СтрокаНазванийКолонок = "Ценность, ВидЦенности, ДоговорПоставщика, Комиссионный, Партия,
							|НДС, СуммаБезНДС, ДокументОприходования,
							|ДокументОприходованияДата,
							|ДоговорКомиссии, УчетАгентскогоНДС,
							|Подразделение";

	СтруктураКолонокРаспределеннойТаблицы = Новый Структура(СтрокаНазванийКолонок);
	
	Для Каждого Элемент из СтруктураКолонокРаспределеннойТаблицы Цикл
		Если РаспределеннаяТаблица.Колонки.Найти(Элемент.Ключ) = Неопределено тогда
			РаспределеннаяТаблица.Колонки.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;

	Для каждого СтрокаТаблицыСписания из КопияТаблицыСписания Цикл
		РегистрУчета = "НаСкладах";

		МассивСтрокПартий = ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаТаблицыСписания, РегистрУчета);
		
		Для Каждого СтрокаПартии из МассивСтрокПартий Цикл
			Если СтрокаПартии.ВидДвижения = ВидДвиженияНакопления.Приход И  Не СтрокаПартии.КодОперации = КодыОпераций.ВозвратОтПокупателя тогда
				Продолжить;
			КонецЕсли;

			Если СтрокаПартии.Количество <= 0 Тогда Продолжить;	КонецЕсли;
			Если СтрокаТаблицыСписания.Количество <= 0 тогда Продолжить; КонецЕсли;

			Если НЕ ПроверитьПартиюНаСкладеУпр(СтрокаПартии, СтрокаТаблицыСписания, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			// НДС по таре не учитывается
			Если СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыСписания.Количество > СтрокаПартии.Количество Тогда
				КоэффСписания = СтрокаПартии.Количество/СтрокаТаблицыСписания.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			СтрокаРаспределеннойТаблицы = РаспределеннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределеннойТаблицы, СтрокаТаблицыСписания);
			
			СтрокаРаспределеннойТаблицы.НДС = Окр(СтрокаТаблицыСписания.СуммаНДС * КоэффСписания,2,1);
			
			СуммаЗадолженностиБУ = Окр(СтрокаТаблицыСписания.СуммаЗадолженностиБУ * КоэффСписания,2,1);
			СтрокаРаспределеннойТаблицы.СуммаБезНДС = СуммаЗадолженностиБУ - СтрокаРаспределеннойТаблицы.НДС;
			
			СтрокаТаблицыСписания.СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ - СуммаЗадолженностиБУ;
			СтрокаТаблицыСписания.СуммаНДС = СтрокаТаблицыСписания.СуммаНДС - СтрокаРаспределеннойТаблицы.НДС;
			СтрокаТаблицыСписания.Количество = СтрокаТаблицыСписания.Количество - СтрокаПартии.Количество;
				
			СтрокаРаспределеннойТаблицы.Количество = СтрокаПартии.Количество;
			СтрокаРаспределеннойТаблицы.КоличествоПоступление = Окр(СтрокаТаблицыСписания.КоличествоПоступление * КоэффСписания,3,1);
			СтрокаРаспределеннойТаблицы.Партия = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.ДокументОприходования = СтрокаПартии.ДокументОприходования;
			СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = СтрокаПартии.КодОперации;
			
			Если СтрокаПартии.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя Тогда
				СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
			КонецЕсли;

			СтрокаПартии.Количество = 0;
			СтрокаТаблицыСписания.КоличествоПоступление = СтрокаТаблицыСписания.КоличествоПоступление - СтрокаРаспределеннойТаблицы.КоличествоПоступление;
			
			СтрокаРаспределеннойТаблицы.Ценность = СтрокаРаспределеннойТаблицы.Номенклатура;
			СтрокаРаспределеннойТаблицы.Комиссионный = СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию;

			Если СтрокаРаспределеннойТаблицы.Комиссионный тогда
				Если ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования) Тогда
					СтруктураРеквизитовДокумента = Новый Структура("Контрагент,ДоговорКонтрагента");
					ПолучитьРеквизитыОбъекта(СтрокаПартии.ДокументОприходования, СтруктураРеквизитовДокумента);

					СтрокаРаспределеннойТаблицы.ДоговорКомиссии = СтруктураРеквизитовДокумента.ДоговорКонтрагента;

					СтруктураРеквизитовДоговора = Новый Структура("УчетАгентскогоНДС");
					ПолучитьРеквизитыОбъекта(СтруктураРеквизитовДокумента.ДоговорКонтрагента, СтруктураРеквизитовДоговора);

					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = СтруктураРеквизитовДоговора.УчетАгентскогоНДС;
				Иначе
					СтрокаРаспределеннойТаблицы.УчетАгентскогоНДС = Ложь;
				КонецЕсли;
			КонецЕсли;

			СтрокаРаспределеннойТаблицы.ВидЦенности	= Перечисления.ВидыЦенностей.Товары;
		КонецЦикла; //Для Каждого СтрокаПартии из МассивСтрокПартий цикл

		Если СтрокаТаблицыСписания.Количество > 0 И НЕ СтрокаТаблицыСписания.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
			СтрокаРаспределеннойТаблицы = РаспределеннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределеннойТаблицы,СтрокаТаблицыСписания);

			Если СтрокаРаспределеннойТаблицы.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя Тогда
				СтрокаРаспределеннойТаблицы.СкладПолучатель = СтрокаРаспределеннойТаблицы.Склад;
			КонецЕсли;

			СтрокаРаспределеннойТаблицы.Ценность = СтрокаРаспределеннойТаблицы.Номенклатура;
			СтрокаРаспределеннойТаблицы.ВидЦенности	= Перечисления.ВидыЦенностей.Товары;
			СтрокаРаспределеннойТаблицы.НДС   = СтрокаТаблицыСписания.СуммаНДС;
			СтрокаРаспределеннойТаблицы.СуммаБезНДС = СтрокаТаблицыСписания.СуммаЗадолженностиБУ - СтрокаТаблицыСписания.СуммаНДС;
			СтрокаРаспределеннойТаблицы.Комиссионный = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РаспределеннаяТаблица;	
КонецФункции

Функция ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаПартийНДС, СтруктураПараметров)
Перем СоответствиеКодовОперацийСтрокамНДСПартий;

	тзРезультат=ТаблицаПартийНДС.СкопироватьКолонки();
		
	Если СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий", СоответствиеКодовОперацийСтрокамНДСПартий) тогда
		СтруктураКодовОпераций=Новый Структура(СтрокаКодовОпераций);
		Для каждого Элемент Из СтруктураКодовОпераций Цикл
			МассивСтрокПоКодуОперации=СоответствиеКодовОперацийСтрокамНДСПартий[Перечисления.КодыОперацийПартииТоваров[Элемент.Ключ]];
			Если МассивСтрокПоКодуОперации=Неопределено Тогда Продолжить; КонецЕсли; 
			Для Каждого СтрокаТаблицы ИЗ МассивСтрокПоКодуОперации Цикл
				ЗаполнитьЗначенияСвойств(тзРезультат.Добавить(), СтрокаТаблицы);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат тзРезультат;
КонецФункции

Функция ПолучитьТаблицуПартийДляСписанияНДС(СтруктураПараметров)
	КодыОпераций=Перечисления.КодыОперацийПартииТоваров;
	
	ТаблицаПартий=СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Скопировать();
	ТаблицаПартий.Очистить();
	ТаблицаПартий.Колонки.Добавить("РегистрУчета");
	Для каждого СтрокаПартииНаСкладах из СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр Цикл
		Если СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Расход 
			ИЛИ (СтрокаПартииНаСкладах.ВидДвижения = ВидДвиженияНакопления.Приход И СтрокаПартииНаСкладах.КодОперации=КодыОпераций.ВозвратОтПокупателя) тогда
			CтрокаПартии = ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии,СтрокаПартииНаСкладах);
			Если СтрокаПартииНаСкладах.КодОперации = КодыОпераций.ВозвратОтПокупателяТекущийМесяц тогда
				// Возврат текущего месяца учитывается как сторно реализации
				CтрокаПартии.Количество = - CтрокаПартии.Количество;
				CтрокаПартии.Стоимость  = - CтрокаПартии.Стоимость;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаПартииПереданные Из СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр Цикл
		Если СтрокаПартииПереданные.ВидДвижения=ВидДвиженияНакопления.Расход тогда
			CтрокаПартии=ТаблицаПартий.Добавить();
			ЗаполнитьЗначенияСвойств(CтрокаПартии, СтрокаПартииПереданные);
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаПартий;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ

Процедура СформироватьТекстЗапроса_УчетПартийТМЦ(Запрос, СтруктураПараметров)
	СтратегияСтатусПартии=СтруктураПараметров.СтратегияСтатусПартииУпр;
	СпособОценкиМПЗ=СтруктураПараметров.СпособОценкиМПЗ;

	Запрос.Текст="
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	УчетПартийТМЦ.Номенклатура,
	|	УчетПартийТМЦ.ДокументОприходования КАК ДокументОприходования,
	|	УчетПартийТМЦ.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	УчетПартийТМЦ.Склад,
	|	УчетПартийТМЦ.Организация,
	|	УчетПартийТМЦ.ХарактеристикаНоменклатуры,
	|	УчетПартийТМЦ.СерияНоменклатуры,
	|	УчетПартийТМЦ.Качество,
	|	УчетПартийТМЦ.КоличествоОстаток КАК Количество,
	|	УчетПартийТМЦ.КоличествоДопОстаток КАК КоличествоДоп,
	|
	|	Выбор Когда ЕСТЬNULL(УчетПартийТМЦ.СтоимостьОстаток, 0) <= 0 Тогда 0 
	|		Иначе УчетПартийТМЦ.СтоимостьОстаток
	|		Конец КАК Стоимость,
    |
	|	Выбор Когда ЕСТЬNULL(УчетПартийТМЦ.СтоимостьНУОстаток, 0) <= 0 Тогда 0 
	|		Иначе УчетПартийТМЦ.СтоимостьНУОстаток
	|		Конец КАК СтоимостьНУ,
    |
	|	УчетПартийТМЦ.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = УчетПартийТМЦ.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = УчетПартийТМЦ.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА УчетПартийТМЦ.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	//|	НастройкаСписанияПоТипуЦены.ТипЦены Как ТипЦеныСписания
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Дат,
	
	|		Номенклатура В
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Номенклатура
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)
	
	|		И Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка) 
	|
	|		И 	Организация В (&Организации)
	|
	|					) КАК УчетПартийТМЦ
	|
	|		ПО СписанныеТовары.Номенклатура = УчетПартийТМЦ.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = УчетПартийТМЦ.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА УчетПартийТМЦ.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА УчетПартийТМЦ.Качество = &КачествоНовый
	|						ИНАЧЕ УчетПартийТМЦ.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|		И (УчетПартийТМЦ.Склад = СписанныеТовары.Склад)

	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА УчетПартийТМЦ.СтатусПартии = &ПустойСтатус
	|							ИЛИ УчетПартийТМЦ.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ УчетПартийТМЦ.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ УчетПартийТМЦ.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ УчетПартийТМЦ.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ УчетПартийТМЦ.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (СписанныеТовары.СерияНоменклатуры = УчетПартийТМЦ.СерияНоменклатуры)
	|		И (СписанныеТовары.Организация = УчетПартийТМЦ.Организация ИЛИ УчетПартийТМЦ.Организация = &ПустаяОрганизация)
	//*** |		И (СписанныеТовары.ДокументПартии = УчетПартийТМЦ.ДокументОприходования) //21.05.18
	|		И (СписанныеТовары.Регистратор = &ОсновнойДокумент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	ДокументОприходованияДата" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|";
КонецПроцедуры

Процедура ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхеме(Запрос, СтратегияСтатусПартии, СпособОценкиМПЗ)
	ВестиПартионныйУчетПоСкладам=Истина;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	//*** |	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	//|	ВЫБОР
	//|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	//|					ТОГДА 1
	//|				ИНАЧЕ 0
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Дат,
	|		Номенклатура В
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Номенклатура
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	//|		И (ВЫБОР
	//|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	//|				ТОГДА ВЫБОР
	//|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	//|							ТОГДА ВЫБОР
	//|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	//|										ТОГДА ЛОЖЬ
	//|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	//|								КОНЕЦ
	//|						ИНАЧЕ ИСТИНА
	//|					КОНЕЦ
	//|			ИНАЧЕ ВЫБОР
	//|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	//|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	//|					ИНАЧЕ ИСТИНА
	//|				КОНЕЦ
	//|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|
	|			И (СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
	|				ИЛИ ПартииТоваровНаСкладах.Организация = &ПустаяОрганизация)
	|
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	//|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	ДокументОприходованияДата" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|";
КонецПроцедуры

Функция ПолучитьДеревоПартийНаСкладах(МоментКон, СтруктураПараметров)
	Если Константы.РассчитыватьОстаткиПриСписанииНаКонецДня.Получить() Тогда
		текДата=?(ТипЗнч(МоментКон)=Тип("МоментВремени"), МоментКон.Дата, МоментКон);
		ДатаОстатков=Новый Граница(КонецДня(текДата), ВидГраницы.Включая);
		//*** ДатаОстатков=Новый Граница(КонецДня(текДата), ВидГраницы.Исключая);
	Иначе
		ДатаОстатков=Новый Граница(МоментКон, ВидГраницы.Включая);
		//*** ДатаОстатков=Новый Граница(МоментКон, ВидГраницы.Исключая);
		//** ДатаОстатков=МоментКон.Дата;
	КонецЕсли;
	
	ОрганизацияСсылка=СтруктураПараметров.Организация_ПартииТоваровНаСкладах;
	
	ОсновнойДокумент=Неопределено; СтруктураПараметров.Свойство("ОсновнойДокумент", ОсновнойДокумент);

	МассивОрганизаций=Новый Массив;
	МассивОрганизаций.Добавить(ОрганизацияСсылка);
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказВнутренний", Документы.ВнутреннийЗаказ.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("Неопределено", Неопределено);
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);	
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.Регистратор);	
	Запрос.УстановитьПараметр("ОсновнойДокумент", ?(ОсновнойДокумент=Неопределено, СтруктураПараметров.Регистратор, ОсновнойДокумент));
	Запрос.УстановитьПараметр("Дат", ДатаОстатков);
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	//*** Запрос.УстановитьПараметр("СписанныеТовары", СтруктураПараметров.СписанныеТовары);
	
	Если НЕ ОсновнойДокумент=Неопределено тогда
		// Списание партий по ордерной схеме: 
		// - Списание партий по расходному ордеру
		// - Перемещение партий по приходному ордеру
		// - Перемещение партий поступлением товаров и услуг в НТТ
		// Движения реализации выполняет расходный ордер, движения перемещения выполняет приходный ордер
		ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхеме(Запрос, СтруктураПараметров.СтратегияСтатусПартииУпр, СтруктураПараметров.СпособОценкиМПЗ);
	Иначе
		// Общий случай списания
		//Если Константы.УчетЗаказовНаПроизводство.Получить() Тогда
		//	//А__СформироватьТекстЗапроса_УчетПартийТМЦ(Запрос, СтратегияСтатусПартии, СпособОценкиМПЗ);
		//	E_СформироватьТекстЗапроса_УчетПартийТМЦ(Запрос, СтратегияСтатусПартии, СпособОценкиМПЗ);
		//Иначе
			//T_СформироватьТекстЗапроса_УчетПартийТМЦ(Запрос, СтратегияСтатусПартии, СпособОценкиМПЗ)
			
			СформироватьТекстЗапроса_УчетПартийТМЦ(Запрос, СтруктураПараметров);
			
		//КонецЕсли; 
		
		//****А_СформироватьТекстЗапроса_УчетПартийТМЦ(Запрос, СтруктураПараметров);	
	КонецЕсли;

	//**** Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Script=Новый COMОбъект("MSScriptControl.ScriptControl");
	//Script.Language="javascript";
	//ВремяНачало=ОбщегоНазначения.ЗамерПроизводительности(Script);
	
	Результат=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//ВсегоВремя=ОбщегоНазначения.ЗамерПроизводительности(Script)-ВремяНачало;
	//Сообщить("Время: "+ВсегоВремя);	
	
	Возврат Результат;
КонецФункции

Функция ПолучитьДеревоПартийПереданные(МоментКон, ДоговорКонтрагента, СтруктураПараметров)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);	
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.Организация,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Дата КАК ДокументПередачиДата,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СтатусПартии,
	|	ПартииТоваровПереданные.СтатусПередачи,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        РегистрСведений.СписанныеТовары.Номенклатура
	|																					    ИЗ
	|																					        РегистрСведений.СписанныеТовары
	|																					    ГДЕ
	|																					        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" +
																						?(ДоговорКонтрагента = Неопределено, "", "
	|																					 	И ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (СписанныеТовары.Организация = ПартииТоваровПереданные.Организация ИЛИ ПартииТоваровПереданные.Организация = &ПустаяОрганизация)
	|			И (ПартииТоваровПереданные.СтатусПартии = &ПустойСтатус
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = &СтатусПартииПоОрдеру
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтруктураПараметров.СтратегияСтатусПартииУпр=Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+?(СтруктураПараметров.СпособОценкиМПЗ = "По средней", " ДокументПередачиДата Возр,", "") + "
	|	ДокументОприходованияДата" + ?(СтруктураПараметров.СпособОценкиМПЗ = "ЛИФО", " Убыв"," Возр") + ",
	|	ДокументОприходования" + ?(СтруктураПараметров.СпособОценкиМПЗ = "ЛИФО", " Убыв"," Возр") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|";	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
КонецФункции

Процедура ПолучитьОстаткиПартийНаСкладах(СтруктураПараметров, МоментКон)
	
	СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахУпр",	ПолучитьДеревоПартийНаСкладах(МоментКон, СтруктураПараметров));
	
	//******************** 03.07.14
	////Если НЕ СтруктураПараметров.ДеревоПартииТоваровНаСкладахУпр.Колонки.Найти("Порядок")=Неопределено Тогда
	////	тчСделки=СтруктураПараметров.Ссылка.Сделки;
	////	Если НЕ тчСделки.Количество()=0 Тогда
	////		СтруктураОтбора=Новый Структура("Порядок", 1000);
	////		МассивСтрок=СтруктураПараметров.ДеревоПартииТоваровНаСкладахУпр.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	////		Для каждого СтрокаКоллекции Из МассивСтрок Цикл
	////			ДанныеПоиска=тчСделки.Найти(СтрокаКоллекции.Заказ, "Сделка");
	////			Если НЕ ДанныеПоиска=Неопределено Тогда
	////				СтрокаКоллекции.Порядок=тчСделки.Индекс(ДанныеПоиска);
	////			КонецЕсли;
	////		КонецЦикла;
	////		СтруктураПараметров.ДеревоПартииТоваровНаСкладахУпр.Строки.Сортировать("Порядок Возр", Истина);
	////	КонецЕсли;
	////КонецЕсли; 
	//******************** 03.07.14 07.09.2016
	
	СтруктураИзмерений=Новый Структура;
	ТаблицаОстатковПартий=Новый ТаблицаЗначений;
	Для Каждого Измерение Из Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения Цикл
		СтруктураИзмерений.Вставить(Измерение.Имя);
		ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
	КонецЦикла;
	ТаблицаОстатковПартий.Колонки.Добавить("КоличествоДоп");
	ТаблицаОстатковПартий.Колонки.Добавить("Количество");
	ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
	ТаблицаОстатковПартий.Колонки.Добавить("СтоимостьНУ");

	СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр"+"СтруктураИзмерений", СтруктураИзмерений);
	СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр"+"ТаблицаОстатков", ТаблицаОстатковПартий);	
КонецПроцедуры

Процедура ПолучитьОстаткиПартийПереданных(СтруктураПараметров, МоментКон, ДоговорКонтрагента)
	
	СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеУпр", ПолучитьДеревоПартийПереданные(МоментКон, ДоговорКонтрагента, СтруктураПараметров));
		
	СтруктураИзмерений = Новый Структура;
	ТаблицаОстатковПартий = Новый ТаблицаЗначений;
	Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданные.Измерения Цикл
		СтруктураИзмерений.Вставить(Измерение.Имя);
		ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
	КонецЦикла;
	ТаблицаОстатковПартий.Колонки.Добавить("Количество");
	ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
	СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "СтруктураИзмерений", СтруктураИзмерений);
	СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);
	
КонецПроцедуры

Процедура ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон)
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		ПолучитьОстаткиПартийНаСкладах(СтруктураПараметров, МоментКон);
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		ПолучитьОстаткиПартийПереданных(СтруктураПараметров, МоментКон, ТаблицаСписания[0].ДоговорКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий)
	
	ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаПартииРаспределения);
	МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТаблицы = ТаблицаОстатковПартий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПартииРаспределения);
	Иначе
		СтрокаТаблицы = МассивСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
		
Конецфункции

Процедура ОчиститьДвиженияРегистратора(ДокументСсылка, стрРегистр)
	НаборЗаписей=РегистрыНакопления[стрРегистр].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры
 
Функция Провести(ДокументСсылка, МассивРегистров) Экспорт
	ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрыДляПроведения", МассивРегистров);
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		ОчиститьДвиженияРегистратора(ДокументСсылка, "ПартииТоваровНаСкладах");
		ОчиститьДвиженияРегистратора(ДокументСсылка, "Продажи");
		ОчиститьДвиженияРегистратора(ДокументСсылка, "НДСНачисленный");
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

	//ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
	//
	//ТипДок=ТипЗнч(ДокументСсылка); Отказ=Ложь;
	//Если ТипДок=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	ДокументОбъект.ДополнительныеСвойства.Вставить("Заголовок", ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ДокументОбъект));
	//	ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрыДляПроведения", МассивРегистров);
	//	ДокументОбъект.ДополнительныеСвойства.Вставить("СтруктураШД", УправлениеДокументамиСервер.СформироватьСтруктуруШД(ДокументОбъект));
	//	ДокументОбъект.ДополнительныеСвойства.Вставить("СтруктураТД", Новый Структура("Услуги", ДокументОбъект.СформироватьТаблицу_Услуги(ДокументОбъект.ДополнительныеСвойства.СтруктураШД, Отказ, ДокументОбъект.ДополнительныеСвойства.Заголовок)));
	//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЕсли;
КонецФункции

Функция СформироватьТаблицуОстатков(Организация, Номенклатура, ХарактеристикаНоменклатуры=Неопределено, СерияНоменклатуры=Неопределено) Экспорт
	стрУсловие1="Организация = &Организация И Номенклатура В (&Номенклатура)";
	Если НЕ ХарактеристикаНоменклатуры=Неопределено Тогда
		стрУсловие1=стрУсловие1+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	КонецЕсли;
	
	стрУсловие2=стрУсловие1;	
	Если НЕ СерияНоменклатуры=Неопределено Тогда
	    стрУсловие2=стрУсловие2+" И СерияНоменклатуры  В (&СерияНоменклатуры)";
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.Параметры.Вставить("МоментВремени", ТекущаяДата());
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
	Запрос.Параметры.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.Параметры.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Номенклатура Как Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры Как ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.СерияНоменклатуры Как СерияНоменклатуры,
	|	ИсточникДанных1.КоличествоОстаток Как Остаток,
	|	0 Как Потребность,
	|	0 Как Резерв
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментВремени, "+стрУсловие2+") КАК ИсточникДанных1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ИсточникДанных1.Номенклатура Как Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры Как ХарактеристикаНоменклатуры,
	|	Неопределено,
	|	0 Как Остаток,
	|	ИсточникДанных1.КоличествоОстаток Как Потребность,
	|	0 Как Резерв
	|ИЗ
	|	РегистрНакопления.УчетПотребностей.Остатки(&МоментВремени, "+стрУсловие1+") КАК ИсточникДанных1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсточникДанных1.Номенклатура Как Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры Как ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.СерияНоменклатуры Как СерияНоменклатуры,
	|	0 Как Остаток,
	|	0 Как Потребность,
	|	ИсточникДанных1.КоличествоОстаток Как Резерв
	|ИЗ
	|	РегистрНакопления.УчетРезервовТМЦ.Остатки(&МоментВремени, "+стрУсловие2+") КАК ИсточникДанных1
	|";
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзДанные.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры", "Остаток,Потребность,Резерв");

	Возврат тзДанные;
КонецФункции
