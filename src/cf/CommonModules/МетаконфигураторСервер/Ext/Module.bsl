Функция АтрибутИзСтроки(Знач стрАтрибут) Экспорт
	//стрАтрибут=Сред(стрАтрибут, 3);
	стрАтрибут=Сред(стрАтрибут, СтрНайти(стрАтрибут, "_____")+5);
	стрАтрибут=стрЗаменить(стрАтрибут, "__", Символы.ПС);

	стрТипСсылки=стрЗаменить(СтрПолучитьСтроку(стрАтрибут, 1), "_", ".");

	стрИдентификаторСсылки=СтрПолучитьСтроку(стрАтрибут, 2);
	стрИдентификаторСсылки=стрЗаменить(стрИдентификаторСсылки, "_", "-");

	Возврат XMLЗначение(Тип(стрТипСсылки), стрИдентификаторСсылки);	
КонецФункции

Функция АтрибутВСтроку(АтрибутСсылка, стрВладелецАтрибута) Экспорт
	стрИдентификатор=СтрЗаменить(XMLСтрока(АтрибутСсылка), "-", "_");
	стрТип=СтрЗаменить(XMLТип(ТипЗнч(АтрибутСсылка)).ИмяТипа, ".", "_");
	//Возврат "Д_"+стрТип+"__"+стрИдентификатор;
	Возврат "Д_"+стрВладелецАтрибута+"_____"+стрТип+"__"+стрИдентификатор;
КонецФункции 

Функция УсловиеВыполнено(стрИсточникДанных, стрНастройкиОтбора, Ссылка) Экспорт
	Если ПустаяСтрока(стрНастройкиОтбора) Тогда Возврат Истина; КонецЕсли;

	СхемаКомпоновкиДанных=Новый СхемаКомпоновкиДанных;

	ИсточникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя="ИсточникДанных";
	ИсточникДанных.СтрокаСоединения="";
	ИсточникДанных.ТипИсточникаДанных="Local";
	
	НаборДанных=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя="НаборДанных";
	НаборДанных.ИсточникДанных="ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей=Истина;
	НаборДанных.Запрос="
	|Выбрать *, &ТекущийПользователь Как ТекущийПользователь
	|Из "+СтрЗаменить(стрИсточникДанных, "_", ".")+" Как ИсточникДанных
	|Где Ссылка = &Ссылка
	|";
	КомпоновщикНастроек=Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(УниверсальныеМеханизмыСервер.ЗначениеИзСтрокиXML(стрНастройкиОтбора));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", Ссылка);
		
	ГруппировкаКомпоновкиДанных=КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ПолеГруппировки=ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование=Истина;
	ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных("Ссылка");
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	тзДанные=Новый ТаблицаЗначений;
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	ПроцессорВывода.УстановитьОбъект(тзДанные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат НЕ тзДанные.Количество()=0; 
КонецФункции

Функция ПолучитьСтруктуруПеременнойИзСтроки(Знач стр)
	поз1=Найти(стр, "{")+1; поз2=Найти(стр, "}")-поз1;
	ПутьКДанным=Сред(стр, поз1, поз2);
	стрБуфер=стрЗаменить(ПутьКДанным, ".", Символы.ПС);
	СтруктураПеременнной=Новый Структура;
	СтруктураПеременнной.Вставить("ПутьКДанным", ПутьКДанным);
	СтруктураПеременнной.Вставить("ИмяВладельца", СтрПолучитьСтроку(стрБуфер, 1));
	СтруктураПеременнной.Вставить("ИмяРеквизита", СтрПолучитьСтроку(стрБуфер, 2));
	Возврат СтруктураПеременнной;
КонецФункции

Функция ВладелецАтрибутаПоСсылкеНаОбъект(СсылкаНаОбъект, ИмяТабличнойЧасти=Неопределено) Экспорт
	Если СсылкаНаОбъект.Пустая() Тогда Возврат Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка(); КонецЕсли;

	стрПуть=СсылкаНаОбъект.Метаданные().ПолноеИмя()+"."+?(ИмяТабличнойЧасти=Неопределено, "Реквизиты", ИмяТабличнойЧасти);
	
	Владелец=Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", стрПуть);
	Если НЕ Владелец.Пустая() Тогда Возврат Владелец; КонецЕсли;

	Возврат Справочники.ИдентификаторыОбъектовМетаданных[СтрЗаменить(стрПуть, ".", "_")];
КонецФункции

Функция РеквизитПоСтроке(стрАтрибут) Экспорт
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду(стрАтрибут);
КонецФункции

Функция ВладелецПоСтроке(стрВладелец) Экспорт
	Возврат УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(стрВладелец);	
	//Возврат Справочники.ИдентификаторыОбъектовМетаданных[стрВладелец];
КонецФункции	 

Процедура ЗначениеРеквизитаУстановить(Ссылка, Реквизит, Значение, Владелец=Неопределено, Ключ="") Экспорт
	Если ТипЗнч(Реквизит)=Тип("Строка") Тогда
		Реквизит=ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду(Реквизит);
		Если Реквизит.Пустая() Тогда Возврат; КонецЕсли;
	КонецЕсли;

	Если Владелец=Неопределено Тогда
		Владелец=ВладелецАтрибутаПоСсылкеНаОбъект(Ссылка);
	ИначеЕсли ТипЗнч(Владелец)=Тип("Строка") Тогда //Имя табличной части
		Владелец=ВладелецАтрибутаПоСсылкеНаОбъект(Ссылка, Владелец);
	КонецЕсли;
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Реквизит", Реквизит);
	СтруктураПоиска.Вставить("Владелец", Владелец);
	Если НЕ ПустаяСтрока(Ключ) Тогда
		СтруктураПоиска.Вставить("Ключ", Ключ);	
	КонецЕсли;

	Объект=Ссылка.ПолучитьОбъект();

	МассивСтрок=Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество()=0 Тогда
		НоваяСтрока=Объект.ДополнительныеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		НоваяСтрока.Значение=Значение;
	Иначе
		МассивСтрок[0].Значение=Значение;
	КонецЕсли;

	Объект.Записать();
КонецПроцедуры

Функция ЗначениеРеквизита(Ссылка, стрПутьКДанным, стрКлюч="") Экспорт
	МассивСтрок=стрРазделить(стрПутьКДанным, ".");

	стрВладелец=УправлениеКонфигурациейСервер.ТипОбъекта(Ссылка, 1, "_")+"_"+МассивСтрок[0];
	стрРеквизит=МассивСтрок[1];

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ВладелецПоСтроке(стрВладелец));
	Запрос.УстановитьПараметр("Реквизит", РеквизитПоСтроке(стрРеквизит));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Ключ", стрКлюч);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникДанных.Ссылка,
	|	ИсточникДанных.Реквизит,
	|	ИсточникДанных.Ключ,
	|	ИсточникДанных.Значение
	|ИЗ
	|	"+Ссылка.Метаданные().ПолноеИмя()+".ДополнительныеРеквизиты КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|	И ИсточникДанных.Ключ = &Ключ
	|	И ИсточникДанных.Реквизит = &Реквизит
	|	И ИсточникДанных.Владелец = &Владелец
	|";
	ОбъектВыборка=Запрос.Выполнить().Выбрать();
	Возврат ?(ОбъектВыборка.Следующий(), ОбъектВыборка.Значение, Неопределено);
КонецФункции

Функция ПолноеИмяОбъектаПоСсылке(ИдентификаторОбъектаМетаданныхСсылка) Экспорт
	Если ИдентификаторОбъектаМетаданныхСсылка.Предопределенный Тогда
		Возврат стрЗаменить(ИдентификаторОбъектаМетаданныхСсылка.ИмяПредопределенныхДанных, "_", ".");
	КонецЕсли;

	стрПолноеИмя=ИдентификаторОбъектаМетаданныхСсылка.ПолноеИмя;
	Если ПустаяСтрока(стрПолноеИмя) Тогда
		ОбновитьИдентификаторыОбъектовМетаданных();
		стрПолноеИмя=ИдентификаторОбъектаМетаданныхСсылка.ПолноеИмя;
	КонецЕсли;
	
	Возврат стрПолноеИмя;
КонецФункции	 

Процедура ОбновитьИдентификаторыОбъектовМетаданных() Экспорт
	МассивМетаданных=Новый Массив;
	МассивМетаданных.Добавить("Справочники");
	МассивМетаданных.Добавить("Документы");
	МассивМетаданных.Добавить("Задачи");
	МассивМетаданных.Добавить("РегистрыБухгалтерии");
	МассивМетаданных.Добавить("РегистрыНакопления");
	МассивМетаданных.Добавить("РегистрыСведений");
	//МассивМетаданных.Добавить("Отчеты");
	//МассивМетаданных.Добавить("Обработки");
	Для каждого ВидОбъектаМетаданных Из МассивМетаданных Цикл
		РодительВидОбъектаМетаданных=Справочники.ИдентификаторыОбъектовМетаданных[ВидОбъектаМетаданных];
		Для каждого мдОбъект Из Метаданные[ВидОбъектаМетаданных] Цикл
			Попытка
				СправочникСсылка=Справочники.ИдентификаторыОбъектовМетаданных[стрЗаменить(мдОбъект.ПолноеИмя(), ".", "_")];
				СправочникОбъект=СправочникСсылка.ПолучитьОбъект();
				СправочникОбъект.ПолноеИмя=мдОбъект.ПолноеИмя();
				СправочникОбъект.Записать();
			Исключение
				РодительЭлемента=Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", мдОбъект.ПолноеИмя(), РодительВидОбъектаМетаданных);
				Если РодительЭлемента.Пустая() Тогда
					РодительЭлемента=Справочники.ИдентификаторыОбъектовМетаданных.СоздатьЭлемент();
					РодительЭлемента.Родитель=РодительВидОбъектаМетаданных;
					РодительЭлемента.ПолноеИмя=мдОбъект.ПолноеИмя();
					РодительЭлемента.Наименование=мдОбъект.Представление();
					РодительЭлемента.Записать();
				КонецЕсли;
				Если ВидОбъектаМетаданных="Справочники" Или ВидОбъектаМетаданных="Документы" Или ВидОбъектаМетаданных="Задачи" Тогда
					ЭлементСправочника=Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", мдОбъект.ПолноеИмя()+".Реквизиты", РодительЭлемента.Ссылка);
					Если ЭлементСправочника.Пустая() Тогда
						ЭлементСправочника=Справочники.ИдентификаторыОбъектовМетаданных.СоздатьЭлемент();
						ЭлементСправочника.Родитель=РодительЭлемента.Ссылка;
						ЭлементСправочника.ПолноеИмя=мдОбъект.ПолноеИмя()+".Реквизиты";
						ЭлементСправочника.Наименование="Реквизиты";
						ЭлементСправочника.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//////Функция НастройкиПоПравилам(Знач ИсточникДанных, стрРегистр="НастройкиФормыОбъекта") Экспорт
//////	Если ТипЗнч(ИсточникДанных)=Тип("Строка") Тогда //Например: Документ.ЗаказПокупателя
//////		ИсточникДанных=Справочники.ИдентификаторыОбъектовМетаданных[СтрЗаменить(ИсточникДанных, ".", "_")];
//////	КонецЕсли;

//////	Запрос=Новый Запрос;
//////	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
//////	Запрос.Текст="
//////	|ВЫБРАТЬ
//////	|Ложь Как ИсключитьСтроку,
//////	|500 Как ИндексПользователя,
//////	|*
//////	|ИЗ
//////	|	РегистрСведений."+стрРегистр+" КАК Настройки
//////	|ГДЕ
//////	|	Настройки.ИсточникДанных = &ИсточникДанных
//////	|";
//////	тзПравила=Запрос.Выполнить().Выгрузить();

//////	Пользователь=ПараметрыСеанса.ТекущийПользователь;
//////	Для Каждого СтрокаКоллекции Из тзПравила Цикл
//////		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Пользователь) Тогда Продолжить; КонецЕсли;

//////		Если СтрокаКоллекции.Пользователь.ЭтоГруппа И Пользователь.ПринадлежитЭлементу(СтрокаКоллекции.Пользователь) Тогда
//////			СтрокаКоллекции.ИндексПользователя=СтрокаКоллекции.Пользователь.Уровень();
//////		ИначеЕсли СтрокаКоллекции.Пользователь=Пользователь Тогда
//////			СтрокаКоллекции.ИндексПользователя=1;
//////		Иначе
//////			СтрокаКоллекции.ИндексПользователя=1000;
//////			СтрокаКоллекции.ИсключитьСтроку=Истина;
//////		КонецЕсли;
//////	КонецЦикла;

//////	Если тзПравила.Количество()=0 Тогда Возврат Неопределено; КонецЕсли;

//////	МассивСтрок=тзПравила.НайтиСтроки(Новый Структура("ИсключитьСтроку", Ложь));
//////	Если МассивСтрок.Количество()=0 Тогда Возврат Неопределено; КонецЕсли;

//////	тзПравила=тзПравила.Скопировать(МассивСтрок);
//////	тзПравила.Сортировать("ИндексПользователя Возр");

//////	СтруктураВозврата=Новый Структура;
//////	Для каждого мдРесурс Из Метаданные.РегистрыСведений[стрРегистр].Ресурсы Цикл
//////		СтруктураВозврата.Вставить(мдРесурс.Имя, тзПравила[0][мдРесурс.Имя]);
//////	КонецЦикла;

//////	Возврат СтруктураВозврата;
//////КонецФункции

Функция ПроизвольныйАлгоритм(СтруктураПараметров, стрТипСвойства="СобытияФормы", стрВидСвойства="ПриОткрытии")
	ПроизвольныеАлгоритмы=СтруктураПараметров.Форма.ПроизвольныеАлгоритмы;
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат Неопределено; КонецЕсли; 
	Если НЕ ПроизвольныеАлгоритмы.Свойство(стрТипСвойства) Тогда Возврат Неопределено; КонецЕсли; 
	Если НЕ ПроизвольныеАлгоритмы[стрТипСвойства].Свойство(стрВидСвойства) Тогда Возврат Неопределено; КонецЕсли; 
	Возврат ПроизвольныеАлгоритмы[стрТипСвойства][стрВидСвойства];	
КонецФункции

Функция ЗначениеКонстанты(Константа, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Условие", Константа);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ЗначениеКонстанты Как Значение
	|ИЗ
	|	Справочник.КлассификаторКонстант КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных."+?(ТипЗнч(Константа)=Тип("Строка"), "Код", "Ссылка")+"= &Условие
	|";
	ОбъектВыборка=Запрос.Выполнить().Выбрать();

	Возврат ?(ОбъектВыборка.Следующий(), ОбъектВыборка.Значение, ЗначениеПоУмолчанию);
КонецФункции

Функция ОбработатьАлгоритм(АлгоритмСсылка, стрТипВидОбъекта, ПараметрыАлгоритма=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(АлгоритмСсылка) Тогда Возврат ""; КонецЕсли;

	Если ТипЗнч(АлгоритмСсылка)=Тип("Структура") Тогда
		ПараметрыАлгоритма=АлгоритмСсылка.Параметры;
		стрАлгоритм=АлгоритмСсылка.ВыполняемыйМодуль;
	Иначе
		ПараметрыАлгоритма=АлгоритмСсылка.ПараметрыАлгоритма;
		стрАлгоритм=АлгоритмСсылка.Алгоритм;
	КонецЕсли;
	
	Если ПараметрыАлгоритма=Неопределено Тогда
		ПараметрыАлгоритма=Новый Структура;
	КонецЕсли; 
	Для каждого СтрокаКоллекции Из ПараметрыАлгоритма Цикл
		ПараметрыАлгоритма.Вставить(СтрокаКоллекции.Имя, СтрокаКоллекции.Значение);
	КонецЦикла;

	СтруктураОбъекта=УправлениеКонфигурациейСервер.СтруктураОбъекта(стрТипВидОбъекта);
	Если СтруктураОбъекта.Тип="Документ" Тогда
		мдОбъект=Метаданные.Документы[СтруктураОбъекта.Вид];
	ИначеЕсли СтруктураОбъекта.Тип="Справочник" Тогда
		мдОбъект=Метаданные.Справочники[СтруктураОбъекта.Вид];
	КонецЕсли;	
	
	//Заменяем "библиотеки" на код
	Для ъ=1 По СтрЧислоСтрок(стрАлгоритм) Цикл
		стрДанные=СокрЛП(стрПолучитьСтроку(стрАлгоритм, ъ));
		Если Лев(стрДанные, 2)="//" Тогда Продолжить; КонецЕсли;
		Если Найти(стрДанные, "#include")=0 Тогда Продолжить; КонецЕсли;

		стрПоиска=СокрЛП(стрДанные);
		стрПоиска=стрЗаменить(стрПоиска, "#include", "");
		стрПоиска=стрЗаменить(стрПоиска, "<", "");
		стрПоиска=стрЗаменить(стрПоиска, ">", "");
		стрПоиска=СокрЛП(стрПоиска);
		
		МассивСтрок=СтрРазделить(стрПоиска, ".");
		Если МассивСтрок.Количество()=2 Тогда
			стрАлгоритмВладелец=СтруктураОбъекта.Тип+"_"+МассивСтрок[0];
			стрАлгоритмИмя=МассивСтрок[1];
		Иначе
			стрАлгоритмВладелец=СтруктураОбъекта.Тип+"_"+СтруктураОбъекта.Вид;
			стрАлгоритмИмя=МассивСтрок[0];
		КонецЕсли; 
		
		ВладелецАлгоритма=Справочники.ИдентификаторыОбъектовМетаданных[стрАлгоритмВладелец];
		СсылкаНаАлгоритм=Справочники.Алгоритмы.НайтиПоКоду(стрАлгоритмИмя,Ложь,,ВладелецАлгоритма);
		Если СсылкаНаАлгоритм.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена библиотека "+стрДанные);
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаКоллекции Из СсылкаНаАлгоритм.ПараметрыАлгоритма Цикл
			ПараметрыАлгоритма.Вставить(СтрокаКоллекции.Имя, СтрокаКоллекции.Значение);
		КонецЦикла;

		стрАлгоритм=стрЗаменить(стрАлгоритм, стрДанные, СсылкаНаАлгоритм.Алгоритм+Символы.ПС);
	КонецЦикла;

	//Заменяем "метакод" на код 1С
	Пока Найти(стрАлгоритм, "{")<>0 Цикл
		СтруктураПеременной=ПолучитьСтруктуруПеременнойИзСтроки(стрАлгоритм);
		стрРеквизит=СтруктураПеременной.ИмяРеквизита;
		стрВладелец=СтруктураПеременной.ИмяВладельца;

		Реквизит=ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду(стрРеквизит);
		Владелец=Справочники.ИдентификаторыОбъектовМетаданных[СтруктураОбъекта.Тип+"_"+СтруктураОбъекта.Вид+"_"+стрВладелец];

		МенеджерЗаписи=РегистрыСведений.ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Владелец=Владелец;
		МенеджерЗаписи.Реквизит=Реквизит;
		МенеджерЗаписи.Прочитать();

		Если стрВладелец="Константы" Тогда
			стрАлгоритм=стрЗаменить(стрАлгоритм,  "{"+СтруктураПеременной.ПутьКДанным+"}", "МетаконфигураторСервер.ЗначениеКонстанты("""+стрРеквизит+""")");
		Иначе
			Если НЕ МенеджерЗаписи.Выбран() Тогда //используется атрибут метаданных
				Если стрВладелец="Шапка" Тогда
					РеквизитОбъекта=мдОбъект.Реквизиты.Найти(стрРеквизит);
				Иначе //Атрибут табличной части
					РеквизитОбъекта=мдОбъект.ТабличныеЧасти.Найти(стрВладелец).Реквизиты.Найти(стрРеквизит);
				КонецЕсли;
				Если РеквизитОбъекта=Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Атрибут "+стрВладелец+"."+стрРеквизит+" не определен"); Продолжить;
				КонецЕсли;
				Если стрВладелец="Шапка" Тогда
					стрАлгоритм=СтрЗаменить(стрАлгоритм, "{"+СтруктураПеременной.ПутьКДанным+"}", "Форма.Объект["""+стрРеквизит+"""]");
				Иначе //Атрибут табличной части
					стрАлгоритм=СтрЗаменить(стрАлгоритм, "{"+СтруктураПеременной.ПутьКДанным+"}", "СтрокаТабличнойЧасти["""+стрРеквизит+"""]");
				КонецЕсли;
			Иначе //используется пользовательский атрибут
				стрЭлемент=АтрибутВСтроку(Реквизит, стрВладелец);
				Если стрВладелец="Шапка" Тогда
					стрАлгоритм=СтрЗаменить(стрАлгоритм, "{"+СтруктураПеременной.ПутьКДанным+"}", "Форма.Объект["""+стрЭлемент+"""]");
				Иначе
					стрАлгоритм=СтрЗаменить(стрАлгоритм, "{"+СтруктураПеременной.ПутьКДанным+"}", "СтрокаТабличнойЧастиДопАтрибута["""+стрЭлемент+"""]");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат стрАлгоритм;
КонецФункции

Процедура УстановитьУсловноеОформление(Форма, стрНастройкиОтбора, стрРеквизит, Свойство="Видимость")
////	Если ПустаяСтрока(стрНастройкиОтбора) Тогда Возврат; КонецЕсли;

////	НастройкиОтбора=УниверсальныеМеханизмыСервер.ЗначениеИзСтрокиXML(стрНастройкиОтбора);
////	Для каждого СтрокаКоллекции Из НастройкиОтбора.Отбор.Элементы Цикл
////		Элемент=Форма.УсловноеОформление.Элементы.Добавить();

////		ПолеЭлемента=Элемент.Поля.Элементы.Добавить();
////		ПолеЭлемента.Поле=Новый ПолеКомпоновкиДанных(стрРеквизит);

////		ОтборЭлемента=Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
////		ОтборЭлемента.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Объект."+СокрЛП(СтрокаКоллекции.ЛевоеЗначение));

////		Если СтрокаКоллекции.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
////			ОтборЭлемента.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше;
////		ИначеЕсли СтрокаКоллекции.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
////			ОтборЭлемента.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше;
////		ИначеЕсли СтрокаКоллекции.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
////			ОтборЭлемента.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
////		ИначеЕсли СтрокаКоллекции.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
////			ОтборЭлемента.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
////		Иначе
////			стрВидСравнения=стрЗаменить(СокрЛП(СтрокаКоллекции.ВидСравнения), " ", "");
////			стрВидСравнения=?(Лев(стрВидСравнения, 2)="Не", СтрЗаменить(стрВидСравнения, "Не", ""), "Не"+стрВидСравнения);
////			ОтборЭлемента.ВидСравнения=ВидСравненияКомпоновкиДанных[стрВидСравнения];
////		КонецЕсли;

////		ОтборЭлемента.ПравоеЗначение=СтрокаКоллекции.ПравоеЗначение;

////		Элемент.Оформление.УстановитьЗначениеПараметра(Свойство, Ложь);
////	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов

Функция ТаблицаДополнительныхРеквизитовОбъекта(стрВладелец) Экспорт
	Если СтрРазделить(стрВладелец, "_").Количество()=2 Тогда //Тип+Вид
		Запрос=Новый Запрос;
		//Запрос.УстановитьПараметр("Родитель", Справочники.ИдентификаторыОбъектовМетаданных[стрВладелец]);
		Запрос.УстановитьПараметр("Родитель", УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(стрВладелец));
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Родитель В Иерархии (&Родитель)
		|";
		МассивВладельцев=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", МассивВладельцев);
		Запрос.Текст="
		|ВЫБРАТЬ *,
		|	ИсточникДанных.Реквизит.Код КАК Код,
		|	ИсточникДанных.Реквизит.ТипЗначения КАК ТипЗначения,
		|	ИсточникДанных.Владелец.ИмяПредопределенныхДанных КАК ВладелецИмяПредопределенныхДанных
		|
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизиты КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Владелец В (&Владелец) 
		|";
		Возврат Запрос.Выполнить().Выгрузить();		
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(стрВладелец));
	//Запрос.УстановитьПараметр("Владелец", Справочники.ИдентификаторыОбъектовМетаданных[стрВладелец]);	
	Запрос.Текст="
	|ВЫБРАТЬ *,
	|	ИсточникДанных.Реквизит.Код КАК Код,
	|	ИсточникДанных.Реквизит.ТипЗначения КАК ТипЗначения
	|
	|ИЗ
	|	РегистрСведений.ДополнительныеРеквизиты КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Владелец = &Владелец 
	|";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ДопРеквизиты_Инициализация(Форма, Объект) Экспорт
	мдОбъект=Объект.Ссылка.Метаданные();
	стрТипОбъекта=стрЗаменить(мдОбъект.ПолноеИмя(), ".", "_");

	СобытияДопРевизитов=Новый Структура;

	//Доп.атрибуты табличной части
	тзРеквизитыТЧ=Новый ТаблицаЗначений;
	тзРеквизитыТЧ.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	тзРеквизитыТЧ.Колонки.Добавить("Значение", Новый ОписаниеТипов("ТаблицаЗначений"));

	ДобавляемыеРеквизиты=Новый Массив;

	//Создаем реквизиты шапки доп.атрибутов 
	тзРеквизитыОбъекта=ТаблицаДополнительныхРеквизитовОбъекта(стрТипОбъекта+"_Реквизиты");
	Если НЕ тзРеквизитыОбъекта.Количество()=0 Тогда
		Если Форма.Элементы.Найти("ДополнительныеРеквизиты")=Неопределено Тогда 
			Элемент=Форма.Элементы.Добавить("ДополнительныеРеквизиты", Тип("ГруппаФормы"));
			Элемент.Вид=ВидГруппыФормы.ОбычнаяГруппа;
			Элемент.Заголовок="Дополнительные реквизиты";
		КонецЕсли;
		Для каждого СтрокаКоллекции Из тзРеквизитыОбъекта Цикл
			//стрРеквизит=АтрибутВСтроку(СтрокаКоллекции.Реквизит);
			стрРеквизит="Д_Шапка_"+СокрЛП(стрЗаменить(СтрокаКоллекции.Код, " ", ""));
			Реквизит=Новый РеквизитФормы(стрРеквизит, СтрокаКоллекции.ТипЗначения,, СокрЛП(СтрокаКоллекции.Реквизит)); 
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЦикла;		
	КонецЕсли;
	
	//Создаем реквизиты табличных частей доп.атрибутов
	Для каждого мдЧабличнаяЧасть Из мдОбъект.ТабличныеЧасти Цикл
		Если мдЧабличнаяЧасть.Имя="ДополнительныеРеквизиты" Тогда Продолжить; КонецЕсли; 
		//*** Если стрНайти(мдЧабличнаяЧасть.Комментарий, "<ДопРеквизиты>")=0 Тогда Продолжить; КонецЕсли;
		ЕстьНаФорме=НЕ Форма.Элементы.Найти(мдЧабличнаяЧасть.Имя)=Неопределено;
		//Если Форма.Элементы.Найти(мдЧабличнаяЧасть.Имя)=Неопределено Тогда Продолжить; КонецЕсли;

		тзРеквизиты=Новый ТаблицаЗначений;
		тзРеквизиты.Колонки.Добавить("Ключ");

		тзРеквизитыОбъекта=ТаблицаДополнительныхРеквизитовОбъекта(стрТипОбъекта+"_"+мдЧабличнаяЧасть.Имя);
		Для каждого СтрокаКоллекции Из тзРеквизитыОбъекта Цикл
			стрИдентификатор=АтрибутВСтроку(СтрокаКоллекции.Реквизит, мдЧабличнаяЧасть.Имя);
			стрПредставление=СокрЛП(СтрокаКоллекции.Реквизит);

			//Добавляем колонку (доп.атрибут) в табличную часть
			Если ЕстьНаФорме Тогда
				Реквизит=Новый РеквизитФормы(стрИдентификатор, СтрокаКоллекции.ТипЗначения, "Объект."+мдЧабличнаяЧасть.Имя, стрПредставление);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			КонецЕсли;

			//Добавляем колонку (доп.атрибут) в таблицу значений
			тзРеквизиты.Колонки.Добавить(стрИдентификатор, СтрокаКоллекции.ТипЗначения, стрПредставление);
			
			//События доп.реквизитов
			СобытияДопРевизитов.Вставить("ПриИзменении_"+стрИдентификатор, СтрокаКоллекции.Событие_ПриИзменении);
		КонецЦикла;

		Если тзРеквизиты.Колонки.Количество()=1 Тогда Продолжить; КонецЕсли;

		НоваяСтрока=тзРеквизитыТЧ.Добавить();
		НоваяСтрока.Ключ=мдЧабличнаяЧасть.Имя;
		НоваяСтрока.Значение=тзРеквизиты;
	КонецЦикла;

	//****************************
	//Если НЕ тзРеквизитыТЧ.Количество()=0 Тогда
	//	Попытка
	//		Реквизит=Новый РеквизитФормы("тзРеквизитыТЧ", Новый ОписаниеТипов("ТаблицаЗачений"),, "Реквизиты таб.части"); 
	//		ДобавляемыеРеквизиты.Добавить(Реквизит);			
	//	Исключение
	//	КонецПопытки; 
	//КонецЕсли;
	//****************************
	
	//Обновляем реквизиты формы
	Если НЕ ДобавляемыеРеквизиты.Количество()=0 Тогда		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		//Создаем отдельные доп.реквизитов шапки
		Для каждого СтрокаКоллекции Из ДобавляемыеРеквизиты Цикл
			Если НЕ Лев(СтрокаКоллекции.Имя, 8)="Д_Шапка_" Тогда Продолжить; КонецЕсли;

			Элемент=Форма.Элементы.Добавить(СтрокаКоллекции.Имя, Тип("ПолеФормы"), Форма.Элементы["ДополнительныеРеквизиты"]);
			Элемент.ПутьКДанным=СтрокаКоллекции.Имя;
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.УстановитьДействие("ПриИзменении", "ДопРеквизиты_ПриИзменении_Клиент");
			Элемент.УстановитьДействие("НачалоВыбора", "ДопРеквизиты_НачалоВыбора_Клиент");

			//Устанавливаем параметры выбора
			Если СтрокаКоллекции.ТипЗначения=Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
				//НовыйМассив=Новый Массив();
				//НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", СтрокаКоллекции.Имя));
				//Элемент.СвязиПараметровВыбора=Новый ФиксированныйМассив(НовыйМассив);

				РезультатПоиска=тзРеквизитыОбъекта.Найти(стрЗаменить(СтрокаКоллекции.Имя, "Д_Шапка_", ""), "Код");
				Если НЕ РезультатПоиска=Неопределено Тогда
					Элемент.ПараметрыВыбора=ПараметрыВыбора("Отбор.Владелец", РезультатПоиска.Реквизит);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Создаем элементы доп.реквизитов таб.части
	Для каждого СтрокаКоллекции Из тзРеквизитыТЧ Цикл
		стрВладелецАтрибута=СтрокаКоллекции.Ключ;
		Если Форма.Элементы.Найти(стрВладелецАтрибута)=Неопределено Тогда Продолжить; КонецЕсли; //***
		Для каждого Колонка Из СтрокаКоллекции.Значение.Колонки Цикл
			Если Колонка.Имя="Ключ" Тогда Продолжить; КонецЕсли; 
			Элемент=Форма.Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Форма.Элементы[стрВладелецАтрибута]);
			Элемент.ПутьКДанным="Объект."+стрВладелецАтрибута+"."+Колонка.Имя;
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.УстановитьДействие("ПриИзменении", "тзРеквизитыТЧ_ПриИзменении_Клиент");

			//Устанавливаем параметры выбора
			Если Колонка.ТипЗначения=Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
				Элемент.ПараметрыВыбора=ПараметрыВыбора("Отбор.Владелец", АтрибутИзСтроки(Колонка.Имя));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Заполняем структуру доп.атрибутов значениями
	ОбъектВызова=Форма.РеквизитФормыВЗначение("Объект");
	Если НЕ ОбъектВызова.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты")=Неопределено Тогда
		Для каждого СтрокаКоллекции Из ОбъектВызова.ДополнительныеРеквизиты Цикл
			ИД=Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(СтрокаКоллекции.Владелец);
			стрВладелецАтрибута=стрЗаменить(ИД, стрТипОбъекта+"_", "");
			
			//Если стрТипОбъекта="Задача_ЗадачиПользователя" Тогда
			//	Если Лев(ИД, 32)="Справочник_БизнесПроцессыМодели_" Тогда
			//		стрВладелецАтрибута=стрЗаменить(ИД, "Справочник_БизнесПроцессыМодели_", "");
			//	КонецЕсли;
			//КонецЕсли;
			
			Если стрВладелецАтрибута="Реквизиты" Тогда
				Форма[СокрЛП("Д_Шапка_"+СтрокаКоллекции.Реквизит.Код)]=СтрокаКоллекции.Значение;
			Иначе //доп.атрибуты табличных частей
				РезультатПоиска=тзРеквизитыТЧ.Найти(стрВладелецАтрибута, "Ключ");
				Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
				
				тзДанные=РезультатПоиска.Значение;			
				стрКолонка=АтрибутВСтроку(СтрокаКоллекции.Реквизит, стрВладелецАтрибута);
				НайденнаяСтрока=тзДанные.Найти(СтрокаКоллекции.Ключ, "Ключ");
				Если НайденнаяСтрока=Неопределено Тогда
					НайденнаяСтрока=тзДанные.Добавить();
				КонецЕсли;
				НайденнаяСтрока.Ключ=СтрокаКоллекции.Ключ;
				НайденнаяСтрока[стрКолонка]=СтрокаКоллекции.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ тзРеквизитыТЧ.Количество()=0 Тогда
		Форма.тзРеквизитыТЧ=ПоместитьВоВременноеХранилище(тзРеквизитыТЧ, Форма.УникальныйИдентификатор);
		ДопРеквизиты_ОбновлениеПредставления(Форма, тзРеквизитыТЧ);
	КонецЕсли;
	
	Если НЕ СобытияДопРевизитов.Количество()=0 Тогда
		Форма.ПроизвольныеАлгоритмы.Вставить("СобытияРеквизитов", СобытияДопРевизитов);
	КонецЕсли;
	
	//Установка свойств видимость,доступность
	ДопРеквизиты_УстановкаСвойствДоступностьВидимость(стрТипОбъекта, Форма, Объект.Ссылка);
КонецПроцедуры

Процедура ДопРеквизиты_УстановкаСвойствДоступностьВидимость(стрИсточникДанных, Форма, Ссылка)
	//** Форма.УсловноеОформление.Элементы.Очистить();

	тзРеквизитыОбъекта=ТаблицаДополнительныхРеквизитовОбъекта(стрИсточникДанных);
	Для каждого СтрокаКоллекции Из тзРеквизитыОбъекта Цикл
		стрВладелец=стрЗаменить(СтрокаКоллекции.ВладелецИмяПредопределенныхДанных, стрИсточникДанных+"_", "");
		Если стрВладелец="Реквизиты" Тогда
			стрИдентификатор="Д_Шапка_"+СтрокаКоллекции.Код;
		Иначе	
			стрИдентификатор=АтрибутВСтроку(СтрокаКоллекции.Реквизит, стрВладелец);	
		КонецЕсли;
		Элемент=Форма.Элементы.Найти(стрИдентификатор);
		Если Элемент=Неопределено Тогда Продолжить; КонецЕсли;

		МассивСвойств=Новый Массив;
		МассивСвойств.Добавить("Видимость");
		МассивСвойств.Добавить("Доступность");
		Для каждого ИмяСвойства Из МассивСвойств Цикл
			стрНастройкиОтбора=СтрокаКоллекции[ИмяСвойства];
			Если ПустаяСтрока(стрНастройкиОтбора) Тогда Продолжить; КонецЕсли;
			
			НастройкиОтбора=УниверсальныеМеханизмыСервер.ЗначениеИзСтрокиXML(стрНастройкиОтбора);
			Для каждого ЭлементОтбора Из НастройкиОтбора.Отбор.Элементы Цикл
				Элемент=Форма.УсловноеОформление.Элементы.Добавить();
				
				ПолеЭлемента=Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле=Новый ПолеКомпоновкиДанных(стрИдентификатор);
				
				НовыйЭлементОтбора=Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Объект."+СокрЛП(ЭлементОтбора.ЛевоеЗначение));
				
				Если ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Подобно Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеПодобно;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеПодобно Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Подобно;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке;
				ИначеЕсли ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.НЕВСписке Тогда
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					стрВидСравнения=стрЗаменить(СокрЛП(ЭлементОтбора.ВидСравнения), " ", "");
					стрВидСравнения=?(Лев(стрВидСравнения, 2)="Не", СтрЗаменить(стрВидСравнения, "Не", ""), "Не"+стрВидСравнения);
					НовыйЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных[стрВидСравнения];
				КонецЕсли;
				НовыйЭлементОтбора.ПравоеЗначение=ЭлементОтбора.ПравоеЗначение;				
				Элемент.Оформление.УстановитьЗначениеПараметра(ИмяСвойства, Ложь);
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;
КонецПроцедуры

Процедура ДопРеквизиты_ОбработкаПроверкиЗаполнения(стрИсточникДанных, Отказ, ПроверяемыеРеквизиты) Экспорт
//	тзРеквизитыОбъекта=ТаблицаДополнительныхРеквизитовОбъекта(стрЗаменить(стрИсточникДанных, ".", "_"));
//	Для каждого СтрокаКоллекции Из тзРеквизитыОбъекта Цикл
//		стрВладелец=стрЗаменить(СтрокаКоллекции.ВладелецИмяПредопределенныхДанных, стрИсточникДанных+"_", "");
//		Если стрВладелец="Реквизиты" Тогда
//			стрИдентификатор="Д_Шапка_"+СтрокаКоллекции.Код;
//		Иначе	
//			стрИдентификатор=АтрибутВСтроку(СтрокаКоллекции.Реквизит, стрВладелец);	
//		КонецЕсли;
//		//ПроверяемыеРеквизиты.Добавить(стрИдентификатор);
//	КонецЦикла;
КонецПроцедуры

Процедура ДопРеквизиты_ОбновлениеПредставления(Форма, тзРеквизитыТЧ=Неопределено) Экспорт
	Если тзРеквизитыТЧ=Неопределено Тогда
		Попытка Если НЕ ЗначениеЗаполнено(Форма.тзРеквизитыТЧ) Тогда Возврат; КонецЕсли;
		Исключение Возврат;
		КонецПопытки;
		тзРеквизитыТЧ=ПолучитьИзВременногоХранилища(Форма.тзРеквизитыТЧ);
	КонецЕсли;

	Для каждого СтрокаКоллекции1 Из тзРеквизитыТЧ Цикл
		тзРеквизиты=СтрокаКоллекции1.Значение;
		Если тзРеквизиты.Количество()=0 Тогда Продолжить; КонецЕсли; 
		Если Форма.Элементы.Найти(СтрокаКоллекции1.Ключ)=Неопределено Тогда Продолжить; КонецЕсли; //***
		Для каждого СтрокаКоллекции2 Из Форма.Объект[СтрокаКоллекции1.Ключ] Цикл
			НайденнаяСтрока=тзРеквизиты.Найти(СтрокаКоллекции2.ID, "Ключ");
			Если НайденнаяСтрока=Неопределено Тогда Продолжить; КонецЕсли;
			Для каждого Колонка Из тзРеквизиты.Колонки Цикл
				Если Колонка.Имя="Ключ" Тогда Продолжить; КонецЕсли;
				СтрокаКоллекции2[Колонка.Имя]=НайденнаяСтрока[Колонка.Имя];
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Форма.тзРеквизитыТЧ=ПоместитьВоВременноеХранилище(тзРеквизитыТЧ, Форма.УникальныйИдентификатор);
КонецПроцедуры

Процедура ДопРеквизиты_ПриИзменении(стрКолонка, Форма) Экспорт
	Если НЕ Лев(стрКолонка, 2)="Д_" Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Форма.тзРеквизитыТЧ) Тогда Возврат; КонецЕсли;

	тзРеквизиты=ПолучитьИзВременногоХранилища(Форма.тзРеквизитыТЧ);
		
	Результат=тзРеквизиты.Найти(Форма.ТекущийЭлемент.Имя, "Ключ");
	Если Результат=Неопределено Тогда Возврат; КонецЕсли; 

	СтрокаТабличнойЧасти=Форма.Объект[Форма.ТекущийЭлемент.Имя].НайтиПоИдентификатору(Форма.ТекущийЭлемент.ТекущаяСтрока);

	СтрокаТабличнойЧастиДопАтрибута=Результат.Значение.Найти(СтрокаТабличнойЧасти.ID, "Ключ");
	Если СтрокаТабличнойЧастиДопАтрибута=Неопределено Тогда
		СтрокаТабличнойЧастиДопАтрибута=Результат.Значение.Добавить();
		СтрокаТабличнойЧастиДопАтрибута.Ключ=СтрокаТабличнойЧасти.ID;
	КонецЕсли;
	СтрокаТабличнойЧастиДопАтрибута[стрКолонка]=СтрокаТабличнойЧасти[стрКолонка];

	//Выполним события "При изменении"
	СобытиеДопАтрибутов=Неопределено; Форма.ПроизвольныеАлгоритмы.Свойство("СобытияРеквизитов", СобытиеДопАтрибутов);
	Если ТипЗнч(СобытиеДопАтрибутов)=Тип("Структура") Тогда
		Если СобытиеДопАтрибутов.Свойство("ПриИзменении_"+стрКолонка) Тогда
			ПараметрыАлгоритма=Новый Структура;
			стрАлгоритм=ОбработатьАлгоритм(СобытиеДопАтрибутов["ПриИзменении_"+стрКолонка], Форма.ИмяФормы, ПараметрыАлгоритма);
			Выполнить(стрАлгоритм);

			Для каждого Колонка Из Результат.Значение.Колонки Цикл
				Если Колонка.Имя="Ключ" Тогда Продолжить; КонецЕсли;
				СтрокаТабличнойЧасти[Колонка.Имя]=СтрокаТабличнойЧастиДопАтрибута[Колонка.Имя];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	//{Товары.КоэффициентЖира}=Окр({Товары.ПроцентЖира}/3.4,2);
	//{Товары.КоэффициентБелка}=Окр({Товары.ПроцентБелка}/3,2);
	//{Товары.ЗачетныйВес}=Окр({Товары.ФизическийВес}*{Товары.ПроцентЖира}/3.4,3);
	//СтрокаТабличойЧасти.Количество={Товары.ЗачетныйВес};

	//Форма.тзРеквизитыТЧ=ПоместитьВоВременноеХранилище(тзРеквизитыТЧ, Форма.УникальныйИдентификатор);
КонецПроцедуры

Процедура ДопРеквизиты_Записать(Отказ, ТекущийОбъект, Форма) Экспорт
	Если Отказ Тогда Возврат; КонецЕсли;

	мдОбъект=ТекущийОбъект.Метаданные();
	Если мдОбъект.ТабличныеЧасти.Найти("ДополнительныеРеквизиты")=Неопределено Тогда
		Возврат;
	КонецЕсли;

	стрТипОбъекта=стрЗаменить(мдОбъект.ПолноеИмя(), ".", "_");

	тзДанные=Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("Реквизит");
	тзДанные.Колонки.Добавить("Значение");
	тзДанные.Колонки.Добавить("Владелец");
	тзДанные.Колонки.Добавить("Ключ");

	//доп.атрибуты шапки
	тзРеквизиты=ТаблицаДополнительныхРеквизитовОбъекта(стрТипОбъекта+"_Реквизиты");
	Для каждого СтрокаКоллекции Из тзРеквизиты Цикл
		НоваяСтрока=тзДанные.Добавить();
		НоваяСтрока.Реквизит=СтрокаКоллекции.Реквизит;
		НоваяСтрока.Значение=Форма["Д_Шапка_"+СокрЛП(СтрокаКоллекции.Реквизит.Код)]; 
		НоваяСтрока.Владелец=Справочники.ИдентификаторыОбъектовМетаданных[стрТипОбъекта+"_Реквизиты"];		 
	КонецЦикла;
	
	//доп.атрибуты табличных частей
	Если ЗначениеЗаполнено(Форма.тзРеквизитыТЧ) Тогда
		тзРеквизитыТЧ=ПолучитьИзВременногоХранилища(Форма.тзРеквизитыТЧ);
		Для Каждого СтрокаКоллекции Из тзРеквизитыТЧ Цикл
			тзРеквизиты=СтрокаКоллекции.Значение;
			Если тзРеквизиты.Колонки.Количество()<1 Тогда Продолжить; КонецЕсли; 
			
			Для каждого ОбъектСтрока Из тзРеквизиты Цикл
				Владелец=Справочники.ИдентификаторыОбъектовМетаданных[стрТипОбъекта+"_"+СтрокаКоллекции.Ключ];
				Для Каждого ОбъектКолонка Из тзРеквизиты.Колонки Цикл
					стрКолонка=ОбъектКолонка.Имя;
					Если стрКолонка="Ключ" Тогда Продолжить; КонецЕсли; 
					Если ОбщегоНазначения.ПустоеЗначение(ОбъектСтрока[стрКолонка]) Тогда Продолжить; КонецЕсли; 
					
					НоваяСтрока=тзДанные.Добавить();
					НоваяСтрока.Реквизит=АтрибутИзСтроки(стрКолонка);
					НоваяСтрока.Значение=ОбъектСтрока[стрКолонка];
					НоваяСтрока.Владелец=Владелец;
					НоваяСтрока.Ключ=ОбъектСтрока.Ключ;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	ТекущийОбъект.ДополнительныеРеквизиты.Загрузить(тзДанные);
КонецПроцедуры

Функция ПараметрыВыбора(Имя="Отбор.Владелец", Значение)
	НовыйМассив=Новый Массив();
	НовыйМассив.Добавить(Значение);

	НовыеЗначения=Новый ФиксированныйМассив(НовыйМассив);
	НовыйПараметр=Новый ПараметрВыбора(Имя, НовыеЗначения);

	НовыйМассив=Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);

	Возврат Новый ФиксированныйМассив(НовыйМассив);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

Процедура ПриСозданииНаСервере(Форма, Объект, СтруктураПараметров) Экспорт
	ВыполнитьНастройкуФормы("ПриСозданииНаСервере", Форма, Объект, СтруктураПараметров);
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, Объект, СтруктураПараметров) Экспорт
	ВыполнитьНастройкуФормы("ПриЧтенииНаСервере", Форма, Объект, СтруктураПараметров);
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Объект, СтруктураПараметров) Экспорт
	ВыполнитьНастройкуФормы("ПередЗаписьюНаСервере", Форма, Объект, СтруктураПараметров);
КонецПроцедуры
 
Процедура ПриЗаписиНаСервере(Форма, Объект, СтруктураПараметров) Экспорт
	ВыполнитьНастройкуФормы("ПриЗаписиНаСервере", Форма, Объект, СтруктураПараметров);
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, Объект, СтруктураПараметров) Экспорт
	ВыполнитьНастройкуФормы("ПослеЗаписиНаСервере", Форма, Объект, СтруктураПараметров);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шаблоны коды

Функция ПримерПроизвольнойКоманды_КнопкаНаФорме() Экспорт
	Возврат "
	|//Описываем алгоритм выполнения (и место выполнения)
	|стрАлгоритм_НаКлиенте=""
	||Сообщить(""Код выполнился на клиенте"");
	||ОписаниеОповещения=Новый ОписаниеОповещения(""ВыполнитьКомандуКлиент_ОбработчикОповещения"", ЭтотОбъект);
	||ПоказатьВводДаты(ОписаниеОповещения,, ""Введите дату дакумента"");
	||"";
	|
	|стрАлгоритм_НаСервере=""
	||Сообщить(""Код выполнился на сервере"");
	||"";
	|стрАлгоритм_НаСервереБезКонтекста=""
	||Сообщить(""Код выполнился на сервере без контекста"");
	||"";
	|СтруктураАлгоритмаВыполнения=Новый Структура;
	|СтруктураАлгоритмаВыполнения.Вставить(""НаКлиенте"", стрАлгоритм_НаКлиенте);
	|СтруктураАлгоритмаВыполнения.Вставить(""НаСервере"", стрАлгоритм_НаСервере);
	|СтруктураАлгоритмаВыполнения.Вставить(""НаСервереБезКонтекста"", стрАлгоритм_НаСервереБезКонтекста);
	|//Описываем алгоритм оповещения (и место выполнения)
	|стрАлгоритм_НаКлиенте=""
	||Сообщить(""Код выполнился на клиенте (оповещение)"");
	||"";
	|
	|стрАлгоритм_НаСервере=""
	||Сообщить(""Код выполнился на сервере (оповещение)"");
	||"";
	|
	|стрАлгоритм_НаСервереБезКонтекста=""
	||Сообщить(""Код выполнился на сервере без контекста (оповещения)"");
	||"";
	|
	|СтруктураАлгоритмаОповещения=Новый Структура;
	|СтруктураАлгоритмаОповещения.Вставить(""НаКлиенте"", стрАлгоритм_НаКлиенте);
	|СтруктураАлгоритмаОповещения.Вставить(""НаСервере"", стрАлгоритм_НаСервере);
	|СтруктураАлгоритмаОповещения.Вставить(""НаСервереБезКонтекста"", стрАлгоритм_НаСервереБезКонтекста);
	|
	|//Формируем структуру команды
	|СтруктураКоманды=Новый Структура;
	|СтруктураКоманды.Вставить(""АлгоритмВыполнения"", СтруктураАлгоритмаВыполнения);
	|СтруктураКоманды.Вставить(""АлгоритмОповещения"", СтруктураАлгоритмаОповещения);
	|СтруктураКоманды.Вставить(""Имя"", ""МояСуперКнопка"");
	|
	|//Создаем (если еще не создана) и формируем структуру произвольных команд
	|Если НЕ ТипЗнч(СтруктураПараметров.Форма.ПроизвольныеАлгоритмы)=Тип(""Структура"") Тогда
	|	СтруктураПараметров.Форма.ПроизвольныеАлгоритмы=Новый Структура;
	|КонецЕсли;
	|ПроизвольныеАлгоритмы=СтруктураПараметров.Форма.ПроизвольныеАлгоритмы;
	|ПроизвольныеАлгоритмы.Вставить(СтруктураКоманды.Имя, СтруктураКоманды);	
	|
	|//Создаем команду
	|Команда=СтруктураПараметров.Форма.Команды.Добавить(СтруктураКоманды.Имя);
	|Команда.Действие=""ВыполнитьКомандуКлиент"";
	|
	|//Создаем кнопку на форме и связываем её с командой
	|Кнопка=СтруктураПараметров.Форма.Элементы.Добавить(СтруктураКоманды.Имя, Тип(""КнопкаФормы""));
	|Кнопка.ИмяКоманды=СтруктураКоманды.Имя;
	|Кнопка.Вид=ВидКнопкиФормы.ОбычнаяКнопка;
	|";
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// Выполнить настройки формы объекта

Процедура ВыполнитьНастройкуФормы(Событие, Форма, Объект, СтруктураПараметров) Экспорт
	РегистрыСведений.НастройкиФормыОбъекта.ВыполнитьНастройку(Событие, Форма, Объект, СтруктураПараметров);
КонецПроцедуры