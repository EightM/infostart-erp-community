// Получает параметр учетной политики (налоговый учет) для заданной организации на заданную дату
//
// Параметры:
//	ИмяПараметра        - строка, имя запрашиваемого параметра учетной политики,
//	Организация         - ссылка на элемент справочника "Организации", для которого надо получить параметры,
//	Дата                - дата, на которую надо получить параметры, если не заполнено, то берется рабочая дата,
//	СтруктураПараметров - структура, содержащая все параметры учетной политики.
//
// Возвращаемое значение:
//	Значение учетной политики
//
Функция УчетнаяПолитикаНалоговыйУчет(ИмяПараметра, Организация, Дата = Неопределено, СтруктураПараметров = Неопределено) Экспорт

	// Если организация не заполнена, то учетная политика неопределена
	Если НЕ ЗначениеЗаполнено(Организация) Тогда Возврат Неопределено; КонецЕсли;

	// Если дата не заполнена, возьмем рабочую дату
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;

	СтруктураПараметров = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));

	Если СтруктураПараметров <> Неопределено Тогда
		Результат = СтруктураПараметров[ИмяПараметра];
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не задан параметр учетной политики (налоговый учет) """ +ИмяПараметра+ """ для организации " + Организация + "!");
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Для переданного в качестве параметра счета-факутры выданного, получает для него
// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в 
// документе основнии.
//
// Параметры:
//  СчетФактура  - счет-фактура для которого нужно определить параметры
//  Результат - структура в которой возвращаются значения параметров
//
Процедура ПолучитьПараметрыСчетаФактуры(СчетФактура, мВалютаРегламентированногоУчета, Результат) Экспорт
	Результат=Новый Структура("Организация, Контрагент, Договор, СуммаДокумента, СуммаНДС, ВалютаДокумента");
	Результат.СуммаДокумента = 0;
	Результат.СуммаНДС=0;
	
	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный") Или ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли; 
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") тогда
		ЭтоПолученныйСФ = Истина;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		и (СчетФактура.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
		или СчетФактура.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация"	, СчетФактура.Организация);
		Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);
		Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);
		Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);
		Результат.Вставить("СуммаНДС"		, СчетФактура.СуммаНДС);
		Возврат;
	КонецЕслИ;
	
	ДокументыОснования = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если не ЗначениеЗаполнено(Основание) Тогда Продолжить; КонецЕсли; 

		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли; 
		
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	// ТЧ оснований не заполнена, параметры определить нельзя
	Если ТипыОснований.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		ТипДокументаОснования	= ТипОснования.Ключ;
		ДокументыОснования		= ТипОснования.Значение;
		ТекстЗапроса = "";
		Если ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеАО", ДокументыОснования);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
			|	АвансовыйОтчетПрочее.Контрагент КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	СУММА(АвансовыйОтчетПрочее.Сумма) КАК СуммаДокумента,
			|	СУММА(АвансовыйОтчетПрочее.СуммаНДС) КАК СуммаНДС,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента
			|ИЗ
			|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			|ГДЕ
			|	АвансовыйОтчетПрочее.Ссылка В (&ДокументОснованиеАО)
			|	И АвансовыйОтчетПрочее.ПредъявленСФ
			|	И АвансовыйОтчетПрочее.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетПрочее.Контрагент,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	АвансовыйОтчетТовары.Контрагент,
			|	НЕОПРЕДЕЛЕНО,
			|	СУММА(АвансовыйОтчетТовары.Сумма),
			|	СУММА(АвансовыйОтчетТовары.СуммаНДС),
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетТовары.СчетФактура = &ТекущийДокумент
			|	И АвансовыйОтчетТовары.ПредъявленСФ
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетТовары.Контрагент,
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетТовары.Ссылка.Организация";
			
		Иначе
			
			Если ТипДокументаОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровУслугНДС") Тогда
				Запрос.УстановитьПараметр("ДокументОснование_ОтражениеРеализацииТоваровУслугНДС", ДокументыОснования);
				Запрос.Текст="
				|ВЫБРАТЬ
				|	ОтражениеРеализацииТоваровУслугНДС.Организация,
				|	ОтражениеРеализацииТоваровУслугНДС.Контрагент,
				|	ОтражениеРеализацииТоваровУслугНДС.ДоговорКонтрагента КАК Договор,
				|	ОтражениеРеализацииТоваровУслугНДС.СуммаДокумента,
				|	ОтражениеРеализацииТоваровУслугНДС.СуммаНДС,
				|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
				|ИЗ
				|	Документ.ОтражениеРеализацииТоваровУслугНДС КАК ОтражениеРеализацииТоваровУслугНДС
				|ГДЕ
				|	ОтражениеРеализацииТоваровУслугНДС.Ссылка В(&ДокументОснование_ОтражениеРеализацииТоваровУслугНДС)";
				
			ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровУслугНДС") Тогда
				Запрос.УстановитьПараметр("ДокументОснование_ОтражениеПоступленияТоваровУслугНДС", ДокументыОснования);
				ТекстЗапроса="
				|ВЫБРАТЬ
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Организация,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Контрагент,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.ДоговорКонтрагента КАК Договор,
				|	СУММА(ОтражениеПоступленияТоваровУслугНДСТовары.Сумма) КАК СуммаДокумента,
				|	СУММА(ОтражениеПоступленияТоваровУслугНДСТовары.СуммаНДС) КАК СуммаНДС,
				|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
				|ИЗ
				|	Документ.ОтражениеПоступленияТоваровУслугНДС.Товары КАК ОтражениеПоступленияТоваровУслугНДСТовары
				|ГДЕ
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка В(&ДокументОснование_ОтражениеПоступленияТоваровУслугНДС)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Контрагент,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.ДоговорКонтрагента,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Организация";
				
			ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				Запрос.УстановитьПараметр("ДокументОснование_ОтчетОРозничныхПродажах", ДокументыОснования);
				ТекстЗапроса="
				|ВЫБРАТЬ
				|	ОтчетОРозничныхПродажах.Ссылка.Организация,
				|	Null КАК Контрагент,
				|	Null КАК Договор,
				|	СУММА(ОтчетОРозничныхПродажах.Сумма) КАК СуммаДокумента,
				|	СУММА(ОтчетОРозничныхПродажах.СуммаНДС) КАК СуммаНДС,
				|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
				|ИЗ
				|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажах
				|ГДЕ
				|	ОтчетОРозничныхПродажах.Ссылка В(&ДокументОснование_ОтчетОРозничныхПродажах)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтчетОРозничныхПродажах.Ссылка.Организация";
	
				
			ИначеЕсли (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеДопРасходов"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровПоставщику"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.РеализацияТоваровУслуг"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"))Тогда
				
				ИмяОбъекта = ДокументыОснования[0].Метаданные().Имя;
				Запрос.УстановитьПараметр("ДокументОснование_"+ИмяОбъекта, ДокументыОснования);
				
				Если (ТипДокументаОснования = Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту"))
					или ((ТипДокументаОснования = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера")) И ЭтоПолученныйСФ) Тогда
					ИдРеквСумма_Сумма = "СуммаВознаграждения";
				ИначеЕсли (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровПоставщику")) и ЭтоПолученныйСФ 
					ИЛИ (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) и не ЭтоПолученныйСФ 
					тогда
					ИдРеквСумма_Сумма = "СуммаДокумента*(-1)";
					
					стрСуммаНДС=ИмяОбъекта+".СуммаНДС*(-1) Как СуммаНДС,";
				Иначе
					ИдРеквСумма_Сумма = "СуммаДокумента";
				КонецЕсли;
				
				Если (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
					или (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеДопРасходов"))
					или (ТипДокументаОснования= Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
					
					стрСуммаНДС=ИмяОбъекта+".СуммаНДС Как СуммаНДС,";
				КонецЕсли; 
				Если стрСуммаНДС=Неопределено Тогда 
					Если УправлениеМетаданными.ЕстьРеквизит("СуммаНДС", Метаданные.Документы[ИмяОбъекта]) Тогда
						стрСуммаНДС="СуммаНДС Как СуммаНДС,";
					Иначе
						стрСуммаНДС="0 Как СуммаНДС,";
					КонецЕсли						
				КонецЕсли; //24.07.2012
							
				стрДоговор=ИмяОбъекта+".ДоговорКонтрагента как Договор";
				Если Не УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", Метаданные.Документы[ИмяОбъекта]) Тогда
					стрДоговор=ИмяОбъекта+".РасшифровкаПлатежа.ДоговорКонтрагента как Договор";
				КонецЕсли; 
				
				ТекстЗапроса="
				|ВЫБРАТЬ
				|	"+ИмяОбъекта+".Организация,
				|	"+ИмяОбъекта+".Контрагент,
				|	"+стрДоговор+",
				|	"+ИмяОбъекта+"."+ИдРеквСумма_Сумма+" Как СуммаДокумента,
				|	"+стрСуммаНДС+"
				|";

				Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", Метаданные.Документы[ИмяОбъекта]) Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	"+ИмяОбъекта+".ВалютаДокумента Как ВалютаДокумента
					|";
				Иначе
					ТекстЗапроса=ТекстЗапроса+"
					|	&ВалютаРегламентированногоУчета
					|";
				КонецЕсли;

				ТекстЗапроса=ТекстЗапроса+"
				|ИЗ
				|	Документ."+ИмяОбъекта+" КАК "+ИмяОбъекта+"
				|ГДЕ
				|	"+ИмяОбъекта + ".Ссылка в (&ДокументОснование_"+ИмяОбъекта+")
				|";
			КонецЕсли;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст),"", Запрос.Текст + Символы.ПС+"Объединить Все "+Символы.ПС)+ТекстЗапроса;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда Возврат; КонецЕсли;
	
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;

	ПерваяСтрока = Истина;
	РазныеОрганизации = ложь;
	РазныеКонтрагенты = ложь;
	РазныеДоговоры = ложь;
	РазныеВалюты = ложь;

	тзДанные=РезультатЗапроса.Выгрузить();
	Для каждого Выборка Из тзДанные Цикл
		текДоговор=Выборка.Договор;
		Если ТипЗнч(текДоговор)=Тип("ТаблицаЗначений") Тогда
			текДоговор=текДоговор[0].ДоговорКонтрагента;
		КонецЕсли; //пко/рко (у них нет договора в шапке)
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			Результат.Договор=текДоговор;
		Иначе
			РазныеОрганизации	= РазныеОрганизации или не Результат.Организация= Выборка.Организация;
			РазныеКонтрагенты	= РазныеКонтрагенты или не Результат.Контрагент = Выборка.Контрагент;
			РазныеВалюты		= РазныеВалюты или не Результат.ВалютаДокумента	= Выборка.ВалютаДокумента;
			РазныеДоговоры		= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры или не Результат.Договор = текДоговор);
			Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
			Результат.СуммаНДС = 	Результат.СуммаНДС + Выборка.СуммаНДС;
		КонецЕсли; 
	КонецЦикла; 
	Если РазныеОрганизации или РазныеКонтрагенты или РазныеВалюты Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:"+
		?(РазныеОрганизации,Символы.ПС+" - не совпадает организация","")+
		?(РазныеКонтрагенты,Символы.ПС+" - не совпадает контрагент","")+
		?(РазныеДоговоры,Символы.ПС+" - не совпадает договор","")+
		?(РазныеВалюты,Символы.ПС+" - не совпадает валюта документа","")+
		Символы.ПС+"Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.", Ложь, Строка(СчетФактура), СтатусСообщения.Внимание); 
		Если РазныеОрганизации Тогда
			Результат.Организация = Неопределено;
		КонецЕсли; 				
		Если РазныеКонтрагенты Тогда
			Результат.Контрагент = Неопределено;
		КонецЕсли; 				
		Если РазныеВалюты Тогда
			Результат.ВалютаДокумента = Неопределено;
		КонецЕсли; 				
		Если РазныеДоговоры тогда
			Результат.Договор = Неопределено;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

// Процедура проверяет соответствие реквизитов счета-фактуры выданной и документа-основания.
// В случае несоответствия выдается сообщение пользователю.
//
// Параметры:
//		- ДокОбъект - документ-основание
//		- Сообщать  - флаг, если истина, то выводить сообщение пользователю, по умолчанию = Истина
//
// Возврат:
//		- Истина, если различий не найдено, Ложь в противном случае
//
Функция ПроверитьСоответствиеРеквизитовСчетаФактуры(ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина) Экспорт

     СчетФактура = НайтиПодчиненныйДокумент(ДокОбъект.Ссылка, ВидДокумента);
     Если СчетФактура = Неопределено Тогда Возврат Истина; КонецЕсли;

     структураРеквизиты = новый Структура; Флаг  = Истина; Текст = "";

     МетаРекв = ДокОбъект.Метаданные().Реквизиты;
     МетаСФ   = Метаданные.Документы[ВидДокумента].Реквизиты;
     Если ДокОбъект.Ссылка.Дата <> ДокОбъект.Дата И НачалоДня(ДокОбъект.Дата) <> НачалоДня(СчетФактура.Дата) Тогда
          Если Сообщать Тогда
               Сообщить("Изменена дата документа-основания. Возможно требуется внести изменения в счет-фактуру.", СтатусСообщения.Внимание);
          КонецЕсли;
          СтруктураРеквизиты.Вставить("Дата", ДокОбъект.Дата);
          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("Организация") <> Неопределено И СчетФактура.Организация <> ДокОбъект.Организация Тогда
          Если Сообщать Тогда Текст = " - Не совпадает организация"; КонецЕсли;
          СтруктураРеквизиты.Вставить("Организация", ДокОбъект.Организация);
          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("ДоговорКонтрагента") <> Неопределено 
          И МетаСФ.Найти("ДоговорКонтрагента") <> Неопределено 
          И СчетФактура.ДоговорКонтрагента <> ДокОбъект.ДоговорКонтрагента
          И СчетФактура.ДоговорКонтрагента <> ДокОбъект.ДоговорКонтрагента.ДоговорГоловногоКонтрагента Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает договор";
          КонецЕсли;
          СтруктураРеквизиты.Вставить("ДоговорКонтрагента", ДокОбъект.ДоговорКонтрагента);

          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("Контрагент") <> Неопределено 
          И СчетФактура.Контрагент <> ДокОбъект.Контрагент
          И СчетФактура.Контрагент <> ДокОбъект.Контрагент.ГоловнойКонтрагент Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает контрагент";
          КонецЕсли;
          СтруктураРеквизиты.Вставить("Контрагент", ДокОбъект.Контрагент);

          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("ВалютаДокумента") <> Неопределено И СчетФактура.ВалютаДокумента <> ДокОбъект.ВалютаДокумента Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает валюта документа";
          КонецЕсли;
          СтруктураРеквизиты.Вставить("ВалютаДокумента", ДокОбъект.ВалютаДокумента);

          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("КодВидаОперации") <> Неопределено И СчетФактура.КодВидаОперации <> ДокОбъект.КодВидаОперации Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает код вида операции";
          КонецЕсли;
          СтруктураРеквизиты.Вставить("КодВидаОперации", ДокОбъект.КодВидаОперации);

          Флаг = Ложь;
     КонецЕсли;
     
     Если МетаРекв.Найти("СуммаДокумента") <> Неопределено И не ДокОбъект.Ссылка.СуммаДокумента = ДокОбъект.СуммаДокумента Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Изменилась сумма документа";
          КонецЕсли;
          НоваяСумма = Макс(0, СчетФактура.СуммаДокумента - ?(ЗначениеЗаполнено(ДокОбъект.Ссылка.СуммаДокумента),ДокОбъект.Ссылка.СуммаДокумента,0))+ДокОбъект.СуммаДокумента;
          
          СтруктураРеквизиты.Вставить("СуммаДокумента", НоваяСумма);

          Флаг = Ложь;
     КонецЕсли;
	 
	 Если МетаРекв.Найти("СуммаНДС") <> Неопределено И не ДокОбъект.Ссылка.СуммаНДС = ДокОбъект.СуммаНДС Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Изменилась сумма документа";
          КонецЕсли;
          НоваяСуммаНДС = Макс(0, СчетФактура.СуммаНДС - ?(ЗначениеЗаполнено(ДокОбъект.Ссылка.СуммаНДС),ДокОбъект.Ссылка.СуммаНДС,0))+ДокОбъект.СуммаНДС;
          
          СтруктураРеквизиты.Вставить("СуммаНДС", НоваяСуммаНДС);

          Флаг = Ложь;
     КонецЕсли;
     
     Если Сообщать И НЕ ПустаяСтрока(Текст) Тогда
          Текст = "Обнаружены расхождения реквизитов в счете-фактуре: " + Строка(СчетФактура) + " и в документе-основании: " + Строка(ДокОбъект) + Символы.ПС + Текст;
          Если СчетФактура.ДокументыОснования.Количество()=1 Тогда
               флУдалосьПерезаполнить = ложь;
               Попытка
                    СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
                    Для каждого элемент из СтруктураРеквизиты цикл
                         СчетФактураОбъект[элемент.Ключ]=Элемент.Значение;
                    Конеццикла;
                    СчетФактураОбъект.мОбновлятьРеквизитыПриЗаписи = Ложь;
                    СчетФактураОбъект.Записать();
                    флУдалосьПерезаполнить = истина;
               Исключение
               КонецПопытки;
               Если флУдалосьПерезаполнить Тогда
                    Текст = Текст + Символы.ПС+"Реквизиты в счете-фактуре перезаполнены автоматически";
               Иначе
                    Текст = Текст + Символы.ПС+"Не удалось автоматически перезаполнить реквизиты. Для перезаполнения реквизитов необходимо открыть счет-фактуру и записать ее";
               КонецЕсли;
          Иначе
               Текст = Текст + Символы.ПС+"Внимание! У данного счета-фактуры несколько документов-оснований. Нельзя автоматически перезаполнить реквизиты";
          КонецЕсли;
          
          Сообщить(Текст, СтатусСообщения.Внимание);
     КонецЕсли;

     Возврат Флаг;

КонецФункции

//***********************************************************************************************
//	  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС

//Функция определения вида ценности по группе критериев.
//
Функция ОпределитьВидЦенности(Объект, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = Неопределено, ЭтоУслуга = Ложь) Экспорт

	Если ЭтоАгентскийНДС Тогда
		// Это агентский НДС - для него применяется специальный вид ценности.
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;
	ИначеЕсли ЭтоДопРасходы Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда
		Если НЕ ЗначениеЗаполнено(Объект) Или ЭтоУслуга = Истина Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.Товары;
		КонецЕсли;
	Иначе
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции

// Процедура арифметически распределяет заданную сумму
// по столбцу таблицы значений пропрционально колонке базы распределения
// при этом размерность таблицы и базы распределения должны совпадать.
// Как правило база распределения - просто одна из колонок таблицы
Процедура РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата) Экспорт

	// Определяем сумму базы
	СуммаБазы = 0;

	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;

	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;

		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл

			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;

			// Записываем результат
			ТаблицаРезультата[Индекс][ИдКолонкиРезультата] = ШагРаспределения;

			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура подготовки таблицы значений для целей формирования движений
// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
// в таблице значений, переданной в качестве параметра
Процедура ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(СтруктураШД, ТаблицаЗначений) Экспорт
	
	ЭтоДопРасходы=(СтруктураШД.ВидДокумента="ПоступлениеДопРасходов");
	УчетАгентскогоНДС=Ложь;
	ВидАгентскогоДоговора="";

	Если СтруктураШД.Свойство("УчетАгентскогоНДС") и ЗначениеЗаполнено(СтруктураШД.УчетАгентскогоНДС) тогда
		УчетАгентскогоНДС=СтруктураШД.УчетАгентскогоНДС;
	КонецЕсли;
	Если СтруктураШД.Свойство("ВидАгентскогоДоговора") тогда
		ВидАгентскогоДоговора=СтруктураШД.ВидАгентскогоДоговора;
	КонецЕсли;

	ЕстьКолонкаНоменклатура=ТаблицаЗначений.Колонки.Найти("Номенклатура")<>Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		ЭтоУслуга=Ложь; Ценность=Неопределено;
		Если ЕстьКолонкаНоменклатура Тогда
			Ценность=СтрокаТаблицы.Номенклатура;
			ЭтоУслуга=СтрокаТаблицы.Услуга;
		КонецЕсли;
		СтрокаТаблицы.ВидЦенности=ОпределитьВидЦенности(Ценность, ЭтоДопРасходы, УчетАгентскогоНДС, ВидАгентскогоДоговора, ЭтоУслуга);
		СтрокаТаблицы.Ценность=Ценность;
	КонецЦикла;

КонецПроцедуры

// Функция определеяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-
// фактур.
// 
// Параметры:
//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
//  Организация      - Справочник.Ссылка - Организация, по которой
//                     осуществляется отбор. Необязательный параметр. Если не
//                     задан, отбор осуществляется по всем организациям.
//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов, 
//                     по которым осуществляется отбор. Необязательный параметр. 
//                     Если не задан, отбор осуществляется по всем документам, 
//                     которые могут являться основаниями для ввода счетов-фактур 
//                     полученных.
//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр. 
//                     Необязательный параметр. Значение по умолчаню - Ложь.
//                     Если не задан, отбираются документы, заданные в Фильтре.
//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
//                        Истина - Отбирать документы, по которым существуют
//                        счета-фактуры.
//                        Ложь - Отбирать документы, по которым счета-фактуры
//                        отсутствуют.
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех документов.
// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
//                        Истина - Отбирать проведенные счета-фактуры
//                        Ложь - Отбирать непроведенные счета-фактуры
//                        Необязательный параметр. Если не задан, осуществляется
//                        отбор всех счетов-фактур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//                    Документ - Документ.Ссылка - Документ, по которому
//                               производился поиск счета-фактуры полученного
//                    СчетФактура - Документ.Ссылка - Ссылка на счет-фактуру полученный, либо Неопределено
//
Функция ОпределитьНаличиеСчетовФактурПолученных(НачПериода=Неопределено, КонПериода= Неопределено,Организация, Фильтр = Неопределено,ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, СчетФактураПроведен = Неопределено, ДатаСФНеБолее = Неопределено) Экспорт

	Запрос = Новый Запрос();	
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  ?(Не ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(Не ЗначениеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Фильтр",      Фильтр);
	
	// Дополняем условие запроса отбором по периоду
	Если (ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";
	ИначеЕсли (ЗначениеЗаполнено(НачПериода)) И (Не ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата >= &НачПериода
		                 |";
	ИначеЕсли (Не ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода)) Тогда
		Условие_Основание = "СчетФактура.Дата <= &КонПериода
		                 |";
	Иначе
		Условие_Основание = "";
	КонецЕсли;
	
	// Дополняем условие запроса отбором по организации
	Условие_Основание = Условие_Основание 
	               + ?(Не ЗначениеЗаполнено(Организация), "", ?(Не ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");
	
	// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
	Условие_Основание = Условие_Основание
	               + ?(Не ЗначениеЗаполнено(Фильтр), "", ?(Не ЗначениеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
	
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(Не ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера
					|			ТОГДА СчетФактураПолученный.Ссылка
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
					|	КОНЕЦ ЕСТЬ NULL) ");
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(Не ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера
					|			ТОГДА СчетФактураПолученный.Ссылка.Проведен
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Проведен, СчетФактураВыданный.Ссылка.Проведен)
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");
				   
	// Дополняем условие запроса отбором по дате СФ	
	УсловиеЗапроса = УсловиеЗапроса
	               + ?(Не ЗначениеЗаполнено(ДатаСФНеБолее), "", ?(Не ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера
					|			ТОГДА СчетФактураПолученный.Ссылка.Дата
					|		КОГДА СчетФактураПолученный.Ссылка.ПринятиеКВычетуПослеОкончанияНалоговогоПериода
					|			ТОГДА &ДатаСФНеБолее
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата, СчетФактураВыданный.Ссылка.Дата)
					|	КОНЕЦ <= &ДатаСФНеБолее ");
	
	// Дополняем условие запроса ключевым словом "ГДЕ"
	УсловиеЗапроса = ?(Не ЗначениеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера
	|				ТОГДА СчетФактураПолученный.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера
	|				ТОГДА СчетФактураПолученный.Ссылка.Проведен
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Проведен, СчетФактураВыданный.Ссылка.Проведен)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера
	|				ТОГДА СчетФактураПолученный.Ссылка.Дата
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата, СчетФактураВыданный.Ссылка.Дата)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(,&КонПериода, Период, Организация = &Организация) КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ПО (НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.Ссылка)";
		
	Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация",Условие_Основание);
	Запрос.Текст =  Запрос.Текст + Символы.ПС+ "Упорядочить по НДСПредъявленныйОбороты.СчетФактура.Дата";
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаДокументов;	
КонецФункции

//***********************************************************************************************
//Преобразование промежуточных таблиц для НДС

Функция НайтиСчетУчета(Проводки, тзСчетаУчета, ДК="Д") Экспорт
	Для каждого СтрокаПроводки Из Проводки Цикл
		Если ДК="Д" Тогда
			РезультатПоиска=тзСчетаУчета.Найти(СтрокаПроводки.СчетДебет);
		ИначеЕсли ДК="К" Тогда
			РезультатПоиска=тзСчетаУчета.Найти(СтрокаПроводки.СчетКредит);
		КонецЕсли;
		Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли; 

		Возврат СтрокаПроводки.СчетДебет;
	КонецЦикла;
КонецФункции 

//***********************************************************************************************
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить поступление МПЗ или затрат в подсистеме учета НДС,
// а именно в регистре: "НДСПокупки"
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШД, ТаблицаПредъявленногоНДС, ИдТабЧасти, Движения, Отказ) Экспорт

	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если не СтруктураШД.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") или не СтруктураШД.Свойство("СложныйУчетНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШД.Дата, ОшибкаВПолучении, СтруктураШД.Организация, "Нал");
		Если не СтруктураШД.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
			СтруктураШД.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
		КонецЕсли;
		Если не СтруктураШД.Свойство("СложныйУчетНДС") Тогда
			СтруктураШД.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	// Движения по этому документу делать не нужно
	Если СтруктураШД.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;

	УчитыватьНДСПредъявленный = Истина;

	Если СтруктураШД.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДСПредъявленный = СтруктураШД.УчитыватьНДС;
	КонецЕсли;
	
	Если не УчитыватьНДСПредъявленный Тогда Возврат; КонецЕсли;
	
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.ВыгрузитьКолонки();
	ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено;
	ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено;

	ЕстьКолонка_СтатьяЗатрат = (не ТаблицаПредъявленногоНДС.Колонки.Найти("СтатьяЗатрат")=Неопределено);
	ЕстьКолонка_ВидДеятельностиДляНалоговогоУчетаЗатрат = (не ТаблицаПредъявленногоНДС.Колонки.Найти("ВидДеятельностиДляНалоговогоУчетаЗатрат")=Неопределено);
	//*** ЕстьКолонка_ТОП=(не ТаблицаПредъявленногоНДС.Колонки.Найти("ТОП")=Неопределено);
	ЕстьКолонка_СчетУчетаНДС=(не ТаблицаПредъявленногоНДС.Колонки.Найти("СчетУчетаНДС")=Неопределено);
	ЕстьКолонка_НомерСтрокиТабличнойЧасти=(не ТаблицаПредъявленногоНДС.Колонки.Найти("НомерСтрокиТабличнойЧасти")=Неопределено);
	ЕстьКолонка_ВидТабличнойЧасти=ТаблицаПредъявленногоНДС.Колонки.Найти("ВидТабличнойЧасти");
	
	НаборЗаписей=РегистрыСведений.СоответствияСчетовУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	тзСчетаУчетаЗатрат=НаборЗаписей.Выгрузить(, "Счет");

	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		//По строкам АО, в которых не указана СФ записи в регистре не формируются 
		Если СтруктураШД.ВидДокумента = "АвансовыйОтчет" и НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДвижения=ТаблицаДвижений_НДСПредъявленный.Добавить();
		СтрокаДвижения.Организация = СтруктураШД.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

		Если СтруктураШД.ВидДокумента = "АвансовыйОтчет" Тогда
			// при проведении авансовых отчетов порядок заполнения данных измерений иной
			СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
			СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
		Иначе
			СтрокаДвижения.Поставщик   = СтруктураШД.Контрагент;
			СтрокаДвижения.СчетФактура = СтруктураШД.Ссылка;
			
			Если СтруктураШД.Свойство("ДоговорКонтрагента") Тогда
				СтрокаДвижения.ДоговорКонтрагента=СтруктураШД.ДоговорКонтрагента;
			КонецЕсли; //14.03.14 Резеда
		КонецЕсли;

		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;

		Если ЕстьКолонка_ВидТабличнойЧасти<>Неопределено Тогда
			СтрокаДвижения.ВидТабличнойЧасти = СтрокаДок.ВидТабличнойЧасти;
		КонецЕсли; 

		Если ЕстьКолонка_СчетУчетаНДС Тогда
			СтрокаДвижения.СчетУчетаНДС=СтрокаДок.СчетУчетаНДС;
		КонецЕсли;

		Если ЕстьКолонка_НомерСтрокиТабличнойЧасти Тогда
			СтрокаДвижения.НомерСтрокиТабличнойЧасти=СтрокаДок.НомерСтрокиТабличнойЧасти;
		КонецЕсли;

		Если СтруктураШД.СложныйУчетНДС и ЕстьКолонка_СтатьяЗатрат тогда
			СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
			
			Если ЕстьКолонка_ВидДеятельностиДляНалоговогоУчетаЗатрат Тогда
			    ВидДеятельностиДляНалоговогоУчетаЗатрат = СтрокаДок.ВидДеятельностиДляНалоговогоУчетаЗатрат;
			Иначе
			    ВидДеятельностиДляНалоговогоУчетаЗатрат = СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
			КонецЕсли; 
			
			Если ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
				ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаДвиженияКР=ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();
			СтрокаДвиженияКР.Организация=СтруктураШД.Организация;
			СтрокаДвиженияКР.ВидЦенности=СтрокаДок.ВидЦенности;
			
			Если (СтруктураШД.ВидДокумента = "АвансовыйОтчет") Тогда
				// при проведении авансовых отчетов порядок заполнения данных измерений иной
				СтрокаДвиженияКР.СчетФактура= СтрокаДок.СчетФактура;
			Иначе
				СтрокаДвиженияКР.СчетФактура= СтруктураШД.Ссылка;
			КонецЕсли;
			
			Если (СтруктураШД.ВидДокумента = "ПоступлениеДопРасходов") Тогда
				СтрокаДвиженияКР.СтавкаНДС	= СтруктураШД.СтавкаНДС;
			Иначе
				СтрокаДвиженияКР.СтавкаНДС	= СтрокаДок.СтавкаНДС;
			КонецЕсли;	
			
			СтрокаДвиженияКР.НДСВключенВСтоимость = ?(СтруктураШД.Свойство("НДСВключенВСтоимость"),СтруктураШД.НДСВключенВСтоимость,Ложь);
			СтрокаДвиженияКР.СтатьяЗатрат = СтатьяЗатрат;
			СтрокаДвиженияКР.СуммаБезНДС  = СтрокаДок.СуммаБезНДС;
			СтрокаДвиженияКР.НДС          = СтрокаДок.НДС;
			
			Если ЕстьКолонка_СчетУчетаНДС Тогда
				СтрокаДвиженияКР.СчетУчетаНДС=СтрокаДок.СчетУчетаНДС;
			КонецЕсли;
			
			//Заполняем реквизиты			
			СчетЗатратБУ=НайтиСчетУчета(СтрокаДок.ТОП.ПроводкиБУ, тзСчетаУчетаЗатрат);
			Если СчетЗатратБУ<>Неопределено Тогда
				Док=СтруктураШД.Ссылка;
				тзАналитика=Справочники.ТиповыеОперации["Документ_"+Док.Метаданные().Имя].НастройкаАналитики.Выгрузить();
				СтрокаДвиженияКР.СчетЗатрат=СчетЗатратБУ; ВидыСубконтоБУ=Новый Структура;
				УправлениеПроведением.УстановитьСубконто(Док, СтрокаДвиженияКР.СчетЗатрат, ВидыСубконтоБУ, тзАналитика, "Д", ИдТабЧасти, СтрокаДок);
				ВидыСубконтоБУ.Свойство("Субконто1", СтрокаДвиженияКР.Субконто1);
				ВидыСубконтоБУ.Свойство("Субконто2", СтрокаДвиженияКР.Субконто2);
				ВидыСубконтоБУ.Свойство("Субконто3", СтрокаДвиженияКР.Субконто3);
			КонецЕсли; 
		КонецЕсли;

		//************************************
		// Отражение включения НДС в стоимость 
		Если СтруктураШД.Свойство("НДСВключенВСтоимость") и СтруктураШД.НДСВключенВСтоимость Тогда

			СтрокаДвижения2 = ТаблицаДвижений_НДСПредъявленный.Добавить();
			СтрокаДвижения2.Организация = СтрокаДвижения.Организация;
			СтрокаДвижения2.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвижения2.Поставщик   = СтрокаДвижения.Поставщик;
			СтрокаДвижения2.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвижения2.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
			СтрокаДвижения2.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвижения2.НДС         = СтрокаДвижения.НДС;
			СтрокаДвижения2.СчетУчетаНДС= СтрокаДвижения.СчетУчетаНДС;
			СтрокаДвижения2.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаДвижения2.Событие     = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			СтрокаДвижения2.ВидТабличнойЧасти = СтрокаДвижения.ВидТабличнойЧасти;

			Если ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
				ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаДвиженияВкл = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
			СтрокаДвиженияВкл.Организация = СтрокаДвижения.Организация;
			СтрокаДвиженияВкл.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвиженияВкл.Поставщик   = СтрокаДвижения.Поставщик;
			СтрокаДвиженияВкл.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвиженияВкл.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
			СтрокаДвиженияВкл.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвиженияВкл.НДС         = СтрокаДвижения.НДС;
		КонецЕсли;
		// Отражение включения НДС в стоимость 
		//************************************
	КонецЦикла;

	СтруктураПараметров=Новый Структура;

	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
		Движения.НДСПредъявленный.мПериод          = СтруктураШД.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
		Движения.НДСПредъявленный.Записать(Ложь);

		СтруктураПараметров.Вставить("ДвиженияНДСПредъявленный", ТаблицаДвижений_НДСПредъявленный);		
	КонецЕсли;
	
	Если не ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШД.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
		Движения.НДСКосвенныеРасходы.Записать(Ложь);

		СтруктураПараметров.Вставить("ДвиженияНДСКосвенныеРасходы", ТаблицаДвижений_НДСКосвенныеРасходы);
	КонецЕсли; 
	
	Если не ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
		Движения.НДСВключенныйВСтоимость.мПериод          = СтруктураШД.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
		Движения.НДСВключенныйВСтоимость.Записать(Ложь);

		СтруктураПараметров.Вставить("ДвиженияНДСВключенныйВСтоимость", ТаблицаДвижений_НДСВключенныйВСтоимость);
	КонецЕсли; 

КонецПроцедуры

// Процедура вызывается из модулей документов прихода.
Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШД, ТабЧасть, ИдТабЧасти, Движения, Отказ, НДСНеВлияетНаРасчеты = Ложь, ТаблицаАвансов = Неопределено) Экспорт
	
	Если не СтруктураШД.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШД.Дата, ОшибкаВПолучении, СтруктураШД.Организация, "Нал");
	    СтруктураШД.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
	КонецЕсли; 
	
	Если СтруктураШД.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;
	
	Контрагент=СтруктураШД.Контрагент;
	ДоговорКонтрагента=СтруктураШД.ДоговорКонтрагента;

	// По расчетам документ отражаем всегда, даже если он не отражается для целей НДС.
	// Это необходимо для корректного построения FIFO по расчетам.
	ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	
	Если ТабЧасть.Колонки.Найти("ТипДоговораКонтрагента")=Неопределено Тогда
		ТабЧасть.Колонки.Добавить("ТипДоговораКонтрагента", Новый ОписаниеТипов("СправочникСсылка.КлассификаторПеречислений"));
	КонецЕсли;
	тзДанные=ТабЧасть.Скопировать(,"ТипДоговораКонтрагента,Сумма,НДС,СуммаБезНДС");
	тзДанные.Свернуть("ТипДоговораКонтрагента", "Сумма,НДС,СуммаБезНДС");
	
	Для Каждого СтрокаДок из тзДанные Цикл
		Сумма=СтрокаДок.СуммаБезНДС;
		Если НДСНеВлияетНаРасчеты Тогда
			НДС=СтрокаДок.НДС;
		Иначе
			Сумма=Сумма+СтрокаДок.НДС;
		КонецЕсли; 
		Если Сумма=0 Тогда Продолжить; КонецЕсли; 

		СтрокаДвижения=ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация=СтруктураШД.Организация;
		СтрокаДвижения.Поставщик=Контрагент;
		СтрокаДвижения.ДоговорКонтрагента=ДоговорКонтрагента;
		СтрокаДвижения.Документ=СтруктураШД.Ссылка;
		СтрокаДвижения.ТипДоговораКонтрагента=СтрокаДок.ТипДоговораКонтрагента;
		СтрокаДвижения.Сумма=Сумма;
		СтрокаДвижения.ДатаСобытия=СтруктураШД.Дата;
		
		Если НДСНеВлияетНаРасчеты Тогда
			СтрокаДвиженияНДС=ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
			СтрокаДвиженияНДС.Организация=СтруктураШД.Организация;
			СтрокаДвиженияНДС.Поставщик=Контрагент;
			СтрокаДвиженияНДС.ДоговорКонтрагента=ДоговорКонтрагента;
			СтрокаДвиженияНДС.Документ=СтруктураШД.Ссылка;
			СтрокаДвиженияНДС.РасчетыСБюджетом=Истина;
			СтрокаДвижения.ТипДоговораКонтрагента=СтрокаДок.ТипДоговораКонтрагента;
			СтрокаДвиженияНДС.Сумма=НДС;
			СтрокаДвиженияНДС.ДатаСобытия=СтруктураШД.Дата;
		КонецЕсли; 		
	КонецЦикла;

	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");

	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество()>0 Тогда
		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШД.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
	КонецЕсли; 	
	
КонецПроцедуры

// Процедура вызывается из модулей документов списания
Процедура СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШД, ТаблицаДвиженийПартий, Движения, Отказ) Экспорт
	Если Отказ Тогда Возврат; КонецЕсли;
	
	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;
	Если НЕ УчетнаяПолитика.СложныйУчетНДС Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(Движения) = Тип("Структура") тогда
		ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.ТаблицаДвиженийНДСКосвенныеРасходы;
	Иначе	
		ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДок Из ТаблицаДвиженийПартий Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда Продолжить; КонецЕсли;

		Если Не СтруктураШД.Свойство("СтатьяЗатрат") Тогда
			Если ТаблицаДвиженийПартий.Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
				СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
			Иначе
				СтатьяЗатрат = Неопределено;
			КонецЕсли;
		Иначе
			СтатьяЗатрат = СтруктураШД.СтатьяЗатрат;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			// Необходимо включить запись в состав косвенных расходов для последующего распределения
			СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвиженияКР,СтрокаДок); 
			
			СтрокаДвиженияКР.Организация  = СтруктураШД.Организация;
			СтрокаДвиженияКР.СтатьяЗатрат = СтатьяЗатрат;
			
			СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.Стоимость - СтрокаДок.НДС;
			СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСКосвенныеРасходы.Количество() > 0 тогда
		Если ТипЗнч(Движения) = Тип("Структура") тогда
			ТаблицаДвижений_НДСКосвенныеРасходы.ЗаполнитьЗначения(Движения.Период,"Период");
		Иначе	
			Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШД.Дата;
			Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
			Движения.НДСКосвенныеРасходы.ДобавитьДвижение();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить начисление НДС налогового агента в подсистеме учета НДС,
// а именно в регистре: "НДСНачисленный"
Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШД,ДвиженияНДСПредъявленный,Движения) Экспорт
	Если СтруктураШД.НалоговыйАгентПоОплате Тогда Возврат; КонецЕсли;

	ВидыЦенностей_Агентские = Новый списокЗначений();
	ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);

	ТаблицаДвижений_НДСНачисленный = Неопределено;
	Для каждого СтрокаДвижений_НДСПредъявленный Из ДвиженияНДСПредъявленный Цикл
		Если СтрокаДвижений_НДСПредъявленный.ВидДвижения = ВидДвиженияНакопления.Приход 
			и не ВидыЦенностей_Агентские.НайтиПоЗначению(СтрокаДвижений_НДСПредъявленный.ВидЦенности) = Неопределено Тогда
			
			Если ТаблицаДвижений_НДСНачисленный = Неопределено тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
			КонецЕсли;
			СтрокаДвижений_НДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
			
			СтрокаДвижений_НДСНачисленный.Организация	= СтрокаДвижений_НДСПредъявленный.Организация;
			СтрокаДвижений_НДСНачисленный.Покупатель	= СтрокаДвижений_НДСПредъявленный.Поставщик;
			СтрокаДвижений_НДСНачисленный.СчетФактура	= СтрокаДвижений_НДСПредъявленный.СчетФактура;
			СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаДвижений_НДСПредъявленный.ВидЦенности;
			СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаДвижений_НДСПредъявленный.СтавкаНДС;
			
			СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= СтрокаДвижений_НДСПредъявленный.СуммаБезНДС;
			СтрокаДвижений_НДСНачисленный.НДС			= СтрокаДвижений_НДСПредъявленный.НДС;
			
			СтрокаДвижений_НДСНачисленный.Событие 		= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			СтрокаДвижений_НДСНачисленный.ДатаСобытия 	= СтруктураШД.Дата;
			
			СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
			СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;		
		КонецЕсли; 
	КонецЦикла;
	
	Если не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда
		Движения.НДСНачисленный.мПериод=СтруктураШД.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений=ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШД, ТабЧасть, Движения, Отказ, ЭтоВозврат=Ложь) Экспорт
    	
	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;

	Если не СтруктураШД.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		СтруктураШД.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС", УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС);
	КонецЕсли; 

	УчитыватьНДС=Истина;
	Если СтруктураШД.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС=СтруктураШД.УчитыватьНДС;
	КонецЕсли;

	Если не УчитыватьНДС Тогда Возврат; КонецЕсли;
	
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	
	Если ТипЗнч(Движения) = Тип("Структура") тогда
		ТаблицаДвижений_НДСНачисленный	= Движения.ТаблицаДвиженийНДСНачисленный;
	Иначе	
		ТаблицаДвижений_НДСНачисленный	= Движения.НДСНачисленный.ВыгрузитьКолонки();
	КонецЕсли;
		
	ТаблицаДвижений_НДСРеализация0	= Неопределено;

	ЕстьКомиссионный 	= (не ТабЧасть.Колонки.Найти("Комиссионный")= неопределено);
	ЕстьДоговорКомиссии = (не ТабЧасть.Колонки.Найти("ДоговорКомиссии")= неопределено);
	ЕстьДокументПартии 	= (не ТабЧасть.Колонки.Найти("ДокументПартии")= неопределено);
	
	//Учет особенностей ЕНВД
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД;

	ЕстьКолонка_Услуга = (не ТабЧасть.Колонки.Найти("Услуга") = неопределено);
	
	Для Каждого СтрокаВыбытия Из ТабЧасть Цикл
		
		ОтражатьНДСКомитента = Ложь;

		Если (ЕстьКомиссионный и СтрокаВыбытия.Комиссионный = Истина) или (СтрокаВыбытия.СуммаБезНДС + СтрокаВыбытия.НДС) = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДвижения=ТаблицаДвижений_НДСНачисленный.Добавить();
		СтрокаДвижения.Организация = СтруктураШД.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаВыбытия.ВидЦенности;
		СтрокаДвижения.Покупатель  = ?(СтруктураШД.Свойство("Контрагент"), СтруктураШД.Контрагент, СтруктураШД.Организация);
		СтрокаДвижения.ВидТабличнойЧасти = СтрокаВыбытия.ВидТабличнойЧасти; //lee
		
		Если ЭтоВозврат Тогда
			ТипДокументаПартии = ТипЗнч(СтрокаВыбытия.ДокументПартии);
			Если ТипДокументаПартии =  Тип("ДокументСсылка.РеализацияТоваровУслуг") 
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтражениеРеализацииТоваровУслугНДС")
				или ТипДокументаПартии =  Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера")
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
				Тогда
				СтрокаДвижения.СчетФактура = СтрокаВыбытия.ДокументПартии;
			Иначе
				СтрокаДвижения.СчетФактура = СтруктураШД.Ссылка;	
			КонецЕсли; 
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Возврат;
		Иначе	
			СтрокаДвижения.СчетФактура = СтруктураШД.Ссылка;
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Реализация;
		КонецЕсли; 
		СтрокаДвижения.СтавкаНДС   = СтрокаВыбытия.СтавкаНДС;
		СтрокаДвижения.СуммаБезНДС = СтрокаВыбытия.СуммаБезНДС*?(ЭтоВозврат,-1,1);
		СтрокаДвижения.НДС         = СтрокаВыбытия.НДС*?(ЭтоВозврат,-1,1);
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;

		Если СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;

		ИначеЕсли СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Если СтруктураШД.ВидДокумента = "ОтчетОРозничныхПродажах"
				и РозничнаяТорговляОблагаетсяЕНВД
				и не (ЕстьКолонка_Услуга и СтрокаВыбытия.Услуга)
				Тогда
				
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
			ИначеЕсли СтруктураШД.ВидДокумента = "ВозвратТоваровОтПокупателя" 
				и ЕстьДокументПартии
				и ТипЗнч(СтрокаВыбытия.ДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
				тогда
				
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
			Иначе	
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			КонецЕсли; 
		Иначе
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли; 
		
		// Устанавливаем реквизиты движения
		СтрокаДвижения.Номенклатура = СтрокаВыбытия.Ценность;
		
		Если СтрокаВыбытия.СтавкаНДС = Ставка0 
			и не СтруктураШД.ВидДокумента = "ОтчетОРозничныхПродажах"
			и не СтруктураШД.ВидДокумента = "ПриходныйКассовыйОрдер"
			Тогда
			Если ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
				
				Если ТипЗнч(Движения) = Тип("Структура") тогда
					ТаблицаДвижений_НДСРеализация0 = Движения.ТаблицаДвиженийНДСРеализация0;
				Иначе	
					ТаблицаДвижений_НДСРеализация0	= Движения.НДСРеализация0.ВыгрузитьКолонки();
				КонецЕсли;
			КонецЕсли;
			СтрокаДвижения0=ТаблицаДвижений_НДСРеализация0.добавить();
			СтрокаДвижения0.Организация = СтрокаДвижения.Организация;
			СтрокаДвижения0.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвижения0.Покупатель  = СтрокаДвижения.Покупатель;
			СтрокаДвижения0.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвижения0.СтавкаНДС   = Ставка0;
			СтрокаДвижения0.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
			СтрокаДвижения0.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвижения0.НДС         = СтрокаДвижения.НДС;
			СтрокаДвижения0.Событие     = СтрокаДвижения.Событие;
			СтрокаДвижения0.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаДвижения0.ВидТабличнойЧасти = СтрокаВыбытия.ВидТабличнойЧасти; //lee
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаДвижений_НДСНачисленный.Количество() > 0 Тогда
		Если НЕ ТипЗнч(Движения) = Тип("Структура") тогда
			Движения.НДСНачисленный.мПериод          = СтруктураШД.Дата;
			Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
			Движения.НДСНачисленный.ДобавитьДвижение();
			Движения.НДСНачисленный.Записать(Ложь);
		Иначе	
			ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Движения.Период,"Период");
		КонецЕсли;
	КонецЕсли;
		
	Если не ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
		Если НЕ ТипЗнч(Движения) = Тип("Структура") тогда
			Движения.НДСРеализация0.мПериод          = СтруктураШД.Дата;
			Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
			Движения.НДСРеализация0.ДобавитьДвижение();
			Движения.НДСРеализация0.Записать(Ложь);
		Иначе
			ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(Движения.Период,"Период");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШД, тзСсылка, Движения, Отказ, ЭтоВозврат=Ложь) Экспорт
	тзНДСРасчетыСПокупателями=Движения.НДСРасчетыСПокупателями.ВыгрузитьКолонки();

	Если тзСсылка.Колонки.Найти("ТипДоговораКонтрагента")=Неопределено Тогда
		тзСсылка.Колонки.Добавить("ТипДоговораКонтрагента");
	КонецЕсли;
	тзДанные=тзСсылка.Скопировать(,"ТипДоговораКонтрагента,Сумма,НДС,СуммаБезНДС");
	тзДанные.Свернуть("ТипДоговораКонтрагента", "Сумма,НДС,СуммаБезНДС");

	Для Каждого СтрокаКоллекции из тзДанные Цикл
		Сумма=СтрокаКоллекции.СуммаБезНДС+СтрокаКоллекции.НДС;
		Если Сумма=0 Тогда Продолжить; КонецЕсли;
		
		СтрокаДвижения=тзНДСРасчетыСПокупателями.Добавить();
		СтрокаДвижения.Организация=СтруктураШД.Организация;
		СтрокаДвижения.Покупатель=СтруктураШД.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента=СтруктураШД.ДоговорКонтрагента;
		СтрокаДвижения.Документ=СтруктураШД.Ссылка;
		СтрокаДвижения.ТипДоговораКонтрагента=СтрокаКоллекции.ТипДоговораКонтрагента;
		СтрокаДвижения.Сумма=Сумма;
		СтрокаДвижения.ДатаСобытия=СтруктураШД.Дата;
		СтрокаДвижения.ВидДвижения=?(ЭтоВозврат, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	КонецЦикла;

	Если тзНДСРасчетыСПокупателями.Количество() > 0 Тогда
		Движения.НДСРасчетыСПокупателями.мПериод=СтруктураШД.Дата;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений=тзНДСРасчетыСПокупателями;
		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСЗаписиКнигиПокупок(СтруктураШД, СтруктураТД, Движения, Отказ, ПоМодулю=Ложь) Экспорт
	
	тзДвижения=Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Для Каждого СтрокаКоллекции Из СтруктураТД Цикл
		тзСсылка=СтрокаКоллекции.Значение;
		Для Каждого СтрокаТаблицы Из тзСсылка Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если ПоМодулю Тогда
				Если НоваяСтрока.СуммаБезНДС<0 Тогда 
					НоваяСтрока.СуммаБезНДС=-НоваяСтрока.СуммаБезНДС;
				КонецЕсли;	
				Если НоваяСтрока.НДС<0 Тогда 
					НоваяСтрока.НДС=-НоваяСтрока.НДС;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	тзДвижения.ЗаполнитьЗначения(СтруктураШД.Дата, "ДатаОплаты");
	тзДвижения.ЗаполнитьЗначения(СтруктураШД.Ссылка, "СчетФактура");
	тзДвижения.ЗаполнитьЗначения(СтруктураШД.Контрагент, "Поставщик");
	тзДвижения.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");

	Движения.НДСЗаписиКнигиПокупок.Загрузить(тзДвижения);
КонецПроцедуры	

Процедура СформироватьДвиженияПоРегиструНДСЗаписиКнигиПродаж(СтруктураШД, СтруктураТД, Движения, Отказ, ПоМодулю=Ложь) Экспорт
	
	тзДвижения=Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	Для Каждого СтрокаКоллекции Из СтруктураТД Цикл
		тзСсылка=СтрокаКоллекции.Значение;
		Для Каждого СтрокаТаблицы Из тзСсылка Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Событие=Перечисления.СобытияПоНДСПродажи.НДССкорректирован;
			Если ПоМодулю Тогда
				Если НоваяСтрока.СуммаБезНДС<0 Тогда 
					НоваяСтрока.СуммаБезНДС=-НоваяСтрока.СуммаБезНДС;
				КонецЕсли;	
				Если НоваяСтрока.НДС<0 Тогда 
					Если ТипЗнч(СтруктураШД.Ссылка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
						НоваяСтрока.Событие=Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
					КонецЕсли;
					НоваяСтрока.НДС=-НоваяСтрока.НДС;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	тзДвижения.ЗаполнитьЗначения(СтруктураШД.Дата, "ДатаОплаты");
	тзДвижения.ЗаполнитьЗначения(СтруктураШД.Ссылка, "СчетФактура");
	тзДвижения.ЗаполнитьЗначения(СтруктураШД.Контрагент, "Покупатель");
//	тзДвижения.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НДССкорректирован, "Событие");

	Движения.НДСЗаписиКнигиПродаж.Загрузить(тзДвижения);
КонецПроцедуры	

//***********************************************************************************************
// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Непосредственное заполнение таблицы движений для регистра "НДСПартииТоваров"
// Данные движения необходимо делать в следующих случаях:
// 1. Когда ведется сложный учет НДС и происходит приходование товаров или материалов.
//    Это соответсвтвует ситуации когда у организации существуют виды деятельности, 
//    облагаемые НДС по-разному, например обычный НДС, НДС по ставке 0%, и т.п.).
// 2. Когда происходит оприходование оборудования, требуегощего монтажа (бухсчет 07)
//    для того чтобы впоследствии, можно было правильно рассчитать суммы для отражения в 
//    регистре НДССтроительство при передаче этого оборудования в монтаж.
Процедура СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШД, ВходящаяТаблица, ТаблицаДвиженийНДСПартии, Отказ) Экспорт
	Если ВходящаяТаблица.Количество()=0 тогда Возврат; КонецЕсли;

	УчетнаяПолитика=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураШД, "УчетнаяПолитика");
	Если УчетнаяПолитика=Неопределено Тогда
		УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШД.Дата, Отказ, СтруктураШД.Организация); 
	КонецЕсли;

	ТЗ=ВходящаяТаблица.Скопировать();
	Если ТЗ.Колонки.Найти("Партия") = неопределено тогда 
		ТЗ.Колонки.Добавить("Партия");
		ТЗ.ЗаполнитьЗначения(СтруктураШД.Ссылка,"Партия");
	КонецЕсли;
	Если ТЗ.Колонки.Найти("Склад") = неопределено тогда 
		ТЗ.Колонки.Добавить("Склад",новый ОписаниеТипов("СправочникСсылка.Склады"));
		Если СтруктураШД.Свойство("Склад") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШД.Склад,"Склад");
		ИначеЕсли СтруктураШД.Свойство("Склад") Тогда
			Если СтруктураШД.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				ТЗ.ЗаполнитьЗначения(СтруктураШД.Склад,"Склад");
			Иначе
				ТЗ.ЗаполнитьЗначения(СтруктураШД.СкладПриходногоОрдера,"Склад");
			КонецЕсли;
		КонецЕсли; 
	Иначе
		СкладИзШапки = Неопределено;
		Если СтруктураШД.Свойство("Склад") Тогда
			СкладИзШапкиДокумента = СтруктураШД.Склад;
		ИначеЕсли СтруктураШД.Свойство("Склад") Тогда
			Если СтруктураШД.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СкладИзШапкиДокумента = СтруктураШД.Склад;
			Иначе
				СкладИзШапкиДокумента = СтруктураШД.СкладПриходногоОрдера;
			КонецЕсли;
		КонецЕсли; 
		Для Каждого Строка Из ТЗ Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Склад) Тогда
				Строка.Склад = СкладИзШапкиДокумента;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("Услуга") = неопределено тогда 
		ТЗ.Колонки.Добавить("Услуга", новый описаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("НДСВключенВСтоимость")= Неопределено Тогда
		ТЗ.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
		Если СтруктураШД.Свойство("НДСВключенВСтоимость") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШД.НДСВключенВСтоимость,"НДСВключенВСтоимость");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СчетФактура")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СчетФактура");
		ТЗ.ЗаполнитьЗначения(СтруктураШД.Ссылка,"СчетФактура");
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СтавкаНДС")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СтавкаНДС");
		Если СтруктураШД.Свойство("СтавкаНДС") Тогда
		    ТЗ.ЗаполнитьЗначения(СтруктураШД.СтавкаНДС,"СтавкаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	ЕстьСтоимость	= не (ТЗ.Колонки.Найти("Стоимость") = Неопределено);
	ЕстьСуммаБезНДС	= не (ТЗ.Колонки.Найти("СуммаБезНДС") = Неопределено);
	ЕстьНДС			= не (ТЗ.Колонки.Найти("НДС") = Неопределено);
	ЕстьКодОперации = не (ТЗ.Колонки.Найти("КодОперацииПартииТоваров") = Неопределено);
	ЕстьКолонка_СчетУчетаНДС = не (ТЗ.Колонки.Найти("СчетУчетаНДС")=Неопределено);
	ЕстьВидТабличнойЧасти = не (ТЗ.Колонки.Найти("ВидТабличнойЧасти")=Неопределено);
	ЕстьНомерСтрокиТабличнойЧасти = не (ТЗ.Колонки.Найти("НомерСтрокиТабличнойЧасти")=Неопределено);
	ЕстьВидДвижения=не (ТЗ.Колонки.Найти("ВидДвижения")=Неопределено);
	
	//2016 19.07.2016
	//Очень сомнительно что надо сворачивать данную таблицу 
	ТЗ.Свернуть("СчетФактура, Партия,Склад, ВидЦенности,Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,НДСВключенВСтоимость,Услуга,СтавкаНДС"+
				?(ЕстьВидДвижения,", ВидДвижения", "")+
				?(ЕстьКодОперации,", КодОперацииПартииТоваров", "")+
				?(ЕстьКолонка_СчетУчетаНДС, ",СчетУчетаНДС", "")+
				?(ЕстьВидТабличнойЧасти, ",ВидТабличнойЧасти", "")+
				?(ЕстьНомерСтрокиТабличнойЧасти, ",НомерСтрокиТабличнойЧасти", ""),
				"Количество"+
				?(ЕстьСтоимость,", Стоимость", "")+
				?(ЕстьСуммаБезНДС,", СуммаБезНДС","") + 
				?(ЕстьНДС,", НДС",""));
		
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// Не отражаем в регистре партий.
	Если Не УчетнаяПолитика.СложныйУчетНДС Тогда Возврат; КонецЕсли; //123
	
	Для Каждого СтрокаДок Из ТЗ Цикл
		//Все партии приобретенных ТМЦ учитываются в регистре.
		СтрокаДвижения=ТаблицаДвиженийНДСПартии.Добавить();
		СтрокаДвижения.Активность	= Истина;
		СтрокаДвижения.Период		= СтруктураШД.Дата;
		СтрокаДвижения.Организация	= СтруктураШД.Организация;
		Если ЕстьВидДвижения Тогда
			СтрокаДвижения.ВидДвижения  = СтрокаДок.ВидДвижения; //2016 (19.07.2016)
		КонецЕсли;
		Если ТипЗнч(СтруктураШД.Ссылка)=Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли; //Людмила 27.09.2016

		Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
			СтрокаДвижения.СчетФактура	= Неопределено;
		Иначе	
			СтрокаДвижения.СчетФактура	= СтрокаДок.СчетФактура;
		КонецЕсли;
		СтрокаДвижения.НДСВключенВСтоимость = СтрокаДок.НДСВключенВСтоимость;
		
		Если НЕ УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов
		   ИЛИ (ЕстьКодОперации и СтрокаДок.КодОперацииПартииТоваров = КодыОпераций.ПередачаНаКомиссию) тогда
			СтрокаДвижения.Склад = Неопределено;
		Иначе
			СтрокаДвижения.Склад = СтрокаДок.Склад;
		КонецЕсли;
		СтрокаДвижения.ВидЦенности	= СтрокаДок.ВидЦенности;
		СтрокаДвижения.Номенклатура = СтрокаДок.Номенклатура;
		СтрокаДвижения.ХарактеристикаНоменклатуры = Неопределено;
		СтрокаДвижения.СерияНоменклатуры = Неопределено;
		
		Если УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			СтрокаДвижения.ХарактеристикаНоменклатуры = СтрокаДок.ХарактеристикаНоменклатуры;
			Если СтрокаДок.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
				СтрокаДвижения.СерияНоменклатуры = СтрокаДок.СерияНоменклатуры;
			КонецЕсли; 
		КонецЕсли;

		СтрокаДвижения.Партия=СтрокаДок.Партия;
		СтрокаДвижения.Количество=?(СтрокаДок.Услуга, 0, СтрокаДок.Количество);
		СтрокаДвижения.СтавкаНДС = СтрокаДок.СтавкаНДС;
		СтрокаДвижения.Стоимость = ?(ЕстьСтоимость,СтрокаДок.Стоимость,?(ЕстьСуммаБезНДС,СтрокаДок.СуммаБезНДС,0) + ?(ЕстьНДС,СтрокаДок.НДС,0));
		Если ЕстьСуммаБезНДС Тогда
			Стоимость = СтрокаДок.СуммаБезНДС + ?(ЕстьНДС,СтрокаДок.НДС,0);
		ИначеЕсли ЕстьСтоимость Тогда
			Стоимость = СтрокаДок.Стоимость;
		Иначе
			Стоимость = 0;
		КонецЕсли;			
		СтрокаДвижения.Стоимость=Стоимость;
		СтрокаДвижения.НДС=?(ЕстьНДС, СтрокаДок.НДС,0);

		Если ЕстьВидТабличнойЧасти Тогда
			СтрокаДвижения.ВидТабличнойЧасти = СтрокаДок.ВидТабличнойЧасти;
		КонецЕсли; 

		Если ЕстьНомерСтрокиТабличнойЧасти Тогда
			СтрокаДвижения.НомерСтрокиТабличнойЧасти = СтрокаДок.НомерСтрокиТабличнойЧасти;
		КонецЕсли;

		Если ЕстьКолонка_СчетУчетаНДС Тогда
			СтрокаДвижения.СчетУчетаНДС=СтрокаДок.СчетУчетаНДС;
			//Для каждого СтрокаПроводки Из СтрокаДок.ТОП.ПроводкиБУ Цикл
			//	Если СтрокаПроводки.СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
			//		СтрокаДвижения.СчетУчетаНДС=СтрокаПроводки.СчетДебет; Прервать;
			//	КонецЕсли; 
			//КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШД, ТаблицаВыручки,Отказ, Заголовок, ЭтоВозврат = Ложь, ЭтоВозвратОтПокупателя = Ложь, СтруктураПараметров) Экспорт
	
	ВидДокумента = "";
	СтруктураШД.Свойство("ВидДокумента",ВидДокумента);
	
	УчетнаяПолитика=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураШД, "УчетнаяПолитика");
	Если УчетнаяПолитика=Неопределено Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШД.Дата, Отказ, СтруктураШД.Организация); 
	КонецЕсли;
	
	ТаблицаСписанияНДСПоСтрокам=РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Кол Из ТаблицаВыручки.Колонки Цикл
		Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти(Кол.Имя) = Неопределено Тогда
			ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения); 
		КонецЕсли; 
	КонецЦикла;
		
	ТаблицаВыручки.Колонки.Добавить("НДСВСтоимостиТоваров", Новый описаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	
	ЕстьСтавкаНДС = не (ТаблицаВыручки.Колонки.Найти("СтавкаНДС") = неопределено) И Не СтруктураШД.Свойство("НДСВСтоимостиТоваров");
	Если СтруктураШД.Свойство("НДСВСтоимостиТоваров") Тогда
		ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШД.НДСВСтоимостиТоваров,"НДСВСтоимостиТоваров")	
	КонецЕсли; 
	
	//************************************************************************
	// Определяем партии к списанию по регистру по ключевым наборам реквизитов.
	ТаблицаВыручки.Колонки.Добавить("СписыватьПоПартиямНДС", новый описаниеТипов("Булево"));
	ЕстьСкладВТЧ = не (ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено);
	ВыданоСообщениеБезНДС = Ложь;
	ВыданоСообщение0 = Ложь;
	
	Для каждого СтрокаСписания Из ТаблицаВыручки Цикл
		Если СтрокаСписания.Комиссионный Тогда
			// Для комиссионных товаров учет НДС по партиям не ведется.
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;

		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСписания.Количество) Тогда
			// Строки с пустым количеством игнорируем
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;

		ИначеЕсли УчетнаяПолитика.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учтены в регистре, все надо списывать.
			СтрокаСписания.СписыватьПоПартиямНДС = Истина;
			Если СтруктураШД.ВидДокумента="РеализацияТоваровУслуг" тогда
				 Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					СтрокаСписания.СписыватьПоПартиямНДС=Ложь;
				КонецЕсли;
			КонецЕсли; // Переделать на СтрокаСписания.Комиссионный=Истина
		Иначе 
			 Если ЕстьСтавкаНДС Тогда
			     Если СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС и не ВыданоСообщениеБезНДС Тогда
					 ОбщегоНазначения.СообщитьОбОшибке("При реализации без НДС, НДС по приобретенным ценностям необходимо включать в стоимость реализуемой партии товаров (ст. 170 НК РФ).
					 |Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
				 ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 и не ВыданоСообщение0 Тогда
					 ОбщегоНазначения.СообщитьОбОшибке("При реализации с НДС 0%, вычет НДС по приобретенным ценностям возможен только после подтверждения ставки НДС 0% (п.3 ст. 172 НК РФ).
					 |До этого момента вычет должен быть заблокирован.
					 |Для автоматической блокировки вычета НДС в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
					 |и выполнить все связанные с этим действия!", ВыданоСообщение0,Заголовок,СтатусСообщения.Информация);
				 КонецЕсли;
			 ИначеЕсли СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
				 или СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости
				 тогда
				 Если не ВыданоСообщениеБезНДС Тогда
					 Если ВидДокумента = "СписаниеТоваров" тогда
						 ОбщегоНазначения.СообщитьОбОшибке("При списании ТМЦ в результате инвентаризации на счет 94 <Недостачи и потери от порчи ценностей>,
						 	 | НДС по приобретенным ценностям необходимо включать в стоимость списываемой партии товаров.
						 	 | Для автоматического контроля включения НДС в стоимость в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
							 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
					 Иначе
						 ОбщегоНазначения.СообщитьОбОшибке("Для автоматического контроля включения НДС в стоимость (исключения из стоимости) в учетной политике по налоговому учету необходимо установить флаг ""Наличие операций без НДС или с НДС 0%""
							 | и выполнить все связанные с этим действия!",ВыданоСообщениеБезНДС ,Заголовок,СтатусСообщения.Информация);
					 КонецЕсли; 
				 КонецЕсли; 
			 КонецЕсли;
			
			СтрокаСписания.СписыватьПоПартиямНДС = Ложь;
		КонецЕсли;
		
		Если ЕстьСтавкаНДС Тогда
			Если ЭтоВозврат тогда 
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;	 
			ИначеЕсли СтрокаСписания.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
			ИначеЕсли ЗначениеЗаполнено(СтрокаСписания.СтавкаНДС) Тогда
   				СтрокаСписания.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
			КонецЕсли; 
		 КонецЕсли;
		 Если ЕстьСкладВТЧ тогда
			 Если НЕ ЗначениеЗаполнено(СтрокаСписания.Склад)  Тогда
				 СтрокаСписания.Склад = справочники.Склады.ПустаяСсылка();
			 КонецЕсли; 
		 КонецЕсли;
	КонецЦикла; 
	
	КолвоЭлементовКоллекции = ТаблицаВыручки.Количество(); 
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		ЭлементКоллекции = ТаблицаВыручки[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
		Если НЕ ЭлементКоллекции.СписыватьПоПартиямНДС Тогда 
			ТаблицаВыручки.Удалить(ЭлементКоллекции); 
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено Тогда
	    ТаблицаВыручки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;

	Если ТаблицаВыручки.Количество() = 0 Тогда
		//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
		Возврат ТаблицаСписанияНДСПоСтрокам;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Если не ЭтоВозвратОтПокупателя Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Склад КАК Склад,
		|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
		|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	НДСПартииТоваровОстатки.Партия.Дата КАК ДатаПартии,
		|	НДСПартииТоваровОстатки.Партия КАК Партия,
		|	НДСПартииТоваровОстатки.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.КоличествоОстаток,
		|	НДСПартииТоваровОстатки.СтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваровОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СтавкаНДС,
		|	НДСПартииТоваровОстатки.НДСОстаток,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(
		|		&МоментСписания,
		|		Организация = &Организация
		|		    И Номенклатура В (&СписокНоменклатуры)
		|" +	    ?(УчетнаяПолитика.ПартионныйУчетНДСВРазрезеСкладов, "И Склад В (&СписокСкладов)", ?(ЭтоВозврат, "И Партия.Контрагент = &Поставщик", "")) + ") КАК НДСПартииТоваровОстатки
		|ГДЕ
		|	(НЕ НДСПартииТоваровОстатки.СтоимостьОстаток < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии,
		|	ДатаСФ
		|";
		Если ЭтоВозврат Тогда
			// Дополняет фильтр конкретным поставщиком
			Запрос.УстановитьПараметр("Поставщик",СтруктураШД.Контрагент);
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Номенклатура В (&СписокНоменклатуры)","Номенклатура В (&СписокНоменклатуры) " +символы.ПС+
													"И Партия.Контрагент = &Поставщик");
			// Дополняет фильтр конкретным документом партии
			ПартионныйУчетБУ = ложь;
		КонецЕсли; 
	Иначе
		
		СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("ДокументПартии"),Истина);
		СписокДокументовПартий  = Новый массив;
		
		//Разделим документы на поступление и реализацию
		Для ИндексДокумента = 0 По СписокДокументовРеализации.Количество()-1 Цикл
			
			Если НЕ ЗначениеЗаполнено(СписокДокументовРеализации[ИндексДокумента]) Тогда
				СписокДокументовРеализации[ИндексДокумента] = Неопределено;
			Иначе
				ТипДокументаПартии = ТипЗнч(СписокДокументовРеализации[ИндексДокумента]);
				Если ТипДокументаПартии =  Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					или ТипДокументаПартии =  Тип("ДокументСсылка.ОтражениеРеализацииТоваровУслугНДС")
					или ТипДокументаПартии =  Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера")
					или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
					тогда
					
				Иначе
					СписокДокументовПартий.Добавить(СписокДокументовРеализации[ИндексДокумента]);
					СписокДокументовРеализации[ИндексДокумента] = Неопределено;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
		
		СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовРеализации,Истина);
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("СписокДокументовРеализации", СписокДокументовРеализации);
		Запрос.УстановитьПараметр("СписокДокументовПартий", СписокДокументовПартий);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОбороты.Склад,
		|	НДСПартииТоваровОбороты.Номенклатура,
		|	НДСПартииТоваровОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОбороты.СерияНоменклатуры КАК СерияНоменклатуры,
		|	НДСПартииТоваровОбороты.Партия.Дата КАК ДатаПартии,
		|	НДСПартииТоваровОбороты.Партия,
		|	НДСПартииТоваровОбороты.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПартииТоваровОбороты.СчетФактура,
		|	НДСПартииТоваровОбороты.НДСВключенВСтоимость,
		|	НДСПартииТоваровОбороты.КоличествоРасход КАК КоличествоОстаток,
		|	НДСПартииТоваровОбороты.СтоимостьРасход КАК СтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваровОбороты.КоличествоРасход > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПартииТоваровОбороты.ВидЦенности,
		|	НДСПартииТоваровОбороты.СтавкаНДС,
		|	НДСПартииТоваровОбороты.НДСРасход КАК НДСОстаток,
		|	НДСПартииТоваровОбороты.Партия КАК ДокументРеализации,
		|	НДСПартииТоваровОбороты.СчетУчетаНДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Обороты(
		|				,
		|				&МоментСписания,
		|				Период,
		|				Организация = &Организация
		|					И Номенклатура В (&СписокНоменклатуры)
		|					И Партия В (&СписокДокументовПартий)) КАК НДСПартииТоваровОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НДСПартииТоваровОбороты.Партия КАК Партия
		|		ИЗ
		|			РегистрНакопления.НДСПартииТоваров.Обороты(
		|				,
		|				&МоментСписания,
		|				Период,
		|				Организация = &Организация
		|					И Номенклатура В (&СписокНоменклатуры)
		|					И Партия В (&СписокДокументовПартий)) КАК НДСПартииТоваровОбороты
		|		ГДЕ
		|			НДСПартииТоваровОбороты.КоличествоРасход > 0) КАК СписанныеПартии
		|		ПО НДСПартииТоваровОбороты.Партия = СписанныеПартии.Партия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии УБЫВ,
		|	ДатаСФ УБЫВ
		|";
	КонецЕсли; 
	
	Если Константы.РассчитыватьОстаткиПриСписанииНаКонецДня.Получить() Тогда
		ДатаОстатков=Новый Граница(КонецДня(СтруктураШД.Регистратор.Дата), ВидГраницы.Включая);
	Иначе
		ДатаОстатков=Новый Граница(СтруктураШД.Регистратор.МоментВремени(), ВидГраницы.Включая);
	КонецЕсли;
	Запрос.УстановитьПараметр("МоментСписания", 	ДатаОстатков);
	Запрос.УстановитьПараметр("Организация", 		СтруктураШД.Организация);
	Запрос.УстановитьПараметр("СписокСкладов", 		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Склад")));
	Запрос.УстановитьПараметр("СписокНоменклатуры", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Номенклатура")));
	
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	//*** ЕстьКолонка_ТОП=(не ТаблицаВыручки.Колонки.Найти("ТОП")=Неопределено);
	ЕстьКолонка_СчетУчетаНДС=(не ТаблицаВыручки.Колонки.Найти("СчетУчетаНДС")=Неопределено);

	Для каждого СтрокаКСписанию Из ТаблицаВыручки Цикл
		//Установим отбор таблицы запроса
		Отбор = Новый Структура("Номенклатура, ЕстьКоличество", СтрокаКСписанию.Номенклатура, Истина);
		Если УчетнаяПолитика.ПартионныйУчетНДСВРазрезеСкладов и Не ЭтоВозвратОтПокупателя Тогда
			Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
		КонецЕсли;
		Если УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", СтрокаКСписанию.ХарактеристикаНоменклатуры);
			Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
				Отбор.Вставить("СерияНоменклатуры", СтрокаКСписанию.СерияНоменклатуры);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоВозвратОтПокупателя Тогда
			Отбор.Вставить("ДокументРеализации", СтрокаКСписанию.ДокументПартии);
		ИначеЕсли ЭтоВозврат и ЗначениеЗаполнено(СтрокаКСписанию.ДокументПартии) тогда
			Отбор.Вставить("Партия", СтрокаКСписанию.ДокументПартии);
		КонецЕсли;
		
		Если ЕстьКолонка_СчетУчетаНДС Тогда
			Если не СтрокаКСписанию.СчетУчетаНДС.Пустая() Тогда
				Отбор.Вставить("СчетУчетаНДС", СтрокаКСписанию.СчетУчетаНДС);
			КонецЕсли; 
		КонецЕсли;
		
		ОтборТаблицыПартийПоКлючу = ТаблицаПартий.НайтиСтроки(Отбор);
		СписатьПоКлючу = СтрокаКСписанию.Количество;
		
		// Найденные строки перенесем в таблицу значений, которую нужно отсортировать в соответствии со стратегией списания
		ТаблицаОстатки  = Новый ТаблицаЗначений;
		// Добавим колонку с индексом
		ТаблицаОстатки.Колонки.Добавить("ИндексНайденнойСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для Каждого Кол Из ТаблицаПартий.Колонки Цикл
			ТаблицаОстатки.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
		КонецЦикла;
		Индекс = 0;
		Для Каждого СтрокаТЧ Из ОтборТаблицыПартийПоКлючу Цикл
			НоваяСтрока = ТаблицаОстатки.Добавить();
			НоваяСтрока.ИндексНайденнойСтроки = Индекс;
			Для Каждого Колонка Из ТаблицаПартий.Колонки Цикл
				Если ПустаяСтрока(Колонка.Имя) ИЛИ Колонка.Имя = "QuieryId" Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		НаправлениеСортировкиДляНДС = ?(СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость, "Убыв", "Возр");
		НаправлениеСортировкиПартий = ?(ЭтоВозврат,"убыв","Возр");
		ТаблицаОстатки.Сортировать("ДатаПартии "+НаправлениеСортировкиПартий+", Партия "+НаправлениеСортировкиПартий+", ДатаСФ "+НаправлениеСортировкиПартий+", СчетФактура "+НаправлениеСортировкиПартий+", НДСВключенВСтоимость "+НаправлениеСортировкиДляНДС);
		
		ТаблицаСписанияПоСтроке = Новый ТаблицаЗначений;
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Партия");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДСВключенВСтоимость");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ВидЦенности");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СтавкаНДС");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетФактура");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСписанияПоСтроке.Колонки.Добавить("Склад");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаСписанияПоСтроке.Колонки.Добавить("СчетУчетаНДС"); //***
		
		Для каждого СтрокаТаблицыПартийНДС Из ТаблицаОстатки Цикл
			Если НЕ СтрокаТаблицыПартийНДС.ЕстьКоличество Тогда Продолжить;	КонецЕсли;
			Если СтрокаТаблицыПартийНДС.КоличествоОстаток=0 Тогда Продолжить; КонецЕсли; 

			СтрокаТаблицыСписания 						= ТаблицаСписанияПоСтроке.Добавить();
			СтрокаТаблицыСписания.Партия 				= СтрокаТаблицыПартийНДС.Партия;
			СтрокаТаблицыСписания.СчетФактура 			= СтрокаТаблицыПартийНДС.СчетФактура;
			СтрокаТаблицыСписания.Количество 			= Мин(СписатьПоКлючу, СтрокаТаблицыПартийНДС.КоличествоОстаток);
			СтрокаТаблицыСписания.Стоимость 			= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.СтоимостьОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.НДС 					= ?(СтрокаТаблицыПартийНДС.КоличествоОстаток = 0, 0, СтрокаТаблицыПартийНДС.НДСОстаток * СтрокаТаблицыСписания.Количество / СтрокаТаблицыПартийНДС.КоличествоОстаток) ;
			СтрокаТаблицыСписания.ВидЦенности 			= СтрокаТаблицыПартийНДС.ВидЦенности;
			СтрокаТаблицыСписания.НДСВключенВСтоимость 	= СтрокаТаблицыПартийНДС.НДСВключенВСтоимость;
			СтрокаТаблицыСписания.СтавкаНДС				= СтрокаТаблицыПартийНДС.СтавкаНДС;
			Если ЭтоВозвратОтПокупателя и не УчетнаяПолитика.ПартионныйУчетНДСВРазрезеСкладов Тогда
			    СтрокаТаблицыСписания.Склад 			= Справочники.Склады.ПустаяСсылка();
			Иначе
				СтрокаТаблицыСписания.Склад				= СтрокаТаблицыПартийНДС.Склад;	
			КонецЕсли; 
				Если УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
					СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = СтрокаТаблицыПартийНДС.ХарактеристикаНоменклатуры;
					Если СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
						СтрокаТаблицыСписания.СерияНоменклатуры = СтрокаТаблицыПартийНДС.СерияНоменклатуры;
					КонецЕсли;
				КонецЕсли;
			
			Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаТаблицыПартийНДС.НДСВключенВСтоимость) Тогда
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
			Иначе
				СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
				СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
			КонецЕсли;
			
			СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
			
			Если ЕстьСтавкаНДС  и не ЭтоВозврат Тогда
				Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
				КонецЕсли;
			КонецЕсли;
						
			СписатьПоКлючу = СписатьПоКлючу - СтрокаТаблицыСписания.Количество;
			
			СтрокаТаблицыПартийНДС.КоличествоОстаток = СтрокаТаблицыПартийНДС.КоличествоОстаток - СтрокаТаблицыСписания.Количество;
			СтрокаТаблицыПартийНДС.СтоимостьОстаток = СтрокаТаблицыПартийНДС.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
			СтрокаТаблицыПартийНДС.НДСОстаток = СтрокаТаблицыПартийНДС.НДСОстаток - СтрокаТаблицыСписания.НДС;
			СтрокаТаблицыСписания.СчетУчетаНДС= СтрокаТаблицыПартийНДС.СчетУчетаНДС; //***
			
			Если СписатьПоКлючу<=0 Тогда прервать; КонецЕсли; 
		КонецЦикла;
		
		//Распределение доп. расходов
		ПартииКСписнию = ТаблицаСписанияПоСтроке.Скопировать();
		ПартииКСписнию.Свернуть("Партия", "Количество, Стоимость");
		
		Для Каждого Партия Из ПартииКСписнию Цикл
			//Установим отбор таблицы запроса
			Отбор = Новый Структура("Номенклатура, Партия", СтрокаКСписанию.Номенклатура, Партия.Партия);
			Если УчетнаяПолитика.ПартионныйУчетНДСВРазрезеСкладов Тогда
				Отбор.Вставить("Склад", СтрокаКСписанию.Склад);
			КонецЕсли;
			Если УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
				Отбор.Вставить("ХарактеристикаНоменклатуры", СтрокаКСписанию.ХарактеристикаНоменклатуры);
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
					Отбор.Вставить("СерияНоменклатуры", СтрокаКСписанию.СерияНоменклатуры);
				КонецЕсли;
			КонецЕсли;

			ОтборДляДопРасходов = ТаблицаПартий.НайтиСтроки(Отбор);
			
			//Определим коэффициент доп. расходов
			СуммаПоПартии = 0;
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				Если СтрокаПартии.ЕстьКоличество Тогда
					СуммаПоПартии = СуммаПоПартии + СтрокаПартии.СтоимостьОстаток;
				КонецЕсли;
			КонецЦикла;
			
			// Если в партии нулевая сумма, то списание доп. расходов производим пропорционально количеству.
			Если СуммаПоПартии = 0 Тогда
				КоличествоПоПартии = 0;
				Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
					Если СтрокаПартии.ЕстьКоличество Тогда
						КоличествоПоПартии = КоличествоПоПартии + СтрокаПартии.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//Проверим наличие доп расходов
			Если СуммаПоПартии = 0 И КоличествоПоПартии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаПоПартии <> 0 Тогда
				К = Партия.Стоимость / СуммаПоПартии;
			Иначе
				К = Партия.Количество / КоличествоПоПартии;
			КонецЕсли;
			
			//Спишем доп. расходы
			Для Каждого СтрокаПартии Из ОтборДляДопРасходов Цикл
				
				Если СтрокаПартии.ЕстьКоличество ИЛИ Окр(СтрокаПартии.СтоимостьОстаток*К,2,1) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыСписания = ТаблицаСписанияПоСтроке.Добавить();
				СтрокаТаблицыСписания.Партия = СтрокаПартии.Партия;
				СтрокаТаблицыСписания.СчетФактура = СтрокаПартии.СчетФактура;
				СтрокаТаблицыСписания.Стоимость = СтрокаПартии.СтоимостьОстаток * К;
				СтрокаТаблицыСписания.НДС = СтрокаПартии.НДСОстаток * К;
					
				Если ЭтоВозвратОтПокупателя и не УчетнаяПолитика.ПартионныйУчетНДСВРазрезеСкладов 
					Тогда
				    СтрокаТаблицыСписания.Склад = Справочники.Склады.ПустаяСсылка();
				Иначе
					СтрокаТаблицыСписания.Склад = СтрокаПартии.Склад;	
				КонецЕсли; 
				Если УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
					СтрокаТаблицыСписания.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
					Если СтрокаТаблицыПартийНДС.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
						СтрокаТаблицыСписания.СерияНоменклатуры = СтрокаПартии.СерияНоменклатуры;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаТаблицыСписания.ВидЦенности = СтрокаПартии.ВидЦенности;
				СтрокаТаблицыСписания.НДСВключенВСтоимость = СтрокаПартии.НДСВключенВСтоимость;
				СтрокаТаблицыСписания.СтавкаНДС				= СтрокаПартии.СтавкаНДС;
			
				Если (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость) И (НЕ СтрокаПартии.НДСВключенВСтоимость) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Истина;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				ИначеЕсли (СтрокаКСписанию.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости) И (СтрокаПартии.НДСВключенВСтоимость) Тогда
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Истина;
				Иначе
					СтрокаТаблицыСписания.ДействияНДСПокупки_ВключитьВСтоимость = Ложь;
					СтрокаТаблицыСписания.ДействияНДСПокупки_ИсключитьИзСтоимости = Ложь;
				КонецЕсли;
				
				СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Ложь;
				
				Если ЕстьСтавкаНДС и не ЭтоВозврат Тогда
					Если СтрокаКСписанию.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						СтрокаТаблицыСписания.ДействияНДСПокупки_ПредположениеСтавки0 = Истина;
					КонецЕсли;
				КонецЕсли;
			    				
				СтрокаПартии.СтоимостьОстаток = СтрокаПартии.СтоимостьОстаток - СтрокаТаблицыСписания.Стоимость;
				СтрокаПартии.НДСОстаток = СтрокаПартии.НДСОстаток - СтрокаТаблицыСписания.НДС;
				СтрокаТаблицыСписания.СчетУчетаНДС=СтрокаПартии.СчетУчетаНДС; //*** 2016
			КонецЦикла;
		КонецЦикла;
		
		//Перенесем данные в итоговую таблицу движений
		Для Каждого СтрокаСписания ИЗ ТаблицаСписанияПоСтроке Цикл
			
			СтрокаТаблицыСписанияНДС = ТаблицаСписанияНДСПоСтрокам.Добавить();
			
			Для Каждого Кол Из ТаблицаСписанияНДСПоСтрокам.Колонки Цикл
				Если НЕ ТаблицаСписанияПоСтроке.Колонки.Найти(Кол.Имя) = Неопределено Тогда
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаСписания[Кол.Имя];
				ИначеЕсли НЕ ТаблицаВыручки.Колонки.Найти(Кол.Имя) = Неопределено Тогда 
					СтрокаТаблицыСписанияНДС[Кол.Имя] = СтрокаКСписанию[Кол.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Таблицу значений перенесем в найденные строки
		Для Каждого СтрокаТЧ Из ТаблицаОстатки Цикл
			Для Каждого Колонка Из ТаблицаПартий.Колонки Цикл
				Если ПустаяСтрока(Колонка.Имя) ИЛИ Колонка.Имя = "QuieryId" Тогда
					Продолжить;
				КонецЕсли; 
				ОтборТаблицыПартийПоКлючу[СтрокаТЧ.ИндексНайденнойСтроки][Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
		КонецЦикла;
		
		Если СписатьПоКлючу>0 тогда
			ТекстСообщения = "Для целей учета НДС не списано " + Формат(СписатьПоКлючу, "ЧЦ=15; ЧДЦ=3") + " товара " + СтрокаКСписанию.Номенклатура + ?(НЕ ЗначениеЗаполнено(СтрокаКСписанию.Склад),"",", склад "+строка(СтрокаКСписанию.Склад));
			Если УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда 
				Если ЗначениеЗаполнено(СтрокаКСписанию.ХарактеристикаНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", х-ка: " + СтрокаКСписанию.ХарактеристикаНоменклатуры;
				КонецЕсли;
				Если СтрокаКСписанию.Номенклатура.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаКСписанию.СерияНоменклатуры) Тогда
					ТекстСообщения = ТекстСообщения + ", серия: " + СтрокаКСписанию.СерияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(СтруктураШД.Организация,"Организация"); 
	Если ТаблицаСписанияНДСПоСтрокам.Колонки.Найти("QuieryId") = Неопределено Тогда
		ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("QuieryId");
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);

	QuieryId = 0;
	
	Для каждого СтрокаСписания Из ТаблицаСписанияНДСПоСтрокам Цикл
		QuieryId = QuieryId + 1;
		СтрокаСписания.QuieryId = QuieryId;
		
		// Для ускорения поиска добавим строку в соответствие
		МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		Если МассивСтрокПоКоду = Неопределено Тогда
			СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий.Вставить(СтрокаСписания.КодОперацииПартииТоваров, Новый Массив);
			МассивСтрокПоКоду = СтруктураПараметров.СоответствиеКодовОперацийСтрокамНДСПартий[СтрокаСписания.КодОперацииПартииТоваров];
		КонецЕсли;
		МассивСтрокПоКоду.Добавить(СтрокаСписания);
		
	КонецЦикла;
	
	Возврат ТаблицаСписанияНДСПоСтрокам;	
КонецФункции

// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС
//***********************************************************************************************

//***********************************************************************************************
//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ

// Процедура вызывается из процедур.
// В тех случаях, когда розничная реализация в организации переведена на ЕНВД,
// при передаче товаров в розницу, происходит автоматическое включение НДС в себестоимость
// этих товаров
Процедура ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШД, ТаблицаСписания, ТаблицаДвиженийПартии, ВключитьВСтоимость, СтруктураПараметров, Заголовок, ОтражатьПоПартиям = Истина) Экспорт

	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	Построитель_ТаблицаСписания.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Если ВключитьВСтоимость Тогда
		Отбор.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Использование = Истина;
	Иначе
		Отбор.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Использование = Истина;
	КонецЕсли; 
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	//Включение НДС в стоимость по данному набору не требуется
	Если ДанныеДляОбработки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
			Если не ВключитьВСтоимость Тогда
				СтрокаОбрабатываемая.Количество = СтрокаОбрабатываемая.Количество*(-1);
				СтрокаОбрабатываемая.Стоимость = СтрокаОбрабатываемая.Стоимость*(-1);
				СтрокаОбрабатываемая.НДС = СтрокаОбрабатываемая.НДС*(-1);
			КонецЕсли; 
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
		КонецЦикла; 
	КонецЕсли;
	
	ПартионныйУчетБУ = Ложь;
	
	Если не СтруктураШД.Свойство("ПартионныйУчетБУ") Тогда
		СтруктураШД.Вставить("ПартионныйУчетБУ",ПартионныйУчетБУ);
	КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШД.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Новый МоментВремени(СтруктураШД.Дата, СтруктураШД.Ссылка), ВидГраницы.Исключая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО) КАК СчетФактураДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, &КонецПериода,	Период,
	|			Организация = &Организация И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	не НДСПредъявленныйОбороты.Поставщик = Значение(Справочник.Контрагенты.ПустаяСсылка)
	|";
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	КонтрагентПоСчетуФактуре.Индексы.Добавить("СчетФактура");
	
	Если ДанныеДляОбработки.Колонки.Найти("Поставщик") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	ДанныеДляОбработки.Колонки.Добавить("СчетФактураДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаКонтрагента.СчетФактураДоговорКонтрагента;
		КонецЕсли; 
	КонецЦикла;
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ОсобыйПорядокОтражения_ст170НКРФ = (ВключитьВСтоимость и СтруктураШД.Дата >='20060101');	
	Если ОсобыйПорядокОтражения_ст170НКРФ Тогда		
		ДанныеДляОбработки.Колонки.Добавить("НДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		// Особый порядок отражения в соответствии со п.3 статьи 170 НК РФ
		// по НДС, принятому к вычету на момент "включения в стоимость" 
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	СтруктураШД.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
		Запрос.УстановитьПараметр("ВидыЦенностей",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("ВидЦенности"), Истина));
		Запрос.УстановитьПараметр("СтавкиНДС",		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СтавкаНДС"), Истина));
		Запрос.УстановитьПараметр("Период",			Новый Граница(новый моментВремени(СтруктураШД.Дата, СтруктураШД.Ссылка),ВидГраницы.Исключая));
		Запрос.Текст="
		|ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(&Период,
		|			Организация = &Организация
		|		    И СчетФактура В (&СчетаФактуры)
		|		    И ВидЦенности В (&ВидыЦенностей)
		|		    И СтавкаНДС В (&СтавкиНДС)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	(НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток) > 0
		|ИТОГИ ПО
		|	СчетФактура
		|";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СуммаБезНДС"),"СуммаБезНДСкСписанию");
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("НДС"),"НДСкСписанию");
			ДанныеДляОбработки.ЗаполнитьЗначения(0, "СуммаБезНДС,НДС");
		Иначе
			НДСнеПринятыйКВычету = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураОтбора = Новый Структура("ВидЦенности, СтавкаНДС");

			Для каждого ОбрабатываемаяСтрока Из ДанныеДляОбработки Цикл
				СтрокаОстаткаПоСФ = НДСнеПринятыйКВычету.Строки.Найти(ОбрабатываемаяСтрока.СчетФактура, "СчетФактура");
				Если СтрокаОстаткаПоСФ = Неопределено Тогда
				     ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					 ОбрабатываемаяСтрока.НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					 ОбрабатываемаяСтрока.СуммаБезНДС			= 0;
					 ОбрабатываемаяСтрока.НДС					= 0;
				Иначе
					СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					
					// Отбираем строки с фильтром по виду ценности, ставке НДС, счету учета НДС
					ЗаполнитьЗначенияСвойств(СтруктураОтбора,ОбрабатываемаяСтрока); 
					СтрокиПоОтбору			= СтрокаОстаткаПоСФ.Строки.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаОстатка Из СтрокиПоОтбору Цикл
						СуммаБезНДС_ВСтоимость	= Мин(СтрокаОстатка.СуммаБезНДС,СуммаБезНДСКСписанию);
						НДС_ВСтоимость			= Мин(СтрокаОстатка.НДС,НДСКСписанию);
						
						СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию - СуммаБезНДС_ВСтоимость;
						НДСКСписанию			= НДСКСписанию - НДС_ВСтоимость;
						
						СтрокаОстатка.СуммаБезНДС = СтрокаОстатка.СуммаБезНДС - СуммаБезНДС_ВСтоимость;
						СтрокаОстатка.НДС = СтрокаОстатка.НДС - НДС_ВСтоимость;
						
						Если СтрокаОстатка.СуммаБезНДС = 0 и СтрокаОстатка.НДС = 0 Тогда
							СтрокаОстаткаПоСФ.Строки.Удалить(СтрокаОстатка);
						КонецЕсли; 
						
						Если СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0 Тогда
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					Если не (СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0) Тогда
						ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДСКСписанию			= НДСКСписанию;
						
						ОбрабатываемаяСтрока.СуммаБезНДС			= ОбрабатываемаяСтрока.СуммаБезНДС - СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДС					= ОбрабатываемаяСтрока.НДС - НДСКСписанию;
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	ДанныеДляОтраженияВДополнительныхРегистрах = ДанныеДляОбработки.Скопировать();
	КолвоЭлементовКоллекции = ДанныеДляОтраженияВДополнительныхРегистрах.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
	     ЭлементКоллекции = ДанныеДляОтраженияВДополнительныхРегистрах[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
	     Если НЕ ЗначениеЗаполнено(ЭлементКоллекции.СчетФактура) Тогда 
	          ДанныеДляОтраженияВДополнительныхРегистрах.Удалить(ЭлементКоллекции); 
	     КонецЕсли; 
	КонецЦикла;
	
	// Отразить в регистре НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный	= СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный;
	ДанныеДляОтраженияВДополнительныхРегистрах.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОтраженияВДополнительныхРегистрах, ТаблицаДвижений_НДСПредъявленный);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСПредъявленный.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСПредъявленный.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	// Отразить в регистре НДСВключенныйВСтоимость
	ТаблицаДвижений_НДСВключенныйВСтоимость	= СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость;
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОтраженияВДополнительныхРегистрах, ТаблицаДвижений_НДСВключенныйВСтоимость);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСВключенныйВСтоимость.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСВключенныйВСтоимость.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	Если ОсобыйПорядокОтражения_ст170НКРФ И (не ДанныеДляОбработки.Итог("НДСКСписанию") = 0 или не ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0) Тогда
		//Отражение списания (восстановления) НДС в регистре "НДС начисленный"
		СтруктураПереименования = Новый Структура("СуммаБезНДС, НДС, Покупатель","СуммаБезНДСКСписанию", "НДСКСписанию", "Поставщик");
			
		ТаблицаДвижений_НДСНачисленный	= СтруктураПараметров.ТаблицаДвиженийНДСначисленный.СкопироватьКолонки();
		ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСНачисленный);
		ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования, Истина);
			
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
			
		//Зачистить таблицу от записей с пустыми суммами
		СтрокиКУдалению = ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("НДС", 0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
		КонецЦикла; 
			
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСНачисленный, СтруктураПараметров.ТаблицаДвиженийНДСначисленный);
	КонецЕсли;
	
	КолонкиТаблицыДанныхДляОбработки = ДанныеДляОбработки.Колонки;
	//************************************************************************
	// Движения по НДС партии,по регистру бухгалтерии и по партиям товаров на складах
	
	Если ВключитьВСтоимость Тогда
		МассивСтоимость = ДанныеДляОбработки.ВыгрузитьКолонку("Стоимость");
		МассивКоличество = ДанныеДляОбработки.ВыгрузитьКолонку("Количество");
		МассивНДС = ДанныеДляОбработки.ВыгрузитьКолонку("НДС");
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			
			Если ОтражатьПоПартиям Тогда
				СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
				СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
				СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
				Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
					СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС - СтрокаТаблицыВключения.НДСКСписанию;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
			
			ДанныеДляОбработки.ЗаполнитьЗначения(Истина, "НДСВключенВСтоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивСтоимость,"Стоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивКоличество,"Количество");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивНДС,"НДС");
		КонецЕсли;
		
		Если ОсобыйПорядокОтражения_ст170НКРФ и не (ДанныеДляОбработки.Итог("НДСКСписанию") = 0 и ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0) Тогда
			// Корректировка таблицы данных для обработки для последующего отражения в регистре партионного учета
			ДанныеДляОбработки_КоличествоЗаписей = ДанныеДляОбработки.Количество();
			Для Счетчик = 1 По ДанныеДляОбработки_КоличествоЗаписей Цикл
				ИндексСтроки = ДанныеДляОбработки_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ДанныеДляОбработки[ИндексСтроки];
				Если не СтрокаДанных.НДСКСписанию = 0 или не СтрокаДанных.СуммаБезНДСКСписанию = 0 Тогда
					//Требуется корректировка. Списанная сумма отражается как доп. расходы, но без указанаия счета-фактуры.
					ДополнительнаяСтрока = ДанныеДляОбработки.Вставить(ИндексСтроки+1);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаДанных);
					ДополнительнаяСтрока.Стоимость = ДополнительнаяСтрока.СуммаБезНДСКСписанию + ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СуммаБезНДС = ДополнительнаяСтрока.СуммаБезНДСКСписанию;
					ДополнительнаяСтрока.НДС = ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СчетФактура = Неопределено;
					ДополнительнаяСтрока.Количество = 0;
					
					СтрокаДанных.Стоимость = СтрокаДанных.СуммаБезНДС + СтрокаДанных.НДС; 					
				КонецЕсли; 
			КонецЦикла; 
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.СуммаБезНДСКСписанию);
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.НДСКСписанию);
			
			
			// Корректировка таблицы списания для последующего использования.
			СтрокиКУдалению = Новый Массив;
			
			ТаблицаСписания_КоличествоЗаписей = ТаблицаСписания.Количество();
			Для Счетчик = 1 По ТаблицаСписания_КоличествоЗаписей Цикл
				ИндексСтроки = ТаблицаСписания_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ТаблицаСписания[ИндексСтроки];
				Если СтрокаДанных.ДействияНДСПокупки_ВключитьВСтоимость тогда
					СтрокиТаблицы_ДанныеДляОбработки = ДанныеДляОбработки.НайтиСтроки(Новый Структура("QuieryId", СтрокаДанных.QuieryId));
					Если не СтрокиТаблицы_ДанныеДляОбработки.Количество() = 0  Тогда
						СтрокиКУдалению.Добавить(СтрокаДанных);
						Для каждого СтрокаТаблицы_ДанныеДляОбработки Из СтрокиТаблицы_ДанныеДляОбработки Цикл
							НоваяСтрока = ТаблицаСписания.Вставить(ИндексСтроки+1);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы_ДанныеДляОбработки); 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаСписания.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		КонецЕсли; 
		
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;

	Иначе
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;

		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
			СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
			СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
		КонецЦикла;

		Если ОтражатьПоПартиям Тогда
			ДанныеДляОбработки.ЗаполнитьЗначения(Ложь, "НДСВключенВСтоимость");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
	КонецЕсли; 
	
	СтрокиКУдалению = ТаблицаДвиженийПартии.НайтиСтроки(Новый Структура("Стоимость, НДС, Количество",0,0,0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийПартии.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для каждого СтрокаСписания из ТаблицаСписания Цикл
		Если ?(ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости) Тогда
			СтрокаСписания.НДСВключенВСтоимость = ВключитьВСтоимость;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ
//***********************************************************************************************

//***********************************************************************************************
// НДС РЕАЛИЗАЦИИ

//***********************************************************************************************
//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации

Процедура ОтразитьПредположениеСтавки0(СтруктураШД, ТаблицаСписания, СтруктураПараметров, Заголовок) Экспорт

	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	ОписаниеИсточника_ТаблицаСписания = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Отбор.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Значение = Истина;
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Использование = Истина;
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;

	//Отражение предположения 0% по данному набору не требуется
	Если ДанныеДляОбработки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
	КонецЦикла; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШД.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));		
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(,,,
	|		Организация = &Организация И СчетФактура В (&СчетаФактуры)) КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Поставщик <> Значение(Справочник.Контрагенты.ПустаяСсылка)
	|";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	КонтрагентПоСчетуФактуре.Индексы.Добавить("СчетФактура");
	ДанныеДляОбработки.Колонки.Добавить("Поставщик");
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
		КонецЕсли; 
	КонецЦикла;
	
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ДокументОтгрузки") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДокументОтгрузки");
	КонецЕсли; 
	
	Если СтруктураШД.ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШД.Сделка,"ДокументОтгрузки");
	Иначе
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШД.Ссылка,"ДокументОтгрузки");
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	// Отразить в регистре НДСПредъявленныйРеализация0
	ТаблицаДвижений_НДСПредъявленныйРеализация0 = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0;
	
	Если ДанныеДляОбработки.Колонки.Найти("Состояние") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("Состояние");
	КонецЕсли; 
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленныйРеализация0);
	
	Если не ТаблицаДвижений_НДСПредъявленныйРеализация0 = Неопределено Тогда
		Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
			СтруктураПараметров.НДСПредъявленныйРеализация0.мПериод          = СтруктураШД.Дата;
			СтруктураПараметров.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
			СтруктураПараметров.НДСПредъявленныйРеализация0.ДобавитьДвижение();
			СтруктураПараметров.НДСПредъявленныйРеализация0.Записать(Ложь);
		Иначе
			ТаблицаДвижений_НДСПредъявленныйРеализация0.ЗаполнитьЗначения(СтруктураПараметров.Период,"Период");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации
//***********************************************************************************************

// НДС РЕАЛИЗАЦИИ
//***********************************************************************************************

//***********************************************************************************************
//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС

//Преименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблицы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры

// Выполняет приход/расход (возврат) денег по платежному документу
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Функция ДвижениеДенег(СтруктураПараметров, Объект) Экспорт

	//Получение основных данных документа
	РеестрПлатежей=СтруктураПараметров.Таблица;
	РеестрПлатежей.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов("Булево"));
	
	НаправлениеДвижения=СтруктураПараметров.НаправлениеДвижения;
	ЭтоВозврат=(СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

	Движения = Объект.Движения;
	
	// Регистрируем оплату в регистре расчетов для НДС 
	Если не (НаправлениеДвижения = "Поступление") = ЭтоВозврат тогда 
		РегистрацияОплаты_НДСРасчетыСПокупателями(СтруктураПараметров, РеестрПлатежей, Движения, ЭтоВозврат);
	Иначе
		РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураПараметров, РеестрПлатежей, Движения, ЭтоВозврат);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//15.06.2011
Процедура ДвижениеДенежныхСредств(ДокументОбъект) Экспорт
	СтруктураШД=ДокументОбъект.ДополнительныеСвойства.СтруктураШД;
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;

	ЕстьДатаОплаты=ЗначениеЗаполнено(УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураШД, "ДатаОплаты", Неопределено));
	ВидДокумента=ДокументОбъект.Метаданные().Имя;
	ВидОперации=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураШД, "ВидОперации", "");
	НаправлениеДвиженияДенежныхСредств = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации, ДокументОбъект); 

	СтруктураШД.Вставить("ВидДокумента", ВидДокумента);
	СтруктураШД.Вставить("Регистратор", СтруктураШД.Ссылка);
	СтруктураШД.Вставить("ВидДвиженияПоРасчетам", "Оплата");
    СтруктураШД.Вставить("Период", ?(ЕстьДатаОплаты, СтруктураШД.ДатаОплаты, СтруктураШД.Дата));	
	СтруктураШД.Вставить("НаправлениеДвижения", НаправлениеДвиженияДенежныхСредств.Направление);
	СтруктураШД.Вставить("РасчетыВозврат", НаправлениеДвиженияДенежныхСредств.РасчетыВозврат);
	
	Если НаправлениеДвиженияДенежныхСредств.РасчетыВозврат=Неопределено тогда
		СтруктураШД.Вставить("РасчетыВозврат", Перечисления.РасчетыВозврат.Расчеты);
	КонецЕсли;

	Если ВидДокумента="АвансовыйОтчет" Тогда
		стрТабличнаяЧасть="Оплата"; //ОплатаПоставщикам
	ИначеЕсли ВидДокумента="АктПередачиЦБ" Или ВидДокумента="АктПриемаЦБ" Тогда
		стрТабличнаяЧасть="ЦенныеБумаги";
	ИначеЕсли ВидДокумента="УчетЦенныхБумагАктПередачи" Или ВидДокумента="УчетЦенныхБумагАктПриема" Тогда
		стрТабличнаяЧасть="ЦенныеБумаги";
	Иначе
		стрТабличнаяЧасть="РасшифровкаПлатежа";
	КонецЕсли;

	//
	СтруктураТД=ДокументОбъект.ДополнительныеСвойства.СтруктураТД;
	тзРасшифровкаПлатежа=СтруктураТД[стрТабличнаяЧасть].Скопировать();
	тзРасшифровкаПлатежа.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов("Булево"));
	
	НаправлениеДвижения=СтруктураШД.НаправлениеДвижения;
	ЭтоВозврат=(СтруктураШД.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

	// Регистрируем оплату в регистре расчетов для НДС 
	Если не (НаправлениеДвижения = "Поступление") = ЭтоВозврат тогда 
		РегистрацияОплаты_НДСРасчетыСПокупателями(СтруктураШД, тзРасшифровкаПлатежа, ДокументОбъект.Движения, ЭтоВозврат);
	Иначе
		РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураШД, тзРасшифровкаПлатежа, ДокументОбъект.Движения, ЭтоВозврат);
	КонецЕсли;
КонецПроцедуры

// Процедура вызывается из модулей управления взаиморасчетами для отражения 
// факта оплаты в регистре "НДСРасчетыСПоставщиками". 
// Производится первоначальное фиксирование оплаты без распределения по СФ,
// В случае если в передаваемой таблице есть результат распределения по оплатам 
// - вместо непосредственного платежа фиксируется результат распределения.
Процедура РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураШД, ТаблицаОплат, Движения, ЭтоВозврат) Экспорт
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "НДСРасчетыСПоставщиками") Тогда Возврат; КонецЕсли;
    УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;

	СтруктураШД.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС", УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС);

	// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСРасчетыСПоставщиками.
	ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	
	СоответствиеКолонок=Новый Соответствие();
	СоответствиеКолонок.Вставить("Поставщик", "Контрагент");
	//СоответствиеКолонок.Вставить("ВалютаРасчетов", "ВалютаВзаиморасчетов"); //РЕЗЕДА!
	//СоответствиеКолонок.Вставить("Сумма", "РублеваяСумма");
	//28.07.14
	СоответствиеКолонок.Вставить("Сумма","СуммаБух"); //РЕЗЕДА!
	//СоответствиеКолонок.Вставить("ВалютнаяСумма","СуммаВал"); //Резеда!
	//////Если ТаблицаОплат.Колонки.Найти("ВалютаВзаиморасчетов")=Неопределено Тогда
	//////	ТаблицаОплат.Колонки.Добавить("ВалютаВзаиморасчетов");
	//////	Для каждого СтрокаКоллекции Из ТаблицаОплат Цикл
	//////		СтрокаКоллекции.ВалютаВзаиморасчетов=СтрокаКоллекции.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//////	КонецЦикла; 
	//////КонецЕсли; 
	//28.07.14 СоответствиеКолонок.Вставить("Сумма","РублеваяСумма");	
								 
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, ТаблицаДвижений_НДСРасчетыСПоставщиками);
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок, Истина);
	
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(СтруктураШД.Организация,"Организация");
	
	Если Не СтруктураШД.ВидДокумента="АктПриемаЦБ" Тогда
		ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	КонецЕсли;
	
	/// ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено;
	
	СтрокВТаблицеОплат = ТаблицаОплат.Количество();
	СтрокиКУдалению = новый массив();
	
	Для НомерСтроки=0 По СтрокВТаблицеОплат-1 Цикл
		СтрокаТаблицыОплат = ТаблицаОплат[НомерСтроки];
		СтрокаТаблицыДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками[НомерСтроки];
		
		Если СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		 ИЛИ СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыДвижений);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыОплат.РезультатРаспределения Тогда
		
			Если ЭтоВозврат и ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом) тогда
				СтрокаТаблицыДвижений.Документ = СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом;
			Иначе
				СтрокаТаблицыДвижений.Документ = СтруктураШД.Ссылка;
			КонецЕсли;	
			
			Если СтруктураШД.ВидДокумента = "КорректировкаДолга" 
				и СтруктураШД.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
				и СтруктураШД.КонтрагентКредитор = СтрокаТаблицыОплат.Контрагент 
				тогда
				// Перенос задолженности на того-же контрагента, но на другой договор не является фактом оплаты 

				ДоговорКонтрагента=СтруктураШД.ДоговорКонтрагента;

				СтрокаРаспределеннойОплаты=ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.Поставщик			= СтрокаТаблицыДвижений.Поставщик;
				СтрокаРаспределеннойОплаты.ДоговорКонтрагента	= ДоговорКонтрагента;
				СтрокаРаспределеннойОплаты.Документ				= ?(ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом),СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом,СтруктураШД.Ссылка);
				СтрокаРаспределеннойОплаты.ТипДоговораКонтрагента = СтрокаТаблицыОплат.ТипДоговораКонтрагента; //***
				СтрокаРаспределеннойОплаты.Сумма				= СтрокаТаблицыДвижений.Сумма;
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;

				// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
				СтрокаТаблицыДвижений.Сумма 					= (-1) *СтрокаТаблицыДвижений.Сумма;
				СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
			КонецЕсли;
		Иначе
			СтрокаТаблицыДвижений.Документ = СтруктураШД.Ссылка;
		КонецЕсли; 
		
		Если ЭтоВозврат Тогда
			 СтрокаТаблицыДвижений.Сумма 		= СтрокаТаблицыДвижений.Сумма*(-1);
			Если СтруктураШД.ВидДокумента = "ВозвратТоваровПоставщику" тогда
				// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
				СтрокаТаблицыДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Если СтрокиКУдалению.Количество() =  ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() Тогда
		     ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
		Иначе
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСРасчетыСПоставщиками.удалить(СтрокаКУдалению);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() > 0 Тогда
		Если СтруктураШД.Свойство("Период") И ЗначениеЗаполнено(СтруктураШД.Период) Тогда
			Движения.НДСРасчетыСПоставщиками.мПериод = СтруктураШД.Период;
		Иначе
			Движения.НДСРасчетыСПоставщиками.мПериод = СтруктураШД.Дата;
		КонецЕсли;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
		Движения.НДСРасчетыСПоставщиками.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из модулей управления взаиморасчетами для отражения 
// факта оплаты в регистре "НДСРасчетыСПокупателями". 
// Производится первоначальное фиксирование оплаты без распределения по СФ,
// В случае если в передаваемой таблице есть результат распределения по оплатам 
// - вместо непосредственного платежа фиксируется результат распределения.
Процедура РегистрацияОплаты_НДСРасчетыСПокупателями(СтруктураШД, ТаблицаОплат, Движения, ЭтоВозврат) Экспорт
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "НДСРасчетыСПокупателями") Тогда Возврат; КонецЕсли;
    УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;

	СтруктураШД.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС", УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС);
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСРасчетыСПокупателями.
	ТаблицаДвижений_НДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями.ВыгрузитьКолонки();
	
	СоответствиеКолонок=Новый Соответствие();
	СоответствиеКолонок.Вставить("Покупатель","Контрагент");	
	СоответствиеКолонок.Вставить("Сумма","СуммаБух");
	
	// СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов"); //Резеда!
	//СоответствиеКолонок.Вставить("ВалютнаяСумма","СуммаВал"); //Резеда!
	
	////Если ТаблицаОплат.Колонки.Найти("Контрагент")=Неопределено Тогда
	////	ТаблицаОплат.Колонки.Добавить("Контрагент");
	////	Если ТаблицаОплат.Колонки.Найти("ВалютаВзаиморасчетов")=Неопределено Тогда
	////		ТаблицаОплат.Колонки.Добавить("ВалютаВзаиморасчетов");
	////	КонецЕсли;
	////	Для каждого СтрокаКоллекции Из ТаблицаОплат Цикл
	////		СтрокаКоллекции.Контрагент=СтрокаКоллекции.ДоговорКонтрагента.Владелец;
	////		СтрокаКоллекции.ВалютаВзаиморасчетов=СтрокаКоллекции.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	////	КонецЦикла; 
	////КонецЕсли; 
	//28.07.14 СоответствиеКолонок.Вставить("Сумма","РублеваяСумма");
	
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, ТаблицаДвижений_НДСРасчетыСПокупателями);
	ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок, Истина);
	
	ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(СтруктураШД.Организация,"Организация");

	Если Не СтруктураШД.ВидДокумента="АктПередачиЦБ" Тогда
		ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	КонецЕсли; 
	СтрокВТаблицеОплат = ТаблицаОплат.Количество();
	СтрокиКУдалению = Новый Массив();
	
	Для НомерСтроки=0 По СтрокВТаблицеОплат-1 Цикл
		СтрокаТаблицыОплат = ТаблицаОплат[НомерСтроки];
		СтрокаТаблицыДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями[НомерСтроки];
		
		Если СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Или 
			СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыДвижений);
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаТаблицыОплат.РезультатРаспределения Тогда
			
			Если ЭтоВозврат и ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом) тогда
				СтрокаТаблицыДвижений.Документ = СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом;
			Иначе
				СтрокаТаблицыДвижений.Документ = СтруктураШД.Ссылка;
			КонецЕсли;	
			
			Если СтруктураШД.ВидДокумента = "КорректировкаДолга" 
				и СтруктураШД.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
				и СтруктураШД.КонтрагентКредитор = СтрокаТаблицыОплат.Контрагент 
				тогда
				// Перенос задолженности на того-же контрагента, но на другой договор не является фактом оплаты 
				
				СтрокаРаспределеннойОплаты = ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.Покупатель			= СтрокаТаблицыДвижений.Покупатель;
				СтрокаРаспределеннойОплаты.ДоговорКонтрагента	= СтруктураШД.ДоговорКонтрагента;
				СтрокаРаспределеннойОплаты.ТипДоговораКонтрагента = СтрокаТаблицыОплат.ТипДоговораКонтрагента; //***
				СтрокаРаспределеннойОплаты.Документ				= ?(ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом),СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом,СтруктураШД.Ссылка);
				СтрокаРаспределеннойОплаты.Сумма				= СтрокаТаблицыДвижений.Сумма;
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
				СтрокаТаблицыДвижений.Сумма 					= (-1) * СтрокаТаблицыДвижений.Сумма;
				СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
			КонецЕслИ;

		Иначе
			СтрокаТаблицыДвижений.Документ = СтруктураШД.Ссылка;
		КонецЕсли; 
		
		Если ЭтоВозврат Тогда
			 СтрокаТаблицыДвижений.Сумма=СтрокаТаблицыДвижений.Сумма*(-1);
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Если СтрокиКУдалению.Количество() =  ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() Тогда
		     ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();
		Иначе
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСРасчетыСПокупателями.удалить(СтрокаКУдалению);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() > 0 Тогда
		Если СтруктураШД.Свойство("Период") И ЗначениеЗаполнено(СтруктураШД.Период) Тогда
			Движения.НДСРасчетыСПокупателями.мПериод = СтруктураШД.Период;
		Иначе
			Движения.НДСРасчетыСПокупателями.мПериод = СтруктураШД.Дата;
		КонецЕсли;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();
	КонецЕсли;	
КонецПроцедуры

//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС
//***********************************************************************************************

//***********************************************************************************************
// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

Процедура ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШД, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок) Экспорт
КонецПроцедуры

// Формирует движения по возврату поставщику по регистру партий НДС
Процедура ДвиженияВозвратаТоваровПоставщикуПоРегиструНДСПартииТоваров(СтруктураШД, СтруктураПараметров, ТаблицаПартий, ТаблицаВозвратов, Отказ, Заголовок) Экспорт

	Если ТаблицаВозвратов.Количество()=0 Тогда
		// Возврат товаров не осуществлялся
		Возврат;
	ИначеЕсли СтруктураШД.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШД.УчитыватьНДС Тогда Возврат; КонецЕсли;

	ТаблицаПоПартиямБУ = УправлениеЗапасамиПартионныйУчет.РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаВозвратов, СтруктураШД, СтруктураПараметров);
	
	//************************************************************************
	// Попытка списания товаров по партионному учету НДС
		
	//***************************************************
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	
	//При учете "По средней" или если партионный учет по БУ не ведется - партия может быть незаполнена.
	Если ТаблицаПоПартиямБУ.Колонки.Найти("Партия") = Неопределено Тогда
		ТаблицаПоПартиямБУ.Колонки.Добавить("Партия");
	КонецЕсли; 
	
	Для каждого СтрокаТаблицыСписания Из ТаблицаПоПартиямБУ Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСписания.Партия) Тогда
			СтрокаТаблицыСписания.Партия = СтрокаТаблицыСписания.ДокументПартии; 
		КонецЕсли; 
	КонецЦикла; 
		
	ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШД, ТаблицаПоПартиямБУ, Отказ, Заголовок, Истина,,СтруктураПараметров);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	//***************************************************

	//***************************************************
	// НДС по партиям - отразить непосредственое списание.
	Если не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии найдены (хотя бы частично). Отразим в партионном учете НДС.		
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Период,"Период");
		
		// Делаем не расход, а сторно прихода по регистру.
		Для каждого СтрокаПартии Из ТаблицаДвиженийПартии Цикл
			СтрокаПартии.Стоимость	= - СтрокаПартии.Стоимость;
			СтрокаПартии.НДС		= - СтрокаПартии.НДС;
			СтрокаПартии.Количество	= - СтрокаПартии.Количество;
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

Процедура СформироватьДвиженияВозвратаПоставщикуПоРегистрамНДС(СтруктураШД, ТаблицаВозвратов, Движения, Отказ, Заголовок) Экспорт
	
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	Если СтруктураШД.НДСВключенВСтоимость Тогда
		ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.ВыгрузитьКолонки();
	КонецЕсли; 
	
	ОтразитьВКнигеПродаж =  (СтруктураШД.Дата>='20060530');
	Если ОтразитьВКнигеПродаж Тогда
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	КонецЕсли; 
	
	Для каждого СтрокаВозврата Из ТаблицаВозвратов Цикл		
		УказанДокументЗакупки = ЗначениеЗаполнено(СтрокаВозврата.ДокументЗакупки) И Не СтруктураШД.ПоставщикуВыставляетсяСчетФактураНаВозврат;		
		СчетФактура = ?(УказанДокументЗакупки,СтрокаВозврата.ДокументЗакупки,СтруктураШД.Ссылка);
		Если ОтразитьВКнигеПродаж Тогда
		    Если СтруктураШД.НДСВключенВСтоимость Тогда
			    // НДС был включен в стоимость а не отражен в книге покупок.
				// Формирование записи в книге продаж не требуется, так как НДС в книге покупок не отражался)
			Иначе
				//Отработка по регистру НДС начисленный возврата поставщику

				СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();
				СтрокаДвижения.Период 		= СтруктураШД.Дата;
				СтрокаДвижения.Организация	= СтруктураШД.Организация;
				СтрокаДвижения.СчетФактура	= СчетФактура;
				СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.Покупатель	= СтруктураШД.Контрагент;
				СтрокаДвижения.ВидНачисления = ?(Не СтруктураШД.ПоставщикуВыставляетсяСчетФактураНаВозврат,
												Перечисления.НДСВидНачисления.НДСВосстановлен, 
												Перечисления.НДСВидНачисления.РеализацияБезНДС);
				
				СтрокаДвижения.СуммаБезНДС	= СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС			= СтрокаВозврата.НДС;
				СтрокаДвижения.Событие		= ?(Не СтруктураШД.ПоставщикуВыставляетсяСчетФактураНаВозврат, 
				                                Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС,
												Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			КонецЕсли; 
		Иначе	
			//Отработка по регистру НДС предъявленный возврата поставщику
			СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
			СтрокаДвижения.Период 		= СтруктураШД.Дата;
			СтрокаДвижения.Организация	= СтруктураШД.Организация;
			СтрокаДвижения.СчетФактура	= СчетФактура;
			СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
			СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.Поставщик	= СтруктураШД.Контрагент;
			СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		Если СтруктураШД.НДСВключенВСтоимость и не ОтразитьВКнигеПродаж Тогда
			//Отработка по регистру НДС предъявленный записи по включению в стоимость, введенной ранее
			СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
			СтрокаДвижения.Период 		= СтруктураШД.Дата;
			СтрокаДвижения.Организация	= СтруктураШД.Организация;
			СтрокаДвижения.СчетФактура	= СчетФактура;
			СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
			СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.Поставщик	= СтруктураШД.Контрагент;
			СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;

			Если УказанДокументЗакупки Тогда
				// Сторнирование по регистру НДС включенный в стоимость записи, введенной ранее
				СтрокаДвижения = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
				СтрокаДвижения.Период 		= СтруктураШД.Дата;
				СтрокаДвижения.Организация	= СтруктураШД.Организация;
				СтрокаДвижения.СчетФактура	= СчетФактура;
				СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.Поставщик	= СтруктураШД.Контрагент;
					
				СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если при поступлении начислялся НДС при исполнении обязанностей налогового агента, необходимо отсторнировать начисление
	СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШД,ТаблицаДвижений_НДСПредъявленный,Движения);	
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
		Движения.НДСПредъявленный.мПериод = СтруктураШД.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
	КонецЕсли;
	
	Если СтруктураШД.НДСВключенВСтоимость И ТаблицаДвижений_НДСВключенныйВСтоимость.Количество() > 0 Тогда
		Движения.НДСВключенныйВСтоимость.мПериод = СтруктураШД.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
	КонецЕсли;
	
	Если ОтразитьВКнигеПродаж и не ТаблицаДвижений_НДСНачисленный.Количество() = 0  Тогда
		Движения.НДСНачисленный.мПериод = СтруктураШД.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	КонецЕсли; 
	
КонецПроцедуры

Функция ПреобразоватьТаблицуВозвратовПоставщикуВТаблицуРасчетов(СтруктураШД, ТаблицаВозвратов)

	СтруктураТаблицыРасчетов = Новый структура("Контрагент,ДоговорКонтрагента,ТипДоговораКонтрагента,ВидДоговора
		|,ВалютаВзаиморасчетов,КурсВзаиморасчетов,КратностьВзаиморасчетов
		|,ДокументЗакупки 
		|,СуммаВал,Сумма, НДСВал, НДС,
		|,Сделка");
			
	//Формируем таблицу расчетов с нужной структурой и заполняем по таблице возвратов
	тзНеоплаченныеВозвраты = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаВозвратов,СтруктураТаблицыРасчетов,,Истина);
	
	Для Каждого СтрокаТаблицы Из тзНеоплаченныеВозвраты Цикл
		СтрокаТаблицы.СуммаВал = СтрокаТаблицы.СуммаВал + СтрокаТаблицы.НДСВал;
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
	КонецЦикла;
		
	СоответствиеНазваний = Новый Структура("ДокументЗакупки,Сумма,СуммаВал","ДокументРасчетовСКонтрагентом","РублеваяСумма","ВалютнаяСумма");
	
	//Приводим названия в соответствие требованиям обработки отражения зачета авансов по НДС
	ПереименованиеКолонок(тзНеоплаченныеВозвраты, СоответствиеНазваний);	
		
	//Заполняем признак получения колонки по результатам распределения
	тзНеоплаченныеВозвраты.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов("Булево"));
	тзНеоплаченныеВозвраты.ЗаполнитьЗначения(Истина,"РезультатРаспределения");
	
	тзНеоплаченныеВозвраты.Колонки.Добавить("СчетФактура");
	тзНеоплаченныеВозвраты.загрузитьКолонку(тзНеоплаченныеВозвраты.ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом"),"СчетФактура");
	
	Для каждого СтрокаВозврата Из тзНеоплаченныеВозвраты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаВозврата.СчетФактура) Тогда
			СтрокаВозврата.СчетФактура = СтруктураШД.Ссылка;
			СтрокаВозврата.РезультатРаспределения = не СтруктураШД.НДСВключенВСтоимость;
		КонецЕсли; 
	КонецЦикла; 
	
	// Заполнение колонок реквизитами, общими для всего документа
	тзНеоплаченныеВозвраты.ЗаполнитьЗначения(СтруктураШД.Контрагент,"Контрагент");
	тзНеоплаченныеВозвраты.ЗаполнитьЗначения(СтруктураШД.ДоговорКонтрагента,"ДоговорКонтрагента");
	тзНеоплаченныеВозвраты.ЗаполнитьЗначения(СтруктураШД.ВидДоговора,"ВидДоговора");
	тзНеоплаченныеВозвраты.ЗаполнитьЗначения(СтруктураШД.ВалютаВзаиморасчетов,"ВалютаВзаиморасчетов");
	тзНеоплаченныеВозвраты.ЗаполнитьЗначения(СтруктураШД.КурсВзаиморасчетов,"КурсВзаиморасчетов");
	тзНеоплаченныеВозвраты.ЗаполнитьЗначения(СтруктураШД.КратностьВзаиморасчетов,"КратностьВзаиморасчетов");	

    Возврат тзНеоплаченныеВозвраты;	
КонецФункции

Процедура ОтразитьВозвратПоставщикуПоРегиструРасчетовСПоставщикамиНДС(СтруктураШД, Движения, ТаблицаВозвратов, Отказ, Заголовок) Экспорт
	Если ТаблицаВозвратов.Количество()=0 Тогда Возврат; КонецЕсли; 

	// Движения возврата по регистру НДСРасчетыСПоставщиками
	Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСРасчетыСПоставщиками") Тогда
		ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.ТаблицаДвиженийНДСРасчетыСПоставщиками;
	Иначе	
		ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	КонецЕсли;
	
	ТаблицаНеоплаченныхВозвратов = ПреобразоватьТаблицуВозвратовПоставщикуВТаблицуРасчетов(СтруктураШД, ТаблицаВозвратов);

	РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураШД, ТаблицаНеоплаченныхВозвратов, Движения, Истина);		
		
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() > 0 Тогда
		Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСРасчетыСПоставщиками") Тогда
			ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(Движения.Период,"Период");
		Иначе	
			Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШД.Дата;
			Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
			Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//***********************************************************************************************
// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Процедура ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШД, СтруктураПараметров, ТаблицаВыручки, Отказ, Заголовок) Экспорт
	Если ТаблицаВыручки.Количество()=0 Тогда Возврат; КонецЕсли;
    Если НЕ СтруктураШД.УчитыватьНДС  Тогда Возврат; КонецЕсли;
	// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда Возврат; КонецЕсли;

	ДоговорКонтрагента=СтруктураШД.ДоговорКонтрагента;

	УчетнаяПолитика=СтруктураПараметров.УчетнаяПолитика;

	ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Скопировать();
	
	Если Не СтруктураШД.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШД, ТаблицаВыручки.Скопировать(), Отказ, Заголовок, , Истина,СтруктураПараметров);
	Иначе
		ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШД, ТаблицаВыручки.Скопировать(), Отказ, Заголовок,,,СтруктураПараметров);
	КонецЕсли;				
	
	Если Не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		// Полученные партии могли быть реализованы с другого склада
		Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл
			// Делаем не приход, а сторно расхода по регистру.
			Если Не СтруктураШД.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СтрокаПартии.Стоимость  = - СтрокаПартии.Стоимость;
				СтрокаПартии.НДС  		= - СтрокаПартии.НДС;
				СтрокаПартии.Количество = - СтрокаПартии.Количество;
			КонецЕсли;
		КонецЦикла;
		
		//************************************************************************
		// Отработка сторнирования предположения ставки 0% по НДС покупки.
		// При передачи товаров комиссионеру предположение ставки 0% не должно отрабатывать, только по фактическому отражению реализации
		Если не СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОтразитьПредположениеСтавки0(СтруктураШД, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
		КонецЕсли;
		// Отработка сторнирования предположения ставки 0% по НДС покупки.
		//************************************************************************
		
		//************************************************************************
		// Отработка сторнирования включения/исключения НДС из стоимости.
		СторноПереквалификацииПартииПриРеализации(СтруктураШД, ТаблицаНДСПартииСписания, Неопределено, ТаблицаДвиженийПартии, СтруктураПараметров, Заголовок);
		
		Если ТаблицаДвиженийПартии.Количество()>0 Тогда
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
		КонецЕсли; 
		// Отработка сторнирования включения/исключения НДС из стоимости.
		//************************************************************************
		
		//************************************************************************
		// НДС по партиям - отразить сторно непосредственного списания.
		// Склад возврата может не совпадать со складом списания
		Для каждого СтрокаПартии из ТаблицаНДСПартииСписания цикл
			Если ЗначениеЗаполнено(СтрокаПартии.СкладПолучатель) тогда
				СтрокаПартии.Склад = СтрокаПартии.СкладПолучатель;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДвиженийПартии.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
		
		// НДС по партиям - отразить сторно непосредственного списания.
		//************************************************************************
		
		//************************************************************************
		// НДС по партиям - отразить приход от комиссионера.
		Если СтруктураШД.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл 
				СтрокаПартии.Склад = СтрокаПартии.СкладПолучатель;
			КонецЦикла;
			ТаблицаДвиженийПартии.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
			ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
		КонецЕсли;
		
		// НДС по партиям - отразить приход от комиссионера.
		//************************************************************************
		
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.ЗаполнитьЗначения(СтруктураШД.Дата,"Период");
		
		Если СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество()>0 Тогда
			СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(СтруктураШД.Дата,"Период");
		КонецЕсли; 
		Если СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество()>0 Тогда
			СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.ЗаполнитьЗначения(СтруктураШД.Дата,"Период");
		КонецЕсли; 
		
		// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
		//************************************************************************
	КонецЕсли;
	
	Если НЕ СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Если СтруктураШД.ОтразитьВКнигеПокупок Тогда
			СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШД, ТаблицаВыручки, СтруктураПараметров, Отказ);
		Иначе
			СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШД, ТаблицаВыручки, СтруктураПараметров, Отказ, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СторноПереквалификацииПартииПриРеализации(СтруктураШД, ТаблицаСписания, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии, СтруктураПараметров, Заголовок)
	//Включение НДС в стоимость по данному набору не требуется
	Если ТаблицаСписания.Количество() = 0 Тогда Возврат; КонецЕсли;

	//Фильтрование по произведенным в документе переквалификациям партий.
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСПартииТоваровОбороты.Организация,
	|	НДСПартииТоваровОбороты.Номенклатура,
	|	НДСПартииТоваровОбороты.Партия,
	|	НДСПартииТоваровОбороты.Склад,
	|	НДСПартииТоваровОбороты.СчетФактура,
	|	НДСПартииТоваровОбороты.ВидЦенности,
	|	НДСПартииТоваровОбороты.Регистратор КАК ДокументРеализации,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСИсключен,
	|	НДСПартииТоваровОбороты.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваровОбороты
	|ГДЕ
	|	НДСПартииТоваровОбороты.Регистратор В(&СписокДокументовРеализации)
	|	И НДСПартииТоваровОбороты.Номенклатура В(&Номенклатура)
	|	И НДСПартииТоваровОбороты.ВидЦенности В(&ВидыЦенностей)
	|	И НДСПартииТоваровОбороты.СчетФактура В(&СчетаФактуры)
	|	И НДСПартииТоваровОбороты.ВидДвижения = &ВидДвиженияПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПартииТоваровОбороты.Номенклатура,
	|	НДСПартииТоваровОбороты.Склад,
	|	НДСПартииТоваровОбороты.СчетФактура,
	|	НДСПартииТоваровОбороты.ВидЦенности,
	|	НДСПартииТоваровОбороты.Организация,
	|	НДСПартииТоваровОбороты.Партия,
	|	НДСПартииТоваровОбороты.СтавкаНДС,
	|	НДСПартииТоваровОбороты.Регистратор
	|";

	СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("ДокументПартии"),Истина);

	//Выделим документы реализации
	Для ИндексДокумента = 0 По СписокДокументовРеализации.Количество()-1 Цикл
		Если НЕ ЗначениеЗаполнено(СписокДокументовРеализации[ИндексДокумента]) Тогда
			СписокДокументовРеализации[ИндексДокумента] = Неопределено;
		Иначе
			ТипДокументаПартии = ТипЗнч(СписокДокументовРеализации[ИндексДокумента]);
			Если ТипДокументаПартии =  Тип("ДокументСсылка.РеализацияТоваровУслуг") 
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтражениеРеализацииТоваровУслугНДС")
				или ТипДокументаПартии =  Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера")
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
				тогда
					
			Иначе
				СписокДокументовРеализации[ИндексДокумента] = Неопределено;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
		
	СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовРеализации,Истина);
	
	Запрос.УстановитьПараметр("СписокДокументовРеализации",	СписокДокументовРеализации);
	Запрос.УстановитьПараметр("Номенклатура",  ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("Номенклатура")));
	Запрос.УстановитьПараметр("ВидыЦенностей", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("ВидЦенности")));
	Запрос.УстановитьПараметр("СчетаФактуры",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ВидДвиженияПриход",	ВидДвиженияНакопления.Приход);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда возврат; КонецЕсли; //Переквалификация возвращаемых партий при реализации не производилась.
	
	ТаблицаПереквалификаций = Результат.Выгрузить(ОБходРезультатаЗапроса.Прямой);
	ТаблицаПереквалификаций.Индексы.Добавить("Номенклатура,ВидЦенности,СчетФактура, ДокументРеализации");
	
	ТаблицаВключенияВСтоимость = ТаблицаСписания.СкопироватьКолонки();
	
	КолонкиТаблицыПереквалификации = ТаблицаПереквалификаций.Колонки;
	КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	
	Отказ = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШД.Дата, Отказ, СтруктураШД.Организация);
	
	Для каждого СтрокаСписания Из ТаблицаСписания Цикл
		Отбор = Новый Структура ("Номенклатура,ВидЦенности,СчетФактура, ДокументРеализации",СтрокаСписания.Номенклатура,СтрокаСписания.ВидЦенности,СтрокаСписания.СчетФактура,СтрокаСписания.ДокументПартии);
		НаборПереквалификацияПоКлючу = ТаблицаПереквалификаций.НайтиСтроки(Отбор);
		Если НаборПереквалификацияПоКлючу.Количество()=0 Тогда
			// Переквалификация по данному набору не производилась
			Продолжить;
		КонецЕсли; 
		
		КоличествоПоДвижению = - СтрокаСписания.Количество;
		СтоимостьПоДвижению  = - СтрокаСписания.Стоимость;
		НДСПоДвижению  = - СтрокаСписания.НДС;
		Для каждого СтрокаПереквалификации Из НаборПереквалификацияПоКлючу Цикл
			СуммаПереквалификации = 0;
			КоличествоПереквалификации = 0;
			НДСПереквалификации = 0;
			
			Если СтрокаСписания.НДСВключенВСтоимость Тогда
				//Могло производиться только включениеНДС в стоимость товаров (КоличествоВключен>0, КоличествоИсключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьВключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьВключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоВключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоВключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСВключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСВключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен - НДСПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			Иначе
				//Могло производиться только исключение НДС из стоимости товаров (КоличествоИсключен>0, КоличествоВключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьИсключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьИсключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоИсключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоИсключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСИсключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСИсключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен - НДСПереквалификации;
					//НДС по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			КонецЕсли;
			
			Если (КоличествоПереквалификации = 0 и СуммаПереквалификации = 0) Тогда
				продолжить;
			КонецЕсли;
				
			//Добавляем строки в движения по таблице НДС партии (по обратной переквалификации)
		
			//Отразим включения НДС в стоимость по регисту НДС партии
			СтрокаСписанияНДСПартии=ТаблицаДвиженийПартии.Добавить();
			СтрокаДобавленияНДСПартии=ТаблицаДвиженийПартии.Добавить();
			
			Для каждого Колонка Из ТаблицаДвиженийПартии.Колонки Цикл
				Если Колонка.Имя = "Количество" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= КоличествоПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -КоличествоПереквалификации;
				ИначеЕсли Колонка.Имя = "Стоимость" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= СуммаПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -СуммаПереквалификации;
				ИначеЕсли Колонка.Имя = "НДС" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= НДСПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -НДСПереквалификации;
				ИначеЕсли Колонка.Имя = "Склад" тогда
					Если СтруктураШД.ВидДокумента = "ВозвратТоваровОтПокупателя" 
						и не СтруктураШД.ПартионныйУчетНДСВРазрезеСкладов
						тогда
					    СтрокаСписанияНДСПартии[Колонка.Имя]= Справочники.Склады.ПустаяСсылка();
					    СтрокаДобавленияНДСПартии[Колонка.Имя]= Справочники.Склады.ПустаяСсылка();
					Иначе
						СтрокаСписанияНДСПартии[Колонка.Имя] 	= СтрокаСписания.Склад;
						СтрокаДобавленияНДСПартии[Колонка.Имя]	= СтрокаСписания.Склад;
					КонецЕсли; 
				ИначеЕсли не КолонкиТаблицыПереквалификации.Найти(Колонка.Имя) = неопределено тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] =   СтрокаПереквалификации[Колонка.Имя];
					СтрокаДобавленияНДСПартии[Колонка.Имя] = СтрокаПереквалификации[Колонка.Имя];
				КонецЕсли; 
			КонецЦикла;
			
			СтрокаСписанияНДСПартии.НДСВключенВСтоимость = не СтрокаСписания.НДСВключенВСтоимость;
			СтрокаДобавленияНДСПартии.НДСВключенВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			
			// подготовка таблицы для отражения переквалификации по другим регистрам.
			СтрокаТаблицыВключенияВстоимость = ТаблицаВключенияВСтоимость.Добавить();
			Для каждого Колонка Из ТаблицаВключенияВСтоимость.Колонки Цикл
				Если Колонка.Имя = "Количество" или Колонка.Имя = "Стоимость" или Колонка.Имя = "НДС" тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] 	= СтрокаДобавленияНДСПартии[Колонка.Имя];
				ИначеЕсли не КолонкиТаблицыСписания.Найти(Колонка.Имя) = неопределено тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] =   СтрокаСписания[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ВключитьВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ИсключитьИзСтоимости = не СтрокаСписания.НДСВключенВСтоимость;
			
			Если КоличествоПоДвижению= 0 и СтоимостьПоДвижению = 0 Тогда
				Прервать;
			КонецЕсли; 	
		КонецЦикла; 
	КонецЦикла; 
	
	Если ТаблицаВключенияВСтоимость.Количество()>0 Тогда
		Если Не СтруктураШД.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			ТаблицаВключенияВСтоимость.ЗаполнитьЗначения(Неопределено, "ХарактеристикаНоменклатуры");
			ТаблицаВключенияВСтоимость.ЗаполнитьЗначения(Неопределено, "СерияНоменклатуры");
		КонецЕсли;
		
		ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШД, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Истина,СтруктураПараметров,Заголовок, Ложь);
		ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШД, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Ложь,СтруктураПараметров,Заголовок, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

// Отражение возврата от покупателя в книге покупок (в регистре НДСПредъявленный)
// 
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШД, ТаблицаПредъявленногоНДС, СтруктураПараметров, Отказ) Экспорт
	
	Если ТипЗнч(СтруктураПараметров)=Тип("Структура") тогда
		ТаблицаДвижений_НДСПредъявленный=СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный;
	Иначе
		ТаблицаДвижений_НДСПредъявленный=СтруктураПараметров.НДСПредъявленный.Выгрузить();
		ТаблицаДвижений_НДСПредъявленный.Очистить();
	КонецЕсли;
	
	ЕстьКолонка_СчетУчетаНДС=(не ТаблицаПредъявленногоНДС.Колонки.Найти("СчетУчетаНДС")=Неопределено);

	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
		СтрокаДвижения.Организация = СтруктураШД.Организация;
		СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Возврат;
		СтрокаДвижения.Поставщик   = СтруктураШД.Контрагент;
		СтрокаДвижения.СчетФактура = ?(СтруктураШД.ПокупателемВыставляетсяСчетФактураНаВозврат Или Не ЗначениеЗаполнено(СтрокаДок.ДокументПартии), СтруктураШД.Ссылка, СтрокаДок.ДокументПартии);
		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;			
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;		
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;

		Если ЕстьКолонка_СчетУчетаНДС Тогда
			СтрокаДвижения.СчетУчетаНДС=СтрокаДок.СчетУчетаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
			ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(СтруктураШД.Дата, "Период");
		Иначе	
			СтруктураПараметров.НДСПредъявленный.мПериод          = СтруктураШД.Дата;
			СтруктураПараметров.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			СтруктураПараметров.НДСПредъявленный.ДобавитьДвижение();
			СтруктураПараметров.НДСПредъявленный.Записать(Ложь);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ
//***********************************************************************************************

//Определяет направление движения денежных средств в зависимости от вида документа и вида операции документа
Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации=Неопределено, Ссылка=Неопределено) Экспорт

	ВидыДокументовДДС=Новый Соответствие();
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеИсходящее","Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств","Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер","Выбытие");
	ВидыДокументовДДС.Вставить("АвансовыйОтчет","Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеВходящее","Поступление");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств","Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер","Поступление");	
	ВидыДокументовДДС.Вставить("ОплатаОтПокупателяПлатежнойКартой", "Поступление"); //4.08.14

	Если ВидДокумента="АктПередачиЦБ" Или ВидДокумента="АктПриемаЦБ" Тогда
		текВидДоговора=Ссылка.ДоговорКонтрагента.ВидДоговора;
		Если текВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ВидыДокументовДДС.Вставить(ВидДокумента, "Выбытие");
		ИначеЕсли текВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ВидыДокументовДДС.Вставить(ВидДокумента, "Поступление");
		КонецЕсли;
	КонецЕсли; //9.06.10

	ВидДействийДокумента=Новый Структура("Направление,РасчетыВозврат");
	ВидДействийДокумента.Вставить("Направление", ВидыДокументовДДС[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;

	Если ЗначениеЗаполнено(ВидОперации) тогда
		//Определение вида операции
		РасчетВозвратПоВидуОпераций = Новый Соответствие();
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
        РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		ВидДействийДокумента.Вставить("РасчетыВозврат", РасчетВозвратПоВидуОпераций[ВидОперации]);

	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

Процедура ДобавитьСчетУчетаНДС(тзТовары) Экспорт
	КолонкаТОП=тзТовары.Колонки.Найти("ТОП");
	Если КолонкаТОП=Неопределено Тогда Возврат; КонецЕсли; 

	тзТовары.Колонки.Добавить("СчетУчетаНДС");
	Для Каждого СтрокаКоллекции Из тзТовары Цикл
		Для каждого СтрокаПроводки Из СтрокаКоллекции.ТОП.ПроводкиБУ Цикл
			СчетКредит=СтрокаПроводки.СчетКредит;
			Если ЗначениеЗаполнено(СчетКредит) И СчетКредит.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
				СтрокаКоллекции.СчетУчетаНДС=СчетКредит; Прервать;
			КонецЕсли;
			СчетДебет=СтрокаПроводки.СчетДебет;			
			Если ЗначениеЗаполнено(СчетДебет) И СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
				СтрокаКоллекции.СчетУчетаНДС=СчетДебет; Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСчетУчета(СтрокаКоллекции) Экспорт
	Для каждого СтрокаПроводки Из СтрокаКоллекции.ТОП.ПроводкиБУ Цикл
		СчетКредит=СтрокаПроводки.СчетКредит;
		Если ЗначениеЗаполнено(СчетКредит) И СчетКредит.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
			СтрокаКоллекции.СчетУчетаНДС=СчетКредит; Прервать;
		КонецЕсли;
		СчетДебет=СтрокаПроводки.СчетДебет;			
		Если ЗначениеЗаполнено(СчетДебет) И СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
			СтрокаКоллекции.СчетУчетаНДС=СчетДебет; Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
// переданная ссылка.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//	
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда Возврат Неопределено; КонецЕсли;

	Если МетаданныеОснования = Неопределено Тогда
		МетаданныеОснования = ДокументСсылка.Метаданные();
	КонецЕсли;

	Если МетаданныеОснования.Реквизиты.Найти("ИспользоватьДокументРасчетовКакСчетФактуру") <> Неопределено
		И МетаданныеОснования.Реквизиты.Найти("РасчетныйДокумент") <> Неопределено 
		И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Если не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
			И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
			МетаданныеОснования = ДокументСсылка.Метаданные();
			Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли;
	КонецЕсли;
	Если ВидДокумента = "СчетФактураПолученный" 
		И МетаданныеОснования.Реквизиты.Найти("ПредъявленСчетФактура") <> Неопределено 
		И ДокументСсылка.ПредъявленСчетФактура 
		И Не ?(ТипЗнч(ИсключитьИзВыборкиСФ) = Тип("Массив"), ИсключитьИзВыборкиСФ.Найти(ДокументСсылка) <> Неопределено, ДокументСсылка = ИсключитьИзВыборкиСФ)
		Тогда
		Возврат ДокументСсылка;
	КонецЕсли;

	НайденныйДокумент = Неопределено;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ПОМЕСТИТЬ ВрмТбл
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Если ТипЗнч(ИсключитьИзВыборкиСФ) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка В (&ИсключитьИзВыборкиСФ)
				|";
		Иначе
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка = &ИсключитьИзВыборкиСФ
				|";
		КонецЕсли;
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;

			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";

			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату"  И ВидДокумента = "СчетФактураВыданный" Тогда
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";

			Иначе
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ+" = &"+ЭлементОтбора.Ключ;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ";";
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ Ссылка
	| ИЗ ВрмТбл
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.ПометкаУдаления,
	|	Ссылка.Проведен УБЫВ,
	|	Ссылка.Дата
	|";
	ВыборкаИзЗапроса=Запрос.Выполнить().Выбрать();
	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент=ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;
КонецФункции

// Функция производит поиск документа заданного вида (счета-фактуры), имеющего в табличной части "ДокументыОснования" значение,
// равное переданной ссылке.
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйДокумент(ДокументСсылка, ВидДокумента = "СчетФактураВыданный", РазрешитьВыборСФНаАванс = Истина, ФлагТолькоПроведенные = Ложь, РазрешитьВыборТолькоСФНаАванс = Ложь, СтавкаНДСсАванса = Неопределено,  ДоговорАванса = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда Возврат Неопределено; КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.Текст="
	|ВЫБРАТЬ различные
	|	Ссылка
	|ИЗ
	|	Документ." + ВидДокумента + ".ДокументыОснования Как ТЧ_Документов
	|ГДЕ
	|	ТЧ_Документов.ДокументОснование = &ДокументСсылка
	|";
	Если ФлагТолькоПроведенные Тогда
		Запрос.Текст = Запрос.Текст+" И ТЧ_Документов.Ссылка.Проведен И НЕ ТЧ_Документов.Ссылка.ПометкаУдаления";
	КонецЕсли;
	Если ВидДокумента = "СчетФактураВыданный" И Не РазрешитьВыборСФНаАванс Тогда
		Запрос.Текст = Запрос.Текст + " И Ссылка.ВидСчетаФактуры<>ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)";
	ИначеЕсли ВидДокумента = "СчетФактураВыданный" И РазрешитьВыборСФНаАванс и РазрешитьВыборТолькоСФНаАванс Тогда
		Запрос.Текст = Запрос.Текст + " И Ссылка.ВидСчетаФактуры=ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)";
		Если ЗначениеЗаполнено(СтавкаНДСсАванса) Тогда
			Запрос.Текст = Запрос.Текст + " И Ссылка.СтавкаНДС = &СтавкаНДСсАванса";
			Запрос.УстановитьПараметр("СтавкаНДСсАванса", СтавкаНДСсАванса);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДоговорАванса) Тогда
			Запрос.Текст = Запрос.Текст + " И Ссылка.ДоговорКонтрагента = &ДоговорАванса";
			Запрос.УстановитьПараметр("ДоговорАванса", ДоговорАванса);
		КонецЕсли; 
	КонецЕсли;                                                                      
	
	// Упорядочивание результатов
	Запрос.Текст = Запрос.Текст + "
	|	Упорядочить По";
	Если не ФлагТолькоПроведенные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Ссылка.Проведен убыв,
		|	Ссылка.ПометкаУдаления,
		|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	Ссылка.Дата,Ссылка.Номер
	|";
	
	ВыборкаИзЗапроса=Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Следующий() Тогда
		Возврат ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат Неопределено;	
КонецФункции

//Процедура формирует список выбора кодов видов операций
//
// Параметры
//  ЧастьЖурнала  - Перечисления.ЧастиЖурналаУчетаСчетовФактур - в зависимости от значения параметра 
//                 формируется список выбора
//  СписокВыбора  - СписокЗначений - формируемый список кодов видов операций
//
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокВыбора, Период) Экспорт
	
	Если Период >= '20160701' Тогда
		Если ЧастьЖурнала = "ПолученныеСчетаФактуры" Тогда
			СписокВыбора.Добавить("01", "01 - Получение товаров, работ, услуг");
			СписокВыбора.Добавить("02", "02 - Авансы выданные");
			СписокВыбора.Добавить("10", "10 - Безвозмездное получение товаров, работ, услуг");
			СписокВыбора.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокВыбора.Добавить("15", "15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента");
			СписокВыбора.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
			СписокВыбора.Добавить("17", "17 - Возврат от покупателя-физического лица");
			СписокВыбора.Добавить("18", "18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения");
			СписокВыбора.Добавить("19", "19 - Ввоз товаров из Евразийского экономического союза");
			СписокВыбора.Добавить("20", "20 - Ввоз импортных товаров на территорию РФ");
			СписокВыбора.Добавить("22", "22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК");
			СписокВыбора.Добавить("23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК");
			СписокВыбора.Добавить("24", "24 - Подтверждение ставки 0% после истечения 180 дней");
			СписокВыбора.Добавить("25", "25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК");
			СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК");
			СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК");
			СписокВыбора.Добавить("32", "32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК");
			СписокВыбора.Добавить("36", "36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК");
			СписокВыбора.Добавить("41", "41 - Авансы выданные за товары п.8 ст. 161 НК");
			СписокВыбора.Добавить("42", "42 - Получение товаров п.8 ст. 161 НК");
			СписокВыбора.Добавить("43", "43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК");
			СписокВыбора.Добавить("44", "44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения");
		ИначеЕсли ЧастьЖурнала = "ВыставленныеСчетаФактуры" Тогда
			СписокВыбора.Добавить("01", "01 - Реализация товаров, работ, услуг и операции, приравненные к ней");
			СписокВыбора.Добавить("02", "02 - Авансы полученные");
			СписокВыбора.Добавить("06", "06 - Налоговый агент, ст. 161 НК");
			СписокВыбора.Добавить("10", "10 - Безвозмездная передача товаров, работ, услуг");
			СписокВыбора.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокВыбора.Добавить("14", "14 - Реализация прав, пп.1-4 ст. 155 НК");
			СписокВыбора.Добавить("15", "15 - Совместная реализация собственных и комиссионных товаров, работ, услуг");
			СписокВыбора.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
			СписокВыбора.Добавить("18", "18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения");
			СписокВыбора.Добавить("21", "21 - Восстановление НДС, п.8 ст. 145, п.3 ст. 170, ст. 171.1 НК, а также при операциях, облагаемых по ставке 0%");
			СписокВыбора.Добавить("26", "26 - Реализация товаров, работ, услуг неплательщикам НДС, получение авансов");
			СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК");
			СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК");
			СписокВыбора.Добавить("29", "29 - Корректировка по п.6 ст. 105.3 НК");
			СписокВыбора.Добавить("30", "30 - Отгрузка товаров в ОЭЗ Калининградской обл., абз.1 пп.1.1 п.1 ст. 151 НК");
			СписокВыбора.Добавить("31", "31 - Уплата НДС в ОЭЗ Калининградской обл., абз.2 пп.1.1 п.1 ст. 151 НК");
			СписокВыбора.Добавить("33", "33 - Авансы полученные за товары п.8 ст. 161 НК");
			СписокВыбора.Добавить("34", "34 - Реализация товаров п.8 ст. 161 НК");
			СписокВыбора.Добавить("35", "35 - Оформление документа для компенсации НДС гражданину иностранного государства");
			СписокВыбора.Добавить("37", "37 - Реализация сырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК");
			СписокВыбора.Добавить("38", "38 - Реализация несырьевых товаров на экспорт по ставке 18%, п.7 ст.164 НК");
			СписокВыбора.Добавить("39", "39 - Реализация несырьевых товаров на экспорт по ставке 10%, п.7 ст.164 НК");
			СписокВыбора.Добавить("40", "40 - Реализация работ (услуг) в отношении экспортируемых товаров по ставке 18%, пп.2.1-2.5,2.7 и 2.8 п.1, п.7 ст.164 НК");
		КонецЕсли;
	Иначе
		Если ЧастьЖурнала="ПолученныеСчетаФактуры" ИЛИ ЧастьЖурнала="ВыставленныеСчетаФактуры" Тогда
			СписокВыбора.Добавить("01", "01 - реализованные или полученные товары, работы, услуги");
			СписокВыбора.Добавить("02", "02 - авансы выданные или полученные");
			СписокВыбора.Добавить("03", "03 - возврат от покупателя или возврат поставщику");
			СписокВыбора.Добавить("04", "04 - полученные или реализованные товары, работы, услуги от комитента");
			СписокВыбора.Добавить("05", "05 - авансы выданные комитенту или полученные от комитента");
			СписокВыбора.Добавить("06", "06 - налоговый агент, статья 161 НК");
			СписокВыбора.Добавить("07", "07 - списание за счет прибыли, пп.2 п.1 статьи 146 НК");
			СписокВыбора.Добавить("08", "08 - строительно-монтажные работы, пп.3 п.1 статьи 146 НК");
			СписокВыбора.Добавить("09", "09 - суммы, связанные с расчетами по оплате, статья 162 НК");
			СписокВыбора.Добавить("10", "10 - полученные или переданные безвозмездно товары, работы, услуги");
			СписокВыбора.Добавить("11", "11 - полученные или реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
			СписокВыбора.Добавить("12", "12 - авансы выданные или полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
			СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");
			СписокВыбора.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
			СписокВыбора.Добавить("17", "17 - Возврат от покупателя-физического лица");
			СписокВыбора.Добавить("18", "18 - Изменение стоимости отгруженных и полученных товаров (работ, услуг) в сторону уменьшения");
			СписокВыбора.Добавить("19", "19 - Ввоз товаров из Евразийского экономического союза");
			СписокВыбора.Добавить("20", "20 - Ввоз импортных товаров на территорию РФ");
			СписокВыбора.Добавить("21", "21 - Восстановление НДС, п.8 статьи 145, п.3 статьи 170, статья 171.1 НК, а также при операциях, облагаемых по ставке 0%");
			СписокВыбора.Добавить("22", "22 - Возврат, зачет авансовых платежей, п.5 статьи 171, п.6 статьи 172 НК");
			СписокВыбора.Добавить("23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 статьи 171 НК");
			СписокВыбора.Добавить("24", "24 - Подтверждение ставки 0% после истечения 180 дней");
			СписокВыбора.Добавить("25", "25 - Подтверждение ставки 0%");
			СписокВыбора.Добавить("26", "26 - Счета-фактуры не составляются по письменному согласию сторон");
			СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 статьи 169 НК");
			СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт
	МетаданныеДокумента = ДокументОбъект.Метаданные(); СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ДокументОбъект.УчитыватьНДС
		   И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда Продолжить; КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаДокумента;
КонецФункции
