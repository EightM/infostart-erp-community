Функция ЗаблокироватьДанные(Ссылка, ВерсияДанных, УникальныйИдентификатор) Экспорт
	Попытка ЗаблокироватьДанныеДляРедактирования(Ссылка, ВерсияДанных, УникальныйИдентификатор);
	Исключение Возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат "";
КонецФункции

Функция ДоступныеДоговорыКонтрагента(СтруктураПраметров, ВернутьТолькоПервуюЗапись=Истина) Экспорт
	ВалютаВзаиморасчетовДоговора=Неопределено; СтруктураПраметров.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
	ВидСравненияВалютыВзаиморасчетов=Неопределено; СтруктураПраметров.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	ДополнительныеРеквизиты=Неопределено; СтруктураПраметров.Свойство("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	ВидДоговора=Неопределено; СтруктураПраметров.Свойство("ВидДоговора", ВидДоговора);
	Организация=Неопределено; СтруктураПраметров.Свойство("Организация", Организация);
	Контрагент=Неопределено; СтруктураПраметров.Свойство("Контрагент", Контрагент);

	Если ТипЗнч(ВидДоговора)=Тип("Строка") Тогда
		МассивСтрок=СтрРазделить(ВидДоговора, ",");
		ВидДоговора=Новый Массив;
		Для каждого ИмяПеречисления Из МассивСтрок Цикл
			ВидДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов[ИмяПеречисления]);
		КонецЦикла;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВернутьТолькоПервуюЗапись," ПЕРВЫЕ 1", "")+"
	|	ДоговорыКонтрагентов.Ссылка КАК Договор";

	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
			Запрос.Текст=Запрос.Текст+", ДоговорыКонтрагентов."+НаименованиеРеквизита;
		КонецЦикла; 		
	КонецЕсли; 

	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), " И ДоговорыКонтрагентов.Организация = &Организация", "") + "
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов=Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ВалютаВзаиморасчетов)
	|")
	+?(ВидДоговора=Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ВидДоговора)
	|")
	//+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", " И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	+?(ВидДоговора=Неопределено, "", "");

	Если ЗначениеЗаполнено(Организация) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &Организация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов=Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ВалютаВзаиморасчетов
		|")
		+?(ВидДоговора=Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ВидДоговора)
		|")
		//*** +?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", " И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)")
		+ "
		|	ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";
	КонецЕсли;
	РезультатЗапроса=Запрос.Выполнить();
	Если НЕ ВернутьТолькоПервуюЗапись Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Выборка=РезультатЗапроса.Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Договор, Неопределено);	
КонецФункции

// Процедура проверяет, можно ли покупателю заменить дисконтную карту на карту более высокого уровня.
// Если такая замена возможна, то выдается соответствующее предупреждение.
//
// Параметры:
//  ДокументОбъект - Объект документа, из которого вызвана процедура.
//  УчетнаяПолитика - Структура, содержащая данные учетной политики.
//
Процедура ПроверитьВозможностьЗаменыДисконтнойКарты(ДокументОбъект, УчетнаяПолитика) Экспорт

	Если ДокументОбъект.Проведен
	   И ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта)
	   И УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоВладельцуДисконтнойКарты Тогда

		ПериодНакопления = ОбработкаТабличныхЧастей.ПолучитьПериодРасчетаНакопительныхСкидок(ДокументОбъект.Дата, УчетнаяПолитика);

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.ДатаКон);
		Запрос.УстановитьПараметр("ВладелецДисконтнойКарты", ДокументОбъект.ДисконтнаяКарта.ВладелецКарты);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	РегПродажи.СуммаОборот КАК Сумма,
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|	   ВладелецДисконтнойКарты = &ВладелецДисконтнойКарты) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= ЕСТЬNULL(РегПродажи.СуммаОборот, 0)
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ВладелецДисконтнойКарты = &ВладелецДисконтнойКарты) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= ЕСТЬNULL(РегПродажи.СуммаОборот, 0)
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекВидКарты=ДокументОбъект.ДисконтнаяКарта.ВидДисконтнойКарты;
			Если Выборка.ЗначениеПорога=ТекВидКарты Тогда Возврат; КонецЕсли;

			Сообщить("Сумма, накопленная покупателем, составила " + (ОбщегоНазначения.ФорматСумм(Выборка.Сумма,
			МодульВалютногоУчета.ПолучитьВалюту("Упр")))+"." + Символы.ПС + Символы.ПС
			   + "Покупателю можно обменять дисконтную карту" + Символы.ПС
			   + """" + СокрЛП(ТекВидКарты) + """ на """ + СокрЛП(Выборка.ЗначениеПорога) + """.");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СтруктураПодбора() Экспорт
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ЗапрашиватьКоличествоВесовогоТовара", Ложь);
	СтруктураПараметров.Вставить("ЗапрашиватьКоличествоОбычногоТовара", Ложь);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Ложь);
	СтруктураПараметров.Вставить("Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	СтруктураПараметров.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СтруктураПараметров.Вставить("ТипЦен", ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка"));
	СтруктураПараметров.Вставить("ПоказыватьЦены", Истина);
	СтруктураПараметров.Вставить("ПоказыватьОстатки", Истина);
	СтруктураПараметров.Вставить("ПоказыватьПотребности", Ложь);
	СтруктураПараметров.Вставить("ПоказыватьРезервы", Ложь);

	Возврат СтруктураПараметров;
КонецФункции