// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	МетаданныеДокумента=ДокументОбъект.Метаданные();
	Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокумента) Тогда
		Если НЕ ДокументОбъект.ВалютаДокумента=ВалютаРегламентированногоУчета Тогда		
			Если УправлениеМетаданными.ЕстьРеквизит("КурсДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсДокумента;
			КонецЕсли;
			Если УправлениеМетаданными.ЕстьРеквизит("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	МетаданныеДокумента=ДокументОбъект.Метаданные();
	Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокумента) Тогда
		Если НЕ ДокументОбъект.ВалютаДокумента=ВалютаРегламентированногоУчета Тогда		
			Если УправлениеМетаданными.ЕстьРеквизит("КратностьДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьДокумента;
			КонецЕсли;
			Если УправлениеМетаданными.ЕстьРеквизит("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

// Функция возвращает дату отстоящую на заданное количество рабочих дней от начальной в соответствии с
//регламентированным производственным календарем
//
//Параметры:
// ДатаНач      - начальная дата
// ЧислоДней    - количество рабочих дней, на которое искомая дата должна отстоять от начальной
//
Функция ОпределитьДату(ДатаНач, ЧислоДней) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ЧислоДней",           ЧислоДней);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейКалендаря.Предпраздничный);
	
	Если ЧислоДней > 0 Тогда
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ "+ЧислоДней+"
		|	ИсточникДанных.Дата
		|ИЗ
		|	РегистрСведений.Календарь КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Дата > &ДатаНач И (ИсточникДанных.ВидДня = &РабочийДень ИЛИ ИсточникДанных.ВидДня = &ПредпраздничныйДень)
		|";		
	Иначе
		ЧислоДней = -ЧислоДней;
		
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ "+ЧислоДней+"
		|	ИсточникДанных.Дата
		|ИЗ
		|	РегистрСведений.Календарь КАК ИсточникДанных
		|ГДЕ 
		|	ИсточникДанных.Дата < &ДатаНач И (ИсточникДанных.ВидДня = &РабочийДень ИЛИ ИсточникДанных.ВидДня = &ПредпраздничныйДень)
        |УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|";		
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать();	
	Если Выборка.Количество()=ЧислоДней Тогда
		Пока Выборка.Следующий() Цикл
			ТекДата=Выборка.Дата;
		КонецЦикла;
		Возврат ТекДата;
	КонецЕсли;
	
	Возврат Неопределено;	
КонецФункции	

// Функция определяет конрагента, соответствующего указанной организации
//
// Параметры
//  Организация - организация, по которой определяется конрагент
//
// Возвращаемое значение:
//  Контрагент - контрагент, соответствующий указанной организации
//
Функция КонтрагентПоОрганизации(Организация) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ВидСвязи", Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст="
	|ВЫБРАТЬ
	|   Контрагент
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ 
	|	Объект = &Организация И ВидСвязи = &ВидСвязи
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
КонецФункции

// Функция определяет организацию, соответствующего указанному юр/физ лицу конрагента
//
// Параметры
//  Контрагент - конрагент, по которому определяется организация
//
// Возвращаемое значение:
//  Организации - организация, соответствующий указаннму юр/физ лицу конрагента
//
Функция ОрганизацияПоКонтрагенту(Контрагент) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ВидСвязи", Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст="
	|ВЫБРАТЬ
	|   Объект
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ 
	|	Контрагент = &Контрагент И ВидСвязи = &ВидСвязи
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Объект, Справочники.Организации.ПустаяСсылка());
КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Функция ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт
	Если ДокументОснование=Неопределено Или ТипЗнч(ДокументОснование)=Тип("Структура") Тогда Возврат Ложь; КонецЕсли;

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();
	
	стрАтрибуты="ПометкаУдаления,Проведен,Номер,Дата";
	Если УправлениеМетаданными.ЕстьРеквизит("Автор", МетаданныеДокумента) И УправлениеМетаданными.ЕстьРеквизит("Автор", МетаданныеДокументаОснования) Тогда
		стрАтрибуты=стрАтрибуты+",Автор";
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("ПоследнийАвтор", МетаданныеДокумента) И УправлениеМетаданными.ЕстьРеквизит("ПоследнийАвтор", МетаданныеДокументаОснования) Тогда
		стрАтрибуты=стрАтрибуты+",ПоследнийАвтор";
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("Подвид", МетаданныеДокумента) И УправлениеМетаданными.ЕстьРеквизит("Подвид", МетаданныеДокументаОснования) Тогда
		стрАтрибуты=стрАтрибуты+",Подвид";
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("ДатаОтгрузки", МетаданныеДокумента) И УправлениеМетаданными.ЕстьРеквизит("ДатаОтгрузки", МетаданныеДокументаОснования) Тогда
		стрАтрибуты=стрАтрибуты+",ДатаОтгрузки";
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("ДатаОплаты", МетаданныеДокумента) И УправлениеМетаданными.ЕстьРеквизит("ДатаОплаты", МетаданныеДокументаОснования) Тогда
		стрАтрибуты=стрАтрибуты+",ДатаОплаты";
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДокументОснование,,стрАтрибуты);

	Если УправлениеМетаданными.ЕстьРеквизит("ДокументОснование", МетаданныеДокумента) Тогда
		ДокументОбъект.ДокументОснование=ДокументОснование;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокумента) И УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад=ДокументОснование.Склад;
	КонецЕсли;
	
	Если УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокумента)
	   И УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокумента)
	   И УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокумента)
	   И УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокументаОснования) Тогда
		Если ТипЗнч(ДокументОснование.Склад) = Тип("СправочникСсылка.Склады") Тогда
			ДокументОбъект.Склад = ДокументОснование.Склад;
		ИначеЕсли ТипЗнч(ДокументОснование.Склад) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ДокументОбъект.Склад = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование.Склад, "Склад");
		КонецЕсли;
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокумента)
	   И УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ?(ТипЗнч(ДокументОснование.Склад) = Тип("СправочникСсылка.Склады"), ДокументОснование.Склад, Неопределено);
	КонецЕсли;

	// КурсВзаиморасчетов.
	Если УправлениеМетаданными.ЕстьРеквизит("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.КурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
		ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
		// КратностьВзаиморасчетов.
		Если УправлениеМетаданными.ЕстьРеквизит("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли;
	КонецЕсли;

	// Касса
	Если УправлениеМетаданными.ЕстьРеквизит("Касса", МетаданныеДокумента) Тогда
		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если УправлениеМетаданными.ЕстьРеквизит("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("Касса", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.Касса) Тогда
				ДокументОбъект.Касса = ДокументОснование.Касса;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			ДокументОбъект.Касса=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяКасса");
		КонецЕсли;
		Если ДокументОбъект.Касса.Владелец<>ДокументОбъект.Организация Тогда ДокументОбъект.Касса=""; КонецЕсли;
	КонецЕсли;

	// Банковский счет 
	Если УправлениеМетаданными.ЕстьРеквизит("БанковскийСчет", МетаданныеДокумента) Тогда
		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если УправлениеМетаданными.ЕстьРеквизит("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Банковский счет организации
	Если УправлениеМетаданными.ЕстьРеквизит("БанковскийСчетОрганизации", МетаданныеДокумента)
	   И УправлениеМетаданными.ЕстьРеквизит("БанковскийСчет", МетаданныеДокументаОснования) Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации)
		  И ЗначениеЗаполнено(ДокументОснование.БанковскийСчет)Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;

	// ВалютаДокумента.
	Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокумента) И УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокументаОснования) Тогда
		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если УправлениеМетаданными.ЕстьРеквизит("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокумента) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
			ДокументОбъект.Склад=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
		КонецЕсли;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("Организация", МетаданныеДокумента) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("Ответственный", МетаданныеДокумента) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда
			ДокументОбъект.Ответственный=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
		КонецЕсли;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("Подразделение", МетаданныеДокумента) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.Подразделение) Тогда
			ДокументОбъект.Подразделение=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделение");
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеМетаданными.ЕстьРеквизит("Контрагент", МетаданныеДокумента) Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ДокументОбъект.ДополнительныеСвойства.ТипОперации="Продажа" Тогда
				ДокументОбъект.Контрагент=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойПокупатель");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ЗаполнитьТабличныеЧастиДокументаПоОснованию(Знач ДокументОбъект, ДокументОснование, СтруктураТЧ=Неопределено) Экспорт
	Если СтруктураТЧ=Неопределено Тогда
		СтруктураТЧ=Новый Структура("Товары,Услуги,ВозвратнаяТара,СоставНабора,ОС,НМА");
	КонецЕсли;
	Если ТипЗнч(ДокументОснование)=Тип("Массив") Тогда
		ДокументОснование=ДокументОснование[0];
	КонецЕсли; 
	мдДокументИсточник=ДокументОснование.Метаданные();
	мдДокументПриемник=ДокументОбъект.Метаданные();
	Для каждого ТабличнаяЧасть Из СтруктураТЧ Цикл
		стрТабличнаяЧасть=ТабличнаяЧасть.Ключ;
		Если мдДокументПриемник.ТабличныеЧасти.Найти(стрТабличнаяЧасть)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если мдДокументИсточник.ТабличныеЧасти.Найти(стрТабличнаяЧасть)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаКоллекции Из ДокументОснование[стрТабличнаяЧасть] Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект[стрТабличнаяЧасть].Добавить(), СтрокаКоллекции);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПредставлениеДокумента(Документ) Экспорт
	МетаданныеДокумента=Документ.Метаданные();
	Если УправлениеМетаданными.ЕстьРеквизит("Подвид", МетаданныеДокумента) Тогда
		стрПредставление=" ("+Документ.Подвид+")";
	Иначе
		стрПредставление=" ("+МетаданныеДокумента.Представление()+")";
	КонецЕсли;
	Если УправлениеМетаданными.ЕстьРеквизит("ВидОперации", МетаданныеДокумента) Тогда
		стрПредставление=стрПредставление+" ("+Документ.ВидОперации+")";
	КонецЕсли;
	Возврат стрПредставление;
КонецФункции

Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт
	МетаданныеДокумента=Документ.Метаданные(); стрВидОперации="";
	Если УправлениеМетаданными.ЕстьРеквизит("ВидОперации", МетаданныеДокумента) Тогда
		стрВидОперации=" ("+Документ.ВидОперации+")";
	КонецЕсли;
	Возврат "Проведение документа: "+СокрЛП(Документ)+стрВидОперации;
КонецФункции

// Процедура выполняет общие действия при изменнении контрагента
//
// Параметры:
//  ДокументОбъект                          - объект редактируемого документа,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых видов взаиморасчетов, не обязательный.
//
Процедура ПриИзмененииЗначенияКонтрагента(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЕстьДоговорКонтрагента        = УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", МетаданныеДокумента);
	ЕстьКонтактноеЛицоКонтрагента = УправлениеМетаданными.ЕстьРеквизит("КонтактноеЛицоКонтрагента", МетаданныеДокумента);
	
	Если ДокументОбъект.Контрагент = Неопределено Тогда
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 

	Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
				КонтактноеЛицоКонтрагента = "";
			Иначе
				КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
	Иначе
		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			//ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;

			//Договор контрагента
			СтруктураПраметров=Новый Структура;
			СтруктураПраметров.Вставить("Организация", ДокументОбъект.Организация);
			СтруктураПраметров.Вставить("Контрагент", ДокументОбъект.Контрагент);
			СтруктураПраметров.Вставить("ВидДоговора", СтруктураПараметровДляПолученияДоговора);
			ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);
		КонецЕсли;

		Если ЕстьКонтактноеЛицоКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицоКонтрагента)
			 ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицоКонтрагента) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
				КонтактноеЛицоКонтрагента = КонтактныеЛицаСервер.ОсновноеКонтактноеЛицоКонтрагента(ДокументОбъект.Контрагент);
			Иначе
				Если ДокументОбъект.КонтактноеЛицоКонтрагента.Владелец <> ДокументОбъект.Контрагент Тогда
					КонтактноеЛицоКонтрагента = КонтактныеЛицаСервер.ОсновноеКонтактноеЛицоКонтрагента(ДокументОбъект.Контрагент);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	Если ЕстьДоговорКонтрагента Тогда
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если УправлениеМетаданными.ЕстьРеквизит("Организация", МетаданныеДокумента)
		   И ДоговорКонтрагента <> Неопределено И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.Организация = ДоговорКонтрагента.Организация;
			Если Не ПустаяСтрока(ДокументОбъект.Номер) Тогда
				ДокументОбъект.Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьКонтактноеЛицоКонтрагента И КонтактноеЛицоКонтрагента <> Неопределено Тогда
		ДокументОбъект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
	КонецЕсли; 

	Если УправлениеМетаданными.ЕстьРеквизит("Сделка", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Сделка) Тогда 
			ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
		КонецЕсли;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ТипЦен", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
	   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
	   И Не ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("БанковскийСчетКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;
	
	Если УправлениеМетаданными.ЕстьРеквизит("ДоверенностьВыдана", МетаданныеДокумента) Тогда
		ДокументОбъект.ДоверенностьВыдана = ДокументОбъект.Контрагент.ДоверенностьВыдана;		
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ДоверенностьЧерезКого", МетаданныеДокумента) Тогда
		ДокументОбъект.ДоверенностьЧерезКого = ДокументОбъект.Контрагент.ДоверенностьЧерезКого;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ДоверенностьНомер", МетаданныеДокумента) Тогда
		ДокументОбъект.ДоверенностьНомер = ДокументОбъект.Контрагент.ДоверенностьНомер;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ДоверенностьДата", МетаданныеДокумента) Тогда
		ДокументОбъект.ДоверенностьДата = ДокументОбъект.Контрагент.ДоверенностьДата;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперацииВсехТабличныхЧастей(ДокументОбъект);
КонецПроцедуры

// Функция возвращает число рабочих дней между заданными датами по регламентированному производственному календарю
//
Функция ЧислоРабочихДней(ДатаНачала, ДатаКонца) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца",  ДатаКонца);
	Запрос.УстановитьПараметр("РабочийДень", Перечисления.ВидыДнейКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейКалендаря.Предпраздничный);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ЕстьNull(СУММА(ВЫБОР
	|			КОГДА ИсточникДанных.ВидДня = &РабочийДень
	|				ИЛИ ИсточникДанных.ВидДня = &ПредпраздничныйДень
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК ЧислоРабочихДней
	|ИЗ
	|	РегистрСведений.Календарь КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ЧислоРабочихДней, 0);
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////

// Функция формирует и выполняет запрос по спец. предложениям.
//
// Параметры:
//  ДатаДокумента - дата, на которую необходимо сформировать запрос.
//
// Возвращаемое значение:
//  ДеревоЗначений – дерево значений с актульными спец. предложениями и их комплектующими.
//
Функция ЗапросПоСпецПредложениям(ДатаДокумента, МассивПолучателей)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ДеньНедели", Перечисления.ДниНедели[ДеньНедели(ДатаДокумента) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя", Дата(1, 1, 1, Час(ДатаДокумента), Минута(ДатаДокумента), Секунда(ДатаДокумента)));
	Запрос.УстановитьПараметр("МассивПолучателей", МассивПолучателей);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецПредложения.Номенклатура КАК Номенклатура,
	|	СпецПредложения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СкидкиНатуральные.Качество КАК Качество,
	|	СпецПредложения.Комплектующая КАК Комплектующая,
	|	СпецПредложения.ХарактеристикаКомплектующей КАК ХарактеристикаКомплектующей,
	|	СпецПредложения.ЭтоБонус КАК ЭтоБонус,
	|	СпецПредложения.Количество КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СкидкиНатуральные.СпецПредложение КАК СпецПредложение,
	|		СкидкиНатуральные.ХарактеристикаСпецПредложения КАК ХарактеристикаСпецПредложения,
	|		СкидкиНатуральные.Качество КАК Качество,
	|		МАКСИМУМ(СкидкиНатуральные.Регистратор) КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата,
	|		   ПолучательСкидки В (&МассивПолучателей)) КАК СкидкиНатуральные
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|		ПО СкидкиНатуральные.Регистратор = ВремяДействия.Регистратор
	|	ГДЕ
	|		СкидкиНатуральные.СпецПредложение <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И (ВремяДействия.Регистратор Есть NULL
	|		ИЛИ (ВремяДействия.ДеньНедели = &ДеньНедели
	|		И &ТекущееВремя Между ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания
	|		И (СкидкиНатуральные.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СкидкиНатуральные.ДатаОкончания >= &Дата)))
	|	СГРУППИРОВАТЬ ПО
	|		СпецПредложение,
	|		ХарактеристикаСпецПредложения,
	|		Качество
	|	) КАК СкидкиНатуральные
	|СОЕДИНЕНИЕ
	|	РегистрСведений.СпецПредложения КАК СпецПредложения
	|	ПО СкидкиНатуральные.Регистратор = СпецПредложения.Регистратор
	|	И СкидкиНатуральные.СпецПредложение = СпецПредложения.Номенклатура
	|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = СпецПредложения.ХарактеристикаНоменклатуры
	|ИТОГИ
	|	МИНИМУМ(СпецПредложения.Комплектующая) КАК Комплектующая,
	|	МИНИМУМ(СпецПредложения.ХарактеристикаКомплектующей) КАК ХарактеристикаКомплектующей,
	|	МИНИМУМ(СпецПредложения.ЭтоБонус) КАК ЭтоБонус,
	|	СУММА(СпецПредложения.Количество) КАК Количество
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

// Проверяет табличную часть на возможность составить спец. предложения.
//
// Параметры:
//  ТоварыНазвание - название ТЧ "Товары" в документах продажи.
//  ДокументОбъект - документ-объект, из которого вызвана процедура
//  ТолькоСерые - переменная, куда функция вернет значение Истина,
//   если можно составить только "серые" комплекты.
//
// Возвращаемое значение:
//  Булево - Истина, если можно составить комплекты, в том числе "серые".
//
Функция ____ЕстьСпецПредложения(ТоварыНазвание, ДокументОбъект, ТолькоСерые, ВидРеализации) Экспорт

	МаксИНТ = 999999999999;

	Товары = ДокументОбъект[ТоварыНазвание];
	ТолькоСерые = Ложь;
	МожноСоставитьКомплекты = Ложь;

	//При работе с качеством будем поступать следующим образом:
	//Если в документе есть качество - то выполняем полноценную работу с качеством;
	//Если в документе качества нет - то бонусы ищем только с качеством <Новый>.
	ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", ДокументОбъект.Метаданные(), ТоварыНазвание);
	КачествоНовый = Справочники.Качество.Новый;

	//В ДеревоЗначений поместим все актуальные бонусные комплекты и их комплектующие.
	ДЗСпецПредложения = ЗапросПоСпецПредложениям(ДокументОбъект.Дата, ЦенообразованиеСервер.МассивПолучателейСкидки(ВидРеализации, ДокументОбъект));

	Для Каждого Комплект0 Из ДЗСпецПредложения.Строки Цикл // определена Номенклатура.
		Для Каждого Комплект1 Из Комплект0.Строки Цикл // определена Характеристика.
			Для Каждого Комплект Из Комплект1.Строки Цикл // определено Качество.
				ЕстьВсеКомплектующие = Истина;
				МаксКоличествоКомплектов = МаксИНТ;

				Для Каждого Комлектующие Из Комплект.Строки Цикл
					Если Не Комлектующие.ЭтоБонус Тогда
						Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
							СтруктураСтроки = Новый Структура;
							СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
							СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

							Если ЕстьКачество Тогда
								СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
							КонецЕсли;

							СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
						Иначе
							СтрокаТабличнойЧасти = Неопределено;
						КонецЕсли;

						Если СтрокаТабличнойЧасти <> Неопределено Тогда
							КолвоВЕдиницахХранения = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							МаксКоличествоКомплектов = Мин(МаксКоличествоКомплектов, Цел(КолвоВЕдиницахХранения/ Комлектующие.Количество));
						Иначе
							ЕстьВсеКомплектующие = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				//Если в ТЧ содержатся все комплектующие текущего комплекта,
				//и можно составить хотя бы один комплект - 
				//дальше считать нет смысла.
				Если ЕстьВсеКомплектующие И МаксКоличествоКомплектов > 0 Тогда
					ТолькоСерые = Ложь;
					Возврат Истина;
				ИначеЕсли МаксКоличествоКомплектов <> МаксИНТ Тогда //Серые бонусы
					МожноСоставитьКомплекты = Истина;
					ТолькоСерые = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат МожноСоставитьКомплекты;
КонецФункции

// Проверяет табличную часть на возможность составить спец. предложения.
//
// Параметры:
//  ТоварыНазвание - название ТЧ "Товары" в документах продажи.
//  ДокументОбъект - документ-объект, из которого вызвана процедура
//  ТолькоСерые - переменная, куда функция вернет значение Истина,
//   если можно составить только "серые" комплекты.
//
// Возвращаемое значение:
//  Булево - Истина, если можно составить комплекты, в том числе "серые".
//
Функция ЕстьСпецПредложения(ДокументОбъект, ТолькоСерые, ВидРеализации) Экспорт

	МаксИНТ=999999999999;
	ТолькоСерые=Ложь;
	МожноСоставитьКомплекты = Ложь;

	//При работе с качеством будем поступать следующим образом:
	//Если в документе есть качество - то выполняем полноценную работу с качеством;
	//Если в документе качества нет - то бонусы ищем только с качеством <Новый>.
	ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", ДокументОбъект.Метаданные(), "Товары");
	КачествоНовый = Справочники.Качество.Новый;

	//В ДеревоЗначений поместим все актуальные бонусные комплекты и их комплектующие.
	ДЗСпецПредложения=ЗапросПоСпецПредложениям(ДокументОбъект.Дата, ЦенообразованиеСервер.МассивПолучателейСкидки(ВидРеализации, ДокументОбъект));

	Для Каждого Комплект0 Из ДЗСпецПредложения.Строки Цикл // определена Номенклатура.
		Для Каждого Комплект1 Из Комплект0.Строки Цикл // определена Характеристика.
			Для Каждого Комплект Из Комплект1.Строки Цикл // определено Качество.
				ЕстьВсеКомплектующие = Истина;
				МаксКоличествоКомплектов = МаксИНТ;

				Для Каждого Комлектующие Из Комплект.Строки Цикл
					Если Не Комлектующие.ЭтоБонус Тогда
						Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
							СтруктураСтроки = Новый Структура;
							СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
							СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

							Если ЕстьКачество Тогда
								СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
							КонецЕсли;

							//*** МассивСтрок=ДокументОбъект["Товары"].НайтиСтроки(СтруктураСтроки);
							//*** СтрокаТабличнойЧасти=?(МассивСтрок.Количество()=0, Неопределено, МассивСтрок[0]);
							СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ДокументОбъект["Товары"], СтруктураСтроки);
						Иначе
							СтрокаТабличнойЧасти = Неопределено;
						КонецЕсли;

						Если СтрокаТабличнойЧасти <> Неопределено Тогда
							КолвоВЕдиницахХранения = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							МаксКоличествоКомплектов = Мин(МаксКоличествоКомплектов, Цел(КолвоВЕдиницахХранения/ Комлектующие.Количество));
						Иначе
							ЕстьВсеКомплектующие = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				//Если в ТЧ содержатся все комплектующие текущего комплекта,
				//и можно составить хотя бы один комплект - 
				//дальше считать нет смысла.
				Если ЕстьВсеКомплектующие И МаксКоличествоКомплектов > 0 Тогда
					ТолькоСерые = Ложь;
					Возврат Истина;
				ИначеЕсли МаксКоличествоКомплектов <> МаксИНТ Тогда //Серые бонусы
					МожноСоставитьКомплекты = Истина;
					ТолькоСерые = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат МожноСоставитьКомплекты;
КонецФункции

// Рассчитывает возможные натуральные скидки (бонусные комплекты).
// Если такие есть, то открывает форму для подбора бонусных комплектов.
//
// Параметры:
//  ТоварыНазвание - название ТЧ "Товары" в документах продажи.
//  ДокументОбъект - документ-объект, из которого вызвана процедура
//
Процедура РассчитатьНатуральныеСкидки(ТоварыНазвание, ДокументОбъект, ФормаДокумента, ВидРеализации) Экспорт

	МаксИНТ = 999999999999;

	Товары = ДокументОбъект[ТоварыНазвание];

	//При работе с качеством будем поступать следующим образом:
	//Если в документе есть качество - то выполняем полноценную работу с качеством;
	//Если в документе качества нет - то бонусы ищем только с качеством <Новый>.
	ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", ДокументОбъект.Метаданные(), ТоварыНазвание);
	КачествоНовый = Справочники.Качество.Новый;

	//В ДеревоЗначений поместим все актуальные бонусные комплекты и их комплектующие.
	ДЗСпецПредложения = ЗапросПоСпецПредложениям(ДокументОбъект.Дата, ЦенообразованиеСервер.МассивПолучателейСкидки(ВидРеализации, ДокументОбъект));

	НачатьВыборкуЗаново = Истина;
	Пока НачатьВыборкуЗаново Цикл
		НачатьВыборкуЗаново = Ложь;

		//Создадим ДеревоЗначений для хранения доступных бонусных комплектов.
		ДЗНовыеБонусы = Новый ДеревоЗначений;
		ДЗНовыеБонусы.Колонки.Добавить("Номенклатура");
		ДЗНовыеБонусы.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ДЗНовыеБонусы.Колонки.Добавить("Качество");
		ДЗНовыеБонусы.Колонки.Добавить("Количество");
		ДЗНовыеБонусы.Колонки.Добавить("Комплектующая");
		ДЗНовыеБонусы.Колонки.Добавить("ХарактеристикаКомплектующей");
		ДЗНовыеБонусы.Колонки.Добавить("ЭтоБонус");
		ДЗНовыеБонусы.Колонки.Добавить("СерыйБонус");
		ДЗНовыеБонусы.Колонки.Добавить("КоличествоЕсть");

		Для Каждого Комплект0 Из ДЗСпецПредложения.Строки Цикл // определена Номенклатура.
			Для Каждого Комплект1 Из Комплект0.Строки Цикл // определена Характеристика.
				Для Каждого Комплект Из Комплект1.Строки Цикл // определено Качество.
					ЕстьВсеКомплектующие = Истина;
					МаксКоличествоКомплектов = МаксИНТ;

					Для Каждого Комлектующие Из Комплект.Строки Цикл
						Если Не Комлектующие.ЭтоБонус Тогда
							Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
								СтруктураСтроки = Новый Структура;
								СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
								СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

								Если ЕстьКачество Тогда
									СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
								КонецЕсли;

								СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
							Иначе
								СтрокаТабличнойЧасти = Неопределено;
							КонецЕсли;

							Если СтрокаТабличнойЧасти <> Неопределено Тогда
								КолвоВЕдиницахХранения = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
								МаксКоличествоКомплектов = Мин(МаксКоличествоКомплектов, Цел(КолвоВЕдиницахХранения/ Комлектующие.Количество));
							Иначе
								ЕстьВсеКомплектующие = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					//Если в документе содержатся все комплектующие текущего комплекта,
					//и можно составить хотя бы один комплект - 
					//добавим комплект и его комплектующие в Дерево доступных бонусных комплектов.
					Если ЕстьВсеКомплектующие И МаксКоличествоКомплектов > 0 Тогда
						НовыйБонус = ДЗНовыеБонусы.Строки.Добавить();
						НовыйБонус.Номенклатура = Комплект.Номенклатура;
						НовыйБонус.ХарактеристикаНоменклатуры = Комплект.ХарактеристикаНоменклатуры;
						НовыйБонус.Качество = Комплект.Качество;
						НовыйБонус.Количество = МаксКоличествоКомплектов;
						НовыйБонус.СерыйБонус = Ложь;

						Для Каждого Комлектующие Из Комплект.Строки Цикл
							НовыйБонусКомплектующие = НовыйБонус.Строки.Добавить();
							НовыйБонусКомплектующие.Качество = Комлектующие.Качество;
							НовыйБонусКомплектующие.Количество = Комлектующие.Количество;
							НовыйБонусКомплектующие.Комплектующая = Комлектующие.Комплектующая;
							НовыйБонусКомплектующие.ХарактеристикаКомплектующей = Комлектующие.ХарактеристикаКомплектующей;
							НовыйБонусКомплектующие.ЭтоБонус = Комлектующие.ЭтоБонус;
							НовыйБонусКомплектующие.КоличествоЕсть = НовыйБонусКомплектующие.Количество;
						КонецЦикла;
					ИначеЕсли МаксКоличествоКомплектов <> МаксИНТ Тогда //Серые бонусы
						НовыйБонус = ДЗНовыеБонусы.Строки.Добавить();
						НовыйБонус.Номенклатура = Комплект.Номенклатура;
						НовыйБонус.ХарактеристикаНоменклатуры = Комплект.ХарактеристикаНоменклатуры;
						НовыйБонус.Качество = Комплект.Качество;
						НовыйБонус.Количество = 0;
						НовыйБонус.СерыйБонус = Истина;

						Для Каждого Комлектующие Из Комплект.Строки Цикл
							НовыйБонусКомплектующие = НовыйБонус.Строки.Добавить();
							НовыйБонусКомплектующие.Качество = Комлектующие.Качество;
							НовыйБонусКомплектующие.Количество = Комлектующие.Количество;
							НовыйБонусКомплектующие.Комплектующая = Комлектующие.Комплектующая;
							НовыйБонусКомплектующие.ХарактеристикаКомплектующей = Комлектующие.ХарактеристикаКомплектующей;
							НовыйБонусКомплектующие.ЭтоБонус = Комлектующие.ЭтоБонус;
							НовыйБонусКомплектующие.СерыйБонус = Истина;

							Если ЕстьКачество Или Комлектующие.Качество = КачествоНовый Тогда
								СтруктураСтроки = Новый Структура;
								СтруктураСтроки.Вставить("Номенклатура" , Комлектующие.Комплектующая);
								СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

								Если ЕстьКачество Тогда
									СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
								КонецЕсли;

								СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);
							Иначе
								СтрокаТабличнойЧасти = Неопределено;
							КонецЕсли;

							Если СтрокаТабличнойЧасти <> Неопределено Тогда
								НовыйБонусКомплектующие.КоличествоЕсть = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							Иначе
								НовыйБонусКомплектующие.КоличествоЕсть = 0;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		//Если есть доступные бонусные комплекты - откроем форму для выбора комплекта.
		Если ДЗНовыеБонусы.Строки.Количество() > 0 Тогда
			ФормаВыбораБонуса = ПолучитьОбщуюФорму("ВыборБонуснойНоменклатуры");
			ФормаВыбораБонуса.СпецПредложения = ДЗНовыеБонусы.Скопировать();

			ВыбранныйБонус = ФормаВыбораБонуса.ОткрытьМодально();

			//Если пользователь выбрал бонусный комплект,
			//то заменим комплектующие из таблицы документа этим комплектом,
			//иначе - вернемся в форму документа.
			Если ВыбранныйБонус <> Неопределено Тогда
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура"              , ВыбранныйБонус.Номенклатура);
				СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", ВыбранныйБонус.ХарактеристикаНоменклатуры);
				СтруктураСтроки.Вставить("Качество"                  , ВыбранныйБонус.Качество);

				МассивБонусов = ДЗНовыеБонусы.Строки.НайтиСтроки(СтруктураСтроки, Ложь);
				Бонус = МассивБонусов[0];

				Бонус.Количество = ВыбранныйБонус.ВыбранноеКоличество;

				//Уберем комплектующие бонусного комплекта из таблицы документа.
				Для Каждого Комлектующие Из Бонус.Строки Цикл
					Если Не Комлектующие.ЭтоБонус Тогда
						СтруктураСтроки = Новый Структура;
						СтруктураСтроки.Вставить("Номенклатура"              , Комлектующие.Комплектующая);
						СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Комлектующие.ХарактеристикаКомплектующей);

						Если ЕстьКачество Тогда
							СтруктураСтроки.Вставить("Качество" , Комлектующие.Качество);
						КонецЕсли;

						СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);

						//Переведем строку в количество за единицу хранения остатков.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество - Комлектующие.Количество * Бонус.Количество;

						//Если в строке количество стало нулевым, то строку надо удалить,
						//иначе - нужно вызвать обработчик события при изменении Количества.
						Если СтрокаТабличнойЧасти.Количество = 0 Тогда
							ФормаДокумента.УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти);
						Иначе
							ФормаДокумента.ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, "Количество");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("Номенклатура"              , Бонус.Номенклатура);
				СтруктураСтроки.Вставить("ХарактеристикаНоменклатуры", Бонус.ХарактеристикаНоменклатуры);

				Если ЕстьКачество Тогда
					СтруктураСтроки.Вставить("Качество", Бонус.Качество);
				КонецЕсли;

				НовыйБонус = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураСтроки);

				//Если такого бонусного комплекта в таблице документа нет, то добавим его,
				//иначе - просто увеличим количество.
				Если НовыйБонус=Неопределено Тогда
					НовыйБонус=Товары.Добавить();
					НовыйБонус.ID=Новый УникальныйИдентификатор;
					НовыйБонус.Номенклатура = Бонус.Номенклатура;
					НовыйБонус.ХарактеристикаНоменклатуры = Бонус.ХарактеристикаНоменклатуры;
					НовыйБонус.Количество = Бонус.Количество;
					НовыйБонус.ЕдиницаИзмерения = НовыйБонус.Номенклатура.ЕдиницаХраненияОстатков;

					Если ЕстьКачество Тогда
						НовыйБонус.Качество = Бонус.Качество;
					КонецЕсли;
				Иначе
					НовыйБонус.Количество = НовыйБонус.Количество + Бонус.Количество;
				КонецЕсли;

				//Нужно вызвать обработчик события при изменении Номенклатуры.
				ФормаДокумента.ИзменениеСтрокиПрограммное(НовыйБонус, "Номенклатура");

				//Запустим проверку на возможные бонусные комплекты еще раз.
				НачатьВыборкуЗаново = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
//ДЛЯ СОВМЕСТИМОСТИ С БУ

Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
		
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			ВидСравненияЗапроса = ПолучитьВидСравненияДляЗапроса(СтруктураОтбора);
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если (ДоговорКонтрагента.Владелец<>ВладелецДоговора ИЛИ ДоговорКонтрагента.Организация<>ОрганизацияДоговора) ИЛИ (не ЗначениеЗаполнено(ДоговорКонтрагента)) Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции 

Функция ПолучитьВидСравненияДляЗапроса(СтруктураОтбора)
	
	Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		Возврат "В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		Возврат "НЕ В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат ">";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат "<";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат "<=";
	Иначе // другие варианты 
		Возврат "=";
	КонецЕсли;

КонецФункции
