Функция СоответствиеТарифовЭквайринг(ДоговорЭквайринга) Экспорт
	СоответствиеТарифов=Новый Соответствие;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Тарифы.ВидОплаты КАК ВидОплаты,
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТарифов.Вставить(Выборка.ВидОплаты, Выборка.ПроцентТорговойУступки);
	КонецЦикла;

	Возврат СоответствиеТарифов;
КонецФункции

Функция ПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.УстановитьПараметр("ВидОплаты", ВидОплаты);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга И Тарифы.ВидОплаты = &ВидОплаты
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ПроцентТорговойУступки, 0);
КонецФункции

// Функция возвращает штрихкод для требуемой номенклатуры, 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  ТипШтрихкода                   - ссылка на элемент плана видов характеристик "ТипыШтрихкодов",
//  Владелец                       - ссылка на элемент справочника "Номенклатура",
//  ЕдиницаИзмерения               - ссылка на элемент справочника "Единицы измерения", определяет
//                                   для какой единицы надо получить штрихкод,
//  ХарактеристикаНоменклатуры     - ссылка на элемент справочника "Характеристики номенклатуры", определяет
//                                   для какой характеристики надо получить штрихкод,
//  СерияНоменклатуры              - ссылка на элемент справочника "Характеристики номенклатуры", определяет
//                                   для какой характеристики надо получить штрихкод,
//  КачествоНоменклатуры           - ссылка на элемент справочника "Характеристики номенклатуры", определяет
//                                   для какой характеристики надо получить штрихкод.
//
// Возвращаемое значение:
//  Строка таблицы значений - результата запроса.
//
Функция ШтрихКодНоменклатуры(Владелец, ЕдиницаИзмерения = Неопределено, ХарактеристикаНоменклатуры = Неопределено, СерияНоменклатуры = Неопределено, Качество = Неопределено) Экспорт
	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;

	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	Если СерияНоменклатуры = Неопределено Тогда
		СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	Если Качество = Неопределено Тогда
		Качество = Справочники.Качество.ПустаяСсылка();
	КонецЕсли;

	текТипШтрихкода=Неопределено;
	Если ТипЗнч(Владелец)=Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		текТипШтрихкода=Владелец.ТипШтрихКода;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"                  , Владелец);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СерияНоменклатуры"         , СерияНоменклатуры);
	Запрос.УстановитьПараметр("Качество"                  , Качество);
	Запрос.УстановитьПараметр("ТипШтрихкода"			  , текТипШтрихкода);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникДанных.ТипШтрихкода,
	|	ИсточникДанных.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Владелец = &Владелец
	|	И ИсточникДанных.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И ИсточникДанных.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И ИсточникДанных.СерияНоменклатуры = &СерияНоменклатуры
	|	И ИсточникДанных.Качество = &Качество
	|	"+?(НЕ текТипШтрихкода=Неопределено, "И ИсточникДанных.ТипШтрихкода = &ТипШтрихкода", "")+"
	|";
	Выборка=Запрос.Выполнить().Выгрузить();
	Возврат ?(Выборка.Количество()=0, Неопределено, Выборка[0]);
КонецФункции

// Функция осуществляет формирование нового внутреннего штрихкода для штучного товара
//
// Параметры
//  Код  – <Число> 
//       – Измерение "Код" регистра сведений Штрихкоды
//
// Возвращаемое значение:
//  <Строка>
//       – сформированный штрихкод
//
Функция СформироватьШтрихКод(Знач ПрефиксШтучногоТовара = Неопределено, Знач ПрефиксВнутреннегоШтрихкода = Неопределено) Экспорт
	Если ПрефиксШтучногоТовара = Неопределено Тогда
		ПрефиксШтучногоТовара = СокрЛП(Константы.ПрефиксШтучногоТовара.Получить());
	КонецЕсли;

	Если ПрефиксВнутреннегоШтрихкода = Неопределено Тогда
		ПрефиксВнутреннегоШтрихкода = Константы.ПрефиксВнутреннегоШтрихкода.Получить();
	КонецЕсли;

	ПрефиксШтучногоТовара = ?(ПустаяСтрока(ПрефиксШтучногоТовара), "0", ПрефиксШтучногоТовара);
	ПрефиксВнутреннегоШтрихкода = Формат(ПрефиксВнутреннегоШтрихкода, "ЧЦ=2; ЧН=; ЧВН=");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(ИсточникДанных.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
	|	И ИсточникДанных.Штрихкод ПОДОБНО ""2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + "[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]""
	|");

	Выборка=Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТекКод=?(Выборка.Код=NULL, 1, Мин(Число(Выборка.Код)+1, 99999999));

	Штрихкод="2"+ПрефиксШтучногоТовара+ПрефиксВнутреннегоШтрихкода+Формат(ТекКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод=Штрихкод+КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;
КонецФункции

// Процедура проверяет тип карты в строках переданной ТЧ.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа.
//  ИмяТабличнойЧасти - имя ТЧ документа.
//  ТаблицаЗначений - таблица значений или ТЧ, в которой нужно выполнить проверку.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//  ТипОплаты - нужный тип оплаты.
//
Процедура ПроверитьКорректностьТипаКартыВТЧ(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, Отказ, Заголовок, ТипОплаты) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	СтруктураСложныхКритериев=Новый Структура;
	СтруктураСложныхКритериев.Вставить("ТипОплаты", ВидСравнения.НеРавно);

	Выборка=ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаЗначений, Новый Структура("ТипОплаты", ТипОплаты), СтруктураСложныхКритериев).Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНачалаСообщенияОбОшибке="В строке номер """+СокрЛП(Выборка.НомерСтроки)+""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+"Выбран вид оплаты неверного типа!", Отказ, Заголовок);
	КонецЦикла;

КонецПроцедуры

// Процедура проверяет корректность информационной карты. Если тип карты некорректен, то он очищается,
// и выдается соответствующее сообщение.
//
// Параметры:
//  ИнформационнаяКарта - информационная карта, который нужно проверить.
//  ТипКарты - нужный тип карты.
//
Процедура ПроверитьКорректностьИнформационнойКарты(ИнформационнаяКарта, ТипКарты) Экспорт

	Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
		Если ИнформационнаяКарта.ТипКарты <> ТипКарты Тогда
			Сообщить("В данном контексте можно выбирать только дисконтные карты.");
			ИнформационнаяКарта = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет тип оплаты в строках переданной ТЧ.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа.
//  ИмяТабличнойЧасти - имя ТЧ документа.
//  ТаблицаЗначений - таблица значений или ТЧ, в которой нужно выполнить проверку.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//  ТипОплаты - нужный тип оплаты.
//
Процедура ПроверитьКорректностьТипаОплатыВТЧ(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, Отказ, Заголовок, ТипОплаты) Экспорт

	ПредставлениеТабличнойЧасти=ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	СтруктураСложныхКритериев=Новый Структура;
	СтруктураСложныхКритериев.Вставить("ТипОплаты", ВидСравнения.НеРавно);

	Выборка=ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаЗначений, Новый Структура("ТипОплаты", ТипОплаты), СтруктураСложныхКритериев).Выбрать();
	Пока Выборка.Следующий() Цикл
		стрСообщение="В строке номер """+СокрЛП(Выборка.НомерСтроки)+""" табличной части """+ПредставлениеТабличнойЧасти+""": ";
		ОбщегоНазначения.СообщитьОбОшибке(стрСообщение+"Выбран вид оплаты неверного типа!", Отказ, Заголовок);
	КонецЦикла;

КонецПроцедуры

// Процедура проверяет корректность вида оплаты. Если вид оплаты некорректен, то он очищается,
// и выдается соответствующее сообщение.
//
// Параметры:
//  ВидОплаты - Вид оплаты, который нужно проверить.
//  ТипОплаты - Нужный тип оплаты.
//
Процедура ПроверитьКорректностьВидаОплаты(ВидОплаты, ТипОплаты) Экспорт

	Если ЗначениеЗаполнено(ВидОплаты) Тогда
		Если ВидОплаты.ТипОплаты <> ТипОплаты Тогда
			ВидОплаты = Неопределено;
			ТекстСообщения = "В данном контексте можно выбирать только вид оплаты с типом """ + ТипОплаты + """.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает в виде соответствия тарифы торговой уступки по договору эквайринга.
//
// Параметры:
//  ДоговорЭквайринга - нужный договор эквайринга.
//
// Возвращаемое значение:
//  Соответствие - соответствие тарифов торговой уступки.
//
Функция СформироватьСоответствиеТарифовЭквайринг(ДоговорЭквайринга) Экспорт
	СоответствиеТарифов=Новый Соответствие;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Тарифы.ВидОплаты КАК ВидОплаты,
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТарифов.Вставить(Выборка.ВидОплаты, Выборка.ПроцентТорговойУступки);
	КонецЦикла;

	Возврат СоответствиеТарифов;
КонецФункции

// Функция возвращает процент торговой уступки для переданных
// договора эквайринга и вида оплаты.
//
// Параметры:
//  ДоговорЭквайринга - договор эквайринга, по которому нужно получить % торговой уступки.
//  ВидОплаты - вид оплаты, для которого  нужно получить % торговой уступки.
//
// Возвращаемое значение:
//  Число. Процент торговой уступки. 0 - если не найден.
//
Функция ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.УстановитьПараметр("ВидОплаты", ВидОплаты);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга И Тарифы.ВидОплаты = &ВидОплаты
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ПроцентТорговойУступки, 0);
КонецФункции

// Рассчитывает величину розничной цены по цене поставки и проценту розничной наценки.
// Розничная цена всегда в рублях и со всеми налогами. 
// Получается из цены поставки, увеличенной на процент розничной наценки, 
// пересчитанной в рубли, увеличенной при необходимости на величину налогов, 
// округленной по параметрам округления розничного типа цен.
//
// Параметры: 
//  ЦенаПоставки                   - число, цена поставки, по которой надо рассчитать розничную цену;
//  ВалютаПоставки                 - ссылка на справочник, определяет валюту цены поставки,
//                                   из которой надо рассчитать розничную цену;
//  КурсПоставки                   - число, курс валюты, в которой задана цена поставки;
//  КратностьПоставки              - число, кратность валюты, в которой задана цена поставки;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПроцентРозничнойНаценки        - число, процент розничной наценки на цену поставки;
//  ЦенаПоставкиВключаетНДС        - булево, признак того, что в цену поставки включен НДС;
//  СтавкаНДС                      - число, определяет ставку НДС в цене поставки;
//  ТипЦенРозничнойТорговли        - ссылка на справочник, определяет тип розничной цены.
//  ЕдиницаЦены                    - ссылка на элемент справочника "Единицы измерения",
//                                   определяет для какой единицы указана цена,
//  ЕдиницаХранения                - ссылка на элемент справочника "Единицы измерения",
//                                   определяет единицу хранения номенклатуры,
// 
// Возвращаемое значение:
//  Рассчитанное значение розничной цены.
//
Функция РассчитатьРозничнуюЦену(ЦенаПоставки, ВалютаПоставки, КурсПоставки,КратностьПоставки,
	                            ВалютаРегламентированногоУчета, ПроцентРозничнойНаценки,
	                            ЦенаПоставкиВключаетНДС, СтавкаНДС,
	                            ТипЦенРозничнойТорговли, ЕдиницаЦены, ЕдиницаХранения) Экспорт

	// Увеличиваем на процент розничной наценки.
	РозничнаяЦена = ЦенаПоставки * (100 + ПроцентРозничнойНаценки) / 100;

	// Пересчитаем цену из единицы цены в единицу хранения остатков.
	РозничнаяЦена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииЕдиницы(РозничнаяЦена, ЕдиницаЦены, ЕдиницаХранения);

	// Пересчитываем в рубли.
	РозничнаяЦена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(РозничнаяЦена, ВалютаПоставки, ВалютаРегламентированногоУчета, КурсПоставки, 1, КратностьПоставки);

	// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
	РозничнаяЦена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(РозничнаяЦена, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, ЦенаПоставкиВключаетНДС, Истина, Истина, СтавкаНДС);

	// Округляем по параметрам округления розничного типа цен.
	Если НЕ ЗначениеЗаполнено(ТипЦенРозничнойТорговли) Тогда
		ПорядокОкругления        = Перечисления.ПорядкиОкругления.Окр0_01;
		ОкруглятьВБольшуюСторону = Ложь;
	Иначе
		ПорядокОкругления        = ТипЦенРозничнойТорговли.ПорядокОкругления;
		ОкруглятьВБольшуюСторону = ТипЦенРозничнойТорговли.ОкруглятьВБольшуюСторону
	КонецЕсли;
	РозничнаяЦена = ЦенообразованиеСервер.ОкруглитьЦену(РозничнаяЦена, ПорядокОкругления, ОкруглятьВБольшуюСторону);

	Возврат РозничнаяЦена;
КонецФункции

// Процедура проверяет уникальность кода магнитной карты
//
// Параметры:
//  Форма                       - форма документа, в которую пришло событие от считывателя магнитных карт
//  ДокументОбъект              - объект документа, в форму которого пришло событие от считывателя магнитных карт
//  СтруктураИсходныхПараметров - структура параметров, переданных из формы
//  Данные                      - данные считывателя магнитных карт
//
Функция ПроверитьУникальностьМагнитногоКода(Данные, Карта) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КодКарты", Данные);
	Запрос.УстановитьПараметр("Карта", Карта);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИнформационныеКарты.КодКарты,
	|	ИнформационныеКарты.Ссылка КАК Карта,
	|	Ложь КАК ЭтоПрефиксКода
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|
	|ГДЕ
	|	ИнформационныеКарты.Ссылка <> &Карта И (ИнформационныеКарты.КодКарты  = &КодКарты)
	|	И НЕ ИнформационныеКарты.ЭтоПрефиксКода
	|";
	Карты=Запрос.Выполнить().Выгрузить();

	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИнформационныеКарты.КодКарты,
	|	ИнформационныеКарты.Ссылка КАК Карта,
	|	Истина КАК ЭтоПрефиксКода
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|
	|ГДЕ
	|	ИнформационныеКарты.Ссылка <> &Карта И ИнформационныеКарты.ЭтоПрефиксКода
	|";
	КартыСПрефиксом=Запрос.Выполнить().Выгрузить();

	Для Каждого ТекущаяКарта Из КартыСПрефиксом Цикл
		Если Лев(Данные, СтрДлина(ТекущаяКарта.КодКарты)) = ТекущаяКарта.КодКарты Тогда
			СтрокаКарт=Карты.Добавить();
			СтрокаКарт.КодКарты = ТекущаяКарта.КодКарты;
			СтрокаКарт.Карта = ТекущаяКарта.Карта;
			СтрокаКарт.ЭтоПрефиксКода = ТекущаяКарта.ЭтоПрефиксКода;
		КонецЕсли;
	КонецЦикла;

	Возврат Карты;
КонецФункции

// Проверка наличия в передаваемот штрихкоде только цифр
//
// Параметры:
//  ШтрихКод     - проверяемый штрихкод
//
// Возвращаемое значение:
//  Истина если штрих код только из цифр, иначе Ложь
//
Функция ТолькоЦифры(Штрихкод)

	Для Сч = 1 По СтрДлина(Штрихкод) Цикл
		Символ = Сред(Штрихкод, Сч, 1);
		Если НЕ(Найти("0123456789", Символ)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции

// Проверка штрихкода на корректность
//
// Параметры:
//  ШтрихКод     - проверяемый штрихкод;
//  ТипШтрихкода - элемент плана видов характеристик "ТипыШтрихкодов", содержит тип
//                 проверяемого штрихкода.
//
// Возвращаемое значение:
//  Истина если штрих код корректен, иначе Ложь
//
Функция ПроверитьШтрихКод(ШтрихКод, ТипШтрихкода) Экспорт
	ДлинаКода=СтрДлина(Штрихкод);
	Если ДлинаКода=0 Тогда Возврат Ложь; КонецЕсли;

	Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		Если (ДлинаКода <> 13)
			Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			Или КонтрольныйСимволEAN(Лев(Штрихкод,12), 13) <> Прав(Штрихкод, 1) Тогда
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8 Тогда
		Если (ДлинаКода <> 8)
			Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			Или КонтрольныйСимволEAN(Лев(Штрихкод, 7), 8 ) <> Прав(Штрихкод, 1) Тогда
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39 Тогда
		Условие = СтрДлина(ШтрихКод) - 1;
		Для Индекс = 0 По Условие Цикл
			Символ = Лев(Прав(Штрихкод, Условие - Индекс + 1), 1);
			Если НЕ (((Символ >= "0") И (Символ <= "9"))
				ИЛИ	((Символ >= "A") И (Символ <= "Z"))
				ИЛИ (Символ = "-")
				ИЛИ (Символ = ".")
				ИЛИ (Символ = " ")
				ИЛИ (Символ = "$")
				ИЛИ (Символ = "/")
				ИЛИ (Символ = "+")
				ИЛИ (Символ = "%")
				ИЛИ (Символ = "*")) Тогда
				Возврат Ложь;
			КонецЕсли
		КонецЦикла;

	ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code128 
		ИЛИ ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
		Условие = СтрДлина(ШтрихКод) - 1;
		Для Индекс = 0 По Условие Цикл
			Если КодСимвола(ШтрихКод, Индекс) > 127 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Функция определяет доступное значение кода для заданного регистра сведений
//
// Параметры
//  ИмяРегистра – <Строка> 
//              – имя регистра сведений, для которого определяется
//                доступное значение кода
//
// Возвращаемое значение:
//   <Число>    – значение, которое может быть использовано для новой
//                записи регистра сведений в качестве кода
//
Функция ПолучитьНовыйКодДляРегистраСведений(ИмяРегистра) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(Регистр.Код) КАК Код
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК Регистр");
	Выборка=Запрос.Выполнить().Выбрать();
	
	Результат=1;
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.Код) Тогда
			Результат=Выборка.Код+1;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции
