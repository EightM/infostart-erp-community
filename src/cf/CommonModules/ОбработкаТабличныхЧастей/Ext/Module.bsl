Процедура ЗаполнитьСерии(ДокументОбъект, ИмяТабличнойЧасти="Товары", НаДату=Неопределено) Экспорт
	мдОбъект=ДокументОбъект.Метаданные();
	тзТовары=ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонки();
	Если УправлениеМетаданными.ЕстьРеквизит("Склад", мдОбъект, ИмяТабличнойЧасти) Тогда
		Склад=ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Склад")
	ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("Размещение", мдОбъект, ИмяТабличнойЧасти) Тогда
		Склад=ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Размещение")
	ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("СкладОтправитель", мдОбъект) Тогда
		Склад=ДокументОбъект.СкладОтправитель;
	Иначе
		МассивСкладов=Новый Массив;
		МассивСкладов.Добавить(ДокументОбъект.Склад);
	КонецЕсли; 
		
	ЕстьСклад=УправлениеМетаданными.ЕстьРеквизит("Склад", мдОбъект, ИмяТабличнойЧасти);
	ЕстьСуммаНДС=УправлениеМетаданными.ЕстьРеквизит("СуммаНДС", мдОбъект, ИмяТабличнойЧасти);
	ЕстьКоличествоМест=УправлениеМетаданными.ЕстьРеквизит("КоличествоМест", мдОбъект, ИмяТабличнойЧасти);
	ЕстьСумма=УправлениеМетаданными.ЕстьРеквизит("Сумма", мдОбъект, ИмяТабличнойЧасти);
	Если НаДату=Неопределено Тогда
		НаДату=?(ДокументОбъект.ЭтоНовый(), ДокументОбъект.Дата, ДокументОбъект.МоментВремени());
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Номенклатура", ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура"));	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИсточникДанных.Склад,
	|	СУММА(ИсточникДанных.КоличествоОстаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникДанных1.Номенклатура КАК Номенклатура,
	|		ИсточникДанных1.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ИсточникДанных1.Склад КАК Склад,
	|		ИсточникДанных1.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Дата, Организация = &Организация И Склад В (&Склад) И Номенклатура В (&Номенклатура)) КАК ИсточникДанных1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникДанных1.Номенклатура,
	|		ИсточникДанных1.СерияНоменклатуры,
	|		ИсточникДанных1.Склад,
	|		-ИсточникДанных1.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.УчетРезервовТМЦ.Остатки(&Дата, Организация = &Организация	И Склад В (&Склад) И Номенклатура В (&Номенклатура)) КАК ИсточникДанных1
	|
	|	) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.СерияНоменклатуры,
	|	ИсточникДанных.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерияНоменклатуры Убыв
	|";
	тзДанныеЗапроса=Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаКоллекции1 Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
		Если Не СтрокаКоллекции1.СерияНоменклатуры.Пустая() Тогда
			ЗаполнитьЗначенияСвойств(тзТовары.Добавить(), СтрокаКоллекции1);
			Продолжить;
		КонецЕсли; //Пропускаем строчки с заполненными сериями
		КоличествоПоСтроке=СтрокаКоллекции1.Количество;

		Для каждого СтрокаКоллекции2 Из тзДанныеЗапроса Цикл
			Если КоличествоПоСтроке <= 0 Тогда Продолжить; КонецЕсли;
			Если СтрокаКоллекции2.Остаток <= 0 Тогда Продолжить; КонецЕсли;
			Если НЕ СтрокаКоллекции1.Номенклатура=СтрокаКоллекции2.Номенклатура Тогда Продолжить; КонецЕсли;
			Если ЕстьСклад Тогда
				Если НЕ СтрокаКоллекции1.Склад=СтрокаКоллекции2.Склад Тогда Продолжить; КонецЕсли;
			КонецЕсли;			

			Если КоличествоПоСтроке > СтрокаКоллекции2.Остаток Тогда
				Количество=СтрокаКоллекции2.Остаток;
				КоличествоПоСтроке=КоличествоПоСтроке - СтрокаКоллекции2.Остаток;
				СтрокаКоллекции2.Остаток=0;
			Иначе
				Количество=КоличествоПоСтроке;
				СтрокаКоллекции2.Остаток=СтрокаКоллекции2.Остаток - КоличествоПоСтроке;
				КоличествоПоСтроке=0;
			КонецЕсли; 
			
			НоваяСтрока=тзТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.СерияНоменклатуры=СтрокаКоллекции2.СерияНоменклатуры;
			НоваяСтрока.Количество=Количество;
			Если ЕстьСумма Тогда
				НоваяСтрока.Сумма=СтрокаКоллекции1.Сумма*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;			
			Если ЕстьСуммаНДС Тогда
				НоваяСтрока.СуммаНДС=СтрокаКоллекции1.СуммаНДС*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;
			Если ЕстьКоличествоМест Тогда
				НоваяСтрока.КоличествоМест=СтрокаКоллекции1.КоличествоМест*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;			
		КонецЦикла;	
		
		// если не хватило партий
		Если КоличествоПоСтроке > 0 Тогда
			Количество=КоличествоПоСтроке;
			
			НоваяСтрока=тзТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.СерияНоменклатуры=Справочники.СерииНоменклатуры.ПустаяСсылка(); // с пустой серией
			НоваяСтрока.Количество=Количество;
			Если ЕстьСумма Тогда
				НоваяСтрока.Сумма=СтрокаКоллекции1.Сумма*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;			
			Если ЕстьСуммаНДС Тогда
				НоваяСтрока.СуммаНДС=СтрокаКоллекции1.СуммаНДС*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;
			Если ЕстьКоличествоМест Тогда
				НоваяСтрока.КоличествоМест=СтрокаКоллекции1.КоличествоМест*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДокументОбъект[ИмяТабличнойЧасти].Загрузить(тзТовары);
КонецПроцедуры

Процедура ЗаполнитьХарактеристики(ДокументОбъект, ИмяТабличнойЧасти="Товары", НаДату=Неопределено) Экспорт
	мдОбъект=ДокументОбъект.Метаданные();
	тзТовары=ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонки();
	Если УправлениеМетаданными.ЕстьРеквизит("Склад", мдОбъект, ИмяТабличнойЧасти) Тогда
		Склад=ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Склад")
	ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("Размещение", мдОбъект, ИмяТабличнойЧасти) Тогда
		Склад=ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Размещение")
	ИначеЕсли УправлениеМетаданными.ЕстьРеквизит("СкладОтправитель", мдОбъект) Тогда
		Склад=ДокументОбъект.СкладОтправитель;
	Иначе
		МассивСкладов=Новый Массив;
		МассивСкладов.Добавить(ДокументОбъект.Склад);
	КонецЕсли; 
		
	ЕстьСклад=УправлениеМетаданными.ЕстьРеквизит("Склад", мдОбъект, ИмяТабличнойЧасти);
	ЕстьСуммаНДС=УправлениеМетаданными.ЕстьРеквизит("СуммаНДС", мдОбъект, ИмяТабличнойЧасти);
	ЕстьКоличествоМест=УправлениеМетаданными.ЕстьРеквизит("КоличествоМест", мдОбъект, ИмяТабличнойЧасти);
	ЕстьСумма=УправлениеМетаданными.ЕстьРеквизит("Сумма", мдОбъект, ИмяТабличнойЧасти);
	Если НаДату=Неопределено Тогда
		НаДату=?(ДокументОбъект.ЭтоНовый(), ДокументОбъект.Дата, ДокументОбъект.МоментВремени());
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Номенклатура", ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура"));	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИсточникДанных.Склад,
	|	СУММА(ИсточникДанных.КоличествоОстаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникДанных1.Номенклатура КАК Номенклатура,
	|		ИсточникДанных1.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ИсточникДанных1.Склад КАК Склад,
	|		ИсточникДанных1.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Дата, Организация = &Организация И Склад В (&Склад) И Номенклатура В (&Номенклатура)) КАК ИсточникДанных1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникДанных1.Номенклатура,
	|		ИсточникДанных1.ХарактеристикаНоменклатуры,
	|		ИсточникДанных1.Склад,
	|		-ИсточникДанных1.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.УчетРезервовТМЦ.Остатки(&Дата, Организация = &Организация	И Склад В (&Склад) И Номенклатура В (&Номенклатура)) КАК ИсточникДанных1
	|
	|	) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаНоменклатуры Убыв
	|";
	тзДанныеЗапроса=Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаКоллекции1 Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
		Если Не СтрокаКоллекции1.ХарактеристикаНоменклатуры.Пустая() Тогда
			ЗаполнитьЗначенияСвойств(тзТовары.Добавить(), СтрокаКоллекции1);
			Продолжить;
		КонецЕсли; //Пропускаем строчки с заполненными сериями
		КоличествоПоСтроке=СтрокаКоллекции1.Количество;

		Для каждого СтрокаКоллекции2 Из тзДанныеЗапроса Цикл
			Если КоличествоПоСтроке <= 0 Тогда Продолжить; КонецЕсли;
			Если СтрокаКоллекции2.Остаток <= 0 Тогда Продолжить; КонецЕсли;
			Если НЕ СтрокаКоллекции1.Номенклатура=СтрокаКоллекции2.Номенклатура Тогда Продолжить; КонецЕсли;
			Если ЕстьСклад Тогда
				Если НЕ СтрокаКоллекции1.Склад=СтрокаКоллекции2.Склад Тогда Продолжить; КонецЕсли;
			КонецЕсли;			

			Если КоличествоПоСтроке > СтрокаКоллекции2.Остаток Тогда
				Количество=СтрокаКоллекции2.Остаток;
				КоличествоПоСтроке=КоличествоПоСтроке - СтрокаКоллекции2.Остаток;
				СтрокаКоллекции2.Остаток=0;
			Иначе
				Количество=КоличествоПоСтроке;
				СтрокаКоллекции2.Остаток=СтрокаКоллекции2.Остаток - КоличествоПоСтроке;
				КоличествоПоСтроке=0;
			КонецЕсли; 
			
			НоваяСтрока=тзТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.ХарактеристикаНоменклатуры=СтрокаКоллекции2.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество=Количество;
			Если ЕстьСумма Тогда
				НоваяСтрока.Сумма=СтрокаКоллекции1.Сумма*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;			
			Если ЕстьСуммаНДС Тогда
				НоваяСтрока.СуммаНДС=СтрокаКоллекции1.СуммаНДС*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;
			Если ЕстьКоличествоМест Тогда
				НоваяСтрока.КоличествоМест=СтрокаКоллекции1.КоличествоМест*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;			
		КонецЦикла;	
		
		// если не хватило партий
		Если КоличествоПоСтроке > 0 Тогда
			Количество=КоличествоПоСтроке;
			
			НоваяСтрока=тзТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); // с пустой серией
			НоваяСтрока.Количество=Количество;
			Если ЕстьСумма Тогда
				НоваяСтрока.Сумма=СтрокаКоллекции1.Сумма*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;			
			Если ЕстьСуммаНДС Тогда
				НоваяСтрока.СуммаНДС=СтрокаКоллекции1.СуммаНДС*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;
			Если ЕстьКоличествоМест Тогда
				НоваяСтрока.КоличествоМест=СтрокаКоллекции1.КоличествоМест*Количество/СтрокаКоллекции1.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДокументОбъект[ИмяТабличнойЧасти].Загрузить(тзТовары);
КонецПроцедуры
 
Процедура ЗаполнитьПоДокументу(Объект, Форма, стрТабличнаяЧасть, ОчиститьТабличнуюЧасть=Ложь) Экспорт
	тчПриемник=Объект[стрТабличнаяЧасть];
	Если ОчиститьТабличнуюЧасть Тогда
		тчПриемник.Очистить();	
	КонецЕсли;

	спДокументы=Новый СписокЗначений;
	Для каждого мдОбъект Из Метаданные.Документы Цикл
		Если НЕ мдОбъект.ТабличныеЧасти.Найти(стрТабличнаяЧасть)=Неопределено Тогда
			спДокументы.Добавить(мдОбъект.Имя, мдОбъект.Представление());
		КонецЕсли;
	КонецЦикла;
	Если спДокументы.Количество()=0 Тогда Возврат; КонецЕсли;

	ЭлементВыбора=спДокументы.ВыбратьЭлемент("Укажите документ");
	Если ЭлементВыбора=Неопределено Тогда Возврат; КонецЕсли;
	
	ДокументИсточник=Документы[ЭлементВыбора.Значение].ПолучитьФормуВыбора().ОткрытьМодально();
	Если ДокументИсточник=Неопределено Тогда Возврат; КонецЕсли; 
	
	тчИсточник=ДокументИсточник[стрТабличнаяЧасть];

	мдОбъект=Объект.Метаданные(); СтруктураПараметров=Новый Структура("СтрокаТабличнойЧастиПрограмно", Неопределено);
	ЕстьРеквизит_ID=НЕ мдОбъект.ТабличныеЧасти[стрТабличнаяЧасть].Реквизиты.Найти("ID")=Неопределено;
	ЕстьРеквизит_ЗаказПокупателя=НЕ мдОбъект.ТабличныеЧасти[стрТабличнаяЧасть].Реквизиты.Найти("ЗаказПокупателя")=Неопределено;

	Для каждого СтрокаКоллекции Из тчИсточник Цикл
		НоваяСтрока=тчПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если ЕстьРеквизит_ЗаказПокупателя Тогда
			НоваяСтрока.ЗаказПокупателя=ДокументИсточник;
		КонецЕсли;
		Если ЕстьРеквизит_ID Тогда
			НоваяСтрока.ID=Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт

	ИмяТабличнойЧасти = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяЕдиницыИзмерения, МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения].Владелец Тогда
		СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	КонецЕсли;

	// При изменении номенклатуры очистим единицу мест
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.СерияНоменклатуры = Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтатьяЗатрат", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ЕСли СтрокаТабличнойЧасти.СтатьяЗатрат.Пустая() Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НоменклатурнаяГруппа", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если СтрокаТабличнойЧасти.НоменклатурнаяГруппа.Пустая() Тогда
			стрАтрибут="НоменклатурнаяГруппа"+?(МетаданныеДокумента.ПолноеИмя()="Документ.ТребованиеНакладная", "Затрат", "");
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура[стрАтрибут];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет стандартные действия при изменении единицы цены
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			Иначе
				СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
				НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

				СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;

				Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента И СтароеЗначениеКоэффициента <> 0 Тогда
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
						СтрокаТабличнойЧасти.Количество  = СтрокаТабличнойЧасти.Количество * СтароеЗначениеКоэффициента / НовоеЗначениеКоэффициента;
					КонецЕсли;

					РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена *НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
							 |Пересчет количества невозможен.");
		Иначе
			СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
			НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;

			Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда

				// если в табличной части есть реквизит КоличествоМест, то цена задается не за ЕдиницуИзмерения,
				// а за базовую единицу хранения остатков. Т.е. цену пересчитывать не нужно
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					// надо обновить изменение к-ва в документе
					РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				Иначе
					// ПересчитатьЦену
					Если СтароеЗначениеКоэффициента > 0
						И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Коэффициент 
						/ СтароеЗначениеКоэффициента;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет стандартные действия при изменении единицы мест в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	// Рассчитывает количество мест исходя из количества
	РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
КонецПроцедуры

// Процедура выполняет стандартные действия при изменении суммы в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти                             - строка табличной части документа,
//  ДокументОбъект                                   - объект редактируемого документа,
//  ТекПользователь                                  - ссылка на текущего пользователя,
//  РасчетАвтоматическихСкидок                       - признак необходимости Расчета автоматических скидок,
//  ЕстьРеквизитДокументаПроцентСкидкиНаценки        - признак наличия в табличной части документа процента скидки (наценки), 
//  ПересчитыватьСкидкуДокумента                     - признак необходимости пересчета скидки для данного пользователя,
//  ЕстьРеквизитДокументаПроцентАвтоматическихСкидок - признак наличия в документе реквизита ПроцентАвтоматическихСкидок,
//  ИмяТабЧастиДокумента                             - имя табличной части.
//
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, РасчетАвтоматическихСкидок = Ложь, 
                                    ЕстьРеквизитДокументаПроцентСкидкиНаценки = Неопределено, 
                                    ПересчитыватьСкидкуДокумента = Неопределено, 
                                    ЕстьРеквизитДокументаПроцентАвтоматическихСкидок = Неопределено, 
                                    ИмяТабЧастиДокумента = Неопределено) Экспорт

	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяТабличнойЧасти = ?(ИмяТабЧастиДокумента = Неопределено, УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти), ИмяТабЧастиДокумента);

	КоличествоДок=?(УправлениеМетаданными.ЕстьРеквизит("Количество", МетаданныеДокумента, ИмяТабличнойЧасти), СтрокаТабличнойЧасти.Количество, 1);
	Если КоличествоДок=0 Тогда СтрокаТабличнойЧасти.Цена = 0; Возврат; КонецЕсли;
	
	ЕстьРеквизитЦена = УправлениеМетаданными.ЕстьРеквизит("Цена", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЦенаДок=?(ЕстьРеквизитЦена, СтрокаТабличнойЧасти.Цена, 1);

	ЕстьРеквизитПроцентСкидкиНаценки = ?(ЕстьРеквизитДокументаПроцентСкидкиНаценки = Неопределено, ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти), ЕстьРеквизитДокументаПроцентСкидкиНаценки);

	Если ЕстьРеквизитПроцентСкидкиНаценки Тогда
		ПересчитыватьСкидку = ?(ПересчитыватьСкидкуДокумента = Неопределено, 
		УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку"),
		ПересчитыватьСкидкуДокумента);
		
		ЕстьРеквизитПроцентАвтоматическихСкидок = ?( ЕстьРеквизитДокументаПроцентАвтоматическихСкидок = Неопределено,
		ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", 
		МетаданныеДокумента, ИмяТабличнойЧасти),
		ЕстьРеквизитДокументаПроцентАвтоматическихСкидок);
		
		Если ПересчитыватьСкидку Тогда
			Если (ЦенаДок = 0) Или (КоличествоДок = 0) Тогда
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
				Если ЦенаДок = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Цена равна 0, после изменения суммы установлена нулевая скидка!");
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Количество равно 0, после изменения суммы установлена нулевая скидка!");
				КонецЕсли;
			Иначе
				СуммаСоСкидками = СтрокаТабличнойЧасти.Сумма;
				СуммаБезСкидок  = ЦенаДок * КоличествоДок;
				ПроцентСкидки   = 100 - (СуммаСоСкидками * 100) / СуммаБезСкидок;
				ПроцентАвтоматическихСкидок = 0;
				Если ЕстьРеквизитПроцентАвтоматическихСкидок Тогда
					ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
				КонецЕсли;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки - ПроцентАвтоматическихСкидок;
			КонецЕсли;
		Иначе
			Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки >= 100 Тогда
				Если ЕстьРеквизитЦена Тогда СтрокаТабличнойЧасти.Цена = 0; КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке("Скидка равна 100%, после изменения суммы установлена нулевая цена!");
			Иначе
				ПроцентАвтоматическихСкидок = 0;
				Если ЕстьРеквизитПроцентАвтоматическихСкидок Тогда
					ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
				КонецЕсли;
				СуммаБезСкидок = СтрокаТабличнойЧасти.Сумма * 100/ (100 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки - ПроцентАвтоматическихСкидок);
				Если ЕстьРеквизитЦена Тогда СтрокаТабличнойЧасти.Цена = СуммаБезСкидок / КоличествоДок;	КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЕстьРеквизитЦена Тогда СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / КоличествоДок; КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылку на подчиненный справочник единиц).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// При изменении номенклатуры очистим ссылку на подчиненный справочник
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти   = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Функция возвращает часть запроса для выбора поля содержания у Таб части Услуги документа
Функция ПолучитьЧастьЗапросаДляВыбораСодержания(Знач ИмяТаблицыВыбора, Знач ИтоговыйАлиасПоля = "") Экспорт
	
	СтрокаИмениТаблицыВыборки = "";
	Если Не ПустаяСтрока(ИмяТаблицыВыбора) Тогда
		СтрокаИмениТаблицыВыборки = ИмяТаблицыВыбора + ".";
	КонецЕсли;
	
	ЧастьВыборки = "	Выбор 
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Содержание Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Содержание КАК Строка (1000))
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное КАК Строка (1000))
	|		Иначе
	|			" + СтрокаИмениТаблицыВыборки + "Номенклатура.Наименование
	|	Конец";
	
	Если Не ПустаяСтрока(ИтоговыйАлиасПоля) Тогда
		ЧастьВыборки = ЧастьВыборки + " КАК " + ИтоговыйАлиасПоля;	
	КонецЕсли;
	
	Возврат ЧастьВыборки; 
	
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ Расчета СКИДОК ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Функция получает период для расчета накопительных скидок.
//
// Параметры:
//  ДатаСкидок - Дата, на которую рассчитываются скидки.
//  УчетнаяПолитика - Структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  Структура - структура с ключами "ДатаНач" и "ДатаКон", начало и конец периода.
//
Функция ПолучитьПериодРасчетаНакопительныхСкидок(ДатаСкидок, УчетнаяПолитика) Экспорт

	ПериодНакопления = Новый Структура("ДатаНач, ДатаКон");

	ТекПериодичность = УчетнаяПолитика.ПериодичностьРасчетаНакопленияСкидок;
	ТекПрошлыйПериод = УчетнаяПолитика.АнализироватьПрошлыйПериодНакопленияСкидок;

	Если ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.ВТечениеВсегоПериода Тогда
		ПериодНакопления.ДатаНач = '00010101';
		ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Месяц Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -1);

			ПериодНакопления.ДатаНач = НачалоМесяца(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецМесяца(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоМесяца(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Квартал Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -3);

			ПериодНакопления.ДатаНач = НачалоКвартала(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецКвартала(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоКвартала(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Полугодие Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -6);

			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ПериодМинус);
			ПериодНакопления.ДатаКон = ОбщегоНазначения.ПолучитьКонецПолугодия(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Год Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -12);

			ПериодНакопления.ДатаНач = НачалоГода(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецГода(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоГода(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	КонецЕсли;

	Возврат ПериодНакопления;

КонецФункции

// Функция возвращает таблицу значений, выгруженную из результата запроса по скидкам.
//
// Параметры:
//  ДатаСкидок - дата, на которую необходимо рассчитать скидки.
//  МассивНоменклатуры - массив с номенклатурой.
//  МассивХарактеристик - массив с характеристиками номенклатуры.
//  МассивКачество - массив с качеством.
//  МассивПолучателей - массив с получателями скидки.
//  КурсКратность - Кратность валюты документа / курс валюты документа.
//  СуммаДокумента - сумма документа.
//  ВидОплаты - вид оплаты.
//  ДисконтнаяКарта - дисконтная карта.
//  УчетнаяПолитика - структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗапросПоСкидкам(ДатаСкидок, МассивНоменклатуры, МассивХарактеристик, МассивКачество, МассивПолучателей, КурсКратность, СуммаДокумента, ВидОплаты, ДисконтнаяКарта, УчетнаяПолитика)

	Если ЗначениеЗаполнено(ДисконтнаяКарта)
	   И УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		ЭтоНакопительнаяСкидка = Истина;
	Иначе
		ЭтоНакопительнаяСкидка = Ложь;
	КонецЕсли;

	Если ЭтоНакопительнаяСкидка Тогда
		ПериодНакопления = ПолучитьПериодРасчетаНакопительныхСкидок(ДатаСкидок, УчетнаяПолитика);

		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|	) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|			   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|		) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|");

		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.ДатаКон);
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПроцентНакопительнойСкидки = Выборка.ЗначениеПорога;
		Иначе
			ПроцентНакопительнойСкидки = 0;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                     , ДатаСкидок);
	Запрос.УстановитьПараметр("МассивНоменклатуры"       , МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристик"      , МассивХарактеристик);
	Запрос.УстановитьПараметр("МассивКачество"           , МассивКачество);
	Запрос.УстановитьПараметр("МассивПолучателей"        , МассивПолучателей);
	Запрос.УстановитьПараметр("ДеньНедели"               , Перечисления.ДниНедели[ДеньНедели(ДатаСкидок) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя"             , Дата(1, 1, 1, Час(ДатаСкидок), Минута(ДатаСкидок), Секунда(ДатаСкидок)));
	Запрос.УстановитьПараметр("КурсКратность"            , КурсКратность);
	Запрос.УстановитьПараметр("Сумма"                    , СуммаДокумента);
	Запрос.УстановитьПараметр("ВидОплаты"                , ВидОплаты);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"          , ДисконтнаяКарта);
	Запрос.УстановитьПараметр("ВидДисконтнойКарты"       , ДисконтнаяКарта.ВидДисконтнойКарты);

	Если ЭтоНакопительнаяСкидка Тогда
		Запрос.УстановитьПараметр("ПроцентНакопительнойСкидки" , ПроцентНакопительнойСкидки);
	КонецЕсли;

	ТекстЗапроса = "
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СпрКачество.Ссылка КАК Качество,
	|	РегСкидкиНоменклатуры.Условие КАК НУсловие,
	|	РегСкидкиНоменклатуры.ЗначениеУсловия КАК НЗначениеУсловия,
	|	РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки КАК НОграничениеСкидкиНаценки,
	|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиНоменклатуры.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиНоменклатуры.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиНоменклатуры.ПроцентСкидкиНаценки") + " КАК НПроцентСкидкиНаценки,
	|	РегСкидкиПоЦеновымГруппам.Условие КАК ЦУсловие,
	|	РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЦЗначениеУсловия,
	|	РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки КАК ЦОграничениеСкидкиНаценки,
	|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки") + " КАК ЦПроцентСкидкиНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ГДЕ
	|		СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СпрХарактеристики.Владелец,
	|		СпрХарактеристики.Ссылка
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	ГДЕ
	|		СпрХарактеристики.Ссылка В (&МассивХарактеристик)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	) КАК СпрНоменклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Качество КАК СпрКачество
	|	ПО
	|	СпрКачество.Ссылка В (&МассивКачество)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегСкидкиНоменклатуры.Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество,
	|		РегСкидкиНоменклатуры.Условие,
	|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиНоменклатуры.ЗначениеУсловия
	|		КОНЕЦ КАК ЗначениеУсловия,
	|		МАКСИМУМ(РегСкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата,
	|		   Номенклатура В (&МассивНоменклатуры)
	|		   И Качество В (&МассивКачество)
	|		   И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО
	|		РегСкидкиНоменклатуры.Регистратор = ВремяДействия.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
	|	ПО
	|		РегСкидкиНоменклатуры.Валюта = КурсыВалют.Валюта
	|	ГДЕ
	|		(ВремяДействия.ДеньНедели ЕСТЬ NULL
	|		   ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	|		   И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|		   И РегСкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//|		   И РегСкидкиНоменклатуры.ПроцентСкидкиНаценки <> 0
	|		   И (РегСкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегСкидкиНоменклатуры.ДатаОкончания >= &Дата)
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
	|	СГРУППИРОВАТЬ ПО
	|		РегСкидкиНоменклатуры.Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество,
	|		РегСкидкиНоменклатуры.Условие,
	|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиНоменклатуры.ЗначениеУсловия
	|		КОНЕЦ,
	|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|	) КАК РегСкидкиНоменклатуры
	|ПО
	|	СпрНоменклатура.Номенклатура = РегСкидкиНоменклатуры.Номенклатура
	|	   И (СпрНоменклатура.ХарактеристикаНоменклатуры = РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры ИЛИ РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	   И СпрКачество.Ссылка = РегСкидкиНоменклатуры.Качество
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|		РегСкидкиПоЦеновымГруппам.Качество,
	|		РегСкидкиПоЦеновымГруппам.Условие,
	|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
	|		КОНЕЦ КАК ЗначениеУсловия,
	|		МАКСИМУМ(РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(&Дата, Качество В (&МассивКачество) И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиПоЦеновымГруппам
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО
	|		РегСкидкиПоЦеновымГруппам.Регистратор = ВремяДействия.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
	|	ПО
	|		РегСкидкиПоЦеновымГруппам.Валюта = КурсыВалют.Валюта
	|	ГДЕ
	|		(ВремяДействия.ДеньНедели ЕСТЬ NULL
	|		   ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	|		   И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|		   И РегСкидкиПоЦеновымГруппам.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//|		   И РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки <> 0
	|		   И(РегСкидкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ РегСкидкиПоЦеновымГруппам.ДатаОкончания >= &Дата)
	|		   И(РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
	|	СГРУППИРОВАТЬ ПО
	|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|		РегСкидкиПоЦеновымГруппам.Качество,
	|		РегСкидкиПоЦеновымГруппам.Условие,
	|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
	|		КОНЕЦ,
	|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|	) КАК РегСкидкиПоЦеновымГруппам
	|ПО
	|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа = РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа
	|	   И СпрКачество.Ссылка = РегСкидкиПоЦеновымГруппам.Качество
	|ГДЕ
	|	РегСкидкиНоменклатуры.Условие ЕСТЬ НЕ NULL
	|	ИЛИ РегСкидкиПоЦеновымГруппам.Условие ЕСТЬ НЕ NULL
	|";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура рассчитывает скидки в документе.
//
// Параметры:
//  ДокументОбъект             - документ, для которого рассчитываем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  СтруктураПараметров        - структура, содержащая дополнительные параметря, необходимые для расчета скидок.
//
Процедура РассчитатьСкидкиПриПродаже(ДокументОбъект, ТабличнаяЧастьНоменклатуры, СтруктураПараметров) Экспорт
	Перем ВидРеализации, СуммаДокумента, ДиконтнаяКарта, ВидОплаты;
	Перем УчитыватьНДС, СуммаВключаетНДС, ДатаСкидок, ВалютаРегламентированногоУчета, УчетнаяПолитика;

	Если ТабличнаяЧастьНоменклатуры.Количество() = 0 Тогда Возврат; КонецЕсли;

	Если ТипЗнч (ТабличнаяЧастьНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Скопировать();
	Иначе
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Выгрузить();
	КонецЕсли;

	ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентАвтоматическихСкидок");
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка(),"УсловиеАвтоматическойСкидки");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеУсловияАвтоматическойСкидки");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезСкидки");

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
	КонецЦикла;

	СтруктураПараметров.Свойство("ВидРеализации"                 , ВидРеализации);
	СтруктураПараметров.Свойство("ДатаСкидок"                    , ДатаСкидок);
	СтруктураПараметров.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Свойство("ВидОплаты"                     , ВидОплаты);
	СтруктураПараметров.Свойство("СуммаДокумента"                , СуммаДокумента);
	СтруктураПараметров.Свойство("Карта"                         , ДиконтнаяКарта);
	СтруктураПараметров.Свойство("УчитыватьНДС"                  , УчитыватьНДС);
	СтруктураПараметров.Свойство("СуммаВключаетНДС"              , СуммаВключаетНДС);
	СтруктураПараметров.Свойство("УчетнаяПолитика"              , УчетнаяПолитика);

	УчитыватьНДС = ?(УчитыватьНДС = Неопределено, Ложь, УчитыватьНДС);

	ЕстьКоэффициент = ТаблицаТоваров.Колонки.Найти("Коэффициент") <> Неопределено;

	ДатаСкидок = ?(НЕ ЗначениеЗаполнено(ДатаСкидок), ДокументОбъект.Дата, ДатаСкидок);
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());

	Если ТаблицаТоваров.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
		МассивХарактеристик = Новый Массив;

		ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "ХарактеристикаНоменклатуры");
	Иначе
		МассивХарактеристик = ТаблицаТоваров.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
	КонецЕсли;
	МассивХарактеристик.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Если ТаблицаТоваров.Колонки.Найти("Качество") = Неопределено Тогда
		МассивКачество = Новый Массив;
		МассивКачество.Добавить(Справочники.Качество.Новый);

		ТаблицаТоваров.Колонки.Добавить("Качество");
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	Иначе
		МассивКачество = ТаблицаТоваров.ВыгрузитьКолонку("Качество");
	КонецЕсли;

	МассивПолучателей = ЦенообразованиеСервер.МассивПолучателейСкидки(ВидРеализации, ДокументОбъект);

	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		КурсКратность = 1;
	Иначе
		КурсКратность = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) / ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;

	ТаблицаСкидок=ЗапросПоСкидкам(ДатаСкидок, МассивНоменклатуры, МассивХарактеристик, МассивКачество, МассивПолучателей, КурсКратность, СуммаДокумента, ВидОплаты, ДиконтнаяКарта, УчетнаяПолитика);
	ТаблицаСкидок.Индексы.Добавить("Номенклатура,Качество");

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	СтруктураПоиска.Вставить("Качество");

	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	УсловиеКолво = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;

	Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		Если СтрокаТЧ.СуммаБезСкидки <> 0 Тогда
			СтруктураПоиска.Номенклатура = СтрокаТЧ.Номенклатура;
			СтруктураПоиска.Качество = СтрокаТЧ.Качество;

			МассивСтрок = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);

			СтруктураПоиска.Номенклатура = ПустаяНоменклатура;

			МассивСтрокБезНоменклатуры = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаБезНоменклатуры Из МассивСтрокБезНоменклатуры Цикл
				МассивСтрок.Добавить(СтрокаБезНоменклатуры);
			КонецЦикла;

			МаксСуммаСкидки              = Неопределено;
			ПодходящаяСкидка             = Неопределено;
			ПроцентСкидки                = Неопределено;
			ПодходящаяСкидкаНоменклатура = Неопределено;

			Для Каждого СтрокаСкидок Из МассивСтрок Цикл
				Если СтрокаСкидок.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры
				 Или СтрокаСкидок.ХарактеристикаНоменклатуры = ПустаяХарактеристика Тогда
					Если (СтрокаСкидок.НУсловие = УсловиеКолво
					   И СтрокаСкидок.НЗначениеУсловия < ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество)
					 Или СтрокаСкидок.НУсловие <> УсловиеКолво)
					   И (СтрокаСкидок.ЦУсловие = УсловиеКолво
					   И СтрокаСкидок.ЦЗначениеУсловия < ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество)
					 Или СтрокаСкидок.ЦУсловие <> УсловиеКолво) Тогда
						Если СтрокаСкидок.НПроцентСкидкиНаценки <> Null Тогда
							СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.НПроцентСкидкиНаценки / 100;
							Ограничение = СтрокаСкидок.НОграничениеСкидкиНаценки * ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество);

							// Проверим ограничение скидки.
							Если (Ограничение > 0 И СуммаСкидки > Ограничение)
							 Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
								СуммаСкидки = Ограничение;
							КонецЕсли;

							Если МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки Тогда
								МаксСуммаСкидки = СуммаСкидки;
								ПодходящаяСкидка = СтрокаСкидок;
								ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
								ПодходящаяСкидкаНоменклатура = Истина;
							КонецЕсли;
						КонецЕсли;

						Если СтрокаСкидок.ЦПроцентСкидкиНаценки <> Null Тогда
							СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.ЦПроцентСкидкиНаценки / 100;
							Ограничение = СтрокаСкидок.ЦОграничениеСкидкиНаценки * ?(ЕстьКоэффициент, СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент, СтрокаТЧ.Количество);

							// Проверим ограничение скидки.
							Если (Ограничение > 0 И СуммаСкидки > Ограничение)
							 Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
								СуммаСкидки = Ограничение;
							КонецЕсли;

							Если МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки Тогда
								МаксСуммаСкидки = СуммаСкидки;
								ПодходящаяСкидка = СтрокаСкидок;
								ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
								ПодходящаяСкидкаНоменклатура = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если МаксСуммаСкидки <> Неопределено Тогда
				СтрокаТЧ.ПроцентАвтоматическихСкидок = ПроцентСкидки;

				Если ПодходящаяСкидкаНоменклатура Тогда
					СтрокаТЧ.УсловиеАвтоматическойСкидки = ПодходящаяСкидка.НУсловие;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = ПодходящаяСкидка.НЗначениеУсловия;
				Иначе
					СтрокаТЧ.УсловиеАвтоматическойСкидки = ПодходящаяСкидка.ЦУсловие;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = ПодходящаяСкидка.ЦЗначениеУсловия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ВалютаТовара = ?(ВидРеализации = Перечисления.ВидыСкидок.Розничная, ВалютаРегламентированногоУчета, ДокументОбъект.ВалютаДокумента);

	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ПроцентАвтоматическихСкидок"), "ПроцентАвтоматическихСкидок");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма"), "Сумма");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("УсловиеАвтоматическойСкидки"), "УсловиеАвтоматическойСкидки");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ЗначениеУсловияАвтоматическойСкидки"), "ЗначениеУсловияАвтоматическойСкидки");

	Если УчитыватьНДС Тогда
		ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаНДС"), "СуммаНДС");
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ДокументФорма, ИмяТабличнойЧасти="") Экспорт
	УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ДокументФорма, ИмяТабличнойЧасти);
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РасчетА ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВидДокумента = "") Экспорт
	ИмяТабличнойЧасти=УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента=ДокументОбъект.Метаданные();	
	Если ИмяТабличнойЧасти="Корзина" Или ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ВидДокумента="Реализация" Тогда
			ЕстьОрганизация=УправлениеМетаданными.ЕстьРеквизит("Организация", МетаданныеДокумента);
			СтруктураУчетнойПолитики=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДокументОбъект.Дата, Ложь, ?(ЕстьОрганизация, ДокументОбъект.Организация, Неопределено));
			Если СтруктураУчетнойПолитики.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
				Если СтруктураУчетнойПолитики.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда
					СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС; Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; //Lee

		ЕстьКонтрагент=УправлениеМетаданными.ЕстьРеквизит("Контрагент", МетаданныеДокумента);
		ТипКонтрагент=?(ЕстьКонтрагент, ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты"), Ложь);
		
		НеЯвляетсяРезидентом = ?(ЕстьКонтрагент И ТипКонтрагент, ?(ДокументОбъект.Контрагент.НеЯвляетсяРезидентом = Истина, Истина, Ложь), Ложь);
		ЕстьДоговорКонтрагента = УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", МетаданныеДокумента);
		РеализацияНаЭкспорт = ?(ЕстьДоговорКонтрагента, ?(ДокументОбъект.ДоговорКонтрагента.РеализацияНаЭкспорт = Истина, Истина, Ложь), Ложь);
		НалоговыйАгентНерезидент = ?(ЕстьДоговорКонтрагента, ?(ДокументОбъект.ДоговорКонтрагента.УчетАгентскогоНДС = Истина И ДокументОбъект.ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент, Истина, Ложь), Ложь);

		Если НеЯвляетсяРезидентом И Не НалоговыйАгентНерезидент И ВидДокумента = "Приобретение" Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли РеализацияНаЭкспорт И ВидДокумента = "Реализация" Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;

		Если НЕ ВидДокумента="Реализация" Тогда
			Если ЕстьКонтрагент И ТипКонтрагент Тогда
				Если ДокументОбъект.Контрагент.УчетБезНДС Тогда
					СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	ИмяТабличнойЧасти=УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента=ДокументОбъект.Метаданные();	
	Если ИмяТабличнойЧасти="Корзина" Или ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаАкциза = СтрокаТабличнойЧасти.Номенклатура.СтавкаАкциза;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет процент розничной наценки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	МетаданныеДокумента=ДокументОбъект.Метаданные();
	стрАтрибут=?(УправлениеМетаданными.ЕстьРеквизит("Склад", МетаданныеДокумента), "Склад", "Склад");
	Если УправлениеМетаданными.ЕстьРеквизит(стрАтрибут, МетаданныеДокумента) Тогда
		ИмяТабличнойЧасти=УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
		Если УправлениеМетаданными.ЕстьРеквизит("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
		КонецЕсли;		
		ТипЦенРозничнойТорговли=ДокументОбъект[стрАтрибут].ТипЦенРозничнойТорговли;
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки=ЦенообразованиеСервер.ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, ТипЦенРозничнойТорговли, ДокументОбъект.Дата);
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры

// Процедура заполняет единицу мест в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ПроверятьРеквизит = Истина) Экспорт

	Если ПроверятьРеквизит Тогда
		ИмяТабличнойЧасти   = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		Если ИмяТабличнойЧасти="Корзина" ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			// берем из самого реквизита Номенклатура
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда				
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
			КонецЕсли;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	Иначе
		// берем из самого реквизита Номенклатура
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
		КонецЕсли;
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт
Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти   = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если УправлениеМетаданными.ЕстьРеквизит("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	КонецЕсли;

	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);

	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, установить коэффициент.

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	//Если НЕ ЗначениеЗаполнено(Контрагент)
	// Или НЕ ЗначениеЗаполнено(ТипЦен) Тогда
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	Иначе
		// из регистра
		Цена = ЦенообразованиеСервер.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		                               ТипЦен, ДатаДокумента, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                               ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ДоговорКонтрагента,
		                               ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если ЗначениеЗаполнено(Цена) Тогда

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				                            ?(ЗначениеЗаполнено(ТипЦен), ТипЦен.ЦенаВключаетНДС, Истина),
				                            УчитыватьНДС, СуммаВключаетНДС, 
				                            УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;

		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	КонецЕсли;
	
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры

// Процедура заполняет цену по ценам покупки в строке табличной части документа (по единице хранения остатков)
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти   = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если УправлениеМетаданными.ЕстьРеквизит("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	КонецЕсли;		

	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(Контрагент) Или НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Возврат;
	КонецЕсли;
	
	// из регистра
	ЕдИзмХран = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	Цена = ЦенообразованиеСервер.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
	ТипЦен, ДатаДокумента, ЕдИзмХран, 
	ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
	ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
	ДоговорКонтрагента,
	ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));
	
	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения        
	Если НЕ ЗначениеЗаполнено(Цена) Тогда Возврат; КонецЕсли;
		
	Если ПересчитыватьНалогиВЦене Тогда
		СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
			ТипЦен.ЦенаВключаетНДС,
			УчитыватьНДС, СуммаВключаетНДС, 
			УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	Иначе
		СтрокаТабличнойЧасти.Цена = Цена;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	ИмяТабличнойЧасти = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если УправлениеМетаданными.ЕстьРеквизит("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	КонецЕсли;		

	Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регламентированного учета.
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	КонецЕсли;

	ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);
	Если ТекСклад = Неопределено Тогда
		ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента, Справочники.Склады.ПустаяСсылка());
		Если ТипЗнч(ТекСклад) <> Тип("СправочникСсылка.Склады") Тогда
			ТекСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	ЕдИзмХран = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

	Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
		                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдИзмХран,
		                            ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
		                            ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
		                            ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));

	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
	Если ЗначениеЗаполнено(Цена) Тогда
		СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
					Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
					ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
					УправлениеМетаданными.ЕстьРеквизит("УчитыватьНДС", МетаданныеДокумента)
					И ДокументОбъект.УчитыватьНДС,
					УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента)
					И ДокументОбъект.СуммаВключаетНДС,
					?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
					УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета,
//  ВалютаДокумента                - необязательный параметр, валюта, в которой надо заполнить цену,
//                                   если не задан, то цена заполняется в валюте документа,
//                                   если нет валюты документа, то в валюте упр. учета.
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета, ВалютаДокумента =Неопределено, Знач ТипЦен = Неопределено, ЭтоРозница = Ложь) Экспорт
	ИмяТабличнойЧасти = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если НЕ ЗначениеЗаполнено(ТипЦен) И УправлениеМетаданными.ЕстьРеквизит("ТипЦен", МетаданныеДокумента) Тогда
		ТекТипЦен = ДокументОбъект.ТипЦен;
	Иначе
		ТекТипЦен = ТипЦен;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокумента) Тогда
			ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
			КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
			КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		Иначе
			// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регламентированного учета.
			ВалютаДокумента    = ВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;
		КонецЕсли;
	Иначе
		СтруктураВалюты    = МодульВалютногоУчета.КурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);
	Если ТекСклад = Неопределено Тогда
		ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента, Справочники.Склады.ПустаяСсылка());
		Если НЕ ТипЗнч(ТекСклад)=Тип("СправочникСсылка.Склады") Тогда
			ТекСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеМетаданными.ЕстьРеквизит("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ЦенаПоДоговоруУсловийПоставок = Ложь;
		ТипЦенДляПерерасчетаЦены = ТекТипЦен;
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
		ТекТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
		ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
		ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента),
		ЦенаПоДоговоруУсловийПоставок,
		ТипЦенДляПерерасчетаЦены);
		
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				?(ЦенаПоДоговоруУсловийПоставок, Истина, ТипЦенДляПерерасчетаЦены.ЦенаВключаетНДС),
				УправлениеМетаданными.ЕстьРеквизит("УчитыватьНДС", МетаданныеДокумента)
				И ДокументОбъект.УчитыватьНДС,
				УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента)
				И ДокументОбъект.СуммаВключаетНДС,
				?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
				УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;
	КонецЕсли;

	// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры.
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	Если УправлениеМетаданными.ЕстьРеквизит("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет цену возвратной тары по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа,
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	
	Если НЕ УправлениеМетаданными.ЕстьРеквизит("Контрагент", МетаданныеДокумента) тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Или НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда 
		Возврат;
	КонецЕсли;
	// из регистра
	// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		Цена = 0;
	Иначе
		ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, , ДокументОбъект.Контрагент,
				ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдиницаТары,
				ДокументОбъект.ВалютаДокумента,
				ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
				ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
				?(УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Неопределено));
	КонецЕсли;
	
	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
	// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС ставки бурутся из номенклатуры
	Если НЕ ЗначениеЗаполнено(Цена) Тогда Возврат; КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
			ДокументОбъект.УчитыватьНДС, Истина,
			УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
КонецПроцедуры

// Процедура заполняет цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ДоговорКонтрагента             - договор контрагента в случае, если его надо брать не из данного документа,
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ДокументОбъект, ДоговорКонтрагента = Неопределено, ВалютаРегламентированногоУчета) Экспорт
	ИмяТабличнойЧасти = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если УправлениеМетаданными.ЕстьРеквизит("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
	КонецЕсли;

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда 
		СтрокаТабличнойЧасти.Цена=0;
	Иначе
		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;

		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

			Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
			                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
			                            ДокументОбъект.ВалютаДокумента,
			                            ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
			                            ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ,
			                            ДоговорКонтрагента,
			                            ОбщегоНазначения.ПолучитьРеквизитШапки("УсловияПродаж", ДокументОбъект, МетаданныеДокумента));

		КонецЕсли;

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
		// ставки бурутся из номенклатуры
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			                            ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
			                            УправлениеМетаданными.ЕстьРеквизит("УчитыватьНДС", МетаданныеДокумента) И ДокументОбъект.УчитыватьНДС,
			                            УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента) И ДокументОбъект.СуммаВключаетНДС,
			                            ?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти), УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Рассчитывает розничную цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента",МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе

		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регл. учета
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.КурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	стрАтрибут=?(МетаданныеДокумента.Имя="ПоступлениеТоваровУслуг", "Склад", "Склад");
	ТипЦенРозничнойТорговли = ДокументОбъект[стрАтрибут].ТипЦенРозничнойТорговли;

	// Если в документе налогов нет, считаем, что цена со всеми налогами.
	Если УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
		СтавкаНДС        = УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	Иначе
		СуммаВключаетНДС = Истина;
		СтавкаНДС        = УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
	КонецЕсли;

	СтрокаТабличнойЧасти.ЦенаВРознице = УправлениеРозничнойТорговлейСервер.РассчитатьРозничнуюЦену(СтрокаТабличнойЧасти.Цена,
	                                                            ВалютаДокумента,
	                                                            КурсДокумента,
	                                                            КратностьДокумента,
	                                                            ВалютаРегламентированногоУчета,
	                                                            СтрокаТабличнойЧасти.ПроцентРозничнойНаценки,
	                                                            СуммаВключаетНДС,
	                                                            СтавкаНДС,
	                                                            ТипЦенРозничнойТорговли,
	                                                            СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                            СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков);

КонецПроцедуры

// Рассчитывает процент розничной наценкив строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Перем ЦенаСНалогами;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регл. учета
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.КурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 0;
	Иначе

		// Пересчитываем в рубли
		ЦенаСНалогами = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаДокумента,
		                                           ВалютаРегламентированногоУчета,
		                                           КурсДокумента, 1, КратностьДокумента, 1);

		ЕстьНалоги =  УправлениеМетаданными.ЕстьРеквизит("УчитыватьНДС", МетаданныеДокумента)
		            И УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента);

		Если ЕстьНалоги Тогда
			СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
			СтавкаНДС        = УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СуммаВключаетНДС = Истина;
			СтавкаНДС        = УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
		КонецЕсли;

		// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
		ЦенаСНалогами = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаСНалогами,
		                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                СуммаВключаетНДС, Истина, Истина, СтавкаНДС);

		ЦенаСНалогамиЗаЕдиницуХранения = ЦенаСНалогами * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
		                                 / СтрокаТабличнойЧасти.Коэффициент;

		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаСНалогамиЗаЕдиницуХранения)
		                                               / ЦенаСНалогамиЗаЕдиницуХранения;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  СпособРасчета        - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт
	ИмяТабличнойЧасти=УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
    МетаданныеДокумента=ДокументОбъект.Метаданные();

    Если ИмяТабличнойЧасти="Корзина" Тогда
		КоличествоДок=СтрокаТабличнойЧасти.Количество;
		//Если ДокументОбъект.Корзина.Колонки.Найти("Сумма")=Неопределено Тогда Возврат; КонецЕсли; 
	Иначе	
		КоличествоДок=?(УправлениеМетаданными.ЕстьРеквизит("Количество", МетаданныеДокумента, ИмяТабличнойЧасти), СтрокаТабличнойЧасти.Количество, 1);
		//Если Не УправлениеМетаданными.ЕстьРеквизит("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда Возврат; КонецЕсли; 
	КонецЕсли; 
	
	Сумма = СтрокаТабличнойЧасти.Цена * КоличествоДок; СуммаСкидки = 0;

	Если (СпособРасчета = Неопределено)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
	 
		ЕстьПроцентАвтоматическихСкидок=Ложь;
		Если ИмяТабличнойЧасти="Корзина" И НЕ ДокументОбъект.Корзина.Колонки.Найти("ПроцентАвтоматическихСкидок")=Неопределено Тогда
			ЕстьПроцентАвтоматическихСкидок=Истина;
		Иначе
			ЕстьПроцентАвтоматическихСкидок=ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти);
		КонецЕсли; 
	  	Если ЕстьПроцентАвтоматическихСкидок Тогда
			СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
		КонецЕсли;
		
		Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
			ЕстьПроцентСкидкиНаценки=Ложь;
			Если ИмяТабличнойЧасти="Корзина" И НЕ ДокументОбъект.Корзина.Колонки.Найти("ПроцентСкидкиНаценки")=Неопределено Тогда
				ЕстьПроцентСкидкиНаценки=Истина;
			Иначе
				ЕстьПроцентСкидкиНаценки=ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти);
			КонецЕсли;
			Если ЕстьПроцентСкидкиНаценки Тогда
				СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;

КонецПроцедуры

// Рассчитывает сумму в строке возвратной тары документа
//
// Параметры:
//  СтрокаВозвратнойТары  - строка возвратной тары табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ДокументОбъект) Экспорт
	СтрокаВозвратнойТары.Сумма = СтрокаВозвратнойТары.Цена * СтрокаВозвратнойТары.Количество;
КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтавкаНДС=Неопределено) Экспорт
	// Если в документе нет флагов учета НДС, то в конфигурации считатется, что суммы включают НДС.
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Истина;
	МетаданныеДокумента=ДокументОбъект.Метаданные();
	Если УправлениеМетаданными.ЕстьРеквизит("УчитыватьНДС", МетаданныеДокумента ) Тогда
		УчитыватьНДС=ДокументОбъект.УчитыватьНДС;
	КонецЕсли;

	Если УправлениеМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаданныеДокумента ) Тогда
		СуммаВключаетНДС=ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;

	Если СтавкаНДС=Неопределено Тогда СтавкаНДС=СтрокаТабличнойЧасти.СтавкаНДС; КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНалоговСервер.СтавкаНДС(СтавкаНДС));
КонецПроцедуры

Процедура РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтавкаАкциза=Неопределено) Экспорт
	
	СтрокаТабличнойЧасти.СуммаАкциза=СтрокаТабличнойЧасти.СтавкаАкциза*СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	СтрокаТабличнойЧасти.СуммаНДСПередачи=УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПередачи, ДокументОбъект.УчитыватьНДС, ДокументОбъект.СуммаВключаетНДС, УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС));
КонецПроцедуры

// Рассчитывает количество исходя из количества мест
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения!
				                 |Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				Если СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда Возврат;	КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения мест!
					                 |Пересчет количества невозможен.");
				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения цены "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмерения) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения мест "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест;
					Иначе
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест
						                                  * СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент
						                                  / (СтрокаТабличнойЧасти.Коэффициент/СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент); //// Коля
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения "
				                 + (СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков) + " не проставлен коэффициент!
				                 |Пересчет количества невозможен.");
			Иначе
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Коэффициент
				                                  / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает количество мест исходя из количества
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ИмяТабличнойЧасти="Корзина" Тогда
		ЕстьЕдиницаИзмеренияМест=Истина;
		ЕстьКоличество=Истина;
		ЕстьКоличествоМест=Истина;
	Иначе
		ЕстьЕдиницаИзмеренияМест=ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти);
		ЕстьКоличество=ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти);
		ЕстьКоличествоМест=ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти);
	КонецЕсли; 
	
	Если ЕстьЕдиницаИзмеренияМест Тогда
		Если ЕстьКоличество И ЕстьКоличествоМест Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				СтрокаТабличнойЧасти.КоличествоМест = 0;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения цены "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмерения) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения мест "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						КоличествоМест = СтрокаТабличнойЧасти.Количество;
					Иначе
						КоличествоМест = СтрокаТабличнойЧасти.Количество * (СтрокаТабличнойЧасти.Коэффициент/СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)
						                 / СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент;  /// Коля
					КонецЕсли;

					СтрокаТабличнойЧасти.КоличествоМест = ?(Цел(КоличествоМест) = КоличествоМест, КоличествоМест, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЕстьКоличествоМест И СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не проставлен коэффициент!
				                 |Пересчет количества мест невозможен.");
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество 
				                                      * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
				                                      / СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

// Рассчитывает цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект - объект редактируемого документа.
//
Процедура РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = УправлениеМетаданными.ИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоСуммеДокумента", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоСуммеДокумента <> 0)
		 Или (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоКоличествуТовара", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоКоличествуТовара <> 0)
		 Или (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоВидуОплаты", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоВидуОплаты <> 0)
		 Или (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоДисконтнойКарте", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоДисконтнойКарте <> 0)
			Тогда
				//Невозможно рассчитать цену по сумме документа!!!
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает розничную наценку и розничную цену по одному из двух алгоритмов, в зависимости от 
// настройке заданной в справочнике складов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  СтрокаТабличнойЧасти           - строка табличной части документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета, в которой возвращается розничная цена
// 
Процедура РассчитатьРозничнуюЦенуВСтрокеТабЧасти(ДокументОбъект, СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета) Экспорт

	
	Если ДокументОбъект.Склад.РасчетРозничныхЦенПоТорговойНаценке Тогда
		ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		СтрокаТабличнойЧасти.ЦенаВРознице = ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		                                    СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                    ДокументОбъект.Склад.ТипЦенРозничнойТорговли,
		                                    ДокументОбъект.Дата,
		                                    СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
		                                    ВалютаРегламентированногоУчета);
		РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТиповыеОперацииВсехТабличныхЧастей(Объект) Экспорт
	ЕстьСтрокиТЧ=Ложь;
	Для каждого мдТабличнаяЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
		Если мдТабличнаяЧасть.Реквизиты.Найти("ТОП")=Неопределено Тогда Продолжить; КонецЕсли;
		Если Объект[мдТабличнаяЧасть.Имя].Количество()>0 Тогда ЕстьСтрокиТЧ=Истина; Прервать; КонецЕсли; 
	КонецЦикла;
	Если Не ЕстьСтрокиТЧ Тогда Возврат; КонецЕсли; 
	ЗаполнитьТиповыеОперации(Объект);
КонецПроцедуры

Процедура ЗаполнитьТиповыеОперации(Объект, Форма=Неопределено, стрТабличнаяЧасть=Неопределено) Экспорт
	Если стрТабличнаяЧасть=Неопределено Тогда
		Для каждого мдТабличнаяЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
			Если мдТабличнаяЧасть.Реквизиты.Найти("ТОП")=Неопределено Тогда Продолжить; КонецЕсли;
			стрТабличнаяЧасть=мдТабличнаяЧасть.Имя;
			Для каждого СтрокаТабличнойЧасти Из Объект[стрТабличнаяЧасть] Цикл
				УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, Объект, Форма, стрТабличнаяЧасть);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТабличнойЧасти Из Объект[стрТабличнаяЧасть] Цикл
			УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, Объект, Форма, стрТабличнаяЧасть);
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры
