Функция РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, Знач СтавкаНДС) Экспорт
	Если ТипЗнч(СтавкаНДС)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		СтавкаНДС=СтавкаНДС(СтавкаНДС);
	КонецЕсли; 
	
	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;

	Возврат СуммаНДС;
КонецФункции

Функция РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода) Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	ВидыНачисленияРеализация=Новый СписокЗначений;
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));	
	Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ВидНачисления,
	|	СУММА(ИсточникДанных.СуммаБезНДСПриход) КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ), КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),,
	|		Организация = &Организация
	|		И (СчетФактура.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ))
	|		И ВидНачисления В (&ВидыНачисленияРеализация)) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.ВидНачисления
	|";
	ТаблицаРезультата=Запрос.Выполнить().Выгрузить();

	СтруктураВозврата=Новый Структура;
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		Если СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС Тогда
		    СтруктураВозврата.Вставить("ВыручкаНДС",ВыручкаНДС + СтрокаРезультата.СуммаБезНДС);
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС Тогда	
			СтруктураВозврата.Вставить("ВыручкаБезНДС",ВыручкаБезНДС + СтрокаРезультата.СуммаБезНДС);
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД Тогда	
			СтруктураВозврата.Вставить("ВыручкаЕНВД",ВыручкаЕНВД + СтрокаРезультата.СуммаБезНДС);
			
		ИначеЕсли СтрокаРезультата.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0 Тогда	
			СтруктураВозврата.Вставить("ВыручкаНДС0",ВыручкаНДС0 + СтрокаРезультата.СуммаБезНДС);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции

Функция СтавкаНДС(Ставка) Экспорт
	Если Ставка=Перечисления.СтавкиНДС.НДС20 ИЛИ Ставка=Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	ИначеЕсли Ставка=Перечисления.СтавкиНДС.НДС10 ИЛИ Ставка=Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли Ставка=Перечисления.СтавкиНДС.НДС18 ИЛИ Ставка=Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция СчетУчета(ТОП, стрДК="СчетДебет") Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТОП", ТОП);
	Запрос.УстановитьПараметр("СчетНДС", ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных."+стрДК+" Как СчетУчетаНДС
	|ИЗ
	|	Справочник.ТиповыеОперации.ПроводкиБУ КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка=&ТОП И ИсточникДанных.СчетДебет В Иерархии (&СчетНДС)
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.СчетУчетаНДС, Неопределено);
КонецФункции

Функция НайтиСчетУчета(Проводки, тзСчетаУчета, ДК="Д") Экспорт
	Для каждого СтрокаПроводки Из Проводки Цикл
		Если ДК="Д" Тогда
			РезультатПоиска=тзСчетаУчета.Найти(СтрокаПроводки.СчетДебет);
		ИначеЕсли ДК="К" Тогда
			РезультатПоиска=тзСчетаУчета.Найти(СтрокаПроводки.СчетКредит);
		КонецЕсли;
		Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли; 

		Возврат СтрокаПроводки.СчетДебет;
	КонецЦикла;
КонецФункции 

Процедура ЗаполнитьСчетУчета(СтрокаКоллекции) Экспорт
	МассивСчетов=Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);	

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТОП", СтрокаКоллекции.ТОП);
	Запрос.УстановитьПараметр("СчетНДС", ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Выбор 
	|	Когда ИсточникДанных.СчетДебет В Иерархии (&СчетНДС) Тогда
	|		ИсточникДанных.СчетДебет
	|	Когда ИсточникДанных.СчетКредит В Иерархии (&СчетНДС) Тогда
	|		ИсточникДанных.СчетКредит
	| 	Иначе
	|		Неопределено
	|	Конец Как СчетУчетаНДС
	|ИЗ
	|	Справочник.ТиповыеОперации.ПроводкиБУ КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка=&ТОП
	|	И (ИсточникДанных.СчетДебет В Иерархии (&СчетНДС) ИЛИ ИсточникДанных.СчетКредит В Иерархии (&СчетНДС))
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаКоллекции.СчетУчетаНДС=Выборка.СчетУчетаНДС;
	КонецЕсли;
	
	Возврат;
	
	Для каждого СтрокаПроводки Из СтрокаКоллекции.ТОП.ПроводкиБУ Цикл
		СчетКредит=СтрокаПроводки.СчетКредит;
		Если ЗначениеЗаполнено(СчетКредит) И СчетКредит.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
			СтрокаКоллекции.СчетУчетаНДС=СчетКредит; Прервать;
		КонецЕсли;
		СчетДебет=СтрокаПроводки.СчетДебет;			
		Если ЗначениеЗаполнено(СчетДебет) И СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
			СтрокаКоллекции.СчетУчетаНДС=СчетДебет; Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПараметрыСчетаФактуры(Объект, Результат) Экспорт

	Результат=Новый Структура("Организация, Контрагент, Договор, СуммаДокумента, СуммаНДС, ВалютаДокумента");
	Результат.СуммаДокумента = 0;
	Результат.СуммаНДС=0;
	
	Если ТипЗнч(Объект)= Тип("ДокументСсылка.СчетФактураПолученный") Или ТипЗнч(Объект)= Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли; 
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") тогда
		ЭтоПолученныйСФ = Истина;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		и (Объект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс 
		или Объект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация"	, Объект.Организация);
		Результат.Вставить("Контрагент"		, Объект.Контрагент);
		Результат.Вставить("Договор"		, Объект.ДоговорКонтрагента);
		Результат.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента"	, Объект.СуммаДокумента);
		Результат.Вставить("СуммаНДС"		, Объект.СуммаНДС);
		Возврат;
	КонецЕслИ;
	МассивОснований=?(ТипЗнч(Объект)=Тип("ДанныеФормыСтруктура"), Объект.ДокументыОснования.Выгрузить(,"ДокументОснование").ВыгрузитьКолонку("ДокументОснование"), Объект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	ДокументыОснования = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОснований, Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если не ЗначениеЗаполнено(Основание) Тогда Продолжить; КонецЕсли; 

		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли; 
		
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	// ТЧ оснований не заполнена, параметры определить нельзя
	Если ТипыОснований.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", МодульВалютногоУчета.ПолучитьВалюту());
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		ТипДокументаОснования	= ТипОснования.Ключ;
		ДокументыОснования		= ТипОснования.Значение;
		ТекстЗапроса = "";
		Если ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			// Для данного документа применяется специфический запрос для расчета параметров счета-фактуры
			Запрос.УстановитьПараметр("ДокументОснованиеАО", ДокументыОснования);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
			|	АвансовыйОтчетПрочее.Контрагент КАК Контрагент,
			|	НЕОПРЕДЕЛЕНО КАК Договор,
			|	СУММА(АвансовыйОтчетПрочее.Сумма) КАК СуммаДокумента,
			|	СУММА(АвансовыйОтчетПрочее.СуммаНДС) КАК СуммаНДС,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента
			|ИЗ
			|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			|ГДЕ
			|	АвансовыйОтчетПрочее.Ссылка В (&ДокументОснованиеАО)
			|	И АвансовыйОтчетПрочее.ПредъявленСФ
			|	И АвансовыйОтчетПрочее.СчетФактура = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетПрочее.Контрагент,
			|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетПрочее.Ссылка.Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Ссылка.Организация,
			|	АвансовыйОтчетТовары.Контрагент,
			|	НЕОПРЕДЕЛЕНО,
			|	СУММА(АвансовыйОтчетТовары.Сумма),
			|	СУММА(АвансовыйОтчетТовары.СуммаНДС),
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.Ссылка В(&ДокументОснованиеАО)
			|	И АвансовыйОтчетТовары.СчетФактура = &ТекущийДокумент
			|	И АвансовыйОтчетТовары.ПредъявленСФ
			|
			|СГРУППИРОВАТЬ ПО
			|	АвансовыйОтчетТовары.Контрагент,
			|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
			|	АвансовыйОтчетТовары.Ссылка.Организация";
			
		Иначе
			
			Если ТипДокументаОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровУслугНДС") Тогда
				Запрос.УстановитьПараметр("ДокументОснование_ОтражениеРеализацииТоваровУслугНДС", ДокументыОснования);
				Запрос.Текст="
				|ВЫБРАТЬ
				|	ОтражениеРеализацииТоваровУслугНДС.Организация,
				|	ОтражениеРеализацииТоваровУслугНДС.Контрагент,
				|	ОтражениеРеализацииТоваровУслугНДС.ДоговорКонтрагента КАК Договор,
				|	ОтражениеРеализацииТоваровУслугНДС.СуммаДокумента,
				|	ОтражениеРеализацииТоваровУслугНДС.СуммаНДС,
				|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
				|ИЗ
				|	Документ.ОтражениеРеализацииТоваровУслугНДС КАК ОтражениеРеализацииТоваровУслугНДС
				|ГДЕ
				|	ОтражениеРеализацииТоваровУслугНДС.Ссылка В(&ДокументОснование_ОтражениеРеализацииТоваровУслугНДС)";
				
			ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровУслугНДС") Тогда
				Запрос.УстановитьПараметр("ДокументОснование_ОтражениеПоступленияТоваровУслугНДС", ДокументыОснования);
				ТекстЗапроса="
				|ВЫБРАТЬ
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Организация,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Контрагент,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.ДоговорКонтрагента КАК Договор,
				|	СУММА(ОтражениеПоступленияТоваровУслугНДСТовары.Сумма) КАК СуммаДокумента,
				|	СУММА(ОтражениеПоступленияТоваровУслугНДСТовары.СуммаНДС) КАК СуммаНДС,
				|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
				|ИЗ
				|	Документ.ОтражениеПоступленияТоваровУслугНДС.Товары КАК ОтражениеПоступленияТоваровУслугНДСТовары
				|ГДЕ
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка В(&ДокументОснование_ОтражениеПоступленияТоваровУслугНДС)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Контрагент,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.ДоговорКонтрагента,
				|	ОтражениеПоступленияТоваровУслугНДСТовары.Ссылка.Организация";
				
			ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				Запрос.УстановитьПараметр("ДокументОснование_ОтчетОРозничныхПродажах", ДокументыОснования);
				ТекстЗапроса="
				|ВЫБРАТЬ
				|	ОтчетОРозничныхПродажах.Ссылка.Организация,
				|	Null КАК Контрагент,
				|	Null КАК Договор,
				|	СУММА(ОтчетОРозничныхПродажах.Сумма) КАК СуммаДокумента,
				|	СУММА(ОтчетОРозничныхПродажах.СуммаНДС) КАК СуммаНДС,
				|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента
				|ИЗ
				|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажах
				|ГДЕ
				|	ОтчетОРозничныхПродажах.Ссылка В(&ДокументОснование_ОтчетОРозничныхПродажах)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтчетОРозничныхПродажах.Ссылка.Организация";
	
				
			ИначеЕсли (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеДопРасходов"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровПоставщику"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.РеализацияТоваровУслуг"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
				или (ТипДокументаОснования= Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"))Тогда
				
				ИмяОбъекта = ДокументыОснования[0].Метаданные().Имя;
				Запрос.УстановитьПараметр("ДокументОснование_"+ИмяОбъекта, ДокументыОснования);
				
				Если (ТипДокументаОснования = Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту"))
					или ((ТипДокументаОснования = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера")) И ЭтоПолученныйСФ) Тогда
					ИдРеквСумма_Сумма = "СуммаВознаграждения";
				ИначеЕсли (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровПоставщику")) и ЭтоПолученныйСФ 
					ИЛИ (ТипДокументаОснования= Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) и не ЭтоПолученныйСФ 
					тогда
					ИдРеквСумма_Сумма = "СуммаДокумента*(-1)";
					
					стрСуммаНДС=ИмяОбъекта+".СуммаНДС*(-1) Как СуммаНДС,";
				Иначе
					ИдРеквСумма_Сумма = "СуммаДокумента";
				КонецЕсли;
				
				Если (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
					или (ТипДокументаОснования= Тип("ДокументСсылка.ПоступлениеДопРасходов"))
					или (ТипДокументаОснования= Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
					
					стрСуммаНДС=ИмяОбъекта+".СуммаНДС Как СуммаНДС,";
				КонецЕсли; 
				Если стрСуммаНДС=Неопределено Тогда 
					Если УправлениеМетаданными.ЕстьРеквизит("СуммаНДС", Метаданные.Документы[ИмяОбъекта]) Тогда
						стрСуммаНДС="СуммаНДС Как СуммаНДС,";
					Иначе
						стрСуммаНДС="0 Как СуммаНДС,";
					КонецЕсли						
				КонецЕсли; //24.07.2012
							
				стрДоговор=ИмяОбъекта+".ДоговорКонтрагента как Договор";
				Если Не УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента", Метаданные.Документы[ИмяОбъекта]) Тогда
					стрДоговор=ИмяОбъекта+".РасшифровкаПлатежа.ДоговорКонтрагента как Договор";
				КонецЕсли; 
				
				ТекстЗапроса="
				|ВЫБРАТЬ
				|	"+ИмяОбъекта+".Организация,
				|	"+ИмяОбъекта+".Контрагент,
				|	"+стрДоговор+",
				|	"+ИмяОбъекта+"."+ИдРеквСумма_Сумма+" Как СуммаДокумента,
				|	"+стрСуммаНДС+"
				|";

				Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", Метаданные.Документы[ИмяОбъекта]) Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	"+ИмяОбъекта+".ВалютаДокумента Как ВалютаДокумента
					|";
				Иначе
					ТекстЗапроса=ТекстЗапроса+"
					|	&ВалютаРегламентированногоУчета
					|";
				КонецЕсли;

				ТекстЗапроса=ТекстЗапроса+"
				|ИЗ
				|	Документ."+ИмяОбъекта+" КАК "+ИмяОбъекта+"
				|ГДЕ
				|	"+ИмяОбъекта + ".Ссылка в (&ДокументОснование_"+ИмяОбъекта+")
				|";
			КонецЕсли;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст),"", Запрос.Текст + Символы.ПС+"Объединить Все "+Символы.ПС)+ТекстЗапроса;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда Возврат; КонецЕсли;
	
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;

	ПерваяСтрока = Истина;
	РазныеОрганизации = ложь;
	РазныеКонтрагенты = ложь;
	РазныеДоговоры = ложь;
	РазныеВалюты = ложь;

	тзДанные=РезультатЗапроса.Выгрузить();
	Для каждого Выборка Из тзДанные Цикл
		текДоговор=Выборка.Договор;
		Если ТипЗнч(текДоговор)=Тип("ТаблицаЗначений") Тогда
			текДоговор=текДоговор[0].ДоговорКонтрагента;
		КонецЕсли; //пко/рко (у них нет договора в шапке)
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			Результат.Договор=текДоговор;
		Иначе
			РазныеОрганизации	= РазныеОрганизации или не Результат.Организация= Выборка.Организация;
			РазныеКонтрагенты	= РазныеКонтрагенты или не Результат.Контрагент = Выборка.Контрагент;
			РазныеВалюты		= РазныеВалюты или не Результат.ВалютаДокумента	= Выборка.ВалютаДокумента;
			РазныеДоговоры		= ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры или не Результат.Договор = текДоговор);
			Результат.СуммаДокумента = 	Результат.СуммаДокумента + Выборка.СуммаДокумента;
			Результат.СуммаНДС = 	Результат.СуммаНДС + Выборка.СуммаНДС;
		КонецЕсли; 
	КонецЦикла; 
	Если РазныеОрганизации или РазныеКонтрагенты или РазныеВалюты Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:"+
		?(РазныеОрганизации,Символы.ПС+" - не совпадает организация","")+
		?(РазныеКонтрагенты,Символы.ПС+" - не совпадает контрагент","")+
		?(РазныеДоговоры,Символы.ПС+" - не совпадает договор","")+
		?(РазныеВалюты,Символы.ПС+" - не совпадает валюта документа","")+
		Символы.ПС+"Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.", Ложь, Строка(Ссылка), СтатусСообщения.Внимание); 
		Если РазныеОрганизации Тогда
			Результат.Организация = Неопределено;
		КонецЕсли; 				
		Если РазныеКонтрагенты Тогда
			Результат.Контрагент = Неопределено;
		КонецЕсли; 				
		Если РазныеВалюты Тогда
			Результат.ВалютаДокумента = Неопределено;
		КонецЕсли; 				
		Если РазныеДоговоры тогда
			Результат.Договор = Неопределено;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

Функция НайтиПодчиненныйДокумент(ДокументСсылка, ВидДокумента = "СчетФактураВыданный", РазрешитьВыборСФНаАванс = Истина, ФлагТолькоПроведенные = Ложь, РазрешитьВыборТолькоСФНаАванс = Ложь, СтавкаНДСсАванса = Неопределено,  ДоговорАванса = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда Возврат Неопределено; КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.Текст="
	|ВЫБРАТЬ различные
	|	Ссылка
	|ИЗ
	|	Документ."+ВидДокумента+".ДокументыОснования Как ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ДокументОснование = &ДокументСсылка
	|";
	Если ФлагТолькоПроведенные Тогда
		Запрос.Текст = Запрос.Текст+" И ИсточникДанных.Ссылка.Проведен И НЕ ИсточникДанных.Ссылка.ПометкаУдаления";
	КонецЕсли;
	Если ВидДокумента = "СчетФактураВыданный" И Не РазрешитьВыборСФНаАванс Тогда
		Запрос.Текст = Запрос.Текст + " И Ссылка.ВидСчетаФактуры<>ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)";
	ИначеЕсли ВидДокумента = "СчетФактураВыданный" И РазрешитьВыборСФНаАванс и РазрешитьВыборТолькоСФНаАванс Тогда
		Запрос.Текст = Запрос.Текст + " И Ссылка.ВидСчетаФактуры=ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)";
		Если ЗначениеЗаполнено(СтавкаНДСсАванса) Тогда
			Запрос.Текст = Запрос.Текст + " И Ссылка.СтавкаНДС = &СтавкаНДСсАванса";
			Запрос.УстановитьПараметр("СтавкаНДСсАванса", СтавкаНДСсАванса);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДоговорАванса) Тогда
			Запрос.Текст = Запрос.Текст + " И Ссылка.ДоговорКонтрагента = &ДоговорАванса";
			Запрос.УстановитьПараметр("ДоговорАванса", ДоговорАванса);
		КонецЕсли; 
	КонецЕсли;                                                                      
	
	// Упорядочивание результатов
	Запрос.Текст = Запрос.Текст + "
	|	Упорядочить По";
	Если не ФлагТолькоПроведенные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Ссылка.Проведен убыв,
		|	Ссылка.ПометкаУдаления,
		|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	Ссылка.Дата,Ссылка.Номер
	|";
	
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
КонецФункции

Функция ПроверитьСоответствиеРеквизитовСчетаФактуры(ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина) Экспорт

     СчетФактура = НайтиПодчиненныйДокумент(ДокОбъект.Ссылка, ВидДокумента);
     Если СчетФактура = Неопределено Тогда Возврат Истина; КонецЕсли;

     структураРеквизиты = новый Структура; Флаг  = Истина; Текст = "";

     МетаРекв = ДокОбъект.Метаданные().Реквизиты;
     МетаСФ   = Метаданные.Документы[ВидДокумента].Реквизиты;
     Если ДокОбъект.Ссылка.Дата <> ДокОбъект.Дата И НачалоДня(ДокОбъект.Дата) <> НачалоДня(СчетФактура.Дата) Тогда
          Если Сообщать Тогда
               Сообщить("Изменена дата документа-основания. Возможно требуется внести изменения в счет-фактуру.", СтатусСообщения.Внимание);
          КонецЕсли;
          СтруктураРеквизиты.Вставить("Дата", ДокОбъект.Дата);
          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("Организация") <> Неопределено И СчетФактура.Организация <> ДокОбъект.Организация Тогда
          Если Сообщать Тогда Текст = " - Не совпадает организация"; КонецЕсли;
          СтруктураРеквизиты.Вставить("Организация", ДокОбъект.Организация);
          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("ДоговорКонтрагента") <> Неопределено 
          И МетаСФ.Найти("ДоговорКонтрагента") <> Неопределено 
          И СчетФактура.ДоговорКонтрагента <> ДокОбъект.ДоговорКонтрагента
          И СчетФактура.ДоговорКонтрагента <> ДокОбъект.ДоговорКонтрагента.ДоговорГоловногоКонтрагента Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает договор";
          КонецЕсли;
          СтруктураРеквизиты.Вставить("ДоговорКонтрагента", ДокОбъект.ДоговорКонтрагента);

          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("Контрагент") <> Неопределено 
          И СчетФактура.Контрагент <> ДокОбъект.Контрагент
          И СчетФактура.Контрагент <> ДокОбъект.Контрагент.ГоловнойКонтрагент Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает контрагент";
          КонецЕсли;
          СтруктураРеквизиты.Вставить("Контрагент", ДокОбъект.Контрагент);

          Флаг = Ложь;
     КонецЕсли;
     Если МетаРекв.Найти("ВалютаДокумента") <> Неопределено И СчетФактура.ВалютаДокумента <> ДокОбъект.ВалютаДокумента Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Не совпадает валюта документа";
          КонецЕсли;
          СтруктураРеквизиты.Вставить("ВалютаДокумента", ДокОбъект.ВалютаДокумента);

          Флаг = Ложь;
     КонецЕсли;
     
     Если МетаРекв.Найти("СуммаДокумента") <> Неопределено И не ДокОбъект.Ссылка.СуммаДокумента = ДокОбъект.СуммаДокумента Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Изменилась сумма документа";
          КонецЕсли;
          НоваяСумма = Макс(0, СчетФактура.СуммаДокумента - ?(ЗначениеЗаполнено(ДокОбъект.Ссылка.СуммаДокумента),ДокОбъект.Ссылка.СуммаДокумента,0))+ДокОбъект.СуммаДокумента;
          
          СтруктураРеквизиты.Вставить("СуммаДокумента", НоваяСумма);

          Флаг = Ложь;
     КонецЕсли;
	 
	 Если МетаРекв.Найти("СуммаНДС") <> Неопределено И не ДокОбъект.Ссылка.СуммаНДС = ДокОбъект.СуммаНДС Тогда
          Если Сообщать Тогда
               Текст = Текст + ?(ПустаяСтрока(Текст),"", Символы.ПС) + " - Изменилась сумма документа";
          КонецЕсли;
          НоваяСуммаНДС = Макс(0, СчетФактура.СуммаНДС - ?(ЗначениеЗаполнено(ДокОбъект.Ссылка.СуммаНДС),ДокОбъект.Ссылка.СуммаНДС,0))+ДокОбъект.СуммаНДС;
          
          СтруктураРеквизиты.Вставить("СуммаНДС", НоваяСуммаНДС);

          Флаг = Ложь;
     КонецЕсли;
     
     Если Сообщать И НЕ ПустаяСтрока(Текст) Тогда
          Текст = "Обнаружены расхождения реквизитов в счете-фактуре: " + Строка(СчетФактура) + " и в документе-основании: " + Строка(ДокОбъект) + Символы.ПС + Текст;
          Если СчетФактура.ДокументыОснования.Количество()=1 Тогда
               флУдалосьПерезаполнить = ложь;
               Попытка
                    СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
                    Для каждого элемент из СтруктураРеквизиты цикл
                         СчетФактураОбъект[элемент.Ключ]=Элемент.Значение;
                    Конеццикла;
                    СчетФактураОбъект.мОбновлятьРеквизитыПриЗаписи = Ложь;
                    СчетФактураОбъект.Записать();
                    флУдалосьПерезаполнить = истина;
               Исключение
               КонецПопытки;
               Если флУдалосьПерезаполнить Тогда
                    Текст = Текст + Символы.ПС+"Реквизиты в счете-фактуре перезаполнены автоматически";
               Иначе
                    Текст = Текст + Символы.ПС+"Не удалось автоматически перезаполнить реквизиты. Для перезаполнения реквизитов необходимо открыть счет-фактуру и записать ее";
               КонецЕсли;
          Иначе
               Текст = Текст + Символы.ПС+"Внимание! У данного счета-фактуры несколько документов-оснований. Нельзя автоматически перезаполнить реквизиты";
          КонецЕсли;
          
          Сообщить(Текст, СтатусСообщения.Внимание);
     КонецЕсли;

     Возврат Флаг;

 КонецФункции
 
 // Определяет дату начала налогового периода для НДС по учетной политике
Функция НачалоПериодаПоУчетнойПолитике(Организация, Дата, Отказ=Ложь, УчетнаяПолитика=Неопределено) Экспорт
	Если УчетнаяПолитика=неопределено Тогда
		УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация, "Нал");
	ИначеЕсли Не УчетнаяПолитика.Свойство("НДСНалоговыйПериод") тогда
		 Отказ=Истина;
	КонецЕсли; 	
	Если Отказ Тогда Возврат НачалоМесяца(Дата); КонецЕсли;
	
	Возврат ?(УчетнаяПолитика.НДСНалоговыйПериод=Перечисления.Периодичность.Квартал, НачалоКвартала(Дата), НачалоМесяца(Дата));
КонецФункции

// Определяет дату окончания налогового периода для НДС по учетной политике
Функция КонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ=Ложь, УчетнаяПолитика=Неопределено) Экспорт
	Если УчетнаяПолитика=неопределено Тогда
		УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация, "Нал");
	ИначеЕсли Не УчетнаяПолитика.Свойство("НДСНалоговыйПериод") тогда
		 Отказ=Истина;
	КонецЕсли;
	Если Отказ Тогда Возврат КонецМесяца(Дата); КонецЕсли;

	Возврат ?(УчетнаяПолитика.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал, КонецКвартала(Дата), КонецМесяца(Дата));
КонецФункции