&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделГТД()
	НовыйРаздел=Объект.Разделы.Добавить();
	НовыйРаздел.СтавкаНДС=НастройкиПользователяСервер.ЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	НовыйРаздел.СтавкаПошлины=0;
	НовыйРаздел.ID=Новый УникальныйИдентификатор;
	Элементы.Разделы.ТекущаяСтрока=НовыйРаздел.ПолучитьИдентификатор();
КонецПроцедуры 

&НаСервере
Функция КоэффициентПересчета(СтруктураШД)
	Если Не СтруктураШД.ВалютаДокумента=СтруктураШД.ВалютаРегламентированногоУчета Тогда
		Если Число(СтруктураШД.КурсДокумента)=0 Или Число(СтруктураШД.КратностьДокумента)=0 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат СтруктураШД.КурсДокумента/СтруктураШД.КратностьДокумента;		
	КонецЕсли;
	Возврат 1; 
КонецФункции

&НаСервере
Процедура ВычислимСуммы(Параметры=Неопределено)
	Если Параметры=Неопределено Тогда Возврат; КонецЕсли;
	ТекущаяСтрокаРазделы=Объект.Разделы.НайтиПоИдентификатору(Параметры.ТекущаяСтрокаРаздел);

	ВсегоСтоимость=0;
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_Разделы", ТекущаяСтрокаРазделы.ID));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость=ВсегоСтоимость+ЭлементМассива.ТаможеннаяСтоимость;
	КонецЦикла;

	ТекущаяСтрокаРазделы.ТаможеннаяСтоимость=ВсегоСтоимость;
	ТекущаяСтрокаРазделы.СуммаПошлины=ВсегоСтоимость*ТекущаяСтрокаРазделы.СтавкаПошлины/100;
	ТекущаяСтрокаРазделы.СуммаНДС=РассчитатьСуммуНДС(ВсегоСтоимость, ТекущаяСтрокаРазделы.СуммаПошлины, ТекущаяСтрокаРазделы.СтавкаНДС);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлению(ДокументПоступления, Параметры) Экспорт
	СтруктураШД=Новый Структура;
	СтруктураШД.Вставить("ВалютаДокумента", ДокументПоступления.ВалютаДокумента);
	СтруктураШД.Вставить("КурсДокумента", ДокументПоступления.КурсВзаиморасчетов);
	СтруктураШД.Вставить("КратностьДокумента", ДокументПоступления.КратностьВзаиморасчетов);
	СтруктураШД.Вставить("ВалютаРегламентированногоУчета", МодульВалютногоУчета.ПолучитьВалюту());
	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);
	
	ТаблицаЗначенийТовары=ДокументПоступления.Товары.Выгрузить();
	ТекущаяСтрокаРазделы=Объект.Разделы.НайтиПоИдентификатору(Параметры.ТекущаяСтрокаРаздел);
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийТовары Цикл
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗначений);
		НоваяСтрока.ID_Разделы=ТекущаяСтрокаРазделы.ID;
		НоваяСтрока.ДокументПартии=ДокументПоступления;
		НоваяСтрока.ФактурнаяСтоимость=СтрокаТаблицыЗначений.Сумма; 
		НоваяСтрока.ТаможеннаяСтоимость=СтрокаТаблицыЗначений.Сумма;
		НоваяСтрока.ID=Новый УникальныйИдентификатор;
		Если НЕ КоэффициентПересчета=1 Тогда
			НоваяСтрока.ТаможеннаяСтоимость=Окр(НоваяСтрока.ТаможеннаяСтоимость*КоэффициентПересчета, 2);
			НоваяСтрока.СуммаНДС=Окр(НоваяСтрока.СуммаНДС*КоэффициентПересчета, 2);
		КонецЕсли;		
	КонецЦикла;
	ВычислимСуммы(Параметры);
КонецПроцедуры

&НаСервере
Функция НайтиПоРеквизиту(Номенклатура)
	Возврат Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД", Объект.НомерГТД,,Номенклатура);
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСуммуНДС(ТаможеннаяСтоимость, СуммаПошлины, СтавкаНДС)
	Возврат УчетНалоговСервер.РассчитатьСуммуНДС(ТаможеннаяСтоимость+СуммаПошлины, Истина, Ложь, УчетНалоговСервер.СтавкаНДС(СтавкаНДС));
КонецФункции 

&НаСервере
Процедура ОчиститьКолонкуПоРазделу(ID, ИмяКолонки, ЗначениеОчистки = 0)
	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("ID_Разделы", ID));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ЭлементМассива[ИмяКолонки] = ЗначениеОчистки;
	КонецЦикла;
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ДокументПоступления(ДокументПоступления, Параметры) Экспорт
	Если ДокументПоступления=Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ДокументПоступления)=Тип("Массив") Тогда ДокументПоступления=ДокументПоступления[0]; КонецЕсли;
	ЗаполнитьПоПоступлению(ДокументПоступления, Параметры);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговора()
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент=Объект.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	СтруктураКурса=МодульВалютногоУчета.КурсВалюты(Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	Объект.КурсВзаиморасчетов=СтруктураКурса.Курс;
	Объект.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
КонецПроцедуры 

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Контрагент" Тогда				
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПокупателем,СКомиссионером"));

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);
		
	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	    ПриИзмененииДоговора();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя="СтатьяЗатратНДС" Или Элемент.Имя="СтатьяЗатратНДСПриЕНВД" Тогда		
		СтандартнаяОбработка=Ложь;

		Если Элемент.Имя="СтатьяЗатратНДС" Тогда
			ЗначениеОтбора=ПредопределенноеЗначение("Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД");
		Иначе
			ЗначениеОтбора=ПредопределенноеЗначение("Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД");
		КонецЕсли; 

		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидДеятельностиДляНалоговогоУчетаЗатрат", ЗначениеОтбора));
		ОткрытьФорму("Справочник.СтатьиЗатрат.ФормаСписка", ПараметрыФормы, Элемент, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
		
	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");
		
	ИначеЕсли стрКоманда="Подбор" Тогда
		ИмяТабличнойЧасти=стрЗаменить(стрКоманда, "Подбор_", "");

		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);
		
	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если НЕ стрТабличнаяЧасть="СтатьиЗатрат" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 
	Если НЕ стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ID_Разделы", Элементы.Разделы.ТекущиеДанные.ID);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
		Если ПустаяСтрока(ТекущиеДанные.ID) Тогда
			ТекущиеДанные.ID=Новый УникальныйИдентификатор;
		КонецЕсли;
		Если НЕ стрТабличнаяЧасть="Товары" Тогда
			ТекущиеДанные.ID_Товары=СтруктураПоиска.ID_Товары;
		КонецЕсли;
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;
	
	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Состав косвенных расходов"

&НаКлиенте
Процедура кпРазделы_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Разделы"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ДобавитьРаздел" Тогда
		ДобавитьРазделГТД();

	ИначеЕсли стрКоманда="УдалитьРаздел" Тогда
		Если Объект.Разделы.Количество() = 1 Тогда 
			ПоказатьПредупреждение(, "В ГТД должен быть хотя бы один раздел!");
			Возврат;
		КонецЕсли;
		МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_Разделы", Элементы.Разделы.ТекущиеДанные.ID));
		Для каждого ЭлементМассива Из МассивСтрок Цикл
			Объект.Товары.Удалить(ЭлементМассива);
		КонецЦикла;
		Объект.Разделы.Удалить(Элементы.Разделы.ТекущаяСтрока);

	ИначеЕсли стрКоманда="РаспределитьТаможенныйСбор" Тогда
		тпРазделы_РаспределитьТаможенныйСбор();

	ИначеЕсли стрКоманда="РаспределитьПошлинуНДС" Тогда
		тпРазделы_РаспределитьПошлинуНДС(Элементы.Разделы.ТекущиеДанные.ПолучитьИдентификатор());

	ИначеЕсли стрКоманда="РаспределитьПошлинуНДС_ПоВсемРазделам" Тогда
		Для каждого СтрокаКоллекции Из Объект.Разделы Цикл
			тпРазделы_РаспределитьПошлинуНДС(Элементы.Разделы.ТекущиеДанные.ПолучитьИдентификатор());	
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпРазделы_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Разделы.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли; 
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("ID_Разделы", ТекущиеДанные.ID);

	Элементы.Товары.ОтборСтрок=Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура тпРазделы_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРазделы_ПередУдалением(Элемент, Отказ)
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("ID_Разделы", Элемент.ТекущиеДанные.ID);

	МассивСтрок=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.Товары.Удалить(СтрокаКоллекции);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура тпРазделы_РаспределитьПоТаблице(ТекущаяСтрокаРаздел)
	ТекущаяСтрокаРазделы=Объект.Разделы.НайтиПоИдентификатору(ТекущаяСтрокаРаздел);
	Реквизит=РеквизитФормыВЗначение("Объект");
	МассивСтрок=Реквизит.Товары.НайтиСтроки(Новый Структура("ID_Разделы", ТекущаяСтрокаРазделы.ID));
	УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(МассивСтрок, ТекущаяСтрокаРазделы.ТаможеннаяСтоимость, "ФактурнаяСтоимость", 1, "ТаможеннаяСтоимость");
	ЗначениеВРеквизитФормы(Реквизит,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура тпРазделы_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Разделы", "");
	ТекущиеДанные=Элементы.Разделы.ТекущиеДанные;
	
	Если стрКолонка="ТаможеннаяСтоимость" Тогда
		ТекущиеДанные.СуммаПошлины=ТекущиеДанные.ТаможеннаяСтоимость*ТекущиеДанные.СтавкаПошлины/100;
		ТекущиеДанные.СуммаНДС=РассчитатьСуммуНДС(ТекущиеДанные.ТаможеннаяСтоимость, ТекущиеДанные.СуммаПошлины, ТекущиеДанные.СтавкаНДС);
		
		тпРазделы_РаспределитьПоТаблице(Элементы.Разделы.ТекущиеДанные.ПолучитьИдентификатор());		

	ИначеЕсли стрКолонка="СтавкаПошлины" Тогда
		ТекущиеДанные.СуммаПошлины=ТекущиеДанные.ТаможеннаяСтоимость*ТекущиеДанные.СтавкаПошлины/100;
		ТекущиеДанные.СуммаНДС=РассчитатьСуммуНДС(ТекущиеДанные.ТаможеннаяСтоимость, ТекущиеДанные.СуммаПошлины, ТекущиеДанные.СтавкаНДС);
		Если ТекущиеДанные.СуммаПошлины=0 Тогда
			ОчиститьКолонкуПоРазделу(ТекущиеДанные.ID, "СуммаПошлины");
		КонецЕсли;

	ИначеЕсли стрКолонка="СуммаПошлины" Тогда
		ТекущиеДанные.СуммаНДС=РассчитатьСуммуНДС(ТекущиеДанные.ТаможеннаяСтоимость, ТекущиеДанные.СуммаПошлины, ТекущиеДанные.СтавкаНДС);
		Если ТекущиеДанные.СуммаПошлины=0 Тогда
			ОчиститьКолонкуПоРазделу(ТекущиеДанные.ID, "СуммаПошлины");
		КонецЕсли;

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=РассчитатьСуммуНДС(ТекущиеДанные.ТаможеннаяСтоимость, ТекущиеДанные.СуммаПошлины, ТекущиеДанные.СтавкаНДС);
		Если ТекущиеДанные.СуммаНДС=0 Тогда
			ОчиститьКолонкуПоРазделу(ТекущиеДанные.ID, "СуммаНДС");
		КонецЕсли;

	ИначеЕсли стрКолонка="СуммаНДС" Тогда
		Если ТекущиеДанные.СуммаНДС=0 Тогда
			ОчиститьКолонкуПоРазделу(ТекущиеДанные.ID, "СуммаНДС");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура тпРазделы_РаспределитьТаможенныйСбор()
	МассивТаможенныйСбор=ОбщегоНазначения.РаспределитьПропорционально(Объект.ТаможенныйСбор, Объект.Товары.Выгрузить(,"ТаможеннаяСтоимость"), 2);
	Для каждого СтрокаКоллекции Из Объект.Товары Цикл
		Индекс=Объект.Товары.Индекс(СтрокаКоллекции);
		СтрокаКоллекции.ТаможенныйСбор=?(МассивТаможенныйСбор=Неопределено, 0, МассивТаможенныйСбор[Индекс]);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура тпРазделы_РаспределитьПошлинуНДС(Индекс)
	СтрокаТабличнойЧасти=Объект.Разделы.НайтиПоИдентификатору(Индекс);
	СуммаПошлины = СтрокаТабличнойЧасти.СуммаПошлины;
	СуммаНДС     = СтрокаТабличнойЧасти.СуммаНДС;
	
	МассивСтрок  = Объект.Товары.НайтиСтроки(Новый Структура("ID_Разделы", СтрокаТабличнойЧасти.ID));
	ВсегоСтоимость=0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость=ВсегоСтоимость+ЭлементМассива.ТаможеннаяСтоимость;
	КонецЦикла;
	Если ВсегоСтоимость=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Общая сумма фактурной стоимости раздела №"+СокрЛП(СтрокаТабличнойЧасти.ТаможеннаяСтоимость)+" нулевая! Распределение невозможно."); Возврат;
	КонецЕсли;
	
	СтрокаМаксимальнойСуммы  = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма        = 0; // Значение максимальной суммы.
	НепогашеннаяСуммаПошлины = СуммаПошлины;
	НепогашеннаяСуммаНДС     = СуммаНДС;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ДельтаПошлины = СуммаПошлины * ЭлементМассива.ТаможеннаяСтоимость / ВсегоСтоимость;
		Если ДельтаПошлины < 0 Тогда
			ДельтаПошлины = Макс(НепогашеннаяСуммаПошлины, ДельтаПошлины)
		Иначе
			ДельтаПошлины = Мин(НепогашеннаяСуммаПошлины, ДельтаПошлины)
		КонецЕсли; 
		ДельтаНДС = СуммаНДС * ЭлементМассива.ТаможеннаяСтоимость / ВсегоСтоимость;
		Если ДельтаНДС < 0 Тогда
			ДельтаНДС = Макс(НепогашеннаяСуммаНДС, ДельтаНДС)
		Иначе
			ДельтаНДС = Мин(НепогашеннаяСуммаНДС, ДельтаНДС)
		КонецЕсли; 
		Если ЭлементМассива.ТаможеннаяСтоимость > МаксимальнаяСумма  Тогда
			МаксимальнаяСумма       = ЭлементМассива.ТаможеннаяСтоимость;
			СтрокаМаксимальнойСуммы = ЭлементМассива;
		КонецЕсли;
		ЭлементМассива.СуммаПошлины = ДельтаПошлины;
		НепогашеннаяСуммаПошлины = НепогашеннаяСуммаПошлины - ЭлементМассива.СуммаПошлины;
		ЭлементМассива.СуммаНДС = ДельтаНДС;
		НепогашеннаяСуммаНДС = НепогашеннаяСуммаНДС - ЭлементМассива.СуммаНДС;
	КонецЦикла;
	Если НепогашеннаяСуммаПошлины > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
		СтрокаМаксимальнойСуммы.СуммаПошлины = СтрокаМаксимальнойСуммы.СуммаПошлины + НепогашеннаяСуммаПошлины;
	КонецЕсли;
	Если НепогашеннаяСуммаНДС > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
		СтрокаМаксимальнойСуммы.СуммаНДС = СтрокаМаксимальнойСуммы.СуммаНДС + НепогашеннаяСуммаНДС;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если стрКоманда="ДобавитьИзПоступления" Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТекущаяСтрокаРаздел",Элементы.Разделы.ТекущиеДанные.ПолучитьИдентификатор());
		
		ДокументПоступления=ПредопределенноеЗначение("Документ.ПоступлениеТоваровУслуг.ПустаяСсылка");
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ДокументПоступления", ЭтотОбъект, СтруктураПараметров);
		ПоказатьВводЗначения(ОписаниеОповещения, ДокументПоступления, "Выберите документ поступления");	
		
	ИначеЕсли стрКоманда="ЗаполнитьСерииПоНомеруГТД" Тогда
		Если НЕ Объект.НомерГТД.Пустая() Тогда
			Для каждого СтрокаКоллекции Из Объект.Товары Цикл
				Если СтрокаКоллекции.СерияНоменклатуры.Пустая() Тогда
					СтрокаКоллекции.СерияНоменклатуры=НайтиПоРеквизиту(СтрокаКоллекции.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Элементы.Разделы.ТекущиеДанные=Неопределено; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_Разделы=Элементы.Разделы.ТекущиеДанные.ID;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВычислимСуммы();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ВычислимСуммы();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаАкциза,СтавкаНДС");

		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.Разделы.Количество()=0 Тогда ДобавитьРазделГТД(); КонецЕсли;
	КонецЕсли;

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры