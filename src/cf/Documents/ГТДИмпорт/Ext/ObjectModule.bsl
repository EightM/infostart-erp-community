Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	ПредставлениеТабличнойЧасти=ЭтотОбъект.Метаданные().ТабличныеЧасти["Товары"].Представление();
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И СтрокаТабличнойЧасти.КоличествоМест=0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;		
		СтрокаСообщения="Номер ГТД в серии не совпадает с номером ГТД документа!";
		СтрокаНачалаСообщенияОбОшибке="В строке номер """+СокрЛП(СтрокаТабличнойЧасти.НомерСтроки)+""" табличной части """+ПредставлениеТабличнойЧасти+""": ";
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям И СтрокаТабличнойЧасти.СерияНоменклатуры.НомерГТД <> НомерГТД  Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьПоПоступлению(ДокументПоступления, ID_Разделы) Экспорт
	СтруктураШД=Новый Структура;
	СтруктураШД.Вставить("ВалютаДокумента", ДокументПоступления.ВалютаДокумента);
	СтруктураШД.Вставить("КурсДокумента", ДокументПоступления.КурсВзаиморасчетов);
	СтруктураШД.Вставить("КратностьДокумента", ДокументПоступления.КратностьВзаиморасчетов);
	СтруктураШД.Вставить("ВалютаРегламентированногоУчета", МодульВалютногоУчета.ПолучитьВалюту("Бух"));
	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);
	
	ТаблицаЗначенийТовары=ДокументПоступления.Товары.Выгрузить();
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийТовары Цикл
		НоваяСтрока=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗначений);
		НоваяСтрока.ID_Разделы=ID_Разделы;
		НоваяСтрока.ДокументПартии=ДокументПоступления;
		НоваяСтрока.ФактурнаяСтоимость=СтрокаТаблицыЗначений.Сумма; 
		НоваяСтрока.ТаможеннаяСтоимость=СтрокаТаблицыЗначений.Сумма;
		Если НЕ КоэффициентПересчета=1 Тогда
			НоваяСтрока.ТаможеннаяСтоимость=Окр(НоваяСтрока.ТаможеннаяСтоимость*КоэффициентПересчета, 2);
			НоваяСтрока.СуммаНДС=Окр(НоваяСтрока.СуммаНДС*КоэффициентПересчета, 2);
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_Закупки(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	НоваяСтрока=Движения.ВзаиморасчетыСКонтрагентами.Добавить();
	НоваяСтрока.Период=Дата;
	НоваяСтрока.Регистратор=Ссылка;
	НоваяСтрока.Активность=Истина;
	НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
	НоваяСтрока.Организация=Организация;
	НоваяСтрока.Контрагент=Контрагент;
	НоваяСтрока.ДоговорКонтрагента=ДоговорКонтрагента;
	НоваяСтрока.СуммаБух=СтруктураШД.СуммаВзаиморасчетов;
	//НоваяСтрока.СуммаВал=СтруктураШД.СуммаВзаиморасчетов;
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	тзДвижения=Движения.ПартииТоваровНаСкладах.ВыгрузитьКолонки();
	Для Каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если ЗначениеЗаполнено(СтрокаКоллекции.ДокументПартии) Тогда
			НоваяСтрока.ДокументОприходования=СтрокаКоллекции.ДокументПартии;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ЗаказПокупателя) Тогда
			НоваяСтрока.Заказ=СтрокаКоллекции.ЗаказПокупателя;
		КонецЕсли;		
	КонецЦикла;
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(0, "Количество");
	тзДвижения.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");
	Если СтруктураШД.УчетнаяПолитика.СпособОценкиМПЗ=Перечисления.СпособыОценки.ПоСредней Тогда
		тзДвижения.ЗаполнитьЗначения(Неопределено, "ДокументОприходования");
	КонецЕсли;

	Движения.ПартииТоваровНаСкладах.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_Закупки(СтруктураШД, СтруктураТД, Отказ)
	тзДвижения=Движения.Закупки.ВыгрузитьКолонки();

	Для Каждого СтрокаКоллекции Из СтруктураТД.Товары цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Стоимость=НоваяСтрока.Стоимость+НоваяСтрока.НДС;
		НоваяСтрока.ДокументЗакупки=Ссылка;
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(0, "Количество");
	тзДвижения.ЗаполнитьЗначения(Подразделение, "Подразделение");
	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	тзДвижения.ЗаполнитьЗначения(Контрагент, "Контрагент");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");

	Движения.Закупки.Загрузить(тзДвижения);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Функция КоэффициентПересчета(СтруктураШД)
	Если Не СтруктураШД.ВалютаДокумента=СтруктураШД.ВалютаРегламентированногоУчета Тогда
		Если Число(СтруктураШД.КурсДокумента)=0 Или Число(СтруктураШД.КратностьДокумента)=0 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат СтруктураШД.КурсДокумента/СтруктураШД.КратностьДокумента;		
	КонецЕсли;
	Возврат 1; 
КонецФункции
 
Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти)
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураРеквизитов.Вставить("Подразделение", Подразделение);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
		тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
	КонецЦикла;
КонецПроцедуры
 
Функция СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок)
	ОписаниеТипаЧисло=ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);

	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("Стоимость"	 	   , ОписаниеТипаЧисло); //Сумма
	тзДанные.Колонки.Добавить("СтоимостьНУ"	 	   , ОписаниеТипаЧисло); //Сумма
	тзДанные.Колонки.Добавить("НДС"	 	   		   , ОписаниеТипаЧисло); //СуммаНДС  ---- УДАЛИТЬ
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти"); //НомерСтроки
	тзДанные.Колонки.Добавить("НомерГТД");		
	тзДанные.Колонки.Добавить("Качество");
	тзДанные.Колонки.Добавить("СтавкаНДС");
	тзДанные.Колонки.Добавить("Склад");	
	тзДанные.Колонки.Добавить("СтатусПартии");
	тзДанные.Колонки.Добавить("ВидДоговораПартии");
	
	СуммаВзаиморасчетов=0;
		
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		ТекРаздел=Разделы.Найти(СтрокаКоллекции.ID_Разделы, "ID");
		СтрокаКоллекции.СтавкаНДС=ТекРаздел.СтавкаНДС;

		Если ЗначениеЗаполнено(СтрокаКоллекции.ДокументПартии) Тогда
			Если УправлениеМетаданными.ЕстьРеквизит("ДоговорКонтрагента",СтрокаКоллекции.ДокументПартии.Метаданные()) Тогда
				СтрокаКоллекции.ВидДоговораПартии=СтрокаКоллекции.ДокументПартии.ДоговорКонтрагента.ВидДоговора;
			КонецЕсли;
			Если УправлениеМетаданными.ЕстьРеквизит("Склад",СтрокаКоллекции.ДокументПартии.Метаданные()) Тогда
				СтрокаКоллекции.Склад=СтрокаКоллекции.ДокументПартии.Склад;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(СтрокаКоллекции.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаКоллекции.Склад=СтрокаКоллекции.Склада;
		КонецЕсли;
		
		СтрокаКоллекции.Качество=Справочники.Качество.Новый;
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент /СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		СтрокаКоллекции.ЕдиницаИзмерения=СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		Если НЕ СтрокаКоллекции.ВестиПартионныйУчетПоСериям Тогда
			СтрокаКоллекции.СерияНоменклатуры=Неопределено;
		КонецЕсли;

		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;

		СтрокаКоллекции.СуммаНДС=Окр(СтрокаКоллекции.СуммаНДС*КоэффициентПересчета, 2);	

		СуммаТП=Окр(СтрокаКоллекции.СуммаПошлины*КоэффициентПересчета, 2); //таможенная пошлина
		СуммаТС=Окр(СтрокаКоллекции.ТаможенныйСбор*КоэффициентПересчета, 2); //таможенный сбор

		Стоимость=СуммаТП+СуммаТС;

		СтрокаКоллекции.Стоимость=Стоимость;
		СтрокаКоллекции.СтоимостьНУ=Стоимость;
		СтрокаКоллекции.НДС=СтрокаКоллекции.СуммаНДС;
		
		Если СтрокаКоллекции.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаКоллекции.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
		Иначе
			СтрокаКоллекции.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;		
		
		СуммаВзаиморасчетов=СуммаВзаиморасчетов+Стоимость+СтрокаКоллекции.СуммаНДС;
	КонецЦикла;
	СтруктураШД.Вставить("СуммаВзаиморасчетов",  СуммаВзаиморасчетов);

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");
	
	Возврат тзДанные;
КонецФункции

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ) Экспорт
	Если НЕ СтруктураШД.УчитыватьНДС тогда Возврат; КонецЕсли;
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС тогда Возврат; КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	""НДС"" КАК Содержание,
	|	2 КАК ПорядокОтражения,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
	|	ГТДИмпортТовары.СерияНоменклатуры,
	|	ГТДИмпортТовары.ЗаказПокупателя,
	|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.Склад КАК Склад,
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументОприходования,
	|	ГТДИмпортТовары.ТОП КАК ТОП,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.ТаможеннаяСтоимость+ГТДИмпортТовары.СуммаПошлины КАК Сумма,
//	|	ГТДИмпортТовары.ФактурнаяСтоимость+ГТДИмпортТовары.СуммаПошлины-ГТДИмпортТовары.СуммаНДС КАК Сумма,
	|	ГТДИмпортТовары.СуммаНДС как НДС,
	|	ГТДИмпортТовары.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	ГТДИмпортТовары.ФактурнаяСтоимость КАК ФактурнаяСтоимость //Резеда
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.ID = ГТДИмпортТовары.ID_Разделы
	|
	|ГДЕ
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаНДС > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки Возр,
	|	ПорядокОтражения Возр
	|";	
	ТаблицаПоТоварам=Запрос.Выполнить().Выгрузить();
	Если ТаблицаПоТоварам.Количество()=0 тогда Возврат; КонецЕсли;

	ВзаиморасчетыСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам,  СтруктураШД, Ложь); //, Разделы							  

	ТаблицаДляДвижений = ТаблицаПоТоварам.Скопировать();

	УчетНДС.ДобавитьСчетУчетаНДС(ТаблицаДляДвижений); //**********************
	// Удалим все строки, не относящиеся непосредственно к НДС
	ТаблицаДляДвижений.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"ВидЦенности");
	
	// Отразим в регистре "НДС предъявленный"
	УчетНДС.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШД, ТаблицаДляДвижений, "Товары", Движения, Отказ);
	
	ТаблицаДляНДСПартии = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаДляДвижений
				, Новый Структура("ДокументОприходования, Склад, ВидЦенности, СтавкаНДС, 
						|Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Услуга,НДС,СуммаБезНДС,ТОП","Партия"));
	ТаблицаДляНДСПартии.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	////////////////////////////////////////////////////////////////////
	// При необходимости  - отражаем в регистре партионного учета для НДС
	
	Если ТаблицаДляНДСПартии.Количество()=0 Тогда Возврат; КонецЕсли; 

	ТаблицаДляНДСПартии.Колонки.Добавить("СчетУчетаНДС");
	Для каждого СтрокаКоллекции Из ТаблицаДляНДСПартии Цикл
		УчетНДС.ЗаполнитьСчетУчета(СтрокаКоллекции);
	КонецЦикла;	//2016

	ТаблицаДляНДСПартии.ЗаполнитьЗначения(Истина,"Услуга");
	
    ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров;

	УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШД,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли;
	
	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту("Бух");
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Контрагент=Неопределено;
		ДоговорКонтрагента=Неопределено;
		Сделка=Неопределено;
		
		НовыйРаздел=Разделы.Добавить();
		НовыйРаздел.ID=Новый УникальныйИдентификатор;
		НовыйРаздел.СтавкаНДС=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
		//НовыйРаздел.СтавкаПошлины=СтавкаПошлины;
		//НовыйРаздел.ТаможеннаяСтоимость=Товары.Итог("ТаможеннаяСтоимость");
		//НовыйРаздел.СуммаНДС=Товары.Итог("СуммаНДС");

		ЗаполнитьПоПоступлению(Основание, НовыйРаздел.ID);
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	ОбщегоНазначения.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	Для каждого СтрокаКоллекции Из Разделы Цикл
		тзБуфер=Товары.Выгрузить(Товары.НайтиСтроки(Новый Структура("ID_Разделы", СтрокаКоллекции.ID)));
		Если НЕ тзБуфер.Итог("СуммаПошлины")=СтрокаКоллекции.СуммаПошлины Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" сумма пошлины не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ тзБуфер.Итог("СуммаНДС")=СтрокаКоллекции.СуммаНДС Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" сумма НДС не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	Если НЕ Товары.Итог("ТаможенныйСбор")=ТаможенныйСбор Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма таможенного сбора товаров не совпадает с таможенном сбором в шапке документа", Отказ, Заголовок);
	КонецЕсли;	

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);

	//Формирование значений реквизитов табличных частей
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Товары", СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));

	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Покупка");

мСписокДопустимыхВидовДоговоров=Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

мСтруктураПараметровДляПолученияДоговора=Новый Структура();
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);
мСтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора", ДополнительныеСвойства.ВалютаБухУчета);
мСтруктураПараметровДляПолученияДоговора.Вставить("ВидСравненияВалютыВзаиморасчетов", "=");