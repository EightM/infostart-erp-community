&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Видимость=НЕ Элементы.ШапкаПанель1.Видимость;		
		Элементы.ШапкаПанель1.Видимость=Видимость;
		Элементы.ШапкаПанель2.Видимость=Видимость;
		Элементы[Команда.Имя].Картинка=?(Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоКрасная);
		Элементы.ШапкаИнфо.Видимость=Не Видимость;

		МассивДанных=Новый Массив;
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" Организация: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Организация));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Куратор ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Ответственный));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Период с: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.ДатаНачалаРасчета)+" по "+СокрЛП(Объект.ДатаКонцаРасчета));

		Элементы.ШапкаИнфо.Заголовок=Новый ФорматированнаяСтрока(МассивДанных);		
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриВыбореСчета()
	Если Объект.Счет.Пустая() Тогда Объект.СубконтоИсточник=0; КонецЕсли; НомерСубконто=0;
	Для Каждого СтрокаКоллекции Из Объект.Счет.ВидыСубконто Цикл
		НомерСубконто=СтрокаКоллекции.НомерСтроки; ТипЗначения=СтрокаКоллекции.ВидСубконто.ТипЗначения;
		Элементы["ЗначениеСубконто"+НомерСубконто+"_Добавить"].Заголовок=СтрокаКоллекции.ВидСубконто.Наименование;
		Элементы.СубконтоИсточник.СписокВыбора.НайтиПоЗначению(НомерСубконто).Представление=СтрокаКоллекции.ВидСубконто.Наименование;
		
		ОбъектКолонка=Элементы["ЗначениеСубконто"+НомерСубконто+"Значение"];
		ОбъектКолонка.Доступность=Истина;
		ОбъектКолонка.ОграничениеТипа=ТипЗначения;
	КонецЦикла;
	Пока НомерСубконто < 3 Цикл
		НомерСубконто=НомерСубконто+1;
		Элементы["ЗначениеСубконто"+НомерСубконто+"_Добавить"].Заголовок="Субконто "+НомерСубконто;
		Элементы.СубконтоИсточник.СписокВыбора.НайтиПоЗначению(НомерСубконто).Представление="Субконто "+НомерСубконто;
		ОбъектКолонка=Элементы["ЗначениеСубконто"+НомерСубконто+"Значение"];
		ОбъектКолонка.Доступность=Ложь;
	КонецЦикла;
	
	Элементы.СоответствиеЗначенийСубконто.Доступность=Объект.УсловиеСубконто И НЕ Объект.КорСчет.Пустая() И НЕ Объект.Счет.Пустая();
КонецПроцедуры

&НаСервере
Процедура ПриВыбореКорСчета()
	Если Объект.КорСчет.Пустая() Тогда Объект.СубконтоПриемник=0; КонецЕсли; НомерСубконто=0;
	
	Для каждого СтрокаКоллекции Из Объект.КорСчет.ВидыСубконто Цикл
		НомерСубконто=СтрокаКоллекции.НомерСтроки;
		КолонкаСубконто=Элементы["ТоварыСубконто"+НомерСубконто];
		КолонкаСубконто.Видимость=Истина;
		КолонкаСубконто.Доступность=Истина;
		КолонкаСубконто.Заголовок=СтрокаКоллекции.ВидСубконто.Наименование;
		КолонкаСубконто.ОграничениеТипа=СтрокаКоллекции.ВидСубконто.ТипЗначения;
		Элементы.СубконтоПриемник.СписокВыбора.НайтиПоЗначению(НомерСубконто).Представление=СтрокаКоллекции.ВидСубконто.Наименование;
	КонецЦикла;
	Пока НомерСубконто < 3 Цикл
		НомерСубконто=НомерСубконто+1;
		КолонкаСубконто=Элементы["ТоварыСубконто"+НомерСубконто];
		КолонкаСубконто.Заголовок="Субконто "+НомерСубконто;
		Если Объект.КорСчет.Пустая() Тогда
			КолонкаСубконто.Доступность=Ложь;
		Иначе
			КолонкаСубконто.Видимость=Ложь;
		КонецЕсли;
		Элементы.СубконтоПриемник.СписокВыбора.НайтиПоЗначению(НомерСубконто).Представление="Субконто "+НомерСубконто;
	КонецЦикла;
	
	Элементы.СоответствиеЗначенийСубконто.Доступность=Объект.УсловиеСубконто И НЕ Объект.КорСчет.Пустая() И НЕ Объект.Счет.Пустая();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	СчетВыбран=НЕ Объект.Счет.Пустая(); КорСчетВыбран=НЕ Объект.КорСчет.Пустая();
	Элементы.СчетИсточник.Доступность=Объект.УсловиеСубконто;
	Элементы.СубконтоИсточник.Доступность=Объект.УсловиеСубконто И СчетВыбран;
	
	Элементы.СчетПриемник.Доступность=Объект.УсловиеСубконто;
	Элементы.СубконтоПриемник.Доступность=Объект.УсловиеСубконто И КорСчетВыбран;
	
	Элементы.ГруппаПараметрыИсточника.Доступность=Объект.УсловиеСубконто;
	Элементы.ГруппаПараметрыПриемника.Доступность=Объект.УсловиеСубконто;
	Элементы.СоответствиеЗначенийСубконто.Доступность=Объект.УсловиеСубконто И КорСчетВыбран И СчетВыбран;
	
	Если НЕ Объект.УсловиеСубконто Тогда
		Объект.СубконтоИсточник=0;
		Объект.СубконтоПриемник=0;
		Объект.СоответствиеЗначенийСубконто.Очистить();
	КонецЕсли; 
КонецПроцедуры

&НаСервере 
Функция СписокСубконто(ВыбСчет)
	стрСубконто1="";  стрСубконто2=""; стрСубконто3="";
	
	Для каждого СтрокаКоллекции Из ВыбСчет.ВидыСубконто Цикл
		Результат=Объект.КорСчет.ВидыСубконто.Найти(СтрокаКоллекции.ВидСубконто);
		Если Результат=Неопределено Тогда Продолжить; КонецЕсли; 
		Если СтрокаКоллекции.НомерСтроки=1 Тогда
			стрСубконто1="Субконто"+Результат.НомерСтроки;
		ИначеЕсли СтрокаКоллекции.НомерСтроки=2 Тогда
			стрСубконто2="Субконто"+Результат.НомерСтроки;
		ИначеЕсли СтрокаКоллекции.НомерСтроки=3 Тогда
			стрСубконто3="Субконто"+Результат.НомерСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	спСубконто=Новый СписокЗначений;
	Если НЕ ПустаяСтрока(стрСубконто1) Тогда
		спСубконто.Добавить("Субконто1", стрСубконто1, Истина);
	КонецЕсли;
	Если НЕ ПустаяСтрока(стрСубконто2) Тогда
		спСубконто.Добавить("Субконто2", стрСубконто2, Истина);
	КонецЕсли;
	Если НЕ ПустаяСтрока(стрСубконто3) Тогда
		спСубконто.Добавить("Субконто3", стрСубконто3, Истина);
	КонецЕсли; 
	спСубконто.СортироватьПоПредставлению(НаправлениеСортировки.Возр);

	Возврат спСубконто; 
КонецФункции

&НаСервере 
Функция ОпределитьСубконто(ВыбСчет)
	стрСубконто1="Субконто10";  стрСубконто2="Субконто20"; стрСубконто3="Субконто30";
	
	Для каждого СтрокаКоллекции Из ВыбСчет.ВидыСубконто Цикл
		Результат=Объект.КорСчет.ВидыСубконто.Найти(СтрокаКоллекции.ВидСубконто);
		Если Результат=Неопределено Тогда Продолжить; КонецЕсли; 
		Если СтрокаКоллекции.НомерСтроки=1 Тогда
			стрСубконто1="Субконто"+Результат.НомерСтроки;
		ИначеЕсли СтрокаКоллекции.НомерСтроки=2 Тогда
			стрСубконто2="Субконто"+Результат.НомерСтроки;
		ИначеЕсли СтрокаКоллекции.НомерСтроки=3 Тогда
			стрСубконто3="Субконто"+Результат.НомерСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	спСубконто=Новый СписокЗначений;
	Если Прав(стрСубконто1, 1)<>"0" Тогда
		спСубконто.Добавить("Субконто1", стрСубконто1, Истина);
	КонецЕсли;
	Если Прав(стрСубконто2, 1)<>"0" Тогда
		спСубконто.Добавить("Субконто2", стрСубконто2, Истина);
	КонецЕсли;
	Если Прав(стрСубконто3, 1)<>"0" Тогда
		спСубконто.Добавить("Субконто3", стрСубконто3, Истина);
	КонецЕсли; 
	спСубконто.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	Результат=спСубконто.ОтметитьЭлементы("Укажите субконто для заполнения!");
	Если Не Результат Тогда Возврат ""; КонецЕсли;
	
	стрВыборСубконто="";
	Для каждого СтрокаКоллекции Из спСубконто Цикл
		Если Не СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли; 
		стрВыборСубконто=стрВыборСубконто+"
		|ИсточникДанных."+СтрокаКоллекции.Значение+" Как "+СтрокаКоллекции.Представление+",
		|";
	КонецЦикла; 
	
	Возврат стрВыборСубконто;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОстаткам(ВыбСчет, Постфикс, стрВыборСубконто)
	Если ТипЗнч(ВыбСчет)=Тип("Массив") Тогда ВыбСчет=ВыбСчет[0]; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", ВыбСчет);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Объект.ДатаКонцаРасчета,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетПриемник", Объект.КорСчет);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&СчетПриемник КАК Счет,
	|	"+стрВыборСубконто+"
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.СуммаОстаток"+Постфикс+" Как Доля,
	|	ИсточникДанных.СуммаОстаток"+Постфикс+" Как ДоляНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(,Счет = &Счет,,Организация = &Организация) КАК ИсточникДанных
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), Выборка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОборотам(ВыбСчет, Постфикс, стрВыборСубконто)
	Если ТипЗнч(ВыбСчет)=Тип("Массив") Тогда ВыбСчет=ВыбСчет[0]; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ДатаНачалаРасчета));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Объект.ДатаКонцаРасчета));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", ВыбСчет);
	Запрос.УстановитьПараметр("СчетПриемник", Объект.КорСчет);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&СчетПриемник КАК Счет,
	|	"+стрВыборСубконто+"
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.СуммаОборот"+Постфикс+" Как Доля,
	|	ИсточникДанных.СуммаОборот"+Постфикс+" Как ДоляНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаКонца,,Счет = &Счет,,Организация=&Организация) КАК ИсточникДанных
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), Выборка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПрямымЗатратам(ВыбСчет, Постфикс, стрВыборСубконто)
	Если ТипЗнч(ВыбСчет)=Тип("Массив") Тогда ВыбСчет=ВыбСчет[0]; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ДатаНачалаРасчета));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Объект.ДатаКонцаРасчета));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", ВыбСчет);
	Запрос.УстановитьПараметр("СчетПриемник", Объект.КорСчет);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&СчетПриемник КАК Счет,
	|	"+стрВыборСубконто+"
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.СуммаОборот"+Постфикс+" Как Доля,
	|	ИсточникДанных.СуммаОборот"+Постфикс+" Как ДоляНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаКонца,,Счет = &Счет,,Организация=&Организация) КАК ИсточникДанных
	|";
	тзРезультатЗапроса=Запрос.Выполнить().Выгрузить();
	
	стрКолонкиДляСвертки=""; КолонкаСтатья="";
	Если тзРезультатЗапроса.Количество()<>0 Тогда
		СтрокаЗапроса=тзРезультатЗапроса[0];
		Для Каждого ИмяКолонки ИЗ тзРезультатЗапроса.Колонки Цикл
			Если ИмяКолонки.Имя="Доля" Тогда Продолжить; КонецЕсли;
			Если ИмяКолонки.Имя="ДоляНУ" Тогда Продолжить; КонецЕсли;
			Если ТипЗнч(СтрокаЗапроса[ИмяКолонки.Имя])<>Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				стрКолонкиДляСвертки=стрКолонкиДляСвертки+?(стрКолонкиДляСвертки="","",",")+ИмяКолонки.Имя;
			Иначе
				КолонкаСтатья=ИмяКолонки.Имя;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	тзСубконто=тзРезультатЗапроса.СкопироватьКолонки();
	
	Для Каждого СтрокаТЗ ИЗ тзРезультатЗапроса Цикл
		Если СтрокаТЗ[КолонкаСтатья].ВидРасходовНУ<>Перечисления.ВидыРасходовНУ.Амортизация
			И СтрокаТЗ[КолонкаСтатья].ВидРасходовНУ<>Перечисления.ВидыРасходовНУ.ЕСН
			И СтрокаТЗ[КолонкаСтатья].ВидРасходовНУ<>Перечисления.ВидыРасходовНУ.ОплатаТруда
			И СтрокаТЗ[КолонкаСтатья].ВидРасходовНУ<>Перечисления.ВидыРасходовНУ.МатериальныеРасходы Тогда Продолжить; КонецЕсли;
		НоваяСтрока=тзСубконто.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
	КонецЦикла;	
	тзСубконто.Свернуть(стрКолонкиДляСвертки,"Доля,ДоляНУ");
	СуммаДолей=тзСубконто.Итог("Доля");
	Для Каждого СтрокаТз ИЗ тзСубконто Цикл
		СтрокаТз.Доля=СтрокаТз.Доля/СуммаДолей*100;
		СтрокаТз.ДоляНУ=СтрокаТз.ДоляНУ/СуммаДолей*100;
	КонецЦикла;	
	Объект.Товары.Загрузить(тзСубконто);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли; 
	Объект.Товары.Очистить();
	тпТовары_ВыбратьСчет(Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВыборСубконто(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	//Параметр2 - (Команда, Постфикс)
	
	стрВыборСубконто="";
	Для каждого СтрокаКоллекции Из Параметр1 Цикл
		Если Не СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли; 
		стрВыборСубконто=стрВыборСубконто+"
		|ИсточникДанных."+СтрокаКоллекции.Значение+" Как "+СтрокаКоллекции.Представление+",
		|";
	КонецЦикла;
	
	Если Параметр2.Команда="ЗаполнитьПоОстаткамСчетаДебет" Или Параметр2.Команда="ЗаполнитьПоОстаткамСчетаКредит" Тогда
		ЗаполнитьПоОстаткам(Параметр2.Счет, Параметр2.Постфикс, стрВыборСубконто);
		
	ИначеЕсли Параметр2.Команда="ЗаполнитьПоОборотамСчетаДебет" Или Параметр2.Команда="ЗаполнитьПоОборотамСчетаКредит" Тогда
		ЗаполнитьПоОборотам(Параметр2.Счет, Параметр2.Постфикс, стрВыборСубконто);
		
	ИначеЕсли Параметр2.Команда="ПоПрямымЗатратамДебет" ИЛИ Параметр2.Команда="ПоПрямымЗатратамКредит" Тогда 
		ЗаполнитьПоПрямымЗатратам(Параметр2.Счет, Параметр2.Постфикс, стрВыборСубконто);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВыбСчет(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	//Параметр2 - (Команда, Постфикс)
	Параметр2.Вставить("Счет", Параметр1);
	
	спСубконто=СписокСубконто(Параметр1);
	спСубконто.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборСубконто", ЭтотОбъект, Параметр2), "Выберите субконто");
	
	
	//*** спСубконто=СписокСубконто(Параметр1);
	//////Результат=спСубконто.ОтметитьЭлементы("Укажите субконто для заполнения!");
	//////Если Не Результат Тогда Возврат ""; КонецЕсли;
	//////
	////стрВыборСубконто="";
	////Для каждого СтрокаКоллекции Из спСубконто Цикл
	////	Если Не СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли; 
	////	стрВыборСубконто=стрВыборСубконто+"
	////	|ИсточникДанных."+СтрокаКоллекции.Значение+" Как "+СтрокаКоллекции.Представление+",
	////	|";
	////КонецЦикла; 	
КонецПроцедуры

////&НаКлиенте
////Процедура ОбработчикОповещения_ВыбСчет_Оборотов(Параметр1, Параметр2) Экспорт
////	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли; 
////	ЗаполнитьПоОборотам(Параметр1, Параметр2);
////КонецПроцедуры

////&НаКлиенте
////Процедура ОбработчикОповещения_ВыбСчет_ПрямыхЗатрат(Параметр1, Параметр2) Экспорт
////	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли; 
////	ЗаполнитьПоПрямымЗатратам(Параметр1, Параметр2);
////КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Счет" Или Элемент.Имя="СчетИсточник" Тогда
		ПриВыбореСчета();
		
	ИначеЕсли Элемент.Имя="КорСчет" Или Элемент.Имя="СчетПриемник" Тогда
		ПриВыбореКорСчета();
		
	ИначеЕсли Элемент.Имя="УсловиеСубконто" Тогда
		ПриВыбореСчета();
		ПриВыбореКорСчета();
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьПоОстаткамСчетаДебет" ИЛИ стрКоманда="ЗаполнитьПоОстаткамСчетаКредит" ИЛИ стрКоманда="ЗаполнитьПоОборотамСчетаДебет" ИЛИ стрКоманда="ЗаполнитьПоОборотамСчетаКредит" ИЛИ стрКоманда="ПоПрямымЗатратамДебет" ИЛИ стрКоманда="ПоПрямымЗатратамКредит" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаКонцаРасчета) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачалаРасчета) Тогда
			Если НЕ стрКоманда="ЗаполнитьПоОстаткамСчетаДебет" ИЛИ НЕ стрКоманда="ЗаполнитьПоОстаткамСчетаКредит" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизиты <<за период>>!",,"Объект.ДатаНачалаРасчета"); Возврат;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизиты <<за период>>!",,"Объект.ДатаКонцаРасчета"); Возврат;
		КонецЕсли;

		Если НЕ Объект.Товары.Количество()=0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_Товары_Заполнить", ЭтотОбъект, стрКоманда);
			ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением табличные части будут очищены. Заполнить?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
		Иначе
			тпТовары_ВыбратьСчет(стрКоманда);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ВыбратьСчет(стрКоманда)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Команда", стрКоманда);
	СтруктураПараметров.Вставить("Постфикс", ?(Прав(стрКоманда, 5)="Дебет", "Дт", "Кт"));

	ВыбСчет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья");
	ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВыбСчет", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВводЗначения(ОписаниеОповещения, ВыбСчет, "Укажите счет");	

	//Если стрКоманда="ЗаполнитьПоОстаткамСчетаДебет" Или стрКоманда="ЗаполнитьПоОстаткамСчетаКредит" Тогда
	//	Если НЕ ЗначениеЗаполнено(Объект.ДатаКонцаРасчета) Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизиты <<за период>>!",,"Объект.ДатаКонцаРасчета"); Возврат;
	//	КонецЕсли;	
	//	//ВыбСчет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья");
	//	//ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВыбСчет", ЭтотОбъект, СтруктураПараметров);
	//	//ПоказатьВводЗначения(ОписаниеОповещения,ВыбСчет, "Укажите счет");
	//Иначе		
	////ИначеЕсли стрКоманда="ЗаполнитьПоОборотамСчетаДебет" Или стрКоманда="ЗаполнитьПоОборотамСчетаКредит" Тогда
	////	Если НЕ ЗначениеЗаполнено(Объект.ДатаКонцаРасчета) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачалаРасчета) Тогда
	////		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизиты <<за период>>!",,"Объект.ДатаНачалаРасчета"); Возврат;
	////		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизиты <<за период>>!",,"Объект.ДатаКонцаРасчета"); Возврат;
	////	КонецЕсли;	
	////	//ВыбСчет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья");
	////	//ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВыбСчет_Оборотов", ЭтотОбъект, СтруктураПараметров);
	////	//ПоказатьВводЗначения(ОписаниеОповещения, ВыбСчет, "Укажите счет");
	////	
	////ИначеЕсли стрКоманда="ПоПрямымЗатратамДебет" ИЛИ стрКоманда="ПоПрямымЗатратамКредит" Тогда 
	//	Если НЕ ЗначениеЗаполнено(Объект.ДатаКонцаРасчета) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачалаРасчета) Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизиты <<за период>>!",,"Объект.ДатаНачалаРасчета"); Возврат;
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизиты <<за период>>!",,"Объект.ДатаКонцаРасчета"); Возврат;
	//	КонецЕсли;	
	//	//ВыбСчет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья");
	//	//ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВыбСчет_ПрямыхЗатрат", ЭтотОбъект, СтруктураПараметров);
	//	//ПоказатьВводЗначения(ОписаниеОповещения, ВыбСчет, "Укажите счет");
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные; стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	Если стрКолонка="Субконто1" Или стрКолонка="Субконто2" Или стрКолонка="Субконто3" Тогда
		ТипСубконто=Элементы["Товары"+стрКолонка].ОграничениеТипа;
		Если ТипСубконто.Типы().Количество()=1 Тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные[стрКолонка]) Тогда
				ТекущиеДанные[стрКолонка]=Новый(ТипСубконто.Типы()[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличная части "Подразделения"

&НаКлиенте
Процедура тпПодразделения_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)	
	Если Элемент.ТекущиеДанные.Значение.Пустая() Тогда
		Если НоваяСтрока Тогда			
			Объект.Подразделения.Удалить(Элемент.ТекущаяСтрока);
		Иначе	
			Отказ=Истина; ПоказатьПредупреждение(,"Не выбрано значение подразделения!", 10);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличная части "Соответствие значений cубконто"

&НаКлиенте
Процедура тпСоответствиеЗначенийСубконто_ПриНачалеРедактирования(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущиеДанные=Элементы.СоответствиеЗначенийСубконто.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		//Если Объект.СубконтоИсточник=4 Тогда
		//	ТекущиеДанные.Субконто1=ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		//Иначе
		//	ВидыСубконто=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Счет, "ВидыСубконто"+СокрЛП(Объект.СубконтоИсточник-1));
		//	ТекущиеДанные.Субконто1=Новый(Объект.Счет.ВидыСубконто[Объект.СубконтоИсточник-1].ВидСубконто.ТипЗначения.Типы()[0]);
		//КонецЕсли;
		//Если Объект.СубконтоПриемник=4 Тогда
		//	ТекущиеДанные.Субконто2=ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		//Иначе
		//	ТекущиеДанные.Субконто2=Новый(Объект.КорСчет.ВидыСубконто[Объект.СубконтоПриемник-1].ВидСубконто.ТипЗначения.Типы()[0]);
		//КонецЕсли;			
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпСоответствиеЗначенийСубконто_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.СубконтоИсточник=0 Или Объект.СубконтоПриемник=0  Тогда Отказ=Истина; КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если Объект.Ссылка.Пустая() Тогда
	//	Объект.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту();
	//КонецЕсли;
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриВыбореСчета();
	ПриВыбореКорСчета();
	УстановитьВидимость();
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.ДатаНачалаРасчета) И НЕ ЗначениеЗаполнено(Объект.ДатаКонцаРасчета) Тогда
		Объект.ДатаНачалаРасчета=НачалоМесяца(Объект.Дата);
		Объект.ДатаКонцаРасчета=КонецМесяца(Объект.Дата);
	КонецЕсли;	
	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры