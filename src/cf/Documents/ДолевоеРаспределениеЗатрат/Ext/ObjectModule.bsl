Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	Для каждого СтрокаКоллекции Из Товары Цикл
		Если СтрокаКоллекции.Счет.Пустая() Тогда
			СтрокаКоллекции.Счет=КорСчет;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура _ПроверитьКорСубконто(Проводка, СтрокаТаблицы, НомерСубконто)
	ЗначениеКорСубконто=СтрокаТаблицы["КорСубконто"+НомерСубконто];

	Если НомерСубконто>Проводка.СчетДт.ВидыСубконто.Количество() Тогда Возврат; КонецЕсли; 
	Если ЗначениеЗаполнено(ЗначениеКорСубконто) Тогда Возврат; КонецЕсли;

	ВидСубконтоПланаСчетов=Проводка.СчетКт.ВидыСубконто.Найти(Проводка.СчетДт.ВидыСубконто[НомерСубконто-1].ВидСубконто);
	Если ВидСубконтоПланаСчетов=Неопределено Тогда Возврат; КонецЕсли; 
	
	СтрокаТаблицы["КорСубконто"+НомерСубконто]=СтрокаТаблицы["Субконто"+ВидСубконтоПланаСчетов.НомерСтроки];
КонецПроцедуры

Процедура ЗакрытиеСчета_23_25(тзДанныеИсточник)
	ОписаниеТипаЧисло=Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));

	тзРасчетРаспределенияКосвенныхРасходов=Движения.РасчетРаспределенияКосвенныхРасходов.ВыгрузитьКолонки();
	
	тзБуфер=Новый ТаблицаЗначений;
	тзБуфер.Колонки.Добавить("Счет");
	тзБуфер.Колонки.Добавить("Организация");
	тзБуфер.Колонки.Добавить("Субконто1");
	тзБуфер.Колонки.Добавить("Субконто2");
	тзБуфер.Колонки.Добавить("Субконто3");
	тзБуфер.Колонки.Добавить("КорСубконто1");
	тзБуфер.Колонки.Добавить("КорСубконто2");
	тзБуфер.Колонки.Добавить("КорСубконто3");
	тзБуфер.Колонки.Добавить("Подразделение");
	тзБуфер.Колонки.Добавить("ПодразделениеКор");
	тзБуфер.Колонки.Добавить("КорСчет");
	тзБуфер.Колонки.Добавить("Сумма"		  , ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаОборотДт"  , ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаОборотКт"  , ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаНУ"		  , ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаНУОборотДт", ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаНУОборотКт", ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаВР"		  , ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаВРОборотДт", ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаВРОборотКт", ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаПР"		  , ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаПРОборотДт", ОписаниеТипаЧисло);
	тзБуфер.Колонки.Добавить("СуммаПРОборотКт", ОписаниеТипаЧисло);
	//***тзБуфер.Колонки.Добавить("Исключить");

	//СуммаДолей=тзДанныеИсточник.Итог("Доля");
	//СуммаДолейНУ=тзДанныеИсточник.Итог("ДоляНУ");
	тзДолей=тзДанныеИсточник.Скопировать();
	тзДолей.Свернуть("Субконто1,Субконто2,Субконто3,Подразделение","Доля, ДоляНУ");
	
	Для Каждого СтрокаДерева Из тзДанныеИсточник Цикл
		СуммаДолей=0;
		СуммаДолейНУ=0;
		СтруктураОтбора=Новый Структура;
		Если ЗначениеЗаполнено(СтрокаДерева.Субконто1) Тогда
			СтруктураОтбора.Вставить("Субконто1", СтрокаДерева.Субконто1);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДерева.Субконто2) Тогда
			СтруктураОтбора.Вставить("Субконто2", СтрокаДерева.Субконто2);
		КонецЕсли;			
		Если ЗначениеЗаполнено(СтрокаДерева.Субконто3) Тогда
			СтруктураОтбора.Вставить("Субконто3", СтрокаДерева.Субконто3);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.Подразделение) Тогда
			СтруктураОтбора.Вставить("Подразделение", СтрокаДерева.Подразделение);
		КонецЕсли;
		МассивСтрок=тзДолей.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()=0 Тогда
			СуммаДолей=тзДолей.Итог("Доля");
			СуммаДолейНУ=тзДолей.Итог("ДоляНУ");
		Иначе	
			Для Каждого СтрокаМ ИЗ МассивСтрок Цикл
				СуммаДолей=СуммаДолей+СтрокаМ.Доля;
				СуммаДолейНУ=СуммаДолейНУ+СтрокаМ.ДоляНУ;
			КонецЦикла;
		КонецЕсли;
		Если УсловиеСубконто Тогда
			СтруктураОтбора=Новый Структура;
			Если СубконтоПриемник=4 Тогда
				ЗначениеСубконтоПриемника=СтрокаДерева["ПодразделениеКор"];
				СтруктураОтбора.Вставить("Подразделение",ЗначениеСубконтоПриемника);
			Иначе	
				ЗначениеСубконтоПриемника=СтрокаДерева["КорСубконто"+СубконтоПриемник];
				СтруктураОтбора.Вставить("Субконто"+СубконтоПриемник,ЗначениеСубконтоПриемника);
			КонецЕсли; 
			МассивСтрок=Товары.НайтиСтроки(СтруктураОтбора);
			СуммаДолей=0;
			СуммаДолейНУ=0;
			Для Каждого СтрокаМ ИЗ МассивСтрок Цикл
				СуммаДолей=СуммаДолей+СтрокаМ.Доля;
				СуммаДолейНУ=СуммаДолейНУ+СтрокаМ.ДоляНУ;
			КонецЦикла;	
		КонецЕсли;
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("Счет", СтрокаДерева.Счет);
		СтруктураОтбора.Вставить("Организация", СтрокаДерева.Организация);

		Если ЗначениеЗаполнено(СтрокаДерева.Субконто1) Тогда
			СтруктураОтбора.Вставить("Субконто1", СтрокаДерева.Субконто1);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДерева.Субконто2) Тогда
			СтруктураОтбора.Вставить("Субконто2", СтрокаДерева.Субконто2);
		КонецЕсли;			
		Если ЗначениеЗаполнено(СтрокаДерева.Субконто3) Тогда
			СтруктураОтбора.Вставить("Субконто3", СтрокаДерева.Субконто3);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДерева.Подразделение) Тогда
			СтруктураОтбора.Вставить("Подразделение", СтрокаДерева.Подразделение);
		КонецЕсли;

		МассивСтрок=тзБуфер.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()=0 Тогда
			МассивСтрок=Новый Массив;
			тзОбороты=РегистрыБухгалтерии["Хозрасчетный"].Обороты(НачалоДня(ДатаНачалаРасчета), КонецДня(ДатаКонцаРасчета),,,СтруктураОтбора);
			Если НеУчитыватьОстаткиНаНачало=Ложь Тогда
				тзОстатки=РегистрыБухгалтерии["Хозрасчетный"].Остатки(НачалоДня(ДатаНачалаРасчета),,СтруктураОтбора);
				Для каждого СтрокаТаблицы Из тзОстатки Цикл
					НоваяСтрока=тзОбороты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.СуммаОборотДт=СтрокаТаблицы.СуммаОстатокДт;
					НоваяСтрока.СуммаНУОборотДт=СтрокаТаблицы.СуммаНУОстатокДт;
					НоваяСтрока.СуммаВРОборотДт=СтрокаТаблицы.СуммаВРОстатокДт;
					НоваяСтрока.СуммаПРОборотДт=СтрокаТаблицы.СуммаПРОстатокДт;
				КонецЦикла; //9.01.2018
			КонецЕсли;
            Если тзОбороты.Количество()=0 Тогда
                НоваяСтрока=тзБуфер.Добавить();
				СтруктураОтбора.Свойство("Счет"	    , НоваяСтрока.Счет);
                СтруктураОтбора.Свойство("Субконто1", НоваяСтрока.Субконто1);
                СтруктураОтбора.Свойство("Субконто2", НоваяСтрока.Субконто2);
                СтруктураОтбора.Свойство("Субконто3", НоваяСтрока.Субконто3);
			Иначе
				тзОбороты.Свернуть("Организация,Счет,Субконто1,Субконто2,Субконто3,Подразделение","СуммаОборотДт,СуммаОборотКт,СуммаНУОборотДт,СуммаНУОборотКт,СуммаВРОборотДт,СуммаВРОборотКт,СуммаПРОборотДт,СуммаПРОборотКт");
				тзОбороты.Колонки.Добавить("КорСубконто1");
				тзОбороты.Колонки.Добавить("КорСубконто2");
				тзОбороты.Колонки.Добавить("КорСубконто3");
				тзОбороты.Колонки.Добавить("ПодразделениеКор");
				Для каждого СтрокаКоллекции Из тзОбороты Цикл
					НоваяСтрока=тзБуфер.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
					НоваяСтрока.Сумма=СтрокаКоллекции.СуммаОборотДт-СтрокаКоллекции.СуммаОборотКт; //Временно
					НоваяСтрока.СуммаНУ=СтрокаКоллекции.СуммаНУОборотДт-СтрокаКоллекции.СуммаНУОборотКт; //Временно
					НоваяСтрока.СуммаВР=СтрокаКоллекции.СуммаВРОборотДт-СтрокаКоллекции.СуммаВРОборотКт; //Временно
					НоваяСтрока.СуммаПР=СтрокаКоллекции.СуммаПРОборотДт-СтрокаКоллекции.СуммаПРОборотКт; //Временно
					НоваяСтрока.ПодразделениеКор=СтрокаДерева.ПодразделениеКор;
					МассивСтрок.Добавить(НоваяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Для Каждого СтрокаКоллекции Из МассивСтрок Цикл
			Если УсловиеСубконто Тогда
				Если СубконтоИсточник=4 Тогда
					ЗначениеСубконтоИсточника=СтрокаКоллекции["Подразделение"];
				Иначе	
					ЗначениеСубконтоИсточника=СтрокаКоллекции["Субконто"+СубконтоИсточник];
				КонецЕсли; 
				Если СубконтоПриемник=4 Тогда
					ЗначениеСубконтоПриемника=СтрокаДерева["ПодразделениеКор"];
				Иначе	
					ЗначениеСубконтоПриемника=СтрокаДерева["КорСубконто"+СубконтоПриемник];
				КонецЕсли; 
				
				Если СоответствиеЗначенийСубконто.Количество()=0 Тогда
					Если НЕ ЗначениеСубконтоИсточника=ЗначениеСубконтоПриемника Тогда Продолжить; КонецЕсли;
				Иначе
					СтрокаТабличнойЧасти=СоответствиеЗначенийСубконто.Найти(ЗначениеСубконтоИсточника, "Субконто1");
					Если СтрокаТабличнойЧасти=Неопределено Тогда Продолжить; КонецЕсли;
					Если НЕ СтрокаТабличнойЧасти.Субконто2=ЗначениеСубконтоПриемника Тогда Продолжить; КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Проводка=Движения.Хозрасчетный.Добавить();
			Проводка.Активность=Истина;
			Проводка.Период=Дата;
			Проводка.Регистратор=Ссылка;
			Проводка.Организация=Организация;
			
			Проводка.СчетДт=СтрокаДерева.КорСчет;
			Проводка.СчетКт=СтрокаДерева.Счет;
			
			СтрокаКоллекции.КорСубконто1=СтрокаДерева.КорСубконто1;
			СтрокаКоллекции.КорСубконто2=СтрокаДерева.КорСубконто2;
			СтрокаКоллекции.КорСубконто3=СтрокаДерева.КорСубконто3;
			СтрокаКоллекции.ПодразделениеКор=СтрокаДерева.ПодразделениеКор;
			СтрокаКоллекции.КорСчет=СтрокаДерева.КорСчет;
			
			_ПроверитьКорСубконто(Проводка, СтрокаКоллекции, 1);
			_ПроверитьКорСубконто(Проводка, СтрокаКоллекции, 2);
			_ПроверитьКорСубконто(Проводка, СтрокаКоллекции, 3);
			
			Для Каждого СтрокаКоллекцииСубконто Из СтрокаДерева.КорСчет.ВидыСубконто Цикл
				Проводка.СубконтоДт.Вставить(СтрокаКоллекцииСубконто.ВидСубконто, СтрокаКоллекции["КорСубконто"+СтрокаКоллекцииСубконто.НомерСтроки]);	
			КонецЦикла;
			Для Каждого СтрокаКоллекцииСубконто Из СтрокаДерева.Счет.ВидыСубконто Цикл
				Проводка.СубконтоКт.Вставить(СтрокаКоллекцииСубконто.ВидСубконто, СтрокаКоллекции["Субконто"+СтрокаКоллекцииСубконто.НомерСтроки]);
			КонецЦикла;
			Проводка.ПодразделениеКт=СтрокаКоллекции.Подразделение;
			Проводка.ПодразделениеДт=СтрокаКоллекции.ПодразделениеКор;
			
			СуммаРаспределения=СтрокаКоллекции.СуммаОборотДт-СтрокаКоллекции.СуммаОборотКт; //Временно
			СуммаРаспределенияНУ=СтрокаКоллекции.СуммаНУОборотДт-СтрокаКоллекции.СуммаНУОборотКт; //Временно
			СуммаРаспределенияВР=СтрокаКоллекции.СуммаВРОборотДт-СтрокаКоллекции.СуммаВРОборотКт; //Временно
			СуммаРаспределенияПР=СтрокаКоллекции.СуммаПРОборотДт-СтрокаКоллекции.СуммаПРОборотКт; //Временно
			Если НЕ СуммаДолей=0 Тогда
				Проводка.Сумма=СуммаРаспределения*(СтрокаДерева.Доля/СуммаДолей);
			КонецЕсли;	
			Если Проводка.СчетДт.НалоговыйУчет Тогда
				Если НЕ СуммаДолейНУ=0 Тогда
					Проводка.СуммаНУДт=СуммаРаспределенияНУ*(СтрокаДерева.ДоляНУ/СуммаДолейНУ);
					Проводка.СуммаВРДт=СуммаРаспределенияВР*(СтрокаДерева.ДоляНУ/СуммаДолейНУ);
					Проводка.СуммаПРДт=СуммаРаспределенияПР*(СтрокаДерева.ДоляНУ/СуммаДолейНУ);
				КонецЕсли;
			КонецЕсли;
			Если Проводка.СчетКт.НалоговыйУчет Тогда
				Если НЕ СуммаДолейНУ=0 Тогда
					Проводка.СуммаНУКт=СуммаРаспределенияНУ*(СтрокаДерева.ДоляНУ/СуммаДолейНУ);
					Проводка.СуммаВРКт=СуммаРаспределенияВР*(СтрокаДерева.ДоляНУ/СуммаДолейНУ);
					Проводка.СуммаПРКт=СуммаРаспределенияПР*(СтрокаДерева.ДоляНУ/СуммаДолейНУ);
				КонецЕсли;	
			КонецЕсли;
			
			///*****
			Если НЕ СуммаДолей=0 Тогда
				СтрокаКоллекции.Сумма=СтрокаКоллекции.Сумма-Проводка.Сумма;
			Иначе
				СтрокаКоллекции.Сумма=0;
			КонецЕсли;

			Если СуммаДолейНУ<>0 Тогда
				СтрокаКоллекции.СуммаНУ=СтрокаКоллекции.СуммаНУ-?(Проводка.СчетКт.НалоговыйУчет,Проводка.СуммаНУКт,Проводка.СуммаНУДт);
				СтрокаКоллекции.СуммаВР=СтрокаКоллекции.СуммаВР-?(Проводка.СчетКт.НалоговыйУчет,Проводка.СуммаВРКт,Проводка.СуммаВРДт);
				СтрокаКоллекции.СуммаПР=СтрокаКоллекции.СуммаПР-?(Проводка.СчетКт.НалоговыйУчет,Проводка.СуммаПРКт,Проводка.СуммаПРДт);
			Иначе
				СтрокаКоллекции.СуммаНУ=0;
				СтрокаКоллекции.СуммаВР=0;
				СтрокаКоллекции.СуммаПР=0;
			КонецЕсли;

			Если СтрокаДерева.Исключить=Истина Тогда
				Проводка.Сумма=0;
				Проводка.СуммаНУДт=0;
				Проводка.СуммаВРДт=0;
				Проводка.СуммаПРДт=0;
				Проводка.СуммаНУКт=0;
				Проводка.СуммаВРКт=0;
				Проводка.СуммаПРКт=0;
			КонецЕсли; //9.01.2018

			Если Найти(Проводка.СчетКт,"26")>0 ИЛИ Найти(Проводка.СчетКт,"25")>0 Тогда
				Если НЕ Проводка.Сумма=0 ИЛИ НЕ Проводка.СуммаНУКт=0 ИЛИ НЕ Проводка.СуммаПРКт=0 ИЛИ НЕ Проводка.СуммаВРКт=0 Тогда
					СтрокаЗаписьРасчетаКосвенныхРасходов=тзРасчетРаспределенияКосвенныхРасходов.Добавить();
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Проводка.СчетКт;
					СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = ?(Найти(Проводка.СчетКт,"26")>0,1,0);
					СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Проводка.ПодразделениеКт;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Проводка.СубконтоКт.СтатьиЗатрат;
					СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = 0;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыНУ =0;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыПР =0;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыВР =0;
					СтрокаЗаписьРасчетаКосвенныхРасходов.ЕНВД = Ложь;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Проводка.СчетДт;
					СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = Проводка.ПодразделениеДт;
					СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = Проводка.СубконтоДт.НоменклатурныеГруппы;
					СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = Проводка.Сумма;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаНУ = Проводка.СуммаНУКт;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаПР = Проводка.СуммаПРКт;
					СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаВР = Проводка.СуммаВРКт;
					СтрокаЗаписьРасчетаКосвенныхРасходов.ДокументРаспределения=Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Корректировка нераспределившейся стоимости
	Для Каждого СтрокаКоллекции Из тзБуфер Цикл
		Если СтрокаКоллекции.Сумма=0 И СтрокаКоллекции.СуммаНУ=0 И СтрокаКоллекции.СуммаВР=0 И СтрокаКоллекции.СуммаПР=0 Тогда Продолжить; КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Счет) ИЛИ НЕ ЗначениеЗаполнено(СтрокаКоллекции.КорСчет) Тогда Продолжить; КонецЕсли;

		Проводка=Движения.Хозрасчетный.Добавить();
		Проводка.Активность=Истина;
		Проводка.Период=Дата;
		Проводка.Регистратор=Ссылка;
		Проводка.Организация=Организация;

		Проводка.СчетДт=СтрокаКоллекции.КорСчет;
		Проводка.СчетКт=СтрокаКоллекции.Счет;

		_ПроверитьКорСубконто(Проводка, СтрокаКоллекции, 1);
		_ПроверитьКорСубконто(Проводка, СтрокаКоллекции, 2);
		_ПроверитьКорСубконто(Проводка, СтрокаКоллекции, 3);

		Для Каждого СтрокаКоллекцииСубконто Из СтрокаКоллекции.КорСчет.ВидыСубконто Цикл
			Проводка.СубконтоДт.Вставить(СтрокаКоллекцииСубконто.ВидСубконто, СтрокаКоллекции["КорСубконто"+СтрокаКоллекцииСубконто.НомерСтроки]);	
		КонецЦикла;
		Для Каждого СтрокаКоллекцииСубконто Из СтрокаКоллекции.Счет.ВидыСубконто Цикл
			Проводка.СубконтоКт.Вставить(СтрокаКоллекцииСубконто.ВидСубконто, СтрокаКоллекции["Субконто"+СтрокаКоллекцииСубконто.НомерСтроки]);
		КонецЦикла;
		
		Проводка.ПодразделениеКт=СтрокаКоллекции.Подразделение;
		Проводка.ПодразделениеДт=СтрокаКоллекции.ПодразделениеКор;

		Проводка.Сумма=СтрокаКоллекции.Сумма;
		Если Проводка.СчетДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт=СтрокаКоллекции.СуммаНУ;
			Проводка.СуммаВРДт=СтрокаКоллекции.СуммаВР;
			Проводка.СуммаПРДт=СтрокаКоллекции.СуммаПР;
		КонецЕсли;
		
		Если Проводка.СчетКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт=СтрокаКоллекции.СуммаНУ;
			Проводка.СуммаВРКт=СтрокаКоллекции.СуммаВР;
			Проводка.СуммаПРКт=СтрокаКоллекции.СуммаПР;
		КонецЕсли;
		
		Если Найти(Проводка.СчетКт,"26")>0 ИЛИ Найти(Проводка.СчетКт,"25")>0 Тогда
			СтрокаЗаписьРасчетаКосвенныхРасходов = тзРасчетРаспределенияКосвенныхРасходов.Добавить();
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = Проводка.СчетКт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = ?(Найти(Проводка.СчетКт,"26")>0,1,0);
			СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Проводка.ПодразделениеКт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Проводка.СубконтоКт.СтатьиЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = 0;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыНУ = 0;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыПР = 0;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыВР = 0;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ЕНВД = Ложь;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = Проводка.СчетДт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = Проводка.ПодразделениеДт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = Проводка.СубконтоДт.НоменклатурныеГруппы;
			СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = Проводка.Сумма;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаНУ = Проводка.СуммаНУКт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаПР = Проводка.СуммаПРКт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаВР = Проводка.СуммаВРКт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ДокументРаспределения=Ссылка;
		КонецЕсли;	
		
	КонецЦикла;
 	тзРасчетРаспределенияКосвенныхРасходов.Свернуть("ДокументРаспределения,Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,ВидОперации,Подразделение,СтатьяЗатрат,БазаРаспределения,ЕНВД,СчетРаспределения,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения","Сумма,СуммаНУ,СуммаПР,СуммаВР,СуммаБазы,СуммаБазыНУ,СуммаБазыПР,СуммаБазыВР");
	
	тзРасчетРаспределенияКосвенныхРасходов.ЗаполнитьЗначения(Организация, "Организация");
	тзРасчетРаспределенияКосвенныхРасходов.ЗаполнитьЗначения(Дата, "ПериодРасчета");
	тзРасчетРаспределенияКосвенныхРасходов.ЗаполнитьЗначения(Истина, "Активность");
	тзРасчетРаспределенияКосвенныхРасходов.ЗаполнитьЗначения(Ссылка, "Регистратор");
    Движения.РасчетРаспределенияКосвенныхРасходов.Загрузить(тзРасчетРаспределенияКосвенныхРасходов);
КонецПроцедуры

Процедура ПроверитьКорСубконто(СтрокаТаблицы, НомерСубконто)
	ЗначениеКорСубконто=СтрокаТаблицы["КорСубконто"+НомерСубконто];

	Если НомерСубконто>КорСчет.ВидыСубконто.Количество() Тогда Возврат; КонецЕсли; 
	Если ЗначениеЗаполнено(ЗначениеКорСубконто) Тогда Возврат; КонецЕсли; 
	
	ВидСубконтоПланаСчетов=Счет.ВидыСубконто.Найти(КорСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто);
	Если ВидСубконтоПланаСчетов=Неопределено Тогда Возврат; КонецЕсли; 
	
	СтрокаТаблицы["КорСубконто"+НомерСубконто]=СтрокаТаблицы["Субконто"+ВидСубконтоПланаСчетов.НомерСтроки];
КонецПроцедуры
 
Процедура ВыполнитьПроводку(Субконто1, Субконто2, Субконто3, ПодразделениеКт=Неопределено, тзДвижения)
	
	Для каждого СтрокаКоллекции Из Товары Цикл
		НоваяСтрока=тзДвижения.Добавить();
		НоваяСтрока.Субконто1=Субконто1;
		НоваяСтрока.Субконто2=Субконто2;
		НоваяСтрока.Субконто3=Субконто3;
		НоваяСтрока.КорСчет=СтрокаКоллекции.Счет;
		НоваяСтрока.КорСубконто1=СтрокаКоллекции.Субконто1;
		НоваяСтрока.КорСубконто2=СтрокаКоллекции.Субконто2;
		НоваяСтрока.КорСубконто3=СтрокаКоллекции.Субконто3;
		НоваяСтрока.Исключить=СтрокаКоллекции.Исключить;
		Если Не ПодразделениеКт=Неопределено Тогда
			НоваяСтрока.Подразделение=ПодразделениеКт;
		КонецЕсли;
		
		Если СтрокаКоллекции.Счет.УчетПоПодразделениям Тогда
		//	НоваяСтрока.Подразделение=ПодразделениеКт;
			НоваяСтрока.ПодразделениеКор=СтрокаКоллекции.Подразделение;
		КонецЕсли;	

        Если НЕ ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
			НоваяСтрока.КорСчет=КорСчет;
		КонецЕсли; 

		НоваяСтрока.Доля=СтрокаКоллекции.Доля;
		НоваяСтрока.ДоляНУ=СтрокаКоллекции.ДоляНУ;

		ПроверитьКорСубконто(НоваяСтрока, 1);
		ПроверитьКорСубконто(НоваяСтрока, 2);
		ПроверитьКорСубконто(НоваяСтрока, 3);
		
		Если КорСчет.УчетПоПодразделениям Тогда
			Если Не ЗначениеЗаполнено(НоваяСтрока.ПодразделениеКор) Тогда
				НоваяСтрока.ПодразделениеКор=НоваяСтрока.Подразделение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если НЕ ЗначениеЗаполнено(ДатаКонцаРасчета) ИЛИ НЕ ЗначениеЗаполнено(ДатаНачалаРасчета) Тогда
		Сообщить("Необходимо заполнить реквизиты <<за период>>!"); Отказ=Истина;
	КонецЕсли;	
	
	Если Отказ Тогда Возврат; КонецЕсли; 

	ДополнительныеСвойства.Вставить("ОчищатьДвижения_Хозрасчетный", Ложь);
	ДополнительныеСвойства.Вставить("ОчищатьДвижения_Финансовый", Ложь);

	МассивПодразделений=Подразделения.ВыгрузитьКолонку("Значение");
	Если МассивПодразделений.Количество()=0 Тогда
		МассивПодразделений.Добавить(Справочники.Подразделения.ПустаяСсылка());
	КонецЕсли;

	тзДвижения=Новый ТаблицаЗначений;
	тзДвижения.Колонки.Добавить("Организация");

	тзДвижения.Колонки.Добавить("Счет");
	тзДвижения.Колонки.Добавить("Субконто1");
	тзДвижения.Колонки.Добавить("Субконто2");
	тзДвижения.Колонки.Добавить("Субконто3");

	тзДвижения.Колонки.Добавить("КорСчет");
	тзДвижения.Колонки.Добавить("КорСубконто1");
	тзДвижения.Колонки.Добавить("КорСубконто2");
	тзДвижения.Колонки.Добавить("КорСубконто3");

	тзДвижения.Колонки.Добавить("Подразделение");
	тзДвижения.Колонки.Добавить("ПодразделениеКор");

	тзДвижения.Колонки.Добавить("Доля"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	тзДвижения.Колонки.Добавить("ДоляНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	тзДвижения.Колонки.Добавить("Исключить");

	Если ЗначениеСубконто1.Количество()>0 И ЗначениеСубконто2.Количество()>0 И ЗначениеСубконто3.Количество()>0 Тогда
		Для каждого СтрокаКоллекции1 Из ЗначениеСубконто1 Цикл
			Для каждого СтрокаКоллекции2 Из ЗначениеСубконто2 Цикл
				Для каждого СтрокаКоллекции3 Из ЗначениеСубконто3 Цикл
					Для каждого ПодразделениеКт Из МассивПодразделений Цикл
						ВыполнитьПроводку(СтрокаКоллекции1.Значение, СтрокаКоллекции2.Значение, СтрокаКоллекции3.Значение, ПодразделениеКт, тзДвижения);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

	ИначеЕсли ЗначениеСубконто1.Количество()=0 И ЗначениеСубконто2.Количество()>0 И ЗначениеСубконто3.Количество()>0 Тогда
		Для каждого СтрокаКоллекции2 Из ЗначениеСубконто2 Цикл
			Для каждого СтрокаКоллекции3 Из ЗначениеСубконто3 Цикл
				Для каждого ПодразделениеКт Из МассивПодразделений Цикл
					ВыполнитьПроводку(Неопределено, СтрокаКоллекции2.Значение, СтрокаКоллекции3.Значение, ПодразделениеКт, тзДвижения);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЗначениеСубконто1.Количество()=0 И ЗначениеСубконто2.Количество()>0 И ЗначениеСубконто3.Количество()=0 Тогда
		Для каждого СтрокаКоллекции2 Из ЗначениеСубконто2 Цикл
			Для каждого ПодразделениеКт Из МассивПодразделений Цикл
				ВыполнитьПроводку(Неопределено, СтрокаКоллекции2.Значение, Неопределено, ПодразделениеКт, тзДвижения);
			КонецЦикла;
		КонецЦикла;

	ИначеЕсли ЗначениеСубконто1.Количество()>0 И ЗначениеСубконто2.Количество()=0 И ЗначениеСубконто3.Количество()>0 Тогда
		Для каждого СтрокаКоллекции1 Из ЗначениеСубконто1 Цикл
			Для каждого СтрокаКоллекции3 Из ЗначениеСубконто3 Цикл
				Для каждого ПодразделениеКт Из МассивПодразделений Цикл
					ВыполнитьПроводку(СтрокаКоллекции1.Значение, Неопределено, СтрокаКоллекции3.Значение, ПодразделениеКт, тзДвижения);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЗначениеСубконто1.Количество()=0 И ЗначениеСубконто2.Количество()=0 И ЗначениеСубконто3.Количество()>0 Тогда
		Для каждого СтрокаКоллекции3 Из ЗначениеСубконто3 Цикл
			Для каждого ПодразделениеКт Из МассивПодразделений Цикл
				ВыполнитьПроводку(Неопределено, Неопределено, СтрокаКоллекции3.Значение, ПодразделениеКт, тзДвижения);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЗначениеСубконто1.Количество()>0 И ЗначениеСубконто2.Количество()=0 И ЗначениеСубконто3.Количество()=0 Тогда
		Для каждого СтрокаКоллекции1 Из ЗначениеСубконто1 Цикл
			Для каждого ПодразделениеКт Из МассивПодразделений Цикл
				ВыполнитьПроводку(СтрокаКоллекции1.Значение, Неопределено, Неопределено, ПодразделениеКт, тзДвижения);
			КонецЦикла;
		КонецЦикла;

	ИначеЕсли ЗначениеСубконто1.Количество()>0 И ЗначениеСубконто2.Количество()>0 И ЗначениеСубконто3.Количество()=0 Тогда
		Для каждого СтрокаКоллекции1 Из ЗначениеСубконто1 Цикл
			Для каждого СтрокаКоллекции2 Из ЗначениеСубконто2 Цикл
				Для каждого ПодразделениеКт Из МассивПодразделений Цикл
					ВыполнитьПроводку(СтрокаКоллекции1.Значение, СтрокаКоллекции2.Значение, Неопределено, ПодразделениеКт, тзДвижения);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли МассивПодразделений.Количество()>0 Тогда
		Для каждого ПодразделениеКт Из МассивПодразделений Цикл
			ВыполнитьПроводку(Неопределено, Неопределено, Неопределено, ПодразделениеКт, тзДвижения);
		КонецЦикла;
	КонецЕсли;
	
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	//***тзДвижения.ЗаполнитьЗначения(КорСчет, "КорСчет");
	тзДвижения.ЗаполнитьЗначения(Счет, "Счет");

	ЗакрытиеСчета_23_25(тзДвижения);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);