&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);

	Если Команда.Имя="ЗаполнитьИННПлательщика" Тогда
		Если НЕ Объект.Организация.Пустая() Тогда
			Объект.ИННПлательщика=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИНН");
		КонецЕсли;

	ИначеЕсли Команда.Имя="ЗаполнитьКПППлательщика" Тогда
		Если НЕ Объект.Организация.Пустая() Тогда
			Объект.КПППлательщика=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "КПП");
		КонецЕсли;

	ИначеЕсли Команда.Имя="ЗаполнитьИННПолучателя" Тогда
		Если НЕ Объект.Контрагент.Пустая() Тогда
			Объект.ИННПолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ИНН");
		КонецЕсли;

	ИначеЕсли Команда.Имя="ЗаполнитьКПППолучателя" Тогда
		Если НЕ Объект.Контрагент.Пустая() Тогда
			Объект.ЗаполнитьКПППолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
		КонецЕсли;
		
	ИначеЕсли Команда.Имя="ЗаполнитьИнформациюПоНалогам" Тогда
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);

		ФормаСписка=ОткрытьФорму("РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ФормаСписка.Заголовок="Выберите вид налога или иного платежа в бюджет";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы()
	ДенежныеСредстваКлиент.РасшифровкаПлатежа_ОбновитьПредставлениеДанных(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	//Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее."+стрЗаменить(Команда.Имя, "Операция_", ""));
	//СформироватьНазначениеПлатежа();

	//ДенежныеСредстваКлиент.ПриВыбореВидаОперации(ЭтаФорма);
	ДенежныеСредстваКлиент.ВыборВидаОперации(ЭтаФорма, Команда.Имя, "ВидыОперацийППИсходящее");
	СформироватьНазначениеПлатежа();
	ВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовФормы() Экспорт
   	Элементы.РасшифровкаПлатежаСотрудник.Видимость=Ложь; 
	Элементы.РасшифровкаПлатежаИсточникДоходов.Видимость=Ложь;
	Элементы.ОчередностьПлатежа.Доступность=Истина;
	Элементы.ВидПлатежа.Доступность=Истина;
	
	Элементы.ГруппаЗП.Видимость=Ложь;
	Элементы.Контрагент.Видимость=Истина;
	Элементы.СчетКонтрагента.Видимость=Истина;

	Если НЕ Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ВыдачаДенежныхСредствПодотчетнику") Тогда
		Если НЕ ТипЗнч(Объект.Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.Контрагент=ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;				
	КонецЕсли;

	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.РасчетыПоЗаработнойПлате") Тогда
		Элементы.СчетКонтрагента.Видимость=Ложь;
		Элементы.ОчередностьПлатежа.Доступность=Ложь;
		Элементы.ВидПлатежа.Доступность=Ложь;
		Элементы.Контрагент.Видимость=Ложь;
		Элементы.ГруппаЗП.Видимость=Истина;
		
		Элементы.РасшифровкаПлатежаСотрудник.Видимость=Истина;
		Элементы.РасшифровкаПлатежаВидыПлатежей.Видимость=Ложь;
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость=Истина;
		Элементы.РасшифровкаПлатежаИсточникДоходов.Видимость=Истина;

	ИначеЕсли Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет") Тогда
		Элементы.Контрагент.Видимость=Ложь;
		
	ИначеЕсли Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ВыдачаДенежныхСредствПодотчетнику") Тогда
		Если НЕ ТипЗнч(Объект.Контрагент)=Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Объект.Контрагент=ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		КонецЕсли;				
		Элементы.РасшифровкаПлатежаСотрудник.Видимость=Истина;

	ИначеЕсли Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств") Тогда
        Элементы.РасшифровкаПлатежаСотрудник.Видимость=Истина;
	КонецЕсли;

	//Видмость колонок взаиморасчетов
	Видимость=ДенежныеСредстваСервер.ЕстьВзаиморасчеты(Объект.ВидОперации);	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость=Видимость;
	Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость=Видимость;
	Элементы.РасшифровкаПлатежаСуммаНДС.Видимость=Видимость;
	Элементы.РасшифровкаПлатежаОплачиваемыеДокументы.Видимость=Видимость;

	//УСН
	Видимость=Ложь;
	Если УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Или
		 УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная_ЕНВД") Тогда
		 Видимость=Истина;
	КонецЕсли;	
	Элементы.РасшифровкаПлатежаСуммаУСН.Видимость=Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			ВидимостьЭлементовФормы();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежа()
	ТекущаяСтрока=Элементы.РасшифровкаПлатежа.ТекущаяСтрока;
	Если НЕ ТекущаяСтрока=Неопределено Тогда
		СтрокаПлатеж=Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	Если СтрокаПлатеж=Неопределено Тогда
		Если Объект.РасшифровкаПлатежа.Количество()=0 Тогда
			СтрокаПлатеж=Объект.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаПлатеж=Объект.РасшифровкаПлатежа[0];
		КонецЕсли;		
	КонецЕсли; 

	СуммаДокумента=Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	АдресСуммы = Найти(Объект.НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(Объект.НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = Объект.НазначениеПлатежа;
	КонецЕсли;

	Если ТекстНазначение="" И НЕ Объект.СчетКонтрагента.Пустая() Тогда
		ТекстНазначение=Объект.СчетКонтрагента.ТекстНазначения;
	КонецЕсли;

	ТекстСумма = "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если НЕ Объект.ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстНДС = "";
		ТабНДС=Объект.РасшифровкаПлатежа.Выгрузить();
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
			ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
			Если НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) ИЛИ СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстНДС = ТекстНДС + "Без налога (НДС)";
			Иначе
				ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
			КонецЕсли;
		КонецЦикла;
		
		Если ТабНДС.Итог("СуммаНДС") > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		
		ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
	КонецЕсли;

	Объект.НазначениеПлатежа=ТекстНазначение+Символы.ПС+ТекстСумма;
КонецПроцедуры 

&НаКлиенте
Процедура РеквизитыПлатежаБюджет_ЗаполнитьДанные(СтрокаРегистраРеквизитов)
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("ВидПеречисленияВБюджет", СтрокаРегистраРеквизитов.ВидПеречисления);
	СтруктураДанных.Вставить("КодБК", СтрокаРегистраРеквизитов.КодБК);
	СтруктураДанных.Вставить("Контрагент", СтрокаРегистраРеквизитов.Получатель);
	СтруктураДанных.Вставить("СчетКонтрагента", СтрокаРегистраРеквизитов.СчетПолучателя);
	СтруктураДанных.Вставить("СтатусСоставителя", СтрокаРегистраРеквизитов.СтатусСоставителя);
	СтруктураДанных.Вставить("ПоказательОснования", СтрокаРегистраРеквизитов.ПоказательОснования);
	СтруктураДанных.Вставить("ПоказательТипа", СтрокаРегистраРеквизитов.ПоказательТипа);
	СтруктураДанных.Вставить("ОчередностьПлатежа", СтрокаРегистраРеквизитов.ОчередностьПлатежа);
	СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
	СтруктураДанных.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаРегистраРеквизитов.СтатьяДвиженияДенежныхСредств);
	
	ДанныеОрганизации=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ЮрФизЛицо,ИНН,КПП,КодПоОКАТО");
	
	ЭтоФизЛицо=ДанныеОрганизации.ЮрФизЛицо=ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	
	СтруктураДанных.Вставить("КПППлательщика", ?(ЭтоФизЛицо, "0", ДанныеОрганизации.КПП));
	СтруктураДанных.Вставить("КодОКАТО", ДанныеОрганизации.КодПоОКАТО);

	Если СтрокаРегистраРеквизитов.ВидПеречисления="Налоговый" Тогда
		ДатаНачисленияНалога = НачалоМесяца(Объект.Дата) - 1;
		
		Если СтрокаРегистраРеквизитов.ПоказательПериода = "КВ" Тогда
			ДатаОкончания = КонецКвартала(ДатаНачисленияНалога);
			ДатаНачала    = НачалоКвартала(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", "КВ." + Формат(ДатаОкончания, "ДФ=кк")+"."+Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа+" за "+ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина"));
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "МС" Тогда
			ДатаОкончания = КонецМесяца(ДатаНачисленияНалога);
			ДатаНачала    = НачалоМесяца(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", "МС." + Формат(ДатаОкончания, "ДФ=ММ")+"."+Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа+ " за "+ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина"));
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "ПЛ" Тогда
			ДатаОкончания = КонецГода(ДатаНачисленияНалога);
			ДатаНачала    = НачалоГода(ДатаОкончания);
			Если Месяц(ДатаНачисленияНалога) <= 6 Тогда
				СтруктураДанных.Вставить("ПоказательПериода", "ПЛ.01." + Формат(ДатаОкончания, "ДФ=гггг"));
				СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа+" за 1 полугодие "+ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			Иначе
				СтруктураДанных.Вставить("ПоказательПериода", "ПЛ.02." + Формат(ДатаОкончания, "ДФ=гггг"));
				СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа +" за 2 полугодие "+ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
			КонецЕсли;
				
		ИначеЕсли СтрокаРегистраРеквизитов.ПоказательПериода = "ГД" Тогда
			ДатаОкончания = КонецГода(ДатаНачисленияНалога);
			ДатаНачала    = НачалоГода(ДатаОкончания);
			СтруктураДанных.Вставить("ПоказательПериода", "ГД.00." + Формат(ДатаОкончания, "ДФ=гггг"));
			СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа+" за "+ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина"));
		Иначе
			СтруктураДанных.Вставить("ПоказательПериода", "0");
			СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
		КонецЕсли;		
	Иначе
		СтруктураДанных.Вставить("ПоказательПериода", СтрокаРегистраРеквизитов.ПоказательПериода);
		СтруктураДанных.Вставить("НазначениеПлатежа", СтрокаРегистраРеквизитов.НазначениеПлатежа);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура РеквизитыПлатежаБюджет_ЗаполнитьСпискиВыбора()
	Возврат; //Указано непосредственно в элементах (возможно временно)
	
	спБуфер=РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.СтатусыПлательщика();
	Для каждого СтрокаКоллекции Из спБуфер Цикл
		Элементы.СтатусСоставителя.СписокВыбора.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление);
	КонецЦикла;

	спБуфер=РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ОснованияПлатежа("Налоговый");
	Для каждого СтрокаКоллекции Из спБуфер Цикл
		Элементы.ПоказательОснования.СписокВыбора.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление);
	КонецЦикла;

	спБуфер=РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ТипыПлатежа("Налоговый", ТекущаяДата());
	Для каждого СтрокаКоллекции Из спБуфер Цикл
		Элементы.ПоказательТипа.СписокВыбора.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление);
	КонецЦикла;

	спБуфер=РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ВидыНалоговыхПериодов();
	Для каждого СтрокаКоллекции Из спБуфер Цикл
		Элементы.ПоказательПериода.СписокВыбора.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление);
	КонецЦикла;		
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ОбработчикОповещения_ПоказательПериода(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	Объект.ПоказательПериода=Параметр1;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Дата" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");
		
	ИначеЕсли Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");
		Объект.СчетОрганизации=?(НЕ Объект.СчетОрганизации.Пустая(), ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет"), ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка"));

		Если НЕ Объект.Организация.Пустая() Тогда
			Объект.ИННПлательщика=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИНН");
			Объект.КПППлательщика=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "КПП");
			ТекстПлательщика=?(Объект.СчетОрганизации.Пустая(), "", ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ТекстКорреспондента"));
			Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет") Тогда
				Объект.ИННПолучателя=Объект.ИННПлательщика;
			КонецЕсли;
		Иначе	
			Объект.ИННПлательщика=""; 
			Объект.КПППлательщика="";
		КонецЕсли;
		
		Атрибут_ПриИзменении(Элементы.СчетОрганизации);

		Для каждого СтрокаКоллекции Из Объект.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаКоллекции.ДоговорКонтрагента) Тогда
				Если НЕ ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаКоллекции.ДоговорКонтрагента, "Организация")=Объект.Организация Тогда
					СтрокаКоллекции.ДоговорКонтрагента=Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		

	ИначеЕсли Элемент.Имя="Контрагент" Тогда
		Если Объект.Контрагент=Неопределено Тогда
			Объект.Контрагент=ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
		Если ТипЗнч(Объект.Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
			УчетБезНДС=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "УчетБезНДС");
			ДоговорКонтрагента=ДенежныеСредстваСервер.ДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, Объект.Организация, Объект.ВидОперации);

			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Контрагент", Объект.Контрагент));
			Элементы.РасшифровкаПлатежаВалюта.Видимость=Элементы.РасшифровкаПлатежаСуммаВал.Видимость;

			Для каждого СтрокаКоллекции Из Объект.РасшифровкаПлатежа Цикл
				Если УчетБезНДС=Истина Тогда
					СтрокаКоллекции.СтавкаНДС=ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");				
				КонецЕсли;
				СтрокаКоллекции.ДоговорКонтрагента=ДоговорКонтрагента;
				тпРасшифровкаПлатежа_Колонка_ПриИзменении(Элементы.РасшифровкаПлатежаДоговорКонтрагента, СтрокаКоллекции);
			КонецЦикла;

			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Если ТипЗнч(Объект.Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
					Объект.СчетКонтрагента=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ОсновнойБанковскийСчет");
					Объект.ИННПолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ИНН");
					Объект.КПППолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
				КонецЕсли;
				Объект.ТекстПолучателя=?(Объект.СчетКонтрагента.Пустая(), "", ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "ТекстКорреспондента"));
			Иначе
				Объект.СчетКонтрагента=ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
			КонецЕсли;

			Атрибут_ПриИзменении(Элементы.СчетКонтрагента);
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя="СчетОрганизации" Тогда		
		Объект.ТекстПлательщика=?(Объект.СчетОрганизации.Пустая(), "", ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ТекстКорреспондента"));
		СформироватьНазначениеПлатежа();

	ИначеЕсли Элемент.Имя="СчетКонтрагента" Тогда
		Если Объект.СчетКонтрагента.Пустая() Тогда
			Объект.ТекстПолучателя="";
			Если ТипЗнч(Объект.Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.ТекстПолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
			КонецЕсли;
		Иначе
			Объект.ТекстПолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "ТекстКорреспондента");
			Если ПустаяСтрока(ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "ТекстКорреспондента")) Тогда
				Если ТипЗнч(Объект.Контрагент)=Тип("СправочникСсылка.Контрагенты") Тогда
					Объект.ТекстПолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
				Иначе
					Объект.ТекстПолучателя=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Наименование");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СформироватьНазначениеПлатежа();
	КонецЕсли;

	ВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);

	Если Элемент.Имя="ПоказательПериода" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ПоказательПериода", ЭтотОбъект); ПараметрыФормы=Новый Структура;
		ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.Форма.ФормаПериода", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элемент.Имя="СчетКонтрагента" Тогда
		МассивПараметров=Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Объект.Организация));
		Элементы.СчетКонтрагента.ПараметрыВыбора=Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Расшифровка платежа"

&НаКлиенте
Процедура кпРасшифровкаПлатежа_ВыполнитьДействие(Команда)
	стрКоманда=стрЗаменить(Команда.Имя, "кпРасшифровкаПлатежа_", "");
	кпРасшифровкаПлатежа(стрКоманда);
КонецПроцедуры

&НаСервере
Процедура кпРасшифровкаПлатежа(стрКоманда)
	Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда Возврат; КонецЕсли; 
	СтрокаПлатеж=Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	Если стрКоманда="ЗаполнитьПоВзаиморасчетам" Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	СуммаБухОстаток КАК СуммаПлатежа,
		|	СуммаВалОстаток КАК СуммаВал
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,ДоговорКонтрагента = &ДоговорКонтрагента)
		|ГДЕ
		|	СуммаБухОстаток > 0
		|";		

	ИначеЕсли стрКоманда="ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом" Тогда	
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ПодОтчетник", Объект.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация.ГоловнаяОрганизация);
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СуммаОстаток КАК СуммаПлатежа
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(, ФизЛицо = &ПодОтчетник И Организация = &Организация)
		|ГДЕ
		|	СуммаОстаток > 0
		|";
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Выборка);
		ЗначениеСтавкиНДС=УчетНалоговСервер.СтавкаНДС(СтрокаПлатеж.СтавкаНДС);
		СтрокаПлатеж.СуммаНДС=СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРасшифровкаПлатежа_Колонка_ПриИзменении(Элемент, ТекущиеДанные=Неопределено) Экспорт
	ДенежныеСредстваКлиент.РасшифровкаПлатежа_Колонка_ПриИзменении(ЭтаФорма, Элемент, ТекущиеДанные);
	Если Элемент.Имя="РасшифровкаПлатежаСтавкаНДС" ИЛИ Элемент.Имя="РасшифровкаПлатежаСуммаНДС" Тогда
		СформироватьНазначениеПлатежа();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпРасшифровкаПлатежа_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРасшифровкаПлатежа_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДенежныеСредстваКлиент.РасшифровкаПлатежа_Выбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура тпРасшифровкаПлатежа_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДенежныеСредстваКлиент.РасшифровкаПлатежа_НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура тпРасшифровкаПлатежа_ПередУдалением(Элемент, Отказ)
	СформироватьНазначениеПлатежа();
КонецПроцедуры

&НаКлиенте
Процедура тпРасшифровкаПлатежа_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьНазначениеПлатежа();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
	РеквизитыПлатежаБюджет_ЗаполнитьСпискиВыбора();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Контрагент", Объект.Контрагент));
	Элементы.РасшифровкаПлатежаВалюта.Видимость=Элементы.РасшифровкаПлатежаСуммаВал.Видимость;
	ОбновитьРеквизитыФормы("УчетнаяПолитика");

	Если Объект.Ссылка.Пустая() Тогда
		Объект.Оплачено=Ложь; Объект.ДатаОплаты=""; стрСообщение="";

		Атрибут_ПриИзменении(Элементы.Организация);
		Атрибут_ПриИзменении(Элементы.Контрагент);

		Если НЕ ЗначениеЗаполнено(Объект.ВидПлатежа) Тогда	
			Объект.ВидПлатежа=Элементы.ВидПлатежа.СписокВыбора[2];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ОчередностьПлатежа) Тогда	
			Объект.ОчередностьПлатежа=5;
		КонецЕсли;
		СформироватьНазначениеПлатежа();
		ОбновитьДанныеФормы();	
	КонецЕсли;
	Элементы.РасшифровкаПлатежаОплачиваемыеДокументы.Видимость=ОбщегоНазначенияСервер.ПроверкаРасширения("lab33_ПлатежныйКалендарь");

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора)=Тип("ФормаКлиентскогоПриложения") Тогда
		Если ИсточникВыбора.ИмяФормы="РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаСписка" Тогда
			РеквизитыПлатежаБюджет_ЗаполнитьДанные(ВыбранноеЗначение);			
		КонецЕсли; 
	КонецЕсли; 
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.СуммаДокумента=Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Объект.СуммаДокументаУСН=Объект.РасшифровкаПлатежа.Итог("СуммаУСН");
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьДанныеФормы();
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры