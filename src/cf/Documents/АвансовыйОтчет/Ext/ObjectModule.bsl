Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	СуммаДокумента=ЦенообразованиеСервер.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+ОплатаПоставщикам.Итог("Сумма")+Прочее.Итог("Сумма");
	СуммаНДС=ЦенообразованиеСервер.ПолучитьНДСДокумента(ЭтотОбъект);

	//Товары
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если НЕ УчитыватьНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И СтрокаТабличнойЧасти.КоличествоМест=0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;

	//Прочее
	Для каждого СтрокаТабличнойЧасти Из Прочее Цикл
		Если НЕ УчитыватьНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;

	//Возвратная тара
	Для каждого СтрокаТабличнойЧасти Из ВозвратнаяТара Цикл
		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;

	
КонецПроцедуры

Процедура ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
			СтрокаТабличнойЧасти.ПриходныйОрдер=Склад;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад.Склад;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры
 
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;
	Поставщик = ДокументОснование.Контрагент;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад" , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	МИНИМУМ(ИсточникДанных1.НомерСтроки) КАК НомерСтроки,
	|	ИсточникДанных1.Номенклатура КАК Номенклатура,
	|	ИсточникДанных1.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИсточникДанных2.Склад КАК Склад,
	|	СУММА(ИсточникДанных1.Количество) КАК КоличествоПоСерии,
	|	МАКСИМУМ(ИсточникДанных2.КоличествоОстаток) КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ИсточникДанных1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК ИсточникДанных2
	|		ПО ИсточникДанных1.Номенклатура = ИсточникДанных2.Номенклатура
	|			И ИсточникДанных1.СерияНоменклатуры = ИсточникДанных2.СерияНоменклатуры
	|			И ИсточникДанных1.ХарактеристикаНоменклатуры = ИсточникДанных2.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ИсточникДанных1.Ссылка = &ДокументОснование
	|	И ИсточникДанных2.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.СерияНоменклатуры,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных2.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);

		СтрокаТабличнойЧасти.Количество=Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения=СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент=СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС=СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		СтрокаТабличнойЧасти.Контрагент=Поставщик;
		СтрокаТабличнойЧасти.ПриходныйОрдер=ДокументОснование;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование, ДоговорКонтрагента) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад" , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Номенклатура КАК Номенклатура,
	|	ИсточникДанных2.Склад КАК Склад,
	|	СУММА(ИсточникДанных1.Количество) КАК КоличествоПоСерии,
	|	МАКСИМУМ(ИсточникДанных2.КоличествоОстаток) КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.ВозвратнаяТара КАК ИсточникДанных1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК ИсточникДанных2
	|		ПО ИсточникДанных1.Номенклатура = ИсточникДанных2.Номенклатура
	|ГДЕ
	|	ИсточникДанных1.Ссылка = &ДокументОснование
	|	И ИсточникДанных2.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных2.Склад
	|";	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=ВозвратнаяТара.Добавить();
		СтрокаТабличнойЧасти.Номенклатура=Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество=Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.Контрагент=ДокументОснование.Контрагент;
		СтрокаТабличнойЧасти.ДоговорКонтрагента=ДоговорКонтрагента;
		СтрокаТабличнойЧасти.ПриходныйОрдер=ДокументОснование;
        СтрокаТабличнойЧасти.Склад=Выборка.Склад;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаТЧ, СтруктураШД, ТаблицаДвижений, СтатусПартии, СпособОценкиМПЗ)
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл
		СтрокаТЧ=ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СтрокаДвижений.Склад = СтрокаТЧ.ПриходныйОрдерСклад;
		КонецЕсли;		
		СтрокаДвижений.ДокументОприходования=?(СпособОценкиМПЗ=Перечисления.СпособыОценки.ПоСредней, Неопределено, Ссылка);		
		СтрокаДвижений.СтатусПартии=СтатусПартии;
		СтрокаДвижений.Качество=Справочники.Качество.Новый;
		Если НЕ СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти)
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Подразделение", Подразделение);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		Если тзСсылка.Колонки.Найти(СтрокаКоллекции.Ключ)=Неопределено Тогда
			тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
			тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры
 
Функция СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок)
	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.Добавить("Стоимость", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	тзДанные.Колонки.Добавить("СтоимостьНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));	
	тзДанные.Колонки.Добавить("НДС");
	тзДанные.Колонки.Добавить("Поставщик");
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");	
	тзДанные.Колонки.Добавить("ДокументПолучения");
	тзДанные.Колонки.Добавить("ОрганизацияДокументаПолучения");
	тзДанные.Колонки.Добавить("БезПраваПродажи");
	тзДанные.Колонки.Добавить("ПриходныйОрдерСклад");
	тзДанные.Колонки.Добавить("СчетУчетаНДС");

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		
		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;

		Если СтрокаКоллекции.Комплект Тогда
			СтрокаНачалаСообщенияОбОшибке="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			Если ЗначениеЗаполнено(СтрокаКоллекции.Номенклатура) И ТипЗнч(СтрокаКоллекции.Номенклатура)=Тип("СправочникСсылка.Номенклатура") И  СтрокаКоллекции.Комплект Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-комплект. Наборов-комплектов здесь быть не должно!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент /СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтоимостьСНДС=СтрокаКоллекции.Сумма+?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
		Если СтруктураШД.УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
			СтрокаКоллекции.Стоимость=СтрокаКоллекции.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
		Иначе
			СтрокаКоллекции.Стоимость=СтоимостьСНДС;
		КонецЕсли;
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.Стоимость;		
		СтрокаКоллекции.ЕдиницаИзмерения=СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
        СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.НДС=СтрокаКоллекции.СуммаНДС;
		СтрокаКоллекции.Поставщик=СтрокаКоллекции.Контрагент; //***
		СтрокаКоллекции.ДокументПолучения=СтрокаКоллекции.ПриходныйОрдер;
		СтрокаКоллекции.ОрганизацияДокументаПолучения=СтрокаКоллекции.ПриходныйОрдер.Организация;
		СтрокаКоллекции.БезПраваПродажи=СтрокаКоллекции.ПриходныйОрдер.БезПраваПродажи;
		СтрокаКоллекции.ПриходныйОрдерСклад=СтрокаКоллекции.ПриходныйОрдер.Склад;

		//Если УчитыватьНДС Тогда 
		//	ТекстСообщения = "";
		//	Рез = ПравильнаяСтрокаТаблицыДляНДС(ЭтотОбъект, СтрокаКоллекции, "Товары", ТекстСообщения);
		//	Если Рез = "Ошибка" Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		//	ИначеЕсли Рез = "Не делать движение" И НЕ ПустаяСтрока(ТекстСообщения) Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,Заголовок,СтатусСообщения.Информация);
		//	КонецЕсли;
		//КонецЕсли;

		//Добавим счет учета НДС
		Для каждого СтрокаПроводки Из СтрокаКоллекции.ТОП.ПроводкиБУ Цикл
			СчетКредит=СтрокаПроводки.СчетКредит;
			Если ЗначениеЗаполнено(СчетКредит) И СчетКредит.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
				СтрокаКоллекции.СчетУчетаНДС=СчетКредит; Прервать;
			КонецЕсли;
			СчетДебет=СтрокаПроводки.СчетДебет;
			Если ЗначениеЗаполнено(СчетДебет) И СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
				СтрокаКоллекции.СчетУчетаНДС=СчетДебет; Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");

	ВзаиморасчетыСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(тзДанные, СтруктураШД, Истина);

	Возврат тзДанные;
КонецФункции

Функция СформироватьТаблицу_ТараВТ(СтруктураШД, Отказ, Заголовок)	
	тзДанные=ВозвратнаяТара.Выгрузить();
	тзДанные.Колонки.Добавить("Стоимость", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	тзДанные.Колонки.Добавить("СтоимостьНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));	
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");	
	тзДанные.Колонки.Добавить("ДокументПолучения");
	тзДанные.Колонки.Добавить("ОрганизацияДокументаПолучения");
	тзДанные.Колонки.Добавить("БезПраваПродажи");
	тзДанные.Колонки.Добавить("ПриходныйОрдерСклад");

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		
		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;

		Если СтрокаКоллекции.Комплект Тогда
			СтрокаНачалаСообщенияОбОшибке="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			Если ЗначениеЗаполнено(СтрокаКоллекции.Номенклатура) И ТипЗнч(СтрокаКоллекции.Номенклатура)=Тип("СправочникСсылка.Номенклатура") И  СтрокаКоллекции.Комплект Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-комплект. Наборов-комплектов здесь быть не должно!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		
		СтрокаКоллекции.ДокументПолучения=СтрокаКоллекции.ПриходныйОрдер;
		СтрокаКоллекции.ОрганизацияДокументаПолучения=СтрокаКоллекции.ПриходныйОрдер.Организация;
		СтрокаКоллекции.БезПраваПродажи=СтрокаКоллекции.ПриходныйОрдер.БезПраваПродажи;
		СтрокаКоллекции.ПриходныйОрдерСклад=СтрокаКоллекции.ПриходныйОрдер.Склад;

		СтрокаКоллекции.Стоимость=СтрокаКоллекции.Сумма;
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.Сумма;		
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Тара");

	Возврат тзДанные;
КонецФункции

Функция СформироватьТаблицу_Авансы(СтруктураШД, Отказ, Заголовок)
	тзДанные=ВыданныеАвансы.Выгрузить();

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Прочее");

	Возврат тзДанные;
КонецФункции

Функция СформироватьТаблицу_Оплата(СтруктураШД, Отказ, Заголовок)
	тзДанные=ОплатаПоставщикам.Выгрузить();
	тзДанные.Колонки.Добавить("СуммаБух", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	тзДанные.Колонки.Добавить("ВидДоговора");
	тзДанные.Колонки.Добавить("ВестиПлатежныйКалендарь");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");	

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.ВестиПлатежныйКалендарь=СтрокаКоллекции.ДоговорКонтрагента.ВестиПлатежныйКалендарь;
		СтрокаКоллекции.ВидДоговора=СтрокаКоллекции.ДоговорКонтрагента.ВидДоговора;
		СтрокаКоллекции.СуммаБух=СтрокаКоллекции.Сумма;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Оплата");

	Возврат тзДанные;
КонецФункции

Функция СформироватьТаблицу_Прочие(СтруктураШД, Отказ, Заголовок)
	тзДанные=Прочее.Выгрузить();
	тзДанные.Колонки.Добавить("Стоимость", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	тзДанные.Колонки.Добавить("СтоимостьНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));	
	тзДанные.Колонки.Добавить("НДС");
	тзДанные.Колонки.Добавить("Поставщик");
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");	
	тзДанные.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат");
	тзДанные.Колонки.Добавить("НоменклатураНовая");
	тзДанные.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
	тзДанные.Колонки.Добавить("СчетУчетаНДС");

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		
		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Прочее"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;

		Если СтрокаКоллекции.Комплект Тогда
			СтрокаНачалаСообщенияОбОшибке="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Прочее"": ";
			Если ЗначениеЗаполнено(СтрокаКоллекции.Номенклатура) И ТипЗнч(СтрокаКоллекции.Номенклатура)=Тип("СправочникСсылка.Номенклатура") И  СтрокаКоллекции.Комплект Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-комплект. Наборов-комплектов здесь быть не должно!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		СтрокаКоллекции.Стоимость=СтрокаКоллекции.Сумма+?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.Стоимость;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.НДС=СтрокаКоллекции.СуммаНДС;
		СтрокаКоллекции.Поставщик=СтрокаКоллекции.Контрагент;
		СтрокаКоллекции.ВидДеятельностиДляНалоговогоУчетаЗатрат=СтрокаКоллекции.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
		СтрокаКоллекции.НоменклатураНовая=СтрокаКоллекции.Изделие;
		СтрокаКоллекции.ХарактеристикаНоменклатурыНовая=СтрокаКоллекции.ХарактеристикаИзделия;

		//Если УчитыватьНДС Тогда 
		//	ТекстСообщения = "";
		//	Рез = ПравильнаяСтрокаТаблицыДляНДС(ЭтотОбъект, СтрокаКоллекции, "Прочее", ТекстСообщения);
		//	Если Рез = "Ошибка" Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		//	ИначеЕсли Рез = "Не делать движение" И НЕ ПустаяСтрока(ТекстСообщения) Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, ,Заголовок,СтатусСообщения.Информация);
		//	КонецЕсли;
		//КонецЕсли;

		//Добавим счет учета НДС
		Для каждого СтрокаПроводки Из СтрокаКоллекции.ТОП.ПроводкиБУ Цикл
			СчетКредит=СтрокаПроводки.СчетКредит;
			Если ЗначениеЗаполнено(СчетКредит) И СчетКредит.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
				СтрокаКоллекции.СчетУчетаНДС=СчетКредит; Прервать;
			КонецЕсли;
			СчетДебет=СтрокаПроводки.СчетДебет;
			Если ЗначениеЗаполнено(СчетДебет) И СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
				СтрокаКоллекции.СчетУчетаНДС=СчетДебет; Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Прочее");

	ВзаиморасчетыСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(тзДанные, СтруктураШД, Истина);

	Возврат тзДанные;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ

Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);	
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка.Проведен = &ПризнакПроведения
	|	И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	|	И СчетФактураПолученный.Ссылка.ДокументОснование = &ДокументОснование
	|";
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;

	РезультатЗапроса=РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент=СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Проведен=Провести;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
	//Движение по регистру "Взаиморасчеты с подотчетнымиЛицами"
	ДвижениеПоРегистру_ВзаиморасчетыСПодотчетнымиЛицами(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Взаиморасчеты с контрагентами"
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);	
	
	//Движение по регистру "Затраты"
	ДвижениеПоРегистру_Затраты(СтруктураШД, СтруктураТД, Отказ);
	
	//Движение по регистру "Закупки"
	ДвижениеПоРегистру_Закупки(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Товары полученные" (тара)
	ДвижениеПоРегистру_ТоварыПолученные(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Учет потребностей"
	ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Учет ТМЦ (по ячейкам), Товары в рознице, Товары к получению на склады, товары в резерве на складах"
	ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Списанные товары"
	//**** ДвиженияПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Учет партий ТМЦ, Продажи"
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Расходы по УСН"
	ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ);

	//Движение по регистру "Учет НДС"
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "РасходыПриУСН") Тогда Возврат; КонецЕсли;
	Если СтруктураШД.УчетнаяПолитика.ОбъектНалогообложенияУСН=Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда	Возврат; КонецЕсли;	
	СистемаНалогообложения=СтруктураШД.УчетнаяПолитика.СистемаНалогообложения;
	ВключитьДвиженияУСН=Ложь;
	Если ДополнительныеСвойства.Свойство("ВключитьДвиженияУСН") Тогда
		ВключитьДвиженияУСН=ДополнительныеСвойства.ВключитьДвиженияУСН;
	КонецЕсли;

	Если СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная Или СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная_ЕНВД ИЛИ ВключитьДвиженияУСН Тогда
		Если СтруктураТД.Оплата.Количество()<>0 Тогда
			тзДанные=СтруктураТД.Оплата.Скопировать();
			тзДанные.Свернуть("ДоговорКонтрагента,ТОП,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","Сумма");
			Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
				НоваяСтрока=Движения.РасходыПриУСН.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
				НоваяСтрока.Активность=Истина;
				НоваяСтрока.Период=Дата;
				НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяСтрока.Организация=Организация;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.ПредоплатаПоставщику;
				НоваяСтрока.РасчетныйДокумент=Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураТД.Прочее.Количество()<>0 Тогда
			тзДанные=СтруктураТД.Прочее.Скопировать(); 
			тзДанные.Свернуть("ТОП, НеПринимаетсяУСН,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","Сумма,СуммаНДС");
			Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
				НоваяСтрока=Движения.РасходыПриУСН.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
				Если СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма=СтрокаКоллекции.Сумма;
				Иначе	
					НоваяСтрока.Сумма=СтрокаКоллекции.Сумма+СтрокаКоллекции.СуммаНДС;
				КонецЕсли;
 				НоваяСтрока.Активность=Истина;
				НоваяСтрока.Период=Дата;
				НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяСтрока.Организация=Организация;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.КупленоОплаченоПоставщику;
				НоваяСтрока.РасчетныйДокумент=Ссылка;
			КонецЦикла;	
		КонецЕсли;
		
		Если СтруктураТД.Товары.Количество()<>0 Тогда
			тзДанные=СтруктураТД.Товары.Скопировать(); 
			Если СтруктураШД.УчетнаяПолитика.УчитыватьСписание Тогда
				тзДанные.Свернуть("Номенклатура,ТОП,НеПринимаетсяУСН,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","Сумма,НДС");
			Иначе	
				тзДанные.Свернуть("ТОП,НеПринимаетсяУСН,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","Сумма,НДС");
			КонецЕсли;
			Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
				НоваяСтрока=Движения.РасходыПриУСН.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
				Если СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма=СтрокаКоллекции.Сумма;
				Иначе	
					НоваяСтрока.Сумма=СтрокаКоллекции.Сумма+СтрокаКоллекции.НДС;
				КонецЕсли;
				Если СтруктураШД.УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС=Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость Тогда
	 				НоваяСтрока.СуммаНДС=СтрокаКоллекции.НДС;
				КонецЕсли;
				НоваяСтрока.Активность=Истина;
				НоваяСтрока.Период=Дата;
				НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяСтрока.Организация=Организация;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.КупленоОплаченоПоставщику;
				НоваяСтрока.РасчетныйДокумент=Ссылка;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСПодотчетнымиЛицами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСПодотчетнымиЛицами") Тогда Возврат; КонецЕсли;
	
	// Следующие переменные будут содержать текущие (непогашенные) остатки сумм по табличным частям документа
	ОстПогСуммаТовары = Товары.Итог("Сумма")+?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"));
	ОстПогСуммаОплата = ОплатаПоставщикам.Итог("Сумма");
	ОстПогСуммаПрочее = Прочее.Итог("Сумма")+?(СуммаВключаетНДС, 0, Прочее.Итог("СуммаНДС"));
	
	НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
	тзДанные=НаборДвижений.ВыгрузитьКолонки();
	
	Для каждого СтрокаКоллекции Из СтруктураТД.Авансы Цикл
		ОстПогРКО = СтрокаКоллекции.Сумма;
		
		// Будем последовательно списывать суммы по табличным частям документа, делая движения.
		Пока ОстПогРКО > 0 Цикл
			// ОстПог - текущий остаток по текущей ТЧ документа, который надо погасить
			Если ОстПогСуммаТовары > 0 Тогда
				ОстПог=ОстПогСуммаТовары;  
				ОстПогСуммаТовары=ОстПогСуммаТовары - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаОплата > 0 Тогда
				ОстПог=ОстПогСуммаОплата;
				ОстПогСуммаОплата=ОстПогСуммаОплата - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаПрочее > 0 Тогда
				ОстПог=ОстПогСуммаПрочее;
				ОстПогСуммаПрочее=ОстПогСуммаПрочее - Мин(ОстПог, ОстПогРКО);
			Иначе
				Прервать;
			КонецЕсли;
			НоваяСтрока=тзДанные.Добавить();
			НоваяСтрока.Сумма=Мин(ОстПог, ОстПогРКО);

			ОстПогРКО=ОстПогРКО-НоваяСтрока.Сумма;
		КонецЦикла;
	КонецЦикла;

	// Если все суммы выданных авансов списаны, а суммы по расходам списаны неполностью, то возникает перерасход
	Перерасход=ОстПогСуммаТовары+ОстПогСуммаОплата+ОстПогСуммаПрочее;
	Если Перерасход > 0 Тогда
		НоваяСтрока=тзДанные.Добавить();
		НоваяСтрока.Сумма=Перерасход;
	КонецЕсли;

	тзДанные.ЗаполнитьЗначения(Дата, "Период");
	тзДанные.ЗаполнитьЗначения(Организация, "Организация");
	тзДанные.ЗаполнитьЗначения(ФизЛицо, "ФизЛицо");
	тзДанные.ЗаполнитьЗначения(Истина, "Активность");
	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДанные.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	Движения.ВзаиморасчетыСПодотчетнымиЛицами.Загрузить(тзДанные);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;
	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(СтруктураТД.Оплата);
КонецПроцедуры

Процедура ДвижениеПоРегистру_Затраты(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "Затраты") Тогда Возврат; КонецЕсли;
	
	тзДанные=Движения.Затраты.ВыгрузитьКолонки();
	Для Каждого СтрокаКоллекции Из СтруктураТД.Прочее Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если НЕ СтруктураШД.УчетнаяПолитика.НеВключатьНДСВЗатраты Тогда
			НоваяСтрока.Сумма=НоваяСтрока.Сумма+НоваяСтрока.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	Движения.Затраты.Загрузить(тзДанные);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыПолученные(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыПолученные") Тогда Возврат; КонецЕсли;
	
	Если СтруктураТД.ТараВТ.Количество()=0 Тогда Возврат; КонецЕсли;
	тзВозвратанаяТара=СтруктураТД.ТараВТ;
    тзВозвратанаяТара.Колонки.Добавить("СтатусПолучения");
	тзВозвратанаяТара.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "СтатусПолучения");
	тзВозвратанаяТара.ЗаполнитьЗначения(Дата, "Период");
	Движения.ТоварыПолученные.Загрузить(тзВозвратанаяТара);
КонецПроцедуры

Процедура ДвижениеПоРегистру_Закупки(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "Закупки") Тогда Возврат; КонецЕсли;
	
    тзДвижения=Движения.Закупки.ВыгрузитьКолонки();
	
	//Товары
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
	КонецЦикла;

	//Прочее
	Для каждого СтрокаКоллекции Из СтруктураТД.Прочее Цикл
		ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
	КонецЦикла;
	
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Подразделение, "Подразделение");
	тзДвижения.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	тзДвижения.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	
	Движения.Закупки.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыНаСкладах") Тогда Возврат; КонецЕсли;

		тзДвижения=Движения.ТоварыНаСкладах.ВыгрузитьКолонки();

		Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл //Товары
			Если СтрокаКоллекции.Склад.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда
				Если Не СтрокаКоллекции.Склад.Ячеистый Тогда Продолжить; КонецЕсли;
				ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;

		Для каждого СтрокаКоллекции Из СтруктураТД.ТараВТ Цикл //Тара
			Если СтрокаКоллекции.Склад.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда
				Если Не СтрокаКоллекции.Склад.Ячеистый Тогда Продолжить; КонецЕсли;
				ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;		

		//Регистр "Учет ТМЦ" (по ячейкам)
		Если тзДвижения.Количество()>0 Тогда
			тзДвижения.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			тзДвижения.ЗаполнитьЗначения(Дата, "Период");
			тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
			тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
			тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
			Движения.ТоварыНаСкладах.Загрузить(тзДвижения);
		КонецЕсли;

	Иначе //ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру

		ТаблицаПоТоварам=СтруктураТД.Товары;
		ТаблицаПоТаре=СтруктураТД.ТараВТ;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах=НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвиженийТоварыНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();

		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
	КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетПотребностей") Тогда Возврат; КонецЕсли;

	тзТМЦ=Новый ТаблицаЗначений;
	тзТМЦ.Колонки.Добавить("Склад");
	тзТМЦ.Колонки.Добавить("Номенклатура");
	тзТМЦ.Колонки.Добавить("ХарактеристикаНоменклатуры");
	тзТМЦ.Колонки.Добавить("Количество");
	тзТМЦ.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзТМЦ.Колонки.Добавить("ВидТабличнойЧасти");

	МассивСерийНоменклатуры=Новый Массив;	
	МассивХарактеристикНоменклатуры=Новый Массив;	
	МассивСкладов=Новый Массив;
    МассивТоваров=Новый Массив;

	Для каждого СтрокаКоллекции1 Из СтруктураТД Цикл
		Если НЕ СтрокаКоллекции1.Ключ="Товары" И НЕ СтрокаКоллекции1.Ключ="ТараВТ" Тогда Продолжить; КонецЕсли;

		Для каждого СтрокаКоллекции2 Из СтрокаКоллекции1.Значение Цикл
			ЗаполнитьЗначенияСвойств(тзТМЦ.Добавить(), СтрокаКоллекции2);
			Если СтрокаКоллекции1.Ключ="Товары" Тогда
				Если ЗначениеЗаполнено(СтрокаКоллекции2.ХарактеристикаНоменклатуры) Тогда
					МассивХарактеристикНоменклатуры.Добавить(СтрокаКоллекции2.ХарактеристикаНоменклатуры);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаКоллекции2.Склад) Тогда
				МассивСкладов.Добавить(СтрокаКоллекции2.Склад);
			КонецЕсли;
			МассивТоваров.Добавить(СтрокаКоллекции2.Номенклатура);
		КонецЦикла;
	КонецЦикла;

	стрУсловие="Организация = Организация И Склад В (&Склад) И Номенклатура В (&Номенклатура)";
	Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
		МассивХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	КонецЕсли;
	Если НЕ Сделки.Количество()=0 Тогда
		стрУсловие=стрУсловие+" И ДокументРезерва В (&Сделка)";
	КонецЕсли;
	ОрганизацияСсылка=Организация;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", МоментВремени());
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Склад", МассивСкладов);
	Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("Сделка", Сделки.ВыгрузитьКолонку("Сделка"));	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва,
	|	СУММА(ИсточникДанных1.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.УчетПотребностей.Остатки(&НаДату, "+стрУсловие+") КАК ИсточникДанных1
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва
	|";
	тзОстаткиПоСделкам=Запрос.Выполнить().Выгрузить();
	Если тзОстаткиПоСделкам.Количество()=0 Тогда Возврат; КонецЕсли;

	//Отсортируем сделки по порядку списания
	Если Сделки.Количество()>0 Тогда
		тзОстаткиПоСделкам.Колонки.Добавить("ПорядковыйНомер");
		Для каждого СтрокаКоллекции Из Сделки Цикл
			РезультатПоиска=тзОстаткиПоСделкам.Найти(СтрокаКоллекции.Сделка, "ДокументРезерва");
			Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
			РезультатПоиска.ПорядковыйНомер=Сделки.Индекс(СтрокаКоллекции);
		КонецЦикла;
		тзОстаткиПоСделкам.Сортировать("ПорядковыйНомер Возвр");
	КонецЕсли;

	тзДвижения=Движения.УчетПотребностей.ВыгрузитьКолонки();

	СтруктураОтбора=Новый Структура("Склад,Номенклатура,ХарактеристикаНоменклатуры");
	Для каждого СтрокаКоллекции1 Из тзТМЦ Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКоллекции1);
		МассивСтрок=тзОстаткиПоСделкам.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКоллекции2 Из МассивСтрок Цикл
			текКоличество=Мин(СтрокаКоллекции2.Количество, СтрокаКоллекции1.Количество);
			Если текКоличество<=0 Или СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции1.Количество=СтрокаКоллекции1.Количество-текКоличество;
            СтрокаКоллекции2.Количество=СтрокаКоллекции2.Количество-текКоличество;

			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.ДокументРезерва=СтрокаКоллекции2.ДокументРезерва;
			НоваяСтрока.Количество=текКоличество;			
		КонецЦикла;
	КонецЦикла; 

    тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ОрганизацияСсылка, "Организация");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	Движения.УчетПотребностей.Загрузить(тзДвижения);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСПодотчетнымиЛицами(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ)
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;
	
	СтруктурыТаблицДляПроведенияПоНДС=Новый Структура();
	СтруктурыТаблицДляПроведенияПоНДС.Вставить("ТаблицаПоТоварам", СтруктураТД.Товары);
	СтруктурыТаблицДляПроведенияПоНДС.Вставить("ТаблицаПоПрочее",  СтруктураТД.Прочее);
	
	Для Каждого ТаблицаДокумента Из СтруктурыТаблицДляПроведенияПоНДС Цикл
		Если ТаблицаДокумента.Значение.Количество()=0 Тогда  Продолжить; КонецЕсли;
		УчетНДС.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШД, ТаблицаДокумента.Значение, ТаблицаДокумента.Ключ, Движения, Отказ);
	КонецЦикла;
		
	//////////////////////////////////////////////////////////////////////
	// При необходимости, отражаем в регистре партионного учета для НДС
	Если СтруктурыТаблицДляПроведенияПоНДС.Свойство("ТаблицаПоТоварам") И СтруктурыТаблицДляПроведенияПоНДС.ТаблицаПоТоварам.Количество()>0 Тогда
		ТаблицаДляНДСПартии=СтруктурыТаблицДляПроведенияПоНДС.ТаблицаПоТоварам.скопировать();
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШД, ТаблицаДляНДСПартии, Движения.НДСПартииТоваров, Отказ);
	КонецЕсли;

	//Оплата поставщикам
	УчетНДС.ДвижениеДенежныхСредств(ЭтотОбъект);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)	
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;

	//ТОВАРЫ
	
	НаборДвижений = Движения.ПартииТоваровНаСкладах;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктураТД.Товары, ТаблицаДвижений);
	
	// Недостающие поля.
	ЗаполнитьПоляПартииТоваровНаСкладах(СтруктураТД.Товары, СтруктураШД, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.Купленный, СтруктураШД.УчетнаяПолитика.СпособОценкиМПЗ);
	
	// Код операции - поступление
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Поступление, "КодОперации");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();

	// При поступлении по ордеру нужно сторнировать партию ордера
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда		
		ТаблицаДвижений.Очистить();
		
		ТаблицаПартииПоОрдерам=СтруктураТД.Товары.Скопировать();
		ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
		
		Сч = 0;
		Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
			Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
				ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
			Иначе				
				// Документ оприходования - приходный ордер
				СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
				// Устанавливаем склад в склад приходного ордера
				СтрокаТаблицы.Склад = СтрокаТаблицы.ПриходныйОрдерСклад;

				Если НЕ СтрокаТаблицы.ВестиПартионныйУчетПоСериям Тогда
					СтрокаТаблицы.СерияНоменклатуры = Неопределено;
				КонецЕсли;
				
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			Для каждого Строка Из ТаблицаДвижений Цикл
				Строка.Количество = - Строка.Количество;
			КонецЦикла;
			
			ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
			// Код операции - поступление по ордеру (сторно)
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");
			
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// ТАРА
	
	НаборДвижений = Движения.ПартииТоваровНаСкладах;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктураТД.ТараВТ, ТаблицаДвижений);
	
	// Недостающие поля.
	ЗаполнитьПоляПартииТоваровНаСкладах(СтруктураТД.ТараВТ, СтруктураШД, ТаблицаДвижений, 
	Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, СтруктураШД.УчетнаяПолитика.СпособОценкиМПЗ);
	
	// Код операции - поступление
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Поступление, "КодОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
	КонецЕсли;
	
	// При поступлении по ордеру нужно сторнировать партию ордера
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		ТаблицаДвижений.Очистить();
		
		ТаблицаПартииПоОрдерам = СтруктураТД.ТараВТ.Скопировать();
		ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
		
		//Удалим не нужные строки (которые без права продажи).
		КолвоЭлементов = ТаблицаПартииПоОрдерам.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			СтрокаТаблицы = ТаблицаПартииПоОрдерам[КолвоЭлементов - ОбратныйИндекс];
			Если СтрокаТаблицы.БезПраваПродажи Тогда
				ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		// Документ оприходования - приходный ордрер
		Для каждого СтрокаТаблицы из ТаблицаПартииПоОрдерам Цикл
			СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
		КонецЦикла;
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		Для каждого Строка Из ТаблицаДвижений Цикл
			Строка.Количество = - Строка.Количество;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
	//*********************************************************************************************************
	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить корректировку списания
	//*********************************************************************************************************
	
	////////Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру И ТипЗнч(Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") И НЕ Склад.БезПраваПродажи Тогда		
	////////	Движения.ПартииТоваровНаСкладах.Записать();

	////////	СтруктураШД.Вставить("Отказ", Отказ);
	////////	СтруктураШД.Вставить("Организация", Организация);
	////////	СтруктураШД.Вставить("МоментВремени", МоментВремени());
	////////	СтруктураШД.Вставить("УчетнаяПолитика", СтруктураШД.УчетнаяПолитика);
	////////	СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
	////////	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
	////////КонецЕсли; //18.10.2015
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") И Основание.ВидОперации=Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидПоступления   = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		Склад       = Основание;
		ФизЛицо          = Основание.ФизЛицо;
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;
		ВалютаДокумента  = ДополнительныеСвойства.ВалютаБухУчета;

		ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ЗначениеЗаполнено(Основание.Контрагент) Тогда
			СтруктураПраметров=Новый Структура;
			СтруктураПраметров.Вставить("Организация", Организация);
			СтруктураПраметров.Вставить("Контрагент", Основание.Контрагент);
			СтруктураПраметров.Вставить("ВидДоговора", "СПоставщиком");
			ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

			Если ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ДоговорКонтрагента.ТипЦен) Тогда
				ТипЦен=ДоговорКонтрагента.ТипЦен;
			КонецЕсли;
		КонецЕсли;

		Если Основание.Проведен Тогда
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание, ДоговорКонтрагента);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") И Основание.ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ФизЛицо=Основание.Контрагент;
		ВалютаДокумента = ДополнительныеСвойства.ВалютаБухУчета;

		НоваяСтрока=ВыданныеАвансы.Добавить();
		НоваяСтрока.РасходныйКассовыйОрдер=Основание;
		НоваяСтрока.Сумма=Основание.СуммаДокумента;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
//	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ОбработкаПодчиненныхДокументовСчетФактура();
	
	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Проверяем заполнение обязательных реквизитов табличной части "Товары"
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.ПриходныйОрдер");
	КонецЕсли;
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "Товары", ПроверяемыеРеквизиты);

	//Проверяем заполнение обязательных реквизитов табличной части "Возвратная тара"
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ПриходныйОрдер");
	КонецЕсли;

	// Израсходованная сумма
	Если ВыданныеАвансы.Итог("Сумма") > СуммаДокумента Тогда
		Сообщить("Израсходованная сумма превышает сумму по документу!");
		//ОбщегоНазначения.СообщитьОбОшибке("Израсходованная сумма превышает сумму по документу!", Отказ, Заголовок);
		//Если Отказ Тогда Возврат; КонецЕсли;
	КонецЕсли;

	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураШД.Вставить("ВидСклада", Склад.ВидСклада);
	Иначе	
		СтруктураШД.Вставить("ВидСклада", Склад.Склад.ВидСклада);
		СтруктураШД.Вставить("СкладПриходногоОрдера", Склад.Склад);
	КонецЕсли; 
	
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Товары", СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));
	СтруктураТД.Вставить("ТараВТ", СформироватьТаблицу_ТараВТ(СтруктураШД, Отказ, Заголовок));
	СтруктураТД.Вставить("Авансы", СформироватьТаблицу_Авансы(СтруктураШД, Отказ, Заголовок));
	СтруктураТД.Вставить("Оплата", СформироватьТаблицу_Оплата(СтруктураШД, Отказ, Заголовок));
	СтруктураТД.Вставить("Прочее", СформироватьТаблицу_Прочие(СтруктураШД, Отказ, Заголовок));
	
	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Покупка");