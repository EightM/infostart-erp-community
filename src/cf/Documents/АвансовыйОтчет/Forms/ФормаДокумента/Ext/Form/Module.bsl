&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()
	Объект.СуммаДокумента=Объект["Товары"].Итог("Сумма")+Объект["Прочее"].Итог("Сумма");
	Объект.СуммаНДС=Объект["Товары"].Итог("СуммаНДС")+Объект["Прочее"].Итог("СуммаНДС");

	Если Объект.УчитыватьНДС И Не Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента=Объект.СуммаДокумента+Объект.СуммаНДС;
	КонецЕсли;

	ВременнаяСтрока="Тип цен: "+?(ЗначениеЗаполнено(Объект.ТипЦен), Строка(Объект.ТипЦен)+".", "Не заполнено!");
	Элементы.ЦенаВалютаДокумента.Заголовок=ВременнаяСтрока;

	Элементы.НадписьВсего.Заголовок="Всего ("+СокрЛП(Объект.ВалютаДокумента)+")";
	Элементы.НадписьВсегоНДС.Заголовок="НДС "+?(Объект.СуммаВключаетНДС, "(в т. ч.)", "(сверху)");
	
	Элементы.ИнфНадписьВсегоАвансов.Заголовок=Объект.ВыданныеАвансы.Итог("Сумма");
	Элементы.ИнфНадписьИзрасходованно.Заголовок = "Израсходовано авансов, " + СокрЛП(Объект.ВалютаДокумента) + ":";
	
	ВсегоПоОтчету=Объект.Товары.Итог("Сумма");
	Элементы.ИнфНадписьВсегоПоОтчету.Заголовок=Объект.Товары.Итог("Сумма")+Объект.ОплатаПоставщикам.Итог("Сумма")+Объект.Прочее.Итог("Сумма")+Объект.Прочее.Итог("СуммаНДС");
	Элементы.ИнфВсегоПоОтчету.Заголовок="По отчету, "+СокрЛП(Объект.ВалютаДокумента)+":";	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы()
	тпВыданныеАвансы_ОбновитьПредставление();
	ОбновитьНадписи();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	Видимость=Объект.УчитыватьНДС;
	Элементы.ТоварыПредъявленСФ.Видимость=Видимость;
	Элементы.ТоварыДатаСФ.Видимость=Видимость;
	Элементы.ТоварыНомерСФ.Видимость=Видимость;
	Элементы.ТоварыСчетФактура.Видимость=Видимость;
	
	Элементы.ПрочееПредъявленСФ.Видимость=Видимость;
	Элементы.ПрочееДатаСФ.Видимость=Видимость;
	Элементы.ПрочееНомерСФ.Видимость=Видимость;
	Элементы.ПрочееСчетФактура.Видимость=Видимость;

	ВидимостьПриходногоОрдера=Объект.ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
	
	Элементы.кпТовары_ЗаполнитьПоПриходномуОрдеру.Доступность=ВидимостьПриходногоОрдера;
	Элементы.кпТовары_ДобавитьПоПриходномуОрдеру.Доступность=ВидимостьПриходногоОрдера;
	
	Элементы.ТоварыПриходныйОрдер.Видимость=ВидимостьПриходногоОрдера;
	Элементы.ВозвратнаяТараПриходныйОрдер.Видимость=ВидимостьПриходногоОрдера;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипСкладаОрдера()
	Если Объект.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если НЕ ТипЗнч(Объект.Склад)=Тип("СправочникСсылка.Склады") Тогда
			Объект.Склад=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
		КонецЕсли;
		Элементы.Склад.Подсказка = "В этом поле необходимо указать склад, на который необходимо оформить поступление товаров.";
	Иначе
		Если НЕ ТипЗнч(Объект.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Объект.Склад=Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
		Элементы.Склад.Подсказка = "В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СуммаПоТребованиюНакладной(ДокументСсылка) 
	Возврат ДокументСсылка.Материалы.Итог("СтоимостьУУ");
КонецФункции

&НаСервере
Процедура ПриИзмененииВидаСклада()
	Если Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ВидСклада=Объект.Склад.ВидСклада;
	Иначе
		ВидСклада=Объект.Склад.Склад.ВидСклада;
	КонецЕсли;

	ФлагАвтоОтметкиНезаполненого = Истина;
	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	Элементы.ТоварыСумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	Элементы.ТоварыЦена.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	
	Элементы.ВозвратнаяТараСумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	Элементы.ВозвратнаяТараЦена.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
КонецПроцедуры

&НаСервере
Процедура тпАвансы_Заполнить()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Дата КАК Дата
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.ФизЛицо = &ФизЛицо
	|	И АвансовыйОтчет.Проведен = ИСТИНА
	|";
	тзДаты=Запрос.Выполнить().Выгрузить();
	Если тзДаты.Количество()=0 Тогда
		ДатаНачала='00010101';
	Иначе	
		тзДаты.Сортировать("Дата Убыв");
		ДатаНачала=тзДаты[0].Дата;
	КонецЕсли;	
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Объект.Дата));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Регистратор Как РасходныйКассовыйОрдер,
	|	ИсточникДанных.СуммаПриход Как Сумма,
	|	ИсточникДанных.СуммаПриход Как СуммаВыдано
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Обороты(&ДатаНачала, &ДатаКонца, Регистратор, ФизЛицо = &ФизЛицо И Организация = &Организация) КАК ИсточникДанных
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникДанных.Регистратор.Дата,
	|	ИсточникДанных.Регистратор.Номер
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Сообщить("У подотчетного лица """            	   + СокрЛП(Объект.ФизЛицо)         +
		""" отсутствуют выданные авансы,"                  + Символы.ПС              +
		"за которые он не отчитался перед организацией """ + СокрЛП(Объект.Организация)     +
		""" в валюте взаиморасчетов """                    + СокрЛП(Объект.ВалютаДокумента) + """");
	Иначе
		Объект.ВыданныеАвансы.Загрузить(Результат.Выгрузить());
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;
	Поставщик = ДокументОснование.Контрагент;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад" , Объект.Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	МИНИМУМ(ИсточникДанных1.НомерСтроки) КАК НомерСтроки,
	|	ИсточникДанных1.Номенклатура КАК Номенклатура,
	|	ИсточникДанных1.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИсточникДанных2.Склад КАК Склад,
	|	СУММА(ИсточникДанных1.Количество) КАК КоличествоПоСерии,
	|	МАКСИМУМ(ИсточникДанных2.КоличествоОстаток) КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ИсточникДанных1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК ИсточникДанных2
	|		ПО ИсточникДанных1.Номенклатура = ИсточникДанных2.Номенклатура
	|			И ИсточникДанных1.СерияНоменклатуры = ИсточникДанных2.СерияНоменклатуры
	|			И ИсточникДанных1.ХарактеристикаНоменклатуры = ИсточникДанных2.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ИсточникДанных1.Ссылка = &ДокументОснование
	|	И ИсточникДанных2.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.СерияНоменклатуры,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных2.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);

		СтрокаТабличнойЧасти.Количество=Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения=СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент=СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС=СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		СтрокаТабличнойЧасти.Контрагент=Поставщик;
		СтрокаТабличнойЧасти.ПриходныйОрдер=ДокументОснование;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, МодульВалютногоУчета.ПолучитьВалюту());
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговора(ИдентификаторСтроки)
	СтрокаТабличнойЧасти=Объект.ОплатаПоставщикам.НайтиПоИдентификатору(ИдентификаторСтроки);	

	СтруктураКурсаВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
		
	СтрокаТабличнойЧасти.Сделка=Неопределено;
	СтрокаТабличнойЧасти.Курс=СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаТабличнойЧасти.Кратность=СтруктураКурсаВзаиморасчетов.Кратность;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаТабличнойЧасти.Проект = СтрокаТабличнойЧасти.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов(ИдентификаторСтроки);	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВзаиморасчетов(ИдентификаторСтроки)
	СтрокаТабличнойЧасти=Объект.ОплатаПоставщикам.НайтиПоИдентификатору(ИдентификаторСтроки);	
	СтрокаТабличнойЧасти.СуммаВал=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, Объект.ВалютаДокумента,
	                                СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                                Объект.КурсДокумента, СтрокаТабличнойЧасти.Курс,
	                                Объект.КратностьДокумента,СтрокаТабличнойЧасти.Кратность);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		Для Каждого СтрокаТаблицы ИЗ Объект.ОплатаПоставщикам Цикл
			Если ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента,"Организация")=Элемент.Значение Тогда Продолжить; КонецЕсли;
			СтрокаТаблицы.ДоговорКонтрагента=ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЦикла;	
		
	ИначеЕсли Элемент.Имя="ВидПоступления" Тогда
		//ИзменениеСклада();
		//ИначеЕсли Элемент.Имя="Склад" Тогда
		УстановитьТипСкладаОрдера();
		УстановитьВидимостьДоступность();
		ПриИзмененииВидаСклада();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);

	Если Элемент.Имя="Склад" Тогда
		Если Не Объект.ВидПоступления=ПредопределенноеЗначение("Перечисление.ВидыПоступленияТоваров.НаСклад") Тогда
			СтандартнаяОбработка=Ложь;

			ПараметрыФормы=Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходныйОрдер.ОтПодотчетника")));

			ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
		
	ИначеЕсли стрКоманда="ОбновитьПредставлениеТабличнойЧасти" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;
	
	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоПриходномуОрдеру(Параметр1, Параметр2) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметр1) Тогда	Возврат; КонецЕсли;
	ЗаполнитьТоварыПоОснованию(Параметр1);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличная части " выданные авансы"

&НаКлиенте
Процедура кпВыданныеАвансы_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Авансы"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьПоОстаткам" Тогда
		тпАвансы_Заполнить();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кпВыданныеАвансы_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВыданныеАвансы_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпВыданныеАвансы_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура кпВыданныеАвансы_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Авансы", "");
	ТекущиеДанные=Элементы.Авансы.ТекущиеДанные;

	Если стрКолонка="РасходныйКассовыйОрдер" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.РасходныйКассовыйОрдер) Тогда
			ТекущиеДанные.Сумма=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.РасходныйКассовыйОрдер, "СуммаДокумента");
			ТекущиеДанные.СуммаВыдано=ТекущиеДанные.Сумма;
			тпВыданныеАвансы_ОбновитьПредставление();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВыданныеАвансы_Колонка_НачалоВыбора(Элемент, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "Авансы", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="РасходныйКассовыйОрдер" Тогда
		СтандартнаяОбработка=Ложь;
		
		спМеню=Новый СписокЗначений;
		спМеню.Добавить("РасходныйКассовыйОрдер", "Расходный кассовый ордер");
		спМеню.Добавить("ПлатежноеПоручениеИсходящее", "Платежное поручение исходящее");
		спМеню.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств", "Платежный ордер: списание денежных средств");
		//*** спМеню.Добавить("ТребованиеНакладная", "Требование накладная");
		ЗначениеВыбора=ВыбратьИзСписка(спМеню, Элементы.Авансы);
		Если ЗначениеВыбора=Неопределено Тогда Возврат; КонецЕсли; 
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
		СтруктураОтбора.Вставить("Контрагент", Объект.ФизЛицо);

		Если ЗначениеВыбора.Значение="РасходныйКассовыйОрдер" Тогда			
			СтруктураОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику"));

		ИначеЕсли ЗначениеВыбора.Значение="ПлатежноеПоручениеИсходящее" Тогда
			СтруктураОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ВыдачаДенежныхСредствПодотчетнику"));
			
		ИначеЕсли ЗначениеВыбора.Значение="ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			СтруктураОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВыдачаДенежныхСредствПодотчетнику"));
		КонецЕсли;

		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);		
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		
		ОткрытьФорму("Документ."+ЗначениеВыбора.Значение+".ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВыданныеАвансы_ОбновитьПредставление()
	Для каждого СтрокаКоллекции Из Объект.ВыданныеАвансы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.РасходныйКассовыйОрдер) Тогда Продолжить; КонецЕсли;
		Если ТипЗнч(СтрокаКоллекции.РасходныйКассовыйОрдер)=Тип("ДокументСсылка.ТребованиеНакладная") Тогда
			СтрокаКоллекции.СуммаРКО=СуммаПоТребованиюНакладной(СтрокаКоллекции.РасходныйКассовыйОрдер);
		Иначе
			СтрокаКоллекции.СуммаРКО=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаКоллекции.РасходныйКассовыйОрдер, "СуммаДокумента");
		КонецЕсли;
		СтрокаКоллекции.Выдано=СтрокаКоллекции.СуммаРКО;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоПриходномуОрдеру" Или стрКоманда="ДобавитьПоПриходномуОрдеру" Тогда
		Если Не Объект.ВидПоступления=ПредопределенноеЗначение("Перечисление.ВидыПоступленияТоваров.ПоОрдеру") Тогда
			ПоказатьПредупреждение(,"Заполнять на основании приходного ордера можно только авансовый отчет по ордеру!", 30);
			Возврат;
		КонецЕсли;
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ФизЛицо", Объект.ФизЛицо));
		
		ОписаниеОповещенияЗакрытия=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоПриходномуОрдеру", ЭтотОбъект);
		ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещенияЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	//ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
		СтрокаТабличнойЧасти=Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда Возврат; КонецЕсли; 
		
		Если ТипЗнч(Объект.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
				СтрокаТабличнойЧасти.ПриходныйОрдер=Объект.Склад;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Склад,"Склад");
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад=Объект.Склад;
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаАкциза,СтавкаНДС");

		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.СтавкаНДС=СтруктураНоменклатуры.СтавкаНДС;
		
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму();
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
				тпТовары_РассчитатьСумму();
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли стрКолонка="Количество" Тогда
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="Цена" Тогда
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);		
		ОбновитьНадписи();

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпТовары_РассчитатьСумму();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	ТекущиеДанные.Сумма=Сумма;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);

	ОбновитьНадписи();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Возвратная тара"

&НаКлиенте
Процедура тпВозвратнаяТара_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
		СтрокаТабличнойЧасти=Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда Возврат; КонецЕсли; 
		
		Если ТипЗнч(Объект.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
				СтрокаТабличнойЧасти.ПриходныйОрдер=Объект.Склад;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Склад,"Склад");
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад=Объект.Склад;
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ВозвратнаяТара", "");
	ТекущиеДанные=Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		тпВозвратнаяТара_РассчитатьСумму();

	ИначеЕсли стрКолонка="Количество" Тогда
		тпВозвратнаяТара_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпВозвратнаяТара_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС);		
		ОбновитьНадписи();
		
	ИначеЕсли стрКолонка="Контрагент" Тогда
		ДоговорКонтрагента=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Контрагент,"ОсновнойДоговорКонтрагента");
		ВидДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента,"ВидДоговора");
		ОрганизацияДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента,"Организация");
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Если ВидДоговора=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
				ТекущиеДанные.ДоговорКонтрагента=ДоговорКонтрагента;
			Иначе
				ТекущиеДанные.ДоговорКонтрагента=Неопределено;
			КонецЕсли;
		ИначеЕсли ОрганизацияДоговора=Объект.Организация Тогда
			Если ВидДоговора=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
				ТекущиеДанные.ДоговорКонтрагента=ДоговорКонтрагента;
			Иначе
				ТекущиеДанные.ДоговорКонтрагента=Неопределено;
			КонецЕсли;
		Иначе
			ТекущиеДанные.ДоговорКонтрагента=Неопределено;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_РассчитатьСумму(СпособРасчета=Неопределено)
	ТекущиеДанные=Элементы.ВозвратнаяТара.ТекущиеДанные;
	ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;

	ОбновитьНадписи();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличная части "Оплата поставщикам"

&НаКлиенте
Процедура тпОплатаПоставщикам_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпОплатаПоставщикам_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпОплатаПоставщикам_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОплатаПоставщикам", "");
	ТекущиеДанные=Элементы.ОплатаПоставщикам.ТекущиеДанные;

	Если стрКолонка="Контрагент" Тогда
		ОсновнойДоговорКонтрагента=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Контрагент,"ОсновнойДоговорКонтрагента");
		ОрганизацияДоговор=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОсновнойДоговорКонтрагента,"Организация");
		
		Если ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) И ОрганизацияДоговор=Объект.Организация Тогда
			ТекущиеДанные.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
		Иначе
			ТекущиеДанные.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
    	ПриИзмененииДоговора(Элементы.ОплатаПоставщикам.ТекущаяСтрока);

	ИначеЕсли стрКолонка="ДоговорКонтрагента" Тогда
		ПриИзмененииДоговора(Элементы.ОплатаПоставщикам.ТекущаяСтрока);

	ИначеЕсли стрКолонка="Сумма" Тогда
		РассчитатьСуммуВзаиморасчетов(Элементы.ОплатаПоставщикам.ТекущаяСтрока);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпОплатаПоставщикам_Колонка_НачалоВыбора(Элемент, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОплатаПоставщикам", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Сделка" Тогда
		ДоговорКонтрагента   = ТекущиеДанные.ДоговорКонтрагента;
		Сделка               = ТекущиеДанные.Сделка;
		СтандартнаяОбработка = Ложь;
		
		// Без договора сделку выбирать не будем.
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ПоказатьПредупреждение(,"Не выбран договор контрагента!", 10);
			Элементы.ОплатаПоставщикам.ТекущийЭлемент=Элементы.ОплатаПоставщикамДоговорКонтрагента;
			Возврат;
		КонецЕсли;

		// Тип выбираемого значения зависит от договора.
		Если ДоговорКонтрагента.ВидДоговора=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее") Тогда
			ПоказатьПредупреждение(,"По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!", 10);
			Элементы.ОплатаПоставщикам.ТекущийЭлемент=Элементы.ОплатаПоставщикамДоговорКонтрагента;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли стрКолонка="КурсВзаиморасчетов" Тогда
		СтандартнаяОбработка = Ложь;
		
		// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
			ПоказатьПредупреждение(,"Для выбора курса взаиморасчетов нужно выбрать договор контрагента.", 10);
			Возврат;
		КонецЕсли;
		
		//*******Ринат
		//ФормаВводаКурсаИКратности=ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
		//ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		//ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
		//ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
		//ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
		//
		//СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
		//Если СтруктураКурсаИКратности <> неопределено Тогда
		//	СтрокаТабличнойЧасти.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		//	СтрокаТабличнойЧасти.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		//КонецЕсли;
		
		РассчитатьСуммуВзаиморасчетов(Элементы.Товары.ТекущаяСтрока);

	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличная части "Прочее"

&НаКлиенте
Процедура тпПрочее_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПрочее_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПрочее_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Прочее", "");
	ТекущиеДанные=Элементы.Прочее.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаАкциза,СтавкаНДС");
		ТекущиеДанные.СтавкаНДС=СтруктураНоменклатуры.СтавкаНДС;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяЗатрат) Тогда
			ТекущиеДанные.СтатьяЗатрат=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура,"СтатьяЗатрат");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатурнаяГруппа) Тогда
			ТекущиеДанные.НоменклатурнаяГруппа=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура,"НоменклатурнаяГруппаЗатрат");
		КонецЕсли;

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		
	ИначеЕсли стрКолонка="СуммаПоОтчету" Тогда
		ТекущиеДанные.Сумма=ТекущиеДанные.СуммаПоОтчету;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	
	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.Сумма=ТекущиеДанные.СуммаПоОтчету;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Сделки"

&НаКлиенте
Процедура тпСделки_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура кпСделки_ВыполнитьДействие(Команда)
	тпСделки_Подбор("Заполнить", ЭтаФорма);
КонецПроцедуры
 
&НаКлиенте
Процедура тпСделки_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь; тпСделки_Подбор("Изменить", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_Подбор(стрКоманда, Владелец)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("МножественныйВыбор", стрКоманда="Заполнить");

	УправлениеЗаказамиКлиент.ВыполнитьДействие(СтруктураПараметров, Владелец, стрКоманда);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТипСкладаОрдера();
	УстановитьВидимостьДоступность();
	ПриИзмененииВидаСклада();
	ОбновитьДанныеФормы();
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ Объект.Ссылка.Пустая() И ТипЗнч(ВладелецФормы)=Тип("УправляемаяФорма") И ВладелецФормы.Объект.Свойство("ДокументОснование") Тогда
		ВладелецФормы.Объект.ДокументОснование=Объект.Ссылка;
	КонецЕсли;	
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора)=Тип("УправляемаяФорма") Тогда
		Если ИсточникВыбора.ИмяФормы="Обработка.ПодборТовара.Форма.Форма" Тогда
			тпТабличноеПоле_Изменить(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//***ТекущийОбъект.АвтоЗаполнениеРеквизитовДокумента();
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпВыданныеАвансы_ОбновитьПредставление();
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры