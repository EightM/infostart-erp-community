////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьСостав(Параметр1, Параметр2=Неопределено) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	Объект.Состав.Очистить();
	ЗаполнитьСтрокиДокумента();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

//Процедура заполнения табличной части по данным подсистемы НДС
&НаСервере
Процедура ЗаполнитьСтрокиДокумента() Экспорт
	ТаблицаВосстановления=Объект.Состав.Выгрузить();
	
	Дерево_НДСДляВосстановления = ЗаполнитьПоДаннымОперативныхРегистровНДС();
	Если Дерево_НДСДляВосстановления.Строки.Количество() = 0 Тогда
		// Не обнаружен НДС к восстановлению.
		Объект.Состав.Очистить(); Возврат;
	КонецЕсли; 
	
	СписокСчетовФактур=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСДляВосстановления.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	ЗаписиКнигиПокупок=ПолучитьЗаписиКнигиПокупокПоСпискуСФ(СписокСчетовФактур);

	ОпределитьДатуОплатыПоЗаписямКнигиПокупок(Дерево_НДСДляВосстановления, ТаблицаВосстановления, СписокСчетовФактур, ЗаписиКнигиПокупок);
	Для каждого СтрокаВосстановления Из ТаблицаВосстановления Цикл
		ТипСФ = ТипЗнч(СтрокаВосстановления.СчетФактура);
		Если ТипСФ = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		    СтрокаВосстановления.НеСохранятьРаспределениеОплат = Истина;
		КонецЕсли; 
		Если Объект.ОтразитьВКнигеПродаж Тогда
			СтрокаВосстановления.КодВидаОперации="21";
		Иначе
			СтрокаВосстановления.КодВидаОперации="25";
		КонецЕсли;	
	КонецЦикла; 

	Объект.Состав.Загрузить(ТаблицаВосстановления);	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоДаннымОперативныхРегистровНДС()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНДСКВычету.Организация,
	|	ОстаткиНДСКВычету.СчетФактура КАК СчетФактура,
	|	ОстаткиНДСКВычету.ВидЦенности,
	|	ОстаткиНДСКВычету.СтавкаНДС,
	|	СУММА(-ОстаткиНДСКВычету.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(-ОстаткиНДСКВычету.НДСОстаток) КАК НДС,
	|	СУММА(-ОстаткиНДСКВычету.СуммаБезНДСОстаток - ОстаткиНДСКВычету.НДСОстаток) КАК СуммаСНДС_КВычету,
	|	ОстаткиНДСКВычету.СчетФактураДата КАК СчетФактураДата,
	|	ЕСТЬNULL(ОстаткиНДСКВычету.СчетФактура.Контрагент, НЕОПРЕДЕЛЕНО) КАК СчетФактураКонтрагент,
	|	ВЫБОР
	|		КОГДА ОстаткиНДСКВычету.СчетФактура.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетФактураСодержитКонтрагента
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПредъявленныйОстатки.Организация КАК Организация,
	|		НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|		НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|		НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|		НДСПредъявленныйОстатки.НДСОстаток КАК НДСОстаток,
	|		НДСПредъявленныйОстатки.СчетФактура.Дата КАК СчетФактураДата
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Остатки(&КонецПериода, Организация = &Организация) КАК НДСПредъявленныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСПредъявленныйРеализация0Остатки.Организация,
	|		НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|		НДСПредъявленныйРеализация0Остатки.ВидЦенности,
	|		НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|		-НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток,
	|		-НДСПредъявленныйРеализация0Остатки.НДСОстаток,
	|		НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки) КАК ОстаткиНДСКВычету
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНДСКВычету.СтавкаНДС,
	|	ОстаткиНДСКВычету.СчетФактура,
	|	ОстаткиНДСКВычету.ВидЦенности,
	|	ОстаткиНДСКВычету.Организация,
	|	ОстаткиНДСКВычету.СчетФактураДата,
	|	ЕСТЬNULL(ОстаткиНДСКВычету.СчетФактура.Контрагент, НЕОПРЕДЕЛЕНО),
	|	ВЫБОР
	|		КОГДА ОстаткиНДСКВычету.СчетФактура.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиНДСКВычету.СуммаБезНДСОстаток) + СУММА(ОстаткиНДСКВычету.НДСОстаток) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(НДС),
	|	СУММА(СуммаСНДС_КВычету)
	|ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериода", Новый	Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	
	ДеревоРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Определение поставщика
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"		, Объект.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры"	, ДеревоРезультата.Строки.ВыгрузитьКолонку("СчетФактура"));
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	
	ДеревоРезультата.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Для каждого СтрокаОбрабатываемая  Из ДеревоРезультата.Строки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			Для каждого СтрокаРасшифровки Из СтрокаОбрабатываемая.Строки Цикл
				СтрокаРасшифровки.Поставщик = СтрокаОбрабатываемая.Поставщик;
			КонецЦикла; 
		ИначеЕсли СтрокаОбрабатываемая.СчетФактураСодержитКонтрагента Тогда
			СтрокаОбрабатываемая.Поставщик = СтрокаОбрабатываемая.СчетФактураКонтрагент;
			Для каждого СтрокаРасшифровки Из СтрокаОбрабатываемая.Строки Цикл
				СтрокаРасшифровки.Поставщик = СтрокаОбрабатываемая.Поставщик;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДеревоРезультата;

КонецФункции

// Процедура вызывается из ЗаполнитьСтрокиДокумента.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
&НаСервере
Функция ПолучитьЗаписиКнигиПокупокПоСпискуСФ(СписокСчетовФактур)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", Новый	Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик КАК Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот) КАК СуммаБезНДС,
	|	СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот) КАК НДС,
	|	НДСЗаписиКнигиПокупок.Период КАК КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|			И СчетФактура В (&СписокСчетовФактур)) КАК НДСЗаписиКнигиПокупокОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ПО НДСЗаписиКнигиПокупокОбороты.Поставщик = НДСЗаписиКнигиПокупок.Поставщик
	|			И НДСЗаписиКнигиПокупокОбороты.СчетФактура = НДСЗаписиКнигиПокупок.СчетФактура
	|			И НДСЗаписиКнигиПокупокОбороты.ВидЦенности = НДСЗаписиКнигиПокупок.ВидЦенности
	|			И НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = НДСЗаписиКнигиПокупок.СтавкаНДС
	|			И НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = НДСЗаписиКнигиПокупок.ДатаОплаты
	|			И НДСЗаписиКнигиПокупокОбороты.ДокументОплаты = НДСЗаписиКнигиПокупок.ДокументОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ДатаОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупок.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата,
	|	ДатаОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты.Дата
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(НДС)
	|ПО
	|	СчетФактура
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

&НаСервере
Процедура ОпределитьДатуОплатыПоЗаписямКнигиПокупок(Дерево_НДСДляВосстановления, ТаблицаРезультатов, СписокСчетовФактур, ЗаписиКнигиПокупок)
	//УчетнаяПолитика=ПараметрыУчетнойПолитики(Истина);
	УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
	
	Для каждого СтрокаСФ Из Дерево_НДСДляВосстановления.Строки Цикл
		НаборЗаписейКнигиПокупокПоСФ = ЗаписиКнигиПокупок.Строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		Если НаборЗаписейКнигиПокупокПоСФ = Неопределено тогда
			// Сокращеный вариант - записи книги не обнаружены, отражаем по текущим данным,
			// без указания документа и даты оплаты.
			Для каждого ЗаписьПОСФ Из СтрокаСФ.Строки Цикл
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= ЗаписьПОСФ.СчетФактура;
				СтрокаРезультата.Поставщик		= ЗаписьПОСФ.Поставщик;
				СтрокаРезультата.ВидЦенности	= ЗаписьПОСФ.ВидЦенности;
				СтрокаРезультата.СтавкаНДС		= ЗаписьПОСФ.СтавкаНДС;

				СтрокаРезультата.СуммаБезНДС	= ЗаписьПОСФ.СуммаБезНДС;
				СтрокаРезультата.НДС			= ЗаписьПОСФ.НДС;
				Если Объект.Дата >= '20060530' И Не Объект.ОтразитьВКнигеПродаж Тогда
					СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
					Если ЗаписьПОСФ.СчетФактураДата > '20060101' Тогда
						СтрокаРезультата.КорректируемыйПериод = ЗаписьПОСФ.СчетФактураДата;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			Продолжить;
		КонецЕсли;
		
		Для каждого ЗаписьПОСФ Из СтрокаСФ.Строки Цикл
			Отбор = новый Структура("Поставщик, ВидЦенности, СтавкаНДС",ЗаписьПОСФ.Поставщик, ЗаписьПОСФ.ВидЦенности, ЗаписьПОСФ.СтавкаНДС);
			
			ЗаписиКнигиПоОтбору = НаборЗаписейКнигиПокупокПоСФ.Строки.НайтиСтроки(Отбор);
			
			Для каждого СторнируемаяЗаписьКнигиПокупок Из ЗаписиКнигиПоОтбору Цикл
				КВосстановлению_БезНДС = макс(0,мин(ЗаписьПОСФ.СуммаБезНДС, СторнируемаяЗаписьКнигиПокупок.СуммаБезНДС));
				КВосстановлению_НДС = макс(0,мин(ЗаписьПОСФ.НДС, СторнируемаяЗаписьКнигиПокупок.НДС));
				Если КВосстановлению_БезНДС =0 и КВосстановлению_НДС =0 Тогда Продолжить; КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= ЗаписьПОСФ.СчетФактура;
				СтрокаРезультата.Поставщик		= ЗаписьПОСФ.Поставщик;
				СтрокаРезультата.ВидЦенности	= ЗаписьПОСФ.ВидЦенности;
				СтрокаРезультата.СтавкаНДС		= ЗаписьПОСФ.СтавкаНДС;

				СтрокаРезультата.СуммаБезНДС	= КВосстановлению_БезНДС;
				СтрокаРезультата.НДС			= КВосстановлению_НДС;
				
				СтрокаРезультата.ДатаОплаты		= СторнируемаяЗаписьКнигиПокупок.ДатаОплаты;
				СтрокаРезультата.ДокументОплаты	= СторнируемаяЗаписьКнигиПокупок.ДокументОплаты;
				
				Если Не Объект.ОтразитьВКнигеПродаж Тогда
					СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
					Если ЗаписьПОСФ.СчетФактураДата < '20060101' Тогда
						СтрокаРезультата.КорректируемыйПериод = ?(НЕ ЗначениеЗаполнено(СторнируемаяЗаписьКнигиПокупок.ДатаОплаты), '00010101', 
																	Макс(ЗаписьПОСФ.СчетФактураДата, СторнируемаяЗаписьКнигиПокупок.ДатаОплаты));
					Иначе										
						СтрокаРезультата.КорректируемыйПериод = ЗаписьПОСФ.СчетФактураДата;
					КонецЕсли;
					Если ?(УчетнаяПолитика.НДСНалоговыйПериод=Перечисления.Периодичность.Месяц, 
							КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Объект.Дата),
							КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Объект.Дата)) Тогда
						СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
						СтрокаРезультата.КорректируемыйПериод = '00010101';
					КонецЕсли;
				КонецЕсли;
				
				ЗаписьПОСФ.СуммаБезНДС						= ЗаписьПОСФ.СуммаБезНДС - КВосстановлению_БезНДС;
				ЗаписьПОСФ.НДС								= ЗаписьПОСФ.НДС - КВосстановлению_НДС;
				
				СторнируемаяЗаписьКнигиПокупок.СуммаБезНДС	= СторнируемаяЗаписьКнигиПокупок.СуммаБезНДС - КВосстановлению_БезНДС;
				СторнируемаяЗаписьКнигиПокупок.НДС 			= СторнируемаяЗаписьКнигиПокупок.НДС - КВосстановлению_НДС;
			КонецЦикла; 
			
			Если ЗаписьПОСФ.СуммаБезНДС>0 или ЗаписьПОСФ.НДС>0 Тогда
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= ЗаписьПОСФ.СчетФактура;
				СтрокаРезультата.Поставщик		= ЗаписьПОСФ.Поставщик;
				СтрокаРезультата.ВидЦенности	= ЗаписьПОСФ.ВидЦенности;
				СтрокаРезультата.СтавкаНДС		= ЗаписьПОСФ.СтавкаНДС;
				Если Объект.Дата >= '20060530' И Не Объект.ОтразитьВКнигеПродаж Тогда
					СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
					Если ЗаписьПОСФ.СчетФактураДата >= '20060101' Тогда
						СтрокаРезультата.КорректируемыйПериод = ЗаписьПОСФ.СчетФактураДата;
					КонецЕсли;
				КонецЕсли;

				СтрокаРезультата.СуммаБезНДС	= ЗаписьПОСФ.СуммаБезНДС;
				СтрокаРезультата.НДС			= ЗаписьПОСФ.НДС;
			КонецЕсли; 
		КонецЦикла;			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакДопЛистаДляСтрокДокумента()
	Если Объект.Дата < '20060530' Тогда Возврат; КонецЕсли; // До вступления в силу 283-ФЗ записи в доп.листе не отражались
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Объект.Дата, Неопределено,Объект.Организация, "Нал");
	Если УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") Тогда
		Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
			НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
		Иначе
			НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
		КонецЕсли;
	Иначе
		НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
	КонецЕсли;
	НачалоНалоговогоПериода = ?(НДСНалоговыйПериод = Перечисления.Периодичность.Квартал,НачалоКвартала(Объект.Дата),НачалоМесяца(Объект.Дата));
	Для каждого СтрокаВосстановления Из Объект.Состав Цикл
		Если Не ЗначениеЗаполнено(СтрокаВосстановления.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		ДатаСФ = СтрокаВосстановления.СчетФактура.Дата;
		Если ДатаСФ < '20060101' Тогда
			КорректируемыйПериод = ?(СтрокаВосстановления.ДатаОплаты = '00010101', '00010101',  Макс(ДатаСФ, СтрокаВосстановления.ДатаОплаты));
		Иначе										
			КорректируемыйПериод = ДатаСФ;
		КонецЕсли;
		Если (НачалоНалоговогоПериода > НачалоМесяца(КорректируемыйПериод)) Тогда
			СтрокаВосстановления.ЗаписьДополнительногоЛиста = Истина;
			СтрокаВосстановления.КорректируемыйПериод = КорректируемыйПериод;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СнятьПризнакДопЛистаДляСтрокДокумента()
	Для каждого СтрокаВосстановления Из Объект.Состав Цикл
		Если СтрокаВосстановления.ЗаписьДополнительногоЛиста Тогда
			СтрокаВосстановления.ЗаписьДополнительногоЛиста = Ложь;
			СтрокаВосстановления.КорректируемыйПериод = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Состав"

&НаКлиенте
Процедура кпСостав_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Состав"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="Заполнить" Тогда
		Если Объект.Проведен Тогда
			ПоказатьПредупреждение(,"Заполнение возможно только в непроведенном документе", 60,);
			Отказ=Истина; Возврат;
		КонецЕсли;
		Если Объект.Состав.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьСостав", ЭтотОбъект), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьСтрокиДокумента();
		КонецЕсли;
				
	ИначеЕсли стрКоманда="УстановитьПризнакДопЛиста" Тогда
		УстановитьПризнакДопЛистаДляСтрокДокумента();

	ИначеЕсли стрКоманда="СнятьПризнакДопЛиста" Тогда
		СнятьПризнакДопЛистаДляСтрокДокумента();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тпСостав_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры