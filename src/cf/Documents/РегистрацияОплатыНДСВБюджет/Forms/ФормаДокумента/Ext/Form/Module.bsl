&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Видимость=НЕ Элементы.ШапкаПанель1.Видимость;		
		Элементы.ШапкаПанель1.Видимость=Видимость;
		Элементы.ШапкаПанель2.Видимость=Видимость;
		Элементы[Команда.Имя].Картинка=?(Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоКрасная);
		Элементы.ШапкаИнфо.Видимость=Не Видимость;

		МассивДанных=Новый Массив;
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" Организация: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Организация));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Куратор: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Ответственный));

		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Комментарий: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Комментарий));

		Элементы.ШапкаИнфо.Заголовок=Новый ФорматированнаяСтрока(МассивДанных);		
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоДоговорамНалоговогоАгента(Параметр1, Параметр2=Неопределено) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	Объект.ОплатаПоДоговорамНалоговогоАгента.Очистить();
	ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьДляСобственногоПотребления(Параметр1, Параметр2=Неопределено) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	Объект.ОплатаДляСобственногоПотребления.Очистить();
	ЗаполнитьТабличнуюЧастьДляСобственногоПотребления();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента(ОтбиратьПоПустомуДоговору=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоПустомуДоговору", ОтбиратьПоПустомуДоговору);
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Дата", Новый граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСРасчетыСПоставщикамиОстатки.Поставщик,
	|	НДСРасчетыСПоставщикамиОстатки.ДоговорКонтрагента,
	|	НДСРасчетыСПоставщикамиОстатки.Документ как СчетФактура,
	|	СУММА(НДСРасчетыСПоставщикамиОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(&Дата,
	|			Организация = &Организация
	|			И РасчетыСБюджетом = ИСТИНА
	|			И ВЫБОР
	|				КОГДА ДоговорКонтрагента = &ПустойДоговор
	|					ТОГДА &ОтбиратьПоПустомуДоговору
	|				ИНАЧЕ ВЫБОР
	|						КОГДА &ОтбиратьПоПустомуДоговору
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			КОНЕЦ) КАК НДСРасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРасчетыСПоставщикамиОстатки.ДоговорКонтрагента,
	|	НДСРасчетыСПоставщикамиОстатки.Поставщик,
	|	НДСРасчетыСПоставщикамиОстатки.Документ
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока=Объект.ОплатаПоДоговорамНалоговогоАгента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьДляСобственногоПотребления(ОтбиратьПоПустомуДоговору=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоПустомуДоговору", ОтбиратьПоПустомуДоговору);
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Дата", Новый граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСРасчетыСПоставщикамиОстатки.Поставщик,
	|	НДСРасчетыСПоставщикамиОстатки.ДоговорКонтрагента,
	|	НДСРасчетыСПоставщикамиОстатки.Документ как СчетФактура,
	|	СУММА(НДСРасчетыСПоставщикамиОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(&Дата,
	|			Организация = &Организация
	|			И РасчетыСБюджетом = ИСТИНА
	|			И ВЫБОР
	|				КОГДА ДоговорКонтрагента = &ПустойДоговор
	|					ТОГДА &ОтбиратьПоПустомуДоговору
	|				ИНАЧЕ ВЫБОР
	|						КОГДА &ОтбиратьПоПустомуДоговору
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			КОНЕЦ) КАК НДСРасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРасчетыСПоставщикамиОстатки.ДоговорКонтрагента,
	|	НДСРасчетыСПоставщикамиОстатки.Поставщик,
	|	НДСРасчетыСПоставщикамиОстатки.Документ
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока=Объект.ОплатаДляСобственногоПотребления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличная части "Оплата по договорам налогового агента"

&НаКлиенте
Процедура кпПоДоговорамНалоговогоАгента_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ПоДоговорамНалоговогоАгента"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоУмолчанию_ПоДоговорам" Тогда
		Если Объект.Проведен Тогда
			ПоказатьПредупреждение(,"Заполнение возможно только в непроведенном документе", 60,);
			Отказ=Истина; Возврат;
		КонецЕсли;
		Если Объект.ОплатаПоДоговорамНалоговогоАгента.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоДоговорамНалоговогоАгента", ЭтотОбъект), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПоДоговорамНалоговогоАгента_Колонка_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ПоДоговорамНалоговогоАгента", "");
	ТекущиеДанные=Элементы.ПоДоговорамНалоговогоАгента.ТекущиеДанные;
	
	Если стрКолонка="ДокументОплаты" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			Если Не ВыбранноеЗначение.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога") Тогда
				Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
			Если Не ВыбранноеЗначение.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога") Тогда
				Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпПоДоговорамНалоговогоАгента_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличная части "Для собственного потребления"

&НаКлиенте
Процедура кпДляСобственногоПотребления_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ДляСобственногоПотребления"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоУмолчанию_ДляСобственногоПотребления" Тогда
		Если Объект.Проведен Тогда
			ПоказатьПредупреждение(,"Заполнение возможно только в непроведенном документе", 60,);
			Отказ=Истина; Возврат;
		КонецЕсли;
		Если Объект.ОплатаПоДоговорамНалоговогоАгента.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьДляСобственногоПотребления", ЭтотОбъект), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьТабличнуюЧастьДляСобственногоПотребления();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тпДляСобственногоПотребления_Колонка_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ПоДоговорамНалоговогоАгента", "");
	ТекущиеДанные=Элементы.ПоДоговорамНалоговогоАгента.ТекущиеДанные;
	
	Если стрКолонка="ДокументОплаты" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			Если Не ВыбранноеЗначение.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога") Тогда
				Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
			Если Не ВыбранноеЗначение.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога") Тогда
				Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпДляСобственногоПотребления_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры