Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	СуммаДокумента=Товары.Итог("Сумма");
	Для Каждого СтрокаКоллекции Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Качество) Тогда
			СтрокаКоллекции.Качество=Справочники.Качество.Новый;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ЕдиницаИзмеренияМест) И СтрокаКоллекции.КоличествоМест=0 Тогда
			СтрокаКоллекции.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование, ПодтверждатьОчисткуСтрок=Истина) Экспорт
	Если НЕ ЗначениеЗаполнено(ИнвентаризацияТМЦ) Тогда Возврат; КонецЕсли;
	Склад=ДокументОснование.Склад; СтрокиДобавлены = Ложь;

	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Розница", Склад.ВидСклада=Перечисления.ВидыСкладов.Розничный);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Качество,
	|	Док.Коэффициент                                   КАК КоэффициентЕдиницыИнвентаризации,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет)     КАК КоличествоОтклонениеИнвентаризации, // в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|	КОНЕЦ) КАК КоличествоОприходованное,
	|	Док.Цена,
	|	ВЫБОР
	|		КОГДА &Розница ТОГДА
	|			Док.ЦенаВРознице
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ИнвентаризацияТМЦ.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры                        = ДокОприходование.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры                                 = ДокОприходование.СерияНоменклатуры
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТМЦ = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка                              <> &ДокументСсылка
	|	И ДокОприходование.ЦенаВРознице                         = Док.ЦенаВРознице
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.Качество,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.Цена,
	|	Док.ЦенаВРознице
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	Выборка=Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		КоличествоОприходовать=Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда Продолжить; КонецЕсли;

		СтрокиДобавлены = Истина;

		СтрокаТабличнойЧасти=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.Коэффициент=Выборка.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество=КоличествоОприходовать;
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки=?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена), 0, 100 * (СтрокаТабличнойЧасти.ЦенаВРознице - СтрокаТабличнойЧасти.Цена) / СтрокаТабличнойЧасти.Цена);

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;
КонецПроцедуры

// Пересчитывает значения реквизитов табличной части Товары.
//	Вызывается из веб-приложения "Удаленный склад"
//
Процедура ПересчитатьТабличнуюЧастьТовары() Экспорт
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка таблиц для проведения

Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти="")
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("Регистратор", Ссылка);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
		тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
	КонецЦикла;	
КонецПроцедуры
 
Функция СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок)
	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("Стоимость");
	тзДанные.Колонки.Добавить("СтоимостьНУ");
	тзДанные.Колонки.Добавить("КоличествоДок");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.КоличествоДок=СтрокаКоллекции.Количество;
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент /СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		//*** СтрокаКоллекции.ЕдиницаИзмерения=СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		СтрокаКоллекции.Стоимость=СтрокаКоллекции.Сумма;
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.СуммаНУ;
		
		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;		
	КонецЦикла;
	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");

	ВзаиморасчетыСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(тзДанные, СтруктураШД, Ложь);

	Возврат тзДанные;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетПотребностей") Тогда Возврат; КонецЕсли;

	тзТМЦ=Новый ТаблицаЗначений;
	тзТМЦ.Колонки.Добавить("Склад");
	тзТМЦ.Колонки.Добавить("Номенклатура");
	тзТМЦ.Колонки.Добавить("ХарактеристикаНоменклатуры");
	тзТМЦ.Колонки.Добавить("Количество");
	тзТМЦ.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзТМЦ.Колонки.Добавить("ВидТабличнойЧасти");

	МассивСерийНоменклатуры=Новый Массив;	
	МассивХарактеристикНоменклатуры=Новый Массив;	
    МассивТоваров=Новый Массив;

	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		ЗаполнитьЗначенияСвойств(тзТМЦ.Добавить(), СтрокаКоллекции);
		Если ЗначениеЗаполнено(СтрокаКоллекции.ХарактеристикаНоменклатуры) Тогда
			МассивХарактеристикНоменклатуры.Добавить(СтрокаКоллекции.ХарактеристикаНоменклатуры);
		КонецЕсли;
		МассивТоваров.Добавить(СтрокаКоллекции.Номенклатура);
	КонецЦикла;

	стрУсловие="Организация = Организация И Склад = &Склад И Номенклатура В (&Номенклатура)";
	Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
		МассивХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	КонецЕсли;
	Если НЕ Сделки.Количество()=0 Тогда
		стрУсловие=стрУсловие+" И ДокументРезерва В (&Сделка)";
	КонецЕсли;
	ОрганизацияСсылка=Организация;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", МоментВремени());
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("Сделка", Сделки.ВыгрузитьКолонку("Сделка"));	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва,
	|	СУММА(ИсточникДанных1.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.УчетПотребностей.Остатки(&НаДату, "+стрУсловие+") КАК ИсточникДанных1
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва
	|";
	тзОстаткиПоСделкам=Запрос.Выполнить().Выгрузить();
	Если тзОстаткиПоСделкам.Количество()=0 Тогда Возврат; КонецЕсли;

	//Отсортируем сделки по порядку списания
	Если Сделки.Количество()>0 Тогда
		тзОстаткиПоСделкам.Колонки.Добавить("ПорядковыйНомер");
		Для каждого СтрокаКоллекции Из Сделки Цикл
			РезультатПоиска=тзОстаткиПоСделкам.Найти(СтрокаКоллекции.Сделка, "ДокументРезерва");
			Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
			РезультатПоиска.ПорядковыйНомер=Сделки.Индекс(СтрокаКоллекции);
		КонецЦикла;
		тзОстаткиПоСделкам.Сортировать("ПорядковыйНомер Возвр");
	КонецЕсли;

	тзДвижения=Движения.УчетПотребностей.ВыгрузитьКолонки();

	СтруктураОтбора=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	Для каждого СтрокаКоллекции1 Из тзТМЦ Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКоллекции1);
		МассивСтрок=тзОстаткиПоСделкам.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКоллекции2 Из МассивСтрок Цикл
			текКоличество=Мин(СтрокаКоллекции2.Количество, СтрокаКоллекции1.Количество);
			Если текКоличество<=0 Или СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции1.Количество=СтрокаКоллекции1.Количество-текКоличество;
            СтрокаКоллекции2.Количество=СтрокаКоллекции2.Количество-текКоличество;

			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.ДокументРезерва=СтрокаКоллекции2.ДокументРезерва;
			НоваяСтрока.Количество=текКоличество;			
		КонецЦикла;
	КонецЦикла; 

    тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ОрганизацияСсылка, "Организация");
	тзДвижения.ЗаполнитьЗначения(Склад, "Склад");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	Движения.УчетПотребностей.Загрузить(тзДвижения);
	
	//Учет резервов ТМЦ
	Если Константы.УчетРезервов.Получить() Тогда
		тзДвижения.Колонки.ДокументРезерва.Имя="Заказ";
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		Движения.УчетРезервовТМЦ.Загрузить(тзДвижения);
	КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыНаСкладах") Тогда Возврат; КонецЕсли;

	Если НЕ Склад.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда Возврат; КонецЕсли;
	Если НЕ Склад.Ячеистый Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.ТоварыНаСкладах.Выгрузить();
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
	КонецЦикла;
	тзДвижения.ЗаполнитьЗначения(Склад, "Склад");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");

	Движения.ТоварыНаСкладах.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.ПартииТоваровНаСкладах.ВыгрузитьКолонки();
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		стрИсключить=?(СтрокаКоллекции.ВестиПартионныйУчетПоСериям, "", "СерияНоменклатуры");
		ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции,,стрИсключить);
	КонецЦикла;

	Если НЕ СтруктураШД.УчетнаяПолитика.СпособОценкиМПЗ=Перечисления.СпособыОценки.ПоСредней Тогда
		тзДвижения.ЗаполнитьЗначения(Ссылка, "ДокументОприходования");
	КонецЕсли;
	тзДвижения.ЗаполнитьЗначения(Склад, "Склад");
	тзДвижения.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	тзДвижения.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Оприходование, "КодОперации");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");

	Движения.ПартииТоваровНаСкладах.Загрузить(тзДвижения);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ)
	Если Не СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС И СтруктураШД.УчитыватьНДС Тогда
        УчетНДС.ПереименованиеКолонок(СтруктураТД.Товары, Новый Структура("Стоимость,Сумма","СтоимостьУпр","Стоимость"));
		УчетНДС.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШД, СтруктураТД.Товары, Движения.НДСПартииТоваров, Отказ);
		УчетНДС.ПереименованиеКолонок(СтруктураТД.Товары, Новый Структура("Стоимость,СтоимостьУпр","Сумма","Стоимость"));	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Основание)=Тип("ДокументСсылка.ИнвентаризацияТМЦ") Тогда
		ИнвентаризацияТМЦ=Основание;
		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание, Ложь);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 	

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);

	//Проверка реквизитов
	Если СтруктураШД.ВидСклада=Перечисления.ВидыСкладов.Розничный И Не ДополнительныеСвойства.РазрешитьНулевыеЦеныВРознице Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.ЦенаВРознице");
	КонецЕсли;
	УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "Товары", ПроверяемыеРеквизиты, СтруктураШД.ВидСклада);

	//Формирование значений реквизитов табличных частей
	СтруктураТД=Новый Структура("Товары", СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));
	
	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Продажа");
ДополнительныеСвойства.Вставить("РазрешитьНулевыеЦеныВРознице", УправлениеПользователямиСервер.РазрешитьНулевыеЦеныВРознице());
