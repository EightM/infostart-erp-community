&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Видимость=НЕ Элементы.ШапкаПанель1.Видимость;		
		Элементы.ШапкаПанель1.Видимость=Видимость;
		Элементы.ШапкаПанель2.Видимость=Видимость;
		Элементы[Команда.Имя].Картинка=?(Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоКрасная);
		Элементы.ШапкаИнфо.Видимость=Не Видимость;

		МассивДанных=Новый Массив;
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" Организация: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Организация));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Куратор: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Ответственный));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Комментарий: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Комментарий));

		Элементы.ШапкаИнфо.Заголовок=Новый ФорматированнаяСтрока(МассивДанных);		
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ВычетПоПриобретеннымЦенностямДокументОтгрузки.Видимость=Объект.ПредъявленНДСКВычету0;
	Элементы.ВычетПоПриобретеннымЦенностямСостояние.Видимость=Объект.ПредъявленНДСКВычету0;
	Элементы.НДСсАвансовДокументОтгрузки.Видимость=Объект.ПредъявленНДСКВычету0;
	Элементы.НДСсАвансовСостояние.Видимость=Объект.ПредъявленНДСКВычету0;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыеДанныеТабличнойЧасти(стрТабличнаяЧасть=Неопределено)
	ОбновитьИтоговыеДанныеТабличнойЧасти=?(стрТабличнаяЧасть=Неопределено, Истина, стрТабличнаяЧасть="ВычетПоПриобретеннымЦенностям");
	Если ОбновитьИтоговыеДанныеТабличнойЧасти Тогда
		ИтогоОборот=Объект.ВычетПоПриобретеннымЦенностям.Итог("СуммаБезНДС");
		ИтогоНДС=Объект.ВычетПоПриобретеннымЦенностям.Итог("НДС");
		Элементы.ОборотСНДС.Заголовок="Оборот с НДС :          "+Формат(ИтогоОборот+ИтогоНДС,"ЧДЦ=2");
	КонецЕсли;
	
	ОбновитьИтоговыеДанныеТабличнойЧасти=?(стрТабличнаяЧасть=Неопределено, Истина, стрТабличнаяЧасть="НДСсАвансов");
	Если ОбновитьИтоговыеДанныеТабличнойЧасти Тогда
		ИтогоОборотА=Объект.НДСсАвансов.Итог("СуммаБезНДС");
		ИтогоНДСА=Объект.НДСсАвансов.Итог("НДС");
		Элементы.ОборотСНДСА.Заголовок="Оборот с НДС :         "+Формат(ИтогоОборотА+ИтогоНДСА,"ЧДЦ=2");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеТабличныеЧасти(Команда)
	Если Объект.Проведен Тогда Возврат; КонецЕсли;

	Если Объект.ВычетПоПриобретеннымЦенностям.Количество() > 0 Или Объект.НДСсАвансов.Количество() >0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьДокументы", ЭтотОбъект), "Заполненные ранее табличные поля документа будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьТабличныеЧасти(Параметр1, Параметр2=Неопределено) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьДокументы(Параметр1, Параметр2=Неопределено) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	ЗаполнитьДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ПредъявленНДСКВычету0(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.ВычетПоПриобретеннымЦенностям.Очистить();
		Объект.НДСсАвансов.Очистить();
	Иначе
		Объект.ПредъявленНДСКВычету0 = НЕ Объект.ПредъявленНДСКВычету0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьВычетПоПриобретеннымЦенностям(Параметр1, Параметр2=Неопределено) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
    ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьНДСсАвансов(Параметр1, Параметр2=Неопределено) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	ЗаполнитьСтроки_НДСсАвансов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьНДССАвансовВыданных(Параметр1, Параметр2=Неопределено) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	ЗаполнитьСтроки_НДСсАвансовВыданных();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоРознице(Параметр1, Параметр2=Неопределено) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	ЗаполнитьСтроки_НДСВключенныйВСтоимость();
КонецПроцедуры
		
///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент() Экспорт
	
	Если Объект.Проведен Тогда Возврат; КонецЕсли;

	ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям();
	
	ЗаполнитьСтроки_НДСсАвансов();
	
	ЗаполнитьСтроки_НДСсАвансовВыданных();
	
	ЗаполнитьСтроки_НДСВключенныйВСтоимость();
	
	Если Не (Объект.ВычетПоПриобретеннымЦенностям.Количество() > 0 Или Объект.НДСсАвансов.Количество() >0) Тогда
		ПоказатьПредупреждение(,"Не обнаружены записи к отражению в книге покупок", 60,); 
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

// Заполнение НДС включенных в стоимость

Процедура ЗаполнитьСтроки_НДСВключенныйВСтоимость() Экспорт
	
	Объект.НДСВключенныйВСтоимость.Очистить();
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("СтавкаНДС", 	 Перечисления.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("ВидНачисления", 	Перечисления.НДСВидНачисления.РеализацияЕНВД);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.Организация,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель КАК Поставщик,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(&КонецПериода,	СтавкаНДС = &СтавкаНДС И Организация = &Организация И ВидНачисления=&ВидНачисления) КАК НДСНачисленныйОстатки
	|";		
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзИсходные=Объект.НДСВключенныйВСтоимость.Выгрузить().СкопироватьКолонки();
	
	Для Каждого СтрокаТз ИЗ тзДанные Цикл
		Объект=СтрокаТз.СчетФактура.ПолучитьОбъект();
		НаборЗаписей=РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение=СтрокаТз.СчетФактура.Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование=Истина;
		НаборЗаписей.Прочитать();
		Для Каждого СтрокаДок ИЗ НаборЗаписей Цикл
			Если Не (СтрокаДок.Номенклатура.СтавкаНДС=Перечисления.СтавкиНДС.НДС10) И Не (СтрокаДок.Номенклатура.СтавкаНДС=Перечисления.СтавкиНДС.НДС20) Тогда Продолжить; КонецЕсли;
			НоваяСтрока=тзИсходные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТз);
			НоваяСтрока.СчетУчетаНДС=ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			НоваяСтрока.СтавкаНДС=СтрокаДок.Номенклатура.СтавкаНДС;
			НоваяСтрока.СуммаБезНДС=СтрокаДок.Стоимость;
			НоваяСтрока.НДС=(НоваяСтрока.СуммаБезНДС*?(СтрокаДок.Номенклатура.СтавкаНДС=Перечисления.СтавкиНДС.НДС10, 10, 20))/100;
		КонецЦикла;
	КонецЦикла;
	тзИсходные.Свернуть("СчетФактура,СчетУчетаНДС,ВидЦенности,СтавкаНДС,Поставщик","СуммаБезНДС,НДС");
	
	Для Каждого СтрокаТз ИЗ тзИсходные Цикл
		НоваяСтрока=Объект.НДСВключенныйВСтоимость.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(НоваяСтрока.СчетФактура,"СчетФактураВыданный");
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			НоваяСтрока.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если ЗначениеЗаполнено(НоваяСтрока.СчетФактура) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", НоваяСтрока.СчетФактура.Метаданные()) Тогда
					НоваяСтрока.КодВидаОперации=НоваяСтрока.СчетФактура.КодВидаОперации;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры	

// Заполнение НДС с авансов выданных

&НаСервере
Процедура ЗаполнитьСтроки_НДСсАвансовВыданных() Экспорт
	
	ТаблицаРезультатов=Объект.НДСсАвансовВыданных.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов);
	
	Объект.НДСсАвансовВыданных.Загрузить(ТаблицаРезультатов);
	Для Каждого СтрокаКоллекции ИЗ Объект.НДСсАвансовВыданных Цикл
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаКоллекции.СчетФактура,"СчетФактураПолученный");
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если ЗначениеЗаполнено(СтрокаКоллекции.СчетФактура) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", СтрокаКоллекции.СчетФактура.Метаданные()) Тогда
					СтрокаКоллекции.КодВидаОперации=СтрокаКоллекции.СчетФактура.КодВидаОперации;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Объект.НДСсАвансовВыданных.Сортировать("СчетФактура, Поставщик, ДоговорКонтрагента, СтавкаНДС");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.СчетФактура,
	|	ИсточникДанных.СтавкаНДС,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	ИсточникДанных.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&ДатаГраница, Организация = &Организация И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК ИсточникДанных
	|";
	Результат=Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат.Выгрузить(), ТаблицаРезультатов);
	КонецЕсли;	
КонецПроцедуры

// Заполнение НДС с авансов

&НаСервере
Процедура ЗаполнитьСтроки_НДСсАвансов() Экспорт
	
	ТаблицаРезультатов=Объект.НДСсАвансов.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Если Объект.ПредъявленНДСКВычету0 Тогда
		ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов);

	Иначе	
		Дерево_НДСсАвансов=ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов();
		Если Дерево_НДСсАвансов.Строки.Количество()=0 Тогда
			// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
			Объект.НДСсАвансов.Очистить(); Возврат;
		КонецЕсли;
		
		СписокСчетовФактур=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
		
		ТаблицаЗачетовАвансов=ДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур);
		
		РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов);
	КонецЕсли; 
	
	СтрокиКУдалению=ТаблицаРезультатов.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС,ВалютнаяСумма", 0, 0, 0));
	
	Для каждого СтрокаКУадлению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУадлению);
	КонецЦикла;
	Объект.НДСсАвансов.Загрузить(ТаблицаРезультатов);
	
	Для Каждого СтрокаДок ИЗ Объект.НДСсАвансов Цикл
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаДок.СчетФактура,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаДок.СчетФактура,"СчетФактураПолученный");
		КонецЕсли;
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаДок.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", СтрокаДок.СчетФактура.Метаданные()) Тогда
					СтрокаДок.КодВидаОперации=СтрокаДок.СчетФактура.КодВидаОперации;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДок.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда Продолжить; КонецЕсли;
		Док=СтрокаДок.СчетФактура;
		мдДокумент=Док.Метаданные();
		Для Каждого мдТабличнаяЧасть Из мдДокумент.ТабличныеЧасти Цикл
			Если мдТабличнаяЧасть.Реквизиты.Найти("ТОП")=Неопределено Тогда Продолжить; КонецЕсли;
			тзДанные=Док[мдТабличнаяЧасть.Имя].Выгрузить();
			Для Каждого СтрокаКоллекции Из тзДанные Цикл
				Для каждого СтрокаПроводки Из СтрокаКоллекции.ТОП.ПроводкиБУ Цикл
					Если СтрокаПроводки.СчетКредит.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						СчетУчета=СтрокаПроводки.СчетКредит; Прервать;
					КонецЕсли;
					Если СтрокаПроводки.СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						СчетУчета=СтрокаПроводки.СчетДебет; Прервать;
					КонецЕсли;			
				КонецЦикла;		
			КонецЦикла;
		КонецЦикла;	
		Если СчетУчета=Неопределено Тогда Сообщить("Не заполен счет покупателя в строке номер - "+СтрокаДок.НомерСтроки); Продолжить; КонецЕсли; 
		СтрокаДок.СчетПокупателя=СчетУчета;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция  ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов)
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	// Отрабатываемые состояния (ожидание 0% не отрабатываем)
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния", ОтрабатываемыеСостояния);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.НДСОстаток) КАК НДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|		    И ВидЦенности В (&ВидыЦенностейАванс)
	|		    И состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура
	|";
	АвансыНДСПредъявленныйРеализация0=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Если АвансыНДСПредъявленныйРеализация0.Строки.Количество()=0 Тогда Возврат ТаблицаРезультатов; КонецЕсли; 

	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива( АвансыНДСПредъявленныйРеализация0.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(&ДатаГраница, Организация = &Организация И СчетФактура В (&СписокСчетовФактур)) КАК НДСсАвансовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура
	|";
	ЗафиксированныеАвансы=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ЗафиксированныеАвансы.Строки.Количество()=0 тогда Возврат ТаблицаРезультатов; КонецЕсли;
	
	Для каждого СтрокаСФ Из АвансыНДСПредъявленныйРеализация0.Строки Цикл
		ЗафиксированныйАвансПоСФ=ЗафиксированныеАвансы.Строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ=Неопределено Тогда Продолжить; КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из ЗафиксированныйАвансПоСФ.Строки Цикл
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента,СтавкаНДС",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, СтрокаЗафиксированногоАванса.СтавкаНДС);
			
			СтрокиАванса0=СтрокаСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАванса0.Количество()=0 Тогда Продолжить;	КонецЕсли; 

			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивСуммаСНДС = новый Массив();
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАванса0.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАванса0.НДС);
				МассивСуммаСНДС.Добавить(СтрокаАванса0.СуммаБезНДС+СтрокаАванса0.НДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАванса0.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАванса0.НДС;
			КонецЦикла; 
			
			СуммаБезНДС = Мин(СтрокаЗафиксированногоАванса.СуммаБезНДС, СуммаБезНДС);
			СуммаНДС = Мин(СтрокаЗафиксированногоАванса.НДС, СуммаНДС);
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли; 
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если СуммаБезНДС + СуммаНДС >0 Тогда
				ВалютнаяСуммаСНДС = Окр(СтрокаЗафиксированногоАванса.ВалютнаяСуммаСНДС * (СуммаБезНДС+СуммаНДС)/(СтрокаЗафиксированногоАванса.СуммаБезНДС+СтрокаЗафиксированногоАванса.НДС),2);
			Иначе 
				ВалютнаяСуммаСНДС = 0;
			КонецЕсли; 

			Если ВалютнаяСуммаСНДС>0 Тогда
				МассивСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально_2(ВалютнаяСуммаСНДС,МассивСуммаСНДС);
			КонецЕсли;
			
			Счетчик =0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
			    СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура		= СтрокаАванса0.СчетФактура;
				СтрокаРезультата.Покупатель			= СтрокаАванса0.Покупатель;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса0.ДоговорКонтрагента;
				СтрокаРезультата.СтавкаНДС			= СтрокаАванса0.СтавкаНДС;
				СтрокаРезультата.ДокументОтгрузки	= СтрокаАванса0.ДокументОтгрузки;
				СтрокаРезультата.Состояние			= СтрокаАванса0.Состояние;
				СтрокаРезультата.ВалютаДокумента	= СтрокаЗафиксированногоАванса.ВалютаАванса;
				СтрокаРезультата.ДатаСобытия		= СтрокаАванса0.ДокументОтгрузкиДата;
				СтрокаРезультата.СуммаБезНДС		= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС				= ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаРезультата.ВалютнаяСумма		= ?(ВалютнаяСуммаСНДС>0,МассивСуммаСНДС[Счетчик],0);
				
				СтрокаАванса0.СуммаБезНДС = СтрокаАванса0.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
				СтрокаАванса0.НДС = СтрокаАванса0.НДС - СтрокаРезультата.НДС;
				
			    Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

&НаСервере
Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|		КОНЕЦ) КАК НДС,
	|	СУММА(ВЫРАЗИТЬ((ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|			КОНЕЦ) * НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток / ВЫБОР
	|				КОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток > 0
	|					ТОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(&ДатаГраница, Организация = &Организация) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|			НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|			НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|				&ДатаГраница,
	|				Организация = &Организация
	|				    И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСПредъявленныйРеализация0Остатки) КАК НДСсАвансовПоРеализации0
	|		ПО НДСсАвансовОстатки.СчетФактура = НДСсАвансовПоРеализации0.СчетФактура
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСсАвансовПоРеализации0.СтавкаНДС
	|			И НДСсАвансовОстатки.Покупатель = НДСсАвансовПоРеализации0.Покупатель
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСсАвансовПоРеализации0.ДоговорКонтрагента
	|ГДЕ
	|	(НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСсАвансовОстатки.НДСОстаток > 0) И НДСсАвансовОстатки.ДоговорКонтрагента.ВидДоговора<>&ВидДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовПоРеализации0.СуммаБезНДСОстаток,
	|	НДСсАвансовПоРеализации0.НДСОстаток
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура
	|";	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);

	Дерево_НДСсАвансов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Дерево_НДСсАвансов.Строки.Количество() = 0 тогда 
		Возврат Дерево_НДСсАвансов;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);

	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Документ КАК ДокументОплаты,
	|	СУММА(-1 * ИсточникДанных.СуммаОстаток) КАК Сумма,
	|	СУММА(-1 * ИсточникДанных.СуммаОстаток) КАК ВалютнаяСумма,
	|	ИсточникДанных.Покупатель,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(&ДатаГраница, Организация = &Организация И Документ В (&СписокСчетовФактур)) КАК ИсточникДанных
	|ГДЕ
	|   -1 * ИсточникДанных.СуммаОстаток  > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.Покупатель,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	|ИТОГИ ПО
	|	ДокументОплаты
	|";
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВалютаАванса=МодульВалютногоУчета.ПолучитьВалюту();
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда Продолжить; КонецЕсли; 

		Для каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл			
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаАванса",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);

			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда Продолжить; КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
			Если ВалютнаяСуммаСНДС = 0 Тогда Продолжить; КонецЕсли; 
			
			ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
			СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
			Если СуммаСНДС = 0 Тогда Продолжить; КонецЕсли;

			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС >0 Тогда
				МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально_2(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
 	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из КУдалениюСФ Цикл
		Дерево_НДСсАвансов.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат Дерево_НДСсАвансов;
КонецФункции

&НаСервере
Функция ДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Документ КАК ДокументОплаты,
	|	ИсточникДанных.Покупатель,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	СУММА(ИсточникДанных.СуммаПриход) КАК Сумма,
	|	СУММА(ИсточникДанных.СуммаПриход) КАК ВалютнаяСумма,
	|	ИсточникДанных.Период КАК Дата
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.Обороты(,	&ДатаГраница, День, Организация = &Организация И Документ В (&СписокСчетовФактур)) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.Покупатель,
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
КонецФункции

&НаСервере
Процедура РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов)
	
	ВалютаАванса=МодульВалютногоУчета.ПолучитьВалюту();
	Для каждого СтрокаТипДоговораКонтрагента Из ТаблицаЗачетовАвансов.Строки Цикл //16.06.2011
		Для каждого СтрокаПогашенияАванса Из СтрокаТипДоговораКонтрагента.Строки Цикл
			ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(СтрокаПогашенияАванса.ДокументОплаты,"СчетФактура");
			Если ЗафиксированныйАвансПоСФ = Неопределено Тогда Продолжить; КонецЕсли; 
			
		//	Для каждого СтрокаПогашенияАванса Из ПогашенныйАвансПоСФ.Строки Цикл				
				
				Отбор=Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаАванса",СтрокаПогашенияАванса.Покупатель, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
			///	Отбор=Новый Структура("ТипДоговораКонтрагента,Покупатель,ДоговорКонтрагента, ВалютаАванса", СтрокаПогашенияАванса.ТипДоговораКонтрагента, СтрокаПогашенияАванса.Покупатель, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
				СтрокиАвансаПоОтбору=ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
				Если СтрокиАвансаПоОтбору.Количество()=0 Тогда Продолжить; КонецЕсли; 
				
				МассивСуммаБезНДС = новый Массив();
				МассивСуммаНДС = новый Массив();
				МассивВалютнаяСуммаСНДС = новый Массив();
				
				СуммаБезНДС = 0;
				СуммаНДС = 0;
				ВалютнаяСуммаСНДС = 0;
				Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
					МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
					МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
					МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
					
					СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
					СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
					ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
				КонецЦикла; 
				
				Если ВалютаАванса=МодульВалютногоУчета.ПолучитьВалюту() Тогда
					Если СуммаБезНДС+СуммаНДС = 0 тогда Продолжить; КонецЕсли; 
					// Сопоставление по рублевой сумме
					ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
					СуммаСНДС = Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС));
					Если СуммаСНДС = 0 Тогда Продолжить; КонецЕсли;
				Иначе
					Если ВалютнаяСуммаСНДС = 0 Тогда Продолжить; КонецЕсли; 
					// Сопоставление по валютной сумме
					СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
					ВалютнаяСуммаСНДС = Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
					Если ВалютнаяСуммаСНДС = 0 Тогда Продолжить; КонецЕсли; 
				КонецЕсли; 
				
				СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
				СуммаНДС = СуммаСНДС - СуммаБезНДС;
				
				Если СуммаБезНДС>0 Тогда
					МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаБезНДС,МассивСуммаБезНДС);
				КонецЕсли;
				
				Если СуммаНДС>0 Тогда
					МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаНДС,МассивСуммаНДС);
				КонецЕсли; 
				
				Если ВалютнаяСуммаСНДС >0 Тогда
					МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально_2(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
				КонецЕсли; 
				
				Счетчик =0;
				Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
					Если ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0) = 0 и ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0) = 0 и ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0)= 0  Тогда
						Продолжить;
					КонецЕсли; 
					
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					СтрокаРезультата.СчетФактура	= СтрокаАвансаПоОтбору.СчетФактура;
					СтрокаРезультата.Покупатель		= СтрокаАвансаПоОтбору.Покупатель;
					СтрокаРезультата.ДоговорКонтрагента	= СтрокаАвансаПоОтбору.ДоговорКонтрагента;
				//	СтрокаРезультата.ТипДоговораКонтрагента	= СтрокаАвансаПоОтбору.ТипДоговораКонтрагента;
					СтрокаРезультата.ВалютаДокумента= СтрокаАвансаПоОтбору.ВалютаАванса;
					СтрокаРезультата.СтавкаНДС		= СтрокаАвансаПоОтбору.СтавкаНДС;
					СтрокаРезультата.ДатаСобытия	= СтрокаПогашенияАванса.Дата;
					СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
					СтрокаРезультата.НДС			=  ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
					СтрокаРезультата.ВалютнаяСумма	=  ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
					
					СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
					СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
					СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);

					Счетчик = Счетчик +1;
				КонецЦикла; 
			//КонецЦикла; 
		КонецЦикла;
	КонецЦикла;
	
 	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				продолжить;;
			КонецЕсли; 
			СтрокаРезультата=ТаблицаРезультатов.Добавить();
			СтрокаРезультата.СчетФактура	= СтрокаАванса.СчетФактура;
			СтрокаРезультата.Покупатель		= СтрокаАванса.Покупатель;
			СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса.ДоговорКонтрагента;
			СтрокаРезультата.ВалютаДокумента= СтрокаАванса.ВалютаАванса;
			СтрокаРезультата.СтавкаНДС		= СтрокаАванса.СтавкаНДС;
			СтрокаРезультата.СуммаБезНДС	= СтрокаАванса.СуммаБезНДС;
			СтрокаРезультата.НДС			= СтрокаАванса.НДС;
			СтрокаРезультата.ВалютнаяСумма	= СтрокаАванса.ВалютнаяСуммаСНДС;
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Заполнение вычетов по приобретенным ценностям

&НаСервере
Процедура ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям() Экспорт
	
	ТаблицаРезультатов=Объект.ВычетПоПриобретеннымЦенностям.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	КонтролироватьОплатуДляСФсДатойМенее01012006=Истина;
	ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету=ложь;

	Если Объект.Дата >= '20080101' тогда
		КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
	ИначеЕсли Объект.Дата >= '20060101' Тогда
		УчетнаяПолитикаНУ_31122005=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация,'20051231');
		Если УчетнаяПолитикаНУ_31122005.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате тогда
		Иначе
			КонтролироватьОплатуДляСФсДатойМенее01012006=Ложь;
			ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету=Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Объект.ПредъявленНДСКВычету0 Тогда
		Дерево_НДСкВычету=ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006);
	Иначе	
		Дерево_НДСкВычету=ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006);
	КонецЕсли;
	
	Если Дерево_НДСкВычету.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Объект.ВычетПоПриобретеннымЦенностям.Очистить(); Возврат;
	КонецЕсли;

	// Определение суммы, которую можно принять к вычету на основании
	// п. 10. статьи 2 ФЗ №119-ФЗ - 1/6 в течении первого полугодия 2006 года
	Дерево_НДСкВычету.Колонки.Добавить("ОпределенаДоля_119ФЗ_2_10", Новый описаниеТипов("Булево"));
	Дерево_НДСкВычету.Колонки.Добавить("КВычету_СНДС_Часть", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Дерево_НДСкВычету.Колонки.Добавить("КВычету_НДС_Часть", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Если ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету Тогда
		ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету);
	КонецЕсли; 
	
////	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСкВычету.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	СписокСчетовФактур=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСкВычету.ВыгрузитьКолонку("СчетФактура"),Истина);
	// Ограничиваем получаемые распределенные оплаты только отфактурованными поступлениями.
	// Отсутствие СФ допускается только для НДС, уплаченного на таможне, а оплаты по нему тоже не регистрируются.
	ТаблицаСФ=УчетНДС.ОпределитьНаличиеСчетовФактурПолученных(,КонецДня(Объект.Дата),Объект.Организация, СписокСчетовФактур,Ложь, Истина, Истина, КонецДня(Объект.Дата));
	ОтфактурованныеПоступления=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСФ.ВыгрузитьКолонку("Документ"),Истина);

	Дерево_НДСкВычету.Колонки.КВычету_БезНДС.Имя="СуммаБезНДС";
	Дерево_НДСкВычету.Колонки.КВычету_НДС.Имя="НДС";
	Дерево_НДСкВычету.Колонки.КВычету_СНДС.Имя="СуммаСНДС";
	Дерево_НДСкВычету.Колонки.Добавить("ДокументОплаты");
	Дерево_НДСкВычету.Колонки.Добавить("ДатаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	Дерево_НДСкВычету.Колонки.Добавить("КорректируемыйПериод");
	Дерево_НДСкВычету.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	Дерево_НДСкВычету.Колонки.Добавить("КодВидаОперации");
	ТаблицаРезультатов=Дерево_НДСкВычету.СкопироватьКолонки(); 
	 Для каждого СтрокаКоллекции Из Дерево_НДСкВычету Цикл
		 докСсылка=СтрокаКоллекции.СчетФактура;
		Если Не ЗначениеЗаполнено(докСсылка) Тогда
			Сообщить("Пустой документ <Счет-фактура>, проверьте регистр <НДС предъявленый поставщиком!> ");
			Прервать;
		КонецЕсли;
		 
		 ///*****
		Если ОтфактурованныеПоступления.Найти(докСсылка)=Неопределено Тогда Продолжить; КонецЕсли; 
		Если СтрокаКоллекции.ПорядокОплаты=1 Тогда
			Запрос=Новый Запрос;
			Запрос.Текст= "ВЫБРАТЬ
			              |	ИсточникДанных.ДокументОплаты КАК ДокументОплаты,
			              |	ИсточникДанных.Сумма КАК СуммаОплаты
			              |ИЗ
			              |	Документ.РегистрацияОплатыНДСВБюджет.ОплатаПоДоговорамНалоговогоАгента КАК ИсточникДанных
			              |ГДЕ
			              |	ИсточникДанных.СчетФактура = &СчетФактура
			              |	И ИсточникДанных.Поставщик = &Поставщик
			              |	И ИсточникДанных.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
						  |	
						  |	ОБЪЕДИНИТЬ ВСЕ
						  |ВЫБРАТЬ
			              |	ИсточникДанных1.ДокументОплаты КАК ДокументОплаты,
			              |	ИсточникДанных1.Сумма КАК СуммаОплаты
			              |ИЗ
			              |	Документ.РегистрацияОплатыНДСВБюджет.ОплатаДляСобственногоПотребления КАК ИсточникДанных1
			              |ГДЕ
			              |	ИсточникДанных1.СчетФактура = &СчетФактура
			              |	И ИсточникДанных1.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
						  |";
			Запрос.УстановитьПараметр("СчетФактура",докСсылка);
			Запрос.УстановитьПараметр("Поставщик",СтрокаКоллекции.Поставщик);
			Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(Объект.Дата));
			Запрос.УстановитьПараметр("ДатаКонца",КонецМесяца(Объект.Дата));
			тзОплат=Запрос.Выполнить().Выгрузить();
			Если тзОплат.Количество()=0 Тогда Продолжить; КонецЕсли;
			Для Каждого СтрокаТз ИЗ тзОплат Цикл
				НоваяСтрока=ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
				СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(НоваяСтрока.СчетФактура,"СчетФактураПолученный");
				Если НЕ СчетФактураДокумент=Неопределено Тогда 
					НоваяСтрока.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
				Иначе
					Если ЗначениеЗаполнено(НоваяСтрока.СчетФактура) Тогда
						Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", НоваяСтрока.СчетФактура.Метаданные()) Тогда
							НоваяСтрока.КодВидаОперации=НоваяСтрока.СчетФактура.КодВидаОперации;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Доля=СтрокаТз.СуммаОплаты/НоваяСтрока.СуммаСНДС;
				НоваяСтрока.НДС=НоваяСтрока.НДС*Доля;
				НоваяСтрока.СуммаБезНДС=НоваяСтрока.СуммаБезНДС*Доля;
				Если ЗначениеЗаполнено(СтрокаТз.ДокументОплаты) Тогда
					НоваяСтрока.ДатаОплаты=СтрокаТз.ДокументОплаты.Дата;
					НоваяСтрока.ДокументОплаты=СтрокаТз.ДокументОплаты;
				КонецЕсли;
			КонецЦикла;
		Иначе	
			НоваяСтрока=ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(НоваяСтрока.СчетФактура,"СчетФактураПолученный");
			Если НЕ СчетФактураДокумент=Неопределено Тогда 
				НоваяСтрока.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
			Иначе
				Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", НоваяСтрока.СчетФактура.Метаданные()) Тогда
					НоваяСтрока.КодВидаОперации=НоваяСтрока.СчетФактура.КодВидаОперации;
				КонецЕсли;	
			КонецЕсли;
			Если (Объект.ПредъявленНДСКВычету0 И НоваяСтрока.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) 
				Или НоваяСтрока.СуммаБезНДС < 0 Или НоваяСтрока.НДС < 0 Тогда
				НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
				НоваяСтрока.ЗаписьДополнительногоЛиста = Истина;
				Если Объект.ПредъявленНДСКВычету0 Тогда
					НоваяСтрока.КорректируемыйПериод = Макс(НоваяСтрока.ДатаОплаты, НоваяСтрока.ДокументОтгрузки.Дата);
				Иначе 
					НоваяСтрока.КорректируемыйПериод = НоваяСтрока.СчетФактураДата;
				КонецЕсли;
				Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
					КонецМесяца(НоваяСтрока.КорректируемыйПериод) = КонецМесяца(Объект.Дата),
					КонецКвартала(НоваяСтрока.КорректируемыйПериод) = КонецКвартала(Объект.Дата)) Тогда
					НоваяСтрока.ЗаписьДополнительногоЛиста = Ложь;
					НоваяСтрока.КорректируемыйПериод = '00010101';
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если УправлениеМетаданными.ЕстьРеквизит("КорректируемыйПериод", докСсылка.Метаданные())  Тогда
			Если Не ЗначениеЗаполнено(докСсылка.КорректируемыйПериод) Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции.ЗаписьДополнительногоЛиста=Истина;
			СтрокаКоллекции.КорректируемыйПериод=докСсылка.КорректируемыйПериод;
		КонецЕсли;
		Если ТипЗнч(докСсылка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если докСсылка.ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров.ПокупкаВЛизинг Тогда
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла; //03.03.10

	Объект.ВычетПоПриобретеннымЦенностям.Загрузить(ТаблицаРезультатов);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК КВычету_БезНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_НДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйРеализация0Остатки.Состояние
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|		    И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
		|			И НДСПредъявленныйРеализация0Остатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
		|			И НДСПредъявленныйРеализация0Остатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
		|			И НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС = НДСПредъявленныйОстатки.СчетУчетаНДС
		|			И (НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";

	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Проверяем возможность предъявления к вычету по остаткам регистра "НДС предъявленный)
	// (вычет не может превышать текущий остаток)
	Запрос.УстановитьПараметр("СписокСчетовФактур", РезультатЗапроса.Строки.ВыгрузитьКолонку("СчетФактура"));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&ДатаГраница,
	|			Организация = &Организация
	|			И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	|			И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйОстатки
	|ГДЕ
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0
	|ИТОГИ
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура
	|";    
	ДоступныйКВычетуНДС = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	СтрокиСФкУдалению = новый массив();
	СтруктураОтбора = НОвый структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС");
	Для каждого СтрокаСФ Из РезультатЗапроса.Строки Цикл
		СтрокаСФ_НДСПРедъявленный = ДоступныйКВычетуНДС.строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		Если СтрокаСФ_НДСПРедъявленный = Неопределено Тогда
			// Не найдены положитьельные остатки по СФ
			// НДС по СФ не может быть принят к вычету
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
			Продолжить;
		ИначеЕсли СтрокаСФ_НДСПРедъявленный.СуммаСНДС >= СтрокаСФ.КВычету_СНДС тогда
			// Сумма НДС доступного к вычету по СФ не менее, чем сумма списываемая документом.
			// Корректировка не требуется
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаПорядкаОплат Из СтрокаСФ.Строки Цикл		
			СтрокиКУдалению = Новый Массив();
			Для каждого СтрокаРасшифровки Из СтрокаПорядкаОплат.Строки Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРасшифровки);
				СтрокиПоОтбору = СтрокаСФ_НДСПРедъявленный.строки.НайтиСтроки(СтруктураОтбора);
				Если СтрокиПоОтбору.Количество() = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				//может быть выбрана только одна строка
				СтрокаПоОтбору = СтрокиПоОтбору[0];
				Если СтрокаПоОтбору.СуммаСНДС = 0 тогда 
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				
				Если СтрокаПоОтбору.СуммаСНДС >= СтрокаРасшифровки.КВычету_СНДС тогда
					СтрокаПоОтбору.СуммаСНДС = СтрокаПоОтбору.СуммаСНДС - СтрокаРасшифровки.КВычету_СНДС;
				Иначе
					СтрокаРасшифровки.КВычету_НДС = (СтрокаРасшифровки.КВычету_НДС*СтрокаПоОтбору.СуммаСНДС/СтрокаРасшифровки.КВычету_СНДС);
					СтрокаРасшифровки.КВычету_СНДС = СтрокаПоОтбору.СуммаСНДС;
					СтрокаРасшифровки.КВычету_БезНДС = СтрокаРасшифровки.КВычету_СНДС - СтрокаРасшифровки.КВычету_НДС;
					СтрокаПоОтбору.СуммаСНДС = 0;
				КонецЕсли;
			КонецЦикла; 
			Для каждого СтрокаКУдалению	из СтрокиКУдалению Цикл
				СтрокаПорядкаОплат.Строки.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
			СтрокаПорядкаОплат.КВычету_НДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_НДС");
			СтрокаПорядкаОплат.КВычету_СНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_СНДС");
			СтрокаПорядкаОплат.КВычету_БезНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_БезНДС");
		
		КонецЦикла; 
		СтрокаСФ.КВычету_НДС = СтрокаСФ.Строки.Итог("КВычету_НДС");
		СтрокаСФ.КВычету_СНДС = СтрокаСФ.Строки.Итог("КВычету_СНДС");
		СтрокаСФ.КВычету_БезНДС = СтрокаСФ.Строки.Итог("КВычету_БезНДС");
		
		Если СтрокаСФ.КВычету_СНДС = 0 Тогда
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению	из СтрокиСФкУдалению Цикл
		РезультатЗапроса.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ТаблицаРезультат=Новый ТаблицаЗначений;
	Для Каждого СтрокаКоллекции ИЗ РезультатЗапроса.Колонки Цикл
		ТаблицаРезультат.Колонки.Добавить(СтрокаКоллекции.Имя,СтрокаКоллекции.ТипЗначения);
	КонецЦикла;	
	//ОбработатьДерево(РезультатЗапроса,ТаблицаРезультат);
	
	Возврат ТаблицаРезультат;
КонецФункции

&НаСервере
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК КВычету_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК КВычету_НДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК КВычету_СНДС,
	|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|			ТОГДА 1
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
	|			ТОГДА 2
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
	|					ТОГДА 3
	|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
	|					ТОГДА 3
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ПорядокОплаты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(&ДатаГраница,
	|			Организация = &Организация
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&ДатаГраница,
	|			Организация = &Организация
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
	|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
	|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
	|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
	|			И НДСПредъявленныйОстатки.СчетУчетаНДС = НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС
	|			И НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток >0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата),
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|			ТОГДА 1
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
	|			ТОГДА 2
	|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
	|					ТОГДА 3
	|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
	|					ТОГДА 3
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|";

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Процедура ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету)
	Если Месяц(Объект.дата) > 6 Тогда Возврат;	КонецЕсли;
	
	// Определение списка СФ (с аналитикой) с датой ранее 2006 года, по которым НДС был предъявлен к вычету в текущем месяце
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("НачалоГода2006", '20060101');
	Запрос.УстановитьПараметр("ОтбираемоеСобытие", Перечисления.СобытияПоНДСПокупки[?(Объект.ПредъявленНДСКВычету0,"ПредъявленНДСКВычету0","ПредъявленНДСКВычету")]);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ОстаткиНаНачалоГода.СчетФактура КАК СчетФактура,
	|	ОстаткиНаНачалоГода.ВидЦенности,
	|	ОстаткиНаНачалоГода.СтавкаНДС,
	|	ОстаткиНаНачалоГода.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПредъявленныйОстатки.Организация КАК Организация,
	|		НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|		НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|		НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленныйОстатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|		НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|		НДСПредъявленныйОстатки.СуммаБезНДСОстаток / 6 КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|		НДСПредъявленныйОстатки.НДСОстаток / 6 КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Остатки(
	|			&НачалоГода2006,
	|			Организация = &Организация
	|			    И СчетФактура.Дата < &НачалоГода2006
	|			    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки) КАК ОстаткиНаНачалоГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|		&НачалоМесяца,
	|		&КонецМесяца,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура.Дата < &НачалоГода2006
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	|		    И Событие = &ОтбираемоеСобытие) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО НДСЗаписиКнигиПокупокОбороты.Организация = ОстаткиНаНачалоГода.Организация
	|			И НДСЗаписиКнигиПокупокОбороты.Поставщик = ОстаткиНаНачалоГода.Поставщик
	|			И НДСЗаписиКнигиПокупокОбороты.СчетФактура = ОстаткиНаНачалоГода.СчетФактура
	|			И НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ОстаткиНаНачалоГода.ВидЦенности
	|			И НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = ОстаткиНаНачалоГода.СтавкаНДС
	|			И НДСЗаписиКнигиПокупокОбороты.СчетУчетаНДС = ОстаткиНаНачалоГода.СчетУчетаНДС
	|ГДЕ
	|	(ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ИЛИ ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0)
	|ИТОГИ
	|	СУММА(СуммаБезНДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(НДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля),
	|	СУММА(НДСНаНачалоГода_ЕжемесячнаяДоля)
	|ПО
	|	СчетФактура
	|";
		
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	
	НаличиеОстатковНаНачалоГода = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаСФ Из Дерево_НДСкВычету.Строки Цикл
		Если СтрокаСФ.СчетФактураДата<'20060101' тогда
			СтрокаОстатковНаНачалоГода_СчетФактура = НаличиеОстатковНаНачалоГода.Строки.НайтиСтроки(Новый Структура("СчетФактура",СтрокаСФ.СчетФактура));
			Если СтрокаОстатковНаНачалоГода_СчетФактура.Количество() = 0 Тогда
				// Остатки по указанному счету-фактуре на начло года не обнаружены.
				// Расчет доли к вычету (ограничение) не производится.
				Продолжить;
			КонецЕсли; 
			СтрокаОстатковНаНачалоГода_СчетФактура = СтрокаОстатковНаНачалоГода_СчетФактура[0];
			
			
			КВычетуПоСФ_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_СчетФактура.НДСНаНачалоГода_ЕжемесячнаяДоля);
			Если (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
				КВычетуПоСФ_СНДС = макс(0,КВычетуПоСФ_СНДС - (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце));
			КонецЕсли; 
			
			Если КВычетуПоСФ_СНДС = 0 Тогда
				// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
				Продолжить;
			КонецЕсли; 
			
			Для каждого СтрокаПорядокОплаты  Из СтрокаСФ.Строки Цикл
				Если СтрокаПорядокОплаты.ПорядокОплаты = 3 Тогда
					СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 = истина;
					Для каждого СтрокаТаблицы из СтрокаПорядокОплаты.Строки Цикл
						СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_СчетФактура.Строки.НайтиСтроки(Новый структура("ВидЦенности, СтавкаНДС, СчетУчетаНДС",СтрокаТаблицы.ВидЦенности,СтрокаТаблицы.СтавкаНДС,СтрокаТаблицы.СчетУчетаНДС));
						
						Если СтрокаОстатковНаНачалоГода_Расшифровка.Количество() =0 Тогда
							// Остатки в указанном разрезе аналитики не обнаружены.
							// Расчет доли к вычету (ограничение) не производится.
							СтрокаТаблицы.КВычету_СНДС_Часть = СтрокаТаблицы.КВычету_СНДС;
							СтрокаТаблицы.КВычету_НДС_Часть = СтрокаТаблицы.КВычету_НДС;
							Продолжить;
						Иначе
							СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_Расшифровка[0];
						КонецЕсли;
						
						СтрокаТаблицы.ОпределенаДоля_119ФЗ_2_10 = истина;
						
						КВычету_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля);
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_СНДС = макс(0,КВычету_СНДС - (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						Если КВычету_СНДС = 0 Тогда
							// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
							Продолжить;
						КонецЕсли; 
						
						КВычету_НДС = СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля;
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_НДС = макс(0,КВычету_НДС - (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						//Расчет суммы без НДС
						Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
							// СМР подрядные отрабатываются в соответствии со ст.3 п.2 №119-ФЗ, а не с положениями ст.2 п.10 №119-ФЗ.
							// Суммы к вычету разблокируется поэтапно (1/12) с использование специального документа.
							// Пересчет сумм при формировании записей книги покупок не требуется.
							СтрокаТаблицы.КВычету_СНДС_Часть = СтрокаТаблицы.КВычету_СНДС;
							СтрокаТаблицы.КВычету_НДС_Часть = СтрокаТаблицы.КВычету_НДС;
							
						Иначе
							СтрокаТаблицы.КВычету_СНДС_Часть = Макс(Мин(КВычету_СНДС,СтрокаТаблицы.КВычету_СНДС),0);
							СтрокаТаблицы.КВычету_НДС_Часть = Макс(Мин(КВычету_НДС,СтрокаТаблицы.КВычету_НДС),0);
						КонецЕсли; 
						
					КонецЦикла;
					
					СтрокаПорядокОплаты.КВычету_НДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС_Часть");
					СтрокаПорядокОплаты.КВычету_СНДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть");
					
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		УстановитьВидимость();
		
	ИначеЕсли Элемент.Имя="ПредъявленНДСКВычету0" Тогда
		Если Не Объект.ВычетПоПриобретеннымЦенностям.Количество()=0 Или Не Объект.НДСсАвансов.Количество()=0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ПредъявленНДСКВычету0", ЭтотОбъект), "Необходимо очистить табличные части. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ОбработчикОповещения_ПредъявленНДСКВычету0(КодВозвратаДиалога.Да);			
		КонецЕсли;
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Реализация"

&НаКлиенте
Процедура кпВычетПоПриобретеннымЦенностям_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ВычетПоПриобретеннымЦенностям"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если стрКоманда="ЗаполнитьВычетПоПриобретеннымЦенностям" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;

	    Если Объект.ВычетПоПриобретеннымЦенностям.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьВычетПоПриобретеннымЦенностям", ЭтотОбъект), "Табличное поле ""Вычет НДС по приобретенным ценностям"" будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям();
		КонецЕсли;
		
		ОбновитьИтоговыеДанныеТабличнойЧасти("ВычетПоПриобретеннымЦенностям");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура кпВычетПоПриобретеннымЦенностям_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кпВычетПоПриобретеннымЦенностям_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтоговыеДанныеТабличнойЧасти("ВычетПоПриобретеннымЦенностям");
КонецПроцедуры

&НаКлиенте
Процедура кпВычетПоПриобретеннымЦенностям_ПослеУдаления(Элемент)
	ОбновитьИтоговыеДанныеТабличнойЧасти("ВычетПоПриобретеннымЦенностям");
КонецПроцедуры

&НаКлиенте
Процедура кпВычетПоПриобретеннымЦенностям_Колонка_ПриИзменении(Элемент) Экспорт
	стрКолонка=стрЗаменить(Элемент.Имя, "ВычетПоПриобретеннымЦенностям", "");
	ТекущиеДанные=Элементы.ВычетПоПриобретеннымЦенностям.ТекущиеДанные;

	Если стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="СуммаБезНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="ДокументОплаты" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОплаты) Тогда
			ТекущиеДанные.ДатаОплаты=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументОплаты, "Дата");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кпВычетПоПриобретеннымЦенностям_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ВычетПоПриобретеннымЦенностям", "");
	ТекущиеДанные=Элементы.ВычетПоПриобретеннымЦенностям.ТекущиеДанные;

	Если стрКолонка="СчетФактура" Или стрКолонка="ДокументОплаты" Тогда
		//СтандартнаяОбработка=Ложь;
		//Отбор=Новый Структура("Организация,Контрагент", Объект.Организация, ТекущиеДанные.Покупатель);

	ИначеЕсли стрКолонка="Состояние" Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0"));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Авансы"

&НаКлиенте
Процедура кпАвансы_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="НДСсАвансов"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьНДСсАвансов" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		
		Если Объект.НДСсАвансов.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьНДСсАвансов", ЭтотОбъект), "Табличное поле ""Вычет НДС с авансов"" будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьСтроки_НДСсАвансов();
		КонецЕсли;
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти("НДСсАвансов");
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтоговыеДанныеТабличнойЧасти("НДСсАвансов");
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_ПослеУдаления(Элемент)
	ОбновитьИтоговыеДанныеТабличнойЧасти("НДСсАвансов");
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_Колонка_ПриИзменении(Элемент) Экспорт
	стрКолонка=стрЗаменить(Элемент.Имя, "НДСсАвансов", "");
	ТекущиеДанные=Элементы.НДСсАвансов.ТекущиеДанные;

	Если стрКолонка="Покупатель" Тогда
		Если Не ТекущиеДанные.ДоговорКонтрагента.Владелец=ТекущиеДанные.Покупатель Тогда
			ТекущиеДанные.ДоговорКонтрагента=ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="СуммаБезНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "НДСсАвансов", "");
	ТекущиеДанные=Элементы.НДСсАвансов.ТекущиеДанные;

	Если стрКолонка="ДоговорКонтрагента" Тогда
		МассивПараметров=Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПоставщиком,СКомиссионером,СКомитентом")));
		Элементы.ДоговорКонтрагента.ПараметрыВыбора=Новый ФиксированныйМассив(МассивПараметров);

	ИначеЕсли стрКолонка="Состояние" Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0"));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "НДС с авансов выданных"

&НаКлиенте
Процедура кпНДСпоАвансамВыданным_ВыполнитьДействие(Кнопка)
	стрИмя=?(ТипЗнч(Кнопка)=Тип("Строка"), Кнопка, Кнопка.Имя);
	
	Если стрИмя="ЗаполнитьНДССАвансовВыданных" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		
		Если Объект.НДСсАвансовВыданных.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьНДССАвансовВыданных", ЭтотОбъект), "Табличное поле ""Вычет НДС с авансов"" будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьСтроки_НДСсАвансовВыданных();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "НДС включенный в стоимость"

&НаКлиенте
Процедура кпВычетПоРознице_ВыполнитьДействие(Кнопка)
	стрИмя=?(ТипЗнч(Кнопка)=Тип("Строка"), Кнопка, Кнопка.Имя);
	
	Если стрИмя="ЗаполнитьПоРознице" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;

		Если Объект.НДСВключенныйВСтоимость.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоРознице", ЭтотОбъект), "Табличное поле ""Вычет НДС с авансов"" будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьСтроки_НДСВключенныйВСтоимость();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		НачалоПериода = НачалоМесяца(Объект.Дата); 
		КонецПериода  = КонецМесяца(Объект.Дата);
	КонецЕсли;
	ОбновитьИтоговыеДанныеТабличнойЧасти();
	УстановитьВидимость();

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры