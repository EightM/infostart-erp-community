Перем мВестиУчетНДС Экспорт;

Процедура РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов, СписокСчетовФактур)
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Неопределено, Организация);
	Если УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") <> Неопределено Тогда
		Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
			НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
		Иначе
			НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
		КонецЕсли;
	Иначе
		НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
	КонецЕсли;
	
	Для каждого СтрокаСФ Из Дерево_НДСНачисленный.Строки Цикл
		Если СтрокаСФ.Строки.Итог("СуммаСНДС") = 0 Тогда Продолжить; КонецЕсли;
		
		Для каждого СтрокаЗадолжености Из СтрокаСФ.Строки Цикл
			СтрокаРезультата=ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаЗадолжености);
			СтрокаРезультата.НДС=СтрокаЗадолжености.СуммаНДС;
			Если Реализация0 Тогда
				Если СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
					СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				ИначеЕсли СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
					СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				КонецЕсли; 
			Иначе
				СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			КонецЕсли;
			Если (Реализация0 И СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) Тогда
				
				СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
				Если Реализация0 Тогда
					СтрокаРезультата.КорректируемыйПериод = Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата);
				Иначе 
					СтрокаРезультата.КорректируемыйПериод = СтрокаЗадолжености.СчетФактураДата;
				КонецЕсли;
				Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
					КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Дата),
					КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Дата)) Тогда
					СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
					СтрокаРезультата.КорректируемыйПериод = '00010101';
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация);
	
	ЗаполнитьРазделРеализация(?(ОшибкаПолученияУчетнойПолитики,Ложь,УчетнаяПолитикаНУ.НДСИспользованиеОплатПокупателя_Приоритет0));
	
	Если Реализация0 Тогда
		Авансы.Очистить();
		НачисленКУплате.Очистить();
		Восстановлен.Очистить();
		НеОтражаетсяВКниге.Очистить();
	Иначе
		ЗаполнитьРазделАвансы();
		ЗаполнитьРазделНачисленКУплате();
		ЗаполнитьРазделНеОтражаетсяВКниге();
		ЗаполнитьРазделВосстановлен();
		#Если Клиент Тогда
		Ответ=Вопрос("Заполнить НДС по авансам выданным. По остаткам?",РежимДиалогаВопрос.ДаНет);
		Если Ответ=КодВозвратаДиалога.Да Тогда
			ЗаполнитьРазделАвансыВосстановленныеПоОстаткам();
		Иначе
			ЗаполнитьРазделАвансыВосстановленныеПоОплате();
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Если Не (Реализация.Количество() > 0 
		или Авансы.Количество() >0
		или НачисленКУплате.Количество() >0
		или Восстановлен.Количество() >0
		или НеОтражаетсяВКниге.Количество() >0
        ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружены записи к отражению в книге продаж"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:"+СтрокаСообщения,,Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет раздел "Реализация"
Процедура ЗаполнитьРазделРеализация(НДСИспользованиеОплатПокупателя_Приоритет0, ОтменитьПроведение = Ложь) Экспорт
	
	//Если Проведен Тогда
	//	Если Не ОтменитьПроведение Тогда Возврат; КонецЕсли;
	//	Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//КонецЕсли;
	
	ТаблицаРезультатов = Реализация.ВыгрузитьКолонки();
	
	Если Реализация0 Тогда
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0();
	Иначе	
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный();
	КонецЕсли; 
	
	// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда		
		Реализация.Очистить(); Возврат;
	КонецЕсли;

	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов, СписокСчетовФактур);
	
	Для каждого СтрокаКоллекции Из ТаблицаРезультатов Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
       	Если НачалоКвартала(Дата)<>НачалоКвартала(докСсылка.Дата) Тогда
			СтрокаКоллекции.ЗаписьДополнительногоЛиста=Истина;
			СтрокаКоллекции.КорректируемыйПериод=докСсылка.Дата;
		КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;

		Если УправлениеМетаданными.ЕстьРеквизит("КорректируемыйПериод", докСсылка.Метаданные())  Тогда
			Если Не ЗначениеЗаполнено(докСсылка.КорректируемыйПериод) Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции.ЗаписьДополнительногоЛиста=Истина;
			СтрокаКоллекции.КорректируемыйПериод=докСсылка.КорректируемыйПериод;
		КонецЕсли;
	КонецЦикла; //03.03.10 
	
	Реализация.Загрузить(ТаблицаРезультатов);

КонецПроцедуры

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (за вычетом реализации 0%)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур = неопределено)
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыНачисления=Новый СписокЗначений;
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);		// не отражается в книге продаж
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСНачисленКУплате);	// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);			// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);		// Отражается отдельно

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	Запрос.УстановитьПараметр("ИсключаемыеВидыНачисления", ИсключаемыеВидыНачисления);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И (НЕ ВидНачисления В (&ИсключаемыеВидыНачисления))) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
	|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
	|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
	|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
	|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация
	|			И (УчетнаяПолитика.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|				ГДЕ
	|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитика.Период
	|					И УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация))
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура
	|";	
	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);		
	КонецЕсли; 

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
КонецФункции

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(ВключитьОжиданиеПодтверждения = ложь, СписокСчетовФактур = Неопределено)
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Если ВключитьОжиданиеПодтверждения Тогда
		ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСРеализация0Остатки.Организация,
	|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаСНДС,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС_НачисленоВсего,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток < НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток
	|				И (НЕ НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток < 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяКорректировка,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСРеализация0Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Организация = НДСРеализация0Остатки.Организация
	|			И (УчетнаяПолитика.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|				ГДЕ
	|					ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитика.Период
	|					И УчетнаяПолитика.Организация = НДСРеализация0Остатки.Организация))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСНачисленныйОстатки
	|		ПО НДСРеализация0Остатки.СчетФактура = НДСНачисленныйОстатки.СчетФактура
	|			И НДСРеализация0Остатки.ВидЦенности = НДСНачисленныйОстатки.ВидЦенности
	|			И НДСРеализация0Остатки.СтавкаНДС = НДСНачисленныйОстатки.СтавкаНДС
	|ГДЕ
	|	(НДСРеализация0Остатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСРеализация0Остатки.НДСОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС),
	|	МАКСИМУМ(ТребуетсяКорректировка)
	|ПО
	|	СчетФактура
	|";
	Если Не СписокСчетовФактур=Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", " 
			|		Организация = &Организация И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур" ,СписокСчетовФактур);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	СФДляКорректировки=РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("ТребуетсяКорректировка", Истина));
	Для каждого СтрокаСФ Из СФДляКорректировки Цикл
		Для каждого СтрокаРасшифровки Из СтрокаСФ.Строки Цикл
			Если СтрокаРасшифровки.ТребуетсяКорректировка Тогда
				СтрокаРасшифровки.СуммаНДС = (СтрокаРасшифровки.СуммаНДС*СтрокаРасшифровки.СуммаСНДС_НачисленоВсего/СтрокаРасшифровки.СуммаСНДС);
				СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС_НачисленоВсего;
				СтрокаРасшифровки.СуммаБезНДС = СтрокаРасшифровки.СуммаСНДС - СтрокаРасшифровки.СуммаНДС;
			КонецЕсли; 
		КонецЦикла;		
		СтрокаСФ.СуммаНДС = СтрокаСФ.Строки.Итог("СуммаНДС");
		СтрокаСФ.СуммаСНДС = СтрокаСФ.Строки.Итог("СуммаСНДС");
		СтрокаСФ.СуммаБезНДС = СтрокаСФ.Строки.Итог("СуммаБезНДС");
	КонецЦикла; 

	Возврат РезультатЗапроса;	
КонецФункции

// Заполняет раздел "Авансы восстановленные"

Процедура ЗаполнитьРазделАвансыВосстановленныеПоОплате(ОтменитьПроведение = Ложь) Экспорт
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойполитики, Организация);
	
	Если ОшибкаПолученияУчетнойПолитики Тогда Возврат; КонецЕсли;
	
	ТаблицаРезультатов = ВосстановленПоАвансам.ВыгрузитьКолонки();
	
	Дерево_НДСсАвансов = ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов();
	Если Дерево_НДСсАвансов.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВосстановленПоАвансам.Очистить(); Возврат;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	ТаблицаЗачетовАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур);
	
	РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов);
	
	СтрокиКУдалению = ТаблицаРезультатов.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0, 0));
	
	Для каждого СтрокаКУадлению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУадлению);
	КонецЦикла;
	ВосстановленПоАвансам.Загрузить(ТаблицаРезультатов);
	
	Для Каждого СтрокаДок ИЗ ВосстановленПоАвансам Цикл
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаДок.СчетФактура,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаДок.СчетФактура,"СчетФактураПолученный");
		КонецЕсли;
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаДок.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", СтрокаДок.СчетФактура.Метаданные()) Тогда
					СтрокаДок.КодВидаОперации=СтрокаДок.СчетФактура.КодВидаОперации;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(&ДатаГраница, Организация = &Организация) КАК НДСсАвансовОстатки
	|ГДЕ
	|	(НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСсАвансовОстатки.НДСОстаток > 0) И НДСсАвансовОстатки.ДоговорКонтрагента.ВидДоговора=&ВидДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура
	|";	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);
	
	Дерево_НДСсАвансов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Дерево_НДСсАвансов.Строки.Количество() = 0 тогда 
		Возврат Дерево_НДСсАвансов;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Документ КАК ДокументОплаты,
	|	СУММА(-1 * ИсточникДанных.СуммаОстаток) КАК Сумма,
	|	СУММА(-1 * ИсточникДанных.СуммаОстаток) КАК ВалютнаяСумма,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(&ДатаГраница, Организация = &Организация И Документ В (&СписокСчетовФактур)) КАК ИсточникДанных
	|ГДЕ
	|   -1 * ИсточникДанных.СуммаОстаток  > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	|ИТОГИ ПО
	|	ДокументОплаты
	|";
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВалютаАванса = ДополнительныеСвойства.ВалютаБухУчета;
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда Продолжить; КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл			
			
			Отбор = Новый Структура("Поставщик,ДоговорКонтрагента, ВалютаАванса",СтрокаЗафиксированногоАванса.Поставщик, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда Продолжить; КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			//МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
		//	ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
			//	МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
			//	ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
		//	Если ВалютнаяСуммаСНДС = 0 Тогда Продолжить; КонецЕсли; 
			
		//	ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
			СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
			Если СуммаСНДС = 0 Тогда Продолжить; КонецЕсли;
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			//Если ВалютнаяСуммаСНДС >0 Тогда
			//	МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально_2(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			//КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
			//	СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  Тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			//СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из КУдалениюСФ Цикл
		Дерево_НДСсАвансов.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат Дерево_НДСсАвансов;
КонецФункции

// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Документ КАК ДокументОплаты,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	СУММА(ИсточникДанных.СуммаПриход) КАК Сумма,
	|	СУММА(ИсточникДанных.СуммаПриход) КАК ВалютнаяСумма,
	|	ИсточникДанных.Период КАК Дата
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Обороты(,	&ДатаГраница, День, Организация = &Организация И Документ В (&СписокСчетовФактур)) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
КонецФункции

// Процедура осуществляет автоматическое распределение фактов зачета авансов
// на документы отгрузки, оформленные в рамках соответствующего договора
//
Процедура РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов)
	
	ВалютаАванса = ДополнительныеСвойства.ВалютаБухУчета;
	Для каждого СтрокаТипДоговораКонтрагента Из ТаблицаЗачетовАвансов.Строки Цикл //16.06.2011
		Для каждого СтрокаПогашенияАванса Из СтрокаТипДоговораКонтрагента.Строки Цикл
			ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(СтрокаПогашенияАванса.ДокументОплаты,"СчетФактура");
			Если ЗафиксированныйАвансПоСФ = Неопределено Тогда Продолжить; КонецЕсли; 
			
			Отбор=Новый Структура("Поставщик,ДоговорКонтрагента, ВалютаАванса",СтрокаПогашенияАванса.Поставщик, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
			СтрокиАвансаПоОтбору=ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество()=0 Тогда Продолжить; КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
		//	МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
		//	ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
			//	МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
			//	ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
			//Если ВалютаАванса = ДополнительныеСвойства.ВалютаБухУчета Тогда
				Если СуммаБезНДС+СуммаНДС = 0 тогда Продолжить; КонецЕсли; 
				// Сопоставление по рублевой сумме
			//	ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда Продолжить; КонецЕсли;
			//Иначе
			//	Если ВалютнаяСуммаСНДС = 0 Тогда Продолжить; КонецЕсли; 
			//	// Сопоставление по валютной сумме
			//	СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
			//	ВалютнаяСуммаСНДС = Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
			//	Если ВалютнаяСуммаСНДС = 0 Тогда Продолжить; КонецЕсли; 
			//КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			//Если ВалютнаяСуммаСНДС >0 Тогда
			//	МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально_2(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			//КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				Если ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0) = 0 и ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0) = 0  Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= СтрокаАвансаПоОтбору.СчетФактура;
				СтрокаРезультата.Поставщик		= СтрокаАвансаПоОтбору.Поставщик;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАвансаПоОтбору.ДоговорКонтрагента;
		//		СтрокаРезультата.ВалютаДокумента= СтрокаАвансаПоОтбору.ВалютаАванса;
				СтрокаРезультата.СтавкаНДС		= СтрокаАвансаПоОтбору.СтавкаНДС;
		//		СтрокаРезультата.ДатаСобытия	= СтрокаПогашенияАванса.Дата;
				СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС			=  ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
			//	СтрокаРезультата.ВалютнаяСумма	=  ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				//СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла;
	
	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				продолжить;;
			КонецЕсли; 
			СтрокаРезультата=ТаблицаРезультатов.Добавить();
			СтрокаРезультата.СчетФактура	= СтрокаАванса.СчетФактура;
			СтрокаРезультата.Поставщик		= СтрокаАванса.Поставщик;
			СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса.ДоговорКонтрагента;
//			СтрокаРезультата.ВалютаДокумента= СтрокаАванса.ВалютаАванса;
			СтрокаРезультата.СтавкаНДС		= СтрокаАванса.СтавкаНДС;
			СтрокаРезультата.СуммаБезНДС	= СтрокаАванса.СуммаБезНДС;
			СтрокаРезультата.НДС			= СтрокаАванса.НДС;
//			СтрокаРезультата.ВалютнаяСумма	= СтрокаАванса.ВалютнаяСуммаСНДС;
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
		//	СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьРазделАвансыВосстановленныеПоОстаткам(ОтменитьПроведение = Ложь) Экспорт
	
	//Если Проведен Тогда
	//	Если ОтменитьПроведение Тогда
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	ТаблицаРезультатов = ВосстановленПоАвансам.ВыгрузитьКолонки();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		ВосстановленПоАвансам.Очистить();  Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции ИЗ Таблица_Восстановлен Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен, ТаблицаРезультатов);

	ВосстановленПоАвансам.Загрузить(ТаблицаРезультатов);
	ВосстановленПоАвансам.Сортировать("СчетФактура, Поставщик, ДоговорКонтрагента, СтавкаНДС");
КонецПроцедуры

Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам()

	ТаблицаВосстановлен = ВосстановленПоАвансам .ВыгрузитьКолонки();
	
	// Восстановление НДС по авансам выданным
	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) КАК НДС,
	|	НДСсАвансовОстатки.ВидЦенности
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
	|				&КонецПериодаГраница,
	|				Организация = &Организация
	|					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки
	|		ПО НДСсАвансовОстатки.Организация = НДСПредъявленныйОстатки.Организация
	|			И НДСсАвансовОстатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
	|			И НДСсАвансовОстатки.Покупатель = НДСПредъявленныйОстатки.Поставщик
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСПредъявленныйОстатки.ДоговорКонтрагента
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
	|			И НДСсАвансовОстатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
	|ГДЕ
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) > 0
	|	И НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) > 0
	|";
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда
		Возврат ТаблицаВосстановлен;
	КонецЕсли;

	ТаблицаНДССАвансов = Результат.Выгрузить();

	СтрокиКУдалению = Новый Массив;
	Для	Каждого СтрокаТаблицыНДССАвансов Из ТаблицаНДССАвансов Цикл
		Если СтрокаТаблицыНДССАвансов.СуммаБезНДС=0 И СтрокаТаблицыНДССАвансов.НДС=0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыНДССАвансов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНДССАвансов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДССАвансов, ТаблицаВосстановлен);
	
	Возврат ТаблицаВосстановлен;
КонецФункции

// Заполняет раздел "Авансы"
Процедура ЗаполнитьРазделАвансы(ОтменитьПроведение = Ложь) Экспорт
	
	//Если Проведен Тогда
	//	Если ОтменитьПроведение Тогда
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ТаблицаРезультатов = Авансы.ВыгрузитьКолонки();
	
	Таблица_НДСcАвансов = ЗаполнитьНДСНачисленныйДаннымиПоАвансам();
	
	Если Таблица_НДСcАвансов.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Авансы.Очистить();
		Возврат;
	КонецЕсли;
	
	Таблица_НДСcАвансов.Колонки.Добавить("КодВидаОперации",Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаКоллекции ИЗ Таблица_НДСcАвансов Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСcАвансов,ТаблицаРезультатов);

	Авансы.Загрузить(ТаблицаРезультатов);

КонецПроцедуры

// Вызывается из процедуры ЗаполнитьРазделАвансы.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС с авансов)
Функция ЗаполнитьНДСНачисленныйДаннымиПоАвансам()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСсАвансов", Перечисления.НДСВидНачисления.НДСсАвансов);
	Запрос.УстановитьПараметр("Событие_НДСсАвансов", Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	&Событие_НДСсАвансов КАК Событие,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация И ВидНачисления = &НДСВидНачисления_НДСсАвансов) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НДСНачисленныйОстатки.СуммаБезНДСОстаток > 0 ИЛИ НДСНачисленныйОстатки.НДСОстаток > 0 ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0 ИЛИ НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Заполняет раздел "НачисленКУплате"
Процедура ЗаполнитьРазделНачисленКУплате(ОтменитьПроведение = Ложь) Экспорт
	
	//Если Проведен Тогда
	//	Если ОтменитьПроведение Тогда
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ТаблицаРезультатов = НачисленКУплате.ВыгрузитьКолонки();
	
	Таблица_НДСНачисленКУплате = ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате();
	
	Если Таблица_НДСНачисленКУплате.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		НачисленКУплате.Очистить();
		Возврат;
	КонецЕсли;
	
	Таблица_НДСНачисленКУплате.Колонки.Добавить("КодВидаОперации",Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаКоллекции ИЗ Таблица_НДСНачисленКУплате Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСНачисленКУплате,ТаблицаРезультатов);
	
	Для Каждого СтрокаКоллекции ИЗ ТаблицаРезультатов Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		Если ТипЗнч(докСсылка)=Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") ИЛИ ТипЗнч(докСсылка)=Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			СтрокаКоллекции.ДокументОплаты=докСсылка;
		КонецЕсли;	
	КонецЦикла;	

	НачисленКУплате.Загрузить(ТаблицаРезультатов);

КонецПроцедуры

// Заполняет раздел "Восстановлен"
Процедура ЗаполнитьРазделВосстановлен(ОтменитьПроведение = Ложь) Экспорт
	
	//Если Проведен Тогда
	//	Если ОтменитьПроведение Тогда
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ТаблицаРезультатов = Восстановлен.ВыгрузитьКолонки();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Восстановлен.Очистить();
		Возврат;
	КонецЕсли;
	
	Таблица_Восстановлен.Колонки.Добавить("КодВидаОперации",Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаКоллекции ИЗ Таблица_Восстановлен Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен,ТаблицаРезультатов);

	Восстановлен.Загрузить(ТаблицаРезультатов);

КонецПроцедуры

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСНачисленКУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("ВидЦенностиСуммыСвязанныеСРасчетами", Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = &ВидЦенностиСуммыСвязанныеСРасчетами
	|			ТОГДА НДСНачисленныйОстатки.СчетФактура.Дата
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления_НДСНачисленКУплате) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	НДСкВосстановлению = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	НДСкВосстановлению.Колонки.Добавить("СчетУчетаНДС", новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Если НДСкВосстановлению.Количество() = 0 Тогда
		Возврат НДСкВосстановлению;
	КонецЕсли; 
	
	//Определение счетов учета НДС для формирования проводки по восстановлению
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленный.СчетФактура КАК СчетФактура,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.СтавкаНДС,
	|	НДСНачисленный.СчетУчетаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
	|				ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
	|			ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
	|		КОНЕЦ) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Организация = &Организация
	|	И НДСНачисленный.СчетФактура В(&СписокСчетовФактур)
	|	И НДСНачисленный.ВидНачисления = &НДСВидНачисления
	|	И НДСНачисленный.ВидЦенности В(&СписокВидовЦенностей)
	|	И НДСНачисленный.СтавкаНДС В(&СписокСтавокНДС)
	|	И НДСНачисленный.Период <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленный.Организация,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.СчетУчетаНДС,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(ВЫБОР
	|				КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
	|					ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
	|				ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
	|			КОНЕЦ) = 0)
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидовЦенностей", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавокНДС", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	
	Запрос.УстановитьПараметр("ДвижениеПриход", ВидДвиженияНакопления.Приход);
	
	НДСкВосстановлениюВРазрезеСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокиКУдалению = Новый Массив();
	КоличествоБазовыхСтрок = НДСкВосстановлению.Количество();
	
	Для НомерСтрокиВосстановления =1 по КоличествоБазовыхСтрок Цикл
		СтрокаВосстановления = НДСкВосстановлению[НомерСтрокиВосстановления-1];
		СтрокаСФВРазезеСчетов = НДСкВосстановлениюВРазрезеСчетов.Строки.Найти(СтрокаВосстановления.СчетФактура,"СчетФактура");
		Если СтрокаСФВРазезеСчетов = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		РасшифровкаСФвРазрезеСчетов = СтрокаСФВРазезеСчетов.Строки.НайтиСтроки(Новый Структура("ВидЦенности,СтавкаНДС",СтрокаВосстановления.ВидЦенности,СтрокаВосстановления.СтавкаНДС));
		
		Если РасшифровкаСФвРазрезеСчетов.Количество() =0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СуммаСНДСПоСтроке = СтрокаВосстановления.СуммаСНДС;
		Для каждого СтрокаРасшифровки Из РасшифровкаСФвРазрезеСчетов Цикл
			СуммаПокрытия = 0;
			Если не СуммаСНДСПоСтроке*СтрокаРасшифровки.СуммаСНДС>0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СуммаПокрытия = ?(СуммаСНДСПоСтроке>0, Мин(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС), Макс(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС));
			
			//Добавление новой строки по восстановлению в разрезе СФ
			НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
			НоваяСтрокаВосстановления.СуммаСНДС = СуммаПокрытия;
			НоваяСтрокаВосстановления.СуммаБезНДС = Окр(НоваяСтрокаВосстановления.СуммаБезНДС*СуммаПокрытия/СуммаСНДСПоСтроке,2);
			НоваяСтрокаВосстановления.НДС = НоваяСтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
			НоваяСтрокаВосстановления.СчетУчетаНДС = СтрокаРасшифровки.СчетУчетаНДС;
			
			СуммаСНДСПоСтроке = СуммаСНДСПоСтроке - СуммаПокрытия;
			
			//Уменьшение суммы по строке восстановления без указания счета
			СтрокаВосстановления.СуммаСНДС = СтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
			СтрокаВосстановления.СуммаБезНДС = СтрокаВосстановления.СуммаБезНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
			СтрокаВосстановления.НДС = СтрокаВосстановления.НДС - НоваяСтрокаВосстановления.НДС;
			
			//Уменьшение остатка в таблице расшифровки 
			СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
			
			Если СуммаСНДСПоСтроке = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаВосстановления);
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если не СуммаСНДСПоСтроке = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаВосстановления);
			НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		НДСкВосстановлению.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат НДСкВосстановлению;
		
КонецФункции

// Заполняет раздел "НеОтражаетсяВКниге"
Процедура ЗаполнитьРазделНеОтражаетсяВКниге(ОтменитьПроведение = Ложь) Экспорт
	
	//Если Проведен Тогда
	//	Если ОтменитьПроведение Тогда
	//		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ТаблицаРезультатов = НеОтражаетсяВКниге.ВыгрузитьКолонки();
	ТаблицаРезультатов.Колонки.Добавить("ЗаписьДополнительногоЛиста",новый ОписаниеТипов("Булево"));
	ТаблицаРезультатов.Колонки.Добавить("КорректируемыйПериод");
	
	Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые();
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		НеОтражаетсяВКниге.Очистить(); Возврат;
	КонецЕсли;
	
	НеОтражаетсяВКниге.Загрузить(ТаблицаРезультатов);
КонецПроцедуры

// Вызывается из процедуры ЗаполнитьРазделНеОтражаетсяВКниге.
// Заполняет ТЧ НеОтражаетсяВКниге по данным регистра НДС начисленный (по реализации ЕНВД)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК СуммаНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ВидНачисления
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления В (&НДСВидыНачисления_Неотражаемые)) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация
	|			И (УчетнаяПолитика.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|				ГДЕ
	|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитика.Период
	|					И
	|					УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация))
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
	НДСВидыНачисления_Неотражаемые = новый массив();
	НДСВидыНачисления_Неотражаемые.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("НДСВидыНачисления_Неотражаемые", 	 НДСВидыНачисления_Неотражаемые);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции
  
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьТаблицуЗаписей(СтруктураШД)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШД.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Начало2008", '20080101');
	Запрос.УстановитьПараметр("ВидНачисления_Реализация0", Перечисления.НДСВидНачисления.Реализация0);
	
	// Виды ценностей расчеты по которым не отражаются в расчетах с покупателями
	ВидаЦенностиБезОплаты = Новый Массив();
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидаЦенностиБезОплаты", ВидаЦенностиБезОплаты);
	
	Если СтруктураШД.Реализация0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.КодВидаОперации,
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Реализация0 КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	ТаблицаЗаписей.Состояние,
		|	УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС,
		|	""НДС по реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < &Начало2008
		|			ТОГДА УчетнаяПолитикаКорректируемогоПериода.НДСНалоговыйПериод
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|	КОНЕЦ КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ТаблицаЗаписей.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация
		|			И (УчетнаяПолитика.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитика.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитика.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитика.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитика.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
	иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.КодВидаОперации,
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_БезНДС
		|			ТОГДА &ВидНачисления_РеализацияБезНДС
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_0
		|			ТОГДА &ВидНачисления_Реализация0
		|		ИНАЧЕ &ВидНачисления_РеализацияСНДС
		|	КОНЕЦ КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС,
		|	""НДС по реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	NULL КАК СчетУчетаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < &Начало2008
		|			ТОГДА УчетнаяПолитикаКорректируемогоПериода.НДСНалоговыйПериод
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|	КОНЕЦ КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|			ТОГДА ТаблицаЗаписей.ДоговорКонтрагента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация
		|			И (УчетнаяПолитика.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитика.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитика.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитика.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитика.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.КодВидаОперации,
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.СчетФактура,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|				И ТаблицаЗаписей.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.СторнирующаяЗаписьДопЛиста
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТаблицаЗаписей.СчетФактура.Дата,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Авансы,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""НДС с авансов"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < &Начало2008
		|			ТОГДА УчетнаяПолитикаКорректируемогоПериода.НДСНалоговыйПериод
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|	КОНЕЦ,
		|	ТаблицаЗаписей.ДоговорКонтрагента
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитика.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитика.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.КодВидаОперации,
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ТаблицаЗаписей.КорректируемыйПериод,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_НачисленКУплате,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""НДС начисленный к уплате"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.КодВидаОперации,
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	ТаблицаЗаписей.ВидНачисления,
		|	ЛОЖЬ,
		|	УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС,
		|	""Не отражается в книге продаж"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НеОтражаетсяВКниге КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация
		|			И (УчетнаяПолитика.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитика.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитика.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитика.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.КодВидаОперации,
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	&ПустаяДата,
		|	&Событие_НДСВосстановлен,
		|	&ВидНачисления_Восстановлен,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""НДС восстановлен"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	ТаблицаЗаписей.СчетУчетаНДС,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Восстановлен КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("СтавкаНДС_БезНДС", Перечисления.СтавкиНДС.БезНДС);
		Запрос.УстановитьПараметр("СтавкаНДС_0", Перечисления.СтавкиНДС.НДС0);
		
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияБезНДС", Перечисления.НДСВидНачисления.РеализацияБезНДС);
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияСНДС",	Перечисления.НДСВидНачисления.РеализацияСНДС);
		Запрос.УстановитьПараметр("ВидНачисления_Авансы", 			Перечисления.НДСВидНачисления.НДСсАвансов);
		Запрос.УстановитьПараметр("ВидНачисления_НачисленКУплате",	Перечисления.НДСВидНачисления.НДСНачисленКУплате);
		Запрос.УстановитьПараметр("ВидНачисления_Восстановлен",		Перечисления.НДСВидНачисления.НДСВосстановлен);
		Запрос.УстановитьПараметр("Событие_НДСВосстановлен",		Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	ТаблицаЗаписей = Результат.Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для каждого СтрокаТаблицы из ТаблицаЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = '00010101';
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.ДатаСобытия = СтруктураШД.Дата;
		Иначе
			СтрокаТаблицы.ДатаСобытия = Макс(СтрокаТаблицы.ДатаОплаты,СтрокаТаблицы.СчетФактураДата);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаЗаписей;

КонецФункции

Процедура ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШД, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	Если ТаблицаПоВосстановлениюПоАвансам.Количество()=0 Тогда Возврат; КонецЕсли; 
	
	// Отражение по регистру НДСсАвансов
//	Если Не СтруктураШД.УпрощенныйУчетНДС Тогда
		
		ТаблицаДвижений_НДСсАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСсАвансов);
		ТаблицаДвижений_НДСсАвансов.Свернуть("Период, Активность, Организация, СчетФактура, ВидЦенности, СтавкаНДС, Покупатель, ДоговорКонтрагента, ДатаСобытия", "СуммаБезНДС, НДС");
			
		Движения.НДСсАвансов.мПериод = СтруктураШД.Дата;
		Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДСсАвансов;
		Движения.НДСсАвансов.ВыполнитьРасход();
		
//	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	                                                                                                                                                                                                                                           
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШД, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента,КодВидаОперации","СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШД.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	// Сформировать проводки по записям книги покупок
	Для каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		Если СтрокаТаблицы.НДС = 0 Тогда
			ПродолжитЬ;
		КонецЕсли; 
		
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период = СтруктураШД.Дата;
		Движение.Организация =  СтруктураШД.Организация;
		Движение.Сумма = СтрокаТаблицы.НДС;
		Движение.Содержание = "Восстановление НДС с выданного аванса";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; //76.ВА

		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаТаблицы.Покупатель);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура);
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	КонецЦикла; 
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШД, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	
	Если Отказ Тогда Возврат; КонецЕсли;
	Если ТаблицаПоНачислению.Количество()=0 Тогда Возврат; КонецЕсли; 
	
	Если мВестиУчетНДС Тогда
		// Отражение по регистру "НДС начисленный"
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСНачисленный);
		ТаблицаДвижений_НДСНачисленный.Свернуть("Период,Активность,Организация,СчетФактура,ВидЦенности,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидНачисления,ДоговорКонтрагента,СчетУчетаНДС","СуммаБезНДС,НДС");
		
		Движения.НДСНачисленный.мПериод = СтруктураШД.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ВыполнитьРасход();
	КонецЕсли;
	
	// Отражение по регистру НДСЗаписиКнигиПродаж
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("ОтражатьВКниге",Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	Если СтруктураШД.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("СчетФактураДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПродаж Цикл
		Если не СтрокаЗаписи.ОтражатьВКниге Тогда
			СтрокиКУдалению.Добавить(СтрокаЗаписи);
		КонецЕсли; 
		
		Если СтруктураШД.Реализация0 и СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
			Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
				СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.СчетФактураДата);
			Иначе				
				СтрокаЗаписи.Период = СтруктураШД.Дата;
			КонецЕсли; 
			СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
		КонецЕсли;
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	    ТаблицаДвижений_НДСЗаписиКнигиПродаж.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.ОтражатьВКниге);
	
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШД, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	Если СтруктураШД.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Состояние);
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СчетФактураДата);
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты, ДатаОплаты,СтавкаНДС,Покупатель,ДатаСобытия,Событие,ВидЦенности,ЗаписьДополнительногоЛиста,КорректируемыйПериод,СторнирующаяЗаписьДопЛиста, ДоговорКонтрагента,КодВидаОперации","СуммаБезНДС,НДС");
	
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШД.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	Если мВестиУчетНДС Тогда
		Если СтруктураШД.Реализация0 Тогда
			// Отражение по регистру НДСРеализация0
			ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.ВыгрузитьКолонки();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСРеализация0);
			ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
			
			Движения.НДСРеализация0.мПериод 		 = СтруктураШД.Дата;
			Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
			Движения.НДСРеализация0.ДобавитьДвижение(Ложь);

		КонецЕслИ;
	КонецЕсли;
	
	ВидыНачисления_Реализация = Новый СписокЗначений;
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачисления_Реализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	// Сфоормировать проводи по записям книги продаж
	Для каждого ТекСтрокаВычета Из ТаблицаПоНачислению Цикл
			
		Если Не ТекСтрокаВычета.ОтражатьВКниге Тогда
			Продолжить;
		ИначеЕсли ТекСтрокаВычета.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если не ВидыНачисления_Реализация.НайтиПоЗначению(ТекСтрокаВычета.ВидНачисления) = Неопределено Тогда
			Если ТекСтрокаВычета.СчетФактураДата >= '20060101' Тогда 
				// C 2006 года учетная политика всегда по отгрузке
				Продолжить;
			ИначеЕсли не ТекСтрокаВычета.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате тогда
				Продолжить;
			ИначеЕсли ТипЗнч(ТекСтрокаВычета.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхпродажах")
				Или ТипЗнч(ТекСтрокаВычета.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
				Продолжить;
			КонецЕсли; 
					
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШД.Дата;
			Движение.Организация =  СтруктураШД.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.Содержание = "НДС ";
					
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет; //76.Н
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные", ТекСтрокаВычета.СчетФактура);
					
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

			Если Движение.СчетДт.НалоговыйУчет Тогда
				Движение.СуммаНУДт=Движение.Сумма;
			КонецЕсли;
			Если Движение.СчетКт.НалоговыйУчет Тогда
				Движение.СуммаНУКт=Движение.Сумма;
			КонецЕсли;

		ИначеЕсли ТекСтрокаВычета.ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен Тогда
			// Проводка по восстановлению НДС на 19 счет 
			Движение = Движения.Хозрасчетный.Добавить();
			Движение.Период = СтруктураШД.Дата;
			Движение.Организация =  СтруктураШД.Организация;
			Движение.Сумма = ТекСтрокаВычета.НДС;
			Движение.Содержание = "Восстановление НДС";

			Движение.СчетДт = ТекСтрокаВычета.СчетУчетаНДС; //19.ХХ
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", ТекСтрокаВычета.СчетФактура);
					
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.02
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Если Движение.СчетДт.НалоговыйУчет Тогда
				Движение.СуммаНУДт=Движение.Сумма;
			КонецЕсли;
			Если Движение.СчетКт.НалоговыйУчет Тогда
				Движение.СуммаНУКт=Движение.Сумма;
			КонецЕсли;
		КонецЕсли; 			
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШД, ТаблицаДвижений_НДСЗаписиКнигиПродаж)
	Если СтруктураШД.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда Возврат; КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти( Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Скопировать();
	
	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фаткура)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0)
			Тогда
			ТекущаяСтрока.СтавкаНДС = Неопределено;
		КонецЕсли; 
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждуй
		// договор отдельный счет-фаткура или отдельное лист декларации)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент)
			Тогда
			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фаткура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,СтавкаНДС,ДоговорКонтрагента,ЗаписьДополнительногоЛиста,КорректируемыйПериод,НДСНалоговыйПериодДополнительногоЛиста","СуммаБезНДС,НДС");
	
	СвернутаяТаблицаЗаписейДопЛиста.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));
	
	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");
	ОтработанныеСФпоПериодам.Индексы.Добавить("СчетФактура,НалоговыйПериод");
	
	Для Каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл
		НачалоНалоговогоПериодаКорректировки = ?(СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал, НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод),НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод));
		ОтборОтработанныхЗаписей = новый Структура("СчетФактура,НалоговыйПериод",СтрокаДопЛиста.СчетФактура,НачалоНалоговогоПериодаКорректировки);
		
		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли; 
		
		Если не (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли; 
		
		Запрос=Новый Запрос;
		Запрос.Текст="
		|ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Месяц,
		|			СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))
		|";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШД.Дата));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураШД.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("СтавкаНДС", ?(ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));
		
		Если СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал Тогда
			Запрос.Текст = СтрЗаменить(Нрег(Запрос.Текст),"месяц","квартал");
		КонецЕсли; 
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ТаблицаЗаписей=Результат.Выгрузить();
			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");

			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШД.Дата, "ДатаСобытия");
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДС.Имя = "НДССторно";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДССторно.Имя = "НДС";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Функция ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШД)
	
	ТаблицаПоВосстановлениюПоАвансам = РезультатЗапросаПоВосстановлениюПоАвансам.Выгрузить();
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.НДСВидНачисления"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШД.Дата, "ДатаСобытия");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.Периодичность.Квартал, "НДСНалоговыйПериодДополнительногоЛиста");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШД.Дата, "ДатаОплаты");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(ТаблицаПоВосстановлениюПоАвансам.Колонки.СчетФактура.ТипЗначения));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаСчетаФактуры;
		СтрокаТаблицы.ДокументОплаты = СтрокаТаблицы.СчетФактура;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоВосстановлениюПоАвансам;
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	Заголовок=ДополнительныеСвойства.Заголовок;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ТаблицаПоНачислению = ПодготовитьТаблицуЗаписей(СтруктураШД);

	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по восстановлению по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Покупатель",		 "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	
	РезультатЗапросаПоВосстановлениюПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВосстановленПоАвансам", СтруктураПолей);
	ТаблицаПоВосстановлениюПоАвансам = ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШД);
 	
	мВестиУчетНДС = Истина;
	
	ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если Реализация0 Тогда
		ПроверяемыеРеквизиты.Добавить("Состояние"); 
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Продажа");