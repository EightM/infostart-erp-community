&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Видимость=НЕ Элементы.ШапкаПанель1.Видимость;		
		Элементы.ШапкаПанель1.Видимость=Видимость;
		Элементы.ШапкаПанель2.Видимость=Видимость;
		Элементы[Команда.Имя].Картинка=?(Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоКрасная);
		Элементы.ШапкаИнфо.Видимость=Не Видимость;

		МассивДанных=Новый Массив;
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" Организация: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Организация));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Куратор: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Ответственный));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Комментарий: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Комментарий));

		Элементы.ШапкаИнфо.Заголовок=Новый ФорматированнаяСтрока(МассивДанных);		

	ИначеЕсли Команда.Имя="ЗаполнитьВсеТабличныеЧасти" Тогда
		Если Объект.Проведен Тогда
			ПоказатьПредупреждение(,"Заполнение возможно только в непроведенном документе", 60,);
			Возврат;
		КонецЕсли;
		
		Если Объект.Реализация.Количество() > 0 Или Объект.Авансы.Количество() > 0 Или Объект.НачисленКУплате.Количество() > 0 Или Объект.Восстановлен.Количество() > 0 Или Объект.НеОтражаетсяВКниге.Количество() > 0  Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьТабличныеЧасти", ЭтотОбъект), "Заполненные ранее табличные поля документа будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		КонецЕсли;		
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовФормы()
	УстановитьВидимостьФлагаСторнирующихЗаписей();

	Элементы.РеализацияСостояние.Видимость 		 = Объект.Реализация0;
	Элементы.СтраницаАвансы.Видимость            = НЕ Объект.Реализация0;
	Элементы.СтраницаНачисленКУплате.Видимость   = НЕ Объект.Реализация0;
	Элементы.СтраницаНеОтражаетсяВКниге.Видимость= НЕ Объект.Реализация0;
	Элементы.СтраницаВосстановлен.Видимость		 = НЕ Объект.Реализация0;

	СтруктураПоиска=Новый Структура("ВидЦенности", ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НалоговыйАгентКомитент"));
	Элементы.РеализацияДоговорКонтрагента.Видимость=Не Объект.Реализация.НайтиСтроки(СтруктураПоиска).Количество()=0;
	
	Элементы.кпАвансы_Заполнить.Доступность=Не ТолькоПросмотр;
	Элементы.кпВосстановлен_Заполнить.Доступность=Не ТолькоПросмотр;
	Элементы.кпВосстановленПоАвансам_ЗаполнитьПоОплате.Доступность=Не ТолькоПросмотр;
	Элементы.кпВосстановленПоАвансам_ЗаполнитьПоОтгрузке.Доступность=Не ТолькоПросмотр;
	Элементы.кпНачисленКУплате_Заполнить.Доступность=Не ТолькоПросмотр;
	Элементы.кпНеОтражаетсяВКниге_Заполнить.Доступность=Не ТолькоПросмотр;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьФлагаСторнирующихЗаписей()
	СтруктураПоиска=Новый Структура("ЗаписьДополнительногоЛиста", Истина);

	ВидимостьФлага=Не Объект.Реализация.НайтиСтроки(СтруктураПоиска).Количество()=0;
	Если Не ВидимостьФлага И Не Объект.Реализация0 Тогда
		ВидимостьФлага=Не Объект.Авансы.НайтиСтроки(СтруктураПоиска).Количество()=0;
	КонецЕсли;
	Элементы.ФормироватьСторнирующиеЗаписиДопЛистовВручную.Доступность=ВидимостьФлага;
	Элементы.РеализацияСторнирующаяЗаписьДопЛиста.Видимость=ВидимостьФлага И Объект.ФормироватьСторнирующиеЗаписиДопЛистовВручную;
	Элементы.АвансыСторнирующаяЗаписьДопЛиста.Видимость=ВидимостьФлага И Объект.ФормироватьСторнирующиеЗаписиДопЛистовВручную;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыеДанныеТабличнойЧасти(стрТабличнаяЧасть=Неопределено)

	ОбновитьИтоговыеДанныеТабличнойЧасти=?(стрТабличнаяЧасть=Неопределено, Истина, стрТабличнаяЧасть="Реализация");
	Если ОбновитьИтоговыеДанныеТабличнойЧасти Тогда
		ИтогоОборот=Объект.Реализация.Итог("СуммаБезНДС");
		ИтогоНДС=Объект.Реализация.Итог("НДС");
		Элементы.ОборотСНДС.Заголовок=ИтогоОборот+ИтогоНДС;
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти=?(стрТабличнаяЧасть=Неопределено, Истина, стрТабличнаяЧасть="Авансы");
	Если ОбновитьИтоговыеДанныеТабличнойЧасти Тогда
		ИтогоОборотА=Объект.Авансы.Итог("СуммаБезНДС");
		ИтогоНДСА=Объект.Авансы.Итог("НДС");
		Элементы.ОборотСНДСА.Заголовок=ИтогоОборотА+ИтогоНДСА;
	КонецЕсли; 

	ОбновитьИтоговыеДанныеТабличнойЧасти=?(стрТабличнаяЧасть=Неопределено, Истина, стрТабличнаяЧасть="НачисленКУплате");
	Если ОбновитьИтоговыеДанныеТабличнойЧасти Тогда
		ИтогоОборотУ=Объект.НачисленКУплате.Итог("СуммаБезНДС");
		ИтогоНДСУ=Объект.НачисленКУплате.Итог("НДС");
		Элементы.ОборотСНДСУ.Заголовок=ИтогоОборотУ+ИтогоНДСУ;
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти=?(стрТабличнаяЧасть=Неопределено, Истина, стрТабличнаяЧасть="Восстановлен");
	Если ОбновитьИтоговыеДанныеТабличнойЧасти Тогда
    	ИтогоОборотВ=Объект.Восстановлен.Итог("СуммаБезНДС");
		ИтогоНДСВ=Объект.Восстановлен.Итог("НДС");
		Элементы.ОборотСНДСВ.Заголовок=ИтогоОборотВ+ИтогоНДСВ;
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти=?(стрТабличнаяЧасть=Неопределено, Истина, стрТабличнаяЧасть="НеОтражаетсяВКниге");
	Если ОбновитьИтоговыеДанныеТабличнойЧасти Тогда
		ИтогоОборотН=Объект.НеОтражаетсяВКниге.Итог("СуммаБезНДС");
		ИтогоНДСН=Объект.НеОтражаетсяВКниге.Итог("НДС");
		Элементы.ОборотСНДСН.Заголовок=ИтогоОборотН+ИтогоНДСН;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеТабличныеЧасти()
	ЗаполнитьТабличнуюЧастьРеализацияНаСервере();
	
	Если Объект.Реализация0 Тогда
		Объект.Авансы.Очистить();
		Объект.НачисленКУплате.Очистить();
		Объект.Восстановлен.Очистить();
		Объект.НеОтражаетсяВКниге.Очистить();
		ВидимостьЭлементовФормы();
		ОбновитьИтоговыеДанныеТабличнойЧасти();		
	Иначе		
		ЗаполнитьТабличнуюЧастьАвансыНаСервере();
		ЗаполнитьТабличнуюЧастьНачисленКУплатеНаСервере();
		ЗаполнитьТабличнуюЧастьНеОтражаетсяВКнигеНаСервере();
		ЗаполнитьТабличнуюЧастьВосстановленНаСервере();

		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьНДСпоАвансам", ЭтотОбъект), "Заполнить НДС по авансам выданным. По остаткам?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьТабличныеЧасти(Параметр1, Параметр2=Неопределено) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;	
	ЗаполнитьВсеТабличныеЧасти();	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьНДСпоАвансам(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличнуюЧастьВосстановленПоАвансамПоОтгрузкеНаСервере();
	Иначе
		ЗаполнитьТабличнуюЧастьВосстановленПоАвансамПоОплатеНаСервере();
	КонецЕсли;
	Если Не (Объект.Реализация.Количество()>0  или Объект.Авансы.Количество()>0	или Объект.НачисленКУплате.Количество()>0 или Объект.Восстановлен.Количество()>0 или Объект.НеОтражаетсяВКниге.Количество()>0) Тогда
		ПоказатьПредупреждение(,"Не обнаружены записи к отражению в книге продаж", 60,); Возврат;
	КонецЕсли;
	ВидимостьЭлементовФормы();
	ОбновитьИтоговыеДанныеТабличнойЧасти();	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0НаСервере(ВключитьОжиданиеПодтверждения = ложь, СписокСчетовФактур = Неопределено)
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Если ВключитьОжиданиеПодтверждения Тогда
		ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСРеализация0Остатки.Организация,
	|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаСНДС,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС_НачисленоВсего,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток < НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток
	|				И (НЕ НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток < 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяКорректировка,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСРеализация0Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Организация = НДСРеализация0Остатки.Организация
	|			И (УчетнаяПолитика.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|				ГДЕ
	|					ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитика.Период
	|					И УчетнаяПолитика.Организация = НДСРеализация0Остатки.Организация))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСНачисленныйОстатки
	|		ПО НДСРеализация0Остатки.СчетФактура = НДСНачисленныйОстатки.СчетФактура
	|			И НДСРеализация0Остатки.ВидЦенности = НДСНачисленныйОстатки.ВидЦенности
	|			И НДСРеализация0Остатки.СтавкаНДС = НДСНачисленныйОстатки.СтавкаНДС
	|ГДЕ
	|	(НДСРеализация0Остатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСРеализация0Остатки.НДСОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС),
	|	МАКСИМУМ(ТребуетсяКорректировка)
	|ПО
	|	СчетФактура
	|";
	Если Не СписокСчетовФактур=Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", " 
			|		Организация = &Организация И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур" ,СписокСчетовФактур);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	СФДляКорректировки=РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("ТребуетсяКорректировка", Истина));
	Для каждого СтрокаСФ Из СФДляКорректировки Цикл
		Для каждого СтрокаРасшифровки Из СтрокаСФ.Строки Цикл
			Если СтрокаРасшифровки.ТребуетсяКорректировка Тогда
				СтрокаРасшифровки.СуммаНДС = (СтрокаРасшифровки.СуммаНДС*СтрокаРасшифровки.СуммаСНДС_НачисленоВсего/СтрокаРасшифровки.СуммаСНДС);
				СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС_НачисленоВсего;
				СтрокаРасшифровки.СуммаБезНДС = СтрокаРасшифровки.СуммаСНДС - СтрокаРасшифровки.СуммаНДС;
			КонецЕсли; 
		КонецЦикла;		
		СтрокаСФ.СуммаНДС = СтрокаСФ.Строки.Итог("СуммаНДС");
		СтрокаСФ.СуммаСНДС = СтрокаСФ.Строки.Итог("СуммаСНДС");
		СтрокаСФ.СуммаБезНДС = СтрокаСФ.Строки.Итог("СуммаБезНДС");
	КонецЦикла; 

	Возврат РезультатЗапроса;	
КонецФункции

&НаСервере
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленныйНаСервере(СписокСчетовФактур = неопределено)
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыНачисления=Новый СписокЗначений;
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);		// не отражается в книге продаж
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСНачисленКУплате);	// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);			// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);		// Отражается отдельно

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	Запрос.УстановитьПараметр("ИсключаемыеВидыНачисления", ИсключаемыеВидыНачисления);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И (НЕ ВидНачисления В (&ИсключаемыеВидыНачисления))) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
	|		ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
	|			И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
	|			И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
	|			И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация
	|			И (УчетнаяПолитика.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|				ГДЕ
	|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитика.Период
	|					И УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация))
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура
	|";	
	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);		
	КонецЕсли; 

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
КонецФункции

&НаСервере
Процедура РаспределитьОплатыПоДеревуСФНаСервере(Дерево_НДСНачисленный, ТаблицаРезультатов, СписокСчетовФактур)
	Если Не УчетнаяПолитика.Свойство("НДСНалоговыйПериод")=Неопределено Тогда
		Если УчетнаяПолитика.НДСНалоговыйПериод=Перечисления.Периодичность.Месяц Тогда
			НДСНалоговыйПериод=Перечисления.Периодичность.Месяц;
		Иначе
			НДСНалоговыйПериод=Перечисления.Периодичность.Квартал;
		КонецЕсли;
	Иначе
		НДСНалоговыйПериод=Перечисления.Периодичность.Месяц;
	КонецЕсли;
	
	Для каждого СтрокаСФ Из Дерево_НДСНачисленный.Строки Цикл
		Если СтрокаСФ.Строки.Итог("СуммаСНДС")=0 Тогда Продолжить; КонецЕсли;
		
		Для каждого СтрокаЗадолжености Из СтрокаСФ.Строки Цикл
			СтрокаРезультата=ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаЗадолжености);
			СтрокаРезультата.НДС=СтрокаЗадолжености.СуммаНДС;
			Если Объект.Реализация0 Тогда
				Если СтрокаЗадолжености.Состояние=Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
					СтрокаРезультата.Событие=Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				ИначеЕсли СтрокаЗадолжености.Состояние=Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
					СтрокаРезультата.Событие=Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				КонецЕсли; 
			Иначе
				СтрокаРезультата.Событие=Перечисления.СобытияПоНДСПродажи.Реализация;
			КонецЕсли;
			Если (Объект.Реализация0 И СтрокаРезультата.Состояние=Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) Тогда
				
				СтрокаРезультата.ЗаписьДополнительногоЛиста=Истина;
				Если Объект.Реализация0 Тогда
					СтрокаРезультата.КорректируемыйПериод=Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата);
				Иначе 
					СтрокаРезультата.КорректируемыйПериод=СтрокаЗадолжености.СчетФактураДата;
				КонецЕсли;
				Если ?(НДСНалоговыйПериод=Перечисления.Периодичность.Месяц, 
					КонецМесяца(СтрокаРезультата.КорректируемыйПериод)=КонецМесяца(Объект.Дата),
					КонецКвартала(СтрокаРезультата.КорректируемыйПериод)=КонецКвартала(Объект.Дата)) Тогда
					СтрокаРезультата.ЗаписьДополнительногоЛиста=Ложь;
					СтрокаРезультата.КорректируемыйПериод='00010101';
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьРеализацияНаСервере()
	НДСИспользованиеОплатПокупателя_Приоритет0=УчетнаяПолитика.НДСИспользованиеОплатПокупателя_Приоритет0;
	ТаблицаРезультатов=Объект.Реализация.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Если Объект.Реализация0 Тогда
		Дерево_НДСНачисленный=ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0НаСервере();
	Иначе	
		Дерево_НДСНачисленный=ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленныйНаСервере();
	КонецЕсли; 
	
	// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету. Ринат**********
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда		
		Объект.Реализация.Очистить(); Возврат;
	КонецЕсли;

	СписокСчетовФактур=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	РаспределитьОплатыПоДеревуСФНаСервере(Дерево_НДСНачисленный, ТаблицаРезультатов, СписокСчетовФактур);
	
	Для каждого СтрокаКоллекции Из ТаблицаРезультатов Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
       	Если НачалоКвартала(Объект.Дата)<>НачалоКвартала(докСсылка.Дата) Тогда
			СтрокаКоллекции.ЗаписьДополнительногоЛиста=Истина;
			СтрокаКоллекции.КорректируемыйПериод=докСсылка.Дата;
		КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;

		Если УправлениеМетаданными.ЕстьРеквизит("КорректируемыйПериод", докСсылка.Метаданные())  Тогда
			Если Не ЗначениеЗаполнено(докСсылка.КорректируемыйПериод) Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции.ЗаписьДополнительногоЛиста=Истина;
			СтрокаКоллекции.КорректируемыйПериод=докСсылка.КорректируемыйПериод;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Реализация.Загрузить(ТаблицаРезультатов);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансамНаСервере()

	ТаблицаВосстановлен=Объект.ВосстановленПоАвансам.Выгрузить();
	ТаблицаВосстановлен.Очистить();
	
	// Восстановление НДС по авансам выданным
	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) КАК НДС,
	|	НДСсАвансовОстатки.ВидЦенности
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
	|				&КонецПериодаГраница,
	|				Организация = &Организация
	|					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки
	|		ПО НДСсАвансовОстатки.Организация = НДСПредъявленныйОстатки.Организация
	|			И НДСсАвансовОстатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
	|			И НДСсАвансовОстатки.Покупатель = НДСПредъявленныйОстатки.Поставщик
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСПредъявленныйОстатки.ДоговорКонтрагента
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
	|			И НДСсАвансовОстатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
	|ГДЕ
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) > 0
	|	И НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) > 0
	|";
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда
		Возврат ТаблицаВосстановлен;
	КонецЕсли;

	ТаблицаНДССАвансов = Результат.Выгрузить();

	СтрокиКУдалению = Новый Массив;
	Для	Каждого СтрокаТаблицыНДССАвансов Из ТаблицаНДССАвансов Цикл
		Если СтрокаТаблицыНДССАвансов.СуммаБезНДС=0 И СтрокаТаблицыНДССАвансов.НДС=0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыНДССАвансов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНДССАвансов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДССАвансов, ТаблицаВосстановлен);
	
	Возврат ТаблицаВосстановлен;
КонецФункции

&НаСервере
Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовНаСервере()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(&ДатаГраница, Организация = &Организация) КАК НДСсАвансовОстатки
	|ГДЕ
	|	(НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСсАвансовОстатки.НДСОстаток > 0) И НДСсАвансовОстатки.ДоговорКонтрагента.ВидДоговора=&ВидДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура
	|";	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);
	
	Дерево_НДСсАвансов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Дерево_НДСсАвансов.Строки.Количество() = 0 тогда 
		Возврат Дерево_НДСсАвансов;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Документ КАК ДокументОплаты,
	|	СУММА(-1 * ИсточникДанных.СуммаОстаток) КАК Сумма,
	|	СУММА(-1 * ИсточникДанных.СуммаОстаток) КАК ВалютнаяСумма,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(&ДатаГраница, Организация = &Организация И Документ В (&СписокСчетовФактур)) КАК ИсточникДанных
	|ГДЕ
	|   -1 * ИсточникДанных.СуммаОстаток  > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	|ИТОГИ ПО
	|	ДокументОплаты
	|";
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ВалютаАванса = ДополнительныеСвойства.ВалютаБухУчета;
	ВалютаАванса=МодульВалютногоУчета.ПолучитьВалюту();
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда Продолжить; КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл			
			
			Отбор = Новый Структура("Поставщик,ДоговорКонтрагента, ВалютаАванса",СтрокаЗафиксированногоАванса.Поставщик, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда Продолжить; КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			//МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
		//	ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
			//	МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
			//	ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
		//	Если ВалютнаяСуммаСНДС = 0 Тогда Продолжить; КонецЕсли; 
			
		//	ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
			СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
			Если СуммаСНДС = 0 Тогда Продолжить; КонецЕсли;
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			//Если ВалютнаяСуммаСНДС >0 Тогда
			//	МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально_2(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			//КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
			//	СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  Тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			//СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из КУдалениюСФ Цикл
		Дерево_НДСсАвансов.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат Дерево_НДСсАвансов;
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьВосстановленПоАвансамПоОтгрузкеНаСервере()
	ТаблицаРезультатов=Объект.ВосстановленПоАвансам.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансамНаСервере();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Объект.ВосстановленПоАвансам.Очистить();  Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции ИЗ Таблица_Восстановлен Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен, ТаблицаРезультатов);

	Объект.ВосстановленПоАвансам.Загрузить(ТаблицаРезультатов);
	Объект.ВосстановленПоАвансам.Сортировать("СчетФактура, Поставщик, ДоговорКонтрагента, СтавкаНДС");

КонецПроцедуры

&НаСервере
Процедура РаспределитьЗачетыАвансаПоСФНаСервере(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов)
	
	ВалютаАванса=МодульВалютногоУчета.ПолучитьВалюту();
	Для каждого СтрокаТипДоговораКонтрагента Из ТаблицаЗачетовАвансов.Строки Цикл //16.06.2011
		Для каждого СтрокаПогашенияАванса Из СтрокаТипДоговораКонтрагента.Строки Цикл
			ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(СтрокаПогашенияАванса.ДокументОплаты,"СчетФактура");
			Если ЗафиксированныйАвансПоСФ = Неопределено Тогда Продолжить; КонецЕсли; 
			
			Отбор=Новый Структура("Поставщик,ДоговорКонтрагента, ВалютаАванса",СтрокаПогашенияАванса.Поставщик, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
			СтрокиАвансаПоОтбору=ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество()=0 Тогда Продолжить; КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
			КонецЦикла; 
			
				Если СуммаБезНДС+СуммаНДС = 0 тогда Продолжить; КонецЕсли; 
				СуммаСНДС = Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда Продолжить; КонецЕсли;
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально_2(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				Если ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0) = 0 и ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0) = 0  Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура	= СтрокаАвансаПоОтбору.СчетФактура;
				СтрокаРезультата.Поставщик		= СтрокаАвансаПоОтбору.Поставщик;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАвансаПоОтбору.ДоговорКонтрагента;
				СтрокаРезультата.СтавкаНДС		= СтрокаАвансаПоОтбору.СтавкаНДС;
				СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС			=  ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла;
	
	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				продолжить;;
			КонецЕсли; 
			СтрокаРезультата=ТаблицаРезультатов.Добавить();
			СтрокаРезультата.СчетФактура	= СтрокаАванса.СчетФактура;
			СтрокаРезультата.Поставщик		= СтрокаАванса.Поставщик;
			СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса.ДоговорКонтрагента;
			СтрокаРезультата.СтавкаНДС		= СтрокаАванса.СтавкаНДС;
			СтрокаРезультата.СуммаБезНДС	= СтрокаАванса.СуммаБезНДС;
			СтрокаРезультата.НДС			= СтрокаАванса.НДС;
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФНаСервере(СписокСчетовФактур)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Документ КАК ДокументОплаты,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	СУММА(ИсточникДанных.СуммаПриход) КАК Сумма,
	|	СУММА(ИсточникДанных.СуммаПриход) КАК ВалютнаяСумма,
	|	ИсточникДанных.Период КАК Дата
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Обороты(,	&ДатаГраница, День, Организация = &Организация И Документ В (&СписокСчетовФактур)) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьВосстановленПоАвансамПоОплатеНаСервере()
	
	ТаблицаРезультатов=Объект.ВосстановленПоАвансам.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Дерево_НДСсАвансов = ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовНаСервере();
	Если Дерево_НДСсАвансов.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Объект.ВосстановленПоАвансам.Очистить(); Возврат;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	ТаблицаЗачетовАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФНаСервере(СписокСчетовФактур);
	
	РаспределитьЗачетыАвансаПоСФНаСервере(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов);
	
	СтрокиКУдалению = ТаблицаРезультатов.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0, 0));
	
	Для каждого СтрокаКУадлению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУадлению);
	КонецЦикла;
	Объект.ВосстановленПоАвансам.Загрузить(ТаблицаРезультатов);
	
	Для Каждого СтрокаДок ИЗ Объект.ВосстановленПоАвансам Цикл
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаДок.СчетФактура,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(СтрокаДок.СчетФактура,"СчетФактураПолученный");
		КонецЕсли;
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаДок.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", СтрокаДок.СчетФактура.Метаданные()) Тогда
					СтрокаДок.КодВидаОперации=СтрокаДок.СчетФактура.КодВидаОперации;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция ЗаполнитьНДСНачисленныйДаннымиПоАвансамНаСервере()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСсАвансов", Перечисления.НДСВидНачисления.НДСсАвансов);
	Запрос.УстановитьПараметр("Событие_НДСсАвансов", Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	&Событие_НДСсАвансов КАК Событие,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация И ВидНачисления = &НДСВидНачисления_НДСсАвансов) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НДСНачисленныйОстатки.СуммаБезНДСОстаток > 0 ИЛИ НДСНачисленныйОстатки.НДСОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьАвансыНаСервере()
	ТаблицаРезультатов=Объект.Авансы.Выгрузить();
	ТаблицаРезультатов.Очистить();
	Таблица_НДСcАвансов=ЗаполнитьНДСНачисленныйДаннымиПоАвансамНаСервере();
	
	Если Таблица_НДСcАвансов.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Объект.Авансы.Очистить();
		Возврат;
	КонецЕсли;
	
	Таблица_НДСcАвансов.Колонки.Добавить("КодВидаОперации",Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаКоллекции ИЗ Таблица_НДСcАвансов Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСcАвансов,ТаблицаРезультатов);
	Объект.Авансы.Загрузить(Таблица_НДСcАвансов);

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплатеНаСервере()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСНачисленКУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("ВидЦенностиСуммыСвязанныеСРасчетами", Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = &ВидЦенностиСуммыСвязанныеСРасчетами
	|			ТОГДА НДСНачисленныйОстатки.СчетФактура.Дата
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления_НДСНачисленКУплате) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|";
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНачисленКУплатеНаСервере()

	ТаблицаРезультатов=Объект.НачисленКУплате.Выгрузить();
	ТаблицаРезультатов.Очистить();
	Таблица_НДСНачисленКУплате = ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплатеНаСервере();
	
	Если Таблица_НДСНачисленКУплате.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Объект.НачисленКУплате.Очистить();
		Возврат;
	КонецЕсли;
	
	Таблица_НДСНачисленКУплате.Колонки.Добавить("КодВидаОперации",Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаКоллекции ИЗ Таблица_НДСНачисленКУплате Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСНачисленКУплате,ТаблицаРезультатов);
	
	Для Каждого СтрокаКоллекции ИЗ ТаблицаРезультатов Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		Если ТипЗнч(докСсылка)=Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") ИЛИ ТипЗнч(докСсылка)=Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			СтрокаКоллекции.ДокументОплаты=докСсылка;
		КонецЕсли;	
	КонецЦикла;	

	Объект.НачисленКУплате.Загрузить(ТаблицаРезультатов);

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	НДСкВосстановлению = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	НДСкВосстановлению.Колонки.Добавить("СчетУчетаНДС", новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Если НДСкВосстановлению.Количество() = 0 Тогда
		Возврат НДСкВосстановлению;
	КонецЕсли; 
	
	//Определение счетов учета НДС для формирования проводки по восстановлению
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленный.СчетФактура КАК СчетФактура,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.СтавкаНДС,
	|	НДСНачисленный.СчетУчетаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
	|				ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
	|			ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
	|		КОНЕЦ) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Организация = &Организация
	|	И НДСНачисленный.СчетФактура В(&СписокСчетовФактур)
	|	И НДСНачисленный.ВидНачисления = &НДСВидНачисления
	|	И НДСНачисленный.ВидЦенности В(&СписокВидовЦенностей)
	|	И НДСНачисленный.СтавкаНДС В(&СписокСтавокНДС)
	|	И НДСНачисленный.Период <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленный.Организация,
	|	НДСНачисленный.ВидЦенности,
	|	НДСНачисленный.СчетУчетаНДС,
	|	НДСНачисленный.СчетФактура,
	|	НДСНачисленный.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(ВЫБОР
	|				КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
	|					ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
	|				ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
	|			КОНЕЦ) = 0)
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СчетФактура"),Истина));
	Запрос.УстановитьПараметр("СписокВидовЦенностей", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("ВидЦенности"),Истина));
	Запрос.УстановитьПараметр("СписокСтавокНДС", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СтавкаНДС"),Истина));
	
	Запрос.УстановитьПараметр("ДвижениеПриход", ВидДвиженияНакопления.Приход);
	
	НДСкВосстановлениюВРазрезеСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокиКУдалению = Новый Массив();
	КоличествоБазовыхСтрок = НДСкВосстановлению.Количество();
	
	Для НомерСтрокиВосстановления =1 по КоличествоБазовыхСтрок Цикл
		СтрокаВосстановления = НДСкВосстановлению[НомерСтрокиВосстановления-1];
		СтрокаСФВРазезеСчетов = НДСкВосстановлениюВРазрезеСчетов.Строки.Найти(СтрокаВосстановления.СчетФактура,"СчетФактура");
		Если СтрокаСФВРазезеСчетов = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		РасшифровкаСФвРазрезеСчетов = СтрокаСФВРазезеСчетов.Строки.НайтиСтроки(Новый Структура("ВидЦенности,СтавкаНДС",СтрокаВосстановления.ВидЦенности,СтрокаВосстановления.СтавкаНДС));
		
		Если РасшифровкаСФвРазрезеСчетов.Количество() =0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СуммаСНДСПоСтроке = СтрокаВосстановления.СуммаСНДС;
		Для каждого СтрокаРасшифровки Из РасшифровкаСФвРазрезеСчетов Цикл
			СуммаПокрытия = 0;
			Если не СуммаСНДСПоСтроке*СтрокаРасшифровки.СуммаСНДС>0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СуммаПокрытия = ?(СуммаСНДСПоСтроке>0, Мин(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС), Макс(СуммаСНДСПоСтроке,СтрокаРасшифровки.СуммаСНДС));
			
			//Добавление новой строки по восстановлению в разрезе СФ
			НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
			НоваяСтрокаВосстановления.СуммаСНДС = СуммаПокрытия;
			НоваяСтрокаВосстановления.СуммаБезНДС = Окр(НоваяСтрокаВосстановления.СуммаБезНДС*СуммаПокрытия/СуммаСНДСПоСтроке,2);
			НоваяСтрокаВосстановления.НДС = НоваяСтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
			НоваяСтрокаВосстановления.СчетУчетаНДС = СтрокаРасшифровки.СчетУчетаНДС;
			
			СуммаСНДСПоСтроке = СуммаСНДСПоСтроке - СуммаПокрытия;
			
			//Уменьшение суммы по строке восстановления без указания счета
			СтрокаВосстановления.СуммаСНДС = СтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
			СтрокаВосстановления.СуммаБезНДС = СтрокаВосстановления.СуммаБезНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
			СтрокаВосстановления.НДС = СтрокаВосстановления.НДС - НоваяСтрокаВосстановления.НДС;
			
			//Уменьшение остатка в таблице расшифровки 
			СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
			
			Если СуммаСНДСПоСтроке = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаВосстановления);
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если не СуммаСНДСПоСтроке = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаВосстановления);
			НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		НДСкВосстановлению.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат НДСкВосстановлению;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьВосстановленНаСервере()
	ТаблицаРезультатов=Объект.Восстановлен.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуНаСервере();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Объект.Восстановлен.Очистить();
		Возврат;
	КонецЕсли;
	
	Таблица_Восстановлен.Колонки.Добавить("КодВидаОперации",Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаКоллекции ИЗ Таблица_Восстановлен Цикл
		докСсылка=СтрокаКоллекции.СчетФактура;
		Если НЕ ЗначениеЗаполнено(докСсылка) Тогда Продолжить; КонецЕсли;
		СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураВыданный");
		Если СчетФактураДокумент=Неопределено Тогда 
			СчетФактураДокумент=УчетНДС.НайтиПодчиненныйСчетФактуру(докСсылка,"СчетФактураПолученный");
		Конецесли;	
		Если НЕ СчетФактураДокумент=Неопределено Тогда 
			СтрокаКоллекции.КодВидаОперации=СчетФактураДокумент.КодВидаОперации;
		Иначе
			Если УправлениеМетаданными.ЕстьРеквизит("КодВидаОперации", докСсылка.Метаданные()) Тогда
				СтрокаКоллекции.КодВидаОперации=докСсылка.КодВидаОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен,ТаблицаРезультатов);

	Объект.Восстановлен.Загрузить(ТаблицаРезультатов);

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_НеотражаемыеНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК СуммаНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ВидНачисления
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления В (&НДСВидыНачисления_Неотражаемые)) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация
	|			И (УчетнаяПолитика.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|				ГДЕ
	|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитика.Период
	|					И
	|					УчетнаяПолитика.Организация = НДСНачисленныйОстатки.Организация))
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
	НДСВидыНачисления_Неотражаемые = новый массив();
	НДСВидыНачисления_Неотражаемые.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("НДСВидыНачисления_Неотражаемые", 	 НДСВидыНачисления_Неотражаемые);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНеОтражаетсяВКнигеНаСервере()
	ТаблицаРезультатов = Объект.НеОтражаетсяВКниге.Выгрузить();
	ТаблицаРезультатов.Очистить();
	
	ТаблицаРезультатов.Колонки.Добавить("ЗаписьДополнительногоЛиста",новый ОписаниеТипов("Булево"));
	ТаблицаРезультатов.Колонки.Добавить("КорректируемыйПериод");
	
	Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_НеотражаемыеНаСервере();
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Объект.НеОтражаетсяВКниге.Очистить(); Возврат;
	КонецЕсли;
	
	Объект.НеОтражаетсяВКниге.Загрузить(ТаблицаРезультатов);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");		

	ИначеЕсли Элемент.Имя="Реализация0" Тогда
		ВидимостьЭлементовФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Реализация"

&НаКлиенте
Процедура кпРеализация_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Реализация"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если стрКоманда="ЗаполнитьРеализация" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		ЗаполнитьТабличнуюЧастьРеализацияНаСервере();
		ВидимостьЭлементовФормы();
		ОбновитьИтоговыеДанныеТабличнойЧасти("Реализация");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпРеализация_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРеализация_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтоговыеДанныеТабличнойЧасти("Реализация");
	УстановитьВидимостьФлагаСторнирующихЗаписей();	
КонецПроцедуры

&НаКлиенте
Процедура тпРеализация_ПослеУдаления(Элемент)
	ОбновитьИтоговыеДанныеТабличнойЧасти("Реализация");
КонецПроцедуры

&НаКлиенте
Процедура тпРеализация_Колонка_ПриИзменении(Элемент) Экспорт
	стрКолонка=стрЗаменить(Элемент.Имя, "Реализация", "");
	ТекущиеДанные=Элементы.Реализация.ТекущиеДанные;

	Если стрКолонка="ВидЦенности" Тогда
		Если ТекущиеДанные.ВидЦенности=ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НалоговыйАгентКомитент")
			и не Элементы.РеализацияДоговорКонтрагента.Видимость Тогда
			Элементы.РеализацияДоговорКонтрагента.Видимость=Истина;
		КонецЕсли; 

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);
		          
	ИначеЕсли стрКолонка="СуммаБезНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);
		
	ИначеЕсли стрКолонка="ДокументОплаты" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОплаты) Тогда
			ТекущиеДанные.ДатаОплаты=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументОплаты, "Дата");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРеализация_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "Реализация", "");
	ТекущиеДанные=Элементы.Реализация.ТекущиеДанные;

	Если стрКолонка="СчетФактура" Или стрКолонка="ДокументОплаты" Тогда
		//СтандартнаяОбработка=Ложь;
		//Отбор=Новый Структура("Организация,Контрагент", Объект.Организация, ТекущиеДанные.Покупатель);
				
	ИначеЕсли стрКолонка="Событие" Тогда
		Элемент.СписокВыбора.Очистить();
		Если Не Объект.Реализация0 Тогда
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.Реализация"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.Оплата"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.НДССкорректирован"));
		Иначе
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0"));
		КонецЕсли;
		
	ИначеЕсли стрКолонка="Состояние" Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0"));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ВосстановленПоАвансам"

&НаКлиенте
Процедура кпВосстановленПоАвансам_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ВосстановленПоАвансам"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если стрКоманда="ЗаполнитьВосстановленПоАвансамПоОтгрузке" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		ЗаполнитьТабличнуюЧастьВосстановленПоАвансамПоОтгрузкеНаСервере();
		
	ИначеЕсли стрКоманда="ЗаполнитьВосстановленПоАвансамПоОплате" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		ЗаполнитьТабличнуюЧастьВосстановленПоАвансамПоОплатеНаСервере();
	КонецЕсли;	

	ОбновитьИтоговыеДанныеТабличнойЧасти("ВосстановленПоАвансам");
КонецПроцедуры

&НаКлиенте
Процедура тпВосстановленПоАвансам_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Авансы"

&НаКлиенте
Процедура кпАвансы_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Авансы"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьАвансы" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		ЗаполнитьТабличнуюЧастьАвансыНаСервере();
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти("Авансы");
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	ОбновитьИтоговыеДанныеТабличнойЧасти("Авансы");
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_ПослеУдаления(Элемент)
	ОбновитьИтоговыеДанныеТабличнойЧасти("Авансы");
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_Колонка_ПриИзменении(Элемент) Экспорт
	стрКолонка=стрЗаменить(Элемент.Имя, "Авансы", "");
	ТекущиеДанные=Элементы.Авансы.ТекущиеДанные;

	Если стрКолонка="Покупатель" Тогда
		Если Не ТекущиеДанные.ДоговорКонтрагента.Владелец=ТекущиеДанные.Покупатель Тогда
			ТекущиеДанные.ДоговорКонтрагента=ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЕсли;

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="СуммаБезНДС" Тогда
		ТекущиеДанные.НДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаБезНДС, Истина, Ложь, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпАвансы_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "Авансы", "");
	ТекущиеДанные=Элементы.Авансы.ТекущиеДанные;

	Если стрКолонка="ДоговорКонтрагента" Тогда
		МассивПараметров=Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПокупателем,СКомиссионером,СКомитентом")));
		Элементы.ДоговорКонтрагента.ПараметрыВыбора=Новый ФиксированныйМассив(МассивПараметров);

	ИначеЕсли стрКолонка="СчетФактура" Тогда
		////СтандартнаяОбработка=Ложь;
		////Отбор=Новый Структура("Организация, Контрагент", Объект.Организация, ТекущиеДанные.Покупатель);
		////Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		////	Отбор.Вставить( "ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
		////КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Начислен к уплате"

&НаКлиенте
Процедура кпНачисленКУплате_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="НачисленКУплате"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="Заполнить" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		ЗаполнитьТабличнуюЧастьНачисленКУплатеНаСервере();
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти("НачисленКУплате");
КонецПроцедуры

&НаКлиенте
Процедура тпНачисленКУплате_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпНачисленКУплате_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтоговыеДанныеТабличнойЧасти("НачисленКУплате");
КонецПроцедуры

&НаКлиенте
Процедура тпНачисленКУплате_ПослеУдаления(Элемент)
	ОбновитьИтоговыеДанныеТабличнойЧасти("НачисленКУплате");
КонецПроцедуры

&НаКлиенте
Процедура тпНачисленКУплате_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "НачисленКУплате", "");
	ТекущиеДанные=Элементы.НачисленКУплате.ТекущиеДанные;

	Если стрКолонка="СчетФактура" Или стрКолонка="ДокументОплаты" Тогда
		
	ИначеЕсли стрКолонка="Событие" Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.НДСНачисленКУплате"));
		Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.НДССкорректирован"));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "НДС восстановленный"

&НаКлиенте
Процедура кпВосстановлен_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Восстановлен"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьВосстановлен" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
        ЗаполнитьТабличнуюЧастьВосстановленНаСервере();
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти("Восстановлен");
КонецПроцедуры

&НаКлиенте
Процедура тпВосстановлен_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВосстановлен_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтоговыеДанныеТабличнойЧасти("Восстановлен");
КонецПроцедуры

&НаКлиенте
Процедура тпВосстановлен_ПослеУдаления(Элемент)
	ОбновитьИтоговыеДанныеТабличнойЧасти("Восстановлен");
КонецПроцедуры

&НаКлиенте
Процедура тпВосстановлен_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "Восстановлен", "");
	ТекущиеДанные=Элементы.НачисленКУплате.ТекущиеДанные;

	Если стрКолонка="СчетФактура" Тогда
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "не отражать в книге"

&НаКлиенте
Процедура кпНеОтражаетсяВКниге_ВыполнитьДействие(Кнопка)
	стрИмя=?(ТипЗнч(Кнопка)=Тип("Строка"), Кнопка, Кнопка.Имя);

	Если стрИмя="Заполнить" Тогда
		Если Объект.Проведен Тогда Возврат; КонецЕсли;
		ЗаполнитьТабличнуюЧастьНеОтражаетсяВКнигеНаСервере();
	КонецЕсли;

	ОбновитьИтоговыеДанныеТабличнойЧасти("НеОтражаетсяВКниге");
КонецПроцедуры

&НаКлиенте
Процедура тпНеОтражаетсяВКниге_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпНеОтражаетсяВКниге_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьИтоговыеДанныеТабличнойЧасти("НеОтражаетсяВКниге");
КонецПроцедуры

&НаКлиенте
Процедура тпНеОтражаетсяВКниге_ПослеУдаления(Элемент)
	ОбновитьИтоговыеДанныеТабличнойЧасти("НеОтражаетсяВКниге");
КонецПроцедуры

&НаКлиенте
Процедура тпНеОтражаетсяВКниге_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "НеОтражаетсяВКниге", "");
	ТекущиеДанные=Элементы.НеОтражаетсяВКниге.ТекущиеДанные;

	Если стрКолонка="СчетФактура" Или стрКолонка="ДокументОплаты" Тогда
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	
	Если Объект.Ссылка.Пустая() Тогда
		НачалоПериода=НачалоМесяца(Объект.Дата); 
		КонецПериода=КонецМесяца(Объект.Дата);
	КонецЕсли;
	ОбновитьИтоговыеДанныеТабличнойЧасти();
	ВидимостьЭлементовФормы();

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
