&НаКлиенте
Процедура ВыполнитьДействие(Команда)
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ПримерПроизвольнойКоманды_КнопкаНаФорме()
	СтруктураПараметров=Новый Структура; //***
	
	//Описываем алгоритм выполнения (и место выполнения)
	стрАлгоритм_НаКлиенте="
	|Сообщить(""Код выполнился на клиенте"");
	|ОписаниеОповещения=Новый ОписаниеОповещения(""ВыполнитьАлгоритм_ОбработчикОповещения"", ЭтотОбъект);
	|ПоказатьВводДаты(ОписаниеОповещения,, ""Введите дату дакумента"");
	|";
	
	стрАлгоритм_НаСервере="
	|Сообщить(""Код выполнился на сервере"");
	|";

	стрАлгоритм_НаСервереБезКонтекста="
	|Сообщить(""Код выполнился на сервере без контекста"");
	|";

	СтруктураАлгоритмаВыполнения=Новый Структура;
	СтруктураАлгоритмаВыполнения.Вставить("НаКлиенте", стрАлгоритм_НаКлиенте);
	СтруктураАлгоритмаВыполнения.Вставить("НаСервере", стрАлгоритм_НаСервере);
	СтруктураАлгоритмаВыполнения.Вставить("НаСервереБезКонтекста", стрАлгоритм_НаСервереБезКонтекста);

	//Описываем алгоритм оповещения (и место выполнения)
	стрАлгоритм_НаКлиенте="
	|Сообщить(""Код выполнился на клиенте (оповещение)"");
	|";
	
	стрАлгоритм_НаСервере="
	|Сообщить(""Код выполнился на сервере (оповещение)"");
	|";
	
	стрАлгоритм_НаСервереБезКонтекста="
	|Сообщить(""Код выполнился на сервере без контекста (оповещения)"");
	|";

	СтруктураАлгоритмаОповещения=Новый Структура;
	СтруктураАлгоритмаОповещения.Вставить("НаКлиенте", стрАлгоритм_НаКлиенте);
	СтруктураАлгоритмаОповещения.Вставить("НаСервере", стрАлгоритм_НаСервере);
	СтруктураАлгоритмаОповещения.Вставить("НаСервереБезКонтекста", стрАлгоритм_НаСервереБезКонтекста);

	//Формируем структуру команды
	СтруктураКоманды=Новый Структура;
	СтруктураКоманды.Вставить("АлгоритмВыполнения", СтруктураАлгоритмаВыполнения);
	СтруктураКоманды.Вставить("АлгоритмОповещения", СтруктураАлгоритмаОповещения);
	СтруктураКоманды.Вставить("Имя", "МояСуперКнопка");

	//Создаем (если еще не создана) и формируем структуру произвольных команд
	Если НЕ ТипЗнч(СтруктураПараметров.Форма.ПроизвольныеАлгоритмы)=Тип("Структура") Тогда
		СтруктураПараметров.Форма.ПроизвольныеАлгоритмы=Новый Структура;
	КонецЕсли;
	ПроизвольныеАлгоритмы=СтруктураПараметров.Форма.ПроизвольныеАлгоритмы;
	ПроизвольныеАлгоритмы.Вставить(СтруктураКоманды.Имя, СтруктураКоманды);	

	//Создаем команду
	Команда=СтруктураПараметров.Форма.Команды.Добавить(СтруктураКоманды.Имя);
	Команда.Действие="ВыполнитьАлгоритмКлиент";

	//Создаем кнопку на форме и связываем её с командой
	Кнопка=СтруктураПараметров.Форма.Элементы.Добавить(СтруктураКоманды.Имя, Тип("КнопкаФормы"), СтруктураПараметров.Форма.Элементы.СтраницаТовары);
	Кнопка.ИмяКоманды=СтруктураКоманды.Имя;
	Кнопка.Вид=ВидКнопкиФормы.ОбычнаяКнопка;
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="СторнируемыйДокумент" Тогда
		тпИнфо_Заполнить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Очистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="СторнируемыйДокумент" Тогда
		тпИнфо.Очистить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличноего поля "тпИнфо"

&НаСервере
Процедура тпИнфо_Заполнить()
	Если Не ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда Возврат; КонецЕсли;
	мдОбъект=Объект.СторнируемыйДокумент.Метаданные(); тпИнфо.Очистить();
	
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", "Организация");
	СтруктураРеквизитов.Вставить("Подразделение", "Подразделение");
	СтруктураРеквизитов.Вставить("Контрагент", "Контрагент");
	СтруктураРеквизитов.Вставить("Ответственный", "Куратор");
	СтруктураРеквизитов.Вставить("Комментарий", "Комментарий");
	СтруктураРеквизитов.Вставить("СуммаДокумента", "Сумма всего");
	СтруктураРеквизитов.Вставить("СуммаНДС", "Сумма НДС");
	
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		стрАтрибут=СтрокаКоллекции.Ключ;
		Если УправлениеМетаданными.ЕстьРеквизит(стрАтрибут, мдОбъект) Тогда
			НоваяСтрока=тпИнфо.Добавить();
			НоваяСтрока.Представление=СтрокаКоллекции.Значение;
			НоваяСтрока.Значение=Объект.СторнируемыйДокумент[стрАтрибут];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	Если НЕ ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		МетаСсылка=?(Объект.МетаСсылка.Пустая(), Параметры.ЗначенияЗаполнения.МетаСсылка, Объект.МетаСсылка);
		стрПолноеИмя=МетаконфигураторСервер.ПолноеИмяОбъектаПоСсылке(МетаСсылка);
		стрПолноеИмя=СтрЗаменить(стрПолноеИмя, "Документ.", "");
		СторнируемыйДокумент=Документы[стрПолноеИмя].ПустаяСсылка()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	тпИнфо_Заполнить();
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ТипЗнч(Объект.СторнируемыйДокумент)=Тип("СправочникСсылка.ФантомныеСсылки") Тогда
		СторнируемыйДокумент=УправлениеКонфигурациейСервер.ЗначениеФантомнойСсылки(Объект.СторнируемыйДокумент);
	КонецЕсли;
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.СторнируемыйДокумент=СторнируемыйДокумент;
	Если НЕ ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		Объект.СторнируемыйДокумент=УправлениеКонфигурациейСервер.ФантомнаяСсылка(СторнируемыйДокумент);
	КонецЕсли;
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.МетаСсылка=Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		ТекущийОбъект.МетаСсылка=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(СторнируемыйДокумент.Метаданные().ПолноеИмя());
	КонецЕсли;
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры