Функция ПолучитьСписокСтатусовОтправителя() Экспорт
	Список=Новый СписокЗначений;
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - сборщик налогов и сборов");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
	Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) – частный нотариус");
	Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
	Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
	Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
	Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
	Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление налогов, сборов и иных платежей в бюджетную систему Российской Федерации, уплачиваемых физическими лицами без открытия банковского счета");

	Возврат Список;
КонецФункции

Функция ПолучитьСписокОснованийПлатежа() Экспорт
	Список=Новый СписокЗначений;
	Список.Добавить("ТП", "ТП - платежи текущего года");
	Список.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	Список.Добавить("БФ", "БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	Список.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	Список.Добавить("РС", "РС - погашение рассроченной задолженности");
	Список.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	Список.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	Список.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	Список.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	Список.Добавить("АП", "АП - погашение задолженности по акту проверки");
	Список.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	Список.Добавить("0" , "0 - Невозможно указать конкретное значение показателя");

	Возврат Список;
КонецФункции

Функция ПолучитьСписокПоказателейТипа() Экспорт
	Список=Новый СписокЗначений;
	Если Дата>Дата('2014-02-04') Тогда
		Список.Добавить("0", "0 - все, кроме пени и процентов");
		Список.Добавить("ПЕ", "ПЕ - уплата пени");
		Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	Иначе	
		Список.Добавить("НС", "НС - уплата налога или сбора");
		Список.Добавить("ПЛ", "ПЛ - уплата платежа");
		Список.Добавить("ГП", "ГП - уплата пошлины");
		Список.Добавить("ВЗ", "ВЗ - уплата взноса");
		Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
		Список.Добавить("ПЕ", "ПЕ - уплата пени");
		Список.Добавить("ПЦ", "ПЦ - уплата процентов");
		Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
		Список.Добавить("АШ", "АШ - административные штрафы");
		Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
		Список.Добавить("0", "0 - Конкретное значение указать невозможно");
	КонецЕсли;
	Возврат Список;
КонецФункции
 
//////////////////////////////////////////////////////////////////////////////////
//

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;

КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаДокументаУСН=РасшифровкаПлатежа.Итог("СуммаУСН");

	Для каждого СтрокаКоллекции Из РасшифровкаПлатежа Цикл
		Если СтрокаКоллекции.Подразделение.Пустая() Тогда
			СтрокаКоллекции.Подразделение=Подразделение;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	// По регистру "Денежные средства"
	ДвижениеПоРегистру_ДенежныеСредства(СтруктураШД, СтруктураТД, Отказ);

	// По регистру "Движения денежных средств"
	ДвижениеПоРегистру_ДвиженияДенежныхСредств(СтруктураШД, СтруктураТД, Отказ);

	//Двидения по регистру "Взаиморасчеты с контрагентами"
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
	
	//Двидения по регистру "Взаиморасчеты с подотчетными лицами"
	ДвижениеПоРегистру_ВзаиморасчетыСПодотчетнымиЛицами(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистрам "КУДиР"
	ДвижениеПоРегистру_КнигаУчетаДоходовИРасходов(СтруктураШД, СтруктураТД, Отказ);
	
	ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистрам "Учет НДС"
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_ДвиженияДенежныхСредств(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ Оплачено Тогда Возврат; КонецЕсли;
	
	тзДвижения=Движения.ДвиженияДенежныхСредств.ВыгрузитьКолонки();
	
	Для каждого СтрокаКоллекции Из СтруктураТД.Взаиморасчеты Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Расход;
		НоваяСтрока.БанковскийСчетКасса=СчетОрганизации;
		НоваяСтрока.Контрагент=?(НЕ ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет,Контрагент,Организация);
		НоваяСтрока.Сумма=СтрокаКоллекции.СуммаБух;
		НоваяСтрока.СуммаУпр=СтрокаКоллекции.СуммаВал;
		Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Сумма=СтрокаКоллекции.СуммаБух;
			НоваяСтрока.СуммаУпр=СтрокаКоллекции.СуммаВал;
			НоваяСтрока.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход;
			НоваяСтрока.БанковскийСчетКасса=СчетКонтрагента;
			НоваяСтрока.Контрагент=Организация;
		КонецЕсли;		
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "ДокументДвижения");
	тзДвижения.ЗаполнитьЗначения(Подразделение, "ЦФО");
	тзДвижения.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Безналичные, "ВидДенежныхСредств");

	Движения.ДвиженияДенежныхСредств.Загрузить(тзДвижения);
КонецПроцедуры	

Процедура ДвижениеПоРегистру_ДенежныеСредства(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ Оплачено Тогда Возврат; КонецЕсли;
	
	тзДвижения=Движения.ДенежныеСредства.ВыгрузитьКолонки();
	
	НоваяСтрока=тзДвижения.Добавить();
	НоваяСтрока.БанковскийСчетКасса=СчетОрганизации;
	НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;

	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		НоваяСтрока=тзДвижения.Добавить();
		НоваяСтрока.БанковскийСчетКасса=СчетКонтрагента;
		НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
	КонецЕсли;

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(Перечисления.ВидыДенежныхСредств.Безналичные, "ВидДенежныхСредств");
	тзДвижения.ЗаполнитьЗначения(СтруктураТД.РасшифровкаПлатежа.Итог("СуммаПлатежа"), "Сумма");
	тзДвижения.ЗаполнитьЗначения(СтруктураТД.РасшифровкаПлатежа.Итог("СуммаВал"), "СуммаУпр");

	Движения.ДенежныеСредства.Загрузить(тзДвижения);
КонецПроцедуры	

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;

	Если Оплачено И ДенежныеСредстваСервер.ЕстьВзаиморасчеты(ВидОперации) Тогда
		Движения.ВзаиморасчетыСКонтрагентами.Загрузить(СтруктураТД.Взаиморасчеты);
	КонецЕсли;
КонецПроцедуры	

Процедура ДвижениеПоРегистру_ВзаиморасчетыСПодотчетнымиЛицами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ Оплачено Тогда Возврат; КонецЕсли;
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСПодотчетнымиЛицами") Тогда Возврат; КонецЕсли;

	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВыдачаДенежныхСредствПодотчетнику Тогда
		тзДвижения=Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыгрузитьКолонки();
		Для каждого СтрокаКоллекции Из СтруктураТД.РасшифровкаПлатежа Цикл
			НоваяСтрока=тзДвижения.Добавить();
			НоваяСтрока.ФизЛицо=?(СтрокаКоллекции.Сотрудник.Пустая(), Контрагент, СтрокаКоллекции.Сотрудник);
			НоваяСтрока.Сумма=СтрокаКоллекции.СуммаПлатежа;
		КонецЦикла;
		тзДвижения.ЗаполнитьЗначения(Дата, "Период");
		тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
		тзДвижения.ЗаполнитьЗначения(Организация, "Организация");

		Движения.ВзаиморасчетыСПодотчетнымиЛицами.Загрузить(тзДвижения);
	КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_КнигаУчетаДоходовИРасходов(СтруктураШД, СтруктураТД, Отказ);
	Если НЕ Оплачено Тогда Возврат; КонецЕсли;
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "КнигаУчетаДоходовИРасходов") Тогда Возврат; КонецЕсли;

	ПараметрыУчетнойПолитики(Истина);
	Если ВидОперации<>Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда 
		тзУСН=СтруктураТД.РасшифровкаПлатежа.Скопировать();
		Для Каждого СтрокаКолекции ИЗ тзУСН Цикл
			СтрокаКолекции.СуммаПлатежа=СтрокаКолекции.СуммаПлатежа;
			СтрокаКолекции.СуммаУСН=0;
			СтрокаКолекции.СуммаБух=СтрокаКолекции.СуммаБух;
		КонецЦикла;	
		НалоговыйУчет.ДвиженияДенежныхСредствКУДиР(Ссылка, ДополнительныеСвойства, СтруктураШД, тзУСН, "Расходы");	
	Иначе
		тзУСН=СтруктураТД.РасшифровкаПлатежа.Скопировать();
		Для Каждого СтрокаКолекции ИЗ тзУСН Цикл
			СтрокаКолекции.СуммаПлатежа=-СтрокаКолекции.СуммаПлатежа;
			СтрокаКолекции.СуммаУСН=-СтрокаКолекции.СуммаУСН;
			СтрокаКолекции.СуммаБух=-СтрокаКолекции.СуммаБух;
		КонецЦикла;	
		НалоговыйУчет.ДвиженияДенежныхСредствКУДиР(Ссылка, ДополнительныеСвойства, СтруктураШД, тзУСН, "Доходы");	
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ)
	Если Не Оплачено Тогда Возврат; КонецЕсли; 
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "РасходыПриУСН") Тогда Возврат; КонецЕсли;

	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.ОбъектНалогообложенияУСН=Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда	Возврат; КонецЕсли;	
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда Возврат; КонецЕсли;
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда Возврат; КонецЕсли;
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВыдачаДенежныхСредствПодотчетнику Тогда Возврат; КонецЕсли;
	
	ВключитьДвиженияУСН=Ложь;
	Если ДополнительныеСвойства.Свойство("ВключитьДвиженияУСН") Тогда
		ВключитьДвиженияУСН=ДополнительныеСвойства.ВключитьДвиженияУСН;
	КонецЕсли;

	СистемаНалогообложения=УчетнаяПолитика.СистемаНалогообложения;
	Если СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная Или СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная_ЕНВД ИЛИ ВключитьДвиженияУСН Тогда
		тзДвижения=Движения.РасходыПриУСН.ВыгрузитьКолонки();
		тзДанные=СтруктураТД.РасшифровкаПлатежа.Скопировать();
		тзДанные.Свернуть("ДоговорКонтрагента,ТОП,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","СуммаПлатежа,СуммаУСН");
		Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
			НоваяСтрока.ТОП=СтрокаКоллекции.ТОП;
			Если СтрокаКоллекции.СуммаПлатежа=СтрокаКоллекции.СуммаУСН Тогда
				НоваяСтрока.Сумма=СтрокаКоллекции.СуммаПлатежа;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.КупленоОплаченоПоставщику;
			ИначеЕсли СтрокаКоллекции.СуммаУСН=0 Тогда
				НоваяСтрока.Сумма=СтрокаКоллекции.СуммаПлатежа;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.ПредоплатаПоставщику;
			ИначеЕсли СтрокаКоллекции.СуммаУСН<СтрокаКоллекции.СуммаПлатежа Тогда
				НоваяСтрока.Сумма=СтрокаКоллекции.СуммаПлатежа-СтрокаКоллекции.СуммаУСН;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.ПредоплатаПоставщику;
				
				НоваяСтрока=тзДвижения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
				НоваяСтрока.ТОП=СтрокаКоллекции.ТОП;
				НоваяСтрока.Сумма=СтрокаКоллекции.СуммаУСН;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.КупленоОплаченоПоставщику;
			КонецЕсли;
		КонецЦикла;
		тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения.ЗаполнитьЗначения(ДатаОплаты, "Период");
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
   		тзДвижения.ЗаполнитьЗначения(Ссылка, "РасчетныйДокумент");
		
		Движения.РасходыПриУСН.Загрузить(тзДвижения);
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ)
	Если Оплачено И ДенежныеСредстваСервер.ЕстьВзаиморасчеты(ВидОперации) Тогда
		УчетНДС.ДвижениеДенежныхСредств(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетДенежныхСведств(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ДенежныеСредства(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_ДвиженияДенежныхСредств(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	ВалютаДокумента  = ДополнительныеСвойства.ВалютаБухУчета;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();		
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтавкаНДС=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");

		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		СчетОрганизации=?(ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница), Основание.СтруктурнаяЕдиница, Организация.ОсновнойБанковскийСчет);
		ВалютаДокумента=?(СчетОрганизации.Пустая(), ДополнительныеСвойства.ВалютаБухУчета, СчетОрганизации.ВалютаДенежныхСредств);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;

		Контрагент=Основание.Контрагент;
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтавкаНДС=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");

		СчетОрганизации  = Организация.ОсновнойБанковскийСчет;

		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) И Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=СчетОрганизации.ВалютаДенежныхСредств Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		ВалютаДокумента=?(СчетОрганизации.Пустая(), ДополнительныеСвойства.ВалютаБухУчета, СчетОрганизации.ВалютаДенежныхСредств);
	КонецЕсли;
	
	// Если основание - отчет комитенту, то надо вычесть вознаграждение
	ОснованиеСуммаДокумента = Основание.СуммаДокумента;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда
		ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа = ОснованиеСуммаДокумента;
	ДенежныеСредстваСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);

	Если СтрокаПлатеж.СуммаНДС=0 Тогда
		СтрокаПлатеж.СуммаНДС=ЦенообразованиеСервер.ПолучитьНДСДокумента(Основание);
	КонецЕсли; //***

	ДокументОснование  = Основание.Ссылка;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;
	СтруктураТД.Вставить("Взаиморасчеты", ВзаиморасчетыСервер.СформироватьТаблицуОплаты(СтруктураШД, СтруктураТД, ВидДвиженияНакопления.Приход, Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки(), Отказ, ДополнительныеСвойства.Заголовок));

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Проверка номера документа
	НомерПечать=ОбщегоНазначенияСервер.НомерНаПечать(ЭтотОбъект);
	Если Прав(НомерПечать, 3) = "000" Тогда
		ТекстОшибки="Номер платежного документа не может оканчиваться на ""000""!" + Символы.ПС
		+ "	(Положение Банка России ""О безналичных расчетах в Российской Федерации"""  + Символы.ПС
		+ "	от 3 октября 2002 г. No. 2-П в ред. Указания ЦБ РФ от 03.03.2003 No. 1256-У)";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		ПроверяемыеРеквизиты.Добавить("СчетКонтрагента");
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
	Иначе
		ПроверяемыеРеквизиты.Добавить("Контрагент");
	КонецЕсли;

	Если Оплачено Тогда
		ПроверяемыеРеквизиты.Добавить("СчетОрганизации");
		ПроверяемыеРеквизиты.Добавить("СуммаДокумента");
		ПроверяемыеРеквизиты.Добавить("ДатаОплаты");
		Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
			ПроверяемыеРеквизиты.Добавить("СчетКонтрагента");
		КонецЕсли;		
	КонецЕсли;
	
	Если ДенежныеСредстваСервер.ЕстьВзаиморасчеты(ВидОперации) Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;
	
	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Формируем структуру шапки документа "СтруктураШД"
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);
	СтруктураШД.Вставить("ДатаОплаты", ?(Оплачено,ДенежныеСредстваСервер.ПолучитьДатуДвижений(Дата, ДатаОплаты, Организация),Дата));	
	СтруктураШД.Вставить("ДатаДвижений", СтруктураШД.ДатаОплаты);
	СтруктураШД.Вставить("РасчетыВозврат", ДенежныеСредстваСервер.НаправленияДвижения(ВидОперации));
	СтруктураШД.Вставить("КоэффициентСторно", ?(СтруктураШД.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат,-1,1));

	//Формируем структуру таблиц документа "СтруктураТД"
	тзРасшифровкаПлатежа=ДенежныеСредстваСервер.СформироватьТаблицуПлатежей(ЭтотОбъект, Отказ, Заголовок);
	ДвиженияПоСтатьям=тзРасшифровкаПлатежа.Скопировать();
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств", "СуммаПлатежа,СуммаВал");

	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("РасшифровкаПлатежа", тзРасшифровкаПлатежа);
	СтруктураТД.Вставить("ДвиженияПоЗаявкам", тзРасшифровкаПлатежа.Скопировать());
	СтруктураТД.Вставить("ДвиженияПоСтатьям",ДвиженияПоСтатьям);
    СтруктураТД.Вставить("ОплачиваемыеДокументы", ОплачиваемыеДокументы.Выгрузить());
		
	ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);