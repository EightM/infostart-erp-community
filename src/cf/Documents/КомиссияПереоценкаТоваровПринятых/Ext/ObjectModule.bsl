Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	СуммаДокумента=Товары.Итог("Сумма");	
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И СтрокаТабличнойЧасти.КоличествоМест=0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

// Процедура выполняет заполнение табличной части принятыми на реализацию,
// но еще нереализованными товарами. Если передан документ основание то
//  заполнение производится по документу основанию, иначе по всем.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументОснование=Неопределено) Экспорт
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяДокумента = "ПоступлениеТоваровУслуг";
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.СерияНоменклатуры,
	|	Остатки.ДокументОприходования,
	|	МАКСИМУМ(ВЫБОР КОГДА Остатки.СтоимостьОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		Остатки.СтоимостьОстаток
	|	КОНЕЦ)                                       КАК СтоимостьОстаток,
	|	МАКСИМУМ(ВЫБОР КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		Остатки.КоличествоОстаток
	|	КОНЕЦ)                                       КАК КоличествоОстаток,
	|	МАКСИМУМ(ВЫБОР КОГДА Полученные.СуммаВзаиморасчетовОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		Полученные.СуммаВзаиморасчетовОстаток
	|	КОНЕЦ)                                       КАК СуммаВзаиморасчетовОстаток,
	|	МАКСИМУМ(ВЫБОР КОГДА Полученные.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		Полученные.КоличествоОстаток
	|	КОНЕЦ)                                       КАК КоличествоПолученных,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, 
	|			Склад          = &Склад 
	|			И СтатусПартии = &СтатусПартии
	|" + ?(ЗначениеЗаполнено(ДокументОснование), "
	|			И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Документ." + ИмяДокумента + ".Товары.Номенклатура
	|			                ИЗ Документ." + ИмяДокумента + ".Товары 
	|			                ГДЕ Документ." + ИмяДокумента + ".Товары.Ссылка = &ДокументОснование)
	|			И ДокументОприходования = &ДокументОснование
	|", "       И ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|			                                        ) КАК Остатки
	| "+ ?(НЕ ЗначениеЗаполнено(ДокументОснование), "" ,"	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + ".Товары КАК ПоступлениеТоваровУслугТовары
	|	ПО Остатки.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура И ПоступлениеТоваровУслугТовары.Ссылка = Остатки.ДокументОприходования" ) + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПолученные.Остатки(, 
	|			ДоговорКонтрагента = &ДоговорКонтрагента 
	|			И Сделка           = &Сделка
	|" + ?(ЗначениеЗаполнено(ДокументОснование), "
	|			И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Документ." + ИмяДокумента + ".Товары.Номенклатура
	|			                ИЗ Документ." + ИмяДокумента + ".Товары 
	|			                ГДЕ Документ." + ИмяДокумента + ".Товары.Ссылка = &ДокументОснование)", "") + ") КАК Полученные
	|	ПО Остатки.Номенклатура = Полученные.Номенклатура
	|	   И Остатки.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	   И Остатки.СерияНоменклатуры = Полученные.СерияНоменклатуры
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|	//И Полученные.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Остатки.СерияНоменклатуры,
	|	Остатки.ДокументОприходования
	|";	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = Выборка.КоличествоОстаток;

		Если Выборка.КоличествоПолученных = 0 Тогда
			СтрокаТабличнойЧасти.СуммаСтарая = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаСтарая = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(
			                                   Выборка.СуммаВзаиморасчетовОстаток * Выборка.КоличествоОстаток / Выборка.КоличествоПолученных,
			                                   ДоговорКонтрагента.ВалютаВзаиморасчетов,
			                                   ВалютаДокумента,
			                                   КурсВзаиморасчетов,
			                                   ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета),
			                                   КратностьВзаиморасчетов,
			                                   ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета));
		КонецЕсли;

		СтрокаТабличнойЧасти.ЦенаСтарая = СтрокаТабличнойЧасти.СуммаСтарая / СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Сумма      = СтрокаТабличнойЧасти.СуммаСтарая;
		СтрокаТабличнойЧасти.Цена       = СтрокаТабличнойЧасти.ЦенаСтарая;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка таблиц для проведения

Функция КоэффициентПересчета(СтруктураШД)
	Если Не СтруктураШД.ВалютаДокумента=СтруктураШД.ВалютаРегламентированногоУчета Тогда
		Если Число(СтруктураШД.КурсДокумента)=0 Или Число(СтруктураШД.КратностьДокумента)=0 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат СтруктураШД.КурсДокумента/СтруктураШД.КратностьДокумента;		
	КонецЕсли;
	Возврат 1; 
КонецФункции
 
Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти)
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураРеквизитов.Вставить("Подразделение", Подразделение);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
		тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
	КонецЦикла;
КонецПроцедуры
 
Функция СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок)
	ОписаниеТипаЧисло=ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);

	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("СуммаВзаиморасчетов", ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти"); //НомерСтроки
	
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент /СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		
		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;

		СтрокаКоллекции.Сумма=Окр(СтрокаКоллекции.Сумма*КоэффициентПересчета, 2);
		СтрокаКоллекции.СуммаВзаиморасчетов=Окр(СтрокаКоллекции.СуммаСтарая*КоэффициентПересчета, 2);
	КонецЦикла;
	
	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");
	
	Возврат тзДанные;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ТоварыПолученные(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыПолученные(СтруктураШД, СтруктураТД, Отказ)
	ТаблицаПоТоварам=СтруктураТД.Товары;
	
	НаборДвижений = Движения.ТоварыПолученные;
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	
	Если ЗначениеЗаполнено(СтруктураШД.Сделка) Тогда
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", СтруктураШД.Сделка);
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	// Теперь в качестве суммы взаиморасчетов должна выступать колонка "Сумма"
	ТаблицаПоТоварам.Колонки.Удалить(ТаблицаПоТоварам.Колонки.Найти("СуммаВзаиморасчетов"));
	ТаблицаПоТоварам.Колонки.Сумма.Имя = "СуммаВзаиморасчетов";
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	
	Если ЗначениеЗаполнено(СтруктураШД.Сделка) Тогда
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", СтруктураШД.Сделка);
	КонецЕсли;

	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
КонецПроцедуры

Процедура ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ)
	НаборДвижений = Движения.СписанныеТовары;

	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	ТаблицаПоТоварам=СтруктураТД.Товары;
	ТаблицаПоТоварам.Колонки.СуммаВзаиморасчетов.Имя = "СтоимостьПоступление";

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПереоценкаПринятыхНаКомиссию,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Движения.СписанныеТовары.ВыполнитьДвижения();

	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;
	СтруктураШД.Вставить("Отказ", Отказ);
	СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Основание)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Сделка=Основание.Сделка;
		Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Если Основание.Проведен Тогда ЗаполнитьТовары(Основание); КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);
	
	//Проверяем реквизиты шапки
	ВзаиморасчетыСервер.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШД.ДоговорОрганизация, Отказ, Заголовок);
	
	//Формирование значений реквизитов табличных частей
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Товары", СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));
	
	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Покупка");