Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ АВТОЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА

// Вызавается из процедуры ЗаполнитьСтрокиРаспределенияОплат
//
Функция ПолучитьРасшифровкуПлатежа(Документ, РасшифровкаПлатежаПоДокументам)
	Если РасшифровкаПлатежаПоДокументам[Документ] = Неопределено Тогда
		СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ);

		НаборЗаписей=РегистрыНакопления.ВзаиморасчетыСКонтрагентами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		НаборЗаписей.Прочитать();

		Расшифровка=НаборЗаписей.Выгрузить();
		Расшифровка.Колонки.СуммаБух.Имя="СуммаВзаиморасчетов";
		Расшифровка.Индексы.Добавить("ДоговорКонтрагента");

		РасшифровкаПлатежаПоДокументам.Вставить(Документ, Расшифровка);
	КонецЕсли; 
	
	Возврат РасшифровкаПлатежаПоДокументам[Документ];
КонецФункции

// Вызавается из процедуры ЗаполнитьСтрокиРаспределенияОплат
//
Функция ПолучитьДокументыРасчетовСКонтрагентом(Документ, ДокументыРасчетовСКонтрагентомПоДокументам)
	Если ДокументыРасчетовСКонтрагентомПоДокументам[Документ] = Неопределено Тогда
		МетаданныеДокумента = Документ.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено Тогда
			Расшифровка = Документ.ДокументыРасчетовСКонтрагентом.Выгрузить();
		Иначе
			Расшифровка = Ложь; 
		КонецЕсли;
		ДокументыРасчетовСКонтрагентомПоДокументам.Вставить(Документ, Расшифровка);
	КонецЕсли; 
	
	Возврат ДокументыРасчетовСКонтрагентомПоДокументам[Документ];
КонецФункции
 
// Процедура вызывается по кнопке "Заполнить" в форме диалога документа.
// В процедуре реализуется алгоритм автоматического заполнения строк табличной части документа.
//
Процедура ЗаполнитьСтрокиРаспределенияОплат() Экспорт 
	
	ТаблицаРезультатов = Состав.ВыгрузитьКолонки();
	
	НераспределенныеРасчеты = ПолучитьИнформациюПоНепогашеннойЗадолженностиИНераспределеннымОплатам();
	
	Если НераспределенныеРасчеты.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружены нераспределенные расчеты.
		Состав.Очистить(); Возврат;
	КонецЕсли;
	
	НепогашеннаяЗадолженность=новый ТаблицаЗначений();
	НепогашеннаяЗадолженность.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	НепогашеннаяЗадолженность.Колонки.Добавить("Документ", 		Документы.ТипВсеСсылки());
	НепогашеннаяЗадолженность.Колонки.Добавить("Сумма",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	НепогашеннаяЗадолженность.Индексы.Добавить("Документ");
	
	НераспределенныеОплаты=НепогашеннаяЗадолженность.Скопировать();
	
	// Временное хранение расшифровок платежа по документа оплаты (при ведении расчетов по документам)
	РасшифровкаПлатежаПоДокументам = новый Соответствие;
	ДокументыРасчетовСКонтрагентомПоДокументам = новый Соответствие;
	
	Для каждого РасчетыПоТипуДоговору Из НераспределенныеРасчеты.Строки Цикл
		Для каждого РасчетыПоДоговору Из РасчетыПоТипуДоговору.Строки Цикл
			КолонкаЗачета="Сумма"; //КолонкаРаспределения="Сумма";
			
			
			Если РасчетыПоДоговору[КолонкаЗачета] = 0 или РасчетыПоДоговору["Оплата"+КолонкаЗачета] = 0 Тогда
				Продолжить; // Не обнаружена непогашенная задолженность или нераспределенная оплата
			КонецЕсли; 
			НепогашеннаяЗадолженность.Очистить();
			НераспределенныеОплаты.Очистить();
			
			ПроводитьОтборПоДокументуРасчетов = Ложь; ///РасчетыПоДоговору.ВестиПоДокументамРасчетовСКонтрагентом;
			
			Для каждого СтрокаРасчетов  Из РасчетыПоДоговору.Строки Цикл
				Если СтрокаРасчетов.ЭтоОплата Тогда
					Если не НепогашеннаяЗадолженность.Итог(КолонкаЗачета) = 0 Тогда
						
						РасшифровкаПлатежа = Ложь;
						Если ПроводитьОтборПоДокументуРасчетов Тогда
							РасшифровкаПлатежа = ПолучитьРасшифровкуПлатежа(СтрокаРасчетов.Документ, РасшифровкаПлатежаПоДокументам);
						КонецЕсли;
						Если не РасшифровкаПлатежа = Ложь Тогда
							СтруктураОтбораРасшифровки = Новый Структура("ДоговорКонтрагента",СтрокаРасчетов.ДоговорКонтрагента);

							СтрокиПоДоговору = РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбораРасшифровки);
							Для каждого СтрокаПоДоговору Из СтрокиПоДоговору Цикл
								Если СтрокаПоДоговору.СуммаВзаиморасчетов = 0  Тогда Продолжить; КонецЕсли; 
								Если НЕ ЗначениеЗаполнено(СтрокаПоДоговору.ДокументРасчетов) Тогда Продолжить; КонецЕсли; 
								
								СтруктураОтбораЗадолженности = Новый структура("Документ",СтрокаПоДоговору.ДокументРасчетов);
								
								СтрокиЗадолженностиПоОтбору = НепогашеннаяЗадолженность.НайтиСтроки(СтруктураОтбораЗадолженности);
								Для каждого СтрокаЗадолженности Из СтрокиЗадолженностиПоОтбору Цикл
									//СуммаЗачета = Макс(0, Мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаЗадолженности.ВалютнаяСумма,СтрокаРасчетов.ОплатаВалютнаяСумма));
									СуммаЗачета = Макс(0, Мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаЗадолженности.Сумма, СтрокаРасчетов.ОплатаСумма));
									Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
									
									СтрокаРаспределения=ТаблицаРезультатов.Добавить();
									СтрокаРаспределения.Поставщик			= СтрокаРасчетов.Поставщик;
									СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
									СтрокаРаспределения.ТипДоговораКонтрагента	= СтрокаРасчетов.ТипДоговораКонтрагента;
									СтрокаРаспределения.СчетФактура			= СтрокаЗадолженности.Документ;
									СтрокаРаспределения.ЗачетАванса			= Ложь;
									СтрокаРаспределения.ДатаОплаты			= СтрокаРасчетов.ДатаДокумента;
									СтрокаРаспределения.ДокументОплаты		= СтрокаРасчетов.Документ;
									СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
									СтрокаРасчетов["Оплата"+КолонкаЗачета]	= СтрокаРасчетов["Оплата"+КолонкаЗачета] - СуммаЗачета;
									СтрокаЗадолженности[КолонкаЗачета]		= СтрокаЗадолженности[КолонкаЗачета] - СуммаЗачета;
									
									СтрокаПоДоговору.СуммаВзаиморасчетов = СтрокаПоДоговору.СуммаВзаиморасчетов - СуммаЗачета;
								КонецЦикла; 
							КонецЦикла; 
							
						Иначе
							Для каждого СтрокаЗадолженности Из НепогашеннаяЗадолженность Цикл
								Если СтрокаЗадолженности[КолонкаЗачета]=0 Тогда Продолжить; КонецЕсли;
								
								СуммаЗачета = Макс(0,мин(СтрокаЗадолженности[КолонкаЗачета], СтрокаРасчетов["Оплата"+КолонкаЗачета]));
								Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
								
								СтрокаРаспределения = ТаблицаРезультатов.Добавить();
								СтрокаРаспределения.Поставщик			= СтрокаРасчетов.Поставщик;
								СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
								СтрокаРаспределения.ТипДоговораКонтрагента	= СтрокаРасчетов.ТипДоговораКонтрагента;
								СтрокаРаспределения.СчетФактура			= СтрокаЗадолженности.Документ;
								СтрокаРаспределения.ЗачетАванса			= Ложь;
								СтрокаРаспределения.ДатаОплаты			= СтрокаРасчетов.ДатаДокумента;
								СтрокаРаспределения.ДокументОплаты		= СтрокаРасчетов.Документ;
								СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
								СтрокаРасчетов["Оплата"+КолонкаЗачета]	= СтрокаРасчетов["Оплата"+КолонкаЗачета] - СуммаЗачета;
								СтрокаЗадолженности[КолонкаЗачета]		= СтрокаЗадолженности[КолонкаЗачета] - СуммаЗачета;
							КонецЦикла; 
						КонецЕсли;
					КонецЕсли; 
					Если не СтрокаРасчетов["Оплата"+КолонкаЗачета] = 0 Тогда
						НераспределеннаяСтрока = НераспределенныеОплаты.Добавить();
						НераспределеннаяСтрока.ДатаДокумента	= СтрокаРасчетов.ДатаДокумента;
						НераспределеннаяСтрока.Документ			= СтрокаРасчетов.Документ;
						НераспределеннаяСтрока.Сумма			= СтрокаРасчетов.ОплатаСумма;
					КонецЕсли; 
					
				Иначе	
					Если не НераспределенныеОплаты.Итог(КолонкаЗачета)=0 Тогда
						
						РасшифровкаПлатежа = Ложь;
						Если ПроводитьОтборПоДокументуРасчетов Тогда
							РасшифровкаПлатежа = ПолучитьДокументыРасчетовСКонтрагентом(СтрокаРасчетов.Документ, ДокументыРасчетовСКонтрагентомПоДокументам);
						КонецЕсли;
						Если не РасшифровкаПлатежа = Ложь Тогда
							СтрокиПоДоговору = РасшифровкаПлатежа;	
							
							Для каждого СтрокаПоДоговору Из СтрокиПоДоговору Цикл
								Если СтрокаПоДоговору.СуммаВзаиморасчетов = 0  Тогда Продолжить; КонецЕсли; 
								
								СтруктураОтбораОплат = новый структура("Документ",СтрокаПоДоговору.ДокументРасчетовСКонтрагентом);

								СтрокиОплатПоОтбору = НераспределенныеОплаты.НайтиСтроки(СтруктураОтбораОплат);
								Для каждого СтрокаОплаты Из СтрокиОплатПоОтбору Цикл
									Если СтрокаОплаты[КолонкаЗачета] = 0 Тогда Продолжить; КонецЕсли; 
									
									//СуммаЗачета = Макс(0,мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаОплаты.ВалютнаяСумма,СтрокаРасчетов.ВалютнаяСумма));
									СуммаЗачета = Макс(0,мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаОплаты.Сумма,СтрокаРасчетов.Сумма));
									Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
									
									СтрокаРаспределения = ТаблицаРезультатов.Добавить();
									СтрокаРаспределения.Поставщик			= СтрокаРасчетов.Поставщик;
									СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
									СтрокаРаспределения.ТипДоговораКонтрагента	= СтрокаРасчетов.ТипДоговораКонтрагента;
									СтрокаРаспределения.СчетФактура			= СтрокаРасчетов.Документ;
									СтрокаРаспределения.ЗачетАванса			= Истина;
									СтрокаРаспределения.ДатаОплаты			= СтрокаОплаты.ДатаДокумента;
									СтрокаРаспределения.ДокументОплаты		= СтрокаОплаты.Документ;
									СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
									СтрокаРасчетов[КолонкаЗачета]			= СтрокаРасчетов[КолонкаЗачета] - СуммаЗачета;
									СтрокаОплаты[КолонкаЗачета]				= СтрокаОплаты[КолонкаЗачета] - СуммаЗачета;
									
									СтрокаПоДоговору.СуммаВзаиморасчетов = СтрокаПоДоговору.СуммаВзаиморасчетов - СуммаЗачета;
								КонецЦикла;
							КонецЦикла;
						Иначе
							Для каждого СтрокаОплаты Из НераспределенныеОплаты Цикл
								Если СтрокаОплаты[КолонкаЗачета]=0 Тогда Продолжить; КонецЕсли;
								
								СуммаЗачета = Макс(0,мин(СтрокаОплаты[КолонкаЗачета], СтрокаРасчетов[КолонкаЗачета]));
								Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
								
								СтрокаРаспределения = ТаблицаРезультатов.Добавить();
								СтрокаРаспределения.Поставщик			= СтрокаРасчетов.Поставщик;
								СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
								СтрокаРаспределения.ТипДоговораКонтрагента	= СтрокаРасчетов.ТипДоговораКонтрагента;
								СтрокаРаспределения.СчетФактура			= СтрокаРасчетов.Документ;
								СтрокаРаспределения.ЗачетАванса			= Истина;
								СтрокаРаспределения.ДатаОплаты			= СтрокаОплаты.ДатаДокумента;
								СтрокаРаспределения.ДокументОплаты		= СтрокаОплаты.Документ;
								СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
								СтрокаРасчетов[КолонкаЗачета]			= СтрокаРасчетов[КолонкаЗачета] - СуммаЗачета;
								СтрокаОплаты[КолонкаЗачета]				= СтрокаОплаты[КолонкаЗачета] - СуммаЗачета;
							КонецЦикла; 
						КонецЕсли;
					КонецЕсли; 
					
					Если не СтрокаРасчетов[КолонкаЗачета] = 0 Тогда
						НераспределеннаяСтрока = НепогашеннаяЗадолженность.Добавить();
						НераспределеннаяСтрока.ДатаДокумента = СтрокаРасчетов.ДатаДокумента;
						НераспределеннаяСтрока.Документ		 = СтрокаРасчетов.Документ;
						НераспределеннаяСтрока.Сумма		 = СтрокаРасчетов.Сумма;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла;
	
	Состав.Загрузить(ТаблицаРезультатов);
	
КонецПроцедуры

// Функция вызывается из процедуры "ЗаполнитьСтрокиРаспределенияОплат".
// Формирует таблицу непогашенной задолженности по органнизации по данным регистра "НДСРасчетыСПоставщиками".
// Возвращаемое значение:
//   ДеревоЗначений - Дерево непогашенной задолженности и нераспределенной оплаты в разрезе договоров
//
Функция ПолучитьИнформациюПоНепогашеннойЗадолженностиИНераспределеннымОплатам()
	УчетнаяПолитика=ПараметрыУчетнойПолитики();
	ПриСовпаденииДатыИДатыОплатыИспользоватьВремяДокумента=(УчетнаяПолитика.ОпределениеВремениПроведенияПлатежногоДокумента = перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);

    Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ИспользоватьВремяДокумента",  ПриСовпаденииДатыИДатыОплатыИспользоватьВремяДокумента);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Поставщик КАК Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента Как ТипДоговораКонтрагента,
	|	ИсточникДанных.Документ КАК Документ,
	|	ИсточникДанных.Документ.Дата КАК ДатаДокумента,
	|	СУММА(ИсточникДанных.СуммаОстаток) КАК Сумма,
	|	СУММА(0) КАК ОплатаСумма,
	|	ЛОЖЬ КАК ЭтоОплата,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(&КонецПериода, Организация = &Организация И РасчетыСБюджетом = ЛОЖЬ) КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.Документ.Дата,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	ИсточникДанных.Документ,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.Документ.ДатаОплаты ЕСТЬ NULL 
	|			ТОГДА ИсточникДанных.Документ.Дата
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(ИсточникДанных.Документ.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(ИсточникДанных.Документ.Дата, ДЕНЬ)
	|						И &ИспользоватьВремяДокумента
	|					ТОГДА ИсточникДанных.Документ.Дата
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ИсточникДанных.Документ.ДатаОплаты, ДЕНЬ)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	СУММА(0),
	|	СУММА(-1 * ИсточникДанных.СуммаОстаток),
	|	ИСТИНА,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(&КонецПериода, Организация = &Организация И РасчетыСБюджетом = ЛОЖЬ) КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.СуммаОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	ВЫБОР
	|		КОГДА ИСточникДанных.Документ.ДатаОплаты ЕСТЬ NULL 
	|			ТОГДА ИСточникДанных.Документ.Дата
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(ИСточникДанных.Документ.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(ИСточникДанных.Документ.Дата, ДЕНЬ) И &ИспользоватьВремяДокумента
	|					ТОГДА ИСточникДанных.Документ.Дата
	|				ИНАЧЕ КОНЕЦПЕРИОДА(ИСточникДанных.Документ.ДатаОплаты, ДЕНЬ)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ИСточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ОплатаСумма)
	|ПО
	|	ТипДоговораКонтрагента,ДоговорКонтрагента
	|";

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоОплатам, Отказ);
	Если Отказ Тогда Возврат; КонецЕсли; 

	ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками.Выгрузить();
	СтруктураОтбора = Новый Структура("Поставщик, ДоговорКонтрагента, ДокументОплаты");
	
	Для Каждого ТекСтрокаОплат Из ТаблицаПоОплатам Цикл		
		// Погашение задолженности
		Движение = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		Движение.Период = ?(ТекСтрокаОплат.ЗачетАванса, ТекСтрокаОплат.СчетФактураДата, ?(НЕ ЗначениеЗаполнено(ТекСтрокаОплат.ДатаОплаты), ТекСтрокаОплат.ДокументОплатыДата, ТекСтрокаОплат.ДатаОплаты));
		Движение.Организация		= СтруктураШД.Организация;
		Движение.Поставщик			= ТекСтрокаОплат.Поставщик;
		Движение.ДоговорКонтрагента	= ТекСтрокаОплат.ДоговорКонтрагента;
		Движение.Документ			= ТекСтрокаОплат.СчетФактура;
		Движение.Сумма 				= ТекСтрокаОплат.Сумма;
		Движение.ДатаСобытия		= СтруктураШД.Дата;
		Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;
		
		// Погашение нераспределенной оплаты
		Движение = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		Движение.Период = ?(ТекСтрокаОплат.ЗачетАванса,ТекСтрокаОплат.СчетФактураДата, ?(НЕ ЗначениеЗаполнено(ТекСтрокаОплат.ДатаОплаты), ТекСтрокаОплат.ДокументОплатыДата, ТекСтрокаОплат.ДатаОплаты));
		Движение.Организация		= СтруктураШД.Организация;
		Движение.Поставщик			= ТекСтрокаОплат.Поставщик;
		Движение.ДоговорКонтрагента = ТекСтрокаОплат.ДоговорКонтрагента;
		Движение.Документ			= ТекСтрокаОплат.ДокументОплаты;
		Движение.ДатаСобытия		= СтруктураШД.Дата;
		
		СуммаДвижения = ТекСтрокаОплат.Сумма;
		
		Если ТекСтрокаОплат.ЗачетАванса Тогда
			Движение.Сумма 			= СуммаДвижения;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		Иначе
			Движение.Сумма 			= (-1)*СуммаДвижения;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.НДСРасчетыСПоставщиками.мПериод = СтруктураШД.Дата;
	Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
	Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
		
	СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Ссылка);
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	СтруктураШД = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШД, ДополнительныеСвойства.ВалютаБухУчета);

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Поставщик",		"Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("СчетФактураДата",	"СчетФактура.Дата");
	СтруктураПолей.Вставить("ЗачетАванса",		"ЗачетАванса");
	СтруктураПолей.Вставить("ДатаСобытия",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОплаты");
	СтруктураПолей.Вставить("ДокументОплатыДата",	"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ТипДоговораКонтрагента",			"ТипДоговораКонтрагента");
	СтруктураПолей.Вставить("Сумма",	"Сумма");
	РезультатЗапросаПоОплатам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаПоОплатам=РезультатЗапросаПоОплатам.Выгрузить();

	ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоОплатам, Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Покупка");