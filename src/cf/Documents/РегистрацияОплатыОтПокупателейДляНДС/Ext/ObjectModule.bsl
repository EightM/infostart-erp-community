Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ АВТОЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА

// Вызавается из процедуры ЗаполнитьСтрокиРаспределенияОплат
//
Функция ПолучитьРасшифровкуПлатежа(Документ, РасшифровкаПлатежаПоДокументам)
	Если РасшифровкаПлатежаПоДокументам[Документ] = Неопределено Тогда
		СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ);
		МетаданныеДокумента=Документ.Метаданные(); Расшифровка=Ложь; 
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			НаборЗаписей=РегистрыНакопления.ВзаиморасчетыСКонтрагентами.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Документ);
			НаборЗаписей.Прочитать();

			Расшифровка=НаборЗаписей.Выгрузить();
			Расшифровка.Колонки.СуммаБух.Имя="СуммаВзаиморасчетов";
			Расшифровка.Индексы.Добавить("ДоговорКонтрагента");

		ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Найти("ОплатаПоставщикам") <> Неопределено Тогда
			Расшифровка=Документ.ОплатаПоставщикам.Выгрузить();
			Расшифровка.Индексы.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		РасшифровкаПлатежаПоДокументам.Вставить(Документ, Расшифровка);
	КонецЕсли; 
	
	Возврат РасшифровкаПлатежаПоДокументам[Документ];
КонецФункции

// Вызавается из процедуры ЗаполнитьСтрокиРаспределенияОплат
//
Функция ПолучитьДокументыРасчетовСКонтрагентом(Документ, ДокументыРасчетовСКонтрагентомПоДокументам)
	Если ДокументыРасчетовСКонтрагентомПоДокументам[Документ] = Неопределено Тогда
		МетаданныеДокумента = Документ.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено Тогда
			Расшифровка = Документ.ДокументыРасчетовСКонтрагентом.Выгрузить();
		Иначе
			Расшифровка = Ложь; 
		КонецЕсли;
		ДокументыРасчетовСКонтрагентомПоДокументам.Вставить(Документ, Расшифровка);
	КонецЕсли; 
	
	Возврат ДокументыРасчетовСКонтрагентомПоДокументам[Документ];
КонецФункции

// Процедура вызывается по кнопке "Заполнить" в форме диалога документа.
// В процедуре реализуется алгоритм автоматического заполнения строк табличной части документа.
//
Процедура ЗаполнитьСтрокиРаспределенияОплат() Экспорт 
	
	ТаблицаРезультатов = Состав.ВыгрузитьКолонки();

	НераспределенныеРасчеты = ПолучитьИнформациюПоНепогашеннойЗадолженностиИНераспределеннымОплатам();
	
	Если НераспределенныеРасчеты.Строки.Количество()=0 Тогда
		Состав.Очистить(); Возврат;
	КонецЕсли;
	
	НепогашеннаяЗадолженность=новый ТаблицаЗначений();
	НепогашеннаяЗадолженность.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	НепогашеннаяЗадолженность.Колонки.Добавить("Документ", 		Документы.ТипВсеСсылки());
	НепогашеннаяЗадолженность.Колонки.Добавить("Сумма",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	НепогашеннаяЗадолженность.Индексы.Добавить("Документ");
	НераспределенныеОплаты=НепогашеннаяЗадолженность.Скопировать();
	
	// Временное хранение расшифровок платежа по документа оплаты (при ведении расчетов по документам)
	РасшифровкаПлатежаПоДокументам = новый Соответствие;
	ДокументыРасчетовСКонтрагентомПоДокументам = новый Соответствие;
	
	Для каждого РасчетыПоТипуДоговору Из НераспределенныеРасчеты.Строки Цикл
		//Для каждого РасчетыПоДоговору Из НераспределенныеРасчеты.Строки Цикл
		Для каждого РасчетыПоДоговору Из РасчетыПоТипуДоговору.Строки Цикл
			КолонкаЗачета="Сумма";
			
			Если РасчетыПоДоговору[КолонкаЗачета] = 0 или РасчетыПоДоговору["Оплата"+КолонкаЗачета] = 0 Тогда
				Продолжить; // Не обнаружена непогашенная задолженность или нераспределенная оплата
			КонецЕсли; 
			НепогашеннаяЗадолженность.Очистить();
			НераспределенныеОплаты.Очистить();
			
			ПроводитьОтборПоДокументуРасчетов = Ложь; ///РасчетыПоДоговору.ВестиПоДокументамРасчетовСКонтрагентом;
			
			Для каждого СтрокаРасчетов  Из РасчетыПоДоговору.Строки Цикл
				Если СтрокаРасчетов.ЭтоОплата Тогда
					Если не НепогашеннаяЗадолженность.Итог(КолонкаЗачета) = 0 Тогда
						РасшифровкаПлатежа = Ложь;
						Если ПроводитьОтборПоДокументуРасчетов Тогда
							РасшифровкаПлатежа = ПолучитьРасшифровкуПлатежа(СтрокаРасчетов.Документ, РасшифровкаПлатежаПоДокументам);
						КонецЕсли;
						Если не РасшифровкаПлатежа = Ложь Тогда
							СтруктураОтбораРасшифровки = Новый Структура("ДоговорКонтрагента",СтрокаРасчетов.ДоговорКонтрагента);
							
							СтрокиПоДоговору = РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбораРасшифровки);
							Для каждого СтрокаПоДоговору Из СтрокиПоДоговору Цикл
								Если СтрокаПоДоговору.СуммаВзаиморасчетов=0 Тогда Продолжить; КонецЕсли; 
								Если НЕ ЗначениеЗаполнено(СтрокаПоДоговору.ДокументРасчетов) Тогда Продолжить; КонецЕсли;
								
								СтруктураОтбораЗадолженности=Новый структура("Документ",СтрокаПоДоговору.ДокументРасчетов);
								
								СтрокиЗадолженностиПоОтбору = НепогашеннаяЗадолженность.НайтиСтроки(СтруктураОтбораЗадолженности);
								Для каждого СтрокаЗадолженности Из СтрокиЗадолженностиПоОтбору Цикл
									//СуммаЗачета = Макс(0, Мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаЗадолженности.ВалютнаяСумма, СтрокаРасчетов.ОплатаВалютнаяСумма));
									СуммаЗачета = Макс(0, Мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаЗадолженности.Сумма, СтрокаРасчетов.ОплатаСумма));
									Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
									
									СтрокаРаспределения=ТаблицаРезультатов.Добавить();
									СтрокаРаспределения.Покупатель			 = СтрокаРасчетов.Покупатель;
									СтрокаРаспределения.ДоговорКонтрагента	 = СтрокаРасчетов.ДоговорКонтрагента;
									СтрокаРаспределения.ТипДоговораКонтрагента= СтрокаРасчетов.ТипДоговораКонтрагента;
									СтрокаРаспределения.СчетФактура			 = СтрокаЗадолженности.Документ;
									СтрокаРаспределения.ЗачетАванса			 = Ложь;
									СтрокаРаспределения.ДатаОплаты			 = СтрокаРасчетов.ДатаДокумента;
									СтрокаРаспределения.ДокументОплаты		 = СтрокаРасчетов.Документ;
									СтрокаРаспределения[КолонкаЗачета] 		 = СуммаЗачета;
									//СтрокаРаспределения[КолонкаРаспределения]=  Окр(СтрокаЗадолженности[КолонкаРаспределения]*СуммаЗачета/СтрокаЗадолженности[КолонкаЗачета],2);
									СтрокаРасчетов["Оплата"+КолонкаЗачета]	= СтрокаРасчетов["Оплата"+КолонкаЗачета] - СуммаЗачета;
									СтрокаЗадолженности[КолонкаЗачета]		= СтрокаЗадолженности[КолонкаЗачета] - СуммаЗачета;

									СтрокаПоДоговору.СуммаВзаиморасчетов = СтрокаПоДоговору.СуммаВзаиморасчетов - СуммаЗачета;
								КонецЦикла; 
								
							КонецЦикла; 
							
						Иначе
							Для каждого СтрокаЗадолженности Из НепогашеннаяЗадолженность Цикл
								Если СтрокаЗадолженности[КолонкаЗачета] = 0 Тогда Продолжить; КонецЕсли;
								СуммаЗачета = Макс(0,мин(СтрокаЗадолженности[КолонкаЗачета], СтрокаРасчетов["Оплата"+КолонкаЗачета]));
								Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
								
								СтрокаРаспределения = ТаблицаРезультатов.Добавить();
								СтрокаРаспределения.Покупатель			= СтрокаРасчетов.Покупатель;
								СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
								СтрокаРаспределения.ТипДоговораКонтрагента= СтрокаРасчетов.ТипДоговораКонтрагента;
								СтрокаРаспределения.СчетФактура			= СтрокаЗадолженности.Документ;
								СтрокаРаспределения.ЗачетАванса			= Ложь;
								СтрокаРаспределения.ДатаОплаты			= СтрокаРасчетов.ДатаДокумента;
								СтрокаРаспределения.ДокументОплаты		= СтрокаРасчетов.Документ;
								СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
								//СтрокаРаспределения[КолонкаРаспределения]=  Окр(СтрокаЗадолженности[КолонкаРаспределения]*СуммаЗачета/СтрокаЗадолженности[КолонкаЗачета],2);
								СтрокаРасчетов["Оплата"+КолонкаЗачета]	= СтрокаРасчетов["Оплата"+КолонкаЗачета] - СуммаЗачета;
								СтрокаЗадолженности[КолонкаЗачета]		= СтрокаЗадолженности[КолонкаЗачета] - СуммаЗачета;
							КонецЦикла; 
							
						КонецЕсли;
					КонецЕсли;
					
					Если не СтрокаРасчетов["Оплата"+КолонкаЗачета] = 0 Тогда
						НераспределеннаяСтрока = НераспределенныеОплаты.Добавить();
						НераспределеннаяСтрока.ДатаДокумента	= СтрокаРасчетов.ДатаДокумента;
						НераспределеннаяСтрока.Документ			= СтрокаРасчетов.Документ;
						НераспределеннаяСтрока.Сумма			= СтрокаРасчетов.ОплатаСумма;
					КонецЕсли; 
					
				Иначе	
					Если не НераспределенныеОплаты.Итог(КолонкаЗачета)=0 Тогда 
						РасшифровкаПлатежа = Ложь;
						Если ПроводитьОтборПоДокументуРасчетов Тогда
							РасшифровкаПлатежа = ПолучитьДокументыРасчетовСКонтрагентом(СтрокаРасчетов.Документ, ДокументыРасчетовСКонтрагентомПоДокументам);
						КонецЕсли;
						Если не РасшифровкаПлатежа = Ложь Тогда
							СтрокиПоДоговору = РасшифровкаПлатежа;	
							
							Для каждого СтрокаПоДоговору Из СтрокиПоДоговору Цикл
								Если СтрокаПоДоговору.СуммаВзаиморасчетов=0 Тогда Продолжить; КонецЕсли; 
								
								СтруктураОтбораОплат = новый структура("Документ",СтрокаПоДоговору.ДокументРасчетовСКонтрагентом);

								СтрокиОплатПоОтбору = НераспределенныеОплаты.НайтиСтроки(СтруктураОтбораОплат);
								Для каждого СтрокаОплаты Из СтрокиОплатПоОтбору Цикл
									Если СтрокаОплаты[КолонкаЗачета] = 0 Тогда Продолжить; КонецЕсли; 
									
									//СуммаЗачета = Макс(0,мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаОплаты.ВалютнаяСумма,СтрокаРасчетов.ВалютнаяСумма));
									СуммаЗачета = Макс(0,мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаОплаты.Сумма,СтрокаРасчетов.Сумма));
									Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
									
									СтрокаРаспределения = ТаблицаРезультатов.Добавить();
									СтрокаРаспределения.Покупатель			= СтрокаРасчетов.Покупатель;
									СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
									СтрокаРаспределения.ТипДоговораКонтрагента= СтрокаРасчетов.ТипДоговораКонтрагента;
									СтрокаРаспределения.СчетФактура			= СтрокаРасчетов.Документ;
									СтрокаРаспределения.ЗачетАванса			= Истина;
									СтрокаРаспределения.ДатаОплаты			= СтрокаОплаты.ДатаДокумента;
									СтрокаРаспределения.ДокументОплаты		= СтрокаОплаты.Документ;
									СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
									//СтрокаРаспределения[КолонкаРаспределения]=Окр(СтрокаРасчетов[КолонкаРаспределения]*СуммаЗачета/СтрокаРасчетов[КолонкаЗачета],2);
									
									СтрокаРасчетов[КолонкаЗачета]			= СтрокаРасчетов[КолонкаЗачета] - СуммаЗачета;
									СтрокаОплаты[КолонкаЗачета]				= СтрокаОплаты[КолонкаЗачета] - СуммаЗачета;
									
									СтрокаПоДоговору.СуммаВзаиморасчетов = СтрокаПоДоговору.СуммаВзаиморасчетов - СуммаЗачета;
								КонецЦикла;
							КонецЦикла;
						Иначе
							Для каждого СтрокаОплаты Из НераспределенныеОплаты Цикл
								Если СтрокаОплаты[КолонкаЗачета] = 0 Тогда Продолжить; КонецЕсли; 
								
								СуммаЗачета = Макс(0,мин(СтрокаОплаты[КолонкаЗачета], СтрокаРасчетов[КолонкаЗачета]));
								Если СуммаЗачета = 0 Тогда Продолжить; КонецЕсли; 
								
								СтрокаРаспределения=ТаблицаРезультатов.Добавить();
								СтрокаРаспределения.Покупатель			= СтрокаРасчетов.Покупатель;
								СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
								СтрокаРаспределения.ТипДоговораКонтрагента= СтрокаРасчетов.ТипДоговораКонтрагента;
								СтрокаРаспределения.СчетФактура			= СтрокаРасчетов.Документ;
								СтрокаРаспределения.ЗачетАванса			= Истина;
								СтрокаРаспределения.ДатаОплаты			= СтрокаОплаты.ДатаДокумента;
								СтрокаРаспределения.ДокументОплаты		= СтрокаОплаты.Документ;
								СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
								//СтрокаРаспределения[КолонкаРаспределения]=Окр(СтрокаРасчетов[КолонкаРаспределения]*СуммаЗачета/СтрокаРасчетов[КолонкаЗачета],2);
								СтрокаРасчетов[КолонкаЗачета]			= СтрокаРасчетов[КолонкаЗачета] - СуммаЗачета;
								СтрокаОплаты[КолонкаЗачета]				= СтрокаОплаты[КолонкаЗачета] - СуммаЗачета;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если не СтрокаРасчетов[КолонкаЗачета]=0 Тогда
						НераспределеннаяСтрока=НепогашеннаяЗадолженность.Добавить();
						НераспределеннаяСтрока.ДатаДокумента = СтрокаРасчетов.ДатаДокумента;
						НераспределеннаяСтрока.Документ		 = СтрокаРасчетов.Документ;
						НераспределеннаяСтрока.Сумма		 = СтрокаРасчетов.Сумма;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла;
	
	Состав.Загрузить(ТаблицаРезультатов);

КонецПроцедуры

// Функция вызывается из процедуры "ЗаполнитьСтрокиРаспределенияОплат".
// Формирует таблицу непогашенной задолженности по органнизации по данным регистра "НДСРасчетыСПоставщиками".
// Возвращаемое значение:
//   ДеревоЗначений - Дерево непогашенной задолженности и нераспределенной оплаты в разрезе договоров
//
Функция ПолучитьИнформациюПоНепогашеннойЗадолженностиИНераспределеннымОплатам()
	УчетнаяПолитика=ПараметрыУчетнойПолитики();
	ПриСовпаденииДатыИДатыОплатыИспользоватьВремяДокумента = (УчетнаяПолитика.ОпределениеВремениПроведенияПлатежногоДокумента = Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);

    Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ИспользоватьВремяДокумента",  ПриСовпаденииДатыИДатыОплатыИспользоватьВремяДокумента);
	Запрос.Текст=" 
	|ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента КАК ТипДоговораКонтрагента,
	|	ИсточникДанных.Покупатель КАК Покупатель,
	|	ИсточникДанных.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ЭтоОплата
	|			ТОГДА ВЫБОР
	|					КОГДА ИсточникДанных.ДатаОплаты = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИсточникДанных.ДатаДокумента
	|					ИНАЧЕ ИсточникДанных.ДатаОплаты
	|				КОНЕЦ
	|		ИНАЧЕ ИсточникДанных.ДатаДокумента
	|	КОНЕЦ КАК ДатаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА ИсточникДанных.ЭтоОплата
	|				ТОГДА 0
	|			ИНАЧЕ ИсточникДанных.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ИсточникДанных.ЭтоОплата
	|				ТОГДА ИсточникДанных.Сумма * -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОплатаСумма,
	|	ИсточникДанных.ЭтоОплата,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	//|	ЕСТЬNULL(ИсточникДанных.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом, ЛОЖЬ) КАК ВестиПоДокументамРасчетовСКонтрагентом
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникДанных.Покупатель КАК Покупатель,
	|		ИсточникДанных.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ИсточникДанных.ТипДоговораКонтрагента КАК ТипДоговораКонтрагента,
	|		ИсточникДанных.Документ КАК Документ,
	|		ИсточникДанных.Документ.Дата КАК ДатаДокумента,
	|		ИсточникДанных.СуммаОстаток КАК Сумма,
	|		ВЫБОР
	|			КОГДА ИсточникДанных.СуммаОстаток < 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоОплата,
	|		ВЫБОР
	|			КОГДА ИсточникДанных.Документ.ДатаОплаты ЕСТЬ NULL 
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НАЧАЛОПЕРИОДА(ИсточникДанных.Документ.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(ИсточникДанных.Документ.Дата, ДЕНЬ)
	|							И &ИспользоватьВремяДокумента
	|						ТОГДА ИсточникДанных.Документ.Дата
	|					ИНАЧЕ КОНЕЦПЕРИОДА(ИсточникДанных.Документ.ДатаОплаты, ДЕНЬ)
	|				КОНЕЦ
	|		КОНЕЦ КАК ДатаОплаты
	|	ИЗ
	|		РегистрНакопления.НДСРасчетыСПокупателями.Остатки(&КонецПериода, Организация = &Организация) КАК ИсточникДанных
	|	) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Документ,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	|	ИсточникДанных.Покупатель,
	|	ИсточникДанных.ЭтоОплата,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ЭтоОплата
	|			ТОГДА ВЫБОР
	|					КОГДА ИсточникДанных.ДатаОплаты = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИсточникДанных.ДатаДокумента
	|					ИНАЧЕ ИсточникДанных.ДатаОплаты
	|				КОНЕЦ
	|		ИНАЧЕ ИсточникДанных.ДатаДокумента
	|	КОНЕЦ,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ОплатаСумма)
	|ПО
	|	ТипДоговораКонтрагента,ДоговорКонтрагента
	|";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоОплатам, Отказ, Заголовок);
    Если Отказ Тогда Возврат; КонецЕсли;
	Если ТаблицаПоОплатам.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ТаблицаДвижений_НДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями.ВыгрузитьКолонки();
	
	СтруктураОтбора = Новый Структура("Покупатель,ДоговорКонтрагента,ТипДоговораКонтрагента,ДокументОплаты");
	
	Для Каждого ТекСтрокаОплат Из ТаблицаПоОплатам Цикл
		// Погашение задолженности
		Движение = ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
		Движение.Период = ?(ТекСтрокаОплат.ЗачетАванса,ТекСтрокаОплат.СчетФактураДата, ?(НЕ ЗначениеЗаполнено(ТекСтрокаОплат.ДатаОплаты), ТекСтрокаОплат.ДокументОплатыДата, ТекСтрокаОплат.ДатаОплаты));
		Движение.Организация		= СтруктураШД.Организация;
		Движение.Покупатель			= ТекСтрокаОплат.Покупатель;
		Движение.ДоговорКонтрагента	= ТекСтрокаОплат.ДоговорКонтрагента;
		Движение.Документ			= ТекСтрокаОплат.СчетФактура;
		Движение.ТипДоговораКонтрагента = ТекСтрокаОплат.ТипДоговораКонтрагента;
		Движение.Сумма 				= ТекСтрокаОплат.Сумма;
		Движение.ДатаСобытия		= СтруктураШД.Дата;
		Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;
		
		// Погашение нераспределенной оплаты
		Движение = ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
		Движение.Период = ?(ТекСтрокаОплат.ЗачетАванса,ТекСтрокаОплат.СчетФактураДата, ?(НЕ ЗначениеЗаполнено(ТекСтрокаОплат.ДатаОплаты), ТекСтрокаОплат.ДокументОплатыДата, ТекСтрокаОплат.ДатаОплаты));
		Движение.Организация		= СтруктураШД.Организация;
		Движение.Покупатель			= ТекСтрокаОплат.Покупатель;
		Движение.ДоговорКонтрагента = ТекСтрокаОплат.ДоговорКонтрагента;
		Движение.ТипДоговораКонтрагента = ТекСтрокаОплат.ТипДоговораКонтрагента;

		Движение.Документ			= ТекСтрокаОплат.ДокументОплаты;
		Движение.ДатаСобытия		= СтруктураШД.Дата;
		СуммаДвижения = ТекСтрокаОплат.Сумма;
		Если ТекСтрокаОплат.ЗачетАванса Тогда
			Движение.Сумма 			= СуммаДвижения;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		Иначе
			Движение.Сумма 			= (-1)*СуммаДвижения;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		КонецЕсли;	
	КонецЦикла;
	
	Движения.НДСРасчетыСПокупателями.мПериод = СтруктураШД.Дата;
	Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
	Движения.НДСРасчетыСПокупателями.ДобавитьДвижение(Ложь);
		
	ДвиженияПоРегиструНДСПредъявленный(СтруктураШД, ТаблицаПоОплатам, Отказ, Заголовок);
КонецПроцедуры

Процедура ДвиженияПоРегиструНДСПредъявленный(СтруктураШД, ТаблицаПоОплатам, Отказ, Заголовок)
	ТаблицаРаспределения = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаПоОплатам Цикл
		Если СтрокаТаблицы.ЗачетАванса Тогда
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(СтруктураШД.Дата), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("СчетФактура", СтрокаТаблицы.СчетФактура);
			Запрос.УстановитьПараметр("ДокументОплаты", СтрокаТаблицы.ДокументОплаты);
			Запрос.УстановитьПараметр("СостояниеОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
			Запрос.Текст="
			|ВЫБРАТЬ
			|	НДСРеализация0Обороты.Организация,
			|	НДСРеализация0Обороты.ВидЦенности,
			|	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
			|	&ДокументОплаты КАК СчетФактура,
			|	НДСРеализация0Обороты.Состояние,
			|	0 КАК СуммаБезНДС,
			|	0 КАК НДС,
			|	СУММА(ВЫБОР
			|			КОГДА НДСРеализация0Обороты.Состояние = &СостояниеОжидание
			|				ТОГДА НДСРеализация0Обороты.СуммаБезНДСОборот + НДСРеализация0Обороты.НДСОборот
			|			ИНАЧЕ НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход
			|		КОНЕЦ) КАК СуммаСНДС,
			|	НДСсАвансовОстатки.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	РегистрНакопления.НДСРеализация0.Обороты(, &Дата, , СчетФактура = &СчетФактура) КАК НДСРеализация0Обороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСсАвансов.Остатки(&Дата, СчетФактура = &ДокументОплаты) КАК НДСсАвансовОстатки
			|		ПО НДСРеализация0Обороты.Организация = НДСсАвансовОстатки.Организация
			|			И НДСРеализация0Обороты.Покупатель = НДСсАвансовОстатки.Покупатель
			|
			|СГРУППИРОВАТЬ ПО
			|	НДСРеализация0Обороты.Организация,
			|	НДСРеализация0Обороты.ВидЦенности,
			|	НДСРеализация0Обороты.Состояние,
			|	НДСРеализация0Обороты.СчетФактура,
			|	НДСсАвансовОстатки.СтавкаНДС
			|";
			ТаблицаРаспределенияСФ=Запрос.Выполнить().Выгрузить();		
			Если ТаблицаРаспределенияСФ.Количество() > 0 Тогда
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.Сумма, ТаблицаРаспределенияСФ.ВыгрузитьКолонку("СуммаСНДС"));
				Если МассивСумм <> Неопределено Тогда
					ТаблицаРаспределенияСФ.ЗагрузитьКолонку(МассивСумм, "СуммаБезНДС");
					ТаблицаРаспределенияСФ.Колонки.Удалить("СуммаСНДС");
					Для Каждого СтрокаРаспределения Из ТаблицаРаспределенияСФ Цикл
						СтрокаРаспределения.НДС = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаРаспределения.СуммаБезНДС, Истина, Истина,
																		УчетНалоговСервер.СтавкаНДС(СтрокаРаспределения.СтавкаНДС));
						СтрокаРаспределения.СуммаБезНДС = СтрокаРаспределения.СуммаБезНДС - СтрокаРаспределения.НДС;
					КонецЦикла;
				
					Если ТаблицаРаспределения = Неопределено Тогда
						ТаблицаРаспределения = ТаблицаРаспределенияСФ;
					Иначе
						ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенияСФ, ТаблицаРаспределения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (Не Отказ) И (ТаблицаРаспределения <> Неопределено) Тогда
		
		ТаблицаРаспределения.Колонки.Добавить("Событие");
		
	    Счетчик = ТаблицаРаспределения.Количество();
		Пока Счетчик <> 0 Цикл 
			Счетчик = Счетчик - 1;
			Если ТаблицаРаспределения[Счетчик].СуммаБезНДС = 0 И ТаблицаРаспределения[Счетчик].НДС = 0 Тогда
				ТаблицаРаспределения.Удалить(ТаблицаРаспределения[Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДвижения Из ТаблицаРаспределения Цикл
			Если СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
		КонецЦикла;
		
	    ТаблицаРаспределения.ЗаполнитьЗначения(перечисления.ВидыЦенностей.АвансыПолученные,"ВидЦенности");
		
		Движения.НДСПредъявленныйРеализация0.мПериод = СтруктураШД.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаРаспределения;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход();		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли;

	Заголовок=ДополнительныеСвойства.Заголовок;
	СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	СтруктураШД = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШД, ДополнительныеСвойства.ВалютаБухУчета);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Покупатель",		"Покупатель");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("СчетФактураДата",	"СчетФактура.Дата");
	СтруктураПолей.Вставить("ЗачетАванса",		"ЗачетАванса");
	СтруктураПолей.Вставить("ДатаСобытия",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОплаты");
	СтруктураПолей.Вставить("ДокументОплатыДата","ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ТипДоговораКонтрагента", "ТипДоговораКонтрагента");
	СтруктураПолей.Вставить("Сумма",	"Сумма");
	РезультатЗапросаПоОплатам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаПоОплатам = РезультатЗапросаПоОплатам.Выгрузить();
	
	ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоОплатам, Отказ, Заголовок);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Продажа");