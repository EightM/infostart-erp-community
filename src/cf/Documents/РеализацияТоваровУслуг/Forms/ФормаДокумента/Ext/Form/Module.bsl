&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Элементы.Шапка.Видимость=НЕ Элементы.Шапка.Видимость;
		Элементы.УправлениеШапкой.Картинка=?(Элементы.Шапка.Видимость, БиблиотекаКартинок.ПереместитьВлево, БиблиотекаКартинок.ПереместитьВправо); 
		
	ИначеЕсли Команда.Имя="ПроверкаКоличестваТоваров" Тогда
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Товары", Объект.Товары);
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ОткрытьФорму("ОбщаяФорма.ОстаткиТМЦ", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКорректировка(Подвид)
	Если НЕ ЗначениеЗаполнено(Подвид) Тогда Возврат Ложь; КонецЕсли; 
	Возврат СокрЛП(Подвид.ИмяПредопределеного)="Корректировка";
КонецФункции
 
&НаКлиенте
Процедура ОбновитьНадписи()
	Объект.СуммаДокумента=Объект["Товары"].Итог("Сумма")+Объект["Услуги"].Итог("Сумма")+Объект["ОС"].Итог("Сумма")+Объект["НМА"].Итог("Сумма");
	Объект.СуммаНДС=Объект["Товары"].Итог("СуммаНДС")+Объект["Услуги"].Итог("СуммаНДС")+Объект["ОС"].Итог("СуммаНДС")+Объект["НМА"].Итог("СуммаНДС");

	Если Объект.УчитыватьНДС И Не Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента=Объект.СуммаДокумента+Объект.СуммаНДС;
	КонецЕсли;

	ВидСклада=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Склад, "ВидСклада");	
	Если ВидСклада=ПредопределенноеЗначение("Перечисление.ВидыСкладов.Розничный") Тогда
		ЦенаВалютаДокумента=Строка(Объект.Склад);
	Иначе
		ЦенаВалютаДокумента=Строка(Объект.ТипЦен);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловиеПродаж) Тогда
		ЦенаВалютаДокумента=ЦенаВалютаДокумента+", Условие продаж: "+Строка(Объект.УсловиеПродаж);
	КонецЕсли;

	Элементы.НадписьВсего.Заголовок="Всего ("+СокрЛП(Объект.ВалютаДокумента)+")";
	Элементы.НадписьВсегоНДС.Заголовок="НДС "+?(Объект.СуммаВключаетНДС, "(в т. ч.)", "(сверху)");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы()
	тпТабличноеПоле_ОбновитьПредставление("Товары");
	тпТабличноеПоле_ОбновитьПредставление("Услуги");	
	ОбновитьНадписи();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			УстановитьВидимостьЭлементовФормы();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ПересчитатьАвтоматическиеСкидки()
	Если Не ЦенообразованиеСервер.МожноРассчитыватьАвтоматическиеСкидки(УчетнаяПолитика) Тогда Возврат; КонецЕсли; 

	СуммаДокументаБезСкидок=0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СуммаДокументаБезСкидок=СуммаДокументаБезСкидок+Окр(СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество, 2);
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СуммаДокументаБезСкидок=СуммаДокументаБезСкидок+Окр(СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество, 2);
	КонецЦикла;

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВидРеализации", ПредопределенноеЗначение("Перечисление.ВидыСкидок.Розничная"));
	СтруктураПараметров.Вставить("СуммаДокумента", СуммаДокументаБезСкидок);
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ВидОплаты", Неопределено);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("УчетнаяПолитика", УчетнаяПолитика);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КурсКратность", Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);

	СтруктураПараметров.Вставить("ТаблицаДанных", Объект.Товары.Выгрузить()); НомерСтроки=0;
	Если ЦенообразованиеСервер.РассчитатьСкидкиПриПродаже(СтруктураПараметров) Тогда		
		Для каждого СтрокаКоллекции Из СтруктураПараметров.ТаблицаДанных Цикл
			СтрокаТабличнойЧасти=Объект.Товары[НомерСтроки]; НомерСтроки=НомерСтроки+1;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаКоллекции, "ПроцентАвтоматическихСкидок,УсловиеАвтоматическойСкидки,ЗначениеУсловияАвтоматическойСкидки,Сумма,СуммаНДС");			
		КонецЦикла;
	КонецЕсли;

	СтруктураПараметров.Вставить("ТаблицаДанных", Объект.Услуги.Выгрузить()); НомерСтроки=0;
	Если ЦенообразованиеСервер.РассчитатьСкидкиПриПродаже(СтруктураПараметров) Тогда
		Для каждого СтрокаКоллекции Из СтруктураПараметров.ТаблицаДанных Цикл
			СтрокаТабличнойЧасти=Объект.Услуги[НомерСтроки]; НомерСтроки=НомерСтроки+1;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаКоллекции, "ПроцентАвтоматическихСкидок,УсловиеАвтоматическойСкидки,ЗначениеУсловияАвтоматическойСкидки,Сумма,СуммаНДС");			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	МассивТЧ=СтрРазделить("Товары,Услуги,ОС,НМА", ",");
	Для Каждого ИмяТабличнойЧасти Из МассивТЧ Цикл
		Элементы[ИмяТабличнойЧасти+"СтавкаНДС"].Видимость=Объект.УчитыватьНДС;
		Элементы[ИмяТабличнойЧасти+"СуммаНДС"].Видимость=Объект.УчитыватьНДС;
		Если НЕ Объект.УчитыватьНДС Тогда
			Для каждого СтрокаКоллекции Из Объект[ИмяТабличнойЧасти] Цикл
				Если ЗначениеЗаполнено(СтрокаКоллекции.СтавкаНДС) Тогда
					СтрокаКоллекции.СтавкаНДС=ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
				КонецЕсли;
				Если НЕ СтрокаКоллекции.СуммаНДС=0 Тогда
					СтрокаКоллекции.СуммаНДС=0;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	// Видимость страници "Услуги"
	Элементы.СтраницаУслуги.Видимость=НЕ ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора")=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером");

	ЭтоКорректировка=ЭтоКорректировка(Объект.Подвид);
	Элементы.Сделка.Заголовок=?(ЭтоКорректировка, "Коррект.", "Сделка");
	
	Если ЭтоКорректировка Тогда
		Если НЕ ТипЗнч(Объект.Сделка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			//*** Объект.Сделка=Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		КонецЕсли;		
		//*** Элементы.ОсновнаяПанель.Страницы.ВозвратнаяТара.Видимость=Ложь;

		Элементы.ТоварыЦена.Заголовок="Цена после изменения";
		Элементы.ТоварыКоличество.Заголовок="Количество разница";
		Элементы.ТоварыСумма.Заголовок="Сумма разница";
		Элементы.ТоварыСуммаНДС.Заголовок="Сумма НДС разница";
		Элементы.ТоварыВсего.Заголовок="Всего разница";
		
		Элементы.УслугиЦена.Заголовок="Цена после изменения";
		Элементы.УслугиКоличество.Заголовок="Количество разница";
		Элементы.УслугиСумма.Заголовок="Сумма разница";
		Элементы.УслугиСуммаНДС.Заголовок="Сумма НДС разница";
		Элементы.УслугиВсего.Заголовок="Всего разница";		
	Иначе
		Элементы.ТоварыЦена.Заголовок="Цена";
		Элементы.ТоварыКоличество.Заголовок="Количество";
		Элементы.ТоварыСумма.Заголовок="Сумма";
		Элементы.ТоварыСуммаНДС.Заголовок="Сумма НДС";
		Элементы.ТоварыВсего.Заголовок="Всего";

		Элементы.УслугиЦена.Заголовок="Цена";
		Элементы.УслугиКоличество.Заголовок="Количество";
		Элементы.УслугиСумма.Заголовок="Сумма";
		Элементы.УслугиСуммаНДС.Заголовок="Сумма НДС";
		Элементы.УслугиВсего.Заголовок="Всего";		
	КонецЕсли;
	
	Элементы.ТоварыКоличество1.Видимость=ЭтоКорректировка;
	Элементы.ТоварыКоличество2.Видимость=ЭтоКорректировка;

	Элементы.ТоварыСумма1.Видимость=ЭтоКорректировка;
	Элементы.ТоварыСумма2.Видимость=ЭтоКорректировка;

	Элементы.ТоварыСуммаНДС1.Видимость=ЭтоКорректировка;
	Элементы.ТоварыСуммаНДС2.Видимость=ЭтоКорректировка;		

	Элементы.УслугиКоличество1.Видимость=ЭтоКорректировка;
	Элементы.УслугиКоличество2.Видимость=ЭтоКорректировка;

	Элементы.УслугиСумма1.Видимость=ЭтоКорректировка;
	Элементы.УслугиСумма2.Видимость=ЭтоКорректировка;

	Элементы.УслугиСуммаНДС1.Видимость=ЭтоКорректировка;
	Элементы.УслугиСуммаНДС2.Видимость=ЭтоКорректировка;		

	Элементы.кпТовары_ОбновитьПредставление.Видимость=ЭтоКорректировка;
	Элементы.кпУслуги_ОбновитьПредставление.Видимость=ЭтоКорректировка;

	Элементы.КодВидаОперации.Видимость=Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.КодВидаОперации.Видимость=УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") ИЛИ УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая_ЕНВД");
	КонецЕсли;
	
	Если ОбщегоНазначенияСервер.ПроверкаРасширения("33lab_ЕГАИС") Тогда
		Модуль_ЕГАИС=ОбщегоНазначенияКлиент.ОбщийМодуль("ЕГАИС_СерверПереопределяемый");
		МассивНоменклатуры=Новый Массив;
		Для Каждого СтрокаКоллекции Из Объект.Товары Цикл
			МассивНоменклатуры.Добавить(СтрокаКоллекции.Номенклатура);
		КонецЦикла;
		Если Модуль_ЕГАИС.ПроверитьВозможностьСозданияДокументаЕГАИС(МассивНоменклатуры) Тогда
			ДокументЕГАИС=Модуль_ЕГАИС.ПолучитьДокументЕГАИС(Объект.Ссылка);
			ДокументЕГАИСПредставление=Новый ФорматированнаяСтрока(?(ЗначениеЗаполнено(ДокументЕГАИС), Строка(ДокументЕГАИС), "Создать документ ЕГАИС"), Новый Шрифт(,,,,Истина), WebЦвета.SteelBlue,, ПолучитьНавигационнуюСсылку(ДокументЕГАИС));
			Элементы.ДокументЕГАИСПредставление.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки_ДокументЕГАИС(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДокументЕГАИС=ОбщегоНазначенияСервер.СсылкаИзНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
	Если ЗначениеЗаполнено(ДокументЕГАИС) Тогда
		ОткрытьФорму(УправлениеМетаданными.ОписаниеСсылки(ДокументЕГАИС)+".ФормаОбъекта", Новый Структура("Ключ", ДокументЕГАИС));
	Иначе
		ОткрытьФорму(УправлениеМетаданными.ОписаниеСсылки(ДокументЕГАИС)+".ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
	//*** Элементы.ГиперссылкаСчетФактура.Заголовок=УправлениеДиалогамиКлиент.ТекстСчетаФактуры(УчетНалоговСервер.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураВыданный"));
	СчетФактураВыданный=УправлениеДиалогамиКлиент.ТекстСчетаФактуры(УчетНалоговСервер.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураВыданный"));
	Если Лев(СчетФактураВыданный, 1)="№" Тогда
		СчетФактураВыданный="Счет фактура "+СчетФактураВыданный;
	КонецЕсли; //lee
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ДокументОснование.ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Объект.Склад=ДокументОснование.Склад.Склад;
		Иначе			
			Объект.Склад=ДокументОснование.Склад;
		КонецЕсли;
	КонецЕсли;
	//ЕстьРеквизитПроцентСкидкиНаценки=Истина;
	//ПересчитыватьСкидку=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	//ЕстьРеквизитПроцентАвтоматическихСкидок=Истина;	

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Количество,
	|	Номенклатура, 
	|	Коэффициент,
	|	ЕдиницаИзмерения,
	|   Номенклатура.СтавкаАкциза КАК СтавкаАкциза,
	|	СтавкаНДС,
	|	НомерСтроки КАК НомерСтроки,
	|	ХарактеристикаНоменклатуры,
	|	Склад,
	|	СерияНоменклатуры
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.Товары
	|ГДЕ 
	|	Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Выборка);
		СтрокаТабличнойЧасти.Качество=Справочники.Качество.Новый;
		Если СтрокаТабличнойЧасти.Склад.Пустая() Тогда
			СтрокаТабличнойЧасти.Склад=Объект.Склад;
		КонецЕсли; 
		СтрокаТабличнойЧасти.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
		СпособРасчета=Неопределено;
		ТекущиеДанные=СтрокаТабличнойЧасти;
		
		Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;
		
		Если (СпособРасчета=Неопределено) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок")) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки")) Тогда
			СуммаСкидки=Сумма*ТекущиеДанные.ПроцентАвтоматическихСкидок / 100;
			Если НЕ СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки") Тогда
				СуммаСкидки=СуммаСкидки+(Сумма*ТекущиеДанные.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
		КонецЕсли;
		
		ТекущиеДанные.Сумма=Сумма-СуммаСкидки;
		ТекущиеДанные.СуммаБезСкидок=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаАкциза=ТекущиеДанные.СтавкаАкциза*ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);		
	КонецЦикла;
	
	ПересчитатьАвтоматическиеСкидки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПокупателя(стрИмя)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Заказ", Объект.Сделка);
	
	Если стрИмя="ЗаполнитьПоЗаказуПокупателя1" Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	СУММА(ИсточникДанных.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментВремени, ЗаказПокупателя = &Заказ И Номенклатура.Услуга=Ложь) КАК ИсточникДанных
		|СГРУППИРОВАТЬ ПО
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.ХарактеристикаНоменклатуры
		|";
	ИначеЕсли стрИмя="ЗаполнитьПоЗаказуПокупателя2" Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.Склад,
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	ИсточникДанных.СерияНоменклатуры,
		|	ИсточникДанных.Качество,
		|	СУММА(ИсточникДанных.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментВремени, Организация = &Организация	И Заказ = &Заказ И Номенклатура.Услуга=Ложь) КАК ИсточникДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.Склад,
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	ИсточникДанных.СерияНоменклатуры,
		|	ИсточникДанных.Качество
		|";
	КонецЕсли;
	тзДанные=Запрос.Выполнить().Выгрузить();		
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаТабличнойЧастиПрограмно=Объект.Товары.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиПрограмно, СтрокаКоллекции);
		СтрокаТабличнойЧастиПрограмно=Неопределено;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СоздатьТранспортнуюВЕТИС()
	ДокументОбъект=Документы["ВетисТранспортныеОперации"].СоздатьДокумент();
	ДокументОбъект.Заполнить(Объект.Ссылка);
	ДокументОбъект.Дата=ТекущаяДата();
	ДокументОбъект.Записать();
	Возврат ДокументОбъект.Ссылка;	
КонецФункции

&НаКлиенте
Процедура ТабличныеЧасти_ПриСменеСтраницы(Элемент, ТекущаяСтраница)
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_Универсальный(Параметр1, СтруктураПараметров) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ ТипЗнч(СтруктураПараметров)=Тип("Структура") Тогда Возврат; КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Алгоритм") Тогда Возврат; КонецЕсли;
	Выполнить(СтруктураПараметров.Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	//*** тпТовары_Заполнить(Параметр2.Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЦенаВалюта(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметр1);

	//ПересчитатьЦеныПоВалюте
	Если Параметр1.ПерезаполнитьЦеныПоТипу Тогда
		НаДату=ТекущаяДата();
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.ТипЦен, НаДату, СтрокаКоллекции.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму(СтрокаКоллекции);
		КонецЦикла;
		Для каждого СтрокаКоллекции Из Объект.Услуги Цикл
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура,,Объект.ТипЦен, НаДату);
			тпУслуги_РассчитатьСумму(СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки(); ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоПриходномуОрдеру(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ЗаполнитьТоварыПоПоступлениюТоваров(Параметр1);
	ОбновитьНадписи();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию()
	МассивРеквизитовИскл=Новый Массив;
	МассивРеквизитовИскл.Добавить("Номер");
	МассивРеквизитовИскл.Добавить("Дата");
	МассивРеквизитовИскл.Добавить("Автор");
	МассивРеквизитовИскл.Добавить("ПоследнийАвтор");
	МассивРеквизитовИскл.Добавить("Ответственный");
	МассивРеквизитовИскл.Добавить("Подвид");
	МассивРеквизитовИскл.Добавить("Сделка");

	мдОснование=Объект.Сделка.Метаданные(); стрРеквизиты="";
	Для каждого мдРеквизиты Из мдОснование.Реквизиты Цикл
		Если НЕ МассивРеквизитовИскл.Найти(мдРеквизиты.Имя)=Неопределено Тогда Продолжить; КонецЕсли;
		стрРеквизиты=стрРеквизиты+?(стрРеквизиты="", "", ",")+мдРеквизиты.Имя;
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(Объект, ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(Объект.Сделка, стрРеквизиты));

	//Если Вопрос("Заполнить табличную часть?",  РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
		Если УправлениеМетаданными.ЕстьТабличнаяЧасть("Товары", мдОснование) Тогда
			Объект.Товары.Очистить();
			Для каждого СтрокаКоллекции Из Объект.Сделка.Товары Цикл
				ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаКоллекции,,"Количество,Сумма,СуммаНДС");
			КонецЦикла;
		КонецЕсли;	
		Если УправлениеМетаданными.ЕстьТабличнаяЧасть("Услуги", мдОснование) Тогда
			Объект.Услуги.Очистить();
			Для каждого СтрокаКоллекции Из Объект.Сделка.Услуги Цикл
				ЗаполнитьЗначенияСвойств(Объект.Услуги.Добавить(), СтрокаКоллекции,,"Количество,Сумма,СуммаНДС");
			КонецЦикла;
		КонецЕсли;
	//КонецЕсли;	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаСервере
Процедура Атрибут_ПриИзменении_Сервер(стрИмя)
	Если стрИмя="ДоговорКонтрагента" Тогда
		//РеквизитФормыВЗначение("Объект")
		
		//ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента
		//Объект.ДоговорКонтрагента
		//СтруктураРеквизитовДокумента=ЦенообразованиеСервер.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Объект);
		//ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, ПредыдущиеЗначенияАтрибутов.ВалютаВзаиморасчетов, ДополнительныеСвойства.ВалютаБухУчета, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, СтруктураРеквизитовДокумента, "Продажа", "Товары", ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");		

	ИначеЕсли Элемент.Имя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПокупателем,СКомиссионером"));

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);

	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		//Атрибут_ПриИзменении_Сервер(Элемент.Имя);
		Если Объект.ТипЦен.Пустая() Тогда
			Объект.ТипЦен=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ТипЦен");
		КонецЕсли;
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);
		ОбновитьНадписи();
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="Подвид" Тогда
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="Сделка" Тогда
		Если ЭтоКорректировка(Объект.Подвид) И ЗначениеЗаполнено(Объект.Сделка) Тогда
			ЗаполнитьПоОснованию();
		КонецЕсли;	 
		
	ИначеЕсли Элемент.Имя="ДисконтнаяКарта" Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя="СчетФактураВыданный" Тогда
		Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
			Сообщить("Необхоимо записать документ!"); Возврат;		
		КонецЕсли;
		УправлениеДиалогамиКлиент.ВвестиСчетФактуру(Объект.Ссылка, ЭтаФорма, "СчетФактураВыданный");
	КонецЕсли;
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Очистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="ВидПередачи" ИЛИ Элемент.Имя="СчетФактураВыданный" Тогда
		СтандартнаяОбработка=Ложь;		
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="АвтоматическиеСкидки" Тогда
		ПересчитатьАвтоматическиеСкидки();				

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
		ОбновитьДанныеФормы();
		
	ИначеЕсли стрКоманда="ОбновитьПредставлениеТабличнойЧасти" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаСервере
Процедура тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть)
	Если стрТабличнаяЧасть="Товары" Тогда
		ИспользоватьХарактеристики=ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИспользоватьСерии=ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	КонецЕсли;

	ЭтоКорректировка=ЭтоКорректировка(Объект.Подвид) И ЗначениеЗаполнено(Объект.Сделка) И Объект.Сделка.Метаданные().Имя="РеализацияТоваровУслуг";
	Если ЭтоКорректировка Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Сделка);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Номенклатура КАК Номенклатура,
		|	ИсточникДанных.Сумма КАК Сумма,
		|	ИсточникДанных.СуммаНДС КАК СуммаНДС,
		|	ИсточникДанных.Количество КАК Количество
		|ИЗ
		|	Документ.РеализацияТоваровУслуг."+стрТабличнаяЧасть+" КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Ссылка = &Ссылка
		|";
		тзДанные=Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	Для каждого СтрокаКоллекции Из Объект[стрТабличнаяЧасть] Цикл
		Если стрТабличнаяЧасть="Товары" Тогда
			СтрокаКоллекции.СуммаБезСкидок=СтрокаКоллекции.Цена*СтрокаКоллекции.Количество;
		КонецЕсли;
		СтрокаКоллекции.Всего=СтрокаКоллекции.Сумма+?(Объект.СуммаВключаетНДС, 0, СтрокаКоллекции.СуммаНДС);
		
		Если стрТабличнаяЧасть="Товары" И (ИспользоватьХарактеристики ИЛИ ИспользоватьСерии) Тогда
			СтруктураДанных=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(СтрокаКоллекции.Номенклатура, "ВестиУчетПоХарактеристикам,ВестиУчетПоСериям");
			СтрокаКоллекции.ХарактеристикиИспользуются=СтруктураДанных.ВестиУчетПоХарактеристикам;
			СтрокаКоллекции.СерииИспользуются=СтруктураДанных.ВестиУчетПоСериям;
		КонецЕсли;
		
		Если ЭтоКорректировка Тогда
			РезультатПоиска=тзДанные.Найти(СтрокаКоллекции.Номенклатура, "Номенклатура");
			Если НЕ РезультатПоиска=Неопределено Тогда
				СтрокаКоллекции.Количество1=РезультатПоиска.Количество;
				СтрокаКоллекции.Количество2=СтрокаКоллекции.Количество+РезультатПоиска.Количество;

				СтрокаКоллекции.Сумма1=РезультатПоиска.Сумма;
				СтрокаКоллекции.Сумма2=СтрокаКоллекции.Сумма+РезультатПоиска.Сумма;

				СтрокаКоллекции.СуммаНДС1=РезультатПоиска.СуммаНДС;
                СтрокаКоллекции.СуммаНДС2=СтрокаКоллекции.СуммаНДС+РезультатПоиска.СуммаНДС;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Возвратная тара"

&НаКлиенте
Процедура кпВозвратнаяТара_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ВозвратнаяТара"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");		
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ВозвратнаяТара", "");
	ТекущиеДанные=Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура,, Объект.ТипЦен, ТекущаяДата());
		тпВозвратнаяТара_РассчитатьСумму(ТекущиеДанные);

	ИначеЕсли стрКолонка="Количество" Тогда
		тпВозвратнаяТара_РассчитатьСумму(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпВозвратнаяТара_РассчитатьСумму(ТекущиеДанные);

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);		

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпВозвратнаяТара_РассчитатьСумму(ТекущиеДанные);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_РассчитатьСумму(ТекущиеДанные)
	ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Услуги"

&НаКлиенте
Процедура кпУслуги_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Услуги"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");		
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Услуги", "");
	ТекущиеДанные=Элементы.Услуги.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.СтавкаНДС=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "СтавкаНДС");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура,,Объект.ТипЦен, ТекущаяДата());
		Если ПустаяСтрока(ТекущиеДанные.Содержание) Тогда
			ТекущиеДанные.Содержание=СокрЛП(ТекущиеДанные.Номенклатура);
		КонецЕсли;
		тпУслуги_РассчитатьСумму();

	ИначеЕсли стрКолонка="Количество" Тогда
		тпУслуги_РассчитатьСумму();

	ИначеЕсли стрКолонка="Цена" Тогда
		тпУслуги_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		СуммаБезСкидки=ТекущиеДанные.Сумма * 100/ (100 - ТекущиеДанные.ПроцентСкидкиНаценки - ТекущиеДанные.ПроцентАвтоматическихСкидок);
		ТекущиеДанные.Цена=СуммаБезСкидки / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпУслуги_РассчитатьСумму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Услуги.ТекущиеДанные;
	КонецЕсли; 	

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	Если (СпособРасчета=Неопределено) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок")) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки")) Тогда
		СуммаСкидки=Сумма*ТекущиеДанные.ПроцентАвтоматическихСкидок / 100;
		Если НЕ СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки") Тогда
			СуммаСкидки=СуммаСкидки+(Сумма*ТекущиеДанные.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;

	ТекущиеДанные.Сумма=Сумма-СуммаСкидки;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ОС"

&НаКлиенте
Процедура тпОС_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпОС_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпОС_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпОС_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОС", "");
	ТекущиеДанные=Элементы.ОС.ТекущиеДанные;

	Если стрКолонка="ОсновноеСредство" Тогда
		тпОС_Колонка_ПриИзменении_Сервер(Элементы.ОС.ТекущаяСтрока);

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура тпОС_Колонка_ПриИзменении_Сервер(ИндексСтроки)
	ТекущиеДанные=Объект.ОС.НайтиПоИдентификатору(ИндексСтроки);
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("УчетВнеоборотныхАктивовСервер");
	Если Модуль=Неопределено Тогда Возврат; КонецЕсли;

	тзДанные=Модуль.ПолучитьДанныеОС(Объект.Дата, Объект.ОС.Выгрузить(, "ОсновноеСредство"), Объект.Организация);
	МассивСтрок=тзДанные.НайтиСтроки(Новый Структура("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство));
	Если НЕ МассивСтрок.Количество()=0 Тогда		
		ТекущиеДанные.ПараметрыОтраженияРасходов=МассивСтрок[0].ПараметрыОтраженияРасходов;
		ТекущиеДанные.ТОП2=МассивСтрок[0].ПараметрыОтраженияРасходов.ТОП;
	КонецЕсли;
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "НМА"

&НаКлиенте
Процедура тпНМА_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпНМА_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпНМА_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "НМА", "");
	ТекущиеДанные=Элементы.НМА.ТекущиеДанные;

	Если стрКолонка="НематериальныйАктив" Тогда

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпНМА_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		тпТовары_Заполнить(стрКоманда);		
		ОбновитьДанныеФормы();

	ИначеЕсли стрКоманда="СоздатьВетисТранспортную" Тогда
		ДокументСсылка=СоздатьТранспортнуюВЕТИС();
		ОткрытьФорму("Документ.ВетисТранспортныеОперации.ФормаОбъекта", Новый Структура("Ключ", ДокументСсылка));

	ИначеЕсли стрКоманда="ЗаполнитьПоПриходномуОрдеру" Тогда
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоПриходномуОрдеру", ЭтотОбъект), , "Выберите документ поступления для заполнения документа реализации", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));

	ИначеЕсли стрКоманда="ЗаполнитьПоЗаказуПокупателя1" Или стрКоманда="ЗаполнитьПоЗаказуПокупателя2" Тогда
		Если Не ЗначениеЗаполнено(Объект.Сделка) Тогда 
			ПоказатьПредупреждение(,"Не выбран заказ покупателя!", 10);
			Возврат;
		КонецЕсли;
		ЗаполнитьПоЗаказуПокупателя(стрКоманда);

	ИначеЕсли стрКоманда="ОтображениеКартинкиТовара" Тогда
		Элементы.КартинкаТовара.Видимость=НЕ Элементы.КартинкаТовара.Видимость;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя="ТоварыНомерСтроки" Тогда
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	Если Элементы.КартинкаТовара.Видимость Тогда
		Если ТекущиеДанные=Неопределено Тогда КартинкаТовара=""; Возврат; КонецЕсли;
		КартинкаТовара=ПолучитьНавигационнуюСсылку(ТекущиеДанные.Номенклатура, "ОсновноеИзображение");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередУдалением(Элемент, Отказ)
	МассивСтрок=Объект.СоставНабора.НайтиСтроки(Новый Структура("ID_Товары", Элемент.ТекущиеДанные.ID));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.СоставНабора.Удалить(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаАкциза,СтавкаНДС");

		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.СтавкаАкциза=СтруктураНоменклатуры.СтавкаАкциза;
		ТекущиеДанные.СтавкаНДС=СтруктураНоменклатуры.СтавкаНДС;

		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		тпТовары_РассчитатьСумму(ТекущиеДанные);

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму(ТекущиеДанные);
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
				тпТовары_РассчитатьСумму(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;		

	ИначеЕсли стрКолонка="Количество" Тогда
		ПересчитатьАвтоматическиеСкидки();
		тпТовары_РассчитатьСумму(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="Цена" Тогда
		ПересчитатьАвтоматическиеСкидки();
		тпТовары_РассчитатьСумму(ТекущиеДанные);

	ИначеЕсли стрКолонка="Сумма" Тогда
		СуммаБезСкидки=ТекущиеДанные.Сумма * 100/ (100 - ТекущиеДанные.ПроцентСкидкиНаценки - ТекущиеДанные.ПроцентАвтоматическихСкидок);		
		ТекущиеДанные.Цена=СуммаБезСкидки / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);		
		ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
		ТекущиеДанные.СуммаБезСкидок=СуммаБезСкидки;

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпТовары_РассчитатьСумму(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="ПроцентСкидкиНаценки" Тогда
		тпТовары_РассчитатьСумму(ТекущиеДанные);
		
	ИначеЕсли Лев(стрКолонка, 12)="СтавкаАкциза" Тогда
		ТекущиеДанные.СуммаАкциза=ТекущиеДанные.СтавкаАкциза*ТекущиеДанные.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	Если (СпособРасчета=Неопределено) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок")) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки")) Тогда
		СуммаСкидки=Сумма*ТекущиеДанные.ПроцентАвтоматическихСкидок / 100;
		Если НЕ СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки") Тогда
			СуммаСкидки=СуммаСкидки+(Сумма*ТекущиеДанные.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;

	ТекущиеДанные.Сумма=Сумма-СуммаСкидки;
	ТекущиеДанные.СуммаБезСкидок=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
	ТекущиеДанные.СуммаАкциза=ТекущиеДанные.СтавкаАкциза*ТекущиеДанные.Количество;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
КонецПроцедуры

&НаСервере
Процедура тпТовары_Заполнить(стрКоманда)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСерии(ДокументОбъект);
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Сделки"

&НаКлиенте
Процедура тпСделки_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура кпСделки_ВыполнитьДействие(Команда)
	тпСделки_Подбор("Заполнить", ЭтаФорма);
КонецПроцедуры
 
&НаКлиенте
Процедура тпСделки_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь; тпСделки_Подбор("Изменить", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_Подбор(стрКоманда, Владелец)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("МножественныйВыбор", стрКоманда="Заполнить");

	УправлениеЗаказамиКлиент.ВыполнитьДействие(СтруктураПараметров, Владелец, стрКоманда);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	
	АктивностьМеркурия=ОбщегоНазначенияСервер.ПроверкаРасширения("Меркурий");
	Элементы.СоздатьТранспортнуюВЕТИС.Доступность=АктивностьМеркурия;
	Элементы.СоздатьТранспортнуюВЕТИС.Видимость=АктивностьМеркурия;
	РазрешитьРедактированиеЦен=НастройкиПользователяСервер.ЗначениеПраваПользователя("РедактированиеЦенВДокументах");
	Элементы.ТоварыСумма.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ТоварыЦена.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ТоварыПроцентСкидкиНаценки.Видимость=РазрешитьРедактированиеЦен;
	Элементы.ТоварыПроцентСкидкиНаценки.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ТоварыСуммаНДС.Доступность=РазрешитьРедактированиеЦен;
	
	Элементы.ВозвратнаяТараСумма.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ВозвратнаяТараЦена.Доступность=РазрешитьРедактированиеЦен;

	Элементы.УслугиСумма.Доступность=РазрешитьРедактированиеЦен;
	Элементы.УслугиЦена.Доступность=РазрешитьРедактированиеЦен;
	Элементы.УслугиСуммаНДС.Доступность=РазрешитьРедактированиеЦен;
	Элементы.УслугиПроцентСкидкиНаценки.Видимость=РазрешитьРедактированиеЦен;
	Элементы.УслугиПроцентСкидкиНаценки.Доступность=РазрешитьРедактированиеЦен;
	
	ЗаполнитьТекстПроСчетФактуру();

	ОбновитьДанныеФормы();	

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="Запись_СчетФактураВыданный" Тогда
		ЗаполнитьТекстПроСчетФактуру();
	КонецЕсли;
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

//Функция ЕстьСпецПредложения(ТолькоСерые)
//	ТолькоСерые=Неопределено;
//	Возврат ЗаполнениеДокументов.ЕстьСпецПредложения(РеквизитФормыВЗначение("Объект"), ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) 
//КонецФункции 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПересчитатьАвтоматическиеСкидки();
	
	////При проведении документа проверим возможность получения бонусов.
	//Если ПараметрыЗаписи.РежимЗаписи=РежимЗаписиДокумента.Проведение И Не Объект.Проведен Тогда
	//	ТолькоСерые=Неопределено;
	//	Если ЕстьСпецПредложения(ТолькоСерые) Тогда
	//		Если Не(ТолькоСерые И УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("НеПредлагатьНеполныеСпецПредложения")) Тогда
	//			Ответ = Вопрос("В документе можно составить спец. предложения." + Символы.ПС + "Открыть форму подбора спец. предложений?", РежимДиалогаВопрос.ДаНет);
	//			Если Ответ = КодВозвратаДиалога.Да Тогда
	//				ЗаполнениеДокументов.РассчитатьНатуральныеСкидки("Товары", ЭтотОбъект, ЭтаФорма, Перечисления.ВидыСкидок.Оптовая);
	//				// Если пользователь отказался от выбора спец. предложения - вернемся к редактированию документа.
	//				Если ЕстьСпецПредложения(ТолькоСерые) Тогда
	//					Отказ=Истина; Возврат;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	//ЭтаФорма.РеквизитФормыВЗначение("Реквизит1")
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпТабличноеПоле_ОбновитьПредставление("Товары");
	тпТабличноеПоле_ОбновитьПредставление("Услуги");
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И НЕ Объект.Организация=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "Организация") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбран договор контрагента, не соответствующий организации, указанной в документе!", , "Объект.ДоговорКонтрагента"); Отказ=Истина; Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
