////////////////////////////////////////////////////////////////////////////////
//Управление печатными формами

Процедура СтруктураПечатныхФорм(Структура) Экспорт
	Структура.Вставить("Накладная", "Расходная накладная");
	Структура.Вставить("Акт", "Акт об оказании услуг");
	Структура.Вставить("ТоварныйЧек", "Товарный чек");
	Структура.Вставить("ТОРГ12", "ТОРГ-12 (Товарная накладная с услугами)");
	Структура.Вставить("ТОРГ12_БезУслуг", "ТОРГ-12 (Товарная накладная)");
	Структура.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ");
	Структура.Вставить("УниверсальныйКорректировочныйДокумент", "Универсальный корректировочный документ");
	Структура.Вставить("_1Т", "1-Т (Товарно-транспортная накладная)");
	Структура.Вставить("М15", "М-15 (Накладная)");
	Структура.Вставить("Бланк", "Бланк товарного наполнения");
	Структура.Вставить("РасходСРозничныхСкладовВЦенахАТТ", "Расход с розничных складов в ценах АТТ");	
КонецПроцедуры

Функция ИнициализацияМакета(СтруктураПараметров, стрМакет)
	Если СтруктураПараметров.Свойство("Макет") Тогда
		Возврат СтруктураПараметров.Макет;
	КонецЕсли;
	Макет=СтруктураПараметров.МакетШаблон;
	Если Макет=Неопределено Тогда
		Если Метаданные.ОбщиеМакеты.Найти(стрМакет)=Неопределено Тогда
			Макет=ПолучитьМакет(стрМакет);
		Иначе
			Макет=ПолучитьОбщийМакет(стрМакет);
		КонецЕсли;
	КонецЕсли;
	Возврат Макет;
КонецФункции

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
	Найти(Параметр1, "%")
	Или Найти(Параметр2, "%")
	Или Найти(Параметр3, "%")
	Или Найти(Параметр4, "%")
	Или Найти(Параметр5, "%")
	Или Найти(Параметр6, "%")
	Или Найти(Параметр7, "%")
	Или Найти(Параметр8, "%")
	Или Найти(Параметр9, "%");
	
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция СформироватьСтрокуСимволов(Знач Символ, Знач ДлинаСтроки) Экспорт
	
	Результат = "";
	Для Счетчик = 1 По ДлинаСтроки Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)
	
	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0) И (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0) И (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0) И (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0) И (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0) И (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0) И (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0) И (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0) И (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбщиеДанныеДляПечати(СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаОбъект.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст="ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Сделка КАК Сделка,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ОтпускРазрешил КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	РеализацияТоваровУслуг.ПодписьРуководителя КАК ПодписьРуководитель,
	|	РеализацияТоваровУслуг.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	РеализацияТоваровУслуг.ОснованиеРуководителя КАК ОснованиеРуководителя,
	|	РеализацияТоваровУслуг.ОснованиеГлавногоБухгалтера КАК ОснованиеГлавногоБухгалтера
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	Руководители=ПечатныеФормыСервер.ОтветственныеЛицаОрганизации(СтруктураДанных.Организация, СтруктураДанных.ДатаДокумента, СсылкаНаОбъект);
	Если ЗначениеЗаполнено(СтруктураДанных.ПодписьРуководитель) Тогда
		ФИОРуководителя=УправлениеКонфигурациейСервер.ФИО(СтруктураДанных.ПодписьРуководитель,,Истина,);
	Иначе
		ФИОРуководителя=Руководители.Руководитель;
	КонецЕсли;
	СтруктураДанных.Вставить(?(СтруктураДанных.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, "ФИОПБОЮЛ", "ФИОРуководителя"), ФИОРуководителя);
	СтруктураДанных.Вставить("ФИООтветственного", ФИОРуководителя);
	СтруктураДанных.Вставить("ДолжностьОтветственного",Руководители.РуководительДолжность);
	СтруктураДанных.Вставить("ДолжностьРуководителя",Руководители.РуководительДолжность);

	Если ЗначениеЗаполнено(СтруктураДанных.ПодписьГлавногоБухгалтера) Тогда
		СтруктураДанных.ФИОГлавногоБухгалтера = УправлениеКонфигурациейСервер.ФИО(СтруктураДанных.ПодписьГлавногоБухгалтера,,Истина,);
	Иначе
		СтруктураДанных.ФИОГлавногоБухгалтера=Руководители.ГлавныйБухгалтер;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ОснованиеРуководителя) Тогда
		СтруктураДанных.ОснованиеРуководителя="(ф.и.о.)";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ОснованиеГлавногоБухгалтера) Тогда
		СтруктураДанных.ОснованиеГлавногоБухгалтера="(ф.и.о.)";
	КонецЕсли;
	СтруктураДанных.ОснованиеПодписантаРуководителя=СтруктураДанных.ОснованиеРуководителя;
	СтруктураДанных.ОснованиеПодписантаГлавногоБухгалтера=СтруктураДанных.ОснованиеГлавногоБухгалтера;
	
	Если ЗначениеЗаполнено(СтруктураДанных.ОтпускРазрешил) Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", СтруктураДанных.ДатаДокумента);
		Запрос.УстановитьПараметр("Сотрудник", СтруктураДанных.ОтпускРазрешил);
		Запрос.УстановитьПараметр("Организация", СтруктураДанных.Организация);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КадровыеСведенияСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.КадровыеСведения.СрезПоследних(&Дата, Сотрудник = &Сотрудник И Организация = &Организация) КАК КадровыеСведенияСрезПоследних
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанных.ДолжностьОтветственного=Выборка.Должность;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.ДолжностьОтветственного) Тогда
			СтруктураДанных.ДолжностьОтветственного=ПечатныеФормыСервер.ДолжностьОтветственногоЛица(СтруктураДанных.ОтпускРазрешил, СтруктураДанных.ДатаДокумента, СтруктураДанных.Организация);
		КонецЕсли;
		ФамилияИмяОтчествоФизЛица=ПечатныеФормыСервер.ФамилияИмяОтчество(СтруктураДанных.ОтпускРазрешил, СтруктураДанных.ДатаДокумента);
		ФамилияИмяОтчествоОтпускРазрешил=ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		СтруктураДанных.ФИООтветственного=ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ОтпускПроизвел) Тогда
		СтруктураДанных.Вставить("ДолжностьКладовщика",ПечатныеФормыСервер.ДолжностьОтветственногоЛица(СтруктураДанных.ОтветственноеЛицо, СтруктураДанных.ДатаДокумента, СтруктураДанных.Организация));
		ФамилияИмяОтчествоФизЛица=ПечатныеФормыСервер.ФамилияИмяОтчество(СтруктураДанных.ОтветственноеЛицо, СтруктураДанных.ДатаДокумента);
	Иначе
		ФамилияИмяОтчествоФизЛица=ПечатныеФормыСервер.ФамилияИмяОтчество(СтруктураДанных.ОтпускПроизвел, СтруктураДанных.ДатаДокумента);
		СтруктураДанных.Вставить("ДолжностьКладовщика",ПечатныеФормыСервер.ДолжностьОтветственногоЛица(СтруктураДанных.ОтпускПроизвел, СтруктураДанных.ДатаДокумента, СтруктураДанных.Организация));
	КонецЕсли;	
	ФамилияИмяОтчествоОтпускПроизвел=СокрЛП(ФамилияИмяОтчествоФизЛица.Фамилия)+" "+СокрЛП(ФамилияИмяОтчествоФизЛица.Имя)+" "+СокрЛП(ФамилияИмяОтчествоФизЛица.Отчество);
	СтруктураДанных.Вставить("ФИОКладовщика", ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел));
	
	
	ТоварКод=Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ПустаяСтрока(ТоварКод) Тогда ТоварКод="Код"; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	// Вычислим курс документа для печати
	Если СсылкаНаОбъект.ВалютаДокумента = СсылкаНаОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", СсылкаНаОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", СсылкаНаОбъект.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс",      1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НоменклатураНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "                 КАК НоменклатураКод,
	|	РеализацияТоваровУслуг.Номенклатура.КодТНВЭД                 		  КАК НоменклатураКодТНВЭД,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения     						  КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент / РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.КоличествоМест > 0 ТОГДА РеализацияТоваровУслуг.КоличествоМест * РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры       КАК Характеристика,
	|	РеализацияТоваровУслуг.СерияНоменклатуры                КАК Серия,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД     КАК ПредставлениеГТД,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное  КАК ПредставлениеСтраны,
	|   	ВЫБОР КОГДА РеализацияТоваровУслуг.СерияНоменклатуры = &ПустаяСерия Тогда
	|   		РеализацияТоваровУслуг.Номенклатура.СтранаПроисхождения
	|		Иначе 
	|			РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения
	|   	Конец КАК СтранаПроисхождения,	
	|		ВЫБОР КОГДА РеализацияТоваровУслуг.СерияНоменклатуры = &ПустаяСерия Тогда
	|   		РеализацияТоваровУслуг.Номенклатура.СтранаПроисхождения.Код
	|		Иначе 
	|			РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения.Код
	|   	Конец КАК СтранаПроисхожденияКод,	
	|	РеализацияТоваровУслуг.СтавкаНДС            КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|	ВЫБОР КОГДА((РеализацияТоваровУслуг.ПроцентСкидкиНаценки = 0) И (РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок = 0))
	|		ТОГДА ЛОЖЬ
	|	ИНАЧЕ Истина
	|		КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество           КАК Количество,
	|	РеализацияТоваровУслуг.КоличествоМест       КАК КоличествоМест,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)-(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) ИНАЧЕ РеализацияТоваровУслуг.Сумма* &Курс / &Кратность КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма* &Курс / &Кратность ИНАЧЕ (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)+(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) КОНЕЦ КАК СтоимостьСНДС,
	|	РеализацияТоваровУслуг.СуммаНДС             КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки          КАК НомерСтроки,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентРучнойСкидки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическойСкидки,
	|	""Товары""                КАК ТабличнаяЧасть,
	|	РеализацияТоваровУслуг.СуммаАкциза                КАК СуммаАкциза,
	|	ID КАК ID
	|ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
	|	"+ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг")+" КАК НоменклатураНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + " КАК НоменклатураКод,
	|	NULL					  	                		 КАК НоменклатураКодТНВЭД,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	NULL                                                 КАК ВидУпаковки,
	|	NULL                                                 КАК КоличествоВОдномМесте,
	|	0                                                    КАК МассаБрутто,
	|	NULL                                                 КАК Характеристика,
	|	NULL                                                 КАК Серия,
	|	NULL                                                 КАК ПредставлениеГТД,
	|	NULL                                                 КАК ПредставлениеСтраны,
	|	NULL                                                 КАК СтранаПроисхождения,
	|	NULL                                                 КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
	|	ВЫБОР
	|		КОГДА(РеализацияТоваровУслуг.ПроцентСкидкиНаценки = 0)
	|	ТОГДА ЛОЖЬ
	|	ИНАЧЕ Истина
	|	КОНЕЦ                                                КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                 КАК КоличествоМест,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)-(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) ИНАЧЕ РеализацияТоваровУслуг.Сумма* &Курс / &Кратность КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма* &Курс / &Кратность ИНАЧЕ (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)+(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) КОНЕЦ КАК СтоимостьСНДС,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентРучнойСкидки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическойСкидки,
	|	""Услуги""                                           КАК ТабличнаяЧасть,
	|	0                КАК СуммаАкциза,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НоменклатураНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "   КАК НоменклатураКод,
	|	NULL					  	                		  КАК НоменклатураКодТНВЭД,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	NULL                                                  КАК ПредставлениеГТД,
	|	NULL                                                  КАК ПредставлениеСтраны,
	|	NULL                                                  КАК СтранаПроисхождения,
	|	NULL                                                  КАК СтранаПроисхожденияКод,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
	|	Ложь                                                  КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	РеализацияТоваровУслуг.Сумма* &Курс / &Кратность КАК СтоимостьБезНДС,
	|	РеализацияТоваровУслуг.Сумма* &Курс / &Кратность КАК СтоимостьСНДС,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	0 КАК ПроцентРучнойСкидки,
	|	0 КАК ПроцентАвтоматическойСкидки,
	|	""ВозвратнаяТара""                                           КАК ТабличнаяЧасть,
	|	0                КАК СуммаАкциза,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ОсновноеСредство                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.ОсновноеСредство.НаименованиеПолное КАК Строка(1000)) КАК НоменклатураНаименование,
	|	РеализацияТоваровУслуг.ОсновноеСредство.Код КАК НоменклатураКод,
	|	NULL					  	                		 КАК НоменклатураКодТНВЭД,
	|	NULL КАК БазоваяЕдиницаНаименование,
	|	NULL КАК БазоваяЕдиницаКодПоОКЕИ,
	|	NULL КАК ЕдиницаИзмерения,
	|	NULL                                                 КАК ВидУпаковки,
	|	NULL                                                 КАК КоличествоВОдномМесте,
	|	0                                                    КАК МассаБрутто,
	|	NULL                                                 КАК Характеристика,
	|	NULL                                                 КАК Серия,
	|	NULL                                                 КАК ПредставлениеГТД,
	|	NULL                                                 КАК ПредставлениеСтраны,
	|	NULL                                                 КАК СтранаПроисхождения,
	|	NULL                                                 КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Сумма/РеализацияТоваровУслуг.Количество*&Курс/&Кратность КАК Цена,
	|	Ложь                                                 КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                 КАК КоличествоМест,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)-(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) ИНАЧЕ РеализацияТоваровУслуг.Сумма* &Курс / &Кратность КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма* &Курс / &Кратность ИНАЧЕ (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)+(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) КОНЕЦ КАК СтоимостьСНДС,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	0 КАК ПроцентРучнойСкидки,
	|	0 КАК ПроцентАвтоматическойСкидки,
	|	""ОС""                                           КАК ТабличнаяЧасть,
	|	0                КАК СуммаАкциза,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ОС КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НематериальныйАктив                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.НематериальныйАктив.Наименование КАК Строка(1000)) КАК НоменклатураНаименование,
	|	РеализацияТоваровУслуг.НематериальныйАктив.Код КАК НоменклатураКод,
	|	NULL					  	                		 КАК НоменклатураКодТНВЭД,
	|	NULL КАК БазоваяЕдиницаНаименование,
	|	NULL КАК БазоваяЕдиницаКодПоОКЕИ,
	|	NULL КАК ЕдиницаИзмерения,
	|	NULL                                                 КАК ВидУпаковки,
	|	NULL                                                 КАК КоличествоВОдномМесте,
	|	0                                                    КАК МассаБрутто,
	|	NULL                                                 КАК Характеристика,
	|	NULL                                                 КАК Серия,
	|	NULL                                                 КАК ПредставлениеГТД,
	|	NULL                                                 КАК ПредставлениеСтраны,
	|	NULL                                                 КАК СтранаПроисхождения,
	|	NULL                                                 КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Сумма/РеализацияТоваровУслуг.Количество*&Курс/&Кратность КАК Цена,
	|	Ложь                                                 КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                 КАК КоличествоМест,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)-(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) ИНАЧЕ РеализацияТоваровУслуг.Сумма* &Курс / &Кратность КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма* &Курс / &Кратность ИНАЧЕ (РеализацияТоваровУслуг.Сумма* &Курс / &Кратность)+(РеализацияТоваровУслуг.СуммаНДС* &Курс / &Кратность) КОНЕЦ КАК СтоимостьСНДС,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	0 КАК ПроцентРучнойСкидки,
	|	0 КАК ПроцентАвтоматическойСкидки,
	|	""НМА""                                           КАК ТабличнаяЧасть,
	|	0                КАК СуммаАкциза,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.НМА КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО ТабличнаяЧасть ВОЗР, НомерСтроки ВОЗР
	|
	|";
	тзТовары=Запрос.Выполнить().Выгрузить();

	НомерСтроки=0;
	тзДанные = ИнициализацияТабличнойЧасти();
	Для Каждого СтрокаТз ИЗ тзТовары Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
		НомерСтроки=НомерСтроки+1;
		НоваяСтрока.НомерСтроки=НомерСтроки;
		
		Если ЗначениеЗаполнено(СтрокаТз.Серия) И ЗначениеЗаполнено(СтрокаТз.Серия.НомерРазделаГТД) Тогда
			НоваяСтрока.ПредставлениеГТД=СокрЛП(СтрокаТз.ПредставлениеГТД)+"/"+СокрЛП(СтрокаТз.Серия.НомерРазделаГТД);
		КонецЕсли; //***
		
		Если ((СтрокаТз.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
			ИЛИ (СтрокаТз.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			ИЛИ (СтрокаТз.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110)) Тогда
			НоваяСтрока.СтоимостьБезНДС = СтрокаТз.СтоимостьСНДС;
			Если НЕ СсылкаНаОбъект.СуммаВключаетНДС Тогда
				НоваяСтрока.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если НоваяСтрока.Цена = 0 Тогда
			НоваяСтрока.Цена=?(СтрокаТз.Количество=0, 0, Окр(СтрокаТз.СтоимостьБезНДС / СтрокаТз.Количество, 2));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			НоваяСтрока.НоменклатураНаименование = СтрокаТз.Номенклатура;
		КонецЕсли;
		НоваяСтрока.НоменклатураНаименование=СокрЛП(НоваяСтрока.НоменклатураНаименование) + ПечатныеФормыСервер.ПредставлениеСерий(СтрокаТз);

		Если Строка(СтрокаТз.ПредставлениеСтраны)="Россия" 
			ИЛИ Строка(СтрокаТз.ПредставлениеСтраны)="Российская Федерация"
			ИЛИ СтрокаТз.СтранаПроисхождения=Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			НоваяСтрока.ПредставлениеСтраны="";
			НоваяСтрока.СтранаПроисхожденияКод="";
		Иначе
			Если ЗначениеЗаполнено(СтрокаТз.СтранаПроисхождения) Тогда
				НоваяСтрока.ПредставлениеСтраны=СокрЛП(СтрокаТз.СтранаПроисхождения.Наименование);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТз.ЕдиницаИзмерения) Тогда
			НоваяСтрока.Количество=0;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);

 	Возврат СтруктураДанных;
КонецФункции	

Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование,СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ИсточникДанных.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ИсточникДанных.Контрагент
	|		ИНАЧЕ ИсточникДанных.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ИсточникДанных.Сделка КАК Сделка,
	|	ИсточникДанных.ОтпускРазрешил КАК ОтпускРазрешил,
	|	ИсточникДанных.ОтпускПроизвел КАК ОтпускПроизвел,
	|	ИсточникДанных.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ИсточникДанных.ДоверенностьДата КАК ДоверенностьДата,
	|	ИсточникДанных.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ИсточникДанных.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	ИсточникДанных.УчитыватьНДС КАК УчитыватьНДС,
	|	ИсточникДанных.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИсточникДанных.АдресДоставки КАК АдресДоставки,
	|	ИсточникДанных.ДоговорКонтрагента.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	ИсточникДанных.ПодписьРуководителя КАК ПодписьРуководителя,
	|	ИсточникДанных.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	ИсточникДанных.ОснованиеРуководителя КАК ОснованиеРуководителя,
	|	ИсточникДанных.ОснованиеГлавногоБухгалтера КАК ОснованиеГлавногоБухгалтера,
	|	ИсточникДанных.СуммаНДС Как СуммаНДСДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументОснование";
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	НоменклатураКод=Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ПустаяСтрока(НоменклатураКод) Тогда НоменклатураКод="Код"; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Номенклатура." + НоменклатураКод + "                 КАК НоменклатураКод,
	|	Номенклатура.КодТНВЭД                 		  КАК НоменклатураКодТНВЭД,
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК НоменклатураНаименование,
	|	ВЫБОР КОГДА СерияНоменклатуры = &ПустаяСерия Тогда
	|   	Номенклатура.СтранаПроисхождения
	|	Иначе 
	|		СерияНоменклатуры.СтранаПроисхождения
	|   Конец КАК СтранаПроисхождения,
	
	|	ВЫБОР КОГДА СерияНоменклатуры = &ПустаяСерия Тогда
	|   	Номенклатура.СтранаПроисхождения.Код
	|	Иначе 
	|		СерияНоменклатуры.СтранаПроисхождения.Код
	|   Конец КАК СтранаПроисхожденияКод,	
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД					             КАК ПредставлениеГТД,
	|	СерияНоменклатуры.НомерРазделаГТД		                 КАК НомерРазделаГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	СуммаАкциза                            КАК СуммаАкциза,
	|	""Товары"" КАК ТабличнаяЧасть,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура." + НоменклатураКод + "          КАК НоменклатураКод,
	|	NULL                                   КАК НоменклатураКодТНВЭД,
	|	Номенклатура                           КАК Номенклатура,
	|	Содержание                             КАК НоменклатураНаименование,
	|	NULL                                   КАК СтранаПроисхождения,
	|	NULL                                   КАК СтранаПроисхожденияКод,
	|	NULL                                   КАК ПредставлениеСтраны,
	|	NULL                                   КАК НомерГТД,
	|	""""                                   КАК ПредставлениеГТД,
	|	""""                                   КАК НомерРазделаГТД,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	|	ТОГДА 0 ИНАЧЕ Количество
	|	КОНЕЦ КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	NULL                                   КАК Характеристика,
	|	NULL                                   КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	0                                      КАК СуммаАкциза,
	|	""Услуги"" КАК ТабличнаяЧасть,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновноеСредство.Код                КАК НоменклатураКод,
	|	NULL                                КАК НоменклатураКодТНВЭД,
	|	ОсновноеСредство                    КАК Номенклатура,
	|	ОсновноеСредство.Наименование       КАК НоменклатураНаименование,
	|	NULL                                КАК СтранаПроисхождения,
	|	NULL                                КАК СтранаПроисхожденияКод,
	|	NULL                                КАК ПредставлениеСтраны,
	|	NULL                                КАК НомерГТД,
	|	""""                                КАК ПредставлениеГТД,
	|	""""                                КАК НомерРазделаГТД,
	|	NULL  								КАК ЕдиницаИзмерения,
	|	""""     							КАК ЕдиницаИзмеренияКод,
	|	Количество  						КАК Количество,
	|	0                                   КАК Цена,
	|	СтавкаНДС                           КАК СтавкаНДС,
	|	СуммаНДС                            КАК СуммаНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	NULL                                КАК Характеристика,
	|	NULL                                КАК Серия,
	|	НомерСтроки                         КАК НомерСтроки,
	|	0                                   КАК СуммаАкциза,
	|	""ОС"" КАК ТабличнаяЧасть,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ОС КАК РеализацияТоваровУслугУслуги
	|
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть,
	|	НомерСтроки
	|";
	тзТовары=Запрос.Выполнить().Выгрузить();
	
	//Если СсылкаНаОбъект.Исправление Тогда
	//	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование.Сделка);
	//	тзТоварыИсточника=Запрос.Выполнить().Выгрузить();
	//	Для Каждого СтрокаКорректировки Из тзТовары Цикл
	//		МассивСтрок=тзТоварыИсточника.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Серия,ТабличнаяЧасть", СтрокаКорректировки.Номенклатура, СтрокаКорректировки.Характеристика, СтрокаКорректировки.Серия, СтрокаКорректировки.ТабличнаяЧасть));
	//		Если МассивСтрок.Количество()<>1 Тогда ВызватьИсключение("Не корректно заполнен исправительный документ!"); КонецЕсли;
	//		
	//		МассивСтрок[0].Количество=МассивСтрок[0].Количество+СтрокаКорректировки.Количество;
	//		МассивСтрок[0].Цена=МассивСтрок[0].Цена+СтрокаКорректировки.Цена;
	//		МассивСтрок[0].СуммаНДС=МассивСтрок[0].СуммаНДС+СтрокаКорректировки.СуммаНДС;
	//		МассивСтрок[0].СтоимостьБезНДС=МассивСтрок[0].СтоимостьБезНДС+СтрокаКорректировки.СтоимостьБезНДС;
	//		МассивСтрок[0].СтоимостьСНДС=МассивСтрок[0].СтоимостьСНДС+СтрокаКорректировки.СтоимостьСНДС;
	//		МассивСтрок[0].СуммаАкциза=МассивСтрок[0].СуммаАкциза+СтрокаКорректировки.СуммаАкциза;
	//	КонецЦикла;
	//	тзТовары=тзТоварыИсточника;
	//КонецЕсли;
	
	тзДанные = ИнициализацияТабличнойЧастиКорректировочный();
	Для Каждого СтрокаТз ИЗ тзТовары Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция ПолучитьОбщиеДанныеДляПечатиКорректировочный(СсылкаНаОбъект)
	
	ОбщиеДанныеДляПечати = Неопределено;
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(СсылкаНаОбъект,СсылкаНаОбъект);			
		
		Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
			Если ОбщиеДанныеДляПечати = Неопределено Тогда
				ОбщиеДанныеДляПечати = ЭкземплярДанныхДляПечати;
			Иначе
				Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
					Если СтрДанных.Ключ = "Позиции" Тогда
						СтараяТабЧасть = ОбщиеДанныеДляПечати.Позиции;
						НоваяТабЧасть = СтрДанных.Значение;
						
						Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
							СтрокаТабЧасти = СтараяТабЧасть.Добавить();
							Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
								Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
									СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					Иначе
						Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	
	Если ТипЗнч(ОбщиеДанныеДляПечати)=Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ОбщиеДанныеДляПечати=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщиеДанныеДляПечати.Вставить("ДатаДокумента", СсылкаНаОбъект.Дата);
	ОбщиеДанныеДляПечати.Вставить("НомерДокумента", СсылкаНаОбъект.Номер);
	//Если СсылкаНаОбъект.Исправление Тогда
	//	ОбщиеДанныеДляПечати.Вставить("НомерИсправления",  СокрЛП(СсылкаНаОбъект.НомерИсправления));
	//	ОбщиеДанныеДляПечати.Вставить("ДатаИсправления",  Формат(СсылкаНаОбъект.Дата,"ДФ=dd.MM.yyyy"));
	//Конецесли;

	ОбщиеДанныеДляПечати.Вставить("Дата", СсылкаНаОбъект.Дата);
	ОбщиеДанныеДляПечати.Вставить("Номер", СсылкаНаОбъект.Номер);
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьЧерезКого) Тогда
		ОбщиеДанныеДляПечати.Основание=ОбщиеДанныеДляПечати.Основание+"; Доверенность "+ОбщиеДанныеДляПечати.ДоверенностьНомер+?(ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьДата), " от "+Формат(ОбщиеДанныеДляПечати.ДоверенностьДата, "ДЛФ=DD"), "")
		+" "+ОбщиеДанныеДляПечати.ДоверенностьВыдана+" "+ОбщиеДанныеДляПечати.ДоверенностьЧерезКого;
	КонецЕсли;	
	Руководители = ПечатныеФормыСервер.ОтветственныеЛицаОрганизации(ОбщиеДанныеДляПечати.Организация, СсылкаНаОбъект.Дата, СсылкаНаОбъект);
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ПодписьРуководителя) Тогда
		ФИОРуководителя = УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ПодписьРуководителя,,Истина,);
	Иначе
		ФИОРуководителя = Руководители.Руководитель;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ПодписьГлавногоБухгалтера) Тогда
		ФИОГлавногоБухгалтера = УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ПодписьГлавногоБухгалтера,,Истина,);
	Иначе
		ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
	КонецЕсли;	

	ОбщиеДанныеДляПечати.Вставить(?(ОбщиеДанныеДляПечати.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, "ФИОПБОЮЛ", "ФИОРуководителя"), ФИОРуководителя);
	ОбщиеДанныеДляПечати.Вставить("ФИОРуководителяНакладная", ФИОРуководителя);
	ОбщиеДанныеДляПечати.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
	ОбщиеДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", ФИОГлавногоБухгалтера);
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОснованиеРуководителя) Тогда
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаРуководителя", ОбщиеДанныеДляПечати.ОснованиеРуководителя);
	Иначе
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаРуководителя", "(ф.и.о.)");
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОснованиеГлавногоБухгалтера) Тогда
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаГлавногоБухгалтера",ОбщиеДанныеДляПечати.ОснованиеГлавногоБухгалтера);
	Иначе
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаГлавногоБухгалтера","(ф.и.о.)");
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОтпускРазрешил) Тогда
		ОбщиеДанныеДляПечати.Вставить("ФИООтветственного", УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ОтпускРазрешил, , Истина));
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ОбщиеДанныеДляПечати.ДатаДокумента);
		Запрос.УстановитьПараметр("Сотрудник", ОбщиеДанныеДляПечати.ОтпускРазрешил);
		Запрос.УстановитьПараметр("Организация", ОбщиеДанныеДляПечати.Организация);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КадровыеСведенияСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.КадровыеСведения.СрезПоследних(&Дата, Сотрудник = &Сотрудник И Организация = &Организация) КАК КадровыеСведенияСрезПоследних
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщиеДанныеДляПечати.Вставить("ДолжностьОтветственного", Выборка.Должность);
		КонецЕсли;
	Иначе
		ОбщиеДанныеДляПечати.Вставить("ФИООтветственного", ФИОРуководителя);
		ОбщиеДанныеДляПечати.Вставить("ДолжностьОтветственного", Руководители.РуководительДолжность);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОтпускПроизвел) Тогда
		ОбщиеДанныеДляПечати.Вставить("ФИОКладовщика", УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ОтпускПроизвел, , Истина));
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ОбщиеДанныеДляПечати.ДатаДокумента);
		Запрос.УстановитьПараметр("Сотрудник", ОбщиеДанныеДляПечати.ОтпускПроизвел);
		Запрос.УстановитьПараметр("Организация", ОбщиеДанныеДляПечати.Организация);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КадровыеСведенияСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.КадровыеСведения.СрезПоследних(&Дата, Сотрудник = &Сотрудник И Организация = &Организация) КАК КадровыеСведенияСрезПоследних
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщиеДанныеДляПечати.Вставить("ДолжностьКладовщика", Выборка.Должность);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПоставщике=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ОбщиеДанныеДляПечати.Поставщик, ОбщиеДанныеДляПечати.Дата);
	Если ОбщиеДанныеДляПечати.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбщиеДанныеДляПечати.Свидетельство=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	ОбщиеДанныеДляПечати.Вставить("СтоимостьБезНДС",ОбщиеДанныеДляПечати.Позиции.Итог("СтоимостьБезНДС"));
	ОбщиеДанныеДляПечати.Вставить("СуммаНДС",ОбщиеДанныеДляПечати.Позиции.Итог("СуммаНДС"));
	ОбщиеДанныеДляПечати.Вставить("СтоимостьСНДС",ОбщиеДанныеДляПечати.Позиции.Итог("СтоимостьСНДС"));
	
	//ТаблицаДатОплат=СсылкаНаОбъект.ДатаНомерДокументовОплаты.Выгрузить();
	//ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
	//СтрокиКУдалению=Новый массив();
	//Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
	//	Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) И ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
	//		СтрокиКУдалению.Добавить(СтрокаОплат);
	//	КонецЕсли;
	//КонецЦикла; 
	//Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	//	ТаблицаДатОплат.Удалить(СтрокаКУдалению);
	//КонецЦикла; 
	
	НомерСтроки=0;
	Для Каждого СтрокаТз ИЗ ОбщиеДанныеДляПечати.Позиции Цикл
		НомерСтроки=НомерСтроки+1;
		СтрокаТз.НомерСтроки=НомерСтроки;
		Если ЗначениеЗаполнено(СтрокаТз.НомерРазделаГТД) Тогда
			СтрокаТз.ПредставлениеГТД=СокрЛП(СтрокаТз.ПредставлениеГТД)+"/"+СокрЛП(СтрокаТз.НомерРазделаГТД);
		КонецЕсли;
//		СтрокаТз.Цена=?(СтрокаТз.Количество=0, 0, Окр(СтрокаТз.СтоимостьБезНДС / СтрокаТз.Количество, 2));
		Если НЕ ЗначениеЗаполнено(СтрокаТз.НоменклатураКодТНВЭД) ИЛИ СтрокаТз.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаТз.НоменклатураКодТНВЭД="--";
		КонецЕсли;
		
		Если Строка(СтрокаТз.ПредставлениеСтраны)="Россия" 
			ИЛИ Строка(СтрокаТз.ПредставлениеСтраны)="Российская Федерация"
			ИЛИ СтрокаТз.СтранаПроисхождения=Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			СтрокаТз.ПредставлениеСтраны="";
			СтрокаТз.СтранаПроисхожденияКод="";
		Иначе
			Если ЗначениеЗаполнено(СтрокаТз.СтранаПроисхождения) Тогда
				СтрокаТз.ПредставлениеСтраны=СокрЛП(СтрокаТз.СтранаПроисхождения.Наименование);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТз.ЕдиницаИзмерения) Тогда
			СтрокаТз.Количество = 0;
			СтрокаТз.ЕдиницаИзмеренияКод="";
		КонецЕсли;
		СтрокаТз.БазоваяЕдиницаКодПоОКЕИ=СтрокаТз.ЕдиницаИзмеренияКод;
		СтрокаТз.НоменклатураНаименование=СокрЛП(СтрокаТз.НоменклатураНаименование) + ПечатныеФормыСервер.ПредставлениеСерий(СтрокаТз, Истина);
	КонецЦикла;
	
	//ОбщиеДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
	
	Возврат ОбщиеДанныеДляПечати;	
КонецФункции

Функция ИнициализацияСтруктурыДанных()
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("Склад");
	СтруктураДанных.Вставить("Номер");
	СтруктураДанных.Вставить("Дата");
	СтруктураДанных.Вставить("ДатаДокумента");
	СтруктураДанных.Вставить("Организация");
	СтруктураДанных.Вставить("АдресДоставки");
	СтруктураДанных.Вставить("Грузополучатель");
	СтруктураДанных.Вставить("Грузоотправитель");
	СтруктураДанных.Вставить("БанковскийСчет");
	СтруктураДанных.Вставить("Покупатель");
	СтруктураДанных.Вставить("Сделка");
	СтруктураДанных.Вставить("ДоговорКонтрагента");
	СтруктураДанных.Вставить("Основание");
	СтруктураДанных.Вставить("ОтветственноеЛицо");
	СтруктураДанных.Вставить("Подразделение");
	СтруктураДанных.Вставить("ВалютаДокумента");
	СтруктураДанных.Вставить("Курс");
	СтруктураДанных.Вставить("Кратность");
	СтруктураДанных.Вставить("УчитыватьНДС");
	СтруктураДанных.Вставить("СуммаВключаетНДС");
	СтруктураДанных.Вставить("ОтпускРазрешил");
	СтруктураДанных.Вставить("ОтпускПроизвел");
	СтруктураДанных.Вставить("ДоверенностьНомер");
	СтруктураДанных.Вставить("ДоверенностьДата");
	СтруктураДанных.Вставить("ДоверенностьВыдана");
	СтруктураДанных.Вставить("ДоверенностьЧерезКого");
	СтруктураДанных.Вставить("ИдентификаторГосКонтракта");
	СтруктураДанных.Вставить("ПодписьРуководителя");
	СтруктураДанных.Вставить("ПодписьГлавногоБухгалтера");
	СтруктураДанных.Вставить("ОснованиеРуководителя");
	СтруктураДанных.Вставить("ОснованиеГлавногоБухгалтера");
	СтруктураДанных.Вставить("ОснованиеПодписантаРуководителя");
	СтруктураДанных.Вставить("ОснованиеПодписантаГлавногоБухгалтера");
	СтруктураДанных.Вставить("ФИОРуководителя");
	СтруктураДанных.Вставить("ФИОГлавногоБухгалтера");
	
	Возврат СтруктураДанных
КонецФункции

Функция ИнициализацияТабличнойЧасти()
	
	Товары=Новый ТаблицаЗначений();
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("НоменклатураНаименование");
	Товары.Колонки.Добавить("НоменклатураКод");
	Товары.Колонки.Добавить("НоменклатураКодТНВЭД");
	Товары.Колонки.Добавить("БазоваяЕдиницаНаименование");
	Товары.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ВидУпаковки");
	Товары.Колонки.Добавить("КоличествоВОдномМесте",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("МассаБрутто",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Характеристика");
	Товары.Колонки.Добавить("Серия");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЕстьСкидкиПоСтроке");
	Товары.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоМест",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьБезНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьСНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ТабличнаяЧасть");
	Товары.Колонки.Добавить("ПроцентРучнойСкидки",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ПроцентАвтоматическойСкидки",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаАкциза",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ID",Новый ОписаниеТипов("Строка"));
	
	Возврат Товары;
КонецФункции

Функция ИнициализацияТабличнойЧастиКорректировочный()
	Товары=Новый ТаблицаЗначений();
	Товары.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ТабличнаяЧасть");
	Товары.Колонки.Добавить("НоменклатураКод");
	Товары.Колонки.Добавить("НоменклатураКодТНВЭД");
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("НоменклатураНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");	
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("НомерРазделаГТД");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	Товары.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьБезНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьСНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Характеристика");
	Товары.Колонки.Добавить("Серия");
	Товары.Колонки.Добавить("СуммаАкциза",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ID");
	/// для корректировочных форм
	Товары.Колонки.Добавить("КоличествоДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаНДСДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаНДСПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаНДСУвеличение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаНДСУменьшение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьБезНДСДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьБезНДСПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаБезНДСУвеличение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаБезНДСУменьшение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьСНДСДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьСНДСПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаСНДСУвеличение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаСНДСУменьшение",Новый ОписаниеТипов("Число"));
	
	Возврат Товары;
КонецФункции

Функция УниверсальныйПередаточныйДокумент_ПараметрыПечати(ПараметрыПечати,СсылкаНаОбъект)
	
	СведенияОПоставщике       = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Организация,        ПараметрыПечати.ДатаДокумента,, ПараметрыПечати.БанковскийСчет);
	СведенияОПокупателе       = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель,       ПараметрыПечати.ДатаДокумента);
	СведенияОГрузополучателе  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузополучатель,  ПараметрыПечати.ДатаДокумента);
	СведенияОГрузоотправителе = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузоотправитель, ПараметрыПечати.ДатаДокумента);
	
	ПараметрыПечати.Вставить("ПредставлениеГрузополучателя",?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузополучатель), "---", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"))); 
	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	
	ПараметрыПечати.Вставить("АдресПоставщика",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
	Если НЕ (ПараметрыПечати.ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если СведенияОПоставщике.ИНН=СведенияОГрузоотправителе.ИНН Тогда
			КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "КПП,", Ложь);
			ПараметрыПечати.АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ЮридическийАдрес,");
		КонецЕсли; //29.09.17
		
		Если ЗначениеЗаполнено(КПП) Тогда КПП="/"+КПП; КонецЕсли;
		ИНН=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
		
		ПараметрыПечати.Вставить("ИННпоставщика",ИНН+КПП);
		ИННпоставщикаДляПодвала = ?(ПустаяСтрока(ИНН), "", "ИНН") + ?(ПустаяСтрока(ИНН) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")+ИНН+КПП;
	Иначе
		ПараметрыПечати.Вставить("ИННпоставщика","---");
		ИННпоставщикаДляПодвала = "";
	КонецЕсли;
	
	Если УправлениеМетаданными.ЕстьРеквизит("Подвид", СсылкаНаОбъект.Метаданные()) И УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(СсылкаНаОбъект.Подвид)="Исправительный" Тогда
		ПараметрыПечати.Номер=ОбщегоНазначенияСервер.НомерНаПечать(ПараметрыПечати.Сделка);
		ПараметрыПечати.Дата=Формат(ПараметрыПечати.Сделка.Дата, "ДФ='дд ММММ гггг'") + " г.";
		НомерИсправления="";
		ДатаИсправления=Формат(ПараметрыПечати.ДатаДокумента,"ДФ='дд ММММ гггг'")+ " г.";
	Иначе
		ПараметрыПечати.Номер=ОбщегоНазначенияСервер.НомерНаПечать(СсылкаНаОбъект);
		ПараметрыПечати.Дата=Формат(ПараметрыПечати.ДатаДокумента, "ДФ='дд ММММ гггг'") + " г.";
		НомерИсправления="-";
		ДатаИсправления="-";
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ПредставлениеГрузоотправителя",?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузоотправитель), "он же", ?(ПараметрыПечати.Грузоотправитель = "он же", ПараметрыПечати.Грузоотправитель, ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,"))));
	Если СсылкаНаОбъект.Товары.Количество()=0 Тогда
		ПараметрыПечати.Вставить("ПредставлениеГрузоотправителя",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")+"---");
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ПредставлениеПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПокупателя",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	
	Если СведенияОПокупателе.ИНН=СведенияОГрузополучателе.ИНН Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(КПП) Тогда КПП = "/" + КПП; КонецЕсли;
	ИНН=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	ПараметрыПечати.Вставить("ИННПокупателя",ИНН+КПП);
	ИННПокупателяДляПодвала=?(ПустаяСтрока(ИНН), "", "ИНН")+?(ПустаяСтрока(ИНН) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")+ИНН+КПП;
	
	ПараметрыПечати.Вставить("Валюта",?(ЗначениеЗаполнено(ПараметрыПечати.ВалютаДокумента), ПараметрыПечати.ВалютаДокумента.НаименованиеПолное+", "+ПараметрыПечати.ВалютаДокумента.Код, ""));
	ПараметрыПечати.Вставить("Свидетельство", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
	
	Если ЗначениеЗаполнено(ПараметрыПечати.ДатаДокумента) Тогда
		ШаблонДатыОтгрузкиПередачи = Формат(ПараметрыПечати.ДатаДокумента, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
		ДлинаДаты = 32;
		ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
		ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
		ПараметрыПечати.Вставить("ДатаОтгрузкиПередачи", ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи,СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа), "года"));
	Иначе
		ПараметрыПечати.Вставить("ДатаОтгрузкиПередачи",  "«      »                    20     года");
	КонецЕсли;
	ПараметрыПечати.Вставить("Основание",СсылкаНаОбъект.ДоговорКонтрагента.Наименование);
	Если ЗначениеЗаполнено(ПараметрыПечати.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(ПараметрыПечати.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(ПараметрыПечати.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ПараметрыПечати.ДоверенностьЧерезКого) Тогда
		ПараметрыПечати.Основание=ПараметрыПечати.Основание+"; Доверенность "+ПараметрыПечати.ДоверенностьНомер+?(ЗначениеЗаполнено(ПараметрыПечати.ДоверенностьДата), " от "+Формат(ПараметрыПечати.ДоверенностьДата, "ДЛФ=DD"), "")
		+" "+ПараметрыПечати.ДоверенностьВыдана+" "+ПараметрыПечати.ДоверенностьЧерезКого;
	КонецЕсли;	
	
	Приставка="";
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		Приставка="(при наличии)";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПечати.ИдентификаторГосКонтракта) Тогда
		ПараметрыПечати.ИдентификаторГосКонтракта = "Идентификатор государственного контракта, договора (соглашения) "+Приставка+" : "+СокрЛП(ПараметрыПечати.ИдентификаторГосКонтракта);
	Иначе
		ПараметрыПечати.ИдентификаторГосКонтракта = "Идентификатор государственного контракта, договора (соглашения) "+Приставка+" :---";
	КонецЕсли;
	ПараметрыПечати.Вставить("СтатусУПД", 2);
	ПараметрыПечати.Вставить("ПоДокументу", "---");
	ПараметрыПечати.Вставить("ПредставлениеОрганизации",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
	+ ?(ПустаяСтрока(ИННпоставщикаДляПодвала), "" , ", ") + ИННпоставщикаДляПодвала);
	ПараметрыПечати.Вставить("ПредставлениеКонтрагента", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")
	+ ?(ПустаяСтрока(ИННПокупателяДляПодвала), "" , ", ") + ИННПокупателяДляПодвала);
	
	ПараметрыПечати.Вставить("СтоимостьБезНДС",        ПараметрыПечати.Позиции.Итог("СтоимостьБезНДС"));
	ПараметрыПечати.Вставить("СуммаНДС",          ПараметрыПечати.Позиции.Итог("СуммаНДС"));
	ПараметрыПечати.Вставить("СтоимостьСНДС",    ПараметрыПечати.Позиции.Итог("СтоимостьСНДС"));
	
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		Строчка.Цена=?(Строчка.Количество=0, 0, Окр(Строчка.СтоимостьБезНДС / Строчка.Количество, 2));
		Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
			Если НЕ ЗначениеЗаполнено(Строчка.НоменклатураКодТНВЭД) Тогда
				Строчка.НоменклатураКодТНВЭД="--";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	

	Возврат ПараметрыПечати;
КонецФункции

Функция Печать_УниверсальныйПередаточныйДокумент(СтруктураПараметров, ТабДокумент)
	
	ОбщиеПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	
	ПараметрыПечати=УниверсальныйПередаточныйДокумент_ПараметрыПечати(ОбщиеПараметрыПечати,СтруктураПараметров.СсылкаНаОбъект);
	
	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
//	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_УниверсальныйПередаточныйДокумент";
	
	Макет = ИнициализацияМакета(СтруктураПараметров, "УниверсальныйПередаточныйДокумент");
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка20171001");
	Иначе	
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы20171001");
	Иначе	
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	КонецЕсли;
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим строки таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакета=Макет.ПолучитьОбласть("Строка20171001");
	Иначе	
		ОбластьМакета=Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого20171001");
	Иначе	
		ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	КонецЕсли;
	
	НомерСтроки = 0;
	НомерСтраницы   = 1;
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	ОбластьМакетаНомерСтраницы = Макет.ПолучитьОбласть("НумерацияЛистов");
	
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.Заполнить(Строчка);
		ОбластьМакета.Параметры.НомерСтроки=НомерСтроки;
		//Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		//	Если НЕ ЗначениеЗаполнено(Строчка.НоменклатураКодТНВЭД) Тогда
		//		ОбластьМакета.Параметры.НоменклатураКодТНВЭД="--";
		//	КонецЕсли;
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.СуммаАкциза) Тогда
			ОбластьМакета.Параметры.СуммаАкциза="Без акциза";
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		Если СтруктураПараметров.Свойство("МодульПечати") Тогда
			Если СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ВключитьРазрывСтраницы Тогда
				СтрокаСПодвалом=Новый Массив;
				СтрокаСПодвалом.Добавить(ОбластьМакета);
				Если НомерСтроки = КоличествоСтрок Тогда
					// Если последняя строка, то должен поместится итог и подвал
					СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
				КонецЕсли;
				
				Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
					Если КоличествоСтрок > 0 Тогда
						// Вывод разделителя и заголовка таблицы на новой странице
						НомерСтраницы = НомерСтраницы + 1;
						
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						ОбластьМакетаНомерСтраницы.Параметры.НомерЛиста = НомерСтраницы;
						ОбластьМакетаНомерСтраницы.Параметры.Номер = "Универсальный передаточный документ № "+СокрЛП(ПараметрыПечати.Номер)+" от "+СокрЛП(Формат(ПараметрыПечати.ДатаДокумента,"ДЛФ=DD"));
						ТабДокумент.Вывести(ОбластьМакетаНомерСтраницы);
						ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		//Для Индекс = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		//	ТекПараметр = ОбластьМакета.Параметры.Получить(Индекс);
		//	Если (Найти(ТекПараметр, "--") <> 0) Тогда
		//		ОбластьМакета.Параметры.Установить(Индекс, "");
		//	КонецЕсли;
		//КонецЦикла;
		
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета); //**
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Если ПараметрыПечати.Позиции.Количество() > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакетаИтого.Параметры.Заполнить(ПараметрыПечати);
	//ОбластьМакетаИтого.Параметры.СтоимостьБезНДС = СтоимостьБезНДС;
	//ОбластьМакетаИтого.Параметры.СуммаНДС = СуммаНДС;
	//ОбластьМакетаИтого.Параметры.СтоимостьСНДС    = СтоимостьСНДС;
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПечати);
	ОбластьМакетаПодвал.Параметры.КоличествоЛистов="Документ составлен на "+СокрЛП(НомерСтраницы)+" листах";
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ОбластьМакетаПодвалНакладной.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвалНакладной);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	Возврат ТабДокумент;
КонецФункции

Функция Печать_УниверсальныйКорректировочныйДокумент(СтруктураПараметров,ТабДокумент)
	ПараметрыПечати=ПолучитьОбщиеДанныеДляПечатиКорректировочный(СтруктураПараметров.СсылкаНаОбъект);
	
	ОригиналСчетФактуры=СтруктураПараметров.СсылкаНаОбъект;
	ОригиналДокОснование=СтруктураПараметров.СсылкаНаОбъект.Сделка;
	//Если НЕ ОригиналСчетФактуры.ДокументыОснования.Количество()=0 Тогда
	//	ОригиналДокОснование=ОригиналСчетФактуры.ДокументыОснования[0].ДокументОснование;
	//КонецЕсли;
	ПараметрыПечати.Дата=Формат(ПараметрыПечати.ДатаДокумента,"ДФ=dd.MM.yyyy");
	
	Если ЗначениеЗаполнено(ОригиналСчетФактуры) Тогда
		МетаданныеДокумента = ОригиналСчетФактуры.Метаданные();
		ПараметрыПечати.Вставить("РеквизитыПередаточныхДокументов", "Универсальный передаточный документ " +МетаданныеДокумента.Синоним + " № "+ СокрЛП(ОригиналСчетФактуры.Номер) + " от " + Формат(ОригиналСчетФактуры.Дата,"ДФ=дд.ММ.гггг"));
    Конецесли;

	ПараметрыПечати.Вставить("Номер",  СокрЛП(ОбщегоНазначенияСервер.НомерНаПечать(ОригиналСчетФактуры)));
	ПараметрыПечати.Вставить("НомерСчетаФактурыОснования",  СокрЛП(ОбщегоНазначенияСервер.НомерНаПечать(ОригиналДокОснование)));
	ПараметрыПечати.Вставить("ДатаСчетаФактурыОсновнания",  Формат(ОригиналДокОснование.Дата,"ДФ=dd.MM.yyyy"));
	ПараметрыПечати.Вставить("СтатусУКД",2);
	ПараметрыПечати.Вставить("Валюта",?(ЗначениеЗаполнено(ПараметрыПечати.ВалютаДокумента), ПараметрыПечати.ВалютаДокумента.НаименованиеПолное+", "+ПараметрыПечати.ВалютаДокумента.Код, ""));
	Если ЗначениеЗаполнено(ПараметрыПечати.ИдентификаторГосКонтракта) Тогда
		ПараметрыПечати.ИдентификаторГосКонтракта = СокрЛП(ПараметрыПечати.ИдентификаторГосКонтракта);
	Иначе
		ПараметрыПечати.ИдентификаторГосКонтракта = "---";
	КонецЕсли;

	СведенияОПокупателе 	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента);
	СведенияОПоставщике  	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Организация, ПараметрыПечати.ДатаДокумента,, ПараметрыПечати.БанковскийСчет);
	СведенияОГрузоотправителе = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(?(ПараметрыПечати.Грузоотправитель = "он же", Неопределено, ПараметрыПечати.Грузоотправитель), ПараметрыПечати.ДатаДокумента);
	СведенияОГрузополучателе  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузополучатель, ПараметрыПечати.ДатаДокумента);
	
	АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если СведенияОПоставщике.ИНН=СведенияОГрузоотправителе.ИНН Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "КПП,", Ложь);
		АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ЮридическийАдрес,");
	КонецЕсли; //29.09.17
	Если ЗначениеЗаполнено(КПП) Тогда КПП="/"+КПП; КонецЕсли;
	ПараметрыПечати.Вставить("ИННКПППродавца",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
	ПараметрыПечати.Вставить("НаименованиеПродавца",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПродавца",АдресПоставщика);
	
	КПП = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если СведенияОПокупателе.ИНН=СведенияОГрузополучателе.ИНН Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
	КонецЕсли; //29.09.17
	
	ПараметрыПечати.Вставить("НаименованиеПокупателя",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	Если ЗначениеЗаполнено(КПП) Тогда КПП = "/" + КПП; КонецЕсли;
	ПараметрыПечати.Вставить("ИННКПППокупателя",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
	ПараметрыПечати.Вставить("ПредставлениеОрганизации",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")+?(ПустаяСтрока(ПараметрыПечати.ИННКПППродавца), "" , ", ") + ПараметрыПечати.ИННКПППродавца);
	ПараметрыПечати.Вставить("ПредставлениеКонтрагента",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")+?(ПустаяСтрока(ПараметрыПечати.ИННКПППокупателя), "" , ", ") + ПараметрыПечати.ИННКПППокупателя);
	
	СтруктураПоискаПоID=Новый Структура;
	СтруктураПоискаПоID.Вставить("ID","");

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",Неопределено);
	Для Каждого СтрокаТз ИЗ ПараметрыПечати.Позиции Цикл
		СтруктураПоиска.Номенклатура=СтрокаТз.Номенклатура;
		СтруктураПоискаПоID.ID=СтрокаТз.ID;
		МассивСтрок=ОригиналДокОснование[СтрокаТз.ТабличнаяЧасть].НайтиСтроки(СтруктураПоискаПоID);
		Если МассивСтрок.Количество()=0 Тогда
			МассивСтрок=ОригиналДокОснование[СтрокаТз.ТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
		КонецЕсли;	
		Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
			СтрокаТз.КоличествоДоИзменения=СтрокаТз.КоличествоДоИзменения+СтрокаМассива.Количество;
			СтрокаТз.СуммаНДСДоИзменения=СтрокаТз.СуммаНДСДоИзменения+СтрокаМассива.СуммаНДС;
			СтрокаТз.СтоимостьБезНДСДоИзменения=СтрокаТз.СтоимостьБезНДСДоИзменения+?(ОригиналДокОснование.СуммаВключаетНДС,СтрокаМассива.Сумма-СтрокаМассива.СуммаНДС,СтрокаМассива.Сумма);
			СтрокаТз.СтоимостьСНДСДоИзменения=СтрокаТз.СтоимостьСНДСДоИзменения+?(ОригиналДокОснование.СуммаВключаетНДС,СтрокаМассива.Сумма,СтрокаМассива.Сумма+СтрокаМассива.СуммаНДС);
			СтрокаТз.ЦенаДоИзменения=СтрокаМассива.Цена;
			Если НЕ СтрокаТз.КоличествоДоИзменения=0 Тогда
				СтрокаТз.ЦенаДоИзменения=?(ОригиналДокОснование.СуммаВключаетНДС,Окр(СтрокаТз.СтоимостьБезНДСДоИзменения/СтрокаТз.КоличествоДоИзменения,2),СтрокаМассива.Цена);
			КонецЕсли;
		КонецЦикла;	
		СтрокаТз.КоличествоПослеИзменения=СтрокаТз.Количество+СтрокаТз.КоличествоДоИзменения;
		СтрокаТз.СуммаНДСПослеИзменения=СтрокаТз.СуммаНДС+СтрокаТз.СуммаНДСДоИзменения;
		СтрокаТз.СтоимостьБезНДСПослеИзменения=СтрокаТз.СтоимостьБезНДС+СтрокаТз.СтоимостьБезНДСДоИзменения;
		СтрокаТз.СтоимостьСНДСПослеИзменения=СтрокаТз.СтоимостьСНДС+СтрокаТз.СтоимостьСНДСДоИзменения;
		СтрокаТз.ЦенаПослеИзменения=СтрокаТз.Цена;
		Если НЕ СтрокаТз.КоличествоПослеИзменения=0 Тогда
			СтрокаТз.ЦенаПослеИзменения=?(ПараметрыПечати.СуммаВключаетНДС,Окр(СтрокаТз.СтоимостьБезНДСПослеИзменения/СтрокаТз.КоличествоПослеИзменения,2),СтрокаТз.ЦенаПослеИзменения);
		КонецЕсли;	
		
		Если СтрокаТз.СуммаНДС<0 Тогда
			СтрокаТз.РазницаНДСУменьшение=-СтрокаТз.СуммаНДС;
		Иначе
			СтрокаТз.РазницаНДСУвеличение=СтрокаТз.СуммаНДС;
		КонецЕсли;	
		
		Если СтрокаТз.СтоимостьБезНДС<0 Тогда
			СтрокаТз.РазницаБезНДСУменьшение=-СтрокаТз.СтоимостьБезНДС;
		Иначе
			СтрокаТз.РазницаБезНДСУвеличение=СтрокаТз.СтоимостьБезНДС;
		КонецЕсли;	
		
		Если СтрокаТз.СтоимостьСНДС<0 Тогда
			СтрокаТз.РазницаСНДСУменьшение=-СтрокаТз.СтоимостьСНДС;
		Иначе
			СтрокаТз.РазницаСНДСУвеличение=СтрокаТз.СтоимостьСНДС;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтрокаТз.НоменклатураКодТНВЭД) ИЛИ СтрокаТз.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаТз.НоменклатураКодТНВЭД="--";
		КонецЕсли;
	КонецЦикла;
	ПараметрыПечати.Вставить("РазницаБезНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаБезНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаБезНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаБезНДСУвеличение"));
	ПараметрыПечати.Вставить("РазницаНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаНДСУвеличение"));
	ПараметрыПечати.Вставить("РазницаСНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаСНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаСНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаСНДСУвеличение"));


	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет = ИнициализацияМакета(СтруктураПараметров, "УниверсальныйКорректировочныйДокумент");
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьОснования");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	ОбластьМакетаИтого=Макет.ПолучитьОбласть("Итого");	
	ОбластьМакетаПодвал=Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвалНакладной=Макет.ПолучитьОбласть("ПодвалНакладной");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		НомерСтроки=НомерСтроки+1;
		ОбластьМакета=Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(Строчка);
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		
		Если СтруктураПараметров.Свойство("МодульПечати") Тогда
			Если СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ВключитьРазрывСтраницы Тогда
				СтрокаСПодвалом=Новый Массив;
				СтрокаСПодвалом.Добавить(ОбластьМакета);
				Если НомерСтроки = КоличествоСтрок Тогда
					// Если последняя строка, то должен поместится итог и подвал
					СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
				КонецЕсли;
				
				Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
					Если КоличествоСтрок > 0 Тогда
						// Вывод разделителя и заголовка таблицы на новой странице
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, , ТабДокумент.ВысотаТаблицы, ).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакетаИтого.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ОбластьМакетаПодвалНакладной.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвалНакладной);
	
	ТабДокумент.ВерхнийКолонтитул.Выводить=Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа           = "Лист [&НомерСтраницы]";
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева            = "Универсальный корректировочный документ №"+ПараметрыПечати.Номер+"от "+ПараметрыПечати.Дата;
	
	Возврат ТабДокумент;
КонецФункции	

Функция ТОРГ12_ПараметрыПечати(ПараметрыПечати, СсылкаНаОбъект,БезУслуг)
	МассивСтрокДляУдаления=Новый Массив;
	Если БезУслуг Тогда
		Для Каждого СтрокаТз ИЗ ПараметрыПечати.Позиции Цикл
			Если НЕ СтрокаТз.ТабличнаяЧасть="Услуги" Тогда Продолжить; КонецЕсли;
			МассивСтрокДляУдаления.Добавить(СтрокаТз);
		КонецЦикла;	
	КонецЕсли;
	Для Каждого СтрокаМ ИЗ МассивСтрокДляУдаления Цикл
		ПараметрыПечати.Позиции.Удалить(СтрокаМ);
	КонецЦикла;	
	
	СведенияОПоставщике=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Организация, ПараметрыПечати.ДатаДокумента,, ПараметрыПечати.БанковскийСчет);
	СведенияОПокупателе=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента);
	СведенияОГрузополучателе=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузополучатель, ПараметрыПечати.ДатаДокумента);
	СведенияОГрузоотправитель=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузоотправитель, ПараметрыПечати.ДатаДокумента);
	
	Если ПараметрыПечати.Организация = ПараметрыПечати.Грузоотправитель Тогда
		ПараметрыПечати.Вставить("ПредставлениеОрганизации", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике));
	Иначе
		ПараметрыПечати.Вставить("ПредставлениеОрганизации",  ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	Если СокрЛП(ПараметрыПечати.АдресДоставки) <> "" Тогда
		ПараметрыПечати.АдресДоставки = КонтактнаяИнформацияСервер.ПолучитьПредставлениеАдресаПоСтрока(ПараметрыПечати.АдресДоставки);
	Иначе
		ПараметрыПечати.АдресДоставки = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ОснованиеНомер",ПараметрыПечати.ДоговорКонтрагента.Номер);
	ПараметрыПечати.Вставить("ОснованиеДата",?(ЗначениеЗаполнено(ПараметрыПечати.ДоговорКонтрагента.Дата), ПараметрыПечати.ДоговорКонтрагента.Дата, ""));
	ПараметрыПечати.Вставить("НомерДокумента", ОбщегоНазначенияСервер.НомерНаПечать(СсылкаНаОбъект));
	ПараметрыПечати.Вставить("ПредставлениеПодразделения", ПараметрыПечати.Подразделение);
	ПараметрыПечати.Вставить("ПредставлениеГрузополучателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике));
	ПараметрыПечати.Вставить("ПредставлениеПлательщика", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе));
	ПараметрыПечати.Вставить("ОрганизацияПоОКПО", СведенияОПоставщике);
	ПараметрыПечати.Вставить("СведенияОПокупателе", СведенияОПокупателе);
	ПараметрыПечати.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);
	ПараметрыПечати.Вставить("СведенияОГрузоотправитель", СведенияОГрузоотправитель);
	ПараметрыПечати.Вставить("ОрганизацияПоОКПО", СведенияОГрузоотправитель.КодПоОКПО);
	ПараметрыПечати.Вставить("ВидДеятельностиПоОКДП", ПараметрыПечати.Организация.КодОКВЭД);
	ПараметрыПечати.Вставить("ГрузополучательПоОКПО", СведенияОГрузополучателе.КодПоОКПО);
	ПараметрыПечати.Вставить("ПоставщикПоОКПО", СведенияОПоставщике.КодПоОКПО);
	ПараметрыПечати.Вставить("ПлательщикПоОКПО", СведенияОПокупателе.КодПоОКПО);
	ПараметрыПечати.Вставить("ВалютаБух", МодульВалютногоУчета.ПолучитьВалюту("Бух"));
	ПараметрыПечати.Вставить("ЕдиницаИзмеренияВеса", Константы.ЕдиницаИзмеренияВеса.Получить());
	ПараметрыПечати.Вставить("ФИОГлавБухгалтера", 		ПараметрыПечати.ФИОГлавногоБухгалтера);
	ПараметрыПечати.ФИОРуководителя=ПараметрыПечати.ФИООтветственного;
	ПараметрыПечати.ДолжностьРуководителя=ПараметрыПечати.ДолжностьОтветственного;
	
	ПолнаяДатаДокумента = Формат(ПараметрыПечати.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ПараметрыПечати.Вставить("ДатаДокументаДень", """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""");
	ПараметрыПечати.Вставить("ДатаДокументаМесяц",Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1));
	ПараметрыПечати.Вставить("ДатаДокументаГод",  Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель));	
	
	// Доверенность
	ПараметрыПечати.ДоверенностьДата      = Формат(ПараметрыПечати.ДоверенностьДата, "ДФ='дд ММММ гггг'");
	ПараметрыПечати.Вставить("МассаБрутто",  ПараметрыПечати.Позиции.Итог("МассаБрутто"));
	ПараметрыПечати.Вставить("КоличествоМест",         ПараметрыПечати.Позиции.Итог("КоличествоМест"));
	ПараметрыПечати.Вставить("Количество",   ПараметрыПечати.Позиции.Итог("Количество"));
	ПараметрыПечати.Вставить("СтоимостьБезНДС",        ПараметрыПечати.Позиции.Итог("СтоимостьБезНДС"));
	ПараметрыПечати.Вставить("СуммаНДС",          ПараметрыПечати.Позиции.Итог("СуммаНДС"));
	ПараметрыПечати.Вставить("СтоимостьСНДС",    ПараметрыПечати.Позиции.Итог("СтоимостьСНДС"));
	
	тзТовары=ПараметрыПечати.Позиции.СкопироватьКолонки();
	тзТара=ПараметрыПечати.Позиции.СкопироватьКолонки();
	Для Каждого СтрокаКоллекции ИЗ ПараметрыПечати.Позиции Цикл
		СтрокаКоллекции.Цена=?(СтрокаКоллекции.Количество=0, 0, Окр(СтрокаКоллекции.СтоимостьБезНДС / СтрокаКоллекции.Количество, 2));
		Если СтрокаКоллекции.ТабличнаяЧасть="ВозвратнаяТара" Тогда
			ЗаполнитьЗначенияСвойств(тзТара.Добавить(),СтрокаКоллекции);
		Иначе
			ЗаполнитьЗначенияСвойств(тзТовары.Добавить(),СтрокаКоллекции);
		КонецЕсли;	
	КонецЦикла;	
	ПараметрыПечати.Вставить("МассаБруттоПоТовару",  тзТовары.Итог("МассаБрутто"));
	ПараметрыПечати.Вставить("КоличествоМестПоТовару",    тзТовары.Итог("КоличествоМест"));
	ПараметрыПечати.Вставить("КоличествоПоТовару",   	тзТовары.Итог("Количество"));
	ПараметрыПечати.Вставить("СтоимостьБезНДСПоТовару",    тзТовары.Итог("СтоимостьБезНДС"));
	ПараметрыПечати.Вставить("СуммаНДСПоТовару",          тзТовары.Итог("СуммаНДС"));
	ПараметрыПечати.Вставить("СтоимостьСНДСПоТовару",    тзТовары.Итог("СтоимостьСНДС"));

	ПараметрыПечати.Вставить("МассаБруттоПоТаре",  тзТара.Итог("МассаБрутто"));
	ПараметрыПечати.Вставить("КоличествоМестПоТаре",    тзТара.Итог("КоличествоМест"));
	ПараметрыПечати.Вставить("КоличествоПоТаре",   	тзТара.Итог("Количество"));
	ПараметрыПечати.Вставить("СтоимостьБезНДСПоТаре",    тзТара.Итог("СтоимостьБезНДС"));
	ПараметрыПечати.Вставить("СуммаНДСПоТаре",          тзТара.Итог("СуммаНДС"));
	ПараметрыПечати.Вставить("СтоимостьСНДСПоТаре",    тзТара.Итог("СтоимостьСНДС"));
	
	Если ПараметрыПечати.МассаБрутто>0 Тогда
		ПараметрыПечати.Вставить("МассаГрузаПрописью",  ЧислоПрописью(ПараметрыПечати.МассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ПараметрыПечати.ЕдиницаИзмеренияВеса) + ".");
	КонецЕсли;
	
	Если ПараметрыПечати.КоличествоМест>0 Тогда
		ПараметрыПечати.Вставить("ВсегоМестПрописью",  ЧислоПрописью(ПараметрыПечати.КоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	ПараметрыПечати.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",  ЧислоПрописью(ПараметрыПечати.Позиции.Количество(), ,",,,,,,,,0"));
	ПараметрыПечати.Вставить("СуммаПрописью",  ОбщегоНазначения.СформироватьСуммуПрописью(ПараметрыПечати.СтоимостьСНДС, ПараметрыПечати.ВалютаБух));
	Возврат ПараметрыПечати;
КонецФункции

Функция Печать_ТОРГ12(СтруктураПараметров, ТабДокумент, БезУслуг=Ложь)
	ОбщиеПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	ПараметрыПечати=ТОРГ12_ПараметрыПечати(ОбщиеПараметрыПечати, СтруктураПараметров.СсылкаНаОбъект,БезУслуг);
	
	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ИспользоватьПараметрыПечати=Ложь;
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		ИспользоватьПараметрыПечати=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ИспользоватьПараметрыПечати;
	КонецЕсли; 
	Если НЕ ИспользоватьПараметрыПечати Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	
	Макет=ИнициализацияМакета(СтруктураПараметров, "ТОРГ12");
	
	ОбластьМакета=Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);	
	ТабДокумент.Вывести(ОбластьМакета);
	
	НомерСтраницы   = 1;
	
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Ном=0;
	Для Каждого ВыборкаСтрок Из ПараметрыПечати.Позиции Цикл
		Если ВыборкаСтрок.ТабличнаяЧасть = "ВозвратнаяТара" Тогда Продолжить; КонецЕсли;
		Ном = Ном + 1;
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		Если Ном = 1 Тогда // первая срока
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
		Иначе
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаНаСтранице       = 0;
				ИтогоНДСНаСтранице         = 0;
				ИтогоСуммаСНДСНаСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
			КонецЕсли;
		КонецЕсли;		
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + ВыборкаСтрок.МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + ВыборкаСтрок.КоличествоМест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + ВыборкаСтрок.Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + ВыборкаСтрок.СтоимостьБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + ВыборкаСтрок.СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + ВыборкаСтрок.СтоимостьСНДС;
	КонецЦикла;
	
	Если НЕ Ном =0 Тогда
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		ОбластьМакетаВсегоТовар= Макет.ПолучитьОбласть("ВсегоТовар");
		ОбластьМакетаВсегоТовар.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакетаВсегоТовар);
	КонецЕсли;
	
		
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	ВыводитьПодвал=Ложь;
	НомТары=0;
	Для Каждого ВыборкаСтрок Из ПараметрыПечати.Позиции Цикл
		Если НЕ ВыборкаСтрок.ТабличнаяЧасть = "ВозвратнаяТара" Тогда Продолжить; КонецЕсли;
			ВыводитьПодвал=Истина;	
			Ном = Ном + 1;
			НомТары=НомТары+1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			Если Ном = 1 Тогда // первая срока
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
			Иначе
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				Если Ном = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;		
				
				Если НомТары <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
					
					ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// очистим итоги по странице
					ИтогоМассаБруттоНаСтранице = 0;
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаНаСтранице       = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				КонецЕсли;
			КонецЕсли;		
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// увеличим итоги по странице
			ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + ВыборкаСтрок.МассаБрутто;
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + ВыборкаСтрок.КоличествоМест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + ВыборкаСтрок.Количество;
			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + ВыборкаСтрок.СтоимостьБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + ВыборкаСтрок.СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + ВыборкаСтрок.СтоимостьСНДС;
			
	КонецЦикла;
	
	Если ВыводитьПодвал=Истина Тогда
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
		
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		ОбластьМакетаВсегоТара = Макет.ПолучитьОбласть("ВсегоТара");
		ОбластьМакетаВсегоТара.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакетаВсегоТара);
	КонецЕсли;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета=Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;	
КонецФункции

Функция АктОбОказанииУслуг_ПараметрыПечати(ПараметрыПечати,СсылкаНаОбъект)
	
	МассивСтрокДляУдаления=Новый Массив;
	Для каждого ВыборкаСтрокТовары из ПараметрыПечати.Позиции Цикл 
		Если ВыборкаСтрокТовары.ТабличнаяЧасть="Услуги" Тогда Продолжить; КонецЕсли;
		МассивСтрокДляУдаления.Добавить(ВыборкаСтрокТовары);
		Если НЕ ПараметрыПечати.СуммаВключаетНДС Тогда
			ВыборкаСтрокТовары.Цена=ВыборкаСтрокТовары.СтоимостьСНДС/?(ВыборкаСтрокТовары.Количество=0,1,ВыборкаСтрокТовары.Количество); 
		Конецесли;	
	КонецЦикла;
	Для Каждого СтрокаМ ИЗ МассивСтрокДляУдаления Цикл
		ПараметрыПечати.Позиции.Удалить(СтрокаМ);
	КонецЦикла;	

	ВалютаБухУчета=МодульВалютногоУчета.ПолучитьВалюту("Бух");
	СуммыВРублях=ПараметрыПечати.ВалютаДокумента = ВалютаБухУчета;
	
	Руководители=ПечатныеФормыСервер.ОтветственныеЛицаОрганизации(ПараметрыПечати.Организация, ПараметрыПечати.ДатаДокумента, СсылкаНаОбъект);
	Руководитель=УправлениеКонфигурациейСервер.ФИО(Руководители.РуководительФизЛицо, "Родительный", Истина);
	ДействуетНаОсновании=Руководители.РуководительДействуетНаОсновании;
	
	СведенияОрганизации=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Организация, ПараметрыПечати.ДатаДокумента);
	
	стрДолжностьРуководителя="";
	стрДолжность=СтрЗаменить(ПараметрыПечати.ДолжностьОтветственного, " ", Символы.ПС);
	Для ъ=1 По СтрЧислоСтрок(стрДолжность) Цикл
		стрБуфер=УправлениеКонфигурациейСервер.ВыполнитьСклонениеСлова(СтрПолучитьСтроку(стрДолжность, ъ),"Мужской", "Фамилия").Родительный;
		стрДолжностьРуководителя=стрДолжностьРуководителя+?(стрДолжностьРуководителя="", "", " ")+стрБуфер;
	КонецЦикла; 
	
	ПредставлениеПоставщика =ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОрганизации, "ПолноеНаименование,");
	Если ДействуетНаОсновании="" Тогда
		ДействуетНаОсновании="устава";
	КонецЕсли;	
	ПредставлениеПоставщика1=ПредставлениеПоставщика+" в лице "+стрДолжностьРуководителя+" "+Руководитель+" действующего на основании "+ДействуетНаОсновании;
	ПредставлениеПолучателя =ПечатныеФормыСервер.ОписаниеОрганизации(КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента), "ПолноеНаименование,");
	ПредставлениеПолучателя1=ПредставлениеПолучателя+" в лице "+ПараметрыПечати.Покупатель.ПараметрыПечати_Должность+" "+ПараметрыПечати.Покупатель.ПараметрыПечати_ВЛице+" действующего на основании "+ПараметрыПечати.Покупатель.ПараметрыПечати_Основание;
	
	ВалютаПечати = ?(СуммыВРублях, ВалютаБухУчета, ПараметрыПечати.ВалютаДокумента);
	
	ПараметрыПечати.Вставить("КДоговору","к договору №"+СокрЛП(ПараметрыПечати.ДоговорКонтрагента.Номер)+" от "+Формат(ПараметрыПечати.ДоговорКонтрагента.Дата, "ДЛФ=D"));
	ПараметрыПечати.Вставить("ТекстЗаголовка","Акт приемки-сдачи работ № "+Строка(ПараметрыПечати.Номер)+" от "+Формат(ПараметрыПечати.ДатаДокумента, "ДЛФ=Д"));
	ПараметрыПечати.Вставить("Исполнитель",ПредставлениеПоставщика1);
	ПараметрыПечати.Вставить("Заказчик",ПредставлениеПолучателя1);
	ПараметрыПечати.Вставить("Комментарий","Комментарий:"+СокрЛП(СсылкаНаОбъект.Комментарий));
	НачалоПериода=СсылкаНаОбъект.НачалоПериода;
	КонецПериода=СсылкаНаОбъект.КонецПериода;
	ТекстПериод = "";
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	ПараметрыПечати.Вставить("ПериодДоговора",ТекстПериод);
	ПараметрыПечати.Вставить("СтоимостьСНДС",ОбщегоНазначения.ФорматСумм(ПараметрыПечати.Позиции.Итог("СтоимостьСНДС")));
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("СуммаНДС",ОбщегоНазначения.ФорматСумм(ПараметрыПечати.Позиции.Итог("СуммаНДС")));
		ПараметрыПечати.Вставить("НДС", "В том числе НДС");
	КонецЕсли;
	ПараметрыПечати.Вставить("СуммаПрописью",ОбщегоНазначения.СформироватьСуммуПрописью(ПараметрыПечати.Позиции.Итог("СтоимостьСНДС"), ВалютаПечати));
	ПараметрыПечати.Вставить("ДатаПодписи",Формат(ПараметрыПечати.Дата, "ДЛФ=DD"));
	ПараметрыПечати.Вставить("ФактическийАдрес",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОрганизации, "ФактическийАдрес,"));
	ПараметрыПечати.Вставить("Отпустил",ПредставлениеПоставщика);
	ПараметрыПечати.Вставить("Получил",ПредставлениеПолучателя);
		
	Возврат ПараметрыПечати;
КонецФункции	

Функция Печать_АктОбОказанииУслуг(СтруктураПараметров, ТабДокумент)
	
	ОбщиеПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	ПараметрыПечати=АктОбОказанииУслуг_ПараметрыПечати(ОбщиеПараметрыПечати, СтруктураПараметров.СсылкаНаОбъект);
	
	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет=ИнициализацияМакета(СтруктураПараметров, "Акт");
	
	ОбластьМакета=Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета=Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьСтроки=Макет.ПолучитьОбласть("Строка");
	Для Каждого СтрокаТабличнойЧасти Из ПараметрыПечати.Позиции Цикл	
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	ОбластьМакета=Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьМакета=Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета=Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета=Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
КонецФункции

Функция М15_ПараметрыПечати(ПараметрыПечати,СсылкаНаОбъект)
	
	СведенияОбОрганизации = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Организация, ПараметрыПечати.ДатаДокумента);
	ПараметрыПечати.Вставить("ПредставлениеОрганизации",  ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации));
	ПараметрыПечати.Вставить("ОрганизацияПоОКПО",         СведенияОбОрганизации.КодПоОКПО);
	ПараметрыПечати.Вставить("НомерДокумента",            ОбщегоНазначенияСервер.НомерНаПечать(СсылкаНаОбъект));
	ПараметрыПечати.Вставить("КонтрагентНаименование", СокрЛП(ПараметрыПечати.Покупатель.НаименованиеПолное));
	ПараметрыПечати.Вставить("ФИОГлавБухгалтера", 		ПараметрыПечати.ФИОГлавногоБухгалтера);
	ПараметрыПечати.Вставить("СкладНаименование", 		ПараметрыПечати.ФИОГлавногоБухгалтера);
	ПараметрыПечати.Вставить("СкладНаименование", 		ПараметрыПечати.Склад.Наименование);
	ПараметрыПечати.Вставить("ДатаСоставления", 		Формат(ПараметрыПечати.ДатаДокумента,"ДФ=dd.MM.yyyy"));

	ПараметрыПечати.Позиции.Колонки.НоменклатураНаименование.Имя="ТоварНаименование";
	ПараметрыПечати.Позиции.Колонки.СтоимостьБезНДС.Имя="СуммаБезНДС";
	ПараметрыПечати.Позиции.Колонки.СтоимостьСНДС.Имя="СуммаСНДС";
	МассивСтрокДляУдаления=Новый Массив;
	Для Каждого СтрокаТз ИЗ ПараметрыПечати.Позиции Цикл
		Если НЕ СтрокаТз.ТабличнаяЧасть="Товары" Тогда 
			МассивСтрокДляУдаления.Добавить(СтрокаТз);
		Иначе
			СтрокаТз.Цена            = СтрокаТз.СуммаБезНДС / СтрокаТз.Количество;
			СтрокаТз.ТоварНаименование = СокрЛП(СтрокаТз .ТоварНаименование) + ПечатныеФормыСервер.ПредставлениеСерий(СтрокаТз);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаМ ИЗ МассивСтрокДляУдаления Цикл
		ПараметрыПечати.Позиции.Удалить(СтрокаМ);
	КонецЦикла;	

	ПараметрыПечати.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",  ЧислоПрописью(ПараметрыПечати.Позиции.Количество(), ,",,,,,,,,0"));
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(ПараметрыПечати.Позиции.Итог("СуммаСНДС"), МодульВалютногоУчета.ПолучитьВалюту("Бух")));
	ПараметрыПечати.Вставить("ИтогНДС",       ПараметрыПечати.Позиции.Итог("СуммаНДС"));

    Возврат ПараметрыПечати;
КонецФункции
	
Функция Печать_М15(СтруктураПараметров, ТабДокумент)
	ОбщиеПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	ПараметрыПечати=М15_ПараметрыПечати(ОбщиеПараметрыПечати, СтруктураПараметров.СсылкаНаОбъект);
	
	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;

	Макет=ИнициализацияМакета(СтруктураПараметров, "М15");
	
	ТабДокумент.ИмяПараметровПечати="ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М15";
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ОбластьМакета=Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	НомерСтраницы   = 1;
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	Для Каждого СтрокаТз ИЗ ПараметрыПечати.Позиции Цикл
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		Если СтрокаТз.НомерСтроки = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;		
		
		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			НомерСтраницы	= НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТз);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	// Выводим итоги по документу
	ОбластьПодвала.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьПодвала);
	
	Возврат ТабДокумент;
КонецФункции

Функция Накладная_ПараметрыПечати(ПараметрыПечати, СсылкаНаОбъект, ТоварныйЧек)
	
	Если ТоварныйЧек Тогда
		ПараметрыПечати.Вставить("ТекстЗаголовка",  ОбщегоНазначения.СформироватьЗаголовокДокумента(СсылкаНаОбъект, "Товарный чек"));
	Иначе	
		ПараметрыПечати.Вставить("ТекстЗаголовка",  ОбщегоНазначения.СформироватьЗаголовокДокумента(СсылкаНаОбъект, "Расходная накладная"));
	КонецЕсли;
	ПредставлениеПоставщика = ПечатныеФормыСервер.ОписаниеОрганизации(КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Организация, ПараметрыПечати.ДатаДокумента), "ПолноеНаименование,");
	ПараметрыПечати.Вставить("ПредставлениеПоставщика",  ПредставлениеПоставщика);
	Если НЕ ТоварныйЧек Тогда
		ПредставлениеПолучателя = ПечатныеФормыСервер.ОписаниеОрганизации(КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента), "ПолноеНаименование,");
		ПараметрыПечати.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
	КонецЕсли;

	ПараметрыПечати.Вставить("ЕстьСкидки",  ПараметрыПечати.Позиции.Итог("ПроцентРучнойСкидки") + ПараметрыПечати.Позиции.Итог("ПроцентАвтоматическойСкидки") <> 0);
	ПараметрыПечати.Вставить("Колонка", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	ПараметрыПечати.Вставить("ВыводитьКоды", Не ПустаяСтрока(ПараметрыПечати.Колонка));
	ПараметрыПечати.Вставить("флВыводитьМест",НЕ ПараметрыПечати.Позиции.Итог("КоличествоМест")=0);

	ВалютаБухУчета=МодульВалютногоУчета.ПолучитьВалюту("Бух");
	СуммыВРублях=ПараметрыПечати.ВалютаДокумента = ВалютаБухУчета;
	
	ПараметрыПечати.Позиции.Колонки.Добавить("Артикул");
	ПараметрыПечати.Позиции.Колонки.Добавить("Товар");
	ПараметрыПечати.Позиции.Колонки.Добавить("СуммаСкидки");
	ПараметрыПечати.Позиции.Колонки.Добавить("СуммаБезСкидки");
	ПараметрыПечати.Позиции.Колонки.Добавить("НомерГТДСтранаПроисхождения");
	
	Для каждого ВыборкаСтрокТовары из ПараметрыПечати.Позиции Цикл 
		ВыборкаСтрокТовары.НоменклатураНаименование = СокрЛП(ВыборкаСтрокТовары.НоменклатураНаименование)
		+ ПечатныеФормыСервер.ПредставлениеСерий(ВыборкаСтрокТовары, Истина)
		+ ?(ВыборкаСтрокТовары.ТабличнаяЧасть = "ВозвратнаяТара", " (возвратная тара)", "");		
		ПроцентСкидки = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ПроцентРучнойСкидки),ВыборкаСтрокТовары.ПроцентРучнойСкидки,0) 
		+ ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ПроцентАвтоматическойСкидки),ВыборкаСтрокТовары.ПроцентАвтоматическойСкидки,0);
		ВыборкаСтрокТовары.СуммаСкидки = ВыборкаСтрокТовары.СтоимостьСНДС / (100 - ПроцентСкидки)* ПроцентСкидки;;
		ВыборкаСтрокТовары.СуммаБезСкидки = ВыборкаСтрокТовары.СтоимостьСНДС + ВыборкаСтрокТовары.СуммаСкидки;
		Если НЕ ПараметрыПечати.СуммаВключаетНДС Тогда
			ВыборкаСтрокТовары.Цена=ВыборкаСтрокТовары.СтоимостьСНДС/?(ВыборкаСтрокТовары.Количество=0,1,ВыборкаСтрокТовары.Количество); 
		Конецесли;	
		ВыборкаСтрокТовары.НомерГТДСтранаПроисхождения = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Серия), СокрЛП(ВыборкаСтрокТовары.Серия.НомерГТД)+",", "") + Символы.ПС + ВыборкаСтрокТовары.ПредставлениеСтраны;		
	КонецЦикла;
	
	ПараметрыПечати.Вставить("СуммаСкидки",     ПараметрыПечати.Позиции.Итог("СуммаСкидки"));
	ПараметрыПечати.Вставить("СуммаБезСкидки",  ПараметрыПечати.Позиции.Итог("СуммаСкидки")+ПараметрыПечати.Позиции.Итог("СтоимостьСНДС"));
	ПараметрыПечати.Вставить("СтоимостьСНДС", ОбщегоНазначения.ФорматСумм(ПараметрыПечати.Позиции.Итог("СтоимостьСНДС")));
	
	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("НДС",  "В том числе НДС:");
		ПараметрыПечати.Вставить("СуммаНДС",  ОбщегоНазначения.ФорматСумм(ПараметрыПечати.Позиции.Итог("СуммаНДС")));
	КонецЕсли;
	
	// Вывести Сумму прописью
		ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ПараметрыПечати.Позиции.Количество()
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(ПараметрыПечати.Позиции.Итог("СтоимостьСНДС"), ВалютаБухУчета));
		ПараметрыПечати.Вставить("СуммаПрописью",  ОбщегоНазначения.СформироватьСуммуПрописью(ПараметрыПечати.Позиции.Итог("СтоимостьСНДС"), ВалютаБухУчета));
	
	Если ЗначениеЗаполнено(ПараметрыПечати.ФИОКладовщика) Тогда
		ПараметрыПечати.Вставить("ОтветственныйПредставление", ПараметрыПечати.ФИОКладовщика);
	КонецЕсли;

	Возврат ПараметрыПечати;
КонецФункции	

Функция Печать_Накладная(СтруктураПараметров, ТабДокумент, ТоварныйЧек=Ложь)
	ОбщиеПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	ПараметрыПечати=Накладная_ПараметрыПечати(ОбщиеПараметрыПечати, СтруктураПараметров.СсылкаНаОбъект, ТоварныйЧек);
	
	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	Макет=ИнициализацияМакета(СтруктураПараметров, "Накладная");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если НЕ ТоварныйЧек Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("ШапкаТаблицы|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|КоличествоЦена");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ПараметрыПечати.флВыводитьМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("СуммаБезСкидки").ШиринаКолонки +
		Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	
	Если не ПараметрыПечати.флВыводитьМест Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("Мест").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Строка|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|КоличествоЦена");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	Для каждого ВыборкаСтрокТовары из ПараметрыПечати.Позиции Цикл 
		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		
		Если ПараметрыПечати.флВыводитьМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЦикла;
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Итого|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|КоличествоЦена");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ПараметрыПечати.флВыводитьМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть("ИтогоНДС|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|КоличествоЦена");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		Если ПараметрыПечати.флВыводитьМест Тогда
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;	
КонецФункции

////////////////////////////////////////////

Процедура Печать(СтруктураПараметров, КоличествоЭкземпляров=1, НаПринтер=Ложь, ТабДокумент=Неопределено) Экспорт
	Если СтруктураПараметров.ИмяМакета="Накладная" Тогда
		Печать_Накладная(СтруктураПараметров, ТабДокумент);
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="ТоварныйЧек" Тогда
		Печать_Накладная(СтруктураПараметров, ТабДокумент, Истина);
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="ТОРГ12" тогда
		Печать_ТОРГ12(СтруктураПараметров, ТабДокумент);
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="ТОРГ12_БезУслуг" тогда
		Печать_ТОРГ12(СтруктураПараметров, ТабДокумент, Истина);
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="М15" тогда
		Печать_М15(СтруктураПараметров, ТабДокумент);
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="Акт" Тогда
		Печать_АктОбОказанииУслуг(СтруктураПараметров, ТабДокумент);

	ИначеЕсли СтруктураПараметров.ИмяМакета="1Т" Или СтруктураПараметров.ИмяМакета="_1Т" Тогда
		ТабДокумент=""; СтруктураПараметров.ИмяМакета="Обработка.ПечатьТТН.Форма.Форма";

	ИначеЕсли СтруктураПараметров.ИмяМакета="Бланк" Тогда		
		ТабДокумент="БланкТоварногоНаполнения";
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ПечатныеФормыСервер.ПриходРасходСРозничныхСкладовВЦенахАТТ(СтруктураПараметров.СсылкаНаОбъект, МодульВалютногоУчета.ПолучитьВалюту("Бух"), Ложь);

	ИначеЕсли СтруктураПараметров.ИмяМакета="УниверсальныйПередаточныйДокумент" Тогда	
		Печать_УниверсальныйПередаточныйДокумент(СтруктураПараметров, ТабДокумент);
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="УниверсальныйКорректировочныйДокумент" Тогда
		ТабДокумент=Печать_УниверсальныйКорректировочныйДокумент(СтруктураПараметров,ТабДокумент);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка таблиц для проведения

Функция КоэффициентПересчета(СтруктураШД)
	Если Не СтруктураШД.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту("Бух") Тогда
		Если Число(СтруктураШД.КурсДокумента)=0 Или Число(СтруктураШД.КратностьДокумента)=0 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат СтруктураШД.КурсДокумента/СтруктураШД.КратностьДокумента;
	КонецЕсли;
	Возврат 1; 
КонецФункции

Функция СформироватьСтруктуруШД(ДокументСсылка) Экспорт
	мдОбъект=ДокументСсылка.Метаданные();

	СтруктураШД=Новый Структура;
	СтруктураШД.Вставить("Ссылка", ДокументСсылка);
	СтруктураШД.Вставить("ВидДокумента", мдОбъект.Имя);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаБухУчета", МодульВалютногоУчета.ПолучитьВалюту("Бух"));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Дата Как Дата,
	|	ИсточникДанных.Номер Как Номер,
	|	ИсточникДанных.ВалютаДокумента Как ВалютаДокумента,
	|	ИсточникДанных.Контрагент Как Контрагент,
	|	ИсточникДанных.Организация Как Организация,
	|	ИсточникДанных.Грузоотправитель Как Грузоотправитель,
	|	ИсточникДанных.Грузополучатель Как Грузополучатель,
	|	ИсточникДанных.ДоговорГрузополучателя Как ДоговорГрузополучателя,	
	|	ИсточникДанных.Сделка Как Сделка,
	|	ИсточникДанных.СуммаВключаетНДС Как СуммаВключаетНДС,
	|	ИсточникДанных.СуммаДокумента Как СуммаДокумента,
	|	ИсточникДанных.СуммаНДС Как СуммаНДС,
	|	ИсточникДанных.УчитыватьНДС Как УчитыватьНДС,
	|	ИсточникДанных.Проект Как Проект,
	|	ИсточникДанных.Подвид Как Подвид,
	|	ИсточникДанных.КорректируемыйПериод Как КорректируемыйПериод,
	|	ИсточникДанных.НеПринимаетсяУСН Как НеПринимаетсяУСН,
	|	ИсточникДанных.КодВидаОперации Как КодВидаОперации,
	|	ИсточникДанных.Водитель Как Водитель,
	|	ИсточникДанных.Подразделение Как Подразделение,
	
	|	ИсточникДанных.КурсВзаиморасчетов Как КурсВзаиморасчетов,
	|	ИсточникДанных.КратностьВзаиморасчетов Как КратностьВзаиморасчетов,
	|
	|	ИсточникДанных.ДоговорКонтрагента Как ДоговорКонтрагента,	
	|	ИсточникДанных.ДоговорКонтрагента.ДопУсловияДоговора Как ДопУсловияДоговора,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ИсточникДанных.ДоговорКонтрагента.Организация КАК ДоговорОрганизация,
	|	ИсточникДанных.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ИсточникДанных.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ИсточникДанных.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	ИсточникДанных.ДоговорКонтрагента.НалоговыйАгентПоОплате КАК НалоговыйАгентПоОплате,
	|	
	|	ИсточникДанных.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ИсточникДанных.Организация.Префикс КАК Префикс,
	|
	|	ИсточникДанных.Склад Как Склад,
	|	ИсточникДанных.Склад.ВидСклада КАК ВидСклада,
	////|	ИсточникДанных.Склад.Ячеистый КАК ЯчеистыйСклад,
	| 
	|	ВЫБОР КОГДА ИсточникДанных.ВалютаДокумента = &ВалютаБухУчета
	|	Тогда 1
	|	Иначе ИсточникДанных.КурсВзаиморасчетов
	|	Конец КАК КурсДокумента,
	|
	|	ВЫБОР КОГДА ИсточникДанных.ВалютаДокумента = &ВалютаБухУчета
	|	Тогда 1
	|	Иначе ИсточникДанных.КратностьВзаиморасчетов
	|	Конец КАК КратностьДокумента
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументСсылка
	|";
	тзДанныеДокумента=Запрос.Выполнить().Выгрузить();
	Для каждого Колонка Из тзДанныеДокумента.Колонки Цикл
		СтруктураШД.Вставить(Колонка.Имя, тзДанныеДокумента[0][Колонка.Имя]);	
	КонецЦикла;
	СтруктураШД.Вставить("УчетнаяПолитика", ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(СтруктураШД.Организация, СтруктураШД.Дата));
	СтруктураШД.Вставить("Направление", "Реализация");
	СтруктураШД.Вставить("ПроводитьПоВзаиморасчетам", СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СтруктураШД.Вставить("КоэффициентПересчета", КоэффициентПересчета(СтруктураШД));

	Возврат СтруктураШД;
КонецФункции

Функция СформироватьТаблицу_Товары(СтруктураШД)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШД.Ссылка);
	Запрос.УстановитьПараметр("ВидТабличнойЧасти", "Товары");
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*,
	|	ИсточникДанных.Ссылка.Организация Как Организация,
	|	ИсточникДанных.Ссылка.Контрагент Как Контрагент,
	|	ИсточникДанных.Ссылка.ДоговорКонтрагента Как ДоговорКонтрагента,
	|	ИсточникДанных.Ссылка.Подразделение Как Подразделение,
	|	ИсточникДанных.Ссылка.Дата Как Период,
	|	ИсточникДанных.Ссылка.КодВидаОперации Как КодВидаОперации,
	|	Истина Как Активность,
	|	&ВидТабличнойЧасти,
	|
	|	Неопределено Как СчетУчетаНДС,
	|	Неопределено Как ВидЦенности,
	|	0 Как СуммаБезНДС,
	|	0 Как СуммаСНДС,
	|	0 Как Стоимость,
	|	0 Как СтоимостьНУ,
	|	0 Как НДС,
	|	0 Как СтоимостьБезСкидок,
	|	ИсточникДанных.НомерСтроки Как НомерСтрокиТабличнойЧасти,
	|
	|	ИсточникДанных.Номенклатура Как Ценность,
	|	ИсточникДанных.Номенклатура.Услуга Как Услуга,
	|	ИсточникДанных.Номенклатура.Набор Как Набор,
	|	ИсточникДанных.Номенклатура.Комплект Как Комплект,	
	|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков Как ЕдиницаИзмерения,
	|	ИсточникДанных.Номенклатура.ВестиУчетПоХарактеристикам Как ВестиУчетПоХарактеристикам,
	|	ИсточникДанных.Номенклатура.ВестиПартионныйУчетПоСериям Как ВестиПартионныйУчетПоСериям,
	|	ИсточникДанных.Номенклатура.ВестиУчетПоСериям Как УчетПоСериям,
	|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Как ЕдиницаХраненияОстатковКоэффициент,
	|
	|	ИсточникДанных.СерияНоменклатуры.СтранаПроисхождения Как СтранаПроисхождения,
	|	ИсточникДанных.СерияНоменклатуры.НомерГТД Как НомерГТД,
	|
	|	ИсточникДанных.Склад.ВидСклада КАК ВидСклада,
	|	ИсточникДанных.Склад.Ячеистый КАК ЯчеистыйСклад,
    |
	|	ИсточникДанных.Количество Как КоличествоДок,
	|	ИсточникДанных.Количество Как КоличествоВЕдиницахДокумента,
	
	|	ИсточникДанных.Количество * ИсточникДанных.Коэффициент/ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Как Количество
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументСсылка
	|";
	Возврат тзДанные_Обработать(Запрос, СтруктураШД, "Товары");
КонецФункции

Функция СформироватьТаблицу_Услуги(СтруктураШД)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШД.Ссылка);
	Запрос.УстановитьПараметр("ВидТабличнойЧасти", "Услуги");
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*,
	|	ИсточникДанных.Ссылка.Организация Как Организация,
	|	ИсточникДанных.Ссылка.Контрагент Как Контрагент,
	|	ИсточникДанных.Ссылка.ДоговорКонтрагента Как ДоговорКонтрагента,
	|	ИсточникДанных.Ссылка.Подразделение Как Подразделение,
	|	ИсточникДанных.Ссылка.Дата Как Период,
	|	ИсточникДанных.Ссылка.КодВидаОперации Как КодВидаОперации,
	|	Истина Как Активность,
	|	&ВидТабличнойЧасти,
	|
	|	Неопределено Как ВидЦенности,
	|	0 Как СуммаБезНДС,
	|	0 Как СуммаСНДС,
	|	0 Как Стоимость,
	|	0 Как СтоимостьНУ,
	|	0 Как НДС,
	|	0 Как СтоимостьБезСкидок,
	|	ИсточникДанных.НомерСтроки Как НомерСтрокиТабличнойЧасти,
	|
	|	ИсточникДанных.Номенклатура Как Ценность,
	|	ИсточникДанных.Номенклатура.Услуга Как Услуга,
	|	ИсточникДанных.Номенклатура.Набор Как Набор,
	|	ИсточникДанных.Номенклатура.Комплект Как Комплект,	
	|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков Как ЕдиницаИзмерения,
	|	ИсточникДанных.Номенклатура.ВестиУчетПоХарактеристикам Как ВестиУчетПоХарактеристикам,
	|	ИсточникДанных.Номенклатура.ВестиПартионныйУчетПоСериям Как ВестиПартионныйУчетПоСериям,
	|	ИсточникДанных.Номенклатура.ВестиУчетПоСериям Как УчетПоСериям,
	|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Как ЕдиницаХраненияОстатковКоэффициент,
	|
	|	ИсточникДанных.Количество Как КоличествоДок
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументСсылка
	|";
	Возврат тзДанные_Обработать(Запрос, СтруктураШД);
КонецФункции

Функция СформироватьТаблицу_ТараВТ(СтруктураШД)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШД.Ссылка);
	Запрос.УстановитьПараметр("ВидТабличнойЧасти", "Тара");
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*,	
	|	ИсточникДанных.Ссылка.Организация Как Организация,
	|	ИсточникДанных.Ссылка.Контрагент Как Контрагент,
	|	ИсточникДанных.Ссылка.ДоговорКонтрагента Как ДоговорКонтрагента,
	|	ИсточникДанных.Ссылка.Подразделение Как Подразделение,
	|	ИсточникДанных.Ссылка.Дата Как Период,
	|	ИсточникДанных.Ссылка.КодВидаОперации Как КодВидаОперации,
	|	Истина Как Активность,
	|	&ВидТабличнойЧасти,
	|	Неопределено Как ВидЦенности,
	|	0 Как СуммаБезНДС,
	|	0 Как СуммаСНДС,
	|	0 Как НДС,
	|	ИсточникДанных.НомерСтроки Как НомерСтрокиТабличнойЧасти,
	|	ИсточникДанных.Склад.ВидСклада КАК ВидСклада,
	|	ИсточникДанных.Склад.Ячеистый КАК ЯчеистыйСклад
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументСсылка
	|";
	тзДанные=Запрос.Выполнить().Выгрузить();	
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Сумма=Окр(СтрокаКоллекции.Сумма*СтруктураШД.КоэффициентПересчета, 2);
		СтрокаКоллекции.СуммаБезНДС=СтрокаКоллекции.Сумма; // Сумма по таре всегда с НДС
	КонецЦикла;
	
	Возврат тзДанные;
КонецФункции

Функция СформироватьТаблицу_ОС(СтруктураШД)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШД.Ссылка);
	Запрос.УстановитьПараметр("ВидТабличнойЧасти", "ОС");
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*,
	|	ИсточникДанных.Ссылка.Организация Как Организация,
	|	ИсточникДанных.Ссылка.Контрагент Как Контрагент,
	|	ИсточникДанных.Ссылка.ДоговорКонтрагента Как ДоговорКонтрагента,
	|	ИсточникДанных.Ссылка.Подразделение Как Подразделение,
	|	ИсточникДанных.Ссылка.Дата Как Период,
	|	ИсточникДанных.Ссылка.КодВидаОперации Как КодВидаОперации,
	|	Истина Как Активность,
	|	&ВидТабличнойЧасти,
	|	Неопределено Как ВидЦенности,
	|	Неопределено Как Ценность,
	|	ИсточникДанных.Сумма/ИсточникДанных.Количество Как Цена,
	|	0 Как СуммаБезНДС,
	|	0 Как СуммаСНДС,
	|	0 Как Стоимость,
	|	0 Как СтоимостьНУ,
	|	0 Как НДС,
	|	0 Как СтоимостьБезСкидок,
	|	ИсточникДанных.НомерСтроки Как НомерСтрокиТабличнойЧасти	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ОС КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументСсылка
	|";
	Возврат тзДанные_Обработать(Запрос, СтруктураШД, "ОС");	
КонецФункции

Функция СформироватьТаблицу_НМА(СтруктураШД)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШД.Ссылка);
	Запрос.УстановитьПараметр("ВидТабличнойЧасти", "НМА");
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*,
	|	ИсточникДанных.Ссылка.Организация Как Организация,
	|	ИсточникДанных.Ссылка.Контрагент Как Контрагент,
	|	ИсточникДанных.Ссылка.ДоговорКонтрагента Как ДоговорКонтрагента,
	|	ИсточникДанных.Ссылка.Подразделение Как Подразделение,
	|	ИсточникДанных.Ссылка.Дата Как Период,
	|	ИсточникДанных.Ссылка.КодВидаОперации Как КодВидаОперации,
	|	Истина Как Активность,
	|	&ВидТабличнойЧасти,
	|	Неопределено Как ВидЦенности,
	|	Неопределено Как Ценность,
	|	ИсточникДанных.Сумма/ИсточникДанных.Количество Как Цена,
	|	0 Как СуммаБезНДС,
	|	0 Как СуммаСНДС,
	|	0 Как Стоимость,
	|	0 Как СтоимостьНУ,
	|	0 Как НДС,
	|	0 Как СтоимостьБезСкидок,
	|	ИсточникДанных.НомерСтроки Как НомерСтрокиТабличнойЧасти	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.НМА КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументСсылка
	|";
	Возврат тзДанные_Обработать(Запрос, СтруктураШД, "НМА");	
КонецФункции

Функция СформироватьТаблицу_Сделки(СтруктураШД)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШД.Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Сделки КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументСсылка
	|";
	Возврат Запрос.Выполнить().Выгрузить()	
КонецФункции

Функция тзДанные_Обработать(Запрос, СтруктураШД, стрВидТабличнойЧасти="Товары")
	тзСсылка=Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаКоллекции Из тзСсылка Цикл
		////Если НЕ НМА_ОС Тогда
		////	СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент/СтрокаКоллекции.ЕдиницаХраненияОстатковКоэффициент;
		////КонецЕсли;		
		//*** СтрокаКоллекции.ЕдиницаИзмерения=СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков;
		//Если СтрокаКоллекции.Набор Тогда
		//	стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
		//	стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
		//	ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Ложь, СтруктураШД.Заголовок);
		//КонецЕсли;

		СтрокаКоллекции.Сумма=Окр(СтрокаКоллекции.Сумма*СтруктураШД.КоэффициентПересчета, 2);
		СтрокаКоллекции.СуммаНДС=Окр(СтрокаКоллекции.СуммаНДС*СтруктураШД.КоэффициентПересчета, 2);
		СтрокаКоллекции.СуммаБезНДС=СтрокаКоллекции.Сумма-?(СтруктураШД.УчитыватьНДС  И СтруктураШД.СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
		СтрокаКоллекции.СуммаСНДС=СтрокаКоллекции.Сумма+?(СтруктураШД.УчитыватьНДС И НЕ СтруктураШД.СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
		СтрокаКоллекции.Стоимость=СтрокаКоллекции.Сумма;
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.Сумма;
		СтрокаКоллекции.СтоимостьБезСкидок=Окр(СтрокаКоллекции.Цена*СтруктураШД.КоэффициентПересчета, 2)*СтрокаКоллекции.Количество;
		Если СтруктураШД.УчитыватьНДС И Не СтруктураШД.СуммаВключаетНДС Тогда
			СтрокаКоллекции.СтоимостьБезСкидок=СтрокаКоллекции.СтоимостьБезСкидок+УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаКоллекции.СтоимостьБезСкидок, СтруктураШД.УчитыватьНДС, СтруктураШД.СуммаВключаетНДС, УчетНалоговСервер.СтавкаНДС(СтрокаКоллекции.СтавкаНДС));
		КонецЕсли;
		СтрокаКоллекции.НДС=СтрокаКоллекции.СуммаНДС; //***
		
		Если СтруктураШД.УчетАгентскогоНДС Тогда // Это агентский НДС - для него применяется специальный вид ценности.
			СтрокаКоллекции.ВидЦенности=?(СтруктураШД.ВидАгентскогоДоговора=Перечисления.ВидыАгентскихДоговоров.Аренда, Перечисления.ВидыЦенностей.НалоговыйАгентАренда, Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		Иначе
			Если стрВидТабличнойЧасти="ОС" Тогда
				СтрокаКоллекции.ВидЦенности=Перечисления.ВидыЦенностей.ОС;
			ИначеЕсли стрВидТабличнойЧасти="НМА" Тогда
				СтрокаКоллекции.ВидЦенности=Перечисления.ВидыЦенностей.НМА;
			Иначе
				СтрокаКоллекции.ВидЦенности=?(СтрокаКоллекции.Услуга, Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги, Перечисления.ВидыЦенностей.Товары);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Запрос.Параметры.ВидТабличнойЧасти="Товары" Тогда
		Если Не Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
			тзСсылка.ЗаполнитьЗначения(Неопределено, "СерияНоменклатуры");
		КонецЕсли;	
	КонецЕсли;
	Возврат тзСсылка;
КонецФункции

Функция ПодготовитьТаблицыДокумента(СтруктураШД, Отказ) Экспорт
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Товары", СформироватьТаблицу_Товары(СтруктураШД));
	СтруктураТД.Вставить("Услуги", СформироватьТаблицу_Услуги(СтруктураШД));
	СтруктураТД.Вставить("Тара"  , СформироватьТаблицу_ТараВТ(СтруктураШД));
	СтруктураТД.Вставить("ОС"	 , СформироватьТаблицу_ОС	 (СтруктураШД));
	СтруктураТД.Вставить("НМА"	 , СформироватьТаблицу_НМА   (СтруктураШД));	
	СтруктураТД.Вставить("Сделки", СформироватьТаблицу_Сделки(СтруктураШД));

	Если НЕ СтруктураТД.Услуги.Количество()=0 И НЕ СтруктураШД.ВидДоговора=Неопределено И (СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Или СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ передачи на комиссию не может содержать услуг!", Отказ, СтруктураШД.Заголовок);
	КонецЕсли;
	
	Возврат СтруктураТД;
КонецФункции