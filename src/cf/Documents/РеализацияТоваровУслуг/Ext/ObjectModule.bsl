Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	//Заполняем реквизиты шапки "Сумма", "Сумма НДС"
	СуммаДокумента = Товары.Итог("Сумма"   )+Услуги.Итог("Сумма"   )+ОС.Итог("Сумма"   )+НМА.Итог("Сумма"   );
	СуммаНДС	   = Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС")+ОС.Итог("СуммаНДС")+НМА.Итог("СуммаНДС");

	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		СуммаДокумента=СуммаДокумента+СуммаНДС;
	КонецЕсли;
	
	//заполняем реквизиты табличной части "Товары"
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И СтрокаТабличнойЧасти.КоличествоМест=0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
		Если Не УчитыватьНДС Тогда СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС; КонецЕсли; 

		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
			СтрокаТабличнойЧасти.Качество=Справочники.Качество.Новый;
		КонецЕсли;

 		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;
	КонецЦикла;

	//заполняем реквизиты табличной части "Возвратная тара"
	Для каждого СтрокаТабличнойЧасти Из ВозвратнаяТара Цикл
 		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;
	КонецЦикла;

	//Удаляем неиспользуемые строки состав набора
	МассивСтрок=Новый Массив;
	Для каждого СтрокаКоллекции Из СоставНабора Цикл
		Если ПустаяСтрока(СтрокаКоллекции.ID_Товары) Тогда Продолжить; КонецЕсли; 
		Если Товары.Найти(СтрокаКоллекции.ID_Товары, "ID")=Неопределено Тогда
			МассивСтрок.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		СоставНабора.Удалить(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнить по документу основанию

Процедура ЗаполнитьТабличнуюЧастьПоДокументу_ЗаказПокупателя(ДокументИсточник, стрТабличнаяЧасть)
	ТабличнаяЧасть=ДокументИсточник[стрТабличнаяЧасть];
	Если ТабличнаяЧасть.Количество()=0 Тогда Возврат; КонецЕсли; 
	
	стрУсловие="Организация = &Организация И Номенклатура В (&Номенклатура) И ЗаказПокупателя = &Заказ";	

	МассивХарактеристикНоменклатуры=Новый Массив;
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", Метаданные(), стрТабличнаяЧасть) Тогда
		МассивХарактеристикНоменклатуры=ТабличнаяЧасть.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
		Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
			стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
		КонецЕсли;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсточникДанных", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("НаДату", МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Заказ", ДокументИсточник);
	Запрос.УстановитьПараметр("Номенклатура", ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.Текст="
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ &ИсточникДанных Как ИсточникДанных
	|;
	|
	|ВЫБРАТЬ
	|	&Заказ Как ЗаказПокупателя,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.Цена,
	|";
	Если стрТабличнаяЧасть="Товары" Тогда
		Запрос.Текст=Запрос.Текст+"
		|	ИсточникДанных1.СтавкаНДС,
		|	ИсточникДанных1.ЕдиницаИзмерения,
		|	ИсточникДанных1.ЕдиницаИзмеренияМест,
		|	ИсточникДанных1.КоличествоМест,	
		|	ИсточникДанных1.Коэффициент,
		|	ИсточникДанных1.ХарактеристикаНоменклатуры,		
		|	ИсточникДанных1.ПроцентСкидкиНаценки,
		|	ИсточникДанных1.ПроцентАвтоматическихСкидок,
		|	ИсточникДанных1.УсловиеАвтоматическойСкидки,
		|	ИсточникДанных1.ЗначениеУсловияАвтоматическойСкидки,
		|";		
	ИначеЕсли стрТабличнаяЧасть="Услуги" Тогда
		Запрос.Текст=Запрос.Текст+"
		|	ВЫРАЗИТЬ(ИсточникДанных1.Содержание КАК Строка (1000)) Как Содержание,
		|	ИсточникДанных1.СтавкаНДС,
		|	ИсточникДанных1.ПроцентСкидкиНаценки,
		|	ИсточникДанных1.ПроцентАвтоматическихСкидок,
		|	ИсточникДанных1.УсловиеАвтоматическойСкидки,
		|	ИсточникДанных1.ЗначениеУсловияАвтоматическойСкидки,
		|";
	ИначеЕсли стрТабличнаяЧасть="ВозвратнаяТара" Тогда
	КонецЕсли; 
	
	Запрос.Текст=Запрос.Текст+"
	|	ИсточникДанных1.Количество КАК КоличествоДок,
	|	ИсточникДанных2.КоличествоОстаток КАК Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных1
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&НаДату, "+стрУсловие+") Как ИсточникДанных2
	|		ПО ИсточникДанных1.Номенклатура = ИсточникДанных2.Номенклатура
	|		"+?(МассивХарактеристикНоменклатуры.Количество()=0, "", "И ИсточникДанных1.ХарактеристикаНоменклатуры = ИсточникДанных2.ХарактеристикаНоменклатуры")+"
	|";
	тзДвижения=Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаКоллекции Из тзДвижения Цикл
		СтрокаКоллекции.Количество=Мин(СтрокаКоллекции.Количество, СтрокаКоллекции.КоличествоДок);
		Если СтрокаКоллекции.Количество<=0 Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока=ЭтотОбъект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		Если НЕ стрТабличнаяЧасть="ВозвратнаяТара" Тогда
			НоваяСтрока.НоменклатурнаяГруппа=НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;			
	КонецЦикла;
	Если стрТабличнаяЧасть="Товары" И ДокументИсточник.СоставНабора.Количество() > 0 Тогда
		ЭтотОбъект.СоставНабора.Загрузить(ДокументИсточник.СоставНабора.Выгрузить());
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДокументу_Произвольный(ДокументИсточник, стрТабличнаяЧасть)
	ПересчитыватьСкидку=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	Курс=ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ВалютаБухУчета);
	Кратность=ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ВалютаБухУчета);	
	
	ЗаполнятьТабличнуЧасть_СоставНабора=Ложь;
	Если стрТабличнаяЧасть="Товары" Тогда
		ЗаполнятьТабличнуЧасть_СоставНабора=НЕ ДокументИсточник.Метаданные().ТабличныеЧасти.Найти("СоставНабора")=Неопределено;
	КонецЕсли; 
	
	СтруктураРеквизитовДокумента=ЦенообразованиеСервер.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект); //***
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументИсточник", ДокументИсточник);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	"+?(ЗаполнятьТабличнуЧасть_СоставНабора, "ИсточникДанных.СоставНабора,", "")+"
	|	ИсточникДанных.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИсточникДанных.Ссылка.УчитыватьНДС     КАК УчитыватьНДС,
	|	ИсточникДанных.Ссылка.ВалютаДокумента  КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ИсточникДанных.Ссылка.ВалютаДокумента = ИсточникДанных.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ИсточникДанных.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА ИсточникДанных.Ссылка.ВалютаДокумента = ИсточникДанных.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ИсточникДанных.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ИсточникДанных."+стрТабличнаяЧасть+" Как ТабличнаяЧасть
	|ИЗ
	|	Документ."+ДокументИсточник.Метаданные().Имя+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументИсточник
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда Возврат; КонецЕсли;
	
	тзТабличнаяЧать=Выборка.ТабличнаяЧасть.Выгрузить();
	ЗаполнитьРазмещение=ЭтотОбъект.Метаданные().ТабличныеЧасти[стрТабличнаяЧасть].Реквизиты.Найти("Склад")<>Неопределено И тзТабличнаяЧать.Колонки.Найти("Размещение")<>Неопределено;
	Для каждого СтрокаКоллекции Из тзТабличнаяЧать Цикл
		НоваяСтрока=ЭтотОбъект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Цена=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаКоллекции.Цена, Выборка.ВалютаДокумента, ЭтотОбъект.ВалютаДокумента, Выборка.КурсДокумента, Курс, Выборка.КратностьДокумента, Кратность);

		Если НЕ стрТабличнаяЧасть="ВозвратнаяТара" Тогда
			НоваяСтрока.Сумма=ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, Выборка.ВалютаДокумента, ЭтотОбъект.ВалютаДокумента,
			Выборка.КурсДокумента, Курс,
			Выборка.КратностьДокумента, Кратность),
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			ЭтотОбъект.УчитыватьНДС,
			ЭтотОбъект.СуммаВключаетНДС,
			УчетНалоговСервер.СтавкаНДС(НоваяСтрока.СтавкаНДС));
			
			//Для вида документа "Поступление товаров и услуг"								
			//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
			//ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);								
		КонецЕсли;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект,,Истина,ПересчитыватьСкидку,Истина, стрТабличнаяЧасть);
		
		Если НЕ стрТабличнаяЧасть="ВозвратнаяТара" Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			НоваяСтрока.НоменклатурнаяГруппа=НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
		Если ЗаполнитьРазмещение Тогда
			НоваяСтрока.Склад=СтрокаКоллекции.Размещение;
		КонецЕсли;
	КонецЦикла;

	Если ЗаполнятьТабличнуЧасть_СоставНабора Тогда
		ЭтотОбъект.СоставНабора.Загрузить(Выборка.СоставНабора.Выгрузить());
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьТД(ДокументИсточник) //Заполнение табличных частей документа
	Если ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если НЕ Проведен Тогда
			ЗаполнитьТабличнуюЧастьПоДокументу_Произвольный(ДокументИсточник, "Товары");
			ЗаполнитьТабличнуюЧастьПоДокументу_Произвольный(ДокументИсточник, "Услуги");
			ЗаполнитьТабличнуюЧастьПоДокументу_Произвольный(ДокументИсточник, "ВозвратнаяТара");
		Иначе //Если ЗаказПокупателя_ЗаполнитьСУчетомОстатков Тогда
			ЗаполнитьТабличнуюЧастьПоДокументу_ЗаказПокупателя(ДокументИсточник, "Товары");
			ЗаполнитьТабличнуюЧастьПоДокументу_ЗаказПокупателя(ДокументИсточник, "Услуги");
			ЗаполнитьТабличнуюЧастьПоДокументу_ЗаказПокупателя(ДокументИсточник, "ВозвратнаяТара");			
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда 
		ЗаполнитьТабличнуюЧастьПоДокументу_Произвольный(ДокументИсточник, "Товары");
		
	ИначеЕсли ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ЗаполнитьТабличнуюЧастьПоДокументу_Произвольный(ДокументИсточник, "Товары");
		ЗаполнитьТабличнуюЧастьПоДокументу_Произвольный(ДокументИсточник, "Услуги");
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьШД(ДокументИсточник)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, ДокументИсточник) Тогда Возврат; КонецЕсли;

	Если ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Сделка=ДокументИсточник;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументИсточник, "Грузополучатель,АдресДоставки,ДополнениеКАдресуДоставки");		
		Если ТипЗнч(ДокументИсточник.СтруктурнаяЕдиница)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Если БанковскийСчетОрганизации.Пустая() Тогда
				БанковскийСчетОрганизации=ДокументИсточник.СтруктурнаяЕдиница;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Склад=?(ДокументИсточник.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад, ДокументИсточник.Склад, ДокументИсточник.Склад.Склад);
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, "СПокупателем,СКомиссионером");
		
		ВалютаДокумента=?(ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента), ЭтотОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЭтотОбъект.ДополнительныеСвойства.ВалютаБухУчета);
		СтруктураКурсаВзаиморасчетов=МодульВалютногоУчета.КурсВалюты(ЭтотОбъект.ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов=СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов=СтруктураКурсаВзаиморасчетов.Кратность;
		
		ТипЦен=ДоговорКонтрагента.ТипЦен;
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
		КонецЕсли;
		
		// Флаги включения налогов.
		УчитыватьНДС=Истина; СуммаВключаетНДС=Истина;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			ВремТипЦен=?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
			СуммаВключаетНДС=ВремТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ДокументИсточник)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда 	
		ЭтотОбъект.Сделка=ДокументИсточник.Ссылка;
		ВалютаДокумента=?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента.ВалютаВзаиморасчетов, ДополнительныеСвойства.ВалютаБухУчета);
		СтруктураКурсаВзаиморасчетов=МодульВалютногоУчета.КурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов=СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов=СтруктураКурсаВзаиморасчетов.Кратность;
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЭтотОбъект.Контрагент, "ДоверенностьВыдана,ДоверенностьЧерезКого,ДоверенностьНомер,ДоверенностьДата");
	КонецЕсли;
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Програмный модуль

Процедура ВыполнитьМодуль(стрМодуль, СтруктураПараметров) Экспорт
	Выполнить(стрМодуль);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// 

Функция ПересчитатьАвтоматическиеСкидки() Экспорт

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаДокументаБезСкидок = ЦенообразованиеСервер.ПолучитьСуммуДокументаБезСкидки(Товары) + ЦенообразованиеСервер.ПолучитьСуммуДокументаБезСкидки(Услуги);

		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                      , Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента"                     , СуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта"                              , ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС"                       , УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС"                   , СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета"     , ДополнительныеСвойства.ВалютаБухУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика"                    , ПараметрыУчетнойПолитики());

		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров);
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Услуги, СтруктураПараметров);

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция РассчитыватьАвтоматическиеСкидки() Экспорт
	Если Не ЦенообразованиеСервер.МожноРассчитыватьАвтоматическиеСкидки(ПараметрыУчетнойПолитики()) Или Проведен Или ((ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) И Не Сделка.Пустая()) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание,
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Если ДокументОснование.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = ДокументОснование.Склад.Склад;
		Иначе			
			Склад = ДокументОснование.Склад;
		КонецЕсли;
	КонецЕсли;
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Количество,
	|	Номенклатура, 
	|	Коэффициент,
	|	ЕдиницаИзмерения,
	|	СтавкаНДС,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки,
	|	ХарактеристикаНоменклатуры,
	|	Склад,
	|	СерияНоменклатуры
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.Товары
	|ГДЕ 
	|	Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Количество,
	|	Номенклатура,
	|	СтавкаНДС,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	Коэффициент,
	|	ЕдиницаИзмерения,
	|	Склад
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		СтрокаТабличнойЧасти.Склад						= ?(ЗначениеЗаполнено(Выборка.Склад), Выборка.Склад, Склад);

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
		СтрокаТабличнойЧасти.Количество=Выборка.Количество;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;

	ПересчитатьАвтоматическиеСкидки();
КонецПроцедуры

// Процедура выполняет заполниение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание,
//  МассивЗаказов     - массив, массив заказов, покоторым будем заполнять документ.
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров(ДокументОснование, МассивЗаказов = Неопределено) Экспорт

// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад        КАК Склад,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(,
	|		Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	    ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	| УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	
	Если МассивЗаказов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "И Док.Заказ В(&МассивЗаказов)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Док.Заказ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);
		Если Количество = 0 Тогда Продолжить; КонецЕсли;

		СтрокаВозвратнойТары=ВозвратнаяТара.Добавить();
		СтрокаВозвратнойТары.Номенклатура    = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Склад           = Выборка.Склад;
		СтрокаВозвратнойТары.Количество      = Количество;

		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если НЕ ЗначениеЗаполнено(ТипЦен) Или (НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			       СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			       КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, Истина,
				                            УчетНалоговСервер.СтавкаНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	//Для каждого СтрокаКоллекции Из Движения Цикл
	// 	СтрокаКоллекции.Записывать=Истина;
	//КонецЦикла;

	СтруктураТД.Вставить("Комплекты", УправлениеЗапасами.СформироватьТаблицуКомплектующих(СтруктураТД.Товары, ЭтотОбъект));

	//Движения по регистру "Продажи по дисконтным картам"
	ДвижениеПоРегистру_ПродажиПоДисконтнымКартам(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Предоставленные скидки"
	ДвижениеПоРегистру_ПредоставленныеСкидки(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Учет ТМЦ"
	ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Товары к передаче со складов"
	ДвижениеПоРегистру_ТоварыКПередачеСоСкладов(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Товары переданные"
	ДвижениеПоРегистру_ТоварыПереданные(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения регистру "Взаиморасчеты с контрагентами"
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения регистру "Списанные товары"
	ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения регистрам "Учет НДС"
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);
		
	//Движения регистрам "Учет партий ТМЦ, Продажи"
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистрам "Заказы покупателей", "Внутренние заказы", "Заказы на производство"
	ДвижениеПоРегистру_УчетЗаказов(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения регистру "Учет реализованных услуг"
	ДвижениеПоРегистру_РеализацияУслуг(СтруктураШД, СтруктураТД, Отказ);

	//Движения регистру "Условия поставок по договорам контрагентов" (ценообразование)
	ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентов(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Учет резервов ТМЦ"
	ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.УчетРезервовТМЦ.Записывать=Истина;
	СтруктураПараметров=Новый Структура("МоментВремени,Дата,Ссылка,Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШД);
	СтруктураПараметров.Вставить("тзУчетРезервовТМЦ", Движения.УчетРезервовТМЦ.ВыгрузитьКолонки());
	УправлениеРезервамиСервер.СформироватьДвиженияРасход(СтруктураПараметров, СтруктураТД, Отказ);
	Если НЕ СтруктураПараметров.тзУчетРезервовТМЦ.Количество()=0 Тогда
		Движения.УчетРезервовТМЦ.Загрузить(СтруктураПараметров.тзУчетРезервовТМЦ);
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентов(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.УсловияПоставокПоДоговорамКонтрагентов.Записывать=Истина;	
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УсловияПоставокПоДоговорамКонтрагентов") Тогда Возврат; КонецЕсли; 
	
	МассивСтрок=СтруктураТД.Товары.НайтиСтроки(Новый Структура("ЦенаЗафиксирована", Истина));
	Если МассивСтрок.Количество()=0 Тогда Возврат; КонецЕсли; 
	
	НаборЗаписей=Движения.УсловияПоставокПоДоговорамКонтрагентов;
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Движение=НаборЗаписей.Добавить();
		Движение.Период=Дата;
		Движение.Активность=Истина;
		Движение.ВидДвижения=ВидДвиженияНакопления.Расход;
		Движение.ДоговорКонтрагента=ДоговорКонтрагента;
		Движение.Номенклатура=СтрокаКоллекции.Номенклатура;
		Движение.ХарактеристикаНоменклатуры=СтрокаКоллекции.ХарактеристикаНоменклатуры;
		Движение.Количество=СтрокаКоллекции.КоличествоДок;
		Движение.Цена=СтрокаКоллекции.Цена;
	КонецЦикла;
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.ВзаиморасчетыСКонтрагентами.Записывать=Истина;	
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;
	тзДвижения=Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();	
	ВзаиморасчетыСервер.ОтражениеЗадолженности(СтруктураШД, СтруктураТД, "Приход", тзДвижения, Отказ, СтруктураШД.Заголовок);	
	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ) Экспорт
	//*** Движения.СписанныеТовары.Записывать=Истина;

	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;
    тзДанные=Движения.СписанныеТовары.ВыгрузитьКолонки(); НомСтроки=0;

	//Товары
	Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
		НоваяСтрока=тзДанные.Добавить(); НомСтроки=НомСтроки+1;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.НомерСтрокиДокумента=НомСтроки;
		НоваяСтрока.ДопустимыйСтатус1=Перечисления.СтатусыПартийТоваров.Купленный;
		НоваяСтрока.ДопустимыйСтатус3=Перечисления.СтатусыПартийТоваров.НаКомиссию;
		НоваяСтрока.СуммаЗадолженности=СтрокаКоллекции.СуммаСНДС;
		Если НоваяСтрока.СтоимостьСписаниеУУ=0 Тогда
			НоваяСтрока.СтоимостьСписаниеУУ=СтрокаКоллекции.СебестоимостьУУ;
		КонецЕсли;
		Если НоваяСтрока.СтоимостьСписаниеНУ=0 Тогда
			НоваяСтрока.СтоимостьСписаниеНУ=СтрокаКоллекции.СебестоимостьНУ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураКомплекта) Тогда
			НоваяСтрока.НомерСтрокиТабличнойЧастиНовая=НоваяСтрока.НомерСтрокиТабличнойЧасти;
			НоваяСтрока.ВидТабличнойЧастиНовая=НоваяСтрока.ВидТабличнойЧасти;
			НоваяСтрока.ВидТабличнойЧасти="СоставНабора";
		КонецЕсли;

		Если НЕ СтрокаКоллекции.ВестиПартионныйУчетПоСериям Тогда
			НоваяСтрока.СерияНоменклатуры=Неопределено;
		КонецЕсли;

		// Данные для регл. учета (НДС)
		НоваяСтрока.СуммаЗадолженностиБУ=СтрокаКоллекции.СуммаБезНДС+СтрокаКоллекции.СуммаНДС;
		НоваяСтрока.СуммаНДС=СтрокаКоллекции.СуммаНДС;

		// Если склад указан только в шапке
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидСклада) Тогда
			НоваяСтрока.ВидСклада=СтруктураШД.ВидСклада;
		КонецЕсли;
	КонецЦикла;	

	Если СтруктураШД.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		тзДанные.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");
	ИначеЕсли СтруктураШД.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		тзДанные.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");
		тзДанные.ЗаполнитьЗначения(Ссылка, "ДокументПередачи");
		тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");
	КонецЕсли;

	// Данные для заполнения отчетов комитенту
	тзДанные.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	тзДанные.ЗаполнитьЗначения(СтруктураШД.КурсДокумента, "КурсДокумента");
	тзДанные.ЗаполнитьЗначения(СтруктураШД.КратностьДокумента, "КратностьДокумента");
	
	//Тара
	Для каждого СтрокаКоллекции Из СтруктураТД.Тара Цикл
		НоваяСтрока=тзДанные.Добавить(); НомСтроки=НомСтроки+1;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.НомерСтрокиДокумента=НомСтроки;
		НоваяСтрока.ДопустимыйСтатус1=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
		НоваяСтрока.ДопустимыйСтатус2=Перечисления.СтатусыПартийТоваров.Купленный;
		НоваяСтрока.КодОперацииПартииТоваров=Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту;
		НоваяСтрока.ЗаказПартии=Сделка;
	КонецЦикла;

	//Заполняем общие реквизиты
	Если ВидПередачи=Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		тзДанные.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	Если ЗначениеЗаполнено(Проект) Тогда
		тзДанные.ЗаполнитьЗначения(Проект, "Проект");
	КонецЕсли;

	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");

	Движения.СписанныеТовары.Загрузить(тзДанные);
	Движения.СписанныеТовары.Записать(Истина);
КонецПроцедуры

Процедура ДвижениеПоРегистру_РеализацияУслуг(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.РеализацияУслуг.Записывать=Истина;	
	
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "РеализацияУслуг") Тогда Возврат; КонецЕсли;
	Если СтруктураТД.Услуги.Количество()=0 Тогда Возврат; КонецЕсли; 

	РазрешитьУчетУслугБезПлановыхЦен=Не СтруктураШД.УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг=Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	Если НЕ РазрешитьУчетУслугБезПлановыхЦен Тогда Возврат; КонецЕсли;

	тзДанные=СтруктураТД.Услуги.Скопировать(,"Активность,Период,Организация,НоменклатурнаяГруппа,Сумма");
	тзДанные.Колонки.Добавить("СчетРасходов");
	тзДанные.Колонки.Добавить("Регистратор");
	
	тзДанные.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД, "СчетРасходов");
	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");

	Движения["РеализацияУслуг"].Загрузить(тзДанные);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.ТоварыНаСкладах.Записывать=Истина;	
	
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыНаСкладах") Тогда Возврат; КонецЕсли;
	Если НЕ ВидПередачи=Перечисления.ВидыПередачиТоваров.СоСклада Тогда Возврат; КонецЕсли;
	
	тзДвижения=Движения.ТоварыНаСкладах.ВыгрузитьКолонки();
		
	Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл //Товары
		Если СтрокаКоллекции.Склад.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда
			Если Не СтрокаКоллекции.Склад.Ячеистый Тогда Продолжить; КонецЕсли;
			ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
		КонецЕсли;
		Если НЕ СтрокаКоллекции.УчетПоСериям Тогда
			СтрокаКоллекции.СерияНоменклатуры=Неопределено;
		КонецЕсли; //2019
	КонецЦикла;
		
	Для каждого СтрокаКоллекции Из СтруктураТД.Тара Цикл //Тара
		Если СтрокаКоллекции.Склад.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда
			Если Не СтрокаКоллекции.Склад.Ячеистый Тогда Продолжить; КонецЕсли;
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Качество=Справочники.Качество.Новый;
		КонецЕсли;
	КонецЦикла;

	Если тзДвижения.Количество()=0 Тогда Возврат; КонецЕсли;

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	Движения.ТоварыНаСкладах.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ПродажиПоДисконтнымКартам(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.ПродажиПоДисконтнымКартам.Записывать=Истина;
	
	Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда Возврат; КонецЕсли;
	Если НЕ СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда Возврат; КонецЕсли;
    Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПродажиПоДисконтнымКартам") Тогда Возврат; КонецЕсли;
	
	УчетПоСетевымКонтрагентам=Константы.УчетПоСетевымКонтрагентам.Получить();
	КонтрагентПродажи=?(УчетПоСетевымКонтрагентам, Грузополучатель, Контрагент);
	Если Не ЗначениеЗаполнено(КонтрагентПродажи) Тогда КонтрагентПродажи=Контрагент; КонецЕсли;

	тзДанные=Движения.ПродажиПоДисконтнымКартам.ВыгрузитьКолонки();
	
	НоваяСтрока=тзДанные.Добавить();
	НоваяСтрока.ДисконтнаяКарта=ДисконтнаяКарта;
	НоваяСтрока.ВладелецДисконтнойКарты=КонтрагентПродажи;
	НоваяСтрока.Сумма=СуммаДокумента;
	НоваяСтрока.Активность=Истина;
	НоваяСтрока.Период=Дата;
	НоваяСтрока.Регистратор=Ссылка;

	Движения.ПродажиПоДисконтнымКартам.Загрузить(тзДанные);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ПредоставленныеСкидки(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.ПредоставленныеСкидки.Записывать=Истина;

	Если НЕ СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда Возврат; КонецЕсли;
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПредоставленныеСкидки") Тогда Возврат; КонецЕсли;

	тзДанные=Движения.ПредоставленныеСкидки.ВыгрузитьКолонки();

	Для Каждого СтрокаТаблицы Из СтруктураТД.Товары Цикл
		СуммаБезСкидки=СтрокаТаблицы.СуммаБезНДС;
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если НЕ СтрокаТаблицы.ПроцентАвтоматическихСкидок=0 Тогда
			СтрокаДвижений=тзДанные.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если НЕ СтрокаТаблицы.ПроцентСкидкиНаценки=0 Тогда
			СтрокаДвижений=тзДанные.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально=СтрокаТаблицы.СуммаБезНДС;
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		Если НЕ Разница=0 И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если ЦенообразованиеСервер.ЭтоСпецПредложение(СтруктураШД.Дата, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, ЦенообразованиеСервер.МассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие=СоставНабора.НайтиСтроки(Новый Структура("ID_Товары", СтрокаТаблицы.ID));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					СтоимостьКомплектующей=Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество;
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки = СтоимостьКомплектующих - СтрокаТаблицы.Сумма;
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений=тзДанные.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СтруктураТД.Услуги Цикл
		СуммаБезСкидки=СтрокаТаблицы.СуммаБезНДС;
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений=тзДанные.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если НЕ СтрокаТаблицы.ПроцентСкидкиНаценки=0 Тогда
			СтрокаДвижений=тзДанные.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально=СтрокаТаблицы.Стоимость;
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если НЕ Разница=0 И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;
	
	тзДанные.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");
	тзДанные.ЗаполнитьЗначения(ДоговорКонтрагента, "ПолучательСкидки");
	тзДанные.ЗаполнитьЗначения(Истина, "Активность");
	тзДанные.ЗаполнитьЗначения(Дата, "Период");
	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");

	Движения.ПредоставленныеСкидки.Загрузить(тзДанные);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыКПередачеСоСкладов(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.ТоварыКПередачеСоСкладов.Записывать=Истина;
	
	Если ВидПередачи=Перечисления.ВидыПередачиТоваров.СоСклада Тогда Возврат; КонецЕсли;
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыКПередачеСоСкладов") Тогда Возврат; КонецЕсли;

	СтруктТаблицДокумента=Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаТовары", СтруктураТД.Комплекты);
	СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", СтруктураТД.Тара);
		
	ТаблицыДанныхДокумента=ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТовары");
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
		
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыПереданные(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.ТоварыПереданные.Записывать=Истина;
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыПереданные") Тогда Возврат; КонецЕсли;

	тзДанные=Движения.ТоварыПереданные.ВыгрузитьКолонки();
	
	Для каждого СтрокаКоллекции Из СтруктураТД.Тара Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.СуммаВзаиморасчетов=СтрокаКоллекции.Сумма;
		НоваяСтрока.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара;
	КонецЦикла;

	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
			НоваяСтрока=тзДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СуммаВзаиморасчетов=СтрокаКоллекции.СуммаСНДС;
			НоваяСтрока.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию;
		КонецЦикла;
	КонецЕсли;

	Если тзДанные.Количество()=0 Тогда Возврат; КонецЕсли;
	
	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДанные.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");

	Движения.ТоварыПереданные.Загрузить(тзДанные);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;
	Если НЕ ВидПередачи=Перечисления.ВидыПередачиТоваров.СоСклада Тогда Возврат; КонецЕсли;

	//*** Движения.ПартииТоваровНаСкладах.Записывать=Ложь;
	//Продажи услуг
	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Если СтруктураТД.Услуги.Количество()>0 Тогда
			СтруктураШД.Вставить("РегистрНакопления_Продажи", СтруктураТД.Услуги);
		КонецЕсли;
	КонецЕсли;
	СтруктураШД.Вставить("Отказ", Отказ);
	СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ) Экспорт
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетНДС") Тогда Возврат; КонецЕсли;
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда	Возврат; КонецЕсли;
	Если Не СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда Возврат; КонецЕсли;

	ТаблицаПоТоварам=СтруктураТД.Товары;
	ТаблицаПоУслугам=СтруктураТД.Услуги;

	СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, Услуга, ТипДоговораКонтрагента 
		                                          |,СтавкаНДС, Сумма, НДС, СуммаНДС, СуммаБезНДС
		                                          |,Комиссионный,Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом
		                                          |,СуммаСписания, Количество");

	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ТаблицаВыручки=ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам, СтруктураТаблицыВыручки,,Истина);

	ВыручкаПоТоварам=ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки,,Истина);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам, ТаблицаВыручки);
		
	ВыручкаПоОС=ОбщегоНазначения.СформироватьТаблицуЗначений(СтруктураТД.ОС, СтруктураТаблицыВыручки,,Истина);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоОС, ТаблицаВыручки);
		
	ВыручкаПоНМА=ОбщегоНазначения.СформироватьТаблицуЗначений(СтруктураТД.НМА, СтруктураТаблицыВыручки,,Истина);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоНМА, ТаблицаВыручки);

	ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
	ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");

	Если СтруктураШД.УчитыватьНДС И НЕ УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Подвид)="Корректировка" Тогда
		//СтруктураТД.ОС.Колонки.Добавить("ВидЦенности");
		//СтруктураТД.ОС.Колонки.Добавить("Ценность");
		СтруктураТД.ОС.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ОС, "ВидЦенности");

		//СтруктураТД.НМА.Колонки.Добавить("ВидЦенности");
		//СтруктураТД.НМА.Колонки.Добавить("Ценность");
		СтруктураТД.НМА.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.НМА, "ВидЦенности");

		УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШД, СтруктураТД.ОС, Движения, Отказ);
		УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШД, СтруктураТД.НМА, Движения, Отказ);
		УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШД, ТаблицаПоУслугам, Движения, Отказ);
	КонецЕсли;

	УчетНДС.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШД, ТаблицаВыручки, Движения, Отказ);

	Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Подвид)="Корректировка" Тогда
		СтруктураТЧ=Новый Структура;
		СтруктураТЧ.Вставить("ОС",СтруктураТД.ОС);
		СтруктураТЧ.Вставить("НМА",СтруктураТД.НМА);
		СтруктураТЧ.Вставить("Услуги",ТаблицаПоУслугам);
		СтруктураТЧ.Вставить("Товары",ТаблицаПоТоварам);
		Если ЗначениеЗаполнено(СтруктураШД.КорректируемыйПериод) Тогда
			Для Каждого СтрокаКоллекции ИЗ СтруктураТЧ Цикл
				тзСсылка=СтрокаКоллекции.Значение;
				тзСсылка.Колонки.Добавить("ЗаписьДополнительногоЛиста");
				тзСсылка.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста");
				тзСсылка.Колонки.Добавить("КорректируемыйПериод");
				тзСсылка.ЗаполнитьЗначения(СтруктураШД.КорректируемыйПериод, "КорректируемыйПериод");
				//*** тзСсылка.Колонки.Добавить("КодВидаОперации");
				тзСсылка.ЗаполнитьЗначения(СтруктураШД.КодВидаОперации, "КодВидаОперации");
			КонецЦикла;	
		КонецЕсли;	
		
		СтруктураТВПокупки=Новый Структура;
		СтруктураТВПродажи=Новый Структура;
		
		ТоварыВПродажи=СтруктураТЧ.Товары.СкопироватьКолонки();
		ТоварыВПокупки=СтруктураТЧ.Товары.СкопироватьКолонки();
		Для Каждого СтрокаКоллекции ИЗ СтруктураТЧ.Товары Цикл
			Если СтрокаКоллекции.Сумма>0 Тогда
				ЗаполнитьЗначенияСвойств(ТоварыВПродажи.Добавить(),СтрокаКоллекции);
			Иначе
				ЗаполнитьЗначенияСвойств(ТоварыВПокупки.Добавить(),СтрокаКоллекции);
			КонецЕсли;	
		КонецЦикла;	
		Если НЕ ТоварыВПокупки.Количество()=0 Тогда
			СтруктураТВПокупки.Вставить("ТоварыВПокупки",ТоварыВПокупки);
		КонецЕсли;
		Если НЕ ТоварыВПродажи.Количество()=0 Тогда
			СтруктураТВПродажи.Вставить("ТоварыВПродажи",ТоварыВПродажи);
		КонецЕсли;
		
		УслугиВПродажи=СтруктураТЧ.Услуги.СкопироватьКолонки();
		УслугиВПокупки=СтруктураТЧ.Услуги.СкопироватьКолонки();
		Для Каждого СтрокаКоллекции ИЗ СтруктураТЧ.Услуги Цикл
			Если СтрокаКоллекции.Сумма>0 Тогда
				ЗаполнитьЗначенияСвойств(УслугиВПродажи.Добавить(),СтрокаКоллекции);
			Иначе
				ЗаполнитьЗначенияСвойств(УслугиВПокупки.Добавить(),СтрокаКоллекции);
			КонецЕсли;	
		КонецЦикла;	
		Если НЕ УслугиВПокупки.Количество()=0 Тогда
			СтруктураТВПокупки.Вставить("УслугиВПокупки",УслугиВПокупки);
		КонецЕсли;
		Если НЕ УслугиВПродажи.Количество()=0 Тогда
			СтруктураТВПродажи.Вставить("УслугиВПродажи",УслугиВПродажи);
		КонецЕсли;
	
		УчетНДС.СформироватьДвиженияПоРегиструНДСЗаписиКнигиПокупок(СтруктураШД, СтруктураТВПокупки, Движения, Отказ, Истина);
		УчетНДС.СформироватьДвиженияПоРегиструНДСЗаписиКнигиПродаж(СтруктураШД, СтруктураТВПродажи, Движения, Отказ);
	КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетЗаказов(СтруктураШД, СтруктураТД, Отказ)
	//*** Движения.ЗаказыПокупателей.Записывать=Истина;
	//*** Движения.ВнутренниеЗаказы.Записывать=Истина;
	//*** Движения.ЗаказыНаПроизводство.Записывать=Истина;

	Если Сделки.Количество()=0 Тогда Возврат; КонецЕсли;

	СтруктураПараметров=Новый Структура("МоментВремени,Дата,Ссылка,Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШД);
	СтруктураПараметров.Вставить("ТаблицаДвижений1", Движения.ЗаказыПокупателей.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвижений2", Движения.ВнутренниеЗаказы.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвижений3", Движения.ЗаказыНаПроизводство.ВыгрузитьКолонки());

	УправлениеЗаказамиСервер.СформироватьДвиженияРегистров(СтруктураПараметров, СтруктураТД, Отказ);

	Движения.ЗаказыПокупателей	 .Загрузить(СтруктураПараметров.ТаблицаДвижений1);
	Движения.ВнутренниеЗаказы	 .Загрузить(СтруктураПараметров.ТаблицаДвижений2);
	Движения.ЗаказыНаПроизводство.Загрузить(СтруктураПараметров.ТаблицаДвижений3);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Основание=Неопределено Или ТипЗнч(Основание)=Тип("Структура") Тогда Возврат; КонецЕсли;

	ЗаполнитьШД(Основание);
	ЗаполнитьТД(Основание);

	//Установить типовые операции по регистру правил
	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	Если НЕ РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		ОбщегоНазначения.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли;

	//*** УправлениеДокументамиСервер.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	//Для каждого СтрокаКоллекции Из Движения Цикл
	//	Если ТипЗнч(СтрокаКоллекции)=Тип("РегистрНакопленияНаборЗаписей.ПлатежныйКалендарь") Тогда
	//		Продолжить;
	//	КонецЕсли; 
	// 	СтрокаКоллекции.Записывать=Истина;
	//КонецЦикла;

	НастройкиПользователяСервер.ПроверитьДопустимостьЦенОтпуска(Ссылка, "Товары", Отказ);	
	НастройкиПользователяСервер.ПроверитьДопустимостьЦенОтпуска(Ссылка, "Услуги", Отказ);

	СтруктураШД=Документы.РеализацияТоваровУслуг.СформироватьСтруктуруШД(Ссылка);
	СтруктураШД.Вставить("МоментВремени", МоментВремени());
   	СтруктураШД.Вставить("Заголовок", ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
	СтруктураШД.Вставить("ВалютаРегламентированногоУчета", МодульВалютногоУчета.ПолучитьВалюту("Бух"));

	Если СтруктураШД.ДопУсловияДоговора=Истина Тогда
		ЦенообразованиеСервер.ПроверкаУсловийДоговора(ЭтотОбъект, Отказ);
		Если Отказ Тогда Возврат; КонецЕсли;
	КонецЕсли;

	СтруктураТД=Документы.РеализацияТоваровУслуг.ПодготовитьТаблицыДокумента(СтруктураШД, Отказ);
	Если НЕ СоставНабора.Количество()=0 Тогда
		тзСоставНабора=СоставНабора.Выгрузить();
		Для каждого СтрокаКоллекции Из тзСоставНабора Цикл
			СтрокаТЧ=Товары.Найти(СтрокаКоллекции.ID_Товары, "ID");
			Если СтрокаТЧ=Неопределено Тогда Продолжить; КонецЕсли; //Ошибка
			СтрокаКоллекции.Количество=?(СтрокаКоллекции.ЕдиницаИзмерения.Коэффициент <> 0, СтрокаКоллекции.Количество * СтрокаТЧ.Количество * СтрокаТЧ.ЕдиницаИзмерения.Коэффициент / СтрокаКоллекции.ЕдиницаИзмерения.Коэффициент, 0);
		КонецЦикла;
		СтруктураТД.Вставить("СоставНабора", тзСоставНабора);
	КонецЕсли;

	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			//*** Движения[СтрокаМассива].Записывать=Истина;
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ УправлениеПользователямиСервер.РазрешитьНулевыеЦеныВОпте() Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Сумма");
		ПроверяемыеРеквизиты.Добавить("Услуги.Сумма");
	КонецЕсли;
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Продажа");