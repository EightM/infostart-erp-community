Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	стрСумма=?(ВалютаДокумента=ДополнительныеСвойства.ВалютаБухУчета, "СуммаРегл", "Сумма");
	ОбщийДолгКредитора=ДолгКредитора.Итог(стрСумма);
	ОбщийДолгДебитора=ДолгДебитора.Итог(стрСумма);

	СуммаВзаимозачета=Мин(ОбщийДолгКредитора, ОбщийДолгДебитора);
	СуммаДокумента=Мин(СуммаДокумента, СуммаВзаимозачета);

	Упаковать(ДолгДебитора, Истина);
	Упаковать(ДолгКредитора, Истина);	
КонецПроцедуры

Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр(ПоДокументам=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаБухУчета", ДополнительныеСвойства.ВалютаБухУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидДоговораПокупатель", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("ВидДоговораПрочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.СуммаБухОстаток КАК СуммаБух,
	|	ИсточникДанных.СуммаВалОстаток КАК СуммаВал,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДокумента,
	|			Контрагент = &Контрагент
	|		    И Организация = &Организация
	|		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	|		        ИЛИ &ВалютаДокумента = &ВалютаБухУчета) И (ДоговорКонтрагента.ВидДоговора = &ВидДоговораПокупатель ИЛИ ДоговорКонтрагента.ВидДоговора = &ВидДоговораПрочее) ) КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ИсточникДанных.СуммаБухОстаток > 0
	|";
	
	Если ПоДокументам Тогда
		тзДанные=Запрос.Выполнить().Выгрузить();
		тзДанные.Свернуть("ДоговорКонтрагента","СуммаБух,СуммаВал");

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКонца",КонецДня(Дата));
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Договор",тзДанные.ВыгрузитьКолонку("ДоговорКонтрагента"));
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИсточникДанных.Регистратор.Дата КАК Дата,
		|	ИсточникДанных.Регистратор КАК Документ,
		|	ИсточникДанных.ДоговорКонтрагента,
		|	ИсточникДанных.СуммаБухПриход КАК СуммаБух,
		|	ИсточникДанных.СуммаВалПриход КАК СуммаВал
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(,	&ДатаКонца,	Регистратор, Организация = &Организация И ДоговорКонтрагента В (&Договор)) КАК ИсточникДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|";		
		тзДокументы=Запрос.Выполнить().Выгрузить();
		тзДокументы.Сортировать("Дата Убыв");

		тзДолгДебитора=ДолгДебитора.ВыгрузитьКолонки();
		тзДолгДебитора.Колонки.Добавить("Дата");
		СуммаПокупателя=0;
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			СуммаПокупателя=СтрокаТз.СуммаБух;
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаТз.ДоговорКонтрагента);
			МассивСтрок=тзДокументы.НайтиСтроки(СтруктураПоиска);
			Для Каждого Строка ИЗ МассивСтрок Цикл
				Если СуммаПокупателя=0 Тогда Прервать; КонецЕсли;
				Если СуммаПокупателя>Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгДебитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = Строка.СуммаВал;
					НоваяСтрока.СуммаРегл                     = Строка.СуммаБух;
					//Если Год(Дата)>2018 Тогда
					//	НоваяСтрока.СуммаНДС                      = Строка.СуммаБух*20/120;
					//Иначе
					//	НоваяСтрока.СуммаНДС                      = Строка.СуммаБух*18/118;
					//КонецЕсли;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					НоваяСтрока.ДокументРасчетовСКонтрагентом=Строка.Документ;
					СуммаПокупателя=СуммаПокупателя-Строка.СуммаБух;
				КонецЕсли;	
				Если СуммаПокупателя<=Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгДебитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = СуммаПокупателя;
					НоваяСтрока.СуммаРегл                     = СуммаПокупателя;
					//Если Год(Дата)>2018 Тогда
					//	НоваяСтрока.СуммаНДС                  = СуммаПокупателя*20/120;
					//Иначе
					//	НоваяСтрока.СуммаНДС                  = СуммаПокупателя*18/118;
					//КонецЕсли;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					НоваяСтрока.ДокументРасчетовСКонтрагентом=Строка.Документ;
					СуммаПокупателя=0;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		тзДолгДебитора.Сортировать("Дата Возр");
		ДолгДебитора.Загрузить(тзДолгДебитора);
	Иначе	
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока                               = ДолгДебитора.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
			НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                         = Выборка.СуммаВал;
			НоваяСтрока.СуммаРегл                     = Выборка.СуммаБух;
			Если Год(Дата)>2018 Тогда
				НоваяСтрока.СуммаНДС                  = Выборка.СуммаБух*20/120;
            Иначе
				НоваяСтрока.СуммаНДС                  = Выборка.СуммаБух*18/118;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр(ПоДокументам=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаБухУчета", ДополнительныеСвойства.ВалютаБухУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидДоговораПоставщик", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Запрос.УстановитьПараметр("ВидДоговораПрочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента,
	|	-ИсточникДанных.СуммаБухОстаток КАК СуммаБух,
	|	-ИсточникДанных.СуммаВалОстаток КАК СуммаВал,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДокумента,
	|			Контрагент = &Контрагент
	|		    И Организация = &Организация
	|		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	|		        ИЛИ &ВалютаДокумента = &ВалютаБухУчета) И (ДоговорКонтрагента.ВидДоговора = &ВидДоговораПоставщик ИЛИ ДоговорКонтрагента.ВидДоговора = &ВидДоговораПрочее)) КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ИсточникДанных.СуммаБухОстаток < 0
	|";

	Если ПоДокументам Тогда
		тзДанные=Запрос.Выполнить().Выгрузить();
		тзДанные.Свернуть("ДоговорКонтрагента","СуммаБух,СуммаВал");

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКонца",КонецДня(Дата));
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Договор",тзДанные.ВыгрузитьКолонку("ДоговорКонтрагента"));
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИсточникДанных.Регистратор.Дата КАК Дата,
		|	ИсточникДанных.Регистратор КАК Документ,
        |	ИсточникДанных.СуммаБухРасход КАК СуммаБух,
        |	ИсточникДанных.СуммаВалРасход КАК СуммаВал,
		|	ИсточникДанных.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(,	&ДатаКонца,	Регистратор, Организация = &Организация	И ДоговорКонтрагента В (&Договор)) КАК ИсточникДанных
        |УПОРЯДОЧИТЬ ПО
        |	Дата УБЫВ
		|";
		тзДокументы=Запрос.Выполнить().Выгрузить();
		тзДокументы.Сортировать("Дата Убыв");

		тзДолгКредитора=ДолгКредитора.ВыгрузитьКолонки();
		тзДолгКредитора.Колонки.Добавить("Дата");
		СуммаПокупателя=0;
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			СуммаПокупателя=СтрокаТз.СуммаБух;
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаТз.ДоговорКонтрагента);
			МассивСтрок=тзДокументы.НайтиСтроки(СтруктураПоиска);
			Для Каждого Строка ИЗ МассивСтрок Цикл
				Если СуммаПокупателя=0 Тогда Прервать; КонецЕсли;
				Если СуммаПокупателя>Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгКредитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = Строка.СуммаВал;
					НоваяСтрока.СуммаРегл                     = Строка.СуммаБух;
					//Если Год(Дата)>2018 Тогда
					//	НоваяСтрока.СуммаНДС                  = Строка.СуммаБух*20/120;
					//Иначе	
					//	НоваяСтрока.СуммаНДС                      = Строка.СуммаБух*18/118;
					//КонецЕсли;
					НоваяСтрока.ДокументРасчетовСКонтрагентом=Строка.Документ;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					СуммаПокупателя=СуммаПокупателя-Строка.СуммаБух;
				КонецЕсли;	
				Если СуммаПокупателя<=Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгКредитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = СуммаПокупателя;
					НоваяСтрока.СуммаРегл                     = СуммаПокупателя;
					
					//Если Год(Дата)>2018 Тогда
					//	НоваяСтрока.СуммаНДС                  = СуммаПокупателя*20/120;
					//Иначе
					//	НоваяСтрока.СуммаНДС                      = СуммаПокупателя*18/118;
					//КонецЕсли;
					НоваяСтрока.ДокументРасчетовСКонтрагентом=Строка.Документ;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					СуммаПокупателя=0;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		тзДолгКредитора.Сортировать("Дата Возр");
		ДолгКредитора.Загрузить(тзДолгКредитора);
	Иначе	
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока                               = ДолгКредитора.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
			НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                         = Выборка.СуммаВал;
			НоваяСтрока.СуммаРегл                     = Выборка.СуммаБух;
			Если Год(Дата)>2018 Тогда
				НоваяСтрока.СуммаНДС         = НоваяСтрока.СуммаРегл*20/120;
			Иначе			
				НоваяСтрока.СуммаНДС         = НоваяСтрока.СуммаРегл*18/118;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПересчитатьСуммуПоСтроке(СтрокаДанных, ПересчетВалютнойСуммы=Ложь, Запись=Ложь) Экспорт
	Если СтрокаДанных=Неопределено Тогда Возврат; КонецЕсли;
	
	Если НЕ СтрокаДанных.ДоговорКонтрагента.Владелец.УчетБезНДС Тогда
		Если Не Запись Тогда
			СуммуНДСПересчитали=Ложь;
			Если ЗначениеЗаполнено(СтрокаДанных.ДокументРасчетовСКонтрагентом) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("СуммаНДС",СтрокаДанных.ДокументРасчетовСКонтрагентом.Метаданные()) Тогда
					Если УправлениеМетаданными.ЕстьРеквизит("СуммаДокумента",СтрокаДанных.ДокументРасчетовСКонтрагентом.Метаданные()) Тогда
						СтрокаДанных.СуммаНДС=(СтрокаДанных.ДокументРасчетовСКонтрагентом.СуммаНДС/СтрокаДанных.ДокументРасчетовСКонтрагентом.СуммаДокумента)*СтрокаДанных.СуммаРегл;
						СуммуНДСПересчитали=Истина;
					КонецЕсли;
				КонецЕсли;	
				Если СуммуНДСПересчитали=Ложь Тогда
					Если Год(СтрокаДанных.ДокументРасчетовСКонтрагентом.Дата)>2018 Тогда
						СтрокаДанных.СуммаНДС= СтрокаДанных.СуммаРегл*20/120;
					Иначе	
						СтрокаДанных.СуммаНДС=СтрокаДанных.СуммаРегл*18/118;
					КонецЕсли;
				КонецЕсли;	
			Конецесли;	
			Если СуммуНДСПересчитали=Ложь Тогда
				Если Год(Дата)>2018 Тогда
					СтрокаДанных.СуммаНДС= СтрокаДанных.СуммаРегл*20/120;
				Иначе	
					СтрокаДанных.СуммаНДС=СтрокаДанных.СуммаРегл*18/118;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаДоговора=СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту("Бух") И ВалютаДоговора=ВалютаДокумента Тогда
		СтрокаДанных.Сумма=0; Возврат; 
	КонецЕсли;

	Если ПересчетВалютнойСуммы Тогда
		СтрокаДанных.Сумма=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаРегл,
							ДополнительныеСвойства.ВалютаБухУчета, ВалютаДоговора,
							1, СтрокаДанных.КурсВзаиморасчетов,
							1, СтрокаДанных.КратностьВзаиморасчетов);
	Иначе
		СтрокаДанных.Сумма=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаРегл,
							ВалютаДоговора, ДополнительныеСвойства.ВалютаБухУчета,
							СтрокаДанных.КурсВзаиморасчетов, 1, 
							СтрокаДанных.КратностьВзаиморасчетов, 1);
	КонецЕсли;	
КонецПроцедуры

Процедура Упаковать(тчСсылка, Запись=Ложь) Экспорт
	ЭтоВалютнаяСумма=?(ВалютаДокумента=ДополнительныеСвойства.ВалютаБухУчета, Ложь, Истина);
	стрАтрибутСуммы=?(ЭтоВалютнаяСумма, "Сумма", "СуммаРегл"); СуммаКОплате=СуммаДокумента;
	тзСсылка=тчСсылка.Выгрузить(); тчСсылка.Очистить();
	Для Каждого СтрокаКоллекции Из тзСсылка Цикл
		СуммаКОплатеДок=Мин(СуммаКОплате, СтрокаКоллекции[стрАтрибутСуммы]);
		Если СуммаКОплатеДок>0 Тогда
			НоваяСтрока=тчСсылка.Добавить();
			НоваяСтрока[стрАтрибутСуммы]=СуммаКОплатеДок;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции,,стрАтрибутСуммы);
			ПересчитатьСуммуПоСтроке(НоваяСтрока, НЕ ЭтоВалютнаяСумма, Запись);
		КонецЕсли;
		СуммаКОплате=СуммаКОплате-СуммаКОплатеДок;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьТаблицуДолга(СтруктураШД, Отказ, Заголовок, стрТабличнаяЧасть)
	тзДанные=ЭтотОбъект[стрТабличнаяЧасть].Выгрузить();
	тзДанные.Колонки.Добавить("ВестиПлатежныйКалендарь");
	тзДанные.Колонки.Добавить("ВалютаВзаиморасчетов");
	тзДанные.Колонки.Добавить("ДоговорВид");
	тзДанные.Колонки.Добавить("КонтрагентДоговора");
	тзДанные.Колонки.Добавить("Контрагент");
	тзДанные.Колонки.Добавить("СуммаБух");
	тзДанные.Колонки.Добавить("Организация");
	тзДанные.Колонки.Добавить("Период");
	тзДанные.Колонки.Добавить("Активность");
	тзДанные.Колонки.Добавить("ВидТабличнойЧасти");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.ВестиПлатежныйКалендарь=СтрокаКоллекции.ДоговорКонтрагента.ВестиПлатежныйКалендарь;
		СтрокаКоллекции.ВалютаВзаиморасчетов=СтрокаКоллекции.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтрокаКоллекции.ДоговорВид=СтрокаКоллекции.ДоговорКонтрагента.ВидДоговора;
		СтрокаКоллекции.КонтрагентДоговора=СтрокаКоллекции.ДоговорКонтрагента.Владелец;
		СтрокаКоллекции.Контрагент=СтрокаКоллекции.ДоговорКонтрагента.Владелец;
		СтрокаКоллекции.СуммаБух=СтрокаКоллекции.СуммаРегл;
	КонецЦикла;

	тзДанные.ЗаполнитьЗначения(Организация, "Организация");
	тзДанные.ЗаполнитьЗначения(Дата, "Период");
	тзДанные.ЗаполнитьЗначения(Истина, "Активность");
	тзДанные.ЗаполнитьЗначения(стрТабличнаяЧасть, "ВидТабличнойЧасти");
	
	Возврат тзДанные; 
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_КУДиР(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();

	//Задолженность по покупателям
	Если СтруктураТД.ПокупателиЗадолженностьДт.Количество()>0 Тогда		
		Для каждого СтрокаКоллекции Из СтруктураТД.ПокупателиЗадолженностьДт Цикл
			НоваяСтрока=тзДвижения.Добавить();
  			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СуммаБух=СтрокаКоллекции.СуммаРегл;
			НоваяСтрока.СуммаВал=СтрокаКоллекции.Сумма;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
		КонецЦикла;
	КонецЕсли; 

	//Задолженность по поставщикам
	Если СтруктураТД.ПоставщикиЗадолженностьКт.Количество()>0 Тогда
		Для каждого СтрокаКоллекции Из СтруктураТД.ПоставщикиЗадолженностьКт Цикл
			НоваяСтрока=тзДвижения.Добавить();
  			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СуммаБух=СтрокаКоллекции.СуммаРегл;
			НоваяСтрока.СуммаВал=СтрокаКоллекции.Сумма;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
		КонецЦикла;
	КонецЕсли; 

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ)
	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.ОбъектНалогообложенияУСН=Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда	Возврат; КонецЕсли;	
	СистемаНалогообложения=УчетнаяПолитика.СистемаНалогообложения;
	Если СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная Или СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная_ЕНВД Тогда
		Если СтруктураТД.ПоставщикиЗадолженностьКт.Количество()<>0 Тогда
			тзДанные=СтруктураТД.ПоставщикиЗадолженностьКт.Скопировать();
			тзДанные.Свернуть("ДоговорКонтрагента,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","СуммаРегл");
			Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
				Если НЕ СтрокаКоллекции.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда Продолжить; КонецЕсли;
				НоваяСтрока=Движения.РасходыПриУСН.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
				НоваяСтрока.Сумма=СтрокаКоллекции.СуммаРегл;
				НоваяСтрока.ТОП=ТОП;
				НоваяСтрока.Активность=Истина;
				НоваяСтрока.Период=Дата;
				НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяСтрока.Организация=Организация;
				НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.ПредоплатаПоставщику;
				НоваяСтрока.РасчетныйДокумент=Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_КУДиР(СтруктураШД, СтруктураТД, Отказ)
	УчетнаяПолитика=ПараметрыУчетнойПолитики(Истина); 
	СистемаНалогообложения=УчетнаяПолитика.СистемаНалогообложения;
	Если СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная Или СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная_ЕНВД Тогда
		Если СтруктураТД.ПокупателиЗадолженностьДт.Количество()<>0 Тогда
			тзДанные=СтруктураТД.ПокупателиЗадолженностьДт.Скопировать();
			тзДанные.Свернуть("ДоговорКонтрагента","СуммаРегл, СуммаУСН");
			тзДанные.Колонки.СуммаРегл.Имя="СуммаБух";
			НалоговыйУчет.ДвиженияДенежныхСредствКУДиР(Ссылка, ДополнительныеСвойства, СтруктураШД, тзДанные, "ДоходыРасходы");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ДвижениеПоРегистрамБух(ОбъектРегистр, тзОстаткиНаСчетах) Экспорт
	Если ТОП.Пустая() Тогда Возврат Истина; КонецЕсли; Результат=Истина;

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	
	стДвиженияРегистров=Новый Структура;
	
	//Общие параметры
	СтруктураПроводки=Новый Структура;
	СтруктураПроводки.Вставить("Регистратор");
	СтруктураПроводки.Вставить("Период");
	СтруктураПроводки.Вставить("Организация");
	СтруктураПроводки.Вставить("СчетДт");
	СтруктураПроводки.Вставить("СчетКт");
	СтруктураПроводки.Вставить("ВалютаДт");
	СтруктураПроводки.Вставить("ВалютаКт");

	тзДолгКредитора=ДолгКредитора.Выгрузить();
	тзДолгДебитора=ДолгДебитора.Выгрузить();

	ОсновнаяАналитикаТиповойОперации=УправлениеПроведением.ОсновнаяНастройкаАналитики("Документ_"+Метаданные().Имя);
	тзАналитика=ОсновнаяАналитикаТиповойОперации.НастройкаАналитики.Выгрузить();

	стрИмяРегистра=ОбъектРегистр.Метаданные().Имя;
	стрПроводки="ПроводкиБУ";
	Для Каждого СтрокаТабличнойЧастиК Из тзДолгКредитора Цикл
		тзПроводки=ТОП[стрПроводки].Выгрузить();		
		ЕстьСуммаВал=?(Метаданные.Справочники.ТиповыеОперации.ТабличныеЧасти[стрПроводки].Реквизиты.Найти("СуммаВал")=Неопределено, Ложь, Истина);
		
		Для Каждого СтрокаТОП Из тзПроводки Цикл
			СчетДебет=СтрокаТОП.СчетДебет;
			СчетКредит=СтрокаТОП.СчетКредит;
			
			//Общие реквизиты проводки
			СтруктураПроводки.Регистратор = ЭтотОбъект;
			СтруктураПроводки.Период      = Дата;
			СтруктураПроводки.Организация = Организация;
			СтруктураПроводки.СчетДт      = СчетДебет;
			СтруктураПроводки.СчетКт      = СчетКредит;
			//Если стрИмяРегистра="Хозрасчетный" Тогда
			//	Если СчетДебет.Валютный Тогда
			//		СтруктураПроводки.ВалютаДт=ДополнительныеСвойства.ВалютаБухУчета;
			//	КонецЕсли;
			//	Если СчетКредит.Валютный Тогда
			//		СтруктураПроводки.ВалютаКт=ДополнительныеСвойства.ВалютаБухУчета;
			//	КонецЕсли;
			//КонецЕсли;
			
			стрАтрибут=стрЗаменить(СтрокаТОП.Сумма, "РТЧ.", "");
			Если НЕ УправлениеМетаданными.ЕстьРеквизит(стрАтрибут, Метаданные(), "ДолгКредитора") Тогда
				стрАтрибут="СуммаРегл";
			КонецЕсли; 

			Проводка=ОбъектРегистр.Добавить();
			ЗаполнитьЗначенияСвойств(Проводка, СтруктураПроводки);
			
			НоваяПроводка=Ложь;
			Для каждого СтрокаТабличнойЧастиД Из тзДолгДебитора Цикл
				Если СтрокаТабличнойЧастиД.Сумма=0 И СтрокаТабличнойЧастиД[стрАтрибут]=0 Тогда Продолжить; КонецЕсли; 
				КоличествоДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "Количество", стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧастиД, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				КоличествоКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "Количество", стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧастиК, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				
				СуммаДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "Сумма", стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧастиД, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				СуммаКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "Сумма", стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧастиК, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				
				СуммаНУДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаНУ_Дт" , стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧастиД, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				СуммаПРДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаПР_Дт" , стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧастиД, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				СуммаВРДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаВР_Дт" , стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧастиД, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);

				СуммаНУКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаНУ_Кт" , стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧастиК, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				СуммаПРКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаПР_Кт" , стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧастиК, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				СуммаВРКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаВР_Кт" , стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧастиК, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
				
				текСуммаСписанияВал=Мин(СтрокаТабличнойЧастиД["Сумма"], СтрокаТабличнойЧастиК["Сумма"]);
				текСуммаСписанияБух=Мин(СтрокаТабличнойЧастиД[стрАтрибут], СтрокаТабличнойЧастиК[стрАтрибут]);
				
				//Уменьшим суммы кредита
				СтрокаТабличнойЧастиК.Сумма=СтрокаТабличнойЧастиК.Сумма-текСуммаСписанияВал;
				СтрокаТабличнойЧастиК.СуммаРегл=СтрокаТабличнойЧастиК[стрАтрибут]-текСуммаСписанияБух;

				//Уменьшим суммы дебета
				СтрокаТабличнойЧастиД.Сумма=СтрокаТабличнойЧастиД.Сумма-текСуммаСписанияВал;
				СтрокаТабличнойЧастиД.СуммаРегл=СтрокаТабличнойЧастиД[стрАтрибут]-текСуммаСписанияБух;

				Если НоваяПроводка=Истина Тогда
					НоваяПроводка=Ложь;
					Проводка=ОбъектРегистр.Добавить();
					ЗаполнитьЗначенияСвойств(Проводка, СтруктураПроводки);
				КонецЕсли;

				текКоличество=Мин(КоличествоДт, КоличествоКт);
				Если СчетДебет.Количественный Тогда
					Проводка.КоличествоДт=текКоличество;
				КонецЕсли;				
				Если СчетКредит.Количественный Тогда
					Проводка.КоличествоКт=текКоличество;
				КонецЕсли;
					
				Проводка.Сумма=Мин(СуммаКт, СуммаДт);
				Если СчетДебет.НалоговыйУчет Тогда
					Проводка.СуммаНУДт=Мин(СуммаНУКт, СуммаНУДт);
					Проводка.СуммаПРДт=Мин(СуммаПРКт, СуммаПРДт);
					Проводка.СуммаВРДт=Мин(СуммаВРКт, СуммаВРДт);
				КонецЕсли;
				Если СчетКредит.НалоговыйУчет Тогда
					Проводка.СуммаНУКт=Мин(СуммаНУКт, СуммаНУДт);
					Проводка.СуммаПРКт=Мин(СуммаПРКт, СуммаПРДт);
					Проводка.СуммаВРКт=Мин(СуммаВРКт, СуммаВРДт);
				КонецЕсли;
					
				Если Проводка.Сумма=0 Тогда Прервать; КонецЕсли;
				
				Если стрИмяРегистра="Хозрасчетный" Тогда
					Если ЕстьСуммаВал Тогда
						Если СчетКредит.Валютный Тогда
							Проводка.ВалютнаяСуммаКт=текСуммаСписанияВал;
							Проводка.ВалютаКт=СтрокаТабличнойЧастиД.ДоговорКонтрагента.ВалютаВзаиморасчетов;							
						КонецЕсли;
						Если СчетДебет.Валютный Тогда
							Проводка.ВалютнаяСуммаДт=текСуммаСписанияВал;
							Проводка.ВалютаДт=СтрокаТабличнойЧастиК.ДоговорКонтрагента.ВалютаВзаиморасчетов;							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Результат=УправлениеПроведением.УстановитьСубконто(ЭтотОбъект, Проводка.СчетДт, Проводка.СубконтоДт, тзАналитика, "Д", "ДолгКредитора", СтрокаТабличнойЧастиК);
				Результат=УправлениеПроведением.УстановитьСубконто(ЭтотОбъект, Проводка.СчетКт, Проводка.СубконтоКт, тзАналитика, "К", "ДолгДебитора", СтрокаТабличнойЧастиД);
				НоваяПроводка=Истина;
			КонецЦикла;

			Если Проводка.Сумма=0 И Проводка.СуммаНУДт=0 И Проводка.СуммаПРДт=0 И Проводка.СуммаВРДт=0 И Проводка.СуммаНУКт=0 И Проводка.СуммаПРКт=0 И Проводка.СуммаВРКт=0 Тогда
				ОбъектРегистр.Удалить(Проводка);
			КонецЕсли; //***
		КонецЦикла;
	КонецЦикла;

	//НДС
	СтруктураТОП=Новый Структура; стрПроводки="ПроводкиБУ";
	СтруктураТОП.Вставить("ТОП_ДолгКредитораНДС", "ДолгКредитора");
	СтруктураТОП.Вставить("ТОП_ДолгДебитораНДС", "ДолгДебитора");
	Для каждого СтрокаКоллекции Из СтруктураТОП Цикл
		стрИмя=СтрокаКоллекции.Значение;
		тзДанные=?(стрИмя="ДолгКредитора", тзДолгКредитора, тзДолгДебитора);
		
		ЕстьСуммаВал=?(Метаданные.Справочники.ТиповыеОперации.ТабличныеЧасти[стрПроводки].Реквизиты.Найти("СуммаВал")=Неопределено, Ложь, Истина);
		тзПроводки=ЭтотОбъект[СтрокаКоллекции.Ключ][стрПроводки].Выгрузить();

		Для Каждого СтрокаТабличнойЧасти Из тзДанные Цикл
			Для Каждого СтрокаТОП Из тзПроводки Цикл
				СчетДебет=СтрокаТОП.СчетДебет;
				СчетКредит=СтрокаТОП.СчетКредит;

				НалоговыйУчетДт=СчетДебет.НалоговыйУчет;
				НалоговыйУчетКт=СчетКредит.НалоговыйУчет;

				//Общие реквизиты проводки
				СтруктураПроводки.Регистратор = ЭтотОбъект;
				СтруктураПроводки.Период      = Дата;
				СтруктураПроводки.Организация = Организация;
				СтруктураПроводки.СчетДт      = СчетДебет;
				СтруктураПроводки.СчетКт      = СчетКредит;
				Если стрИмяРегистра="Хозрасчетный" Тогда
					Если СчетДебет.Валютный Тогда
						СтруктураПроводки.ВалютаДт=ДополнительныеСвойства.ВалютаБухУчета;
					КонецЕсли;
					Если СчетКредит.Валютный Тогда
						СтруктураПроводки.ВалютаКт=ДополнительныеСвойства.ВалютаБухУчета;
					КонецЕсли;
				КонецЕсли;
				
				стрАтрибут=стрЗаменить(СтрокаТОП.Сумма, "РТЧ.", "");
				Если НЕ УправлениеМетаданными.ЕстьРеквизит(стрАтрибут, Метаданные(), "ДолгКредитора") Тогда
					стрАтрибут="СуммаРегл";
				КонецЕсли; 
				
				Проводка=ОбъектРегистр.Добавить();
				ЗаполнитьЗначенияСвойств(Проводка, СтруктураПроводки);

				Проводка.Сумма=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "Сумма", стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);

				Если НалоговыйУчетДт Тогда
					СуммаНУДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаНУ_Дт" , стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
					СуммаПРДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаПР_Дт" , стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
					СуммаВРДт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаВР_Дт" , стрИмяРегистра, тзАналитика, "ДолгДебитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);

					Проводка.СуммаНУДт=СуммаНУДт;
					Проводка.СуммаПРДт=СуммаПРДт;
					Проводка.СуммаВРДт=СуммаВРДт;
				КонецЕсли;
				Если НалоговыйУчетКт Тогда
					СуммаНУКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаНУ_Кт" , стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
					СуммаПРКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаПР_Кт" , стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
					СуммаВРКт=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаВР_Кт" , стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
					
					Проводка.СуммаНУКт=СуммаНУКт;
					Проводка.СуммаПРКт=СуммаПРКт;
					Проводка.СуммаВРКт=СуммаВРКт;
				КонецЕсли;

				Если стрИмяРегистра="Хозрасчетный" Тогда
					Если ЕстьСуммаВал И СчетКредит.Валютный Тогда
						Проводка.ВалютнаяСумма=УправлениеПроведением.ПолучитьЗначениеРесурса(ЭтотОбъект, СтрокаТОП, "СуммаВал", стрИмяРегистра, тзАналитика, "ДолгКредитора", СтрокаТабличнойЧасти, тзОстаткиНаСчетах, стДвиженияРегистров,, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
				
				Результат=УправлениеПроведением.УстановитьСубконто(ЭтотОбъект, Проводка.СчетДт, Проводка.СубконтоДт, тзАналитика, "Д", "ДолгКредитора", СтрокаТабличнойЧасти);
				Результат=УправлениеПроведением.УстановитьСубконто(ЭтотОбъект, Проводка.СчетКт, Проводка.СубконтоКт, тзАналитика, "К", "ДолгДебитора", СтрокаТабличнойЧасти);
				
				Если Проводка.Сумма=0 И Проводка.СуммаНУДт=0 И Проводка.СуммаПРДт=0 И Проводка.СуммаВРДт=0 И Проводка.СуммаНУКт=0 И Проводка.СуммаПРКт=0 И Проводка.СуммаВРКт=0 Тогда
					ОбъектРегистр.Удалить(Проводка);
				КонецЕсли; //***
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ)

	Если СтруктураТД.ПоставщикиЗадолженностьКт.Количество()>0 Тогда
		тзДвижения=Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
		Для каждого СтрокаКоллекции Из СтруктураТД.ПоставщикиЗадолженностьКт Цикл
			Если СтрокаКоллекции.ДоговорВид<>Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				Продолжить; 
			КонецЕсли;
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Поставщик=СтрокаКоллекции.Контрагент;
			НоваяСтрока.ТипДоговораКонтрагента=СтрокаКоллекции.ТипДоговораКонтрагента;
			НоваяСтрока.Сумма=СтрокаКоллекции.СуммаРегл;
		КонецЦикла;
		Если тзДвижения.Количество()>0 Тогда
			тзДвижения.ЗаполнитьЗначения(Дата, "Период");
			тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
			тзДвижения.ЗаполнитьЗначения(Ссылка, "Документ");
			тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
			тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
            Движения.НДСРасчетыСПоставщиками.Загрузить(тзДвижения);
		КонецЕсли;
	КонецЕсли; 	

	Если СтруктураТД.ПокупателиЗадолженностьДт.Количество() > 0 Тогда
		тзДвижения=Движения.НДСРасчетыСПокупателями.ВыгрузитьКолонки();
		Для каждого СтрокаКоллекции Из СтруктураТД.ПокупателиЗадолженностьДт Цикл
			Если СтрокаКоллекции.ДоговорВид<>Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				Продолжить; 
			КонецЕсли;
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Покупатель=СтрокаКоллекции.Контрагент;
			НоваяСтрока.ТипДоговораКонтрагента=СтрокаКоллекции.ТипДоговораКонтрагента;
			НоваяСтрока.Сумма=СтрокаКоллекции.СуммаРегл;
		КонецЦикла;
		Если тзДвижения.Количество()>0 Тогда
			тзДвижения.ЗаполнитьЗначения(Дата, "Период");
			тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
			тзДвижения.ЗаполнитьЗначения(Ссылка, "Документ");
			тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
			тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
            Движения.НДСРасчетыСПокупателями.Загрузить(тзДвижения);
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);						
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();
	
	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);

	//Формирование значений реквизитов табличных частей
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("ПокупателиЗадолженностьДт", СформироватьТаблицуДолга(СтруктураШД, Отказ, Заголовок, "ДолгДебитора"));
	СтруктураТД.Вставить("ПоставщикиЗадолженностьКт", СформироватьТаблицуДолга(СтруктураШД, Отказ, Заголовок, "ДолгКредитора"));
 
	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);