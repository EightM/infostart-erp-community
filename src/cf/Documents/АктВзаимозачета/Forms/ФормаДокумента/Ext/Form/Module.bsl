&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПоСтроке(СтрокаТабЧасти, ТабЧасть="", ПересчетВалютнойСуммы=Ложь, Запись=Ложь) Экспорт
	
	Если СтрокаТабЧасти=Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТабЧасть="" Тогда
		СтрокаДанных=СтрокаТабЧасти;
	Иначе
		СтрокаДанных=Объект[ТабЧасть].НайтиПоИдентификатору(СтрокаТабЧасти);
	КонецЕсли;
	
	
	Если НЕ СтрокаДанных.ДоговорКонтрагента.Владелец.УчетБезНДС Тогда
		Если Не Запись Тогда
			СтрокаДанных.СуммаНДС=СтрокаДанных.СуммаРегл*20/120;
		КонецЕсли;
	КонецЕсли;
	
	ВалютаДоговора=СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если Объект.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту("Бух") И ВалютаДоговора=Объект.ВалютаДокумента Тогда
		СтрокаДанных.Сумма=0; Возврат; 
	КонецЕсли;

	Если ПересчетВалютнойСуммы Тогда
		СтрокаДанных.Сумма=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаРегл,
							МодульВалютногоУчета.ПолучитьВалюту(), ВалютаДоговора,
							1, СтрокаДанных.КурсВзаиморасчетов,
							1, СтрокаДанных.КратностьВзаиморасчетов);
	Иначе
		СтрокаДанных.Сумма=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаРегл,
							ВалютаДоговора, МодульВалютногоУчета.ПолучитьВалюту(),
							СтрокаДанных.КурсВзаиморасчетов, 1, 
							СтрокаДанных.КратностьВзаиморасчетов, 1);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиПоБухСчетамТОП(ПоДокументам=Ложь)
	
	СчетПокупателя=Объект.ТОП.ПроводкиБУ[0].СчетКредит;
	СчетПоставщика=Объект.ТОП.ПроводкиБУ[0].СчетДебет;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаПокупателя,
	|	0 КАК СуммаПоставщика
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет = &СчетПокупателя,
	|			,
	|			Субконто1 = &Покупатель
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки
	|				
	|ОБЪЕДИНИТЬ ВСЕ				
	|				
	|				
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет = &СчетПоставщика,
	|			,
	|			Субконто1 = &Поставщик
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая)); 			 
	Запрос.УстановитьПараметр("СчетПокупателя", СчетПокупателя);
	Запрос.УстановитьПараметр("Покупатель", Объект.КонтрагентДебитор);
	Запрос.УстановитьПараметр("СчетПоставщика", СчетПоставщика);
	Запрос.УстановитьПараметр("Поставщик",Объект.КонтрагентКредитор); 
	Запрос.УстановитьПараметр("Организация",Объект.Организация); 
	тзДанные=Запрос.Выполнить().Выгрузить();
	
	Если ПоДокументам Тогда
		Запрос=Новый Запрос;
		
		Запрос.УстановитьПараметр("ДатаКонца", Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая)); 			 
		Запрос.УстановитьПараметр("СчетПокупателя", СчетПокупателя);
		Запрос.УстановитьПараметр("Покупатель", Объект.КонтрагентДебитор);
		Запрос.УстановитьПараметр("СчетПоставщика", СчетПоставщика);
		Запрос.УстановитьПараметр("Поставщик",Объект.КонтрагентКредитор); 
		Запрос.УстановитьПараметр("Организация",Объект.Организация); 
		
		
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 500
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаПокупателя,
		|	0 КАК СуммаПоставщика,
		|	ХозрасчетныйОбороты.Период КАК Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			&ДатаКонца,
		|			Регистратор,
		|			Счет = &СчетПокупателя,
		|			,
		|			Субконто1 = &Покупатель
		|				И Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		тзРегистратор62=Запрос.Выполнить().Выгрузить();
		тзРегистратор62.Сортировать("Дата Убыв");
		
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 500
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
		|	ХозрасчетныйОбороты.Регистратор КАК Документ,
		|	0 КАК СуммаПокупателя,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаПоставщика,
		|	ХозрасчетныйОбороты.Период КАК Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			&ДатаКонца,
		|			Регистратор,
		|			Счет = &СчетПоставщика,
		|			,
		|			Субконто1 = &Поставщик
		|				И Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		тзРегистратор60=Запрос.Выполнить().Выгрузить();
		тзРегистратор60.Сортировать("Дата Убыв");
		
		тзДолгКредитора=Объект.ДолгКредитора.Выгрузить();
		тзДолгКредитора.Очистить();
		тзДолгКредитора.Колонки.Добавить("Дата");
		тзДоговоры=тзРегистратор60.Скопировать();
		тзДоговоры.Свернуть("Договор","");
		Для Каждого СтрокаДоговора ИЗ тзДоговоры Цикл
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("Контрагент",Объект.КонтрагентКредитор);
			СтруктураПоиска.Вставить("Договор",СтрокаДоговора.Договор);
			МассивСтрокПоставщика=тзРегистратор60.НайтиСтроки(СтруктураПоиска);
			МассивСтрокСумма=тзДанные.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрокСумма.Количество()=0 Тогда Продолжить; КонецЕсли;
			СтрокаПоставщика=МассивСтрокСумма[0];
			Для КАждого СтрокаМ ИЗ МассивСтрокПоставщика Цикл
				Если СтрокаМ.СуммаПоставщика<=0 Тогда Продолжить; КонецЕсли;
				Если СтрокаПоставщика.СуммаПоставщика=0 Тогда Прервать; КонецЕсли;
				НоваяСтрока=тзДолгКредитора.Добавить();
				НоваяСтрока.ДоговорКонтрагента=СтрокаМ.Договор;
				НоваяСтрока.Дата=СтрокаМ.Дата;
				Если СтрокаПоставщика.СуммаПоставщика<СтрокаМ.СуммаПоставщика Тогда
					НоваяСтрока.СуммаРегл=СтрокаПоставщика.СуммаПоставщика;
					НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
					СтрокаПоставщика.СуммаПоставщика=0;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					Продолжить;
				КонецЕсли;	
				Если СтрокаПоставщика.СуммаПоставщика>=СтрокаМ.СуммаПоставщика Тогда
					НоваяСтрока.СуммаРегл=СтрокаМ.СуммаПоставщика;
					НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
					СтрокаПоставщика.СуммаПоставщика=СтрокаПоставщика.СуммаПоставщика-СтрокаМ.СуммаПоставщика;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			Если НЕ СтрокаТз.СуммаПоставщика=0 Тогда
				НоваяСтрока=тзДолгКредитора.Добавить();
				НоваяСтрока.ДоговорКонтрагента=СтрокаТз.Договор;
				НоваяСтрока.СуммаРегл=СтрокаТз.СуммаПоставщика;
				ПересчитатьСуммуПоСтроке(НоваяСтрока);
			КонецЕсли;	
		КонецЦикла;	
		тзДолгКредитора.Сортировать("Дата Возр");
		Объект.ДолгКредитора.Загрузить(тзДолгКредитора);
		
		тзДолгДебитора=Объект.ДолгДебитора.Выгрузить();
		тзДолгДебитора.Очистить();
		тзДолгДебитора.Колонки.Добавить("Дата");
		тзДоговоры=тзРегистратор62.Скопировать();
		тзДоговоры.Свернуть("Договор","");
		Для Каждого СтрокаДоговора ИЗ тзДоговоры Цикл
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("Контрагент",Объект.КонтрагентДебитор);
			СтруктураПоиска.Вставить("Договор",СтрокаДоговора.Договор);
			
			МассивСтрокПокупателя=тзРегистратор62.НайтиСтроки(СтруктураПоиска);
			МассивСтрокСумма=тзДанные.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрокСумма.Количество()=0 Тогда Продолжить; КонецЕсли;
			СтрокаПокупателя=МассивСтрокСумма[0];
			Для КАждого СтрокаМ ИЗ МассивСтрокПокупателя Цикл
				Если СтрокаМ.СуммаПокупателя<=0 Тогда Продолжить; КонецЕсли;
				Если СтрокаПокупателя.СуммаПокупателя=0 Тогда Прервать; КонецЕсли;
				НоваяСтрока=тзДолгДебитора.Добавить();
				НоваяСтрока.ДоговорКонтрагента=СтрокаМ.Договор;
				НоваяСтрока.Дата=СтрокаМ.Дата;
				Если СтрокаПокупателя.СуммаПокупателя<СтрокаМ.СуммаПокупателя Тогда
					НоваяСтрока.СуммаРегл=СтрокаПокупателя.СуммаПокупателя;
					НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
					СтрокаПокупателя.СуммаПокупателя=0;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					Продолжить;
				КонецЕсли;	
				Если СтрокаПокупателя.СуммаПокупателя>=СтрокаМ.СуммаПокупателя Тогда
					НоваяСтрока.СуммаРегл=СтрокаМ.СуммаПокупателя;
					НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
					СтрокаПокупателя.СуммаПокупателя=СтрокаПокупателя.СуммаПокупателя-СтрокаМ.СуммаПокупателя;
					ПересчитатьСуммуПоСтроке(НоваяСтрока);
					Продолжить;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			Если НЕ СтрокаТз.СуммаПокупателя=0 Тогда
				НоваяСтрока=тзДолгДебитора.Добавить();
				НоваяСтрока.ДоговорКонтрагента=СтрокаТз.Договор;
				НоваяСтрока.СуммаРегл=СтрокаТз.СуммаПокупателя;
				ПересчитатьСуммуПоСтроке(НоваяСтрока);
			КонецЕсли;	
		КонецЦикла;	
		тзДолгДебитора.Сортировать("Дата Возр");
		Объект.ДолгДебитора.Загрузить(тзДолгДебитора);
		Для Каждого СтрокаДок ИЗ Объект.ДолгКредитора Цикл
			Если ЗначениеЗаполнено(СтрокаДок.ДокументРасчетовСКонтрагентом) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("СуммаНДС",СтрокаДок.ДокументРасчетовСКонтрагентом.Метаданные()) Тогда
					Если УправлениеМетаданными.ЕстьРеквизит("СуммаДокумента",СтрокаДок.ДокументРасчетовСКонтрагентом.Метаданные()) Тогда
						СтрокаДок.СуммаНДС=(СтрокаДок.ДокументРасчетовСКонтрагентом.СуммаНДС/СтрокаДок.ДокументРасчетовСКонтрагентом.СуммаДокумента)*СтрокаДок.СуммаРегл;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;
		Для Каждого СтрокаДок ИЗ Объект.ДолгДебитора Цикл
			Если ЗначениеЗаполнено(СтрокаДок.ДокументРасчетовСКонтрагентом) Тогда
				Если УправлениеМетаданными.ЕстьРеквизит("СуммаНДС",СтрокаДок.ДокументРасчетовСКонтрагентом.Метаданные()) Тогда
					Если УправлениеМетаданными.ЕстьРеквизит("СуммаДокумента",СтрокаДок.ДокументРасчетовСКонтрагентом.Метаданные()) Тогда
						СтрокаДок.СуммаНДС=(СтрокаДок.ДокументРасчетовСКонтрагентом.СуммаНДС/СтрокаДок.ДокументРасчетовСКонтрагентом.СуммаДокумента)*СтрокаДок.СуммаРегл;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;	
	Иначе
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			Если СтрокаТз.СуммаПоставщика>0 Тогда
				НоваяСтрока=Объект.ДолгКредитора.Добавить();
				НоваяСтрока.СуммаРегл=СтрокаТз.СуммаПоставщика;
				НоваяСтрока.ДоговорКонтрагента=СтрокаТз.Договор;
			КонецЕсли;
			Если СтрокаТз.СуммаПокупателя>0 Тогда
				НоваяСтрока=Объект.ДолгДебитора.Добавить();
				НоваяСтрока.СуммаРегл=СтрокаТз.СуммаПокупателя;
				НоваяСтрока.ДоговорКонтрагента=СтрокаТз.Договор;
			КонецЕсли;
			ПересчитатьСуммуПоСтроке(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр(ПоДокументам=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  Объект.КонтрагентДебитор);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаБухУчета", МодульВалютногоУчета.ПолучитьВалюту());
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидДоговораПокупатель", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("ВидДоговораПрочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.СуммаБухОстаток КАК СуммаБух,
	|	ИсточникДанных.СуммаВалОстаток КАК СуммаВал,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДокумента,
	|			Контрагент = &Контрагент
	|		    И Организация = &Организация
	|		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	|		        ИЛИ &ВалютаДокумента = &ВалютаБухУчета) И (ДоговорКонтрагента.ВидДоговора = &ВидДоговораПокупатель ИЛИ ДоговорКонтрагента.ВидДоговора = &ВидДоговораПрочее) ) КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ИсточникДанных.СуммаБухОстаток > 0
	|";
	
	Если ПоДокументам Тогда
		тзДанные=Запрос.Выполнить().Выгрузить();
		тзДанные.Свернуть("ДоговорКонтрагента","СуммаБух,СуммаВал");

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКонца",КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Запрос.УстановитьПараметр("Договор",тзДанные.ВыгрузитьКолонку("ДоговорКонтрагента"));
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИсточникДанных.Регистратор.Дата КАК Дата,
		|	ИсточникДанных.Регистратор,
		|	ИсточникДанных.ДоговорКонтрагента,
		|	ИсточникДанных.СуммаБухПриход КАК СуммаБух,
		|	ИсточникДанных.СуммаВалПриход КАК СуммаВал
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(,	&ДатаКонца,	Регистратор, Организация = &Организация И ДоговорКонтрагента В (&Договор)) КАК ИсточникДанных
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|";		
		тзДокументы=Запрос.Выполнить().Выгрузить();
		тзДокументы.Сортировать("Дата Убыв");

		тзДолгДебитора=Объект.ДолгДебитора.Выгрузить();
		тзДолгДебитора.Очистить();
		тзДолгДебитора.Колонки.Добавить("Дата");
		СуммаПокупателя=0;
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			СуммаПокупателя=СтрокаТз.СуммаБух;
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаТз.ДоговорКонтрагента);
			МассивСтрок=тзДокументы.НайтиСтроки(СтруктураПоиска);
			Для Каждого Строка ИЗ МассивСтрок Цикл
				Если СуммаПокупателя=0 Тогда Прервать; КонецЕсли;
				Если СуммаПокупателя>Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгДебитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = Строка.СуммаВал;
					НоваяСтрока.СуммаРегл                     = Строка.СуммаБух;
					НоваяСтрока.СуммаНДС                      = Строка.СуммаБух*20/120;
					СуммаПокупателя=СуммаПокупателя-Строка.СуммаБух;
				КонецЕсли;	
				Если СуммаПокупателя<=Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгДебитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = СуммаПокупателя;
					НоваяСтрока.СуммаРегл                     = СуммаПокупателя;
					НоваяСтрока.СуммаНДС                      = СуммаПокупателя*20/120;
					СуммаПокупателя=0;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		тзДолгДебитора.Сортировать("Дата Возр");
		Объект.ДолгДебитора.Загрузить(тзДолгДебитора);
	Иначе	
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока                               = Объект.ДолгДебитора.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
			НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                         = Выборка.СуммаВал;
			НоваяСтрока.СуммаРегл                     = Выборка.СуммаБух;
			НоваяСтрока.СуммаНДС                      = Выборка.СуммаБух*20/120;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр(ПоДокументам=Ложь) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  Объект.КонтрагентКредитор);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаБухУчета", МодульВалютногоУчета.ПолучитьВалюту());
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидДоговораПоставщик", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Запрос.УстановитьПараметр("ВидДоговораПрочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента,
	|	-ИсточникДанных.СуммаБухОстаток КАК СуммаБух,
	|	-ИсточникДанных.СуммаВалОстаток КАК СуммаВал,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДокумента,
	|			Контрагент = &Контрагент
	|		    И Организация = &Организация
	|		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	|		        ИЛИ &ВалютаДокумента = &ВалютаБухУчета) И (ДоговорКонтрагента.ВидДоговора = &ВидДоговораПоставщик ИЛИ ДоговорКонтрагента.ВидДоговора = &ВидДоговораПрочее)) КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ИсточникДанных.СуммаБухОстаток < 0
	|";

	Если ПоДокументам Тогда
		тзДанные=Запрос.Выполнить().Выгрузить();
		тзДанные.Свернуть("ДоговорКонтрагента","СуммаБух,СуммаВал");

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДатаКонца",КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Запрос.УстановитьПараметр("Договор",тзДанные.ВыгрузитьКолонку("ДоговорКонтрагента"));
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИсточникДанных.Регистратор.Дата КАК Дата,
		|	ИсточникДанных.Регистратор,
        |	ИсточникДанных.СуммаБухРасход КАК СуммаБух,
        |	ИсточникДанных.СуммаВалРасход КАК СуммаВал,
		|	ИсточникДанных.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(,	&ДатаКонца,	Регистратор, Организация = &Организация	И ДоговорКонтрагента В (&Договор)) КАК ИсточникДанных
        |УПОРЯДОЧИТЬ ПО
        |	Дата УБЫВ
		|";
		тзДокументы=Запрос.Выполнить().Выгрузить();
		тзДокументы.Сортировать("Дата Убыв");

		тзДолгКредитора=Объект.ДолгКредитора.Выгрузить();
		тзДолгКредитора.Очистить();
		тзДолгКредитора.Колонки.Добавить("Дата");
		СуммаПокупателя=0;
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			СуммаПокупателя=СтрокаТз.СуммаБух;
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаТз.ДоговорКонтрагента);
			МассивСтрок=тзДокументы.НайтиСтроки(СтруктураПоиска);
			Для Каждого Строка ИЗ МассивСтрок Цикл
				Если СуммаПокупателя=0 Тогда Прервать; КонецЕсли;
				Если СуммаПокупателя>Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгКредитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = Строка.СуммаВал;
					НоваяСтрока.СуммаРегл                     = Строка.СуммаБух;
					НоваяСтрока.СуммаНДС                      = Строка.СуммаБух*20/120;
					СуммаПокупателя=СуммаПокупателя-Строка.СуммаБух;
				КонецЕсли;	
				Если СуммаПокупателя<=Строка.СуммаБух Тогда
					НоваяСтрока                               = тзДолгКредитора.Добавить();
					НоваяСтрока.Дата                          = Строка.Дата;
					НоваяСтрока.ДоговорКонтрагента            = Строка.ДоговорКонтрагента;
					НоваяСтрока.КурсВзаиморасчетов            = 1;
					НоваяСтрока.КратностьВзаиморасчетов       = 1;
					НоваяСтрока.Сумма                         = СуммаПокупателя;
					НоваяСтрока.СуммаРегл                     = СуммаПокупателя;
					НоваяСтрока.СуммаНДС                      = СуммаПокупателя*20/120;
					СуммаПокупателя=0;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		тзДолгКредитора.Сортировать("Дата Возр");
		Объект.ДолгКредитора.Загрузить(тзДолгКредитора);
	Иначе	
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока                               = Объект.ДолгКредитора.Добавить();
			НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
			НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                         = Выборка.СуммаВал;
			НоваяСтрока.СуммаРегл                     = Выборка.СуммаБух;
			НоваяСтрока.СуммаНДС                      = НоваяСтрока.СуммаРегл*20/120;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуДокумента()
	Объект.СуммаДокумента=Мин(Объект.ДолгКредитора.Итог("СуммаРегл"), Объект.ДолгДебитора.Итог("СуммаРегл"));
КонецПроцедуры	

&НаСервере
Процедура Упаковать(тчСсылка="", Запись=Ложь) Экспорт
	ЭтоВалютнаяСумма=?(Объект.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту(), Ложь, Истина);
	стрАтрибутСуммы=?(ЭтоВалютнаяСумма, "Сумма", "СуммаРегл"); СуммаКОплате=Объект.СуммаДокумента;
	тзСсылка=Объект[тчСсылка].Выгрузить(); Объект[тчСсылка].Очистить();
	Для Каждого СтрокаКоллекции Из тзСсылка Цикл
		СуммаКОплатеДок=Мин(СуммаКОплате, СтрокаКоллекции[стрАтрибутСуммы]);
		Если СуммаКОплатеДок>0 Тогда
			НоваяСтрока=Объект[тчСсылка].Добавить();
			НоваяСтрока[стрАтрибутСуммы]=СуммаКОплатеДок;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции,,стрАтрибутСуммы);
			ПересчитатьСуммуПоСтроке(НоваяСтрока, НЕ ЭтоВалютнаяСумма, Запись);
		КонецЕсли;
		СуммаКОплате=СуммаКОплате-СуммаКОплатеДок;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсПоСтроке(СтрокаДанных)
	Если СтрокаДанных = Неопределено Тогда Возврат; КонецЕсли;
	СтрокаДанных.КурсВзаиморасчетов = ?(СтрокаДанных.Сумма = 0, СтрокаДанных.КурсВзаиморасчетов, СтрокаДанных.СуммаРегл / СтрокаДанных.Сумма * СтрокаДанных.КратностьВзаиморасчетов);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении()
	СтруктураВалюта    = МодульВалютногоУчета.КурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураВалюта.Курс;
	КратностьДокумента = СтруктураВалюта.Кратность;
	
	ЭтоВалютныйДокумент = Не Объект.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту();
	
	// массив строк(для удаления) кредитора
	МассивСтрокКредитора = Новый Массив;
	Для каждого СтрокаДолга Из Объект.ДолгКредитора Цикл
		ВалютаВзаиморасчетов=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаДолга.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
		Если Не ВалютаВзаиморасчетов=Объект.ВалютаДокумента И (ЭтоВалютныйДокумент) Тогда
			МассивСтрокКредитора.Добавить(СтрокаДолга);
		КонецЕсли;
	КонецЦикла;
	
	// массив строк(для удаления) дебитора
	МассивСтрокДебитора = Новый Массив;
	Для каждого СтрокаДолга Из Объект.ДолгДебитора Цикл
		ВалютаВзаиморасчетов=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаДолга.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
		Если Не ВалютаВзаиморасчетов=Объект.ВалютаДокумента И (ЭтоВалютныйДокумент) Тогда
			МассивСтрокДебитора.Добавить(СтрокаДолга);
		КонецЕсли;
	КонецЦикла; 
	
	Если МассивСтрокКредитора.Количество()+МассивСтрокДебитора.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМассивов=Новый Структура;
	СтруктураМассивов.Вставить("МассивСтрокКредитора",МассивСтрокКредитора);
	СтруктураМассивов.Вставить("МассивСтрокДебитора",МассивСтрокДебитора);
	
	ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_УдалитьСтроки", ЭтотОбъект, СтруктураМассивов);
	ПоказатьВопрос(ОписаниеОповещения, "Строки с несоответствующей валютой взаиморасчетов договора будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ПересчетКурса(Параметр1, Параметр2) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли; 
	Для каждого СтрокаТаблицы Из Объект.ДолгКредитора Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда Продолжить; КонецЕсли; 
		ВалютаДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
		СтруктураВалюты=МодульВалютногоУчета.КурсВалюты(ВалютаДоговора, Объект.Дата);
		СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
		СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
		ПересчитатьСуммуПоСтроке(СтрокаТаблицы.ПолучитьИдентификатор(), "ДолгКредитора", Ложь);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ДолгДебитора Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда Продолжить; КонецЕсли; 
		ВалютаДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
		СтруктураВалюты=МодульВалютногоУчета.КурсВалюты(ВалютаДоговора, Объект.Дата);
		СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
		СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
		ПересчитатьСуммуПоСтроке(СтрокаТаблицы.ПолучитьИдентификатор(), "ДолгДебитора", Ложь);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Заполнить(Параметр1, Параметр2) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли; 
	Объект.ДолгДебитора.Очистить();
	Объект.ДолгКредитора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
		ПоказатьПредупреждение(,"Не выбран контрагент-дебитор! Заполнение невозможно!", 30);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
		ПоказатьПредупреждение(,"Не выбран контрагент-кредитор! Заполнение невозможно!", 30);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ПоказатьПредупреждение(,"Не выбрана валюта! Заполнение невозможно!", 30);
		Возврат;
	КонецЕсли;
	
	Если Параметр2="ЗаполнитьОстаткамиПоБухСчетамТОП" Тогда
		ЗаполнитьОстаткамиПоБухСчетамТОП();
		
	ИначеЕсли Параметр2="ЗаполнитьОстаткамиПоБухСчетамТОППоДокументам" Тогда
		ЗаполнитьОстаткамиПоБухСчетамТОП(Истина);
		
	ИначеЕсли Параметр2="ЗаполнитьОстаткамиПоВзаиморасчетам" Тогда	
		
		ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		
	ИначеЕсли Параметр2="ЗаполнитьОстаткамиПоВзаиморасчетамПоДокументам" Тогда	
		
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПоказатьПредупреждение(,"Не выбрана валюта! Заполнение невозможно!", 30);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр(Истина);
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр(Истина);
		
	ИначеЕсли Параметр2="УпаковатьСумму" Тогда	
		
		Упаковать("ДолгКредитора");
		Упаковать("ДолгДебитора");
	КонецЕсли;
	
	РасчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_УдалитьСтроки(Параметр1, Параметр2) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли; 

	//удаляем строки кредитора
	Для каждого УдаляемаяСтрока Из Параметр2.МассивСтрокКредитора Цикл
		Объект.ДолгКредитора.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	//удаляем строки дебитора
	Для каждого УдаляемаяСтрока Из Параметр2.МассивСтрокДебитора Цикл
		Объект.ДолгДебитора.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	СтруктураВалюта=МодульВалютногоУчета.КурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента=СтруктураВалюта.Курс;
	Объект.КратностьДокумента=СтруктураВалюта.Кратность;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка)
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Дата" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ПересчетКурса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "На дату документа возможен другой курс. Установить курс взаиморасчетов в соответствии с курсом валюты?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
		
	ИначеЕсли Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");
		Для Каждого СтрокаТаблицы ИЗ Объект.ДолгДебитора Цикл
			ОрганизацияДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента,"Организация");
			Если ОрганизацияДоговора=Объект.Организация Тогда Продолжить; КонецЕсли;
			СтрокаТаблицы.ДоговорКонтрагента=ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЦикла;	
		
		Для Каждого СтрокаТаблицы ИЗ Объект.ДолгКредитора Цикл
			ОрганизацияДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорКонтрагента,"Организация");
			Если ОрганизацияДоговора=Объект.Организация Тогда Продолжить; КонецЕсли;
			СтрокаТаблицы.ДоговорКонтрагента=ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		КонецЦикла;	
		
	ИначеЕсли Элемент.Имя="ВалютаДокумента" Тогда
		ВалютаДокументаПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
		
	Если стрКоманда="ЗаполнитьОстаткамиПоВзаиморасчетам" ИЛИ стрКоманда="ЗаполнитьОстаткамиПоВзаиморасчетамПоДокументам" ИЛИ стрКоманда="ЗаполнитьОстаткамиПоБухСчетамТОП" ИЛИ стрКоманда="ЗаполнитьОстаткамиПоБухСчетамТОППоДокументам" ИЛИ стрКоманда="УпаковатьСумму" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_Заполнить", ЭтотОбъект, стрКоманда);
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением табличные части будут очищены. Заполнить?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Долг кредитора"

&НаКлиенте
Процедура тпДолгКредитора_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпДолгКредитора_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпДолгКредитора_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ДолгКредитора", "");
	ТекущиеДанные=Элементы.ДолгКредитора.ТекущиеДанные;

	Если стрКолонка="Сумма" Тогда
		ПересчитатьКурсПоСтроке(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="СуммаРегл" Тогда
		РасчитатьСуммуДокумента();
		ПересчитатьСуммуПоСтроке(Элементы.ДолгКредитора.ТекущаяСтрока,"ДолгКредитора");
		ТекущиеДанные.СуммаНДС=ТекущиеДанные.СуммаРегл*20/120;
		
	ИначеЕсли стрКолонка="КурсВзаиморасчетов" Тогда
		ПересчитатьСуммуПоСтроке(Элементы.ДолгКредитора.ТекущаяСтрока,"ДолгКредитора");
		
	ИначеЕсли стрКолонка="ДоговорКонтрагента" Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда Возврат; КонецЕсли;
		
		ВалютаВзаиморасчетов=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
		СтруктураКурса=МодульВалютногоУчета.КурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
		ТекущиеДанные.КурсВзаиморасчетов=СтруктураКурса.Курс;
		ТекущиеДанные.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
		ПересчитатьСуммуПоСтроке(Элементы.ДолгКредитора.ТекущаяСтрока,"ДолгКредитора", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДолгКредитора_Колонка_НачалоВыбора(Элемент, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ДолгКредитора", "");
	ТекущиеДанные=Элементы.ДолгКредитора.ТекущиеДанные;

	Если стрКолонка="ДоговорКонтрагента" Тогда
		спВидыДоговоров=Новый СписокЗначений;
		спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		
		МассивПараметров=Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", спВидыДоговоров));
		
		Если Не Объект.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту() Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		КонецЕсли;

		Элементы.ДолгКредитораДоговорКонтрагента.ПараметрыВыбора=Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Долг дебитора"

&НаКлиенте
Процедура тпДолгДебитора_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпДолгДебитора_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпДолгДебитора_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ДолгДебитора", "");
	ТекущиеДанные=Элементы.ДолгДебитора.ТекущиеДанные;

	Если стрКолонка="Сумма" Тогда
		ПересчитатьКурсПоСтроке(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="СуммаРегл" Тогда
		РасчитатьСуммуДокумента();
		ПересчитатьСуммуПоСтроке(Элементы.ДолгДебитора.ТекущаяСтрока, "ДолгДебитора", Ложь);
		
	ИначеЕсли стрКолонка="КурсВзаиморасчетов" Тогда
		ПересчитатьСуммуПоСтроке(Элементы.ДолгДебитора.ТекущаяСтрока, "ДолгДебитора");
		
	ИначеЕсли стрКолонка="ДоговорКонтрагента" Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда Возврат; КонецЕсли;
		
		ВалютаВзаиморасчетов=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
		СтруктураКурса=МодульВалютногоУчета.КурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
		ТекущиеДанные.КурсВзаиморасчетов=СтруктураКурса.Курс;
		ТекущиеДанные.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
		ПересчитатьСуммуПоСтроке(Элементы.ДолгДебитора.ТекущаяСтрока, "ДолгДебитора", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДолгДебитора_Колонка_НачалоВыбора(Элемент, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ДолгДебитора", "");
	ТекущиеДанные=Элементы.ДолгДебитора.ТекущиеДанные;
	
	Если стрКолонка="ДоговорКонтрагента" Тогда
		спВидыДоговоров=Новый СписокЗначений;
		спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		
		МассивПараметров=Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", спВидыДоговоров));
		
		Если Не Объект.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту() Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		КонецЕсли;

		Элементы.ДолгДебитораДоговорКонтрагента.ПараметрыВыбора=Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВалютаДокумента=МодульВалютногоУчета.ПолучитьВалюту();
	КонецЕсли;
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	Если Объект.Ссылка.Пустая() Тогда ВалютаДокументаПриИзменении(); КонецЕсли;
	
	//УСН
	ВидимостьКолонкиСуммаУСН=Ложь;
	Если УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Или
		УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная_ЕНВД") Тогда
		ВидимостьКолонкиСуммаУСН=Истина;
	КонецЕсли;	
	Элементы.ДолгДебитораСуммаУСН.Видимость=ВидимостьКолонкиСуммаУСН;
	
	ОбновитьНадписи();	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры