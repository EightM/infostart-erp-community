Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Функция ПередЗаполнениеТабличнойЧасти(ИмяТабЧасти, ПодтверждатьОчисткуСтрок)

	ЗаполнятьТабличнуюЧасть = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДокументПередачи) Тогда
		ТекстПредупреждения = "Не выбран документ передачи.
		                       |Заполнение невозможно.";

	ИначеЕсли Не ДокументПередачи.Проведен Тогда
		ПредставлениеДокументПередачи = СокрЛП(ДокументПередачи.Метаданные().Представление());
		ТекстПредупреждения = """" + ПредставлениеДокументПередачи + """ не проведен.
		                      |Заполнение невозможно.";
	Иначе

		ЗаполнятьТабличнуюЧасть = Истина;

	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		ВызватьИсключение ТекстПредупреждения;
	КонецЕсли;
		
	Возврат Истина;
КонецФункции
                                                    
// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
Процедура ЗаполнитьТовары(ПодтверждатьОчисткуСтрок) Экспорт
	Если Не ПередЗаполнениеТабличнойЧасти("Товары", ПодтверждатьОчисткуСтрок) Тогда	
		Возврат;	
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);

	Если ВидОперации=Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.Качество,
		|	Неопределено КАК ДокументРезерва,
		|	Остатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
		|";
	Иначе
		Запрос.Текст="
		|ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.Качество,
		|	Остатки.ДокументРезерва,
		|	Остатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
		|";
	КонецЕсли;

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Количество=Выборка.КоличествоОстаток;
		Если Количество=0 ИЛИ Количество=NULL Тогда Продолжить; КонецЕсли;

		СтрокаТабличнойЧасти=Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура       = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество         = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения   = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент        = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СерияНоменклатуры  = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументРезерва    = Выборка.ДокументРезерва;
		СтрокаТабличнойЧасти.Качество           = Выборка.Качество;
		СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада=НЕ ЗначениеЗаполнено(Выборка.СерияНоменклатуры);
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВозвратнуюТару(ПодтверждатьОчисткуСтрок) Экспорт
	Если Не ПередЗаполнениеТабличнойЧасти("ВозвратнаяТара", ПодтверждатьОчисткуСтрок) Тогда	
		Возврат;	
	КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Неопределено КАК ДокументРезерва,
		|	Остатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование  И Склад=&Склад И СтатусПартии = &СтатусПартии) КАК Остатки
		|";
	Иначе
		Запрос.Текст="
		|ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ДокументРезерва,
		|	Остатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
		|";
	КонецЕсли;	

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Количество=Выборка.КоличествоОстаток;
		Если Количество=0 ИЛИ Количество=NULL Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти=ВозвратнаяТара.Добавить();
		СтрокаТабличнойЧасти.Номенклатура=Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество=Количество;
		СтрокаТабличнойЧасти.ДокументРезерва=Выборка.ДокументРезерва;
	КонецЦикла;

КонецПроцедуры

// Выполняет необходимые действия при изменении реквизита ДокументПеремещения
//
Процедура ПриИзмененииДокументаПередачи() Экспорт
	Если ЗначениеЗаполнено(ДокументПередачи) Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ДокументПередачи.Организация ;
		КонецЕсли;

		Если НЕ ВидОперации=Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ДокументПередачи.Склад;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Контрагент = ДокументПередачи.Контрагент;
			КонецЕсли;			
		Иначе			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ДокументПередачи.СкладОтправитель;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШД, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);

	// ТОВАРЫ ТАРА ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.СписаниеТовара Тогда
		
		// Если партии были оприходованы с правом перепродажи, то нужно списывать партии
		Если НЕ СтруктураШД.СниматьРезерв Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл

				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				Строка.ДокументПартии = ДокументПередачи;
				Строка.ВидТабличнойЧасти = "Товары";

			КонецЦикла;
			
			// Если ПУ по складам
			ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус2");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,"ОсновнойДокумент"); // Документ передачи для списания по реализации
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;

			// ТАРА ПО РЕГИСТРУ СписанныеТовары.

			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл
				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				Строка.ВидТабличнойЧасти = "ВозвратнаяТара";
			КонецЦикла;

			ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,"ОсновнойДокумент");
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
			
			Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
			КонецЕсли; 
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
			
			Если Движения.СписанныеТовары.Модифицированность() Тогда
				Движения.СписанныеТовары.Записать(Истина);
			КонецЕсли;				

			СтруктураШД.Вставить("Отказ", Отказ);
			СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШД, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	Если СтруктураШД.ЯчеистыйСклад Тогда // Учет по ячейкам
		НаборДвижений=Движения.ТоварыНаСкладах;
		
		СтруктТаблицДокумента=Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
		
		Если НЕ Отказ Тогда
		
			// Если в табличной части установлен флаг "Серия указывается при отпуске со склада",
			// то по данному регистру необходимо списывать пустую серию
			ТаблицаПоТоварамКПередаче = ТаблицаПоТоварам.Скопировать();
			Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварамКПередаче Цикл
				Если СтрокаТаблицы.СерияУказываетсяПриОтпускеСоСклада Тогда
					СтрокаТаблицы.СерияНоменклатуры = Неопределено;
				КонецЕсли;
			КонецЦикла;
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПередаче);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", ДокументПередачи);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
		
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументПолучения");
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШД.Склад,           "Склад");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШД.СкладПолучатель, "Склад");
		КонецЕсли;
 		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		
		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады

		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
 
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументПолучения");
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШД.Склад, "Склад");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШД.СкладПолучатель, "Склад");
		КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
	КонецЕсли;

	ДвиженияПоРегиструСписанныеТовары(СтруктураШД, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок,РежимПроведения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру;
		ДокументПередачи = Основание;
		Если Основание.Проведен Тогда
			ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной;
		ДокументПередачи = Основание;
		Если Основание.Проведен Тогда
        	ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение;
		Склад = Основание.СкладОтправитель;
		ДокументПередачи = Основание;
		Если Основание.Проведен Тогда
			ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику;
		ДокументПередачи = Основание;
		Если Основание.Проведен Тогда
			ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;

	СуммаДокумента=ЦенообразованиеСервер.ПолучитьСуммуДокументаСНДС(ЭтотОбъект); ДокументРезерва=NULL;

	Если ВидОперации=Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Контрагент=Неопределено;

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Если ТипЗнч(ДокументПередачи)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ДокументРезерва=?(ДокументПередачи.БезПраваПродажи, ДокументПередачи, Неопределено);
		КонецЕсли;
	Иначе
		ДокументРезерва=Неопределено;
	КонецЕсли;

	//Заполняем табличную часть "Товары"
	Для Каждого СтрокаКоллекции Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.Качество) Тогда
			СтрокаКоллекции.Качество=Справочники.Качество.Новый;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ЕдиницаИзмеренияМест) И СтрокаКоллекции.КоличествоМест=0 Тогда
			СтрокаКоллекции.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
		Если НЕ ДокументРезерва=NULL Тогда
			СтрокаКоллекции.ДокументРезерва=ДокументРезерва;
		КонецЕсли;
	КонецЦикла;

	//Заполняем табличную часть "Возвратная тара"
	Если НЕ ДокументРезерва=NULL Тогда
		Для Каждого СтрокаКоллекции Из ВозвратнаяТара Цикл
			СтрокаКоллекции.ДокументРезерва=ДокументРезерва;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	Заголовок=ДополнительныеСвойства.Заголовок;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШД=ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШД.Вставить("СниматьРезерв", Ложь); // инициализация значения
	СтруктураШД.Вставить("ЯчеистыйСклад", Склад.Ячеистый); // Переделать
	СтруктураШД.Вставить("ВидСклада", Склад.ВидСклада); // Переделать
	
	Если ВидОперации=Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		ЗапросПоШапке=Новый Запрос;
		ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументПередачи);
		ЗапросПоШапке.Текст="
		|ВЫБРАТЬ БезПраваПродажи 
		|ИЗ Документ.ПриходныйОрдерНаТовары
		|ГДЕ Документ.ПриходныйОрдерНаТовары.Ссылка = &ДокументОснование
		|";
		ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
		Если ВыборкаПоШапке.Следующий() Тогда
			СтруктураШД.Вставить("СниматьРезерв", ВыборкаПоШапке.БезПраваПродажи);
		КонецЕсли;
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке=УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи", "СкладОтправитель", "СкладОтправитель");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи", "СкладПолучатель",  "СкладПолучатель");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШД = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШД, ДополнительныеСвойства.ВалютаБухУчета);
	// Проверим правильность заполнения шапки документа
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Если СтруктураШД.Склад <> СтруктураШД.СкладОтправитель Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Склад документа должен соответствовать складу-отправителю документа перемещения!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"                       , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                        , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("СерияНоменклатуры"                 , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"        , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ДокументРезерва"                   , "ДокументРезерва");
	СтруктураПолей.Вставить("Качество"                          , "Качество");
	СтруктураПолей.Вставить("СерияУказываетсяПриОтпускеСоСклада", "СерияУказываетсяПриОтпускеСоСклада");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                          , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Склад"                             , "Ссылка.Склад");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	ТаблицаПоТаре = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаПоТоварам.Колонки.Добавить("ВидТабличнойЧасти");
	ТаблицаПоТоварам.ЗаполнитьЗначения("Товары", "ВидТабличнойЧасти");

	ТаблицаПоТаре.Колонки.Добавить("ВидТабличнойЧасти");
	ТаблицаПоТаре.ЗаполнитьЗначения("ВозвратанаяТара", "ВидТабличнойЧасти");

	ДвиженияПоРегистрам(РежимПроведения, СтруктураШД, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Покупка");