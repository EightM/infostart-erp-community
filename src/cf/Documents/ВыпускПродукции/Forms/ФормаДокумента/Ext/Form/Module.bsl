&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()
	//ВременнаяСтрока="Тип цен: "+?(ЗначениеЗаполнено(Объект.ТипЦен), Строка(Объект.ТипЦен)+".", "Не заполнено!");
	//Элементы.ЦенаВалютаДокумента.Заголовок=ВременнаяСтрока;

	//Элементы.НадписьВсего.Заголовок="Всего ("+СокрЛП(Объект.ВалютаДокумента)+")";
	//Элементы.НадписьВсегоНДС.Заголовок="НДС "+?(Объект.СуммаВключаетНДС, "(в т. ч.)", "(сверху)");
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	тпТабличноеПоле_ОбновитьПредставление("Товары");
	тпТабличноеПоле_ОбновитьПредставление("Комплектующие");
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			УстановитьВидимостьЭлементовФормы();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	Если ОбщегоНазначенияСервер.ПроверкаРасширения("33lab_ЕГАИС") Тогда
		Модуль_ЕГАИС_Переопределяемый=ОбщегоНазначенияКлиент.ОбщийМодуль("ЕГАИС_СерверПереопределяемый");
		МассивНоменклатуры=Новый Массив;
		Для Каждого СтрокаКоллекции Из Объект.Товары Цикл
			МассивНоменклатуры.Добавить(СтрокаКоллекции.Номенклатура);
		КонецЦикла;
		Если Модуль_ЕГАИС_Переопределяемый.ПроверитьВозможностьСозданияДокументаЕГАИС(МассивНоменклатуры) Тогда
			ДокументЕГАИС=Модуль_ЕГАИС_Переопределяемый.ПолучитьДокументЕГАИС(Объект.Ссылка);
			ДокументЕГАИСПредставление = Новый ФорматированнаяСтрока(?(ЗначениеЗаполнено(ДокументЕГАИС), Строка(ДокументЕГАИС), "Создать документ ЕГАИС"), Новый Шрифт(,,,,Истина), WebЦвета.SteelBlue,, ПолучитьНавигационнуюСсылку(ДокументЕГАИС));
			Элементы.ДокументЕГАИСПредставление.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки_ДокументЕГАИС(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДокументЕГАИС=ОбщегоНазначенияСервер.СсылкаИзНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
	Если ЗначениеЗаполнено(ДокументЕГАИС) Тогда
		ОткрытьФорму(УправлениеМетаданными.ОписаниеСсылки(ДокументЕГАИС)+".ФормаОбъекта", Новый Структура("Ключ", ДокументЕГАИС));
	Иначе
		ОткрытьФорму(УправлениеМетаданными.ОписаниеСсылки(ДокументЕГАИС)+".ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ТипЦены()
	Возврат ?(Объект.ТипЦен.Пустая(), Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить(), Объект.ТипЦен);	
КонецФункции	 

&НаСервере
Процедура _ЗаполнитьИзделиеПоСпецификации(Идентификатор, СпецификацияНоменклатуры, КоличествоИзделия=1)
	СтрокаТабличнойЧасти=Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	Спецификация=Документы.Спецификация.ПолучитьВариантСпецификации(СпецификацияНоменклатуры, СтрокаТабличнойЧасти.Номенклатура, Истина);
	Если Спецификация=Неопределено Тогда Возврат; КонецЕсли;

	ДокСпецификация=Документы.Спецификация.ПолучитьСпецификациюНаДату(Спецификация, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Объект.Дата);
	Если ДокСпецификация=Неопределено Тогда Возврат; КонецЕсли;

	Если СтрокаТабличнойЧасти.Количество=0 Тогда
		СтрокаТабличнойЧасти.Количество=1;
	КонецЕсли;
	
	КоличествоИзделия=СтрокаТабличнойЧасти.Количество*КоличествоИзделия;
	текСклад=?(Не СтрокаТабличнойЧасти.Склад.Пустая(), СтрокаТабличнойЧасти.Склад, Объект.Склад);

	тзКомплектующие=ДокСпецификация.Комплектующие.Выгрузить();
	Для каждого Выборка Из тзКомплектующие Цикл
		Если НЕ Выборка.НеРазворачивать И НЕ Выборка.СпецификацияКомплектующей.Пустая() Тогда
			_ЗаполнитьИзделиеПоСпецификации(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), Выборка.СпецификацияКомплектующей, Выборка.Количество);
			Продолжить; 
		КонецЕсли; //***

		СсылкаНаОбъект=Выборка.Номенклатура;
        //*******************************
		Если Не Выборка.ЕдиницаИзделия.Пустая() И НЕ Выборка.ЕдиницаИзделия=СтрокаТабличнойЧасти.ЕдиницаИзмерения Тогда
			КоличествоИзделия=КоличествоИзделия*Выборка.ЕдиницаИзделия.Коэффициент;
		КонецЕсли;
		//*******************************
		НоваяСтрока=Объект.Комплектующие.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ID_Товары=СтрокаТабличнойЧасти.ID;
		НоваяСтрока.ID=Новый УникальныйИдентификатор;
		НоваяСтрока.Количество=Окр(Выборка.Количество*КоличествоИзделия/?(Выборка.НормаРасхода=0, 1, Выборка.НормаРасхода), Выборка.ОкруглятьДоКоличествоЗнаков);
		Если Выборка.Потери > 0 Тогда
			НоваяСтрока.Количество=НоваяСтрока.Количество+(НоваяСтрока.Количество*Выборка.Потери/100);
		КонецЕсли; //***
		НоваяСтрока.Коэффициент=НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;

		Если НоваяСтрока.СтатьяЗатрат.Пустая() Тогда
			НоваяСтрока.СтатьяЗатрат=СсылкаНаОбъект.СтатьяЗатрат;
		КонецЕсли;
		ЗаполнитьТиповыеОперации("Комплектующие");
	КонецЦикла;

	// Статьи затрат
	тзСтатьиЗатрат=ДокСпецификация.Операции.Выгрузить(,);
	Для Каждого Выборка Из тзСтатьиЗатрат Цикл
		НоваяСтрока=Объект.СтатьиЗатрат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество=Выборка.Количество*КоличествоИзделия;
		НоваяСтрока.Сумма=НоваяСтрока.Количество*Выборка.Цена;
		НоваяСтрока.ID_Товары=СтрокаТабличнойЧасти.ID;
		НоваяСтрока.ID=Новый УникальныйИдентификатор;
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
		ЗаполнитьТиповыеОперации("СтатьиЗатрат");
	КонецЦикла;
	
	//Побочные продукты (возвратные отходы)
	тзПобочныеПродукты=ДокСпецификация.ПобочныеПродукты.Выгрузить();
	Для каждого Выборка Из тзПобочныеПродукты Цикл
		НоваяСтрока=Объект.ПобочныеПродукты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Номенклатура=Выборка.ПобочныйПродукт;
		НоваяСтрока.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаПобочногоПродукта;
		//НоваяСтрока.Количество=Выборка.Количество*КоличествоИзделия;
		НоваяСтрока.Количество=Окр(Выборка.Количество*КоличествоИзделия/?(Выборка.НормаРасхода=0, 1, Выборка.НормаРасхода), Выборка.ОкруглятьДоКоличествоЗнаков);
		Если НоваяСтрока.СтатьяЗатрат.Пустая() Тогда
			НоваяСтрока.СтатьяЗатрат=Выборка.ПобочныйПродукт.СтатьяЗатрат;
		КонецЕсли;
		НоваяСтрока.Коэффициент=НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.ID_Товары=СтрокаТабличнойЧасти.ID;
		НоваяСтрока.ID=Новый УникальныйИдентификатор;
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;;
		ЗаполнитьТиповыеОперации("ПобочныеПродукты");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзделие()
	СтруктураПоиска=Новый Структура;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		УдалитьПодчиненныеСтроки(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		_ЗаполнитьИзделиеПоСпецификации(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), СтрокаТабличнойЧасти.СпецификацияНоменклатуры);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтруктураТабличнойЧасти(ИмяТабличнойЧасти)
	Структура=Новый Структура;
	Для каждого мдРеквизит Из Метаданные.Документы.ВыпускПродукции.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл
		Структура.Вставить(мдРеквизит.Имя);
	КонецЦикла; 
	Возврат Структура;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(Страница="", Редактирование = Ложь, Копирование=Ложь);
	
	//стрТабличнаяЧасть=стрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	стрТабличнаяЧасть=Страница;
	
	открФормы="СтрокиДокумента";
	Если стрТабличнаяЧасть="СтатьиЗатрат" Тогда
		открФормы="СтатьиЗатрат";
	КонецЕсли;
	
	
	СтрокаТабличнойЧасти=?(Редактирование, Элементы[стрТабличнаяЧасть].ТекущиеДанные, Неопределено);
	СтрокаТабличнойЧастиИсточник=Неопределено;
	Если Копирование Тогда
		СтрокаТабличнойЧасти=Элементы[стрТабличнаяЧасть].ТекущаяСтрока;
	КонецЕсли;

	ОписаниеОповещения=Новый ОписаниеОповещения("ОбработкаОповещения_Редактирование", ЭтотОбъект);
	
	ПараметрыФормы=Новый Структура;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		ПараметрыФормы.Вставить("ДанныеСтроки", Неопределено);
	Иначе
		ПараметрыФормы.Вставить("ДанныеСтроки", СформироватьСтруктураТабличнойЧасти(стрТабличнаяЧасть));
		ЗаполнитьЗначенияСвойств(ПараметрыФормы.ДанныеСтроки, СтрокаТабличнойЧасти);
	КонецЕсли;
	ПараметрыФормы.Вставить("ИмяТЧ", стрТабличнаяЧасть);
	
	ОткрытьФорму("Документ.ВыпускПродукции.Форма.Форма"+открФормы, ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	//*** тпТовары_Заполнить(Параметр2.Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЦенаВалюта(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметр1);

	//ПересчитатьЦеныПоВалюте
	Если Параметр1.ПерезаполнитьЦеныПоТипу Тогда
		НаДату=ТекущаяДата();
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.ТипЦен, НаДату, СтрокаКоллекции.ЕдиницаИзмерения);
		КонецЦикла;
	КонецЕсли;

	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения_Редактирование(Параметр1, Параметр2) Экспорт
	Если ТипЗнч(Параметр1)=Тип("Структура") Тогда
		Если Параметр1.Редактирование=Ложь Тогда
			СтрокаТабличнойЧасти=Объект[Параметр1.ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Параметр1);
			СтрокаТабличнойЧасти.ID=Новый УникальныйИдентификатор();
		Иначе	
			СтрокаТабличнойЧасти=Элементы[Параметр1.ИмяТЧ].ТекущиеДанные;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Параметр1);
		КонецЕсли; 
		Если Не Параметр1.ИмяТЧ="Товары" Тогда
			СтрокаТабличнойЧасти.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеСтроки(Идентификатор)
	СтрокаТабличнойЧасти=Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("ID_Товары", СтрокаТабличнойЧасти.ID);

	МассивСтрок=Объект.Комплектующие.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.Комплектующие.Удалить(СтрокаКоллекции);
	КонецЦикла;

	МассивСтрок=Объект.СтатьиЗатрат.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.СтатьиЗатрат.Удалить(СтрокаКоллекции);
	КонецЦикла;

	МассивСтрок=Объект.ПобочныеПродукты.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.ПобочныеПродукты.Удалить(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");		

	ИначеЕсли Элемент.Имя="Подвид" Тогда
		УстановитьВидимостьЭлементовФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если Лев(стрКоманда, 11)="Сортировать" Тогда
		ИмяТабличнойЧасти=стрЗаменить(стрКоманда, "Сортировать_", "");
		СортировкаТабличнойЧастиКлиент.Открыть(ИмяТабличнойЧасти, ЭтаФорма, Объект);

	ИначеЕсли Лев(стрКоманда, 16)="НайтиПоШтрихКоду"Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли Лев(стрКоманда, 6)="Подбор"Тогда
		ИмяТабличнойЧасти=стрЗаменить(стрКоманда, "Подбор_", "");

		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли Лев(стрКоманда, 12)="ЗаполнитьТОП" Тогда
		ИмяТабличнойЧасти=стрЗаменить(стрКоманда, "ЗаполнитьТОП_", "");
		ЗаполнитьТиповыеОперации(ИмяТабличнойЧасти);

	//ИначеЕсли стрКоманда="ОбновитьПредставлениеТабличнойЧасти" Тогда
	//	стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	//	тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=ИмяТабличнойЧасти;
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если НЕ стрТабличнаяЧасть="СтатьиЗатрат" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 
	Если НЕ стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ID_Товары", Элементы.Товары.ТекущиеДанные.ID);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
		Если ПустаяСтрока(ТекущиеДанные.ID) Тогда
			ТекущиеДанные.ID=Новый УникальныйИдентификатор;
		КонецЕсли;
		Если НЕ стрТабличнаяЧасть="Товары" Тогда
			ТекущиеДанные.ID_Товары=СтруктураПоиска.ID_Товары;
		КонецЕсли;
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	ИначеЕсли стрТабличнаяЧасть="Комплектующие" Тогда
		тпКомплектующие_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.КомплектующиеНоменклатура, Элементы.КомплектующиеКоличество), ТекущиеДанные);
	ИначеЕсли стрТабличнаяЧасть="ПобочныеПродукты" Тогда
		тпПобочныеПродукты_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ПобочныеПродуктыНоменклатура, Элементы.ПобочныеПродуктыКоличество), ТекущиеДанные);
	КонецЕсли;
	
	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаСервере
Процедура тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		тпТовары_Заполнить(стрКоманда);		
	ИначеЕсли стрКоманда="ЗаполнитьПоСпецификацииВсеИзделия" Тогда
		ЗаполнитьИзделие();

	ИначеЕсли стрКоманда="ЗаполнитьПоСпецификацииТекущееИзделие" Тогда
		СтрокаТабличнойЧасти=Элементы.Товары.ТекущиеДанные;
		Если СтрокаТабличнойЧасти=Неопределено Тогда Возврат; КонецЕсли; 

		УдалитьПодчиненныеСтроки(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		_ЗаполнитьИзделиеПоСпецификации(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), СтрокаТабличнойЧасти.СпецификацияНоменклатуры);

	ИначеЕсли стрКоманда="РедактироватьВДиалоге" Тогда
		Элементы.кпТовары_РедактироватьВДиалоге.Пометка=Не Элементы.кпТовары_РедактироватьВДиалоге.Пометка;
		РедактироватьВДиалоге1=Элементы.кпТовары_РедактироватьВДиалоге.Пометка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если РедактироватьВДиалоге1 Тогда
		СтандартнаяОбработка=Ложь;
		ОткрытьФормуРедактированияСтроки("Товары",Истина,);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);

	РезультатПоиска=Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект[ИмяТабличнойЧасти].Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	
	Если НЕ ИмяТабличнойЧасти="СтатьиЗатрат" Тогда
		Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
		ТекущиеДанные.СтоимостьУУ=ТекущиеДанные.Количество*Цена;
		ТекущиеДанные.СтоимостьНУ=ТекущиеДанные.Количество*Цена;
	КонецЕсли; 

	Элементы[ИмяТабличнойЧасти].Обновить();
	Элементы[ИмяТабличнойЧасти].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли; 

	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("ID_Товары", ТекущиеДанные.ID);

	Элементы.Комплектующие	 .ОтборСтрок=Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.СтатьиЗатрат	 .ОтборСтрок=Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ПобочныеПродукты.ОтборСтрок=Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если РедактироватьВДиалоге1 Тогда
		Отказ=Истина; 
		ОткрытьФормуРедактированияСтроки("Товары",,Копирование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьВДиалоге1 Тогда
		Отказ=Истина; 
		ОткрытьФормуРедактированияСтроки("Товары",Истина,);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередУдалением(Элемент, Отказ)
	УдалитьПодчиненныеСтроки(Элемент.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,НоменклатурнаяГруппа,ОсновнаяСпецификация");
		
		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;

		Если ТекущиеДанные.НоменклатурнаяГруппа.Пустая() Тогда
			ТекущиеДанные.НоменклатурнаяГруппа=СтруктураНоменклатуры.НоменклатурнаяГруппа;
		КонецЕсли;

		Если ТекущиеДанные.СпецификацияНоменклатуры.Пустая() Тогда
			ТекущиеДанные.СпецификацияНоменклатуры=СтруктураНоменклатуры.ОсновнаяСпецификация;
		КонецЕсли;

		тпТовары_РассчитатьСтоимость(ТекущиеДанные);

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			тпТовары_РассчитатьСтоимость(ТекущиеДанные);
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			тпТовары_РассчитатьСтоимость(ТекущиеДанные);
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");

	ИначеЕсли стрКолонка="Количество" Тогда
		тпТовары_РассчитатьСтоимость(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСтоимость(ТекущиеДанные)
	Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, ТипЦены(), ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
	ТекущиеДанные.СтоимостьУУ=ТекущиеДанные.Количество*Цена;
	ТекущиеДанные.СтоимостьНУ=ТекущиеДанные.Количество*Цена;
КонецПроцедуры

&НаСервере
Процедура тпТовары_Заполнить(стрКоманда)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	
	Если стрКоманда="" Тогда
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Комплектующие"

&НаКлиенте
Процедура кпКомплектующие_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Комплектующие"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="РедактироватьВДиалоге" Тогда
		Элементы.кпКомплектующие_РедактироватьВДиалоге.Пометка=Не Элементы.кпКомплектующие_РедактироватьВДиалоге.Пометка;
		РедактироватьВДиалоге2=Элементы.кпКомплектующие_РедактироватьВДиалоге.Пометка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если РедактироватьВДиалоге2 Тогда
		СтандартнаяОбработка=Ложь;
		ОткрытьФормуРедактированияСтроки("Комплектующие",Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Элементы.Товары.ТекущиеДанные=Неопределено; 
	Если НЕ Отказ И РедактироватьВДиалоге2 Тогда
		Отказ=Истина; ОткрытьФормуРедактированияСтроки("Комплектующие",, Копирование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_ПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьВДиалоге2 Тогда
		Отказ=Истина; ОткрытьФормуРедактированияСтроки("Комплектующие",Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_Колонка_ПриИзменении(Элемент, ТекущиеДанные=Неопределено)
	стрКолонка=стрЗаменить(Элемент.Имя, "Комплектующие", "");
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Комплектующие.ТекущиеДанные;
	КонецЕсли; 
	
	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Статьи затрат"

&НаКлиенте
Процедура кпСтатьиЗатрат_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="СтатьиЗатрат"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="РедактироватьВДиалоге" Тогда
		Элементы.кпСтатьиЗатрат_РедактироватьВДиалоге.Пометка=Не Элементы.кпСтатьиЗатрат_РедактироватьВДиалоге.Пометка;
		РедактироватьВДиалоге3=Элементы.кпСтатьиЗатрат_РедактироватьВДиалоге.Пометка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если РедактироватьВДиалоге3 Тогда
		СтандартнаяОбработка=Ложь;
		ОткрытьФормуРедактированияСтроки("СтатьиЗатрат",Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Элементы.Товары.ТекущиеДанные=Неопределено; 
	Если НЕ Отказ И РедактироватьВДиалоге3 Тогда
		Отказ=Истина; ОткрытьФормуРедактированияСтроки("СтатьиЗатрат",, Копирование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_ПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьВДиалоге3 Тогда
		Отказ=Истина; ОткрытьФормуРедактированияСтроки("СтатьиЗатрат",Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпСтатьиЗатрат_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "СтатьиЗатрат", "");
	ТекущиеДанные=Элементы.СтатьиЗатрат.ТекущиеДанные;

	Если стрКолонка="СтатьяЗатрат" Тогда
		//ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Побочные продукты"

&НаКлиенте
Процедура кпПобочныеПродукты_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ПобочныеПродукты"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="РедактироватьВДиалоге" Тогда
		Элементы.кпПобочныеПродукты_РедактироватьВДиалоге.Пометка=Не Элементы.кпПобочныеПродукты_РедактироватьВДиалоге.Пометка;
		РедактироватьВДиалоге4=Элементы.кпПобочныеПродукты_РедактироватьВДиалоге.Пометка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если РедактироватьВДиалоге2 Тогда
		СтандартнаяОбработка=Ложь;
		ОткрытьФормуРедактированияСтроки("ПобочныеПродукты",Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Элементы.Товары.ТекущиеДанные=Неопределено; 
	Если НЕ Отказ И РедактироватьВДиалоге4 Тогда
		Отказ=Истина; ОткрытьФормуРедактированияСтроки("ПобочныеПродукты",, Копирование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_ПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьВДиалоге4 Тогда
		Отказ=Истина; ОткрытьФормуРедактированияСтроки("ПобочныеПродукты", Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПобочныеПродукты_Колонка_ПриИзменении(Элемент, ТекущиеДанные=Неопределено)
	стрКолонка=стрЗаменить(Элемент.Имя, "ПобочныеПродукты", "");
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.ПобочныеПродукты.ТекущиеДанные;
	КонецЕсли;	

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Сделки"

&НаКлиенте
Процедура тпСделки_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура кпСделки_ВыполнитьДействие(Команда)
	тпСделки_Подбор("Заполнить", ЭтаФорма);
КонецПроцедуры
 
&НаКлиенте
Процедура тпСделки_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь; тпСделки_Подбор("Изменить", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_Подбор(стрКоманда, Владелец)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("МножественныйВыбор", стрКоманда="Заполнить");

	УправлениеЗаказамиКлиент.ВыполнитьДействие(СтруктураПараметров, Владелец, стрКоманда);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");

	////РазрешитьРедактированиеЦен=НастройкиПользователяСервер.ЗначениеПраваПользователя("РедактированиеЦенВДокументах");
	////Элементы.ТоварыСумма.Доступность=РазрешитьРедактированиеЦен;
	////Элементы.ТоварыЦена.Доступность=РазрешитьРедактированиеЦен;
	////Элементы.ТоварыСуммаНДС.Доступность=РазрешитьРедактированиеЦен;

	РедактироватьВДиалоге1=Истина;
	РедактироватьВДиалоге2=Истина;
	РедактироватьВДиалоге3=Истина;
	РедактироватьВДиалоге4=Истина;
	
	Элементы.кпТовары_РедактироватьВДиалоге.Пометка=РедактироватьВДиалоге1;
	Элементы.кпКомплектующие_РедактироватьВДиалоге.Пометка=РедактироватьВДиалоге2;
	Элементы.кпСтатьиЗатрат_РедактироватьВДиалоге.Пометка=РедактироватьВДиалоге3;
	Элементы.кпПобочныеПродукты_РедактироватьВДиалоге.Пометка=РедактироватьВДиалоге4;
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.АвтоЗаполнениеРеквизитовДокумента();
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//тпТабличноеПоле_ОбновитьПредставление("Товары");
	//тпТабличноеПоле_ОбновитьПредставление("Комплектующие");
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	// Вставить содержимое обработчика.
КонецПроцедуры
