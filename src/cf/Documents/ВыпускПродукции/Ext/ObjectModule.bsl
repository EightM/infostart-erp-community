Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	КачествоНовый=Справочники.Качество.Новый;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Качество.Пустая() Тогда
			СтрокаТабличнойЧасти.Качество=КачествоНовый;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Склад.Пустая() Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Комплектующие Цикл
		Если СтрокаТабличнойЧасти.Качество.Пустая() Тогда
			СтрокаТабличнойЧасти.Качество=КачествоНовый;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Склад.Пустая() Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из ПобочныеПродукты Цикл
		Если СтрокаТабличнойЧасти.Качество.Пустая() Тогда
			СтрокаТабличнойЧасти.Качество=КачествоНовый;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Склад.Пустая() Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура ЗаполнитьИзделиеПоСпецификации(СтрокаТабличнойЧасти, СпецификацияНоменклатуры)
	Спецификация=Документы.Спецификация.ПолучитьВариантСпецификации(СпецификацияНоменклатуры, СтрокаТабличнойЧасти.Номенклатура, Истина);
	Если Спецификация=Неопределено Тогда Возврат; КонецЕсли;

	ДокСпецификация=Документы.Спецификация.ПолучитьСпецификациюНаДату(Спецификация, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата);
	Если ДокСпецификация=Неопределено Тогда Возврат; КонецЕсли;

	Если СтрокаТабличнойЧасти.Количество=0 Тогда
		СтрокаТабличнойЧасти.Количество=1;
	КонецЕсли;
	
	КоличествоИзделия=СтрокаТабличнойЧасти.Количество;
	текСклад=?(Не СтрокаТабличнойЧасти.Склад.Пустая(), СтрокаТабличнойЧасти.Склад, Склад);

	тзКомплектующие=ДокСпецификация.Комплектующие.Выгрузить();
	Для каждого Выборка Из тзКомплектующие Цикл
		Если НЕ Выборка.НеРазворачивать И НЕ Выборка.СпецификацияКомплектующей.Пустая() Тогда
			ЗаполнитьИзделиеПоСпецификации(СтрокаТабличнойЧасти, Выборка.СпецификацияКомплектующей);
			Продолжить; 
		КонецЕсли; //***

		СсылкаНаОбъект=Выборка.Номенклатура;
        //*******************************
		Если Не Выборка.ЕдиницаИзделия.Пустая() И НЕ Выборка.ЕдиницаИзделия=СтрокаТабличнойЧасти.ЕдиницаИзмерения Тогда
			КоличествоИзделия=СтрокаТабличнойЧасти.Количество*Выборка.ЕдиницаИзделия.Коэффициент;
		КонецЕсли;
		//*******************************
		НоваяСтрока=Комплектующие.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ID_Товары=СтрокаТабличнойЧасти.ID;
		НоваяСтрока.ID=Новый УникальныйИдентификатор;
		НоваяСтрока.Количество=Окр(Выборка.Количество*КоличествоИзделия/?(Выборка.НормаРасхода=0, 1, Выборка.НормаРасхода), Выборка.ОкруглятьДоКоличествоЗнаков);
		Если Выборка.Потери > 0 Тогда
			НоваяСтрока.Количество=НоваяСтрока.Количество+(НоваяСтрока.Количество*Выборка.Потери/100);
		КонецЕсли; //***
		НоваяСтрока.Коэффициент=НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;

		Если НоваяСтрока.СтатьяЗатрат.Пустая() Тогда
			НоваяСтрока.СтатьяЗатрат=СсылкаНаОбъект.СтатьяЗатрат;
		КонецЕсли;
		ОбработкаТабличныхЧастей.УстановитьТиповуюОперацию(НоваяСтрока, ЭтотОбъект, ПолучитьФорму(), "Комплектующие");
	КонецЦикла;

	// Статьи затрат
	тзСтатьиЗатрат=ДокСпецификация.Операции.Выгрузить(,);
	Для Каждого Выборка Из тзСтатьиЗатрат Цикл
		НоваяСтрока=СтатьиЗатрат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество=Выборка.Количество*КоличествоИзделия;
		НоваяСтрока.Сумма=НоваяСтрока.Количество*Выборка.Цена;
		НоваяСтрока.ID_Товары=СтрокаТабличнойЧасти.ID;
		НоваяСтрока.ID=Новый УникальныйИдентификатор;
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
		ОбработкаТабличныхЧастей.УстановитьТиповуюОперацию(НоваяСтрока, ЭтотОбъект, ПолучитьФорму(), "СтатьиЗатрат");
	КонецЦикла;
	
	//Побочные продукты (возвратные отходы)
	тзПобочныеПродукты=ДокСпецификация.ПобочныеПродукты.Выгрузить();
	Для каждого Выборка Из тзПобочныеПродукты Цикл
		НоваяСтрока=ПобочныеПродукты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Номенклатура=Выборка.ПобочныйПродукт;
		НоваяСтрока.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаПобочногоПродукта;
		//НоваяСтрока.Количество=Выборка.Количество*КоличествоИзделия;
		НоваяСтрока.Количество=Окр(Выборка.Количество*КоличествоИзделия/?(Выборка.НормаРасхода=0, 1, Выборка.НормаРасхода), Выборка.ОкруглятьДоКоличествоЗнаков);
		Если НоваяСтрока.СтатьяЗатрат.Пустая() Тогда
			НоваяСтрока.СтатьяЗатрат=СсылкаНаОбъект.СтатьяЗатрат;
		КонецЕсли;
		НоваяСтрока.Коэффициент=НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.ID_Товары=СтрокаТабличнойЧасти.ID;
		НоваяСтрока.ID=Новый УникальныйИдентификатор;
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;;
		ОбработкаТабличныхЧастей.УстановитьТиповуюОперацию(НоваяСтрока, ЭтотОбъект, ПолучитьФорму(), "ПобочныеПродукты");
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДвиженияПоСпецификации(тзДвижения, ТипЦен_Плановый, СтрокаТабличнойЧасти, СпецификацияНоменклатуры, Знач КоличествоИзделия=1) 
	Спецификация=Документы.Спецификация.ПолучитьВариантСпецификации(СпецификацияНоменклатуры, СтрокаТабличнойЧасти.Номенклатура, Истина);
	Если Спецификация=Неопределено Тогда Возврат; КонецЕсли;

	ДокСпецификация=Документы.Спецификация.ПолучитьСпецификациюНаДату(Спецификация, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата);
	Если ДокСпецификация=Неопределено Тогда Возврат; КонецЕсли;

	КоличествоИзделия=СтрокаТабличнойЧасти.Количество*КоличествоИзделия;

	тзКомплектующие=ДокСпецификация.Комплектующие.Выгрузить();
	Для каждого Выборка Из тзКомплектующие Цикл
		Если НЕ Выборка.НеРазворачивать И НЕ Выборка.СпецификацияКомплектующей.Пустая() Тогда
			ЗаполнитьДвиженияПоСпецификации(тзДвижения, ТипЦен_Плановый, СтрокаТабличнойЧасти, Выборка.СпецификацияКомплектующей, Выборка.Количество);
			Продолжить; 
		КонецЕсли;
		Если Не Выборка.ЕдиницаИзделия.Пустая() И НЕ Выборка.ЕдиницаИзделия=СтрокаТабличнойЧасти.ЕдиницаИзмерения Тогда
			КоличествоИзделия=КоличествоИзделия*Выборка.ЕдиницаИзделия.Коэффициент;
		КонецЕсли;
		НоваяСтрока=тзДвижения.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Номенклатура=СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;

		НоваяСтрока.Комплектующая=Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаКомплектующей=Выборка.ХарактеристикаНоменклатуры;
		
		НоваяСтрока.Количество=Окр(Выборка.Количество*КоличествоИзделия/?(Выборка.НормаРасхода=0, 1, Выборка.НормаРасхода), Выборка.ОкруглятьДоКоличествоЗнаков);
		Если Выборка.Потери > 0 Тогда
			НоваяСтрока.Количество=НоваяСтрока.Количество+(НоваяСтрока.Количество*Выборка.Потери/100);
		КонецЕсли;
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;

		Если ТипЦен_Плановый.Пустая() Тогда
			текЦена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры, ТипЦен_Плановый, Дата);
			НоваяСтрока.Стоимость=текЦена*НоваяСтрока.Количество;
		КонецЕсли;
		
		Если НоваяСтрока.СтатьяЗатрат.Пустая() Тогда
			НоваяСтрока.СтатьяЗатрат=Выборка.Номенклатура.СтатьяЗатрат;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_СписанныеТоварам(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетЗаказов(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_ЗатратыНаПроизводство(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_ВыпускПродукцииУслуг(СтруктураШД, СтруктураТД, Отказ);	
	ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ)
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетПотребностей") Тогда Возврат; КонецЕсли;

	тзТМЦ=Новый ТаблицаЗначений;
	тзТМЦ.Колонки.Добавить("Склад");
	тзТМЦ.Колонки.Добавить("Номенклатура");
	тзТМЦ.Колонки.Добавить("ХарактеристикаНоменклатуры");
	тзТМЦ.Колонки.Добавить("Количество");
	тзТМЦ.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзТМЦ.Колонки.Добавить("ВидТабличнойЧасти");

	МассивСерийНоменклатуры=Новый Массив;	
	МассивХарактеристикНоменклатуры=Новый Массив;	
	МассивСкладов=Новый Массив;
    МассивТоваров=Новый Массив;

	Для каждого СтрокаКоллекции1 Из СтруктураТД Цикл
		Если НЕ СтрокаКоллекции1.Ключ="Изделия" И НЕ СтрокаКоллекции1.Ключ="ПобочныеПродукты" Тогда Продолжить; КонецЕсли;

		Для каждого СтрокаКоллекции2 Из СтрокаКоллекции1.Значение Цикл
			ЗаполнитьЗначенияСвойств(тзТМЦ.Добавить(), СтрокаКоллекции2);
			Если ЗначениеЗаполнено(СтрокаКоллекции2.ХарактеристикаНоменклатуры) Тогда
				МассивХарактеристикНоменклатуры.Добавить(СтрокаКоллекции2.ХарактеристикаНоменклатуры);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаКоллекции2.Склад) Тогда
				МассивСкладов.Добавить(СтрокаКоллекции2.Склад);
			КонецЕсли;
			МассивТоваров.Добавить(СтрокаКоллекции2.Номенклатура);
		КонецЦикла;
	КонецЦикла;
	
	стрУсловие="Организация = Организация И Склад В (&Склад) И Номенклатура В (&Номенклатура)";
	Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
		МассивХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	КонецЕсли;
	Если НЕ Сделки.Количество()=0 Тогда
		стрУсловие=стрУсловие+" И ДокументРезерва В (&Сделка)";
	КонецЕсли;
	ОрганизацияСсылка=Организация;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", МоментВремени());
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Склад", МассивСкладов);
	Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("Сделка", Сделки.ВыгрузитьКолонку("Сделка"));	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва,
	|	СУММА(ИсточникДанных1.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.УчетПотребностей.Остатки(&НаДату, "+стрУсловие+") КАК ИсточникДанных1
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва
	|";
	тзОстаткиПоСделкам=Запрос.Выполнить().Выгрузить();
	Если тзОстаткиПоСделкам.Количество()=0 Тогда Возврат; КонецЕсли;

	//Отсортируем сделки по порядку списания
	Если Сделки.Количество()>0 Тогда
		тзОстаткиПоСделкам.Колонки.Добавить("ПорядковыйНомер");
		Для каждого СтрокаКоллекции Из Сделки Цикл
			РезультатПоиска=тзОстаткиПоСделкам.Найти(СтрокаКоллекции.Сделка, "ДокументРезерва");
			Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
			РезультатПоиска.ПорядковыйНомер=Сделки.Индекс(СтрокаКоллекции);
		КонецЦикла;
		тзОстаткиПоСделкам.Сортировать("ПорядковыйНомер Возвр");
	КонецЕсли;

	тзДвижения=Движения.УчетПотребностей.ВыгрузитьКолонки();
	тзДвижения.Колонки.Добавить("ИсключитьХарактеристикуНоменклатуры", Новый ОписаниеТипов("Булево"));

	СтруктураОтбора=Новый Структура("Склад,Номенклатура,ХарактеристикаНоменклатуры");
	Для каждого СтрокаКоллекции1 Из тзТМЦ Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКоллекции1);
		МассивСтрок=тзОстаткиПоСделкам.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКоллекции2 Из МассивСтрок Цикл
			текКоличество=Мин(СтрокаКоллекции2.Количество, СтрокаКоллекции1.Количество);
			Если текКоличество<=0 Или СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции1.Количество=СтрокаКоллекции1.Количество-текКоличество;
	        СтрокаКоллекции2.Количество=СтрокаКоллекции2.Количество-текКоличество;

			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.ДокументРезерва=СтрокаКоллекции2.ДокументРезерва;
			НоваяСтрока.Количество=текКоличество;
		КонецЦикла;
	КонецЦикла; 

	//****************************************************************************************
	// Если потребности были без характеристики (вне зависимости от ведения по характеристикам) 
	// и остались на остаткам то пытаемся закрыть их
	//
	СтруктураОтбора=Новый Структура("Склад,Номенклатура");
	Для каждого СтрокаКоллекции1 Из тзОстаткиПоСделкам Цикл
		Если СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКоллекции1);
		МассивСтрок=тзТМЦ.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКоллекции2 Из МассивСтрок Цикл
			текКоличество=Мин(СтрокаКоллекции2.Количество, СтрокаКоллекции1.Количество);
			Если текКоличество<=0 Или СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции1.Количество=СтрокаКоллекции1.Количество-текКоличество;
            СтрокаКоллекции2.Количество=СтрокаКоллекции2.Количество-текКоличество;

			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции2);
			НоваяСтрока.ДокументРезерва=СтрокаКоллекции1.ДокументРезерва;
			НоваяСтрока.Количество=текКоличество;
			НоваяСтрока.ИсключитьХарактеристикуНоменклатуры=Истина;
		КонецЦикла;
	КонецЦикла; 
	//****************************************************************************************

    тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ОрганизацияСсылка, "Организация");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	//Учет потребностей
	Для каждого СтрокаКоллекции Из тзДвижения Цикл
		ЗаполнитьЗначенияСвойств(Движения.УчетПотребностей.Добавить(), СтрокаКоллекции,,?(СтрокаКоллекции.ИсключитьХарактеристикуНоменклатуры, "ХарактеристикаНоменклатуры", ""));
	КонецЦикла;
	//*** Движения.УчетПотребностей.Загрузить(тзДвижения);

	//Учет резервов ТМЦ
	Если Константы.УчетРезервов.Получить() Тогда
		тзДвижения.Колонки.ДокументРезерва.Имя="Заказ";
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		Для каждого СтрокаКоллекции Из тзДвижения Цикл
			ЗаполнитьЗначенияСвойств(Движения.УчетРезервовТМЦ.Добавить(), СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыНаСкладах") Тогда Возврат; КонецЕсли;

	тзДвижения=Движения["ТоварыНаСкладах"].ВыгрузитьКолонки();
	Для каждого СтрокаКоллекции1 Из СтруктураТД Цикл
		Если СтрокаКоллекции1.Ключ="Изделия" Тогда
			стрВидДвижения="Приход";
		ИначеЕсли СтрокаКоллекции1.Ключ="ПобочныеПродукты" Тогда
			стрВидДвижения="Приход";
		ИначеЕсли СтрокаКоллекции1.Ключ="Комплектующие" Тогда
			стрВидДвижения="Расход";
		Иначе Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаКоллекции2 Из СтрокаКоллекции1.Значение Цикл
			текТМЦ=СтрокаКоллекции2.Номенклатура;
			Если НЕ ТипЗнч(текТМЦ)=Тип("СправочникСсылка.Номенклатура") Тогда Продолжить; КонецЕсли;
			Если стрВидДвижения="Приход" И текТМЦ.ВидНоменклатуры.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаКоллекции2.ЯчеистыйСклад=Истина Тогда Продолжить; КонецЕсли;
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции2);
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления[стрВидДвижения];			
		КонецЦикла;
	КонецЦикла;
	Если тзДвижения.Количество()=0 Тогда Возврат; КонецЕсли;

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");

	Движения.ТоварыНаСкладах.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_СписанныеТоварам(СтруктураШД, СтруктураТД, Отказ)
    Если Отказ Тогда Возврат; КонецЕсли; 

	РежимПроведения=ДополнительныеСвойства.РежимПроведения;
	Заголовок=ДополнительныеСвойства.Заголовок;
	
	тзИзделия=СтруктураТД.Изделия;
	тзИзделия.Колонки.Добавить("КачествоНовое");
	тзИзделия.Колонки.Добавить("ВидТабличнойЧастиНовая");
    тзИзделия.Колонки.Добавить("НомерСтрокиТабличнойЧастиНовая");
	
	тзПобочныеПродукты=СтруктураТД.ПобочныеПродукты;
	тзПобочныеПродукты.Колонки.Добавить("КачествоНовое");
	тзПобочныеПродукты.Колонки.Добавить("ВидТабличнойЧастиНовая");
	тзПобочныеПродукты.Колонки.Добавить("НомерСтрокиТабличнойЧастиНовая");

	тзКомплектующие=СтруктураТД.Комплектующие;
	тзКомплектующие.Колонки.Добавить("КачествоНовое");
	тзКомплектующие.Колонки.Добавить("ВидТабличнойЧастиНовая");
	тзКомплектующие.Колонки.Добавить("НомерСтрокиТабличнойЧастиНовая");
	
	тзСтатьиЗатрат=СтруктураТД.СтатьиЗатрат;

	// Формируем таблицу движений.
	ТаблицаПоТоварам=тзКомплектующие.Скопировать();
	ТаблицаПоТоварам.Колонки.Добавить("НоменклатураНовая");
	ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
	ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатурыНовая");
	ТаблицаПоТоварам.Колонки.Добавить("КоличествоПоступление");
	ТаблицаПоТоварам.Колонки.Добавить("КоличествоПоступлениеДоп");
	ТаблицаПоТоварам.Колонки.Добавить("ДокументОприходованияНовый");
	ТаблицаПоТоварам.Колонки.Добавить("СтоимостьДополнительная");
	ТаблицаПоТоварам.Колонки.Добавить("СтоимостьПоступление");
	ТаблицаПоТоварам.Колонки.Добавить("СтоимостьПоступлениеНУ");
	ТаблицаПоТоварам.Колонки.Добавить("СкладПолучатель");
	ТаблицаПоТоварам.Колонки.Добавить("НеОприходовать");

	СтруктураТаблицИзделий=Новый Структура;
	СтруктураТаблицИзделий.Вставить("Изделия", тзИзделия);
	СтруктураТаблицИзделий.Вставить("ПобочныеПродукты", тзПобочныеПродукты);
	Для каждого СтрокаКоллекцииТаблиц Из СтруктураТаблицИзделий Цикл
		ТекущаяТЗ=СтрокаКоллекцииТаблиц.Значение;
		Для Каждого СтрокаИзделия Из ТекущаяТЗ Цикл
			//Комплектующие
			МассивКомплектующие=ТаблицаПоТоварам.НайтиСтроки(Новый Структура("ID_Товары", СтрокаИзделия.ID));
			Если МассивКомплектующие.Количество()=0 Тогда Продолжить; КонецЕсли;
			
			//Статьи затрат
			ОбщаяСуммаИздержекИзделия=0;
			МассивСтатьиЗатрат=тзСтатьиЗатрат.НайтиСтроки(Новый Структура("ID_Товары", СтрокаИзделия.ID));
			Если МассивСтатьиЗатрат.Количество()>0 Тогда
				Для Каждого Строка Из МассивСтатьиЗатрат Цикл
					ОбщаяСуммаИздержекИзделия=ОбщаяСуммаИздержекИзделия+Строка.Сумма;
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаКомплектующей Из МассивКомплектующие Цикл			
				СтрокаКомплектующей.НеОприходовать=ТипЗнч(СтрокаИзделия.Номенклатура)<>Тип("СправочникСсылка.Номенклатура");
				Если СтрокаКомплектующей.НеОприходовать Тогда Продолжить; КонецЕсли;
				
				СтрокаКомплектующей.НоменклатураНовая               = СтрокаИзделия.Номенклатура;
				СтрокаКомплектующей.ХарактеристикаНоменклатурыНовая = СтрокаИзделия.ХарактеристикаНоменклатуры;
				СтрокаКомплектующей.СерияНоменклатурыНовая          = СтрокаИзделия.СерияНоменклатуры;
				СтрокаКомплектующей.КачествоНовое				   	= СтрокаИзделия.Качество;
				СтрокаКомплектующей.ДокументОприходованияНовый	   	= Ссылка;
				СтрокаКомплектующей.НомерСтрокиТабличнойЧастиНовая  = ТекущаяТЗ.Индекс(СтрокаИзделия)+1; //15.05.2012
				СтрокаКомплектующей.НомерСтрокиТабличнойЧасти	   	= СтрокаКомплектующей.НомерСтрокиТабличнойЧасти;
				СтрокаКомплектующей.ВидТабличнойЧастиНовая		   	= СтрокаИзделия.ВидТабличнойЧасти;
				СтрокаКомплектующей.СкладПолучатель				   	= СтрокаИзделия.Склад;
				СтрокаКомплектующей.КоличествоПоступление   	 	= СтрокаИзделия.Количество;
				СтрокаКомплектующей.КоличествоПоступлениеДоп   	 	= СтрокаИзделия.КоличествоДоп;
				СтрокаКомплектующей.СтоимостьПоступление    		= СтрокаИзделия.СтоимостьУУ;
				СтрокаКомплектующей.СтоимостьПоступлениеНУ  		= СтрокаИзделия.СтоимостьНУ;
				СтрокаКомплектующей.СтоимостьДополнительная 		= ОбщаяСуммаИздержекИзделия;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 

	// Сформируем таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений=Движения.СписанныеТовары.ВыгрузитьКолонки();
 	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	// Если резервирование под заказ - заказ партии
	////Если ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	////	ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено), "ЗаказПартии");
	////	ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено), "ЗаказСписания");
	////КонецЕсли; //26.07.14

	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,   "ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	Движения.СписанныеТовары.Загрузить(ТаблицаДвижений);
	Движения.СписанныеТовары.Записать(Истина);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ЗатратыНаПроизводство(СтруктураШД, СтруктураТД, Отказ)
	//Движение по плану
	ТипЦен_Плановый=Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();

	НаборДвижений=Движения.ЗатратыНаПроизводство;
	тзДвижения=НаборДвижений.ВыгрузитьКолонки();

	Для Каждого СтрокаТабличнойЧасти Из СтруктураТД.Изделия Цикл
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)=Тип("СправочникСсылка.ОбъектыСтроительства") Тогда	Продолжить;	КонецЕсли; //Временно
		ЗаполнитьДвиженияПоСпецификации(тзДвижения, ТипЦен_Плановый, СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СпецификацияНоменклатуры, СтрокаТабличнойЧасти.Количество);	
	КонецЦикла;

	Если тзДвижения.Количество()>0 Тогда
		тзДвижения.ЗаполнитьЗначения(Дата, "Период");
		тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
		тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
		тзДвижения.ЗаполнитьЗначения(Подразделение, "ЦФО");
		тзДвижения.ЗаполнитьЗначения(Перечисления.ПланФакт.План, "Статус");

		НаборДвижений.Загрузить(тзДвижения);
	КонецЕсли; 
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетЗаказов(СтруктураШД, СтруктураТД, Отказ)
	Если Сделки.Количество()=0 Тогда Возврат; КонецЕсли;
	
	СтруктураПараметров=Новый Структура("МоментВремени,Дата,Ссылка,Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШД);
	
	СтруктураПараметров.Вставить("ТаблицаДвижений1", Движения.ЗаказыПокупателей.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвижений2", Движения.ВнутренниеЗаказы.ВыгрузитьКолонки());
	СтруктураПараметров.Вставить("ТаблицаДвижений3", Движения.ЗаказыНаПроизводство.ВыгрузитьКолонки());

	УправлениеЗаказамиСервер.СформироватьДвиженияРегистров(СтруктураПараметров, СтруктураТД, Отказ);

	Движения.ЗаказыПокупателей	 .Загрузить(СтруктураПараметров.ТаблицаДвижений1);
	Движения.ВнутренниеЗаказы	 .Загрузить(СтруктураПараметров.ТаблицаДвижений2);
	Движения.ЗаказыНаПроизводство.Загрузить(СтруктураПараметров.ТаблицаДвижений3);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;

	тзСписанияТоваров=Движения.СписанныеТовары.Выгрузить();
	Если тзСписанияТоваров.Количество()=0 Тогда
		тзСписанияТоваров=ОбщегоНазначения.Отладка_РС(Ссылка, "СписанныеТовары").Выгрузить();
	КонецЕсли; //При выборочном проведении по регистрам

	ОрганизацияСсылка=Организация;
	
	//Дополним таблицу изделиями которые не имеют комплектующих
	СтруктураТаблицИзделий=Новый Структура;
	СтруктураТаблицИзделий.Вставить("Изделия", СтруктураТД.Изделия);
	СтруктураТаблицИзделий.Вставить("ПобочныеПродукты", СтруктураТД.ПобочныеПродукты);
	Для каждого СтрокаКоллекцииТаблиц Из СтруктураТаблицИзделий Цикл
		ТекущаяТЗ=СтрокаКоллекцииТаблиц.Значение;
		Для Каждого СтрокаТабличнойЧасти Из ТекущаяТЗ Цикл
			МассивКомплектующие=Комплектующие.НайтиСтроки(Новый Структура("ID_Товары", СтрокаТабличнойЧасти.ID));
			Если МассивКомплектующие.Количество()>0 Тогда Продолжить; КонецЕсли;
			НоваяСтрока=тзСписанияТоваров.Добавить();
			НоваяСтрока.Период=Дата;
			НоваяСтрока.МоментВремени=МоментВремени();
			НоваяСтрока.Регистратор=Ссылка;
			НоваяСтрока.ВидТабличнойЧастиНовая=СтрокаКоллекцииТаблиц.Ключ;
			НоваяСтрока.НоменклатураНовая=СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.ВидТабличнойЧасти="Комплектующие";
			НоваяСтрока.НомерСтрокиТабличнойЧастиНовая=ТекущаяТЗ.Индекс(СтрокаТабличнойЧасти)+1;
			НоваяСтрока.КачествоНовое=СтрокаТабличнойЧасти.Качество;
			НоваяСтрока.ТОП=СтрокаТабличнойЧасти.ТОП;
			НоваяСтрока.Организация=ОрганизацияСсылка;
			НоваяСтрока.Склад=?(СтрокаТабличнойЧасти.Склад.Пустая(), Склад, СтрокаТабличнойЧасти.Склад);
			НоваяСтрока.СкладПолучатель=НоваяСтрока.Склад;
			НоваяСтрока.КоличествоКомплекта=СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоПоступление=СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоПоступлениеДоп=СтрокаТабличнойЧасти.КоличествоДоп;
			НоваяСтрока.СтоимостьПоступление=СтрокаТабличнойЧасти.СтоимостьУУ;
			НоваяСтрока.СтоимостьПоступлениеНУ=СтрокаТабличнойЧасти.СтоимостьНУ;
			НоваяСтрока.ХарактеристикаНоменклатурыНовая=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатурыНовая=СтрокаТабличнойЧасти.СерияНоменклатуры;
			НоваяСтрока.КодОперацииПартииТоваров=Перечисления.КодыОперацийПартииТоваров.Комплектация;
		КонецЦикла;
	КонецЦикла;
	ъ=1;
	Для каждого СтрокаКоллекции Из тзСписанияТоваров Цикл
		СтрокаКоллекции.НомерСтроки=ъ; СтрокаКоллекции.НомерСтрокиДокумента=ъ; ъ=ъ+1;
	КонецЦикла;
	
	СтруктураШД.Вставить("Ссылка", Ссылка);
	СтруктураШД.Вставить("Отказ", Отказ);
	СтруктураШД.Вставить("Организация", ОрганизацияСсылка);
	СтруктураШД.Вставить("МоментВремени", МоментВремени());
	СтруктураШД.Вставить("УчетнаяПолитика", ПараметрыУчетнойПолитики());
	СтруктураШД.Вставить("ТаблицаСписания", тзСписанияТоваров);
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВыпускПродукцииУслуг(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВыпускПродукцииУслугБухгалтерскийУчет") Тогда Возврат; КонецЕсли;

	НаборДвижений=Движения.ВыпускПродукцииУслугБухгалтерскийУчет;
	
	УчетнаяПолитика=ПараметрыУчетнойПолитики(); ПорядокРаспределения=Неопределено;
	УчетнаяПолитика.Свойство("ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг", ПорядокРаспределения);

	Если ПорядокРаспределения = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенам Тогда
		ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах;
	ИначеЕсли ПорядокРаспределения = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоОбъемуВыпуска Тогда
		ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВКоличественныхПоказателях;
	КонецЕсли;
	УслугиВСуммовомВыражении = (ВариантВыраженияВнутреннихУслуг = Перечисления.ВариантВыраженияВнутреннихУслуг.ВПлановыхЦенах);
	
	Для каждого СтрокаТабличнойЧасти Из СтруктураТД.Изделия Цикл
		Если СтрокаТабличнойЧасти.ТОП.Пустая() Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока=НаборДвижений.Добавить();
		НоваяСтрока.Активность=Истина;
		НоваяСтрока.Период=Дата;
		НоваяСтрока.Регистратор=Ссылка;
		НоваяСтрока.Организация=Организация;
			
		НоваяСтрока.Продукция=СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.Подразделение=?(СтрокаТабличнойЧасти.Подразделение.Пустая(), Подразделение, СтрокаТабличнойЧасти.Подразделение);
		НоваяСтрока.НоменклатурнаяГруппа=СтрокаТабличнойЧасти.НоменклатурнаяГруппа;

		НоваяСтрока.Количество=СтрокаТабличнойЧасти.Количество;
		НоваяСтрока.ПлановаяСтоимость=СтрокаТабличнойЧасти["СтоимостьУУ"];

		Попытка Проводка=СтрокаТабличнойЧасти.ТОП["ПроводкиБУ"][0];
		Исключение Продолжить; 
		КонецПопытки;
		Если Проводка.Количество=0 Тогда Продолжить; КонецЕсли; 

		НоваяСтрока.СчетЗатрат=ПланыСчетов.Хозрасчетный.ОсновноеПроизводство; //Проводка.СчетКредит;
		НоваяСтрока.СчетСписания=Проводка.СчетДебет;

		НоваяСтрока.СубконтоСписания1=СтрокаТабличнойЧасти.Номенклатура;
		НоваяСтрока.СубконтоСписания2=Склад;
		
		НоваяСтрока.ПрямыеРасходыРаспределятьПоКоличеству = Не УслугиВСуммовомВыражении;
	КонецЦикла;
	
	Если НаборДвижений.Количество()>0 Тогда НаборДвижений.Записать(); КонецЕсли; 
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ)
	СтруктураПараметров=Новый Структура("МоментВремени,Дата,Ссылка,Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШД);
	СтруктураПараметров.Вставить("тзУчетРезервовТМЦ", Движения.УчетРезервовТМЦ.ВыгрузитьКолонки());
	УправлениеРезервамиСервер.СформироватьДвиженияРасход(СтруктураПараметров, СтруктураТД, Отказ);
	Если НЕ СтруктураПараметров.тзУчетРезервовТМЦ.Количество()=0 Тогда
		Для каждого СтрокаКоллекции Из СтруктураПараметров.тзУчетРезервовТМЦ Цикл
			ЗаполнитьЗначенияСвойств(Движения.УчетРезервовТМЦ.Добавить(), СтрокаКоллекции);
		КонецЦикла;
		//*** Движения.УчетРезервовТМЦ.Загрузить(СтруктураПараметров.тзУчетРезервовТМЦ);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли;

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 
	Дата=ТекущаяДата();
	Если ТипЗнч(Основание)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Для каждого СтрокаКоллекции из Основание.Товары Цикл
			НоваяСтрока=Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.НоменклатурнаяГруппа=НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
			НоваяСтрока.ID=Строка(Новый УникальныйИдентификатор);
			ЗаполнитьИзделиеПоСпецификации(НоваяСтрока, НоваяСтрока.СпецификацияНоменклатуры);
		КонецЦикла;

		Для каждого СтрокаКоллекции из Основание.Услуги Цикл
			НоваяСтрока=Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаКоллекции.Номенклатура;
			НоваяСтрока.НоменклатурнаяГруппа = СтрокаКоллекции.Номенклатура.НоменклатурнаяГруппа;
			НоваяСтрока.Количество = СтрокаКоллекции.Количество;
			НоваяСтрока.ID=Строка(Новый УникальныйИдентификатор);
			ЗаполнитьИзделиеПоСпецификации(НоваяСтрока, НоваяСтрока.СпецификацияНоменклатуры);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ЗаказПокупателя") Или ТипЗнч(Основание)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Комментарий=Основание.Комментарий; Заказ=Основание.Ссылка;
		Для каждого СтрокаКоллекции из Основание.Товары Цикл
			НоваяСтрока=Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.НоменклатурнаяГруппа = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
			НоваяСтрока.ID=Строка(Новый УникальныйИдентификатор);
			ЗаполнитьИзделиеПоСпецификации(НоваяСтрока, НоваяСтрока.СпецификацияНоменклатуры);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда		
		ДокументОснование = Основание.Ссылка;
		Если Основание.Товары.Количество()<>0 тогда 
			СтруктураОтбора=Новый Структура;							
			Для каждого СтрокаТабличнойЧасти из Основание.Товары Цикл
				//Товары
				НоваяСтрока=Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатурнаяГруппа) Тогда						 
					НоваяСтрока.НоменклатурнаяГруппа=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "НоменклатурнаяГруппа");
				КонецЕсли;
				НоваяСтрока.ID=Строка(Новый УникальныйИдентификатор);				

				//Комплектующие
				СтруктураОтбора.Вставить("ID_Владелец", СтрокаТабличнойЧасти.ID);
				МассивСтрок=Основание.Комплектующие.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаКоллекции Из МассивСтрок Цикл
					НоваяСтрокаКомплектующие=Комплектующие.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаКомплектующие, СтрокаКоллекции); 
					Если НЕ ЗначениеЗаполнено(НоваяСтрокаКомплектующие.НоменклатурнаяГруппа) Тогда
						НоваяСтрокаКомплектующие.НоменклатурнаяГруппа=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НоваяСтрокаКомплектующие.Номенклатура, "НоменклатурнаяГруппа");
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НоваяСтрокаКомплектующие.НоменклатурнаяГруппа) Тогда
						НоваяСтрокаКомплектующие.НоменклатурнаяГруппа=НоваяСтрока.НоменклатурнаяГруппа;
					КонецЕсли;
						
					НоваяСтрокаКомплектующие.ID_Товары=НоваяСтрока.ID;
				КонецЦикла;
				
				//Статьи затрат
				Для Каждого СтрокаКоллекции из Основание.СтатьиЗатрат Цикл
					ЗаполнитьЗначенияСвойств(СтатьиЗатрат.Добавить(), СтрокаКоллекции);
				КонецЦикла;
			КонецЦикла;
			Если НЕ Товары.Количество()=0 Тогда
				//Комплектующие без владельца
				СтруктураОтбора.Вставить("ID_Владелец", "");
				МассивСтрок=Основание.Комплектующие.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаКоллекции Из МассивСтрок Цикл
					НоваяСтрока=Комплектующие.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатурнаяГруппа) Тогда
						НоваяСтрока.НоменклатурнаяГруппа=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "НоменклатурнаяГруппа");
					КонецЕсли;	
					НоваяСтрока.ID_Товары=Товары[0].ID;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//Установить типовые операции по регистру правил
	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();
	
	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.ПолучитьСтруктуруРеквизитовШапки(ЭтотОбъект);

	//Формирование значений реквизитов табличных частей
	тзИзделия=УправлениеДокументамиСервер.ПолучитьСтруктуруТЧ(ЭтотОбъект, "Товары");
	тзПобочныеПродукты=УправлениеДокументамиСервер.ПолучитьСтруктуруТЧ(ЭтотОбъект, "ПобочныеПродукты");
	тзКомплектующие=УправлениеДокументамиСервер.ПолучитьСтруктуруТЧ(ЭтотОбъект, "Комплектующие");
	тзСтатьиЗатрат=УправлениеДокументамиСервер.ПолучитьСтруктуруТЧ(ЭтотОбъект, "СтатьиЗатрат");

	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Изделия", тзИзделия);
	СтруктураТД.Вставить("Комплектующие", тзКомплектующие);
	СтруктураТД.Вставить("СтатьиЗатрат", тзСтатьиЗатрат);
	СтруктураТД.Вставить("ПобочныеПродукты", тзПобочныеПродукты);
	СтруктураТД.Вставить("Сделки", Сделки.Выгрузить());

	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);