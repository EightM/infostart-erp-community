Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Функция РассчитыватьАвтоматическиеСкидки(ТекВид)
	ИспользованиеСкидок = ПараметрыУчетнойПолитики();
	Если ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция ПолучитьСоставСтроки(КлючСтроки, СтрокаТабличнойЧасти = Неопределено) Экспорт

	Если СтрокаТабличнойЧасти <> Неопределено И Не СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(СтрокаТабличнойЧасти);
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки", КлючСтроки);

		МассивЭлементов = СоставНабора.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;

	Возврат МассивЭлементов;

КонецФункции

Функция СоставСтрокиНеЗаполнен(КлючСтроки) Экспорт
	Возврат (СоставНабора.Найти(КлючСтроки, "КлючСтроки") = Неопределено);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы(СтруктураШД, Отказ, Заголовок)
	Если ЦеновыеГруппы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень ценовых групп!", Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиБонусы(СтруктураШД, Отказ, Заголовок)

	Если Бонусы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень бонусов!", Отказ, Заголовок);
	КонецЕсли;

	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Бонусы"].Представление();

	Для Каждого СтрокаБонус Из Бонусы Цикл
		Если (ЗначениеЗаполнено(СтрокаБонус.Номенклатура)
		   И СтрокаБонус.Номенклатура.Услуга)
		 Или (ЗначениеЗаполнено(СтрокаБонус.СпецПредложение)
		   И СтрокаБонус.СпецПредложение.Услуга) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаБонус.НомерСтроки) +
			                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. Услуг здесь быть не должно!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураШД, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти=ЭтотОбъект.Метаданные().ТабличныеЧасти["Бонусы"].Представление();

	Для Каждого СтрокаБонус Из Бонусы Цикл
		Если СтрокаБонус.Номенклатура.Комплект Тогда
			Если СоставСтрокиНеЗаполнен(СтрокаБонус.КлючСтроки-1) Тогда
				СтрокаНачалаСообщенияОбОшибке="Для комплекта номенклатуры в строке номер """+СокрЛП(СтрокаБонус.НомерСтроки)+""" табличной части """+ПредставлениеТабличнойЧасти+""": ";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+"не задан состав!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если СоставСтрокиНеЗаполнен(СтрокаБонус.КлючСтроки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "Для спец. предложения в строке номер """+СокрЛП(СтрокаБонус.НомерСтроки)+""" табличной части """+ПредставлениеТабличнойЧасти + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+"не задан состав!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШД,ТаблицаПоТоварам, ТаблицаПоПолучателям, ТаблицаПоДнямНедели, ТаблицаПоЦеновымГруппам, ТаблицаПоБонусам, Отказ, Заголовок)
    Если Отказ Тогда Возврат; КонецЕсли; 

	Если СтруктураШД.ДляВсехПолучателей Тогда
		ТаблицаПоПолучателям.Очистить();

		ПустойПолучатель = ТаблицаПоПолучателям.Добавить();
		Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
			ПустойПолучатель.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			ПустойПолучатель.Получатель = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		Если СтруктураШД.ДляВсейНоменклатуры Тогда
			ТаблицаПоТоварам.Очистить();

			ПустойТовар = ТаблицаПоТоварам.Добавить();
			ПустойТовар.Номенклатура               = Неопределено;
			ПустойТовар.ХарактеристикаНоменклатуры = Неопределено;
			ПустойТовар.Качество                   = СтруктураШД.Качество;
			ПустойТовар.ПроцентСкидкиНаценки       = СтруктураШД.ПроцентСкидкиНаценки;
			ПустойТовар.ОграничениеСкидкиНаценки   = СтруктураШД.ОграничениеСкидкиНаценки;
		КонецЕсли;

		НаборДвижений = Движения.СкидкиНаценкиНоменклатуры;
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
			Для каждого ТекСтрокаТовара Из ТаблицаПоТоварам Цикл
				Движение = ТаблицаДвижений.Добавить();
				ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
				ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);
				Если ПустойКонтрагент Тогда
					ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
				Иначе
					Если ПустойПолучатель Тогда
						ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
					Иначе
						ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
					КонецЕсли;
				КонецЕсли;

				Движение.ПолучательСкидки           = ПолучательДвижения;

				Движение.Номенклатура               = ТекСтрокаТовара.Номенклатура;
				Движение.ХарактеристикаНоменклатуры = ТекСтрокаТовара.ХарактеристикаНоменклатуры;
				Движение.Качество                   = ТекСтрокаТовара.Качество;

				Движение.Условие                    = ?(СтруктураШД.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
														Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШД.Условие);
				Движение.ЗначениеУсловия            = ?(СтруктураШД.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
														0, СтруктураШД.ЗначениеУсловия);
				
				Движение.ПроцентСкидкиНаценки       = ТекСтрокаТовара.ПроцентСкидкиНаценки;
				Движение.ОграничениеСкидкиНаценки   = ТекСтрокаТовара.ОграничениеСкидкиНаценки;
				
				Движение.Валюта                     = СтруктураШД.Валюта;
			КонецЦикла;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШД.ДатаОкончания,"ДатаОкончания");

		Если Не Отказ Тогда
			НаборДвижений.мПериод          = СтруктураШД.ДатаНачала;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			Движения.СкидкиНаценкиНоменклатуры.ВыполнитьДвижения();
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам Тогда
		Если ТаблицаПоЦеновымГруппам.Количество() <> 0 Тогда
			НаборДвижений = Движения.СкидкиНаценкиПоЦеновымГруппам;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
				Для каждого ТекСтрокаЦеноваяГруппа Из ТаблицаПоЦеновымГруппам Цикл
					Движение=ТаблицаДвижений.Добавить();
					ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
					ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);

					Если ПустойКонтрагент Тогда
						ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
					Иначе
						Если ПустойПолучатель Тогда
							ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
						Иначе
							ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
						КонецЕсли;
					КонецЕсли;

					Движение.ПолучательСкидки           = ПолучательДвижения;

					Движение.ЦеноваяГруппа              = ТекСтрокаЦеноваяГруппа.ЦеноваяГруппа;
					Движение.Качество                   = ТекСтрокаЦеноваяГруппа.Качество;

					Движение.Условие                    = ?(СтруктураШД.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
					Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШД.Условие);
					Движение.ЗначениеУсловия            = ?(СтруктураШД.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
					0, СтруктураШД.ЗначениеУсловия);

					Движение.ПроцентСкидкиНаценки       = ТекСтрокаЦеноваяГруппа.ПроцентСкидкиНаценки;
					Движение.ОграничениеСкидкиНаценки   = ТекСтрокаЦеноваяГруппа.ОграничениеСкидкиНаценки;

					Движение.Валюта                     = СтруктураШД.Валюта;
				КонецЦикла;
			КонецЦикла;

			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШД.ДатаОкончания,"ДатаОкончания");

			Если Не Отказ Тогда
				НаборДвижений.мПериод          = СтруктураШД.ДатаНачала;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.СкидкиНаценкиПоЦеновымГруппам.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		Если ТаблицаПоБонусам.Количество() <> 0 Тогда
			НаборДвижений = Движения.СкидкиНоменклатурыНатуральные;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			Для Каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
				Для Каждого ТекСтрокаБонус Из ТаблицаПоБонусам Цикл
					Движение = ТаблицаДвижений.Добавить();
					ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
					ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);

					Если ПустойКонтрагент Тогда
						ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
					Иначе
						Если ПустойПолучатель Тогда
							ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
						Иначе
							ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
						КонецЕсли;
					КонецЕсли;

					Движение.ПолучательСкидки = ПолучательДвижения;
					Движение.Номенклатура = ТекСтрокаБонус.Номенклатура;
					Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаНоменклатуры;
					Движение.Качество = ТекСтрокаБонус.Качество;
					Движение.СпецПредложение = ТекСтрокаБонус.СпецПредложение;
					Движение.ХарактеристикаСпецПредложения = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
					Движение.Количество = ТекСтрокаБонус.Количество * ТекСтрокаБонус.ЕдиницаИзмерения.Коэффициент / ТекСтрокаБонус.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
				КонецЦикла;
			КонецЦикла;

			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШД.ДатаОкончания,"ДатаОкончания");

			Если Не Отказ Тогда
				НаборДвижений.мПериод          = СтруктураШД.ДатаНачала;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.СкидкиНоменклатурыНатуральные.ВыполнитьДвижения();
			КонецЕсли;

			НаборДвижений = Движения.СпецПредложения;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			Для Каждого ТекСтрокаБонус Из ТаблицаПоБонусам Цикл
				СоставКомплекта = ПолучитьСоставСтроки(ТекСтрокаБонус.КлючСтроки - 1, ТекСтрокаБонус);

				//Запишем движения комплектующих спец. предложения.
				//Комплектующие, за которые даются бонусы.
				Для Каждого СтрокаКомплектующей Из СоставКомплекта Цикл
					Движение = ТаблицаДвижений.Добавить();
					Движение.Номенклатура = ТекСтрокаБонус.СпецПредложение;
					Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
					Движение.Комплектующая = СтрокаКомплектующей.Номенклатура;
					Движение.ХарактеристикаКомплектующей = СтрокаКомплектующей.ХарактеристикаНоменклатуры;
					Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					Движение.ЭтоБонус = Ложь;
				КонецЦикла;

				//И комплектующие-бонусы.
				СоставКомплекта = ПолучитьСоставСтроки(ТекСтрокаБонус.КлючСтроки);

				Для Каждого СтрокаКомплектующей Из СоставКомплекта Цикл
					Движение = ТаблицаДвижений.Добавить();
					Движение.Номенклатура = ТекСтрокаБонус.СпецПредложение;
					Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
					Движение.Комплектующая = СтрокаКомплектующей.Номенклатура;
					Движение.ХарактеристикаКомплектующей = СтрокаКомплектующей.ХарактеристикаНоменклатуры;
					Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					Движение.ЭтоБонус = Истина;
				КонецЦикла;
			КонецЦикла;

			Если Не Отказ Тогда
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				НаборДвижений.мПериод          = СтруктураШД.ДатаНачала;
				Движения.СпецПредложения.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЗаписыватьДвиженияПоВремениСкидок = Ложь;
	НаборДвиженийВремяДействияСкидок = Движения.ВремяДействияСкидок;
	ТаблицаДвижений = НаборДвиженийВремяДействияСкидок.Выгрузить();
	ВремяНачала = Неопределено;
	ВремяОкончания = Неопределено;

	Для каждого ДеньНедели Из ТаблицаПоДнямНедели Цикл
		Если ДеньНедели.Выбран Тогда
			Движение                = ТаблицаДвижений.Добавить();
			Движение.ВремяНачала    = ДеньНедели.ВремяНачала;
			Движение.ВремяОкончания = ДеньНедели.ВремяОкончания;
			Движение.ДеньНедели     = ДеньНедели.ДеньНедели;

			Если ВремяНачала = Неопределено Тогда
				ВремяНачала = ДеньНедели.ВремяНачала;
			ИначеЕсли ВремяНачала <> ДеньНедели.ВремяНачала Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;

			Если ЗначениеЗаполнено(ДеньНедели.ВремяНачала)
			 Или Движение.ВремяОкончания <> '00010101235959' Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;

			Если ВремяОкончания = Неопределено Тогда
				ВремяОкончания = ДеньНедели.ВремяОкончания;
			ИначеЕсли ВремяОкончания <> ДеньНедели.ВремяОкончания Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;
		Иначе
			ЗаписыватьДвиженияПоВремениСкидок = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не Отказ И ЗаписыватьДвиженияПоВремениСкидок Тогда
		НаборДвиженийВремяДействияСкидок.мПериод          = СтруктураШД.ДатаНачала;
		НаборДвиженийВремяДействияСкидок.мТаблицаДвижений = ТаблицаДвижений;
		Движения.ВремяДействияСкидок.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры

// ////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	Заголовок=ДополнительныеСвойства.Заголовок;
	ТекВид = ?(Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий, Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, Условие);
	Если Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
		ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
	ИначеЕсли Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт Тогда
		ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
	Иначе
		ТекВид = Условие;
	КонецЕсли;
	Если Не РассчитыватьАвтоматическиеСкидки(ТекВид) Тогда
		НаименованиеВида = "";
		Если ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
			НаименованиеВида = "Скидка по количеству товара";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
			НаименованиеВида = "Скидка по сумме документа";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
			НаименованиеВида = "Скидка по дисконтной карте";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
			НаименованиеВида = "Скидка по виду оплаты";
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке("В учетной политике не указано использование скидок этого вида ("+ НаименованиеВида + ")."
		                    + Символы.ПС + "Скидка не может быть назначена." , Отказ, Заголовок);
	КонецЕсли;
	СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре
		И Не ДляВсейНоменклатуры И Товары.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень товаров или установить флажок ""Для всей номенклатуры""!", Отказ, Заголовок);
	КонецЕсли;
	Если ПолучателиСкидки.Количество() = 0 И Не ДляВсехПолучателей Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень получателей скидки или установить флажок ""Для всех получателей""!", Отказ, Заголовок);
	КонецЕсли;
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ОграничениеСкидкиНаценки"  , "ОграничениеСкидкиНаценки");
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент", "Контрагент");
	СтруктураПолей.Вставить("Получатель", "Получатель");
	РезультатЗапросаПоПолучателям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПолучателиСкидки", СтруктураПолей);
	ТаблицаПоПолучателям = РезультатЗапросаПоПолучателям.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Выбран"        , "Выбран");
	СтруктураПолей.Вставить("ДеньНедели"    , "ДеньНедели");
	СтруктураПолей.Вставить("ВремяНачала"   , "ВремяНачала");
	СтруктураПолей.Вставить("ВремяОкончания", "ВремяОкончания");
	РезультатЗапросаПоДнямНедели = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВремяПоДнямНедели", СтруктураПолей);
	ТаблицаПоДнямНедели = РезультатЗапросаПоДнямНедели.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЦеноваяГруппа"           , "ЦеноваяГруппа");
	СтруктураПолей.Вставить("Качество"                , "Качество");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"    , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ОграничениеСкидкиНаценки", "ОграничениеСкидкиНаценки");
	РезультатЗапросаПоЦеновымГруппам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ЦеновыеГруппы", СтруктураПолей);
	ТаблицаПоЦеновымГруппам = РезультатЗапросаПоЦеновымГруппам.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Качество"                     , "Качество");
	СтруктураПолей.Вставить("СпецПредложение"              , "СпецПредложение");
	СтруктураПолей.Вставить("ХарактеристикаСпецПредложения", "ХарактеристикаСпецПредложения");
	//*** СтруктураПолей.Вставить("КлючСтроки"                   , "КлючСтроки");
	СтруктураПолей.Вставить("Количество"                   , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"             , "ЕдиницаИзмерения");
	РезультатЗапросаПоБонусам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Бонусы", СтруктураПолей);
	ТаблицаПоБонусам = РезультатЗапросаПоБонусам.Выгрузить();

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам Тогда
		ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы(СтруктураШД, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		ПроверитьЗаполнениеТабличнойЧастиБонусы(СтруктураШД, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураШД, Отказ, Заголовок);
	КонецЕсли;
	
	ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоТоварам, ТаблицаПоПолучателям, ТаблицаПоДнямНедели, ТаблицаПоЦеновымГруппам, ТаблицаПоБонусам, Отказ, Заголовок);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ВидОперации <> Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		ПроверяемыеРеквизиты.Добавить("Валюта");
	КонецЕсли;

	Если ДляВсейНоменклатуры И ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		ПроверяемыеРеквизиты.Добавить("Качество");
	КонецЕсли;

	Если ДатаНачала > ДатаОкончания И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
		ОбщегоНазначения.СообщитьОбОшибке("Дата начала действия скидки не может быть больше даты окончания действия скидки" , Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);
