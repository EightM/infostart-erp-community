&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	ВидОперацииНеБонусы=НЕ Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки");
	ВидОперацииНоменклатура=Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре");

	//условие общей видимости
	Видимость=ВидОперацииНоменклатура И Объект.ДляВсейНоменклатуры И Объект.ДляВсехПолучателей И Не Объект.ПоДнямНедели;

	Элементы.Товары.Видимость=Видимость;
	Элементы.ЦеновыеГруппы.Видимость=Видимость;
	Элементы.Бонусы.Видимость=Видимость;
	Элементы.ПолучателиСкидки.Видимость=Видимость;
	Элементы.ГруппаВремяПоДнямНедели.Видимость=Видимость;

	//условие детальной видимости
	Элементы.Товары.Видимость = ВидОперацииНоменклатура И Не Объект.ДляВсейНоменклатуры;
	Элементы.ЦеновыеГруппы.Видимость = (Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам"));
	Элементы.Бонусы.Видимость = Не ВидОперацииНеБонусы;
	Элементы.ПолучателиСкидки.Видимость = Не Объект.ДляВсехПолучателей;
	Элементы.ГруппаВремяПоДнямНедели.Видимость = Объект.ПоДнямНедели;

	Элементы.ДляВсейНоменклатуры.Видимость = ВидОперацииНоменклатура;

	Если ВидОперацииНоменклатура И Объект.ДляВсейНоменклатуры Тогда
		Элементы.Качество.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Качество.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Качество.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

	Элементы.Валюта.Видимость                  = ВидОперацииНеБонусы;
	Элементы.ТипСкидкиНаценки.Видимость        = ВидОперацииНеБонусы;
	Элементы.Условие.Видимость                 = ВидОперацииНеБонусы;
	Элементы.ПроцентСкидкиНаценки.Видимость    = ВидОперацииНеБонусы;
	Элементы.ОграничениеСкидкиНаценки.Видимость= ВидОперацииНеБонусы;
	Элементы.Качество.Видимость                = ВидОперацииНеБонусы;

	Если Не ВидОперацииНеБонусы Тогда
		Элементы.Валюта.АвтоВыборНезаполненного = Ложь;
		Элементы.Валюта.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.Валюта.АвтоВыборНезаполненного = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
			Элементы.Валюта.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;

	Элементы.ЗначениеУсловия.Видимость=Истина;
	Если Объект.Условие=ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.БезУсловий") Или Не ВидОперацииНеБонусы Тогда
		Элементы.ЗначениеУсловия.Видимость=Ложь;
	КонецЕсли;

	Если Объект.ВидСкидки = ПредопределенноеЗначение("Перечисление.ВидыСкидок.Оптовая") Тогда
		Элементы.ПолучателиСкидки.Заголовок = "Получатели скидки (Контрагенты)";
		Элементы.ПолучателиСкидкиКонтрагент.Видимость=Истина;
		Элементы.ПолучателиСкидкиПолучатель.Заголовок="Договор";
	Иначе
		Элементы.ПолучателиСкидки.Заголовок = "Получатели скидки (Склады)";
		Элементы.ПолучателиСкидкиКонтрагент.Видимость=Ложь;
		Элементы.ПолучателиСкидкиПолучатель.Заголовок="Склад";
	КонецЕсли;

	СтрВалюта=?(НЕ ЗначениеЗаполнено(Объект.Валюта), "<>", Объект.Валюта);
	Элементы.ТоварыОграничениеСкидкиНаценки.Заголовок="Огр. (" + СтрВалюта + ")";

	Элементы.ЗначениеУсловия.Заголовок="Значение условия";
	Если Объект.Условие=ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента") Тогда
		Элементы.ЗначениеУсловия.Заголовок=Элементы.ЗначениеУсловия.Заголовок+" ("+СтрВалюта+")";
	КонецЕсли;

	Элементы.ОграничениеСкидкиНаценки.Заголовок= "Ограничение (" + СтрВалюта + "):";
	Элементы.ЦеновыеГруппыОграничениеСкидкиНаценки.Заголовок = "Огр. (" + СтрВалюта + ")";

	//LEE сделать получение учетной политики через фирму....
	Если (Объект.Условие = ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте")
	 Или Объект.Условие = ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт"))
	   И УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = ПредопределенноеЗначение("Перечисление.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте") Тогда
		Элементы.ТоварыПроцентСкидкиНаценки.ТолькоПросмотр = Истина;
		Элементы.ЦеновыеГруппыПроцентСкидкиНаценки.ТолькоПросмотр = Истина;
		Элементы.ПроцентСкидкиНаценки.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ТоварыПроцентСкидкиНаценки.ТолькоПросмотр = Ложь;
		Элементы.ЦеновыеГруппыПроцентСкидкиНаценки.ТолькоПросмотр = Ложь;
		Элементы.ПроцентСкидкиНаценки.ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры."+стрЗаменить(Команда.Имя, "Операция_", ""));

	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре") Тогда
		Элементы.ТабличныеЧасти.ТекущаяСтраница=Элементы.СтраницаТовары;
	ИначеЕсли Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам") Тогда
		Элементы.ТабличныеЧасти.ТекущаяСтраница=Элементы.СтраницаЦеновыеГруппы;
	ИначеЕсли Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки") Тогда
		Элементы.ТабличныеЧасти.ТекущаяСтраница=Элементы.СтраницаБонусы;
	КонецЕсли;

	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			УстановитьВидимостьЭлементовФормы();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	//*** тпТовары_Заполнить(Параметр2.Команда);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");

	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		//УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ОбновитьПредставлениеТабличнойЧасти" Тогда
		//стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		//тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаСервере
Процедура тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		тпТовары_Заполнить(стрКоманда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередУдалением(Элемент, Отказ)
	МассивСтрок=Объект.СоставНабора.НайтиСтроки(Новый Структура("ID_Товары", Элемент.ТекущиеДанные.ID));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.СоставНабора.Удалить(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	//Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	//Если (СпособРасчета=Неопределено) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок")) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки")) Тогда
	//	СуммаСкидки=Сумма*ТекущиеДанные.ПроцентАвтоматическихСкидок / 100;
	//	Если НЕ СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки") Тогда
	//		СуммаСкидки=СуммаСкидки+(Сумма*ТекущиеДанные.ПроцентСкидкиНаценки / 100);
	//	КонецЕсли;
	//КонецЕсли;

	//ТекущиеДанные.Сумма=Сумма-СуммаСкидки;
	//ТекущиеДанные.СуммаБезСкидок=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
	//ТекущиеДанные.СуммаАкциза=ТекущиеДанные.СтавкаАкциза*ТекущиеДанные.Количество;
	//ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	//ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	
КонецПроцедуры

&НаСервере
Процедура тпТовары_Заполнить(стрКоманда)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	
	Если стрКоманда="" Тогда
		
	ИначеЕсли стрКоманда="" Тогда
		
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// 

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	УстановитьВидимостьЭлементовФормы();
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//тпТабличноеПоле_ОбновитьПредставление("Товары");
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//тпТабличноеПоле_ОбновитьПредставление("Товары");
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры