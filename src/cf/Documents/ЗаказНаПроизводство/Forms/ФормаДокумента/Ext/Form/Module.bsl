&НаКлиенте
Процедура ОбновитьНадписиНаКнопках()
	Элементы.ТоварыПоказатьСкрытьЛевуюЧасть.Заголовок=?(Элементы.ГруппаДетали.Видимость, "Скрыть", "Показать")+" детали";
	Элементы.ТоварыПоказатьСкрытьПравуюЧасть.Заголовок=?(Элементы.СтраницыРабот.Видимость, "Скрыть", "Показать")+" комплектующие\работы\оборудование\участки";
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="ПоказатьСкрытьЛевуюЧасть" Тогда
		Элементы.ГруппаДетали.Видимость=Не Элементы.ГруппаДетали.Видимость;
		ОбновитьНадписиНаКнопках();
		
	ИначеЕсли Команда.Имя="ПоказатьСкрытьПравуюЧасть" Тогда
		Элементы.СтраницыРабот.Видимость=Не Элементы.СтраницыРабот.Видимость;
		ОбновитьНадписиНаКнопках();
		
	ИначеЕсли Команда.Имя="ПоказатьСкрытьВерхнююЧасть" Тогда
		Элементы.Товары.Видимость=Не Элементы.Товары.Видимость;
		ОбновитьНадписиНаКнопках();
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_Скопировать(ID_Приемник, ID_Источник, стрВладелец)
	Если НЕ ЗначениеЗаполнено(тзРеквизитыТЧ) Тогда Возврат; КонецЕсли;
	тзРеквизиты=ПолучитьИзВременногоХранилища(тзРеквизитыТЧ);

	МассивСтрок=тзРеквизиты.НайтиСтроки(Новый Структура("Ключ", стрВладелец));
	Если МассивСтрок.Количество()=0 Тогда Возврат; КонецЕсли;

	СтрокаТаблицыЗначений=МассивСтрок[0].Значение.Найти(ID_Источник, "Ключ");
	Если СтрокаТаблицыЗначений=Неопределено Тогда Возврат; КонецЕсли;

	НоваяСтрока=МассивСтрок[0].Значение.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗначений);
	НоваяСтрока.Ключ=ID_Приемник;
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_УдалитьДопРеквизиты(ID_Источник, Объект)
	Если НЕ ЗначениеЗаполнено(тзРеквизитыТЧ) Тогда Возврат; КонецЕсли;
	тзРеквизиты=ПолучитьИзВременногоХранилища(тзРеквизитыТЧ);

	МассивСтрок=тзРеквизиты.НайтиСтроки(Новый Структура("Ключ", Объект));
	Если МассивСтрок.Количество()=0 Тогда Возврат; КонецЕсли;

	СтрокаТаблицыЗначений=МассивСтрок[0].Значение.Найти(ID_Источник, "Ключ");
	Если СтрокаТаблицыЗначений=Неопределено Тогда Возврат; КонецЕсли;

	МассивСтрок[0].Значение.Удалить(СтрокаТаблицыЗначений);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		
	ИначеЕсли Элемент.Имя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПокупателем,СКомиссионером"));

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);
		
	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	дзДетали_Обновить();
	Если НЕ дзДетали.ПолучитьЭлементы().Количество()=0 Тогда
		Элементы.дзДетали.Развернуть(дзДетали.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	КонецЕсли;
	тпКомплектующие_Отбор();
КонецПроцедуры

&НаКлиенте
&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму();
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
				тпТовары_РассчитатьСумму();
			КонецЕсли;
		КонецЕсли;		

	ИначеЕсли стрКолонка="Количество" Тогда
		тпТовары_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	ТекущиеДанные.Сумма=Сумма;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередУдалением(Элемент, Отказ)

	СтруктураТЧ=Новый Структура;
	СтруктураТЧ.Вставить("Детали", Объект.Детали);
	СтруктураТЧ.Вставить("Комплектующие", Объект.Комплектующие);
	СтруктураТЧ.Вставить("Работы", Объект.Работы);
	СтруктураТЧ.Вставить("Оборудование", Объект.Оборудование);
	СтруктураТЧ.Вставить("Участки", Объект.Участки);
	
	Для каждого СтрокаКоллекции Из СтруктураТЧ Цикл
		МассивСтрок=Объект[СтрокаКоллекции.Ключ].НайтиСтроки(Новый Структура("ID_Товары", Элементы.Товары.ТекущиеДанные.ID));
		Для Каждого СтрокаМассива из МассивСтрок Цикл
			Объект[СтрокаКоллекции.Ключ].Удалить(СтрокаМассива);
			тзРеквизитыТЧ_УдалитьДопРеквизиты(СтрокаМассива.ID, СтрокаКоллекции.Ключ);
		КонецЦикла;
	КонецЦикла; 
	дзДетали_Обновить();
	тзРеквизитыТЧ_УдалитьДопРеквизиты(Элементы.Товары.ТекущиеДанные.ID,"Товары");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Детали"

&НаКлиенте
Процедура кпДетали_ВыполнитьДействие(Команда)
	стрКоланда=СтрЗаменить(Команда.Имя, "кпДетали_", "");
	Если стрКоланда="СкопироватьСтроки" Тогда
		дзДетали_СкопироватьСтроки();
	ИначеЕсли стрКоланда="ВставитьСтроки" Тогда
		дзДетали_ВставитьСтроки();
	КонецЕсли; 
КонецПроцедуры

//////&НаСервере
//////Процедура __дзДетали_СкопироватьСтроки()
//////	СтруктураБуфера=ПараметрыСеанса.БуферОбмена.Получить();

//////	тзДанные=Новый ТаблицаЗначений;
//////	тзДанные.Колонки.Добавить("ИдентификаторСтроки");
//////	тзДанные.Колонки.Добавить("OLD_ID");
//////	тзДанные.Колонки.Добавить("OLD_ID_Родитель");
//////	тзДанные.Колонки.Добавить("ID");
//////	тзДанные.Колонки.Добавить("ID_Родитель");

//////	СтруктураТЧ=Новый Структура;
//////	Для каждого ИдентификаторСтроки Из Элементы.дзДетали.ВыделенныеСтроки Цикл
//////		ТекущиеДанные=дзДетали.НайтиПоИдентификатору(ИдентификаторСтроки);

//////		СтруктураСтроки=Новый Структура;
//////		Для каждого СтрокаКоллекции Из Элементы.дзДетали.ПодчиненныеЭлементы Цикл
//////			стрИмя=стрЗаменить(СтрокаКоллекции.Имя, "дзДетали", "");
//////			Если стрИмя="ID_Товары" Тогда Продолжить; КонецЕсли;
//////			СтруктураСтроки.Вставить(стрИмя, ТекущиеДанные[стрИмя]);
//////		КонецЦикла;
//////		НоваяСтрока=тзДанные.Добавить();
//////		НоваяСтрока.ИдентификаторСтроки=Строка(ИдентификаторСтроки);
//////		НоваяСтрока.OLD_ID=СтруктураСтроки.ID;
//////		НоваяСтрока.OLD_ID_Родитель=СтруктураСтроки.ID_Родитель;

//////		СтруктураТЧ.Вставить("ИдентификаторСтроки_"+СокрЛП(ИдентификаторСтроки), СтруктураСтроки);
//////	КонецЦикла; 

//////	//создаем новый уникальные иденификаторы (ID, ID_Родитель)
//////	Для каждого СтрокаКоллекции Из тзДанные Цикл
//////		СтрокаКоллекции.ID=Строка(Новый УникальныйИдентификатор);
//////		МассивСтрок=тзДанные.НайтиСтроки(Новый Структура("OLD_ID_Родитель", СтрокаКоллекции.OLD_ID));
//////		Для каждого СтрокаМассива Из МассивСтрок Цикл
//////			СтрокаМассива.ID_Родитель=СтрокаКоллекции.ID;
//////		КонецЦикла;
//////	КонецЦикла;
//////	Для каждого СтрокаКоллекции Из тзДанные Цикл
//////		ДанныеСтруктуры=СтруктураТЧ["ИдентификаторСтроки_"+СтрокаКоллекции.ИдентификаторСтроки];
//////		ДанныеСтруктуры.ID=СтрокаКоллекции.ID;
//////		ДанныеСтруктуры.ID_Родитель=СтрокаКоллекции.ID_Родитель;
//////	КонецЦикла;

//////	СтруктураБуфера.Вставить("дзДетали", СтруктураТЧ);
//////	ПараметрыСеанса.БуферОбмена=Новый ХранилищеЗначения(СтруктураБуфера);	
//////КонецПроцедуры

&НаСервере
Процедура дзДетали_СкопироватьСтроки()
	мдОбъект=Объект.Ссылка.Метаданные();

	СтруктураБуфера=ПараметрыСеанса.БуферОбмена.Получить();
	
	//Детали
	тзДанные=Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("ИдентификаторСтроки");
	тзДанные.Колонки.Добавить("ID");
	тзДанные.Колонки.Добавить("ID_Товары");
	тзДанные.Колонки.Добавить("ID_Родитель");
	Для каждого СтрокаКоллекции Из Элементы.дзДетали.ПодчиненныеЭлементы Цикл
		стрИмя=стрЗаменить(СтрокаКоллекции.Имя, "дзДетали", "");
		//Для каждого мдРеквизит Из мдОбъект.ТабличныеЧасти["Детали"].Реквизиты Цикл
		тзДанные.Колонки.Добавить(стрИмя);
	КонецЦикла;

	СтруктураТЧ=Новый Структура;
	СтруктураТЧ.Вставить("Работы", Новый ТаблицаЗначений);
	СтруктураТЧ.Вставить("Комплектующие", Новый ТаблицаЗначений);
	СтруктураТЧ.Вставить("Оборудование", Новый ТаблицаЗначений);
	СтруктураТЧ.Вставить("Участки", Новый ТаблицаЗначений);

	Для каждого СтрокаКоллекции Из СтруктураТЧ Цикл
		Для каждого мдРеквизит Из мдОбъект.ТабличныеЧасти[СтрокаКоллекции.Ключ].Реквизиты Цикл
			Если мдРеквизит.Имя="ID_Товары" Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции.Значение.Колонки.Добавить(мдРеквизит.Имя);
		КонецЦикла;	
	КонецЦикла; 
	
	////////Работы
	//////тзРаботы=Новый ТаблицаЗначений;
	//////Для каждого мдРеквизит Из мдОбъект.ТабличныеЧасти.Работы.Реквизиты Цикл
	//////	Если мдРеквизит.Имя="ID_Товары" Тогда Продолжить; КонецЕсли;
	//////	тзРаботы.Колонки.Добавить(мдРеквизит.Имя);
	//////КонецЦикла;
	//////
	////////Комплектующие
	//////тзКомплектующие=Новый ТаблицаЗначений;
	//////Для каждого мдРеквизит Из мдОбъект.ТабличныеЧасти.Комплектующие.Реквизиты Цикл
	//////	Если мдРеквизит.Имя="ID_Товары" Тогда Продолжить; КонецЕсли;
	//////	тзКомплектующие.Колонки.Добавить(мдРеквизит.Имя);
	//////КонецЦикла;

	////////Оборудование
	//////тзОборудование=Новый ТаблицаЗначений;
	//////Для каждого мдРеквизит Из мдОбъект.ТабличныеЧасти.Оборудование.Реквизиты Цикл
	//////	Если мдРеквизит.Имя="ID_Товары" Тогда Продолжить; КонецЕсли;
	//////	тзОборудование.Колонки.Добавить(мдРеквизит.Имя);
	//////КонецЦикла;
	//////
	////////Участки
	//////тзУчастки=Новый ТаблицаЗначений;
	//////Для каждого мдРеквизит Из мдОбъект.ТабличныеЧасти.Участки.Реквизиты Цикл
	//////	Если мдРеквизит.Имя="ID_Товары" Тогда Продолжить; КонецЕсли;
	//////	тзУчастки.Колонки.Добавить(мдРеквизит.Имя);
	//////КонецЦикла;

	Для каждого ИдентификаторСтроки Из Элементы.дзДетали.ВыделенныеСтроки Цикл
		//****** Если ИдентификаторСтроки=0 Тогда Продолжить;КонецЕсли; 
		ТекущиеДанные=дзДетали.НайтиПоИдентификатору(ИдентификаторСтроки);

		//Детали
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		НоваяСтрока.ИдентификаторСтроки=ИдентификаторСтроки;

		//Работы,Комплектующие,Оборудование,Участки
		Для каждого СтрокаКоллекции Из СтруктураТЧ Цикл
			МассивСтрок=Объект[СтрокаКоллекции.Ключ].НайтиСтроки(Новый Структура("ID_Детали", ТекущиеДанные.ID));
			Для каждого СтрокаМассива Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(СтрокаКоллекции.Значение.Добавить(), СтрокаМассива);
			КонецЦикла;
		КонецЦикла;
		
		////Работы
		//МассивСтрок=Объект.Работы.НайтиСтроки(Новый Структура("ID_Детали", НоваяСтрока.ID));
		//Для каждого СтрокаМассива Из МассивСтрок Цикл
		//	ЗаполнитьЗначенияСвойств(тзРаботы.Добавить(), СтрокаМассива);
		//КонецЦикла;
		//
		////Комплектующие
		//МассивСтрок=Объект.Комплектующие.НайтиСтроки(Новый Структура("ID_Детали", НоваяСтрока.ID));
		//Для каждого СтрокаМассива Из МассивСтрок Цикл
		//	ЗаполнитьЗначенияСвойств(тзКомплектующие.Добавить(), СтрокаМассива);
		//КонецЦикла;
		//
		////Оборудование
		//МассивСтрок=Объект.Оборудование.НайтиСтроки(Новый Структура("ID_Детали", НоваяСтрока.ID));
		//Для каждого СтрокаМассива Из МассивСтрок Цикл
		//	ЗаполнитьЗначенияСвойств(тзОборудование.Добавить(), СтрокаМассива);
		//КонецЦикла;
		//
		////Участки
		//МассивСтрок=Объект.Участки.НайтиСтроки(Новый Структура("ID_Детали", НоваяСтрока.ID));
		//Для каждого СтрокаМассива Из МассивСтрок Цикл
		//	ЗаполнитьЗначенияСвойств(тзУчастки.Добавить(), СтрокаМассива);
		//КонецЦикла;
	КонецЦикла; 
	тзДанные.Колонки.ID.Имя="OLD_ID";
	тзДанные.Колонки.ID_Родитель.Имя="OLD_ID_Родитель";
	тзДанные.Колонки.Добавить("ID");
	тзДанные.Колонки.Добавить("ID_Родитель");

	//создаем новый уникальные иденификаторы (ID, ID_Родитель)
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.ID=Строка(Новый УникальныйИдентификатор);
		МассивСтрок=тзДанные.НайтиСтроки(Новый Структура("OLD_ID_Родитель", СтрокаКоллекции.OLD_ID));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива.ID_Родитель=СтрокаКоллекции.ID;
		КонецЦикла;

		//Работы,Комплектующие,Оборудование,Участки
		Для каждого СтрокаСтруктуры Из СтруктураТЧ Цикл
			МассивСтрок=СтрокаСтруктуры.Значение.НайтиСтроки(Новый Структура("ID_Детали", СтрокаКоллекции.OLD_ID));
			Для каждого СтрокаМассива Из МассивСтрок Цикл
				СтрокаМассива.ID=Строка(Новый УникальныйИдентификатор);
				СтрокаМассива.ID_Детали=СтрокаКоллекции.ID;
			КонецЦикла;
		КонецЦикла;

		//////Работы
		////МассивСтрок=тзРаботы.НайтиСтроки(Новый Структура("ID_Детали", СтрокаКоллекции.OLD_ID));
		////Для каждого СтрокаМассива Из МассивСтрок Цикл
		////	СтрокаМассива.ID=Строка(Новый УникальныйИдентификатор);
		////	СтрокаМассива.ID_Детали=СтрокаКоллекции.ID;
		////КонецЦикла;

		//////Комплектующие
		////МассивСтрок=тзКомплектующие.НайтиСтроки(Новый Структура("ID_Детали", СтрокаКоллекции.OLD_ID));
		////Для каждого СтрокаМассива Из МассивСтрок Цикл
		////	СтрокаМассива.ID=Строка(Новый УникальныйИдентификатор);
		////	СтрокаМассива.ID_Детали=СтрокаКоллекции.ID;
		////КонецЦикла;

		//////Оборудование
		////МассивСтрок=тзОборудование.НайтиСтроки(Новый Структура("ID_Детали", СтрокаКоллекции.OLD_ID));
		////Для каждого СтрокаМассива Из МассивСтрок Цикл
		////	СтрокаМассива.ID=Строка(Новый УникальныйИдентификатор);
		////	СтрокаМассива.ID_Детали=СтрокаКоллекции.ID;
		////КонецЦикла;

		//////Участки
		////МассивСтрок=тзУчастки.НайтиСтроки(Новый Структура("ID_Детали", СтрокаКоллекции.OLD_ID));
		////Для каждого СтрокаМассива Из МассивСтрок Цикл
		////	СтрокаМассива.ID=Строка(Новый УникальныйИдентификатор);
		////	СтрокаМассива.ID_Детали=СтрокаКоллекции.ID;
		////КонецЦикла;
	КонецЦикла;
	тзДанные.Колонки.Удалить("OLD_ID");
	тзДанные.Колонки.Удалить("OLD_ID_Родитель");

	СтруктураБуфера.Вставить("дзДетали", тзДанные);
	СтруктураБуфера.Вставить("дзДетали_Работы", СтруктураТЧ.Работы);
	СтруктураБуфера.Вставить("дзДетали_Комплектующие", СтруктураТЧ.Комплектующие);
	СтруктураБуфера.Вставить("дзДетали_Оборудование", СтруктураТЧ.Оборудование);
	СтруктураБуфера.Вставить("дзДетали_Участки", СтруктураТЧ.Участки);
	ПараметрыСеанса.БуферОбмена=Новый ХранилищеЗначения(СтруктураБуфера);
КонецПроцедуры

&НаСервере
Процедура дзДетали_ВставитьСтроки()
	Если Элементы.Товары.ТекущаяСтрока=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Спозиционируйтесь на изделии!");
		Возврат;
	КонецЕсли;
	ID_Товары=Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока).ID;

	СтруктураБуфера=ПараметрыСеанса.БуферОбмена.Получить();
	Если НЕ СтруктураБуфера.Свойство("дзДетали") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В буфере нет скопированных строк!");
		Возврат;
	КонецЕсли;

	Если Элементы.дзДетали.ТекущаяСтрока=Неопределено Тогда
		ВеткаДерева=дзДетали.ПолучитьЭлементы()[0];
	Иначе
		ВеткаДерева=дзДетали.НайтиПоИдентификатору(Элементы.дзДетали.ТекущаяСтрока);
	КонецЕсли;	
	
	СтруктураБуфера.дзДетали.Сортировать("ИдентификаторСтроки Возр");
	Для каждого СтрокаКоллекции Из СтруктураБуфера.дзДетали Цикл
		ВеткаРодитель=ВеткаДерева;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ID_Родитель) Тогда
			дзДетали_НайтиРодителяПоID(ВеткаДерева, СтрокаКоллекции.ID_Родитель, ВеткаРодитель);
		КонецЕсли;
		НоваяСтрока=ВеткаРодитель.ПолучитьЭлементы().Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.ID_Товары=ID_Товары;
	КонецЦикла;
	
	МассивТЧ=Новый Массив;
	МассивТЧ.Добавить("Работы");
	МассивТЧ.Добавить("Комплектующие");
	МассивТЧ.Добавить("Оборудование");
	МассивТЧ.Добавить("Участки");
	Для каждого ИмяТабличнойЧасти Из МассивТЧ Цикл
		Если СтруктураБуфера.Свойство("дзДетали_"+ИмяТабличнойЧасти) Тогда
			Для каждого СтрокаКоллекции Из СтруктураБуфера["дзДетали_"+ИмяТабличнойЧасти] Цикл
				НоваяСтрока=Объект[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.ID_Товары=ID_Товары;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура дзДетали_НайтиРодителяПоID(ОбластьПоиска, ID_Родитель, Результат)
	ЭлементыВетки=ОбластьПоиска.ПолучитьЭлементы();
	Для каждого СтрокаКоллекции Из ЭлементыВетки Цикл
		Если СтрокаКоллекции.ID=ID_Родитель Тогда
			Результат=СтрокаКоллекции;
		КонецЕсли;
		дзДетали_НайтиРодителяПоID(СтрокаКоллекции, ID_Родитель, Результат);
	КонецЦикла;
КонецПроцедуры
 
//&НаСервере
//Процедура ___дзДетали_ВставитьСтроки()
//	Если Элементы.Товары.ТекущаяСтрока=Неопределено Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Спозиционируйтесь на изделии!");
//		Возврат;
//	КонецЕсли;
//	ID_Товары=Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока).ID;

//	СтруктураБуфера=ПараметрыСеанса.БуферОбмена.Получить();
//	Если НЕ СтруктураБуфера.Свойство("дзДетали") Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В буфере нет скопированных строк!");
//		Возврат; 
//	КонецЕсли;

//	Если Элементы.дзДетали.ТекущаяСтрока=Неопределено Тогда
//		ВеткаДерева=дзДетали.ПолучитьЭлементы()[0]
//	Иначе
//		ВеткаДерева=дзДетали.НайтиПоИдентификатору(Элементы.дзДетали.ТекущаяСтрока);
//	КонецЕсли;	
//	
//	Для каждого СтруктураСтроки Из СтруктураБуфера.дзДетали Цикл
//		СтрокаКоллекции=СтруктураСтроки.Значение;
//		Если ЗначениеЗаполнено(СтрокаКоллекции.ID_Родитель) Тогда
//			дзДетали_НайтиРодителяПоID(ВеткаДерева, СтрокаКоллекции.ID_Родитель, ВеткаРодитель);
//		Иначе
//			ВеткаРодитель=ВеткаДерева;
//		КонецЕсли;
//		НоваяСтрока=ВеткаРодитель.ПолучитьЭлементы().Добавить();		
//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
//		НоваяСтрока.ID_Товары=ID_Товары;
//	КонецЦикла; 
//КонецПроцедуры

&НаСервере
Процедура дзДетали_Инициализация()
	//Создаем доп.реквизиты
	ДобавляемыеРеквизиты=Новый Массив;

	тзРеквизиты=МетаконфигураторСервер.ТаблицаДополнительныхРеквизитовОбъекта("Документ_ЗаказНаПроизводство_Детали");
	Для Каждого СтрокаКоллекции Из тзРеквизиты Цикл
		Реквизит=Новый РеквизитФормы(МетаконфигураторСервер.АтрибутВСтроку(СтрокаКоллекции.Реквизит, "Детали"), СтрокаКоллекции.ТипЗначения, "дзДетали", СокрЛП(СтрокаКоллекции.Реквизит)); 
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЦикла;

	Если НЕ ДобавляемыеРеквизиты.Количество()=0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Для каждого СтрокаКоллекции Из ДобавляемыеРеквизиты Цикл
			Элемент=Элементы.Добавить(СтрокаКоллекции.Имя, Тип("ПолеФормы"), Элементы["дзДетали"]);
			Элемент.ПутьКДанным="дзДетали."+СтрокаКоллекции.Имя;
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			//Элемент.УстановитьДействие("ПриИзменении", "тзРеквизитыТЧ_ПриИзменении_Клиент");
		КонецЦикла;
	КонецЕсли;
	
	дзДетали_Обновить();
КонецПроцедуры
 
&НаСервере
Процедура дзДетали_Обновить()
	Если Элементы.Товары.ТекущаяСтрока=Неопределено Тогда Возврат; КонецЕсли;
	
	дзБуфер=РеквизитФормыВЗначение("дзДетали");
	дзБуфер.Строки.Очистить();

	ВеткаОсновная=дзБуфер.Строки.Добавить();

	СтрокаТабличнойЧасти=Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ID=?(СтрокаТабличнойЧасти=Неопределено, "", СтрокаТабличнойЧасти.ID);

	МассивСтрок=Объект.Детали.НайтиСтроки(Новый Структура("ID_Товары", ID));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Ветка=ВеткаОсновная;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ID_Родитель) Тогда
			Ветка=дзБуфер.Строки.Найти(СтрокаКоллекции.ID_Родитель, "ID", Истина);
			Если Ветка=Неопределено Тогда
				Ветка=ВеткаОсновная.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Ветка, СтрокаКоллекции); //***
				Ветка.ID=СтрокаКоллекции.ID_Родитель;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока=Ветка.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);

		//Доп.реквизиты
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("Владелец", Справочники.ИдентификаторыОбъектовМетаданных.Документ_ЗаказНаПроизводство_Детали);
		СтруктураПоиска.Вставить("Ключ", НоваяСтрока.ID);
		МассивСтрок2=Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаКоллекции Из МассивСтрок2 Цикл
			НоваяСтрока[МетаконфигураторСервер.АтрибутВСтроку(СтрокаКоллекции.Реквизит, "Детали")]=СтрокаКоллекции.Значение;
		КонецЦикла;
	КонецЦикла;

	ЗначениеВРеквизитФормы(дзБуфер, "дзДетали");	
	
	МассивЭлементов=дзДетали.ПолучитьЭлементы();
	Если НЕ МассивЭлементов.Количество()=0 Тогда
		МассивЭлементов[0].ID="ВсеДетали";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_ПередНачаломИзменения(Элемент, Отказ)
	Отказ=Элемент.ТекущиеДанные.ID="ВсеДетали";
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	дзДетали_ПриОкончанииРедактирования_Сервер();
КонецПроцедуры                     

&НаСервере
Процедура дзДетали_ПриОкончанииРедактирования_Сервер()
	//////////ТекущиеДанные=дзДетали.НайтиПоИдентификатору(Элементы.дзДетали.ТекущаяСтрока);

	////////////осн.реквизиты
	//////////МассивСтрок=Объект.Детали.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
	//////////СтрокаТабличногоПоля=?(МассивСтрок.Количество()=0, Объект.Детали.Добавить(), МассивСтрок[0]);
	//////////ЗаполнитьЗначенияСвойств(СтрокаТабличногоПоля, ТекущиеДанные);

	////////////доп.реквизиты
	//////////Если ЗначениеЗаполнено(тзРеквизитыТЧ) Тогда
	//////////	тзРеквизиты=ПолучитьИзВременногоХранилища(тзРеквизитыТЧ);
	//////////	
	//////////	МассивСтрок=тзРеквизиты.НайтиСтроки(Новый Структура("Ключ", "Детали"));
	//////////	Если МассивСтрок.Количество()=0 Тогда Возврат; КонецЕсли;
	//////////	
	//////////	тзДанные=МассивСтрок[0].Значение;		
	//////////	
	//////////	тзРеквизитыКолонок=МетаконфигураторСервер.ТаблицаДополнительныхРеквизитовОбъекта("Документ_ЗаказНаПроизводство_Детали");
	//////////	Для каждого СтрокаКоллекции Из тзРеквизитыКолонок Цикл
	//////////		МассивСтрок=тзДанные.НайтиСтроки(Новый Структура("Ключ", ТекущиеДанные.ID));
	//////////		Если МассивСтрок.Количество()=0 Тогда
	//////////			стрИмя=МетаконфигураторСервер.АтрибутВСтроку(СтрокаКоллекции.Реквизит, "Детали");
	//////////			СтрокаТабличнойЧасти=тзДанные.Добавить();
	//////////			СтрокаТабличнойЧасти.Ключ=ТекущиеДанные.ID;
	//////////			СтрокаТабличнойЧасти[стрИмя]=ТекущиеДанные[стрИмя];
	//////////		Иначе
	//////////			ЗаполнитьЗначенияСвойств(МассивСтрок[0], ТекущиеДанные);
	//////////		КонецЕсли;
	//////////	КонецЦикла;
	//////////КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура дзДетали_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
		Если Не Элемент.ТекущиеДанные.ПолучитьРодителя()=Неопределено Тогда
			Элемент.ТекущиеДанные.ID_Родитель=Элемент.ТекущиеДанные.ПолучитьРодителя().ID;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_ПередУдалением(Элемент, Отказ)
	Для Каждого СтрокаМассива Из Элемент.ВыделенныеСтроки Цикл
		дзДетали_УдалитьВетку(дзДетали.НайтиПоИдентификатору(СтрокаМассива));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_ПослеУдаления(Элемент)
	МассивЭлементов=дзДетали.ПолучитьЭлементы();
	Если МассивЭлементов.Количество()=0 Тогда
		НоваяСтрока=дзДетали.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ID="ВсеДетали";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_ОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	//***Строка=Элементы.дзДетали.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтрокаПеретаскивания=Элементы.дзДетали.ТекущиеДанные;
	Если Строка=Неопределено Тогда
		СтрокаПеретаскивания.ID_Родитель="";
	Иначе	
		ВладелецСтроки=дзДетали.НайтиПоИдентификатору(Строка);
		СтрокаПеретаскивания.ID_Родитель=ВладелецСтроки.ID;
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_УдалитьВетку(ТекущиеДанные, ВеткаДерева=Неопределено)
	Если ВеткаДерева=Неопределено Тогда
		ВеткаДерева=ТекущиеДанные.ПолучитьЭлементы();
	КонецЕсли;

	СтруктураТЧ=Новый Структура;
	СтруктураТЧ.Вставить("Детали", Объект.Детали);
	СтруктураТЧ.Вставить("Комплектующие", Объект.Комплектующие);
	СтруктураТЧ.Вставить("Работы", Объект.Работы);
	СтруктураТЧ.Вставить("Оборудование", Объект.Оборудование);
	СтруктураТЧ.Вставить("Участки", Объект.Участки);
	
	//Удаляем значения осн.реквизитов
	//МассивСтрок=Объект.Детали.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
	//Для Каждого СтрокаМассива из МассивСтрок Цикл
	//	Объект.Детали.Удалить(СтрокаМассива);
	//КонецЦикла;
	
	Для каждого СтрокаКоллекции Из СтруктураТЧ Цикл
		МассивСтрок=Объект[СтрокаКоллекции.Ключ].НайтиСтроки(Новый Структура(?(СтрокаКоллекции.Ключ="Детали", "ID", "ID_Детали"), ТекущиеДанные.ID));
		Для Каждого СтрокаМассива из МассивСтрок Цикл
			Объект[СтрокаКоллекции.Ключ].Удалить(СтрокаМассива);
			тзРеквизитыТЧ_УдалитьДопРеквизиты(СтрокаМассива.ID, СтрокаКоллекции.Ключ);
		КонецЦикла;
	КонецЦикла; 

	//Удаляем значения доп.реквизитов
	//	тзРеквизитыТЧ_УдалитьДопРеквизиты(ТекущиеДанные.ID, "Детали");

	Если НЕ ВеткаДерева.Количество()=0 Тогда
		Для каждого СтрокаКоллекции Из ВеткаДерева Цикл
			дзДетали_УдалитьВетку(СтрокаКоллекции, СтрокаКоллекции.ПолучитьЭлементы());
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////&НаКлиенте
////////Процедура дзДетали_СкопироватьВетку(ТекущиеДанные, ID_Родитель="", ВеткаДерева=Неопределено, СкопироватьВсе=Ложь)
////////	Если ВеткаДерева=Неопределено Тогда
////////		ВеткаДерева=ТекущиеДанные.ПолучитьРодителя();
////////		Если ВеткаДерева=Неопределено Тогда
////////			ВеткаДерева=дзДетали.ПолучитьЭлементы();
////////		Иначе
////////			ВеткаДерева=ВеткаДерева.ПолучитьЭлементы();
////////		КонецЕсли;
////////	КонецЕсли;

////////	НоваяСтрока=ВеткаДерева.Добавить();
////////	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
////////	НоваяСтрока.ID=СокрЛП(Новый УникальныйИдентификатор);
////////	НоваяСтрока.ID_Родитель=ID_Родитель;

////////	//осн.реквизиты
////////	ЗаполнитьЗначенияСвойств(Объект.Детали.Добавить(), НоваяСтрока);
////////	
////////	//доп.реквизиты
////////	тзРеквизитыТЧ_Скопировать(НоваяСтрока.ID, ТекущиеДанные.ID, "Детали");

////////	Если СкопироватьВсе Тогда
////////		//Комплектующие
////////		МассивСтрок=Объект.Комплектующие.НайтиСтроки(Новый Структура("ID_Владелец", ТекущиеДанные.ID_Владелец));
////////		Для каждого СтрокаМассива Из МассивСтрок Цикл
////////			//осн.реквизиты
////////			НоваяСтрока1=Объект.Комплектующие.Добавить();
////////			ЗаполнитьЗначенияСвойств(НоваяСтрока1, СтрокаМассива);
////////			НоваяСтрока1.ID=СокрЛП(Новый УникальныйИдентификатор);
////////			НоваяСтрока1.ID_Родитель=ID_Родитель;
////////			//доп.реквизиты
////////			тзРеквизитыТЧ_Скопировать(НоваяСтрока1.ID, СтрокаМассива.ID, "Комплектующие");
////////		КонецЦикла; 
////////	КонецЕсли;
////////	
////////	//Рекурсия
////////	ЭлементыВетки=ТекущиеДанные.ПолучитьЭлементы();
////////	Если НЕ ЭлементыВетки.Количество()=0 Тогда
////////		НоваяВеткаДерева=НоваяСтрока.ПолучитьЭлементы();
////////		Для каждого СтрокаКоллекции Из ЭлементыВетки Цикл
////////			дзДетали_СкопироватьВетку(СтрокаКоллекции, НоваяСтрока.ID, НоваяВеткаДерева, СкопироватьВсе=Ложь);
////////		КонецЦикла;
////////	КонецЕсли;
////////КонецПроцедуры

//&НаСервере
//Процедура дзДетали_УдалитьДопРеквизиты(ID_Источник)
//	Если НЕ ЗначениеЗаполнено(тзРеквизитыТЧ) Тогда Возврат; КонецЕсли;
//	тзРеквизиты=ПолучитьИзВременногоХранилища(тзРеквизитыТЧ);

//	МассивСтрок=тзРеквизиты.НайтиСтроки(Новый Структура("Ключ", "Детали"));
//	Если МассивСтрок.Количество()=0 Тогда Возврат; КонецЕсли;

//	СтрокаТаблицыЗначений=МассивСтрок[0].Значение.Найти(ID_Источник, "Ключ");
//	Если СтрокаТаблицыЗначений=Неопределено Тогда Возврат; КонецЕсли;

//	МассивСтрок[0].Значение.Удалить(СтрокаТаблицыЗначений);
//КонецПроцедуры
 
&НаКлиенте
Процедура дзДетали_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.Товары.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(, "Укажите изделие деталей", 20, "Внимание");
		Отказ=Истина; Возврат;
	КонецЕсли;
	
	////////Если Копирование Тогда
	////////	дзДетали_СкопироватьВетку(Элемент.ТекущиеДанные);
	////////	Отказ=Истина; Возврат;
	////////КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.дзДетали.ТекущиеДанные.ID=СокрЛП(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_ПриАктивизацииСтроки(Элемент)
	тпКомплектующие_Отбор(); 
	тпРаботы_Отбор(); 
	//тпУчастки_Отбор();
КонецПроцедуры

&НаКлиенте
Процедура дзДетали_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "дзДетали", "");
	ТекущиеДанные=Элементы.дзДетали.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура дзДетали_Записать(ВеткаДерева, тчДетали, тзДанные, тзРеквизитыКолонок)
	Для каждого СтрокаКоллекции Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Если НЕ СтрокаКоллекции.ID="ВсеДетали" Тогда
			ЗаполнитьЗначенияСвойств(тчДетали.Добавить(), СтрокаКоллекции);

			//доп.реквизиты
			Если НЕ тзДанные=Неопределено Тогда
				Для каждого СтрокаКоллекции2 Из тзРеквизитыКолонок Цикл
					МассивСтрок=тзДанные.НайтиСтроки(Новый Структура("Ключ", СтрокаКоллекции.ID));
					Если МассивСтрок.Количество()=0 Тогда
						стрИмя=МетаконфигураторСервер.АтрибутВСтроку(СтрокаКоллекции2.Реквизит, "Детали");
						СтрокаТабличнойЧасти=тзДанные.Добавить();
						СтрокаТабличнойЧасти.Ключ=СтрокаКоллекции.ID;
						СтрокаТабличнойЧасти[стрИмя]=СтрокаКоллекции[стрИмя];
					Иначе
						ЗаполнитьЗначенияСвойств(МассивСтрок[0], СтрокаКоллекции);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
		дзДетали_Записать(СтрокаКоллекции, тчДетали, тзДанные, тзРеквизитыКолонок);
	КонецЦикла;
КонецПроцедуры

////////&НаКлиенте
////////Процедура ДобавлениеНовойСтроки(Команда)
////////	Элементы.дзДетали.ТекущаяСтрока=дзДетали.ПолучитьЭлементы().Добавить().ПолучитьИдентификатор();
////////	Элементы.дзДетали.ИзменитьСтроку();
////////	
////////	Элементы.дзДетали.ТекущиеДанные.ID=СокрЛП(Новый УникальныйИдентификатор);
////////	Элементы.дзДетали.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
////////КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий комплектующих

&НаКлиенте
Процедура тпКомплектующие_Отбор()
	Если НЕ спВладельцы="" Тогда
		стрID="";
		Если спВладельцы="Товары" Тогда
			Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.Товары.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Комплектующие.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Товары",стрID);
		ИначеЕсли спВладельцы="Деталь" Тогда
			Если НЕ Элементы.дзДетали.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Комплектующие.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Детали",стрID);
		КонецЕсли;
	Иначе
		Элементы.Комплектующие.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
		Если НоваяСтрока Тогда
			Элементы.Комплектующие.ТекущиеДанные.ID=СокрЛП(Новый УникальныйИдентификатор);
			Элементы.Комплектующие.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
			Если НЕ Элементы.дзДетали.ТекущиеДанные = Неопределено Тогда
				Элементы.Комплектующие.ТекущиеДанные.ID_Детали=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Комплектующие", "");
	ТекущиеДанные=Элементы.Комплектующие.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		тпКомплектующие_РассчитатьСумму();

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
			тпКомплектующие_РассчитатьСумму();
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
				тпКомплектующие_РассчитатьСумму();
			КонецЕсли;
		КонецЕсли;		

	ИначеЕсли стрКолонка="Количество" Тогда
		тпКомплектующие_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпКомплектующие_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тпКомплектующие_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Комплектующие.ТекущиеДанные;
	КонецЕсли;

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	ТекущиеДанные.Сумма=Сумма;
КонецПроцедуры

&НаКлиенте
Процедура кпКомплектующие_ВыполнитьДействие(Команда)
	стрКоманда=стрЗаменить(Команда.Имя, "кпКомплектующие_", "");
	Если стрКоманда="ЗаполнитьСпецификацию" Тогда
		СтрокаТабличнойЧасти=Элементы.Товары.ТекущиеДанные;
		Если СтрокаТабличнойЧасти=Неопределено Тогда Возврат; КонецЕсли;

		Ответ=Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ=КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
		
		МассивСтрок=Объект.Комплектующие.НайтиСтроки(Новый Структура("ID_Товары", СтрокаТабличнойЧасти.ID));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Объект.Комплектующие.Удалить(СтрокаМассива);
		КонецЦикла;

		МассивСтрок=Объект.Комплектующие.НайтиСтроки(Новый Структура("ID_Владелец", СтрокаТабличнойЧасти.ID));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Объект.Комплектующие.Удалить(СтрокаМассива);
		КонецЦикла;

		тпКомплектующие_ЗаполнитьПоСпецификации(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Количество, СтрокаТабличнойЧасти.Склад, СтрокаТабличнойЧасти.Спецификация, СтрокаТабличнойЧасти.ID);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция тпКомплектующие_ЗаполнитьПоСпецификации(Изделие, ХарактеристикаИзделия, Знач КоличествоИзделия, текСклад, Знач ВариантСпецификации, ID_Владелец)
	Если НЕ ЗначениеЗаполнено(ВариантСпецификации) Тогда
		ВариантСпецификации=Документы.Спецификация.ПолучитьВариантСпецификации(Изделие.ОсновнаяСпецификация, Изделие);
		Если Не ЗначениеЗаполнено(ВариантСпецификации) Тогда Возврат Ложь; КонецЕсли;	
	КонецЕсли; 
		
	ДокСпецификация=Документы.Спецификация.ПолучитьСпецификациюНаДату(ВариантСпецификации, Неопределено, Объект.Дата);
	Если Не ЗначениеЗаполнено(ДокСпецификация) Тогда Возврат Ложь; КонецЕсли;

	//Коплектующие
	тзКомплектующие=ДокСпецификация.Комплектующие.Выгрузить();
	Для каждого СтрокаКоллекции Из тзКомплектующие Цикл
		Если тпКомплектующие_ЗаполнитьПоСпецификации(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, СтрокаКоллекции.Количество*КоличествоИзделия, текСклад, СтрокаКоллекции.Номенклатура.ОсновнаяСпецификация, ID_Владелец) Тогда
			Продолжить;
		КонецЕсли;		
		НоваяСтрока=Объект.Комплектующие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Коэффициент=НоваяСтрока.ЕдиницаИзмерения.Коэффициент;

		РасчитанноеКоличество=СтрокаКоллекции.Количество*КоличествоИзделия/?(СтрокаКоллекции.НормаРасхода=0, 1, СтрокаКоллекции.НормаРасхода);
		НоваяСтрока.Количество = Окр(РасчитанноеКоличество, СтрокаКоллекции.ОкруглятьДоКоличествоЗнаков);
		Если СтрокаКоллекции.ВариантОкругления=1 Тогда
			РасчетВМеньшуюСторону=(Цел(((РасчитанноеКоличество*Pow(10,СтрокаКоллекции.ОкруглятьДоКоличествоЗнаков))-1)))/Pow(10,СтрокаКоллекции.ОкруглятьДоКоличествоЗнаков);
			НоваяСтрока.Количество=РасчетВМеньшуюСторону;
		ИначеЕсли СтрокаКоллекции.ВариантОкругления=2 Тогда 	
			РасчетВБольшуюСторону=(Цел(((РасчитанноеКоличество*Pow(10,СтрокаКоллекции.ОкруглятьДоКоличествоЗнаков))+1)))/Pow(10,СтрокаКоллекции.ОкруглятьДоКоличествоЗнаков);
			НоваяСтрока.Количество=РасчетВБольшуюСторону;
		КонецЕсли; 
		
		НоваяСтрока.Склад=?(ЗначениеЗаполнено(текСклад), текСклад, Объект.Склад);
		Если Не Объект.ТипЦен.Пустая() Тогда
			НоваяСтрока.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.ХарактеристикаНоменклатуры, Объект.ТипЦен, Объект.Дата);
		Иначе
			НоваяСтрока.Цена=ЦенообразованиеСервер.УчетнаяЦенаТовара(Объект.Организация, НоваяСтрока.Номенклатура, НоваяСтрока.ХарактеристикаНоменклатуры, НоваяСтрока.Склад, Справочники.СерииНоменклатуры.ПустаяСсылка(), Объект.Дата, "УУ");
		КонецЕсли;
		НоваяСтрока.Сумма=НоваяСтрока.Количество*НоваяСтрока.Цена;
		НоваяСтрока.ID_Товары=ID_Владелец;
		НоваяСтрока.ID_Владелец=ID_Владелец;
	КонецЦикла;
	Возврат Истина; 
КонецФункции

&НаКлиенте
Процедура спВладельцыПриИзменении(Элемент)
	тпКомплектующие_Отбор();
	тпРаботы_Отбор();
	тпОборудование_Отбор();
	тпУчастки_Отбор();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий работы

&НаКлиенте
Процедура тпРаботы_Отбор()
	Если НЕ спВладельцы="" Тогда
		стрID="";
		Если спВладельцы="Товары" Тогда
			Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.Товары.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Работы.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Товары",стрID);
		ИначеЕсли спВладельцы="Деталь" Тогда
			Если НЕ Элементы.дзДетали.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Работы.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Детали",стрID);
		КонецЕсли;
	Иначе
		Элементы.Работы.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпРаботы_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
		Если НоваяСтрока Тогда
			Элементы.Работы.ТекущиеДанные.ID=СокрЛП(Новый УникальныйИдентификатор);
			Элементы.Работы.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
			Если НЕ Элементы.дзДетали.ТекущиеДанные=Неопределено Тогда
				Элементы.Работы.ТекущиеДанные.ID_Детали=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий Оборудование

&НаКлиенте
Процедура тпОборудование_Отбор()
	Если НЕ спВладельцы="" Тогда
		стрID="";
		Если спВладельцы="Товары" Тогда
			Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.Товары.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Оборудование.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Товары",стрID);
		ИначеЕсли спВладельцы="Деталь" Тогда
			Если НЕ Элементы.дзДетали.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Оборудование.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Детали",стрID);
		КонецЕсли;
	Иначе
		Элементы.Оборудование.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпОборудование_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
		Если НоваяСтрока Тогда
			Элементы.Оборудование.ТекущиеДанные.ID=СокрЛП(Новый УникальныйИдентификатор);
			Элементы.Оборудование.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
			Если НЕ Элементы.дзДетали.ТекущиеДанные=Неопределено Тогда
				Элементы.Оборудование.ТекущиеДанные.ID_Детали=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий Участки

&НаКлиенте
Процедура тпУчастки_Отбор()
	Если НЕ спВладельцы="" Тогда
		стрID="";
		Если спВладельцы="Товары" Тогда
			Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.Товары.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Участки.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Товары",стрID);
		ИначеЕсли спВладельцы="Деталь" Тогда
			Если НЕ Элементы.дзДетали.ТекущиеДанные=Неопределено Тогда
				стрID=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли;
			Элементы.Участки.ОтборСтрок = Новый ФиксированнаяСтруктура("ID_Детали",стрID);
		КонецЕсли;
	Иначе
		Элементы.Участки.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпУчастки_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ Элементы.Товары.ТекущиеДанные=Неопределено Тогда
		Если НоваяСтрока Тогда
			Элементы.Участки.ТекущиеДанные.ID=СокрЛП(Новый УникальныйИдентификатор);
			Элементы.Участки.ТекущиеДанные.ID_Товары=Элементы.Товары.ТекущиеДанные.ID;
			Если НЕ Элементы.дзДетали.ТекущиеДанные=Неопределено Тогда
				Элементы.Участки.ТекущиеДанные.ID_Детали=Элементы.дзДетали.ТекущиеДанные.ID;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//////&НаКлиенте
//////Процедура КопированиеВсего(Команда)
//////	дзДетали_СкопироватьВетку(Элементы.дзДетали.ТекущиеДанные,,,Истина);
//////КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	дзДетали_Инициализация();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
	ОбновитьНадписиНаКнопках();
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(тзРеквизитыТЧ) Тогда
		тзРеквизиты=ПолучитьИзВременногоХранилища(тзРеквизитыТЧ);
		МассивСтрок=тзРеквизиты.НайтиСтроки(Новый Структура("Ключ", "Детали"));
		Если МассивСтрок.Количество()=0 Тогда Возврат; КонецЕсли;
		тзДанные=МассивСтрок[0].Значение;
		тзРеквизитыКолонок=МетаконфигураторСервер.ТаблицаДополнительныхРеквизитовОбъекта("Документ_ЗаказНаПроизводство_Детали");
	КонецЕсли;

	тчДетали=ТекущийОбъект.Детали;
	тчДетали.Очистить();
	дзДетали_Записать(дзДетали, тчДетали, тзДанные, тзРеквизитыКолонок);

	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
