&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()
	Объект.СуммаДокумента=Объект.Товары.Итог("Сумма");
	Объект.СтавкаНДСВознаграждения=Объект.Товары.Итог("СуммаНДСВознаграждения");
	//Элементы.ИнфНадписьСуммаНДС.Заголовок=?(Объект.СтавкаНДСВознаграждения=0, "", "Сумма НДС вознаграждения = "+ОбщегоНазначения.ФорматСумм(Объект.СтавкаНДСВознаграждения)+" "+СокрЛП(Объект.ВалютаДокумента));
	
	//Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	//	Элементы.НадписьВсего.Заголовок="Всего реализовано (<>):";
	//	Элементы.НадписьСуммаВознаграждения.Заголовок="Сумма вознаграждения (<>):";
	//Иначе
	//	Элементы.НадписьВсего.Заголовок="Всего реализовано (" + СокрЛП(Объект.ВалютаДокумента) +"):";
	//	Элементы.НадписьСуммаВознаграждения.Заголовок="Сумма вознаграждения (" + СокрЛП(Объект.ВалютаДокумента) +"):";
	//КонецЕсли;
	//
	//Элементы.ТоварыЦенаРеализации.Заголовок="Цена (" + Объект.ВалютаДокумента + ")";
	//Элементы.ТоварыСуммаРеализации.Заголовок="Сумма (" + Объект.ВалютаДокумента + ")";
	//Элементы.ТоварыЦенаПоступления.Заголовок="Цена поступления(" + Объект.ВалютаДокумента + ")";
	//Элементы.ТоварыСуммаПоступления.Заголовок="Сумма поступления(" + Объект.ВалютаДокумента + ")";
	//Элементы.ТоварыСуммаВознаграждения.Заголовок="Вознаграждение(" + Объект.ВалютаДокумента + ")";
	//Элементы.ТоварыСуммаНДСВознаграждения.Заголовок="Сумма НДС вознаграждения(" + Объект.ВалютаДокумента + ")";
	//Элементы.ДенежныеСредстваСумма.Заголовок="Сумма (" + Объект.ВалютаДокумента + ")";
	//Элементы.ДенежныеСредстваСуммаНДС.Заголовок="Сумма НДС (" + Объект.ВалютаДокумента + ")";
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	ДоступностьПроцента=Истина;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ДоступностьПроцента=Ложь;
		Если Не Объект.ПроцентКомиссионногоВознаграждения=0 Тогда
			Объект.ПроцентКомиссионногоВознаграждения=0;
		КонецЕсли;
	КонецЕсли;
	Элементы.ПроцентКомиссионногоВознаграждения.Доступность=ДоступностьПроцента;
		
	ВидДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента,"ВидДоговора");
	Если ВидДоговора=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		Элементы.ПоставщикиПоставщик.Заголовок="Покупатель";
		Элементы.Документ.Заголовок="Отчет комитенту о продажах";
		ВидимостьЭлемента=Ложь;
	Иначе
		Элементы.ПоставщикиПоставщик.Заголовок="Поставщик";
		Элементы.Документ.Заголовок="Отчет комитенту о закупках";
		ВидимостьЭлемента=Истина;
	КонецЕсли;
	
	Элементы.ПоставщикиПартия.Видимость=ВидимостьЭлемента;
	Элементы.ПоставщикиПолученСФ.Видимость=ВидимостьЭлемента;
	Элементы.ПоставщикиДатаСФ.Видимость=ВидимостьЭлемента;
	Элементы.ПоставщикиСчетФактура.Видимость=ВидимостьЭлемента;
	Элементы.ПоставщикиНомерСчетаФактуры.Видимость=ВидимостьЭлемента;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтоотметку()
	// Процент и ставка НДС с комиссионного вознаграждения
	Автоотметка=Ложь;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли")
	 ИЛИ Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		Автоотметка=Истина;
	КонецЕсли;

	Если Не Элементы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного=Автоотметка Тогда
		Элементы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного=Автоотметка;
	КонецЕсли;

	Если Не Элементы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного=Автоотметка И НЕ ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		Элементы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного=Автоотметка;
	КонецЕсли;

	Если Не Элементы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного=Автоотметка Тогда
		Элементы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного=Автоотметка;
	КонецЕсли;

	Если Не Элементы.СтавкаНДСВознаграждения.ОтметкаНезаполненного=Автоотметка И НЕ ЗначениеЗаполнено(Объект.СтавкаНДСВознаграждения) Тогда
		Элементы.СтавкаНДСВознаграждения.ОтметкаНезаполненного=Автоотметка;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)
	Если Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100	* (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПоступления);

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100 * СтрокаТабличнойЧасти.Сумма;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения=0;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения=УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения, Истина, Истина, Объект.СтавкаНДСВознаграждения);
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеализованными(ДокументПоставки=Неопределено) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", ДокументПоставки);
	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Объект.Сделка), Объект.Сделка, Неопределено));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	РеализованныеТоварыОбороты.Регистратор.Контрагент КАК Контрагент,
	|	РеализованныеТоварыОбороты.Номенклатура,
	|	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	РеализованныеТоварыОбороты.ХарактеристикаНоменклатуры,
	|	РеализованныеТоварыОбороты.СерияНоменклатуры,
	|	РеализованныеТоварыОбороты.ДокументПоставки КАК ДокументПоступления,
	|	СУММА(РеализованныеТоварыОбороты.КоличествоОборот) КАК КоличествоРеализованных,
	|	СУММА(РеализованныеТоварыОбороты.ВыручкаОборот) КАК Выручка
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Обороты(, &НаДату, Регистратор, ДоговорКонтрагента = &ДоговорКонтрагента "+?(ЗначениеЗаполнено(Объект.Сделка)," И Сделка = &Сделка","")+"
	|                                                 " + ?(НЕ ЗначениеЗаполнено(ДокументПоставки), "", "И ДокументПоставки = &ДокументПоставки ") + ") КАК РеализованныеТоварыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыОбороты.Регистратор.Контрагент,
	|	РеализованныеТоварыОбороты.Номенклатура,
	|	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков,
	|	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	РеализованныеТоварыОбороты.ХарактеристикаНоменклатуры,
	|	РеализованныеТоварыОбороты.СерияНоменклатуры,
	|	РеализованныеТоварыОбороты.ДокументПоставки
	|	
	|";
	тзВыборка=Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка ИЗ тзВыборка Цикл
		МассивСтрок=Объект.Поставщики.НайтиСтроки(Новый Структура("Поставщик", Выборка.Контрагент));
		Если МассивСтрок.Количество()=0 Тогда
			СтрокаКонтрагент=Объект.Поставщики.Добавить();
			СтрокаКонтрагент.Поставщик=Выборка.Контрагент;
			СтрокаКонтрагент.ID=Новый УникальныйИдентификатор;
		Иначе
			СтрокаКонтрагент=МассивСтрок[0];
		КонецЕсли; 
		КоличествоРеализованных=?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
		Выручка=?(Выборка.Выручка = NULL, 0, Выборка.Выручка);
		
		Количество=КоличествоРеализованных;
		Если Количество=0 Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество       = Количество;
		НоваяСтрока.Сумма            = ?(КоличествоРеализованных = 0, 0, Выручка * НоваяСтрока.Количество / КоличествоРеализованных);
		НоваяСтрока.Цена             = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		
		Если Объект.СпособРасчетаКомиссионногоВознаграждения=Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения, Истина, Истина, УчетНалоговСервер.СтавкаНДС(Объект.СтавкаНДСВознаграждения));
		ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения, Истина, Истина, УчетНалоговСервер.СтавкаНДС(Объект.СтавкаНДСВознаграждения));
		КонецЕсли;
		НоваяСтрока.ID_Поставщики=СтрокаКонтрагент.ID;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(СпособЗаполнения="Заполнить")
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран договор. Заполнение невозможно.",, "Объект.ДоговорКонтрагента"); 
		Возврат;
	КонецЕсли;

	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));

	ОписаниеОповещенияЗакрытия=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоПоступлению", ЭтотОбъект);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещенияЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
	Элементы.ГиперссылкаСчетФактура.Заголовок=УправлениеДиалогамиКлиент.ТекстСчетаФактуры(УчетНалоговСервер.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураВыданный"));
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаСклада()
	ВидСклада=Неопределено;	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		Если УправлениеМетаданными.ЕстьРеквизит("Склад", Объект.Ссылка.Метаданные()) Тогда
			Склад=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Сделка, "Склад");
			Если ЗначениеЗаполнено(Склад) Тогда
				ВидСклада=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Склад, "ВидСклада");
			КонецЕсли; 
			//ВидСклада=Объект.Сделка.Склад.ВидСклада;
		КонецЕсли;
	КонецЕсли;
	
	ФлагАвтоОтметкиНезаполненого = Истина;	
	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И НастройкиПользователяСервер.ЗначениеПраваПользователя("РазрешитьНулевыеЦеныВОпте") Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыСуммаПоступления.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	Элементы.ТоварыЦенаПоступления.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;
	Элементы.ТоварыСуммаРеализации.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;
	Элементы.ТоварыЦенаРеализации.АвтоОтметкаНезаполненного   = ФлагАвтоОтметкиНезаполненого;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПоПоступлениюУслуги()
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран договор. Заполнение невозможно.",, "Объект.ДоговорКонтрагента"); 
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	КомиссияОтчетПродажиКомитентуПоставщики.Партия КАК Документ
	|ИЗ
	|	Документ.КомиссияОтчетПродажиКомитенту.Поставщики КАК КомиссияОтчетПродажиКомитентуПоставщики
	|ГДЕ
	|	КомиссияОтчетПродажиКомитентуПоставщики.Ссылка.Проведен = ИСТИНА
	|	И КомиссияОтчетПродажиКомитентуПоставщики.Ссылка.Организация = &Организация
	|";
	МассивДокументов=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Ссылка", МассивДокументов);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Товары.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И НЕ ПоступлениеТоваровУслуг.Ссылка В ИЕРАРХИИ(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Услуги.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И НЕ ПоступлениеТоваровУслуг.Ссылка В ИЕРАРХИИ(&Ссылка)
	|";	
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзДанные.Свернуть("Документ","");
	
	Для Каждого СтрокаДок ИЗ тзДанные Цикл 
		Поступление=СтрокаДок.Документ;
		Если НЕ ЗначениеЗаполнено(Поступление) Тогда Продолжить; КонецЕсли;
		
		ДобавитьПоПоступлениюУслуги(Поступление);
		
		//СтрокаКонтрагент=Объект.Поставщики.Добавить();
		//СтрокаКонтрагент.Поставщик=Поступление.Контрагент;
		//СтрокаКонтрагент.Партия=Поступление;
		//СчетФактураПолученный=УчетНДС.НайтиПодчиненныйСчетФактуру(Поступление, "СчетФактураПолученный");
		//Если НЕ СчетФактураПолученный=Неопределено Тогда
		//	СтруктураДанных=ОбщегоНазначенияСервер.ЗначениеРеквизитовОбъекта(СчетФактураПолученный, "Дата,Номер");
		//	СтрокаКонтрагент.ДатаСФ=СтруктураДанных.Дата;
		//	СтрокаКонтрагент.НомерСчетаФактуры=СтруктураДанных.Номер;
		//	СтрокаКонтрагент.ПолученСФ=Истина;
		//КонецЕсли;

		//СчетФактураВыданный=УчетНДС.НайтиПодчиненныйСчетФактуру(Поступление,"СчетФактураВыданный");
		//Если НЕ СчетФактураВыданный=Неопределено Тогда
		//	СтрокаКонтрагент.СчетФактура=СчетФактураВыданный;
		//КонецЕсли;
		//	
		//СтрокаКонтрагент.ID=Новый УникальныйИдентификатор;
		//Для Каждого СтрокаТабличнойЧасти ИЗ Поступление.Товары Цикл
		//	НоваяСтрока=Объект.Товары.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти,,"ТОП");
		//	НоваяСтрока.ID_Поставщики=СтрокаКонтрагент.ID;
		//КонецЦикла; 
		//Для Каждого СтрокаТабличнойЧасти ИЗ Поступление.Услуги Цикл
		//	НоваяСтрока=Объект.Товары.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти,,"ТОП");
		//	НоваяСтрока.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
		//	НоваяСтрока.Коэффициент=1;
		//	НоваяСтрока.ID_Поставщики=СтрокаКонтрагент.ID;
		//КонецЦикла;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ДобавитьПоПоступлениюУслуги(Поступление)
	СтрокаКонтрагент=Объект.Поставщики.Добавить();
	СтрокаКонтрагент.Поставщик=Поступление.Контрагент;
	СтрокаКонтрагент.Партия=Поступление;
	СчетФактураПолученный=УчетНДС.НайтиПодчиненныйСчетФактуру(Поступление, "СчетФактураПолученный");
	Если НЕ СчетФактураПолученный=Неопределено Тогда
		СтруктураДанных=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(СчетФактураПолученный, "Дата,Номер");
		СтрокаКонтрагент.ДатаСФ=СтруктураДанных.Дата;
		СтрокаКонтрагент.НомерСчетаФактуры=СтруктураДанных.Номер;
		СтрокаКонтрагент.ПолученСФ=Истина;
	КонецЕсли;	
	
	СчетФактураВыданный=УчетНДС.НайтиПодчиненныйСчетФактуру(Поступление, "СчетФактураВыданный");
	Если НЕ СчетФактураВыданный=Неопределено Тогда
		СтрокаКонтрагент.СчетФактура=СчетФактураВыданный;
	КонецЕсли;	
	СтрокаКонтрагент.ID=Новый УникальныйИдентификатор;
	Для Каждого СтрокаТабличнойЧасти ИЗ Поступление.Товары Цикл
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти,,"ТОП");
		НоваяСтрока.ID_Поставщики=СтрокаКонтрагент.ID;
	КонецЦикла; 
	Для Каждого СтрокаТабличнойЧасти ИЗ Поступление.Услуги Цикл
		НоваяСтрока=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти,,"ТОП");
		НоваяСтрока.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
		НоваяСтрока.Коэффициент=1;
		НоваяСтрока.ID_Поставщики=СтрокаКонтрагент.ID;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Процедура СформироватьСчетаФактурыВыданныеДляСтрокДокумента()
	тзТовары=Объект.Товары.Выгрузить(,"Сумма,СуммаНДС,ID_Поставщики");
	тзТовары.Свернуть("ID_Поставщики", "Сумма,СуммаНДС");
	тзТовары.Индексы.Добавить("ID_Поставщики");
	
	Для Каждого СтрокаТаблицыДок Из Объект.Поставщики Цикл
		Если НЕ СтрокаТаблицыДок.ПолученСФ ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыДок.Поставщик) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыДок.ДатаСФ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСуммДляСФ=тзТовары.Найти(СтрокаТаблицыДок.ID, "ID_Поставщики");
		Если СтрокаСуммДляСФ=Неопределено ИЛИ СтрокаСуммДляСФ.Сумма=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДок.СчетФактура) Тогда
			ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
		Иначе
			ДокСФ = СтрокаТаблицыДок.СчетФактура.ПолучитьОбъект();
			Если ТипЗнч(ДокСФ.ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		ДокСФ.ДокументыОснования.Очистить();
		
		Основания=ДокСФ.ДокументыОснования.Добавить();
		Основания.ДокументОснование = Объект.Ссылка;
		
		ДокСФ.ДокументОснование     = Объект.Ссылка;
		ДокСФ.Дата            = СтрокаТаблицыДок.ДатаСФ;
		ДокСФ.Организация     = Объект.Организация;
		ДокСФ.Контрагент      = Объект.Контрагент;
		ДокСФ.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		ДокСФ.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию;
		ДокСФ.КодВидаОперации = "04";
		ДокСФ.СуммаДокумента  =  СтрокаСуммДляСФ.Сумма;
		ДокСФ.Сумма           =  СтрокаСуммДляСФ.Сумма;
		ДокСФ.СуммаНДС  	  =  СтрокаСуммДляСФ.СуммаНДС;
		
		Если ДокСФ.ПометкаУдаления Тогда
			ДокСФ.УстановитьПометкуУдаления(Ложь);
		КонецЕсли; 
		
		//ДокСФ.Проведен=Истина;
		ДокСФ.Записать();
		СтрокаТаблицыДок.СчетФактура=ДокСФ.Ссылка;
		
		ТекстСообщения = "Сформирован документ «" + СокрЛП(ДокСФ.Ссылка)
		+ "» (поставщик «" + СокрЛП(СтрокаТаблицыДок.Поставщик)
		+ "», с.-ф. № " + СокрЛП(ДокСФ.Номер)
		+ " от " + Формат(ДокСФ.Дата, "ДФ=dd.MM.yyyy") + ").";
		Сообщить(ТекстСообщения);		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособРасчетаКомиссионногоВознаграждения()
	Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		Объект.СпособРасчетаКомиссионногоВознаграждения=Объект.ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		Объект.ПроцентКомиссионногоВознаграждения=Объект.ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
	КонецЕсли;
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_СпособРасчетаКомиссионногоВознаграждения(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из Объект.Товары Цикл
		РассчитатьКомиссионноеВознаграждение(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_СтавкаНДСВознаграждения(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	
	Для каждого СтрокаКоллекции Из Объект.Товары Цикл
		СтрокаКоллекции.СуммаНДСВознаграждения=УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаКоллекции.СуммаВознаграждения, Истина, Ложь, СтрокаКоллекции.СтавкаНДС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоПоступлению(Параметр1, Параметр2) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметр1) Тогда	Возврат; КонецЕсли;
	ЗаполнитьРеализованными(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ДобавитьПоПоступлениюУслуги(Параметр1, Параметр2) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметр1) Тогда	Возврат; КонецЕсли;
	ДобавитьПоПоступлениюУслуги(Параметр1);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СКомитентом"));
		
		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);		
		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);
		УстановитьВидимость();
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);

	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		УстановитьВидимость();
		
	ИначеЕсли Элемент.Имя="СпособРасчетаКомиссионногоВознаграждения" Тогда
		Если Не Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
			Если Объект.Товары.Количество() > 0 Тогда
				ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_СпособРасчетаКомиссионногоВознаграждения", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, "Изменился способ расчета. Пересчитать комиссионное вознаграждение?", РежимДиалогаВопрос.ДаНет, 20);
			КонецЕсли;
		КонецЕсли;
		УстановитьВидимость();
		УстановитьАвтоотметку();
		
	ИначеЕсли Элемент.Имя="ПроцентКомиссионногоВознаграждения" Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_СпособРасчетаКомиссионногоВознаграждения", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Изменился способ расчета. Пересчитать комиссионное вознаграждение?", РежимДиалогаВопрос.ДаНет, 20);
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя="СтавкаНДСВознаграждения" Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_СтавкаНДСВознаграждения", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Пересчитать суммы НДС вознаграждения?", РежимДиалогаВопрос.ДаНет, 20);
		КонецЕсли;

	ИначеЕсли Элемент.Имя="Сделка" Тогда
		ПриИзмененииВидаСклада();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="ГиперссылкаСчетФактура" Тогда
		Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
			Сообщить("Необхоимо записать документ!"); Возврат;
		КонецЕсли;
		УправлениеДиалогамиКлиент.ВвестиСчетФактуру(Объект.Ссылка, ЭтаФорма, "СчетФактураВыданный");
	КонецЕсли;
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;
	
	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если Элементы.Поставщики.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.Поставщики.ТекущиеДанные=Неопределено Тогда
		Отказ=Истина; ПоказатьПредупреждение(,"Не выбран покупатель!", 10);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_Поставщики=Элементы.Поставщики.ТекущиеДанные.ID;
		Элементы.Товары.Обновить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные; стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	
	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		ТекущиеДанные.СуммаПоступления = ТекущиеДанные.ЦенаПоступления * ТекущиеДанные.Количество;
		ТекущиеДанные.Сумма            = ТекущиеДанные.Цена            * ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		КонецЕсли;
		
	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="КоличествоМест" Тогда
		ТекущиеДанные.СуммаПоступления = ТекущиеДанные.ЦенаПоступления * ТекущиеДанные.Количество;
		ТекущиеДанные.Сумма            = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="Количество" Тогда
		ТекущиеДанные.СуммаПоступления = ТекущиеДанные.ЦенаПоступления * ТекущиеДанные.Количество;
		ТекущиеДанные.Сумма            = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="Цена" Тогда
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="Сумма" Тогда
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="ЦенаПоступления" Тогда
		ТекущиеДанные.СуммаПоступления=ТекущиеДанные.ЦенаПоступления * ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="СуммаПоступления" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
			ТекущиеДанные.ЦенаПоступления=ТекущиеДанные.СуммаПоступления / ТекущиеДанные.Количество;
		КонецЕсли; 
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="ЦенаРеализации" Тогда		
		ТекущиеДанные.Сумма=ТекущиеДанные.Цена * ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="СуммаРеализации" Тогда		
		Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
			ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
		КонецЕсли;
		РассчитатьКомиссионноеВознаграждение(ТекущиеДанные);

	ИначеЕсли стрКолонка="СуммаВознаграждения" Тогда
		ТекущиеДанные.СуммаНДСВознаграждения=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаВознаграждения, Истина, Истина, Объект.СтавкаНДСВознаграждения);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Денежные Средства"

Процедура тпДенежныеСредства_Колонка_ПриИзменении(Элемент) 
	ТекущиеДанные=Элементы.ДенежныеСредства.ТекущиеДанные; стрКолонка=стрЗаменить(Элемент.Имя, "ДенежныеСредства", "");
	
	Если стрКолонка="Сумма" ИЛИ стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Поставщики"

&НаКлиенте
Процедура кпПоставщики_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Поставщики"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если Элементы.Поставщики.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	Если стрКоманда="ЗаполнитьРеализованнымиПоПоступлению" Тогда
		Объект.Поставщики.Очистить();
		Объект.Товары.Очистить();
		ЗаполнитьПоПоступлению();
		
	ИначеЕсли стрКоманда="ЗаполнитьПоПоступлениюУслуги" Тогда
		Объект.Поставщики.Очистить();
		Объект.Товары.Очистить();
		ЗаполнитьПоПоступлениюУслуги();
		
	ИначеЕсли стрКоманда="ДобавитьПоПоступлениюУслуги" Тогда
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		
		ОписаниеОповещенияЗакрытия=Новый ОписаниеОповещения("ОбработчикОповещения_ДобавитьПоПоступлениюУслуги", ЭтотОбъект);
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещенияЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпПоставщики_ПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные=Неопределено Тогда
		ID=СокрЛП(Элемент.ТекущиеДанные.ID);
	КонецЕсли;
	Элементы.Товары.ОтборСтрок=Новый ФиксированнаяСтруктура("ID_Поставщики", ID);
КонецПроцедуры

&НаКлиенте
Процедура тпПоставщики_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПоставщики_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПоставщики_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПоставщики_ПередУдалением(Элемент, Отказ)
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_Поставщики", Элемент.ТекущиеДанные.ID));
	Для Каждого СтрокаМассива из МассивСтрок Цикл
		Объект.Товары.Удалить(СтрокаМассива);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.СтавкаНДСВознаграждения=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
		ЗаполнитьСпособРасчетаКомиссионногоВознаграждения();
	КонецЕсли;
	
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТекстПроСчетФактуру(); 
	УстановитьВидимость();
	УстановитьАвтоотметку();
	ПриИзмененииВидаСклада();
	ОбновитьНадписи();	
	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора")=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		СформироватьСчетаФактурыВыданныеДляСтрокДокумента();
	КонецЕсли;
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры