Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	
КонецПроцедуры

//Процедура ЗаполнитьТовары(ДокументПоставки = Неопределено, Реализованными = Ложь, ID_Поставщики="") Экспорт
//	ВалютаВзаиморасчетов=ДоговорКонтрагента.ВалютаВзаиморасчетов;
//	
//	ТекстНоменклатура="
//	|Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
//	|   ИЗ Документ.ПоступлениеТоваровУслуг.Товары
//	|   ГДЕ Документ.ПоступлениеТоваровУслуг.Товары.Ссылка = &ДокументПоставки)
//	|";

//	Запрос=Новый Запрос;
//	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
//	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено));
//	Запрос.УстановитьПараметр("ДокументПоставки"      , ДокументПоставки);
//	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
//	Запрос.УстановитьПараметр("СтатусПолучения"       , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
//	Запрос.УстановитьПараметр("Купленный"             , Перечисления.СтатусыПартийТоваров.Купленный);
//	Запрос.УстановитьПараметр("НаКомиссию"            , Перечисления.СтатусыПартийТоваров.НаКомиссию);
//	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
//	Запрос.УстановитьПараметр("ОперацияПередача",       Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
//	Запрос.УстановитьПараметр("ОперацияРеализация",     Перечисления.КодыОперацийПартииТоваров.Реализация);
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	Полученные.Номенклатура                                     КАК Номенклатура,
//	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
//	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
//	|	Полученные.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры, 
//	|	Полученные.СерияНоменклатуры                                КАК СерияНоменклатуры, 
//	|" + ?(Реализованными, "СУММА(Партии.Количество)                КАК РасходПоПартиям,
//	|   СУММА(ПартииПереданные.Количество)                          КАК КоличествоРеализованных,", "") + "
//	|	СУММА(Полученные.КоличествоОстаток)                         КАК КоличествоОстаток,
//	|	СУММА(Заказы.КоличествоОстаток)                             КАК ОстатокЗаказанного,
//	|	СУММА(Полученные.СуммаВзаиморасчетовОстаток)                КАК СуммаВзаиморасчетовОстаток,
//	|	СУММА(Заказы.СуммаОстаток)                    КАК СуммаЗаказанного
//	|ИЗ
//	|	РегистрНакопления.ТоварыПолученные.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
//	|" + ?(ДокументПоставки <> Неопределено, ("И " + ТекстНоменклатура), "") + "
//	|                                              И Сделка                = &Сделка
//	|                                              И СтатусПолучения       = &СтатусПолучения) КАК Полученные
//	|ЛЕВОЕ СОЕДИНЕНИЕ
//	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПоставщику        = &Сделка) КАК Заказы
//	|ПО
//	|	Полученные.Номенклатура = Заказы.Номенклатура
//	| И Полученные.ХарактеристикаНоменклатуры = Заказы.ХарактеристикаНоменклатуры 
//	| " + ?(Реализованными, "
//	|ЛЕВОЕ СОЕДИНЕНИЕ
//	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Партии
//	|ПО Партии.Номенклатура = Полученные.Номенклатура
//	|	И Партии.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
//	|	" + ?(ДокументПоставки <> Неопределено, "И Партии.ДокументОприходования = &ДокументПоставки", "И Партии.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
//	|	И Партии.СтатусПартии = &НаКомиссию
//	|	И Партии.КодОперации = &ОперацияРеализация
//	|	" + ?(ДокументПоставки <> Неопределено, ("И Партии." + ТекстНоменклатура), "") + "
//	|	И Партии.ВидДвижения = &ВидДвиженияРасход
//	|
//	|ЛЕВОЕ СОЕДИНЕНИЕ
//	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииПередача
//	|ПО ПартииПередача.Номенклатура = Полученные.Номенклатура
//	|	И ПартииПередача.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
//	|	" + ?(ДокументПоставки <> Неопределено, "И ПартииПередача.ДокументОприходования = &ДокументПоставки", "И ПартииПередача.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
//	|	И ПартииПередача.СтатусПартии = &НаКомиссию
//	|	И ПартииПередача.КодОперации = &ОперацияПередача
//	|	" + ?(ДокументПоставки <> Неопределено, ("И ПартииПередача." + ТекстНоменклатура), "") + "
//	|	И ПартииПередача.ВидДвижения = &ВидДвиженияРасход
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
//	|			РегистрНакопления.ПартииТоваровПереданные КАК ПартииПереданные
//	|		ПО ПартииПереданные.Номенклатура = ПартииПередача.Номенклатура
//	|		   И ПартииПереданные.ХарактеристикаНоменклатуры = ПартииПередача.ХарактеристикаНоменклатуры
//	|		   И ПартииПереданные.ДокументОприходования = ПартииПередача.ДокументОприходования
//	|	       И ПартииПереданные.СтатусПартии = &НаКомиссию
//	|	       И ПартииПереданные.КодОперации = &ОперацияРеализация
//	|	       " + ?(ДокументПоставки <> Неопределено, ("И ПартииПереданные." + ТекстНоменклатура), "") + "
//	|	       И ПартииПереданные.ВидДвижения = &ВидДвиженияРасход
//	|", "") + "
//	|СГРУППИРОВАТЬ ПО
//	|	Полученные.Номенклатура,
//	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков,
//	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
//	|	Полученные.ХарактеристикаНоменклатуры,
//	|	Полученные.СерияНоменклатуры
//	|";
//	Выборка=Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		КоличествоОстатокЗаказанного = ?(Выборка.ОстатокЗаказанного = NULL, 0, Выборка. ОстатокЗаказанного);
//		СуммаВзаиморасчетовОстаток   = ?(Выборка.СуммаВзаиморасчетовОстаток = NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
//		КоличествоОстаток            = ?(Выборка.КоличествоОстаток = NULL, 0, Выборка.КоличествоОстаток);

//		СуммаЗаказанного = ?(Выборка.СуммаЗаказанного = NULL, 0, Выборка.СуммаЗаказанного);

//		Если Не Реализованными Тогда
//			КоличествоДляОтчета = Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного; 
//		Иначе
//			РасходПоПартиям = ?(Выборка.РасходПоПартиям = NULL, 0, Выборка.РасходПоПартиям) + ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
//			КоличествоДляОтчета = Мин(Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного, РасходПоПартиям);
//		КонецЕсли; 

//		Если КоличествоДляОтчета <= 0 Тогда Продолжить; КонецЕсли;
//		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда Продолжить; КонецЕсли;

//		СтрокаТабличнойЧасти = Товары.Добавить();
//		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
//		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
//		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
//		СтрокаТабличнойЧасти.Количество                 = КоличествоДляОтчета;
//		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
//		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаХраненияОстатковКоэффициент;
//		СтрокаТабличнойЧасти.ЦенаПоступления            = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчетовОстаток - СуммаЗаказанного, 
//													ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, 
//													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета), КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета)) 
//													 / (КоличествоОстаток - КоличествоОстатокЗаказанного);

//		СтрокаТабличнойЧасти.СуммаПоступления    = СтрокаТабличнойЧасти.ЦенаПоступления * КоличествоДляОтчета;
//		СтрокаТабличнойЧасти.Цена                = СтрокаТабличнойЧасти.ЦенаПоступления;
//		СтрокаТабличнойЧасти.Сумма               = СтрокаТабличнойЧасти.СуммаПоступления;
//		СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоставки;

//		Если СпособРасчетаКомиссионногоВознаграждения=Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
//			СтрокаТабличнойЧасти.СуммаВознаграждения=ПроцентКомиссионногоВознаграждения / 100*СтрокаТабличнойЧасти.Сумма;
//			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения, Истина, Истина, УчетНалоговСервер.СтавкаНДС(СтавкаНДСВознаграждения));
//		КонецЕсли;

//		СтрокаТабличнойЧасти.ID_Поставщики=ID_Поставщики;
//	КонецЦикла;

//КонецПроцедуры

// Процедура выполняет заполнение табличной части реализованными товарами
// на основании данных регистра "Реализованные товары комитента"
//
// ДокументПоставки - если задан, то заполняет товарами, полученными по заданному документу
//
Процедура ЗаполнитьРеализованными(ДокументПоставки=Неопределено) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", ДокументПоставки);
	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено));
	Запрос.Текст="ВЫБРАТЬ
	             |	РеализованныеТоварыОбороты.Регистратор.Контрагент КАК Контрагент,
	             |	РеализованныеТоварыОбороты.Номенклатура,
	             |	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	             |	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	             |	РеализованныеТоварыОбороты.ХарактеристикаНоменклатуры,
	             |	РеализованныеТоварыОбороты.СерияНоменклатуры,
	             |	РеализованныеТоварыОбороты.ДокументПоставки КАК ДокументПоступления,
	             |	СУММА(РеализованныеТоварыОбороты.КоличествоОборот) КАК КоличествоРеализованных,
	             |	СУММА(РеализованныеТоварыОбороты.ВыручкаОборот) КАК Выручка
	             |ИЗ
	             |	РегистрНакопления.РеализованныеТовары.Обороты(, &НаДату, Регистратор, ДоговорКонтрагента = &ДоговорКонтрагента "+?(ЗначениеЗаполнено(Сделка)," И Сделка = &Сделка","")+"
				|                                                 " + ?(НЕ ЗначениеЗаполнено(ДокументПоставки), "", "И ДокументПоставки = &ДокументПоставки ") + ") КАК РеализованныеТоварыОбороты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	РеализованныеТоварыОбороты.Регистратор.Контрагент,
	             |	РеализованныеТоварыОбороты.Номенклатура,
	             |	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков,
	             |	РеализованныеТоварыОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	             |	РеализованныеТоварыОбороты.ХарактеристикаНоменклатуры,
	             |	РеализованныеТоварыОбороты.СерияНоменклатуры,
	             |	РеализованныеТоварыОбороты.ДокументПоставки
				 |	";
	
//	Запрос.Текст="
//	|ВЫБРАТЬ
//	|	Реализованные.ДоговорКонтрагента.Владелец КАК Контрагент,
//	|	Реализованные.Номенклатура,
//	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
//	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
//	|	Реализованные.ХарактеристикаНоменклатуры,
//	|	Реализованные.СерияНоменклатуры,
//	|	Реализованные.ДокументПоставки КАК ДокументПоступления,
//	//| 	МАКСИМУМ(Полученные.КоличествоОстаток)          КАК КоличествоПолученных, 
//	//|	МАКСИМУМ(Полученные.СуммаВзаиморасчетовОстаток) КАК СуммаПоступления,
//	|	СУММА(Реализованные.ВыручкаОстаток)             КАК Выручка,
//	|	СУММА(Реализованные.КоличествоОстаток)          КАК КоличествоРеализованных
//	|ИЗ
//	|	РегистрНакопления.РеализованныеТовары.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка) КАК Реализованные

////	|	РегистрНакопления.РеализованныеТовары.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка
////	|                                                 " + ?(НЕ ЗначениеЗаполнено(ДокументПоставки), "", "И ДокументПоставки = &ДокументПоставки ") + ") КАК Реализованные
//	//|ЛЕВОЕ СОЕДИНЕНИЕ
//	//|   РегистрНакопления.ТоварыПолученные.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
//	//|                                                И Сделка = &Сделка) КАК Полученные
//	//|ПО
//	//|	Полученные.Номенклатура                 = Реализованные.Номенклатура
//	//|	И Полученные.ХарактеристикаНоменклатуры = Реализованные.ХарактеристикаНоменклатуры
//	//|	И Полученные.СерияНоменклатуры          = Реализованные.СерияНоменклатуры
//	|СГРУППИРОВАТЬ ПО
//	|	Реализованные.ДоговорКонтрагента.Владелец,
//	|	Реализованные.Номенклатура,
//	|	Реализованные.ХарактеристикаНоменклатуры,
//	|	Реализованные.СерияНоменклатуры,
//	|	Реализованные.ДокументПоставки
//	|
//	|
//	|";	
	тзВыборка=Запрос.Выполнить().Выгрузить();
Для Каждого Выборка ИЗ тзВыборка Цикл
     СтрокаКонтрагент=Поставщики.Найти(Выборка.Контрагент,"Поставщик");
	 Если  СтрокаКонтрагент=Неопределено Тогда
		 СтрокаКонтрагент=Поставщики.Добавить();
		 СтрокаКонтрагент.Поставщик=Выборка.Контрагент;
		 СтрокаКонтрагент.ID=Новый УникальныйИдентификатор;
		КонецЕсли; 
		КоличествоРеализованных=?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
//		КоличествоПолученных=?(Выборка.КоличествоПолученных = NULL, 0, Выборка.КоличествоПолученных);
		Выручка=?(Выборка.Выручка = NULL, 0, Выборка.Выручка);

		Количество=КоличествоРеализованных;
		Если Количество=0 Тогда Продолжить; КонецЕсли;

		НоваяСтрока=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество       = Количество;
		НоваяСтрока.Сумма            = ?(КоличествоРеализованных = 0, 0, Выручка * НоваяСтрока.Количество / КоличествоРеализованных);
	//	НоваяСтрока.СуммаПоступления = ?(КоличествоПолученных = 0, 0, Выборка.СуммаПоступления * НоваяСтрока.Количество / КоличествоПолученных);
		НоваяСтрока.Цена             = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
	//	НоваяСтрока.ЦенаПоступления  = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.СуммаПоступления / НоваяСтрока.Количество);

		Если СпособРасчетаКомиссионногоВознаграждения=Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения, Истина, Истина, УчетНалоговСервер.СтавкаНДС(СтавкаНДСВознаграждения));
		ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения, Истина, Истина, УчетНалоговСервер.СтавкаНДС(СтавкаНДСВознаграждения));
		КонецЕсли;
		НоваяСтрока.ID_Поставщики=СтрокаКонтрагент.ID;
	КонецЦикла;

КонецПроцедуры

Функция КоэффициентПересчета(СтруктураШД)
	Если Не СтруктураШД.ВалютаДокумента=СтруктураШД.ВалютаРегламентированногоУчета Тогда
		Если Число(СтруктураШД.КурсДокумента)=0 Или Число(СтруктураШД.КратностьДокумента)=0 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат СтруктураШД.КурсДокумента/СтруктураШД.КратностьДокумента;		
	КонецЕсли;
	Возврат 1; 
КонецФункции
 
Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти)
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураРеквизитов.Вставить("Подразделение", Подразделение);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
		тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
	КонецЦикла;
КонецПроцедуры
 
Функция СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок)
	ОписаниеТипаЧисло=ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);

	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("СтавкаНДСВознаграждения");	
	тзДанные.Колонки.Добавить("СтавкаНДС");
	тзДанные.Колонки.Добавить("ЦенаПродажи");	
	тзДанные.Колонки.Добавить("СуммаВзаиморасчетов", ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("Стоимость"          , ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("СтоимостьБезСкидок" , ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("НДС" 			   , ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти"); //НомерСтроки
	тзДанные.Колонки.Добавить("КоличествоДок"); //Количество
	тзДанные.Колонки.Добавить("ВидЦенности");
	тзДанные.Колонки.Добавить("Ценность");		
	тзДанные.Колонки.Добавить("СуммаБезНДС"		   , ОписаниеТипаЧисло);
		
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.КоличествоДок=СтрокаКоллекции.Количество;
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент /СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		СтрокаКоллекции.ЕдиницаИзмерения=СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		Если НЕ СтрокаКоллекции.ВестиПартионныйУчетПоСериям Тогда
			СтрокаКоллекции.СерияНоменклатуры=Неопределено;
		КонецЕсли;
		СтрокаКоллекции.ВидЦенности=Перечисления.ВидыЦенностей.Товары;

		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;

		СтрокаКоллекции.СтавкаНДС=СтавкаНДСВознаграждения;
		СтрокаКоллекции.СуммаНДС=Окр(СтрокаКоллекции.СуммаНДСВознаграждения*КоэффициентПересчета, 2);
		СтрокаКоллекции.СуммаВзаиморасчетов=СтрокаКоллекции.СуммаПоступления;
		СтрокаКоллекции.Стоимость=Окр(СтрокаКоллекции.СуммаВознаграждения*КоэффициентПересчета, 2);
		СтрокаКоллекции.СтоимостьБезСкидок=СтрокаКоллекции.Стоимость;							 
		СтрокаКоллекции.НДС=Окр(СтрокаКоллекции.СуммаНДС*КоэффициентПересчета, 2);
		
		СтрокаКоллекции.СуммаБезНДС=СтрокаКоллекции.Стоимость-?(СтруктураШД.УчитыватьНДС И СтруктураШД.СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");
	
	Возврат тзДанные;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
	//Движения по регистру "Продажи"
	ДвижениеПоРегистру_Продажи(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения по регистру "Реализованные товары"
	ДвижениеПоРегистру_РеализованныеТовары(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Взаиморасчеты с контрагентами"
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистрам "Учет НДС"
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры
 
Процедура ДвижениеПоРегистру_Продажи(СтруктураШД, СтруктураТД, Отказ)
	Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда Возврат; КонецЕсли;

	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);

	НоваяСтрока=Движения.Продажи.Добавить();
	НоваяСтрока.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
	НоваяСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	НоваяСтрока.ДокументПродажи=Ссылка;
	НоваяСтрока.ДоговорКонтрагента=ДоговорКонтрагента;
	НоваяСтрока.Контрагент=Контрагент;
	НоваяСтрока.Организация=Организация;
	НоваяСтрока.ЗаказПокупателя=Сделка;
	НоваяСтрока.Подразделение=Подразделение;
	НоваяСтрока.Количество=0;
	НоваяСтрока.Стоимость=Окр(СтруктураШД.СуммаВознаграждения*КоэффициентПересчета, 2);
	НоваяСтрока.СтоимостьБезСкидок = НоваяСтрока.Стоимость;
	НоваяСтрока.НДС=Окр(СтруктураТД.Товары.Итог("НДС")*КоэффициентПересчета, 2);
	НоваяСтрока.Период=Дата;
	НоваяСтрока.Активность=Истина;
	НоваяСтрока.Регистратор=Ссылка;	
КонецПроцедуры

//Процедура ДвижениеПоРегистру_ТоварыПолученные(СтруктураШД, СтруктураТД, Отказ)
//	тзДвижения=Движения.ТоварыПолученные.ВыгрузитьКолонки();
//	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
//		НоваяСтрока=тзДвижения.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
//	КонецЦикла;
//	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
//	тзДвижения.ЗаполнитьЗначения(Контрагент , "Контрагент");
//	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
//	тзДвижения.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПолучения");
//	Если ЗначениеЗаполнено(СтруктураШД.Сделка) Тогда
//		тзДвижения.ЗаполнитьЗначения(СтруктураШД.Сделка, "Сделка");
//	КонецЕсли;
//	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
//	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
//	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
//	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

//	Движения.ТоварыПолученные.Загрузить(тзДвижения);
//КонецПроцедуры

Процедура ДвижениеПоРегистру_РеализованныеТовары(СтруктураШД, СтруктураТД, Отказ)
	Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда Возврат; КонецЕсли;
	тзДвижения=Движения.РеализованныеТовары.ВыгрузитьКолонки();
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.ДокументПоставки=СтрокаКоллекции.ДокументПоступления;
	КонецЦикла;	
	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");	
	Если ЗначениеЗаполнено(СтруктураШД.Сделка) Тогда
		тзДвижения.ЗаполнитьЗначения(СтруктураШД.Сделка,"Сделка");
	КонецЕсли;
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");	

	Движения.РеализованныеТовары.Загрузить(тзДвижения);	
КонецПроцедуры
 
Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();

	// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
	Если НЕ ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		НоваяСтрока=тзДвижения.Добавить();
		НоваяСтрока.ДоговорКонтрагента=ДоговорКонтрагента;
		НоваяСтрока.Контрагент=Контрагент;
		НоваяСтрока.Организация=Организация;
		СуммаДолга=?(СтруктураШД.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);
		НоваяСтрока.СуммаБух=СуммаДолга;
		//*** НоваяСтрока.СуммаВал=СуммаДолга;
		НоваяСтрока.Активность=Истина;
		НоваяСтрока.Период=Дата;
		НоваяСтрока.Регистратор=Ссылка;
		НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
	КонецЕсли;

	// Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШД.УдержатьКомиссионноеВознаграждение И СуммаВознаграждения <> 0 Тогда
		НоваяСтрока=тзДвижения.Добавить();
		НоваяСтрока.ДоговорКонтрагента=ДоговорКонтрагента;
		НоваяСтрока.Контрагент=Контрагент;
		НоваяСтрока.Организация=Организация;
		НоваяСтрока.СуммаБух=СуммаВознаграждения;
		//*** НоваяСтрока.СуммаВал=СуммаВознаграждения;
		НоваяСтрока.Активность=Истина;
		НоваяСтрока.Период=Дата;
		НоваяСтрока.Регистратор=Ссылка;
		НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
	КонецЕсли;	

	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(тзДвижения);		
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ) Экспорт
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда	Возврат; КонецЕсли;
	Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда Возврат; КонецЕсли;
	
	ТаблицаВыручки=СтруктураТД.Товары;
	Если ТаблицаВыручки.Итог("Сумма")=0 И ТаблицаВыручки.Итог("НДС")=0 Тогда Возврат; КонецЕсли; 

	Если СтруктураШД.УчитыватьНДС Тогда
		ТаблицаВыручкиДляНДС=ТаблицаВыручки.Скопировать();
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Справочники.Номенклатура.ПустаяСсылка(),"Ценность,Номенклатура");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Истина, "Услуга");
		ТаблицаВыручкиДляНДС.Свернуть("ВидТабличнойЧасти,ВидЦенности, Ценность, СтавкаНДС, Номенклатура, Услуга", "Сумма,СуммаБезНДС,НДС,Количество");
		//***ТаблицаВыручкиДляНДС.Свернуть("ВидТабличнойЧасти,ВидЦенности, Ценность, СтавкаНДС, Номенклатура, Услуга", "Сумма,СуммаБезНДС,НДС,СуммаВал,СуммаБезНДСВал,НДСВал,Количество");
		ТаблицаВыручкиДляНДС.Колонки.Добавить("Комиссионный", Новый ОписаниеТипов("Булево")); // Предустанавливается значение по умолчанию - ложь

		УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШД, ТаблицаВыручкиДляНДС, Движения, Отказ);
	КонецЕсли;
	
	УчетНДС.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШД, ТаблицаВыручки, Движения, Отказ);
	Если СтруктураШД.УдержатьКомиссионноеВознаграждение Тогда
		ТаблицаДвижений_НДСРасчетыСПокупателями  = Движения.НДСРасчетыСПокупателями.Выгрузить();
		ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		
		Движения.НДСРасчетыСПокупателями.мПериод = СтруктураШД.Дата;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();		
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	СтавкаНДСВознаграждения = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор с контрагентом должен иметь вид договора с комитентом!");
			Возврат;
		КонецЕсли;

		Сделка = Основание.Сделка;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		Если Основание.Проведен Тогда
			ЗаполнитьРеализованными(Основание);
		КонецЕсли;

	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	//	Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если Основание.Проведен Тогда
	//		Сделка = Основание;
	//		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
	//		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
	//		ЗаполнитьТовары();
	//	КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;

	Для Каждого СтрокаКоллекции Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаКоллекции.ЕдиницаИзмеренияМест) И СтрокаКоллекции.КоличествоМест=0 Тогда
			СтрокаКоллекции.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;		
	КонецЦикла;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = Товары.Итог("Сумма");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения");
	
	ОбщегоНазначения.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	
	//////Заголовок=ДополнительныеСвойства.Заголовок;
	//////СтруктураШД=ПодготовитьСтруктуруШапкиДокумента(РежимПроведения, Отказ, ДополнительныеСвойства.Заголовок);
	//////СтруктураШД.Вставить("РежимПроведения", РежимПроведения);	
	//////
	//////
	//////СтруктураТД=ПодготовитьТаблицыДокумента(СтруктураШД, Отказ, ДополнительныеСвойства.Заголовок);
	//////Если Отказ Тогда Возврат; КонецЕсли;
	//////
	//////Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
	//////	Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
	//////		Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
	//////	КонецЦикла;
	//////	Возврат;
	//////КонецЕсли;

	//////ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
	
	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);
	СтруктураШД.Вставить("СуммаВключаетНДС", Истина);
	СтруктураШД.Вставить("УчитыватьНДС", Истина);

	//Проверка реквизитов шапки
	ВзаиморасчетыСервер.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШД.ДоговорОрганизация, Отказ, Заголовок);
	
	//Формирование значений реквизитов табличных частей
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Товары", СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));	

	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Покупка");

мСписокДопустимыхВидовДоговоров=Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

мСтруктураПараметровДляПолученияДоговора=Новый Структура();
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);