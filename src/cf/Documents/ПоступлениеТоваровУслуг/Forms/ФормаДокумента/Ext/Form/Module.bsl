&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступленияТоваров."+стрЗаменить(Команда.Имя, "Операция_", ""));
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаСервере
Функция ТекущийВидОперации(стрВидОперации) Экспорт
	Возврат Объект.ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров[стрВидОперации];
КонецФункции

&НаСервере
Функция ЭтоКорректировка()
	Если НЕ ЗначениеЗаполнено(Объект.Подвид) Тогда Возврат Ложь; КонецЕсли; 
	Возврат СокрЛП(Объект.Подвид.ИмяПредопределеного)="Корректировка";
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
	Элементы.ГиперссылкаСчетФактура.Заголовок=УправлениеДиалогамиКлиент.ТекстСчетаФактуры(УчетНалоговСервер.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураПолученный"));
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()
	Объект.СуммаДокумента=Объект["Товары"].Итог("Сумма")+Объект["Услуги"].Итог("Сумма")+Объект["ОбъектыСтроительства"].Итог("Сумма")+Объект["НематериальныеАктивы"].Итог("Сумма");
	Объект.СуммаНДС=Объект["Товары"].Итог("СуммаНДС")+Объект["Услуги"].Итог("СуммаНДС")+Объект["ОбъектыСтроительства"].Итог("СуммаНДС")+Объект["НематериальныеАктивы"].Итог("СуммаНДС");

	Если Объект.УчитыватьНДС И Не Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента=Объект.СуммаДокумента+Объект.СуммаНДС;
	КонецЕсли;

	ВременнаяСтрока="Тип цен: "+?(ЗначениеЗаполнено(Объект.ТипЦен), Строка(Объект.ТипЦен)+".", "Не заполнено!");
	Элементы.ЦенаВалютаДокумента.Заголовок=ВременнаяСтрока;

	Элементы.НадписьВсего.Заголовок="Всего ("+СокрЛП(Объект.ВалютаДокумента)+")";
	Элементы.НадписьВсегоНДС.Заголовок="НДС "+?(Объект.СуммаВключаетНДС, "(в т. ч.)", "(сверху)");
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	тпТабличноеПоле_ОбновитьПредставление("Товары");
	тпТабличноеПоле_ОбновитьПредставление("Услуги");	
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			УстановитьВидимостьЭлементовФормы();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	МассивТЧ=СтрРазделить("Товары,Услуги,ОбъектыСтроительства,НематериальныеАктивы", ",");
	Для Каждого ИмяТабличнойЧасти Из МассивТЧ Цикл
		Элементы[ИмяТабличнойЧасти+"СтавкаНДС"].Видимость=Объект.УчитыватьНДС;
		Элементы[ИмяТабличнойЧасти+"СуммаНДС"].Видимость=Объект.УчитыватьНДС;
		Если НЕ Объект.УчитыватьНДС Тогда
			Для каждого СтрокаКоллекции Из Объект[ИмяТабличнойЧасти] Цикл
				Если ЗначениеЗаполнено(СтрокаКоллекции.СтавкаНДС) Тогда
					СтрокаКоллекции.СтавкаНДС=ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
				КонецЕсли;
				Если НЕ СтрокаКоллекции.СуммаНДС=0 Тогда
					СтрокаКоллекции.СуммаНДС=0;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;

	ЭтоКорректировка=ЭтоКорректировка();
	Элементы.Сделка.Заголовок=?(ЭтоКорректировка, "Коррект. док.", "Основание");
	
	Если ЭтоКорректировка Тогда
		Если НЕ ТипЗнч(Объект.Сделка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			//*** Объект.Сделка=Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
		КонецЕсли;		
		//*** Элементы.ОсновнаяПанель.Страницы.ВозвратнаяТара.Видимость=Ложь;

		Элементы.ТоварыЦена.Заголовок="Цена после изменения";
		Элементы.ТоварыКоличество.Заголовок="Количество разница";
		Элементы.ТоварыСумма.Заголовок="Сумма разница";
		Элементы.ТоварыСуммаНДС.Заголовок="Сумма НДС разница";
		Элементы.ТоварыВсего.Заголовок="Всего разница";
		
		Элементы.УслугиЦена.Заголовок="Цена после изменения";
		Элементы.УслугиКоличество.Заголовок="Количество разница";
		Элементы.УслугиСумма.Заголовок="Сумма разница";
		Элементы.УслугиСуммаНДС.Заголовок="Сумма НДС разница";
		Элементы.УслугиВсего.Заголовок="Всего разница";		
	Иначе
		Элементы.ТоварыЦена.Заголовок="Цена";
		Элементы.ТоварыКоличество.Заголовок="Количество";
		Элементы.ТоварыСумма.Заголовок="Сумма";
		Элементы.ТоварыСуммаНДС.Заголовок="Сумма НДС";
		Элементы.ТоварыВсего.Заголовок="Всего";

		Элементы.УслугиЦена.Заголовок="Цена";
		Элементы.УслугиКоличество.Заголовок="Количество";
		Элементы.УслугиСумма.Заголовок="Сумма";
		Элементы.УслугиСуммаНДС.Заголовок="Сумма НДС";
		Элементы.УслугиВсего.Заголовок="Всего";		
	КонецЕсли;
	
	Элементы.ТоварыКоличество1.Видимость=ЭтоКорректировка;
	Элементы.ТоварыКоличество2.Видимость=ЭтоКорректировка;

	Элементы.ТоварыСумма1.Видимость=ЭтоКорректировка;
	Элементы.ТоварыСумма2.Видимость=ЭтоКорректировка;

	Элементы.ТоварыСуммаНДС1.Видимость=ЭтоКорректировка;
	Элементы.ТоварыСуммаНДС2.Видимость=ЭтоКорректировка;		

	Элементы.УслугиКоличество1.Видимость=ЭтоКорректировка;
	Элементы.УслугиКоличество2.Видимость=ЭтоКорректировка;

	Элементы.УслугиСумма1.Видимость=ЭтоКорректировка;
	Элементы.УслугиСумма2.Видимость=ЭтоКорректировка;

	Элементы.УслугиСуммаНДС1.Видимость=ЭтоКорректировка;
	Элементы.УслугиСуммаНДС2.Видимость=ЭтоКорректировка;		

	Элементы.кпТовары_ОбновитьПредставление.Видимость=ЭтоКорректировка;
	Элементы.кпУслуги_ОбновитьПредставление.Видимость=ЭтоКорректировка;

	Элементы.КодВидаОперации.Видимость=Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.КодВидаОперации.Видимость=УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") ИЛИ УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая_ЕНВД");
	КонецЕсли;
	
	//Видимость закладок
	Видимость=Ложь;
	Если ТекущийВидОперации("Покупка") ИЛИ ТекущийВидОперации("ПокупкаВЛизинг") Тогда
		Видимость=Истина;
	КонецЕсли;
	Элементы.СтраницаОбъектыСтроительства.Видимость=Видимость;
	Элементы.СтраницаНематериальныеАктивы.Видимость=Видимость;
	Элементы.СтраницаВозвратнаяТара.Видимость=Видимость;
	Элементы.СтраницаПлатежныйКалендарь.Видимость=Видимость;

	//Колонки табличной части "Товары"
	Элементы.ТоварыКонтрагент.Видимость=ТекущийВидОперации("Перепредъявление");
	Элементы.ТоварыДоговорКонтрагента.Видимость=ТекущийВидОперации("Перепредъявление");

	//Колонки табличной части "Услуги"
	Элементы.УслугиКонтрагент.Видимость=ТекущийВидОперации("Перепредъявление");
	Элементы.УслугиДоговорКонтрагента.Видимость=ТекущийВидОперации("Перепредъявление");	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеДополнительныхРеквизитов() Экспорт
	МетаконфигураторСервер.ДопРеквизиты_ОбновлениеПредставления(ЭтаФорма);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	//*** тпТовары_Заполнить(Параметр2.Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЦенаВалюта(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметр1);

	//ПересчитатьЦеныПоВалюте
	Если Параметр1.ПерезаполнитьЦеныПоТипу Тогда
		НаДату=ТекущаяДата();
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.ТипЦен, НаДату, СтрокаКоллекции.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму(СтрокаКоллекции);
		КонецЦикла;
		Для каждого СтрокаКоллекции Из Объект.Услуги Цикл
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура,, Объект.ТипЦен, НаДату);
			тпУслуги_РассчитатьСумму(СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;

	ОбновитьНадписи();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

&НаКлиенте
Функция СписокВидовДоговоров()
	спВидыДоговоров=Новый СписокЗначений;
	спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	Если ТекущийВидОперации("Перепредъявление") Тогда
		спВидыДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
	Возврат спВидыДоговоров;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаСервере
Процедура Атрибут_ПриИзменении_Сервер(стрИмя)
	Если стрИмя="ДоговорКонтрагента" Тогда
		//РеквизитФормыВЗначение("Объект")
		
		//ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента
		//Объект.ДоговорКонтрагента
		//СтруктураРеквизитовДокумента=ЦенообразованиеСервер.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Объект);
		//ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, ПредыдущиеЗначенияАтрибутов.ВалютаВзаиморасчетов, ДополнительныеСвойства.ВалютаБухУчета, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, СтруктураРеквизитовДокумента, "Продажа", "Товары", ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");		

	ИначеЕсли Элемент.Имя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", СписокВидовДоговоров());

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);
		
	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		//Атрибут_ПриИзменении_Сервер(Элемент.Имя);

		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="Подвид" Тогда
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="ДатаВходящегоДокумента" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата=Объект.ДатаВходящегоДокумента;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="ГиперссылкаСчетФактура" Тогда
		Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
			Сообщить("Необхоимо записать документ!"); Возврат;		
		КонецЕсли; 
		УправлениеДиалогамиКлиент.ВвестиСчетФактуру(Объект.Ссылка, ЭтаФорма, "СчетФактураПолученный");
	КонецЕсли;
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);

	Если Элемент.Имя="ДоговорКонтрагента" Тогда
		МассивПараметров=Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", СписокВидовДоговоров()));
		Элементы.ДоговорКонтрагента.ПараметрыВыбора=Новый ФиксированныйМассив(МассивПараметров);

	ИначеЕсли Элемент.Имя="Склад" Тогда
		Если Объект.ВидПоступления=ПредопределенноеЗначение("Перечисление.ВидыПоступленияТоваров.ПоОрдеру") Тогда
			СтандартнаяОбработка=Ложь;

			ПараметрыФормы=Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходныйОрдер.ОтПоставщика")));

			ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
		
	ИначеЕсли стрКоманда="ОбновитьПредставлениеТабличнойЧасти" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;
	
	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаСервере
Процедура тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть)
	ЭтоКорректировка=ЭтоКорректировка() И ЗначениеЗаполнено(Объект.Сделка) И Объект.Сделка.Метаданные().Имя="ПоступлениеТоваровУслуг";
	Если ЭтоКорректировка Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Сделка);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Номенклатура КАК Номенклатура,
		|	ИсточникДанных.Сумма КАК Сумма,
		|	ИсточникДанных.СуммаНДС КАК СуммаНДС,
		|	ИсточникДанных.Количество КАК Количество
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг."+стрТабличнаяЧасть+" КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Ссылка = &Ссылка
		|";
		тзДанные=Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	Для каждого СтрокаКоллекции Из Объект[стрТабличнаяЧасть] Цикл
		СтрокаКоллекции.Всего=СтрокаКоллекции.Сумма+?(Объект.СуммаВключаетНДС, 0, СтрокаКоллекции.СуммаНДС);
		Если ЭтоКорректировка Тогда
			РезультатПоиска=тзДанные.Найти(СтрокаКоллекции.Номенклатура, "Номенклатура");
			Если НЕ РезультатПоиска=Неопределено Тогда
				СтрокаКоллекции.Количество1=РезультатПоиска.Количество;
				СтрокаКоллекции.Количество2=СтрокаКоллекции.Количество+РезультатПоиска.Количество;

				СтрокаКоллекции.Сумма1=РезультатПоиска.Сумма;
				СтрокаКоллекции.Сумма2=СтрокаКоллекции.Сумма+РезультатПоиска.Сумма;

				СтрокаКоллекции.СуммаНДС1=РезультатПоиска.СуммаНДС;
                СтрокаКоллекции.СуммаНДС2=СтрокаКоллекции.СуммаНДС+РезультатПоиска.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Возвратная тара"

&НаКлиенте
Процедура кпВозвратнаяТара_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ВозвратнаяТара"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");		
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ВозвратнаяТара", "");
	ТекущиеДанные=Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура,, Объект.ТипЦен, ТекущаяДата());
		тпВозвратнаяТара_РассчитатьСумму();

	ИначеЕсли стрКолонка="Количество" Тогда
		тпВозвратнаяТара_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпВозвратнаяТара_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
		ОбновитьНадписи();

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпВозвратнаяТара_РассчитатьСумму();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_РассчитатьСумму(СпособРасчета=Неопределено)
	ТекущиеДанные=Элементы.ВозвратнаяТара.ТекущиеДанные;
	ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;

	ОбновитьНадписи();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Услуги"

&НаКлиенте
Процедура кпУслуги_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Услуги"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");		
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Услуги", "");
	ТекущиеДанные=Элементы.Услуги.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.СтавкаНДС=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "СтавкаНДС");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура,,Объект.ТипЦен, ТекущаяДата());
		тпУслуги_РассчитатьСумму();

	ИначеЕсли стрКолонка="Количество" Тогда
		тпУслуги_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпУслуги_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
		ОбновитьНадписи();

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпУслуги_РассчитатьСумму();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпУслуги_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Услуги.ТекущиеДанные;
	КонецЕсли; 	

	ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);

	ОбновитьНадписи();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Объекты строительства"

&НаКлиенте
Процедура тпОбъектыСтроительства_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпОбъектыСтроительства_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпОбъектыСтроительства_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпОбъектыСтроительства_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОбъектыСтроительства", "");
	ТекущиеДанные=Элементы.ОбъектыСтроительства.ТекущиеДанные;

	Если стрКолонка="ОбъектСтроительства" Тогда

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		ОбновитьНадписи();

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		ОбновитьНадписи();
	КонецЕсли;
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "НМА"

&НаКлиенте
Процедура тпНематериальныеАктивы_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "НематериальныеАктивы", "");
	ТекущиеДанные=Элементы.НематериальныеАктивы.ТекущиеДанные;

	Если стрКолонка="НематериальныйАктив" Тогда

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		ОбновитьНадписи();

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		ОбновитьНадписи();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпНематериальныеАктивы_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпНематериальныеАктивы_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпНематериальныеАктивы_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		тпТовары_Заполнить(стрКоманда);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаНДС");

		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.СтавкаНДС=СтруктураНоменклатуры.СтавкаНДС;

		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);

		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму();
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
				тпТовары_РассчитатьСумму();
			КонецЕсли;
		КонецЕсли;		

	ИначеЕсли стрКолонка="Количество" Тогда
		тпТовары_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);		
		ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
		ОбновитьНадписи();

	ИначеЕсли стрКолонка="СуммаНДС" Тогда
		ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
		ОбновитьНадписи();
		
	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпТовары_РассчитатьСумму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	ТекущиеДанные.Сумма=Сумма;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);

	ОбновитьНадписи();
КонецПроцедуры

&НаСервере
Процедура тпТовары_Заполнить(стрКоманда)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	
	Если стрКоманда="" Тогда
		
	ИначеЕсли стрКоманда="ЗаполнитьПоСериям" Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСерии(ДокументОбъект);
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Сделки"

&НаКлиенте
Процедура тпСделки_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура кпСделки_ВыполнитьДействие(Команда)
	тпСделки_Подбор("Заполнить", ЭтаФорма);
КонецПроцедуры
 
&НаКлиенте
Процедура тпСделки_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь; тпСделки_Подбор("Изменить", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_Подбор(стрКоманда, Владелец)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("МножественныйВыбор", стрКоманда="Заполнить");

	УправлениеЗаказамиКлиент.ВыполнитьДействие(СтруктураПараметров, Владелец, стрКоманда);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	Если Объект.Ссылка.Пустая() Тогда
		Объект.РегистрироватьЦеныПоставщика=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("РегистрироватьЦеныПоставщика");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");

	РазрешитьРедактированиеЦен=НастройкиПользователяСервер.ЗначениеПраваПользователя("РедактированиеЦенВДокументах");
	Элементы.ТоварыСумма.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ТоварыЦена.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ТоварыСуммаНДС.Доступность=РазрешитьРедактированиеЦен;
	
	Элементы.ВозвратнаяТараСумма.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ВозвратнаяТараЦена.Доступность=РазрешитьРедактированиеЦен;

	Элементы.УслугиСумма.Доступность=РазрешитьРедактированиеЦен;
	Элементы.УслугиЦена.Доступность=РазрешитьРедактированиеЦен;
	Элементы.УслугиСуммаНДС.Доступность=РазрешитьРедактированиеЦен;

	ЗаполнитьТекстПроСчетФактуру();
	
	Элементы.КодВидаОперации.СписокВыбора.Добавить("01", "01 - Получение товаров, работ, услуг");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("02", "02 - Авансы выданные");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("10", "10 - Безвозмездное получение товаров, работ, услуг");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("15", "15 - Совместное приобретение товаров, работ, услуг для собственных нужд и для комитента");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("17", "17 - Возврат от покупателя-физического лица");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("18", "18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("19", "19 - Ввоз товаров из Евразийского экономического союза");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("20", "20 - Ввоз импортных товаров на территорию РФ");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("22", "22 - Возврат, зачет авансовых платежей, п.5 ст. 171, п.6 ст. 172 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 ст. 171 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("24", "24 - Подтверждение ставки 0% после истечения 180 дней");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("25", "25 - Вычет НДС при подтверждении ставки 0% по ранее восстановленному НДС, а также п.7 ст.172 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 ст. 169 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 ст. 169 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("32", "32 - Вычет НДС в ОЭЗ Калининградской обл., п.14 ст. 171 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("36", "36 - Вычет НДС при реализации гражданину иностранного государства, п.4.1 ст. 171 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("41", "41 - Авансы выданные за товары п.8 ст. 161 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("42", "42 - Получение товаров п.8 ст. 161 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("43", "43 - Возврат, зачет авансовых платежей за товары п.8 ст. 161 НК");
	Элементы.КодВидаОперации.СписокВыбора.Добавить("44", "44 - Изменение стоимости полученных товаров п.8 ст. 161 НК в сторону уменьшения");

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ Объект.Ссылка.Пустая() И ТипЗнч(ВладелецФормы)=Тип("УправляемаяФорма") И ВладелецФормы.Объект.Свойство("ДокументОснование") Тогда
		ВладелецФормы.Объект.ДокументОснование=Объект.Ссылка;
	КонецЕсли;	
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="Запись_СчетФактураПолученный" Тогда
		ЗаполнитьТекстПроСчетФактуру();
	КонецЕсли;
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.АвтоЗаполнениеРеквизитовДокумента();
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпТабличноеПоле_ОбновитьПредставление("Товары");
	тпТабличноеПоле_ОбновитьПредставление("Услуги");
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И НЕ Объект.Организация=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "Организация") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбран договор контрагента, не соответствующий организации, указанной в документе!", , "Объект.ДоговорКонтрагента"); Отказ=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
