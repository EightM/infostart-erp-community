Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт
	СуммаДокумента=0; СуммаНДС=0;

	МассивТЧ=Новый Массив;
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Услуги");
	МассивТЧ.Добавить("ОбъектыСтроительства");
	МассивТЧ.Добавить("НематериальныеАктивы");
	Для каждого стрТабличнаяЧасть Из МассивТЧ Цикл
		тчСсылка=ЭтотОбъект[стрТабличнаяЧасть];
		СуммаДокумента=СуммаДокумента+тчСсылка.Итог("Сумма");
		СуммаНДС=СуммаНДС+тчСсылка.Итог("СуммаНДС");
	КонецЦикла;
	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		СуммаДокумента=СуммаДокумента+СуммаНДС;
	КонецЕсли;

	//заполняем реквизиты табличной части "Товары"
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И СтрокаТабличнойЧасти.КоличествоМест=0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
		Если Не УчитыватьНДС Тогда СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС; КонецЕсли;
		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		Если СтрокаТабличнойЧасти.Качество.Пустая() Тогда
			СтрокаТабличнойЧасти.Качество=Справочники.Качество.Новый;
		КонецЕсли;
	КонецЦикла;

	//заполняем реквизиты табличной части  "Услуги"
	Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
		Если Не УчитыватьНДС Тогда СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС; КонецЕсли;			
		Если СтрокаТабличнойЧасти.Подразделение.Пустая() Тогда СтрокаТабличнойЧасти.Подразделение=Подразделение; КонецЕсли;
	КонецЦикла;
	
	//заполняем реквизиты табличной части "Возвратная тара"
	Для каждого СтрокаТабличнойЧасти Из ВозвратнаяТара Цикл
		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
			СтрокаТабличнойЧасти.ПриходныйОрдер=Склад;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад.Склад;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры

Процедура СторнироватьДокумент(СторнируемыйДокумент)
	МассивРегистровДляПроведения=Неопределено;
	ДополнительныеСвойства.Свойство("РегистрыДляПроведения", МассивРегистровДляПроведения);
	
	Если ТипЗнч(СторнируемыйДокумент)=Тип("ДокументСсылка.УстановкаСкидокНоменклатуры") Тогда
		СторнироватьДвижения_РегистрыСведений("СкидкиНаценкиНоменклатуры");
		СторнироватьДвижения_РегистрыСведений("СкидкиНаценкиПоЦеновымГруппам");
		СторнироватьДвижения_РегистрыСведений("СкидкиНоменклатурыНатуральные");
		Возврат;
	КонецЕсли; //Исключение из правил 
	
	мдДокумент=СторнируемыйДокумент.Метаданные();
	Для каждого РегистрДокумента Из мдДокумент.Движения  Цикл
		Если НЕ МассивРегистровДляПроведения=Неопределено Тогда
			Если МассивРегистровДляПроведения.Найти(РегистрДокумента.Имя)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Метаданные.РегистрыНакопления.Содержит(РегистрДокумента) Тогда
			СторнироватьДвижения_РегистрыНакопления(РегистрДокумента.Имя);
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(РегистрДокумента) Тогда		
			СторнироватьДвижения_РегистрыБухгалтерии(РегистрДокумента.Имя);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////
// Заполнение табличных частей по документу - основанию

Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПоставщикам(ДокументОснование, стрТабличнаяЧасть, УчитыватьОстатки=Ложь) Экспорт
	ТабличнаяЧасть=ДокументОснование[стрТабличнаяЧасть];
	Если ТабличнаяЧасть.Количество()=0 Тогда Возврат; КонецЕсли; 
	
	Если УчитыватьОстатки Тогда
		стрУсловие="Организация = &Организация И Номенклатура В (&Номенклатура) И ЗаказПоставщику = &Заказ";

		МассивХарактеристикНоменклатуры=Новый Массив;
		Если стрТабличнаяЧасть="Товары" Тогда
			МассивХарактеристикНоменклатуры=ТабличнаяЧасть.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
			Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
				стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
			КонецЕсли;
		КонецЕсли;

		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ИсточникДанных", ТабличнаяЧасть.Выгрузить());
		Запрос.УстановитьПараметр("НаДату", МоментВремени());
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Заказ", ДокументОснование);
		Запрос.УстановитьПараметр("Номенклатура", ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
		Запрос.Текст="
		|ВЫБРАТЬ *
		|ПОМЕСТИТЬ ИсточникДанных
		|ИЗ &ИсточникДанных Как ИсточникДанных
		|;
		|
		|ВЫБРАТЬ
		|	&Заказ Как ЗаказПоставщика,
		|	ИсточникДанных1.Цена,
		|";
		
		Если стрТабличнаяЧасть="Товары" Тогда
		Запрос.Текст=Запрос.Текст+"
		|	ИсточникДанных1.СтавкаНДС,
		|	ИсточникДанных1.ЕдиницаИзмерения,
		|	ИсточникДанных1.ЕдиницаИзмеренияМест,
		|	ИсточникДанных1.КоличествоМест,
		|	ИсточникДанных1.ХарактеристикаНоменклатуры,
		|	ИсточникДанных1.Коэффициент,
		|";
		КонецЕсли;

		Запрос.Текст=Запрос.Текст+"		
		|	ИсточникДанных1.Номенклатура,
		|	ИсточникДанных2.ЗаказОснование Как Заказ,
		|	ИсточникДанных1.Количество КАК КоличествоДок,
		|	ИсточникДанных2.КоличествоОстаток КАК Количество
		|ИЗ
		|	ИсточникДанных КАК ИсточникДанных1
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, "+стрУсловие+") Как ИсточникДанных2
		|		ПО ИсточникДанных1.Номенклатура = ИсточникДанных2.Номенклатура
		|		"+?(МассивХарактеристикНоменклатуры.Количество()=0, "", "И ИсточникДанных1.ХарактеристикаНоменклатуры = ИсточникДанных2.ХарактеристикаНоменклатуры")+"
		|";
		тзДвижения=Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаКоллекции Из тзДвижения Цикл
			СтрокаКоллекции.Количество=Мин(СтрокаКоллекции.Количество, СтрокаКоллекции.КоличествоДок);
			Если СтрокаКоллекции.Количество<=0 Тогда Продолжить; КонецЕсли;
			
			НоваяСтрока=ЭтотОбъект[стрТабличнаяЧасть].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);

			Если НЕ стрТабличнаяЧасть="ВозвратнаяТара" Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЗаполнитьТабличнуюЧастьПоДокументуОснования(ДокументОснование, стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДокументуОснования(ДокументОснование, стрТабличнаяЧасть) Экспорт
	ПересчитыватьСкидку=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	
	Курс=ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	Кратность=ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИсточникДанных.Ссылка.УчитыватьНДС     КАК УчитыватьНДС,
    |	ИсточникДанных.Ссылка.ВалютаДокумента  КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ИсточникДанных.Ссылка.ВалютаДокумента = ИсточникДанных.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ИсточникДанных.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА ИсточникДанных.Ссылка.ВалютаДокумента = ИсточникДанных.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ИсточникДанных.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ИсточникДанных."+стрТабличнаяЧасть+" Как ТабличнаяЧасть
	|ИЗ
	|	Документ."+ДокументОснование.Метаданные().Имя+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументОснование
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда Возврат; КонецЕсли;
	
	тзТабличнаяЧать=Выборка.ТабличнаяЧасть.Выгрузить();
	Для каждого СтрокаКоллекции Из тзТабличнаяЧать Цикл
		НоваяСтрока=ЭтотОбъект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		//НоваяСтрока.Качество=Справочники.Качество.Новый;
		НоваяСтрока.Цена=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаКоллекции.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс, Выборка.КратностьДокумента, Кратность);
		Если НЕ стрТабличнаяЧасть="ВозвратнаяТара" Тогда
			НоваяСтрока.Сумма=ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
								ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
								Выборка.КурсДокумента, Курс,
								Выборка.КратностьДокумента, Кратность),
								Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
								Выборка.СуммаВключаетНДС,
								УчитыватьНДС,
								СуммаВключаетНДС,
								УчетНалоговСервер.СтавкаНДС(НоваяСтрока.СтавкаНДС));
		КонецЕсли;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект,,Ложь,ПересчитыватьСкидку,Ложь, стрТабличнаяЧасть);
		Если НЕ стрТабличнаяЧасть="ВозвратнаяТара" Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, ТабличнаяЧасть) Экспорт
	
	ДополнительныеРеглПоляОбщ = "";
	ДополнительныеРеглПоляТовары = "";

	ИмяТабличнойЧасти=?(ТабличнаяЧасть=ВозвратнаяТара, "ВозвратнаяТара", "Товары");
	СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ТипЦен"			 , ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен"	 , Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Склад"			 , ДокументОснование.Склад);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	Остатки.Склад КАК Склад,
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Номенклатура.СтавкаНДС                            КАК СтавкаНДС,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения," +
		ДополнительныеРеглПоляОбщ +"
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры," +
		ДополнительныеРеглПоляТовары +"
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") +
	?(ТабличнаяЧасть = Товары, "
	|	СУММА(ДокТовары.Количество*ДокТовары.Коэффициент)","
	|	СУММА(ДокТовары.Количество)")+" КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании,
	|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА "+
	?(ТабличнаяЧасть = Товары, "
	|       ДокТовары.ЕдиницаИзмерения ","
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков ")+"
	|   ИНАЧЕ
	|       ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА "+
	?(ТабличнаяЧасть = Товары, "
	|       ДокТовары.ЕдиницаИзмерения ","
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков ")+"
	|       ИНАЧЕ
	|           ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения 
	|       КОНЕЦ
	|   КОНЕЦ)                                                   КАК ЕдиницаИзмерения,
	|   МАКСИМУМ(ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА "+
	?(ТабличнаяЧасть = Товары, "
	|		ДокТовары.ЕдиницаИзмерения.Коэффициент ","
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ")+"
	|   ИНАЧЕ
	|       ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА "+
	?(ТабличнаяЧасть = Товары, "
	|       ДокТовары.ЕдиницаИзмерения.Коэффициент ","
	|       Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ")+"
	|       ИНАЧЕ
	|           ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент 
	|       КОНЕЦ
	|   КОНЕЦ)                                                   КАК Коэффициент
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование И Склад = &Склад) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	| И ДокТовары.СерияНоменклатуры          = Остатки.СерияНоменклатуры	", "") + " 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|   ПО ДокТовары.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура " + 
	?(ТабличнаяЧасть = Товары, "
	|      И ДокТовары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры ", "") + "
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.ЕдиницаИзмерения,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + ",
	|	Остатки.Склад
	| УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти = Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии)
			                                                 * Выборка.КоэффициентЕдиницыХранения/Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

			ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШД, ДополнительныеСвойства.ВалютаБухУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти=ВозвратнаяТара.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);

			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти , ЭтотОбъект);
		КонецЕсли;

		СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОснование;
		СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад = ДокументОснование.Склад;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////
// Прочее

Функция ТекущийВидОперации(стрВидОперации) Экспорт
	Возврат ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров[стрВидОперации];
КонецФункции

Функция ТекущийВидДоговора(стрВидДоговора, ВидДоговора) Экспорт
	Возврат ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов[стрВидДоговора];
КонецФункции

Функция СтатусПартииПрихода(СтруктураШД) 
	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Возврат Перечисления.СтатусыПартийТоваров.НаКомиссию;
	КонецЕсли;
	Возврат Перечисления.СтатусыПартийТоваров.Купленный;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	//***
	//Для каждого СтрокаКоллекции Из Движения Цикл
	// 	СтрокаКоллекции.Записывать=Истина;
	//КонецЦикла;
	//***

	//Движения по регистру "Списанные товары"
	///******* ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);

	// Движения по регистру "Учет ТМЦ (ячейки\розница)"
	ДвижениеПоРегистру_УчетТМЦ(СтруктураШД,СтруктураТД, Отказ);

	// Движения по регистру "Учет ТМЦ (к получению)"
	ДвижениеПоРегистру_ТоварыКПолучениюНаСклады(СтруктураШД, СтруктураТД, Отказ);
	
	// Движения по регистру "Учет ТМЦ (полученные)"
	ДвижениеПоРегистру_ТоварыПолученные(СтруктураШД, СтруктураТД, Отказ);

	// Движения по регистру "Учет ТМЦ ( потребности)"
	ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ);
	
	// Движения по регистру "Заказы поставщикам"
	ДвижениеПоРегистру_УчетЗаказов(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Затраты"
	ДвижениеПоРегистру_Затраты(СтруктураШД, СтруктураТД, Отказ);

	// Движения по регистру "Учет закупок"
	ДвижениеПоРегистру_Закупки(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Цены номенклатуры"
	ДвижениеПоРегистру_ЦеныНоменклатуры(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения по регистру "Взаиморасчеты с контрагентами"
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);

	// Движения по регистру "Учет НДС"
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);	
	
	// Движения по регистру "Учет ТМЦ (партии)"
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
	
	ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ);
	
//***	Движения.Записать(); //***
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетПотребностей") Тогда Возврат; КонецЕсли;

	тзТМЦ=Новый ТаблицаЗначений;
	тзТМЦ.Колонки.Добавить("Склад");
	тзТМЦ.Колонки.Добавить("Номенклатура");
	тзТМЦ.Колонки.Добавить("ХарактеристикаНоменклатуры");
	тзТМЦ.Колонки.Добавить("Количество");
	тзТМЦ.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзТМЦ.Колонки.Добавить("ВидТабличнойЧасти");

	МассивСерийНоменклатуры=Новый Массив;	
	МассивХарактеристикНоменклатуры=Новый Массив;	
	МассивСкладов=Новый Массив;
    МассивТоваров=Новый Массив;

	Для каждого СтрокаКоллекции1 Из СтруктураТД Цикл
		Если НЕ СтрокаКоллекции1.Ключ="Товары" И НЕ СтрокаКоллекции1.Ключ="Тара" Тогда Продолжить; КонецЕсли;

		Для каждого СтрокаКоллекции2 Из СтрокаКоллекции1.Значение Цикл
			ЗаполнитьЗначенияСвойств(тзТМЦ.Добавить(), СтрокаКоллекции2);
			Если СтрокаКоллекции1.Ключ="Товары" Тогда
				Если ЗначениеЗаполнено(СтрокаКоллекции2.ХарактеристикаНоменклатуры) Тогда
					МассивХарактеристикНоменклатуры.Добавить(СтрокаКоллекции2.ХарактеристикаНоменклатуры);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаКоллекции2.Склад) Тогда
				МассивСкладов.Добавить(СтрокаКоллекции2.Склад);
			КонецЕсли;
			МассивТоваров.Добавить(СтрокаКоллекции2.Номенклатура);
		КонецЦикла;
	КонецЦикла;
	
	МассивСделок=Новый Массив;
	Для каждого СтрокаКоллекции Из Сделки Цикл
		Если НЕ ТипЗнч(СтрокаКоллекции.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			МассивСделок.Добавить(СтрокаКоллекции.Сделка);
		КонецЕсли; 
	КонецЦикла; 

	стрУсловие="Организация = Организация И Склад В (&Склад) И Номенклатура В (&Номенклатура)";
	Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
		МассивХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	КонецЕсли;
	Если НЕ МассивСделок.Количество()=0 Тогда
		стрУсловие=стрУсловие+" И ДокументРезерва В (&Сделка)";
	КонецЕсли;
	ОрганизацияСсылка=Организация;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", МоментВремени());
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Склад", МассивСкладов);
	Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("Сделка", МассивСделок);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва,
	|	СУММА(ИсточникДанных1.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.УчетПотребностей.Остатки(&НаДату, "+стрУсловие+") КАК ИсточникДанных1
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва
	|";
	тзОстаткиПоСделкам=Запрос.Выполнить().Выгрузить();
	Если тзОстаткиПоСделкам.Количество()=0 Тогда Возврат; КонецЕсли;

	//Отсортируем сделки по порядку списания
	Если Сделки.Количество()>0 Тогда
		тзОстаткиПоСделкам.Колонки.Добавить("ПорядковыйНомер");
		Для каждого СтрокаКоллекции Из Сделки Цикл
			РезультатПоиска=тзОстаткиПоСделкам.Найти(СтрокаКоллекции.Сделка, "ДокументРезерва");
			Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
			РезультатПоиска.ПорядковыйНомер=Сделки.Индекс(СтрокаКоллекции);
		КонецЦикла;
		тзОстаткиПоСделкам.Сортировать("ПорядковыйНомер Возвр");
	КонецЕсли;

	тзДвижения=Движения.УчетПотребностей.ВыгрузитьКолонки();

	СтруктураОтбора=Новый Структура("Склад,Номенклатура,ХарактеристикаНоменклатуры");
	Для каждого СтрокаКоллекции1 Из тзТМЦ Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКоллекции1);
		МассивСтрок=тзОстаткиПоСделкам.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКоллекции2 Из МассивСтрок Цикл
			текКоличество=Мин(СтрокаКоллекции2.Количество, СтрокаКоллекции1.Количество);
			Если текКоличество<=0 Или СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции1.Количество=СтрокаКоллекции1.Количество-текКоличество;
            СтрокаКоллекции2.Количество=СтрокаКоллекции2.Количество-текКоличество;

			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.ДокументРезерва=СтрокаКоллекции2.ДокументРезерва;
			НоваяСтрока.Количество=текКоличество;			
		КонецЦикла;
	КонецЦикла; 

    тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ОрганизацияСсылка, "Организация");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	Движения.УчетПотребностей.Загрузить(тзДвижения);
	
	//Учет резервов ТМЦ
	Если Константы.УчетРезервов.Получить() Тогда
		тзДвижения.Колонки.ДокументРезерва.Имя="Заказ";
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		Движения.УчетРезервовТМЦ.Загрузить(тзДвижения);
	КонецЕсли; 
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыПолученные(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыПолученные") Тогда Возврат; КонецЕсли;

	Если НЕ ТекущийВидОперации("ПриемВПереработку") И НЕ ТекущийВидДоговора("СКомитентом", СтруктураШД.ВидДоговора) Тогда
		Возврат;	
	КонецЕсли; 

	тзДвижения=Движения.ТоварыПолученные.ВыгрузитьКолонки();

	//Товары
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.СтатусПолучения=Перечисления.СтатусыПолученияПередачиТоваров[?(ТекущийВидДоговора("СКомитентом", СтруктураШД.ВидДоговора), "НаКомиссию", "ВПереработку")];
	КонецЦикла;

	//Возвратная тара
	Для каждого СтрокаКоллекции Из СтруктураТД.Тара Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.СтатусПолучения=Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара;
	КонецЦикла; 

	Если тзДвижения.Количество()=0 Тогда Возврат; КонецЕсли;

	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	тзДвижения.ЗаполнитьЗначения(Контрагент , "Контрагент");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");

	Движения.ТоварыПолученные.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыКПолучениюНаСклады(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыКПолучениюНаСклады") Тогда Возврат; КонецЕсли;

	Если ТекущийВидОперации("Перепредъявление") Тогда Возврат; КонецЕсли;

	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		тзДвижения=Движения.ТоварыКПолучениюНаСклады.ВыгрузитьКолонки();

		//Товары
		Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный;
			Если СтрокаКоллекции.БезПраваПродажи Тогда
				НоваяСтрока.ДокументРезерва=НоваяСтрока.ДокументПолучения;
			КонецЕсли;
			Если НоваяСтрока.Качество.Пустая() Тогда
				НоваяСтрока.Качество=Справочники.Качество.Новый;
			КонецЕсли;			
		КонецЦикла; 
		
		//Возвратная тара
		Для каждого СтрокаКоллекции Из СтруктураТД.Тара Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
			Если СтрокаКоллекции.БезПраваПродажи Тогда
				НоваяСтрока.ДокументРезерва=НоваяСтрока.ДокументПолучения;
			КонецЕсли;
			Если НоваяСтрока.Качество.Пустая() Тогда
				НоваяСтрока.Качество=Справочники.Качество.Новый;
			КонецЕсли;			
		КонецЦикла; 
		
		//*** тзДвижения.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		Движения.ТоварыКПолучениюНаСклады.Загрузить(тзДвижения);
	КонецЕсли;		
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;
	Если ТекущийВидОперации("ПриемВПереработку") Тогда Возврат; КонецЕсли;
	тзДвижения=Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();
	ВзаиморасчетыСервер.ОтражениеЗадолженности(СтруктураШД, СтруктураТД, "Расход", тзДвижения, Отказ, СтруктураШД.Заголовок);
	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетЗаказов(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ ТекущийВидОперации("Покупка") Тогда Возврат; КонецЕсли;
    Если ТекущийВидДоговора("СКомитентом", СтруктураШД.ВидДоговора) Тогда Возврат; КонецЕсли; 

	Если Сделки.Количество()=0 Тогда Возврат; КонецЕсли;

	СтруктураПараметров=Новый Структура("МоментВремени,Дата,Ссылка,Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШД);
	СтруктураПараметров.Вставить("ТаблицаДвижений4", Движения.ЗаказыПоставщикам.ВыгрузитьКолонки());

	УправлениеЗаказамиСервер.СформироватьДвиженияРегистров(СтруктураПараметров, СтруктураТД, Отказ);

	Движения.ЗаказыПоставщикам.Загрузить(СтруктураПараметров.ТаблицаДвижений4);
КонецПроцедуры
 
Процедура ДвижениеПоРегистру_Затраты(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "Затраты") Тогда Возврат; КонецЕсли;

	Если ТекущийВидОперации("ПриемВПереработку") Тогда Возврат; КонецЕсли;
	Если ТекущийВидОперации("Перепредъявление" ) Тогда Возврат; КонецЕсли;
	Если СтруктураТД.Услуги.Количество()=0 		 Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.Затраты.ВыгрузитьКолонки();

	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	НеВключатьНДСВСтоимость=?(УчетнаяПолитика.Количество()=0, Ложь, УчетнаяПолитика.НеВключатьНДСВЗатраты);
	
	Для Каждого СтрокаКоллекции Из СтруктураТД.Услуги Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если НеВключатьНДСВСтоимость Тогда
			НоваяСтрока.Сумма=СтрокаКоллекции.СуммаБезНДС;
		КонецЕсли;
		Если НоваяСтрока.Заказ.Пустая() Тогда
			НоваяСтрока.Заказ=Сделка;
		КонецЕсли; 
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(Контрагент, "Контрагент");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");

	Движения.Затраты.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_Закупки(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "Закупки") Тогда Возврат; КонецЕсли;
	Если НЕ ТекущийВидОперации("Покупка") Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.Закупки.ВыгрузитьКолонки();
	
	СтруктураТаблиц=Новый Структура;
	СтруктураТаблиц.Вставить("Товары", СтруктураТД.Товары);
	СтруктураТаблиц.Вставить("Услуги", СтруктураТД.Услуги);
	СтруктураТаблиц.Вставить("ОбъектыСтроительства", СтруктураТД.ОбъектыСтроительства);
	СтруктураТаблиц.Вставить("НМА", СтруктураТД.НМА);
	
	Для каждого СтрокаКоллекции1 Из СтруктураТаблиц Цикл
		Для каждого СтрокаКоллекции2 Из СтрокаКоллекции1.Значение Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции2);
			НоваяСтрока.Стоимость=СтрокаКоллекции2.СуммаСНДС;
		КонецЦикла;
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(СтатусПартииПрихода(СтруктураШД), "СтатусПартии");
	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(Контрагент, "Контрагент");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
	тзДвижения.ЗаполнитьЗначения(Подразделение, "Подразделение");
	тзДвижения.ЗаполнитьЗначения(СтруктураШД.Сделка, "ЗаказПоставщику");

	Движения.Закупки.Загрузить(тзДвижения);
КонецПроцедуры
 
Процедура ДвижениеПоРегистру_ЦеныНоменклатуры(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ ТекущийВидОперации("Покупка") Тогда Возврат; КонецЕсли;

	Если РегистрироватьЦеныПоставщика Тогда
		тзДвижения=Движения.ЦеныНоменклатуры.ВыгрузитьКолонки();
		
		Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			Если ТипЦен.ЦенаВключаетНДС Тогда
				Если НЕ СуммаВключаетНДС Тогда
					НоваяСтрока.Цена=ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаКоллекции.Цена, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, Ложь, Истина, Истина, УчетНалоговСервер.СтавкаНДС(СтрокаКоллекции.СтавкаНДС));
				КонецЕсли;
			Иначе
				Если СуммаВключаетНДС Тогда
					НоваяСтрока.Цена=ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаКоллекции.Цена, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, Истина, Ложь, Ложь, УчетНалоговСервер.СтавкаНДС(СтрокаКоллекции.СтавкаНДС));
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		
		//Проверка дублей
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДатаЦен", НачалоДня(Дата));
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Номенклатура", тзДвижения.ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст="
		|ВЫБРАТЬ
		|	Цены.Номенклатура КАК Номенклатура,
		|	Цены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК Цены
		|ГДЕ
		|	Цены.Период=&ДатаЦен И 
		|	Цены.ТипЦен=&ТипЦен И 
		|	Цены.Номенклатура В (&Номенклатура) И 
		|	Цены.Регистратор <> &Ссылка
		|";	
		СтруктураОтбора=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.Номенклатура=Выборка.Номенклатура;
			СтруктураОтбора.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаНоменклатуры;
			
			МассивСтрок=тзДвижения.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКоллекции Из МассивСтрок Цикл
				тзДвижения.Удалить(СтрокаКоллекции);
			КонецЦикла;
		КонецЦикла;
		
		//Запрос
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("Валюта", СтруктураШД.ВалютаДокумента);
		Запрос.УстановитьПараметр("ИсточникДанных", тзДвижения);
		Запрос.Текст="
		|Выбрать
		|*
		|	ПОМЕСТИТЬ ИсточникДанных
		|Из
		|	&ИсточникДанных КАК ИсточникДанных
		|;
		|Выбрать
		|	&ТипЦен Как ТипЦен,
		|	&Валюта Как Валюта,
		|	ИсточникДанных.Период Как Период,
		|	ИсточникДанных.Активность Как Активность,
		|	ИсточникДанных.Регистратор Как Регистратор,
		|	ИсточникДанных.Номенклатура Как Номенклатура,
		|	ИсточникДанных.ХарактеристикаНоменклатуры Как ХарактеристикаНоменклатуры,
		|	ИсточникДанных.ЕдиницаИзмерения Как ЕдиницаИзмерения,
		|	ИсточникДанных.ПроцентСкидкиНаценки Как ПроцентСкидкиНаценки,
		|	ИсточникДанных.СпособРасчетаЦены Как СпособРасчетаЦены,
		|	СРЕДНЕЕ(ИсточникДанных.Цена) Как Цена
		|Из
		|	ИсточникДанных КАК ИсточникДанных
		|СГРУППИРОВАТЬ ПО
		|	ИсточникДанных.Период,
		|	ИсточникДанных.Активность,
		|	ИсточникДанных.Регистратор,
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	ИсточникДанных.ЕдиницаИзмерения,
		|	ИсточникДанных.ПроцентСкидкиНаценки,
		|	ИсточникДанных.СпособРасчетаЦены	
		|";
		тзДвижения=Запрос.Выполнить().Выгрузить();
		
		Движения.ЦеныНоменклатуры.Загрузить(тзДвижения);
	КонецЕсли;
	
	//Зарегистрируем розничные цены если склад "розничный"
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		Если СтрокаКоллекции.ЦенаВРознице=0 Тогда Продолжить; КонецЕсли;
		Если НЕ СтрокаКоллекции.ВидСклада=Перечисления.ВидыСкладов.Розничный Тогда Продолжить; КонецЕсли; 

		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ТипЦен", СтрокаКоллекции.Склад.ТипЦенРозничнойТорговли);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаКоллекции.ХарактеристикаНоменклатуры);

		тзЦены=РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(НачалоДня(Дата), СтруктураОтбора);
		Если тзЦены.Количество()>0 И тзЦены[0].Период>=НачалоДня(Дата) Тогда Продолжить; КонецЕсли; 

		НоваяСтрока=Движения.ЦеныНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Цена=СтрокаКоллекции.ЦенаВРознице;
		НоваяСтрока.ТипЦен=СтруктураОтбора.ТипЦен;
		НоваяСтрока.Валюта=СтруктураШД.ВалютаДокумента;
	КонецЦикла;
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;
	Если ТекущийВидОперации("Перепредъявление") Тогда Возврат; КонецЕсли;
    
	тзДвижения=Движения.ПартииТоваровНаСкладах.ВыгрузитьКолонки();
	
	// Определим код операции движений по регистру партий
	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		КодОперацииПартииТоваров=Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
	Иначе
		КодОперацииПартииТоваров=Перечисления.КодыОперацийПартииТоваров.Поступление;
	КонецЕсли;	

	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	УчетПотребностей=Константы.УчетПотребностей.Получить();

	// Движения по регистру "ПартииТоваровНаСкладах"
	СтруктТаблицДокумента=Новый Структура;
	СтруктТаблицДокумента.Вставить("Товары", СтруктураТД.Товары);
	СтруктТаблицДокумента.Вставить("Тара", СтруктураТД.Тара);

	Для каждого СтрокаКоллекции Из СтруктТаблицДокумента Цикл
		тзСсылка=СтрокаКоллекции.Значение;
		Если СтрокаКоллекции.Ключ="Товары" Тогда
			СтатусПартии=СтатусПартииПрихода(СтруктураШД);
		Иначе //Возвратная тара
			СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
		КонецЕсли;
		Для каждого СтрокаТаблицы Из тзСсылка Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.КодОперации=КодОперацииПартииТоваров;
            НоваяСтрока.СтатусПартии=СтатусПартии;
			Если НоваяСтрока.Качество.Пустая() Тогда
				НоваяСтрока.Качество=Справочники.Качество.Новый;
			КонецЕсли;

			Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				НоваяСтрока.Склад=?(СтрокаТаблицы.БезПраваПродажи, СтрокаТаблицы.Склад, СтрокаТаблицы.ПриходныйОрдерСклад);
			КонецЕсли;

			Если НЕ СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТаблицы.ВестиПартионныйУчетПоСериям Тогда
				НоваяСтрока.СерияНоменклатуры=Неопределено;
			КонецЕсли;

			//Обработаем сторно движений по партиям товаров на складах для поступления по ордеру			
			Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру И НЕ СтрокаТаблицы.БезПраваПродажи Тогда
				НоваяСтрока=тзДвижения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ДокументОприходования=СтрокаТаблицы.ДокументПолучения;
				НоваяСтрока.Склад=СтрокаТаблицы.ПриходныйОрдерСклад;
				НоваяСтрока.Количество=-СтрокаТаблицы.Количество;
				НоваяСтрока.КодОперации=Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру;
				НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.ПоОрдеру;
				НоваяСтрока.Стоимость=0;
				НоваяСтрока.СтоимостьНУ=0;
				Если СтрокаКоллекции.Ключ="Товары" Тогда
					Если НЕ СтрокаТаблицы.ВестиПартионныйУчетПоСериям Тогда
						НоваяСтрока.СерияНоменклатуры=Неопределено;
					КонецЕсли;
				КонецЕсли;
				Если НоваяСтрока.Качество.Пустая() Тогда
					НоваяСтрока.Качество=Справочники.Качество.Новый;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	//*** тзДвижения.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	Если Не УчетнаяПолитика.СпособОценкиМПЗ=Перечисления.СпособыОценки.ПоСредней ИЛИ СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Подвид)="Корректировка" Тогда
			тзДвижения.ЗаполнитьЗначения(Сделка, "ДокументОприходования");
		Иначе
			тзДвижения.ЗаполнитьЗначения(Ссылка, "ДокументОприходования");
		КонецЕсли;
	КонецЕсли;

	Движения.ПартииТоваровНаСкладах.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "РасходыПриУСН") Тогда Возврат; КонецЕсли;

	ВключитьДвиженияУСН=Ложь;
	Если ДополнительныеСвойства.Свойство("ВключитьДвиженияУСН") Тогда
		ВключитьДвиженияУСН=ДополнительныеСвойства.ВключитьДвиженияУСН;
	КонецЕсли;
	Если СтруктураШД.УчетнаяПолитика.ОбъектНалогообложенияУСН=Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда	Возврат; КонецЕсли;	
	Если ТекущийВидОперации("Перепредъявление") Или ТекущийВидОперации("ПриемВПереработку") Тогда Возврат; КонецЕсли;

	СистемаНалогообложения=СтруктураШД.УчетнаяПолитика.СистемаНалогообложения;
	Если СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная Или СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная_ЕНВД ИЛИ ВключитьДвиженияУСН Тогда
		тзДвижения=Движения.РасходыПриУСН.ВыгрузитьКолонки();
		
		тзДанные=СтруктураТД.Товары.Скопировать();
		Если СтруктураШД.УчетнаяПолитика.УчитыватьСписание Тогда
			тзДанные.Свернуть("Номенклатура,НеПринимаетсяУСН,ТОП,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","Сумма,СуммаНДС");
		Иначе	
			тзДанные.Свернуть("НеПринимаетсяУСН,ТОП,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","Сумма,СуммаНДС");
		КонецЕсли;
		Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			Если СтруктураШД.УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС=Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость Тогда
				НоваяСтрока.СуммаНДС=СтрокаКоллекции.СуммаНДС;
			Иначе
				НоваяСтрока.СуммаНДС=0;
			КонецЕсли;
			НоваяСтрока.ДоговорКонтрагента=ДоговорКонтрагента;
			НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.Куплено;
		КонецЦикла;
		
		тзДанные=СтруктураТД.Услуги.Скопировать();
		тзДанные.Свернуть("НеПринимаетсяУСН,ТОП","Сумма,СуммаНДС");
		Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			Если СтруктураШД.УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС=Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость Тогда
				НоваяСтрока.СуммаНДС=СтрокаКоллекции.СуммаНДС;
			Иначе
				НоваяСтрока.СуммаНДС=0;
			КонецЕсли;
			НоваяСтрока.ДоговорКонтрагента=ДоговорКонтрагента;
			НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.Куплено;
		КонецЦикла;
		
		тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения.ЗаполнитьЗначения(Дата, "Период");
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
   		тзДвижения.ЗаполнитьЗначения(Ссылка, "РасчетныйДокумент");
		
		Движения.РасходыПриУСН.Загрузить(тзДвижения);
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры
 
Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетНДС") Тогда Возврат; КонецЕсли;
	Если ТекущийВидОперации("ПриемВПереработку") Тогда Возврат; КонецЕсли;
	Если ТекущийВидОперации("Перепредъявление" ) Тогда Возврат; КонецЕсли; 
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;
	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда Возврат; КонецЕсли;

	//*** ОбщегоНазначения.УдалитьДвижениеРегистраПоРегистратору(Ссылка, "НДСНачисленный");
	
	ТаблицыДокумента=Новый Структура();
	ТаблицыДокумента.Вставить("Товары", СтруктураТД.ТоварыНДС);
	ТаблицыДокумента.Вставить("Услуги", СтруктураТД.УслугиНДС);
	ТаблицыДокумента.Вставить("ОС"	  , СтруктураТД.ОбъектыСтроительства);
	ТаблицыДокумента.Вставить("НМА"	  , СтруктураТД.НМА);

	Если СтруктураШД.УчитыватьНДС И НЕ ТекущийВидОперации("ПокупкаВЛизинг") Тогда
		Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Подвид)="Корректировка" И НЕ Исправительный Тогда
			Если ЗначениеЗаполнено(СтруктураШД.КорректируемыйПериод) Тогда
				Для Каждого СтрокаКоллекции ИЗ ТаблицыДокумента Цикл
					тзСсылка=СтрокаКоллекции.Значение;
					тзСсылка.Колонки.Добавить("ЗаписьДополнительногоЛиста");
					тзСсылка.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста");
					тзСсылка.Колонки.Добавить("КорректируемыйПериод");
					тзСсылка.ЗаполнитьЗначения(СтруктураШД.КорректируемыйПериод, "КорректируемыйПериод");
				КонецЦикла;	
			КонецЕсли;	
			
			Если СтруктураШД.ДоговорКонтрагента.ВидАгентскогоДоговора=Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
				УчетНДС.СформироватьДвиженияПоРегиструНДСЗаписиКнигиПродаж(СтруктураШД, ТаблицыДокумента, Движения, Отказ);
				УчетНДС.СформироватьДвиженияПоРегиструНДСЗаписиКнигиПокупок(СтруктураШД, ТаблицыДокумента, Движения, Отказ);				
			Иначе
				СтруктураТВПокупки=Новый Структура;
				СтруктураТВПродажи=Новый Структура;
				
				ТоварыВПродажи=СтруктураТД.ТоварыНДС.СкопироватьКолонки();
				ТоварыВПокупки=СтруктураТД.ТоварыНДС.СкопироватьКолонки();
				Для Каждого СтрокаКоллекции ИЗ СтруктураТД.ТоварыНДС Цикл
					Если СтрокаКоллекции.Сумма<0 Тогда
						ЗаполнитьЗначенияСвойств(ТоварыВПродажи.Добавить(),СтрокаКоллекции);
					Иначе
						ЗаполнитьЗначенияСвойств(ТоварыВПокупки.Добавить(),СтрокаКоллекции);
					КонецЕсли;	
				КонецЦикла;	
				Если НЕ ТоварыВПродажи.Количество()=0 Тогда
					СтруктураТВПродажи.Вставить("ТоварыВПродажи",ТоварыВПродажи);
				КонецЕсли;
				Если НЕ ТоварыВПокупки.Количество()=0 Тогда
					СтруктураТВПокупки.Вставить("ТоварыВПокупки",ТоварыВПокупки);
				КонецЕсли;
				
				УслугиВПродажи=СтруктураТД.УслугиНДС.СкопироватьКолонки();
				УслугиВПокупки=СтруктураТД.УслугиНДС.СкопироватьКолонки();
				Для Каждого СтрокаКоллекции ИЗ СтруктураТД.УслугиНДС Цикл
					Если СтрокаКоллекции.Сумма<0 Тогда
						ЗаполнитьЗначенияСвойств(УслугиВПродажи.Добавить(),СтрокаКоллекции);
					Иначе
						ЗаполнитьЗначенияСвойств(УслугиВПокупки.Добавить(),СтрокаКоллекции);
					КонецЕсли;	
				КонецЦикла;	
				Если НЕ УслугиВПродажи.Количество()=0 Тогда
					СтруктураТВПродажи.Вставить("УслугиВПродажи",УслугиВПродажи);
				КонецЕсли;
				Если НЕ УслугиВПокупки.Количество()=0 Тогда
					СтруктураТВПокупки.Вставить("УслугиВПокупки",УслугиВПокупки);
				КонецЕсли;
				УчетНДС.СформироватьДвиженияПоРегиструНДСЗаписиКнигиПродаж(СтруктураШД, СтруктураТВПродажи, Движения, Отказ, Истина);
				УчетНДС.СформироватьДвиженияПоРегиструНДСЗаписиКнигиПокупок(СтруктураШД, СтруктураТВПокупки, Движения, Отказ);				
			КонецЕсли;
		Иначе	
			СформироватьДвиженияПоРегистрамНДС_Предъявленный(СтруктураШД, ТаблицыДокумента, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

	СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШД, ТаблицыДокумента, Движения, Отказ, СтруктураШД.УчетАгентскогоНДС);

	//Движения по регистрам (НДС партии товаров)
	Если СтруктураШД.УчетнаяПолитика.СложныйУчетНДС Тогда
		тзДвижения=Движения.НДСПартииТоваров.ВыгрузитьКолонки();
		Для Каждого СтрокаТаблицы Из СтруктураТД.ТоварыНДС Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Стоимость=СтрокаТаблицы.СуммаБезНДС+СтрокаТаблицы.НДС;
		КонецЦикла;
		тзДвижения.ЗаполнитьЗначения(Ссылка, "Партия");
		тзДвижения.ЗаполнитьЗначения(Ссылка, "СчетФактура");
		Если НЕ СтруктураШД.УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов Тогда
			тзДвижения.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		Если НЕ СтруктураШД.УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			тзДвижения.ЗаполнитьЗначения(Неопределено, "СерияНоменклатуры");
			тзДвижения.ЗаполнитьЗначения(Неопределено, "ХарактеристикаНоменклатуры");
		КонецЕсли;		
		тзДвижения.ЗаполнитьЗначения(НДСВключенВСтоимость,"НДСВключенВСтоимость");
		
		Движения.НДСПартииТоваров.Загрузить(тзДвижения);
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыНаСкладах") Тогда Возврат; КонецЕсли;
	Если ТекущийВидОперации("Перепредъявление") Тогда Возврат; КонецЕсли;

	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		тзДвижения=Движения.ТоварыНаСкладах.ВыгрузитьКолонки();

		Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
			Если СтрокаКоллекции.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда
				Если Не СтрокаКоллекции.ЯчеистыйСклад Тогда Продолжить; КонецЕсли;
				ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
			КонецЕсли;
			Если СтрокаКоллекции.Качество.Пустая() Тогда
				СтрокаКоллекции.Качество=Справочники.Качество.Новый;
			КонецЕсли;
		КонецЦикла;

		Для каждого СтрокаКоллекции Из СтруктураТД.Тара Цикл
			Если СтрокаКоллекции.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда
				Если Не СтрокаКоллекции.ЯчеистыйСклад Тогда Продолжить; КонецЕсли;
				ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
			КонецЕсли;					
		КонецЦикла;

		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		//*** тзДвижения.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		Движения.ТоварыНаСкладах.Загрузить(тзДвижения);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьДвиженияПоРегистрамНДС_Предъявленный(СтруктураШД, СтруктураТД, Движения, Отказ) Экспорт
	//Движения по регистрам НДС (предъявленный, включенный в стоимость, косвенные расходы, начисленный)
	Если Отказ Тогда Возврат; КонецЕсли;

	УчитыватьНДСПредъявленный=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураШД, "УчитыватьНДС", Ложь);
	Если Не УчитыватьНДСПредъявленный Тогда Возврат; КонецЕсли;

	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	стрВидДокумента=СтруктураШД.ВидДокумента;
	ДокументСсылка=СтруктураШД.Ссылка;
	ОрганизацияСсылка=Организация;
	КонтрагентСсылка=СтруктураШД.Контрагент;

	НДСВключенВСтоимость=УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураШД, "НДСВключенВСтоимость", Ложь);

	тзНДС_Предъявленный=Движения.НДСПредъявленный.ВыгрузитьКолонки();
	тзНДС_ВключенныйВСтоимость=Движения.НДСВключенныйВСтоимость.ВыгрузитьКолонки();
	тзНДС_КосвенныеРасходы=Движения.НДСКосвенныеРасходы.ВыгрузитьКолонки();
	
	НаборЗаписей=РегистрыСведений.СоответствияСчетовУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	тзСчетаУчетаЗатрат=НаборЗаписей.Выгрузить(, "Счет");
	
	тзАналитика=УправлениеПроведением.ОсновнаяНастройкаАналитики("Документ_"+ДокументСсылка.Метаданные().Имя);
	Для каждого СтрокаКоллекции Из СтруктураТД Цикл
		тзСсылкаНДС=СтрокаКоллекции.Значение;

		ЕстьКолонка_СтатьяЗатрат=(не тзСсылкаНДС.Колонки.Найти("СтатьяЗатрат")=Неопределено);
		ЕстьКолонка_СчетУчетаНДС=(не тзСсылкаНДС.Колонки.Найти("СчетУчетаНДС")=Неопределено);

		Для Каждого СтрокаДок из тзСсылкаНДС Цикл
			Если стрВидДокумента="АвансовыйОтчет" И НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				Продолжить; //По строкам АО, в которых не указана СФ записи в регистре не формируются 
			КонецЕсли;
			
			//{НДС предъявленный
			СтрокаДвижения1=тзНДС_Предъявленный.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения1, СтрокаДок);
			СтрокаДвижения1.Организация=ОрганизацияСсылка;
			СтрокаДвижения1.ВидЦенности=СтрокаДок.ВидЦенности;
			СтрокаДвижения1.ВидДвижения=ВидДвиженияНакопления.Приход;
			СтрокаДвижения1.Событие=Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			Если НЕ стрВидДокумента="АвансовыйОтчет" Тогда
				СтрокаДвижения1.Поставщик=КонтрагентСсылка;
				СтрокаДвижения1.СчетФактура=ДокументСсылка;
			КонецЕсли; 
			Если стрВидДокумента="ПоступлениеДопРасходов" Тогда
				СтрокаДвижения1.СтавкаНДС=СтруктураШД.СтавкаНДС;
			КонецЕсли;
			Если НДСВключенВСтоимость Тогда
				СтрокаДвижения2=тзНДС_Предъявленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения2, СтрокаДвижения1);
				СтрокаДвижения2.ВидДвижения=ВидДвиженияНакопления.Расход;
				СтрокаДвижения2.Событие=Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
				ЗаполнитьЗначенияСвойств(тзНДС_ВключенныйВСтоимость.Добавить(), СтрокаДвижения1);
			КонецЕсли;
			//}НДС предъявленный
			
			//{НДС косвенные расходы
			Если УчетнаяПолитика.СложныйУчетНДС и ЕстьКолонка_СтатьяЗатрат тогда
				СтрокаДвиженияКР=тзНДС_КосвенныеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияКР, СтрокаДок);
				СтрокаДвиженияКР.Организация=ОрганизацияСсылка;
				СтрокаДвиженияКР.СчетФактура=?(стрВидДокумента="АвансовыйОтчет", СтрокаДок.СчетФактура, ДокументСсылка);
				СтрокаДвиженияКР.СтавкаНДС=?(стрВидДокумента="ПоступлениеДопРасходов", СтруктураШД.СтавкаНДС, СтрокаДок.СтавкаНДС);
				СтрокаДвиженияКР.НДСВключенВСтоимость=НДСВключенВСтоимость;

				//Заполняем реквизиты регистра
				СчетЗатратБУ=УчетНДС.НайтиСчетУчета(СтрокаДок.ТОП.ПроводкиБУ, тзСчетаУчетаЗатрат);
				Если НЕ СчетЗатратБУ=Неопределено Тогда
					СтрокаДвиженияКР.СчетЗатрат=СчетЗатратБУ; ВидыСубконтоБУ=Новый Структура;
					
					УправлениеПроведением.УстановитьСубконто(ЭтотОбъект, СтрокаДвиженияКР.СчетЗатрат, ВидыСубконтоБУ, тзАналитика, "Д", СтрокаКоллекции.Ключ, СтрокаДок);
					ВидыСубконтоБУ.Свойство("Субконто1", СтрокаДвиженияКР.Субконто1);
					ВидыСубконтоБУ.Свойство("Субконто2", СтрокаДвиженияКР.Субконто2);
					ВидыСубконтоБУ.Свойство("Субконто3", СтрокаДвиженияКР.Субконто3);
				КонецЕсли; 
			КонецЕсли;
			//}НДС косвенные расходы
		КонецЦикла;
	КонецЦикла;

	//Учет агентского НДС
	Если СтруктураШД.УчетАгентскогоНДС И НЕ СтруктураШД.НалоговыйАгентПоОплате Тогда
		тзНДС_Начисленный=Движения.НДСНачисленный.ВыгрузитьКолонки();
		ВидыЦенностей_Агентские=Новый списокЗначений();
		ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
		ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		Для каждого СтрокаКоллекции Из тзНДС_Предъявленный Цикл
			Если СтрокаКоллекции.ВидДвижения = ВидДвиженияНакопления.Приход И Не ВидыЦенностей_Агентские.НайтиПоЗначению(СтрокаКоллекции.ВидЦенности) = Неопределено Тогда
				НоваяСтрока=тзНДС_Начисленный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.Покупатель=СтрокаКоллекции.Поставщик;
				НоваяСтрока.Событие=Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
				НоваяСтрока.ДатаСобытия=СтруктураШД.Дата;
				НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяСтрока.ВидНачисления=Перечисления.НДСВидНачисления.НДСНачисленКУплате;
			КонецЕсли;
		КонецЦикла;

		Если тзНДС_Начисленный.Количество() > 0 Тогда
			Движения.НДСНачисленный.Загрузить(тзНДС_Начисленный);
		КонецЕсли; 
	КонецЕсли; 
	
	Если тзНДС_Предъявленный.Количество() > 0 Тогда
		тзНДС_Предъявленный.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");
		Движения.НДСПредъявленный.Загрузить(тзНДС_Предъявленный);
	КонецЕсли;

	Если тзНДС_КосвенныеРасходы.Количество() > 0 Тогда
		Движения.НДСКосвенныеРасходы.Загрузить(тзНДС_КосвенныеРасходы);
	КонецЕсли; 

	Если тзНДС_ВключенныйВСтоимость.Количество() > 0 Тогда
		Движения.НДСВключенныйВСтоимость.Загрузить(тзНДС_ВключенныйВСтоимость);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШД, СтруктураТД, Движения, Отказ, НДСНеВлияетНаРасчеты = Ложь)
	//Движения по регистрам НДС (расчеты с поставщиками, учет распределенных оплат поставщикам)
	тзНДС_РасчетыСПоставщиками=Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
		
	Для каждого СтрокаКоллекции Из СтруктураТД Цикл
		тзСсылка=СтрокаКоллекции.Значение;

		Если тзСсылка.Колонки.Найти("ТипДоговораКонтрагента")=Неопределено Тогда
			тзСсылка.Колонки.Добавить("ТипДоговораКонтрагента", Новый ОписаниеТипов("СправочникСсылка.КлассификаторПеречислений"));
		КонецЕсли;
		тзДанные=тзСсылка.Скопировать(,"ТипДоговораКонтрагента,Сумма,НДС,СуммаБезНДС,СуммаНДС");
		тзДанные.Свернуть("ТипДоговораКонтрагента", "Сумма,НДС,СуммаБезНДС,СуммаНДС");
		
		Для Каждого СтрокаДок из тзДанные Цикл
			Сумма=СтрокаДок.СуммаБезНДС;
			Если НДСНеВлияетНаРасчеты Тогда
				НДС=СтрокаДок.НДС;
			Иначе
				Сумма=СтрокаДок.НДС+Сумма;
			КонецЕсли; 
			Если Сумма=0 Тогда Продолжить; КонецЕсли; 
			
			СтрокаДвижения=тзНДС_РасчетыСПоставщиками.Добавить();
			СтрокаДвижения.Организация=Организация;
			СтрокаДвижения.Поставщик=СтруктураШД.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента=СтруктураШД.ДоговорКонтрагента;
			СтрокаДвижения.Документ=СтруктураШД.Ссылка;
			СтрокаДвижения.ТипДоговораКонтрагента=СтрокаДок.ТипДоговораКонтрагента;
			СтрокаДвижения.Сумма=Сумма;
			СтрокаДвижения.ДатаСобытия=СтруктураШД.Дата;
			
			Если НДСНеВлияетНаРасчеты Тогда
				СтрокаДвиженияНДС=тзНДС_РасчетыСПоставщиками.Добавить();
				СтрокаДвиженияНДС.Организация=Организация;
				СтрокаДвиженияНДС.Поставщик=СтруктураШД.Контрагент;
				СтрокаДвиженияНДС.ДоговорКонтрагента=СтруктураШД.ДоговорКонтрагента;
				СтрокаДвиженияНДС.Документ=СтруктураШД.Ссылка;
				СтрокаДвиженияНДС.РасчетыСБюджетом=Истина;
				СтрокаДвижения.ТипДоговораКонтрагента=СтрокаДок.ТипДоговораКонтрагента;
				СтрокаДвиженияНДС.Сумма=НДС;
				СтрокаДвиженияНДС.ДатаСобытия=СтруктураШД.Дата;
			КонецЕсли; 		
		КонецЦикла;
		
		тзНДС_РасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");		
	КонецЦикла;

	Если тзНДС_РасчетыСПоставщиками.Количество()>0 Тогда
		тзНДС_РасчетыСПоставщиками.ЗаполнитьЗначения(Истина, "Активность");
		тзНДС_РасчетыСПоставщиками.ЗаполнитьЗначения(СтруктураШД.Дата, "Период");		
		Движения.НДСРасчетыСПоставщиками.Загрузить(тзНДС_РасчетыСПоставщиками);
	КонецЕсли; 	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Сторнирование

Процедура СторнироватьДвижения_РегистрыНакопления(ИмяРегистра)
	НаборЗаписей1=РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей1.Отбор.Регистратор.Установить(Сделка);
	НаборЗаписей1.Прочитать();
	тзЗаписей=НаборЗаписей1.Выгрузить();
	Если НаборЗаписей1.Количество()=0 Тогда Возврат; КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ОчищатьДвижения_Хозрасчетный", Ложь);
	ДополнительныеСвойства.Вставить("ОчищатьДвижения_Финансовый", Ложь);
	
	НаборЗаписей2=Движения[ИмяРегистра];
	Для каждого СтркаКоллекции Из тзЗаписей Цикл
		НоваяСтрока=НаборЗаписей2.Добавить();
		НоваяСтрока.Период=Дата;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтркаКоллекции,,"Период");
		Для каждого мдРесурс Из Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы Цикл
			НоваяСтрока[мдРесурс.Имя] = -НоваяСтрока[мдРесурс.Имя];
		КонецЦикла; 
	КонецЦикла;
КонецПроцедуры

Процедура СторнироватьДвижения_РегистрыБухгалтерии(ИмяРегистра)
	НаборЗаписей1=РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей1.Отбор.Регистратор.Установить(Сделка);
	НаборЗаписей1.Прочитать();
	Если НаборЗаписей1.Количество()=0 Тогда Возврат; КонецЕсли;
	
	НаборЗаписей2=Движения[ИмяРегистра];
	Для каждого СтркаКоллекции Из НаборЗаписей1 Цикл
		НоваяСтрока=НаборЗаписей2.Добавить();
		НоваяСтрока.Период=Дата;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтркаКоллекции,,"Период");
		
		Для каждого ВидыСубконто Из СтркаКоллекции.СчетДт.ВидыСубконто Цикл
			текВидСубконто=ВидыСубконто.ВидСубконто;
			НоваяСтрока.СубконтоДт[текВидСубконто]=СтркаКоллекции.СубконтоДт[текВидСубконто];
		КонецЦикла;	
		
		Для каждого ВидыСубконто Из СтркаКоллекции.СчетКт.ВидыСубконто Цикл
			текВидСубконто=ВидыСубконто.ВидСубконто;
			НоваяСтрока.СубконтоКт[текВидСубконто]=СтркаКоллекции.СубконтоКт[текВидСубконто];
		КонецЦикла;

		Для каждого мдРесурс Из Метаданные.РегистрыБухгалтерии[ИмяРегистра].Ресурсы Цикл
			стрИмя=мдРесурс.Имя;
			Если мдРесурс.ПризнакУчета=Неопределено Тогда
				Если НоваяСтрока[стрИмя]=NULL Тогда Продолжить; КонецЕсли; 
				НоваяСтрока[стрИмя] = -НоваяСтрока[стрИмя];
			Иначе
				Если НоваяСтрока[стрИмя+"Дт"]<>NULL Тогда 
					НоваяСтрока[стрИмя+"Дт"] = -НоваяСтрока[стрИмя+"Дт"];
				КонецЕсли; 
				Если НоваяСтрока[стрИмя+"Кт"]<>NULL Тогда 
				НоваяСтрока[стрИмя+"Кт"] = -НоваяСтрока[стрИмя+"Кт"];
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
КонецПроцедуры

Процедура СторнироватьДвижения_РегистрыСведений(ИмяРегистра)
	стрВыбрать="
	|&Период,
	|&Актуальность,
	|&Регистратор
	|";
	Для каждого мдИзмерение Из Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
		стрВыбрать=стрВыбрать+","+Символы.ПС+"ИсточникДанных."+мдИзмерение.Имя;
	КонецЦикла;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Актуальность", Истина);
	Запрос.УстановитьПараметр("Регистратор", Сделка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	"+стрВыбрать+"
	|ИЗ
	|	РегистрСведений."+ИмяРегистра+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Регистратор = &Регистратор
	|";

	Движения[ИмяРегистра].Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Основание)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад;
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, "СПоставщиком,СКомитентом");

		Если НЕ ДоговорКонтрагента.Пустая() Тогда
			СтруктураКурсаВзаиморасчетов=МодульВалютногоУчета.КурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			КурсВзаиморасчетов=СтруктураКурсаВзаиморасчетов.Курс;
			КратностьВзаиморасчетов=СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Сделка) Тогда
			Сделка=Основание;
		КонецЕсли;	
		ЗаполнитьТабличнуюЧастьПоДокументуОснования(Основание, "Товары");
		ЗаполнитьТабличнуюЧастьПоДокументуОснования(Основание, "Услуги");
		ЗаполнитьТабличнуюЧастьПоДокументуОснования(Основание, "ВозвратнаяТара");

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, "Организация,Подразделение");
		Склад=Основание.Склад;
		ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад; Сделка=Основание;
		Для каждого СтрокаКоллекции Из Основание.Товары Цикл
			НоваяСтрока=Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.ID=Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Для каждого СтрокаКоллекции Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока=ВозвратнаяТара.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.ID=Строка(Новый УникальныйИдентификатор);
		КонецЦикла;		

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда		
		ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад;
		Склад=Основание.Склад; Сделка=Основание;

		ЗаполнитьТабличнуюЧастьПоЗаказуПоставщикам(Основание, "Товары", Сделка.Проведен);
		ЗаполнитьТабличнуюЧастьПоЗаказуПоставщикам(Основание, "Услуги", Сделка.Проведен);
		ЗаполнитьТабличнуюЧастьПоЗаказуПоставщикам(Основание, "ВозвратнаяТара", Сделка.Проведен);

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		Склад=Основание;
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, "СПоставщиком,СКомитентом");

		ТипЦен                  = ДоговорКонтрагента.ТипЦен;
		УчитыватьНДС            = Истина;
		СуммаВключаетНДС        = ТипЦен.ЦенаВключаетНДС;
		ВалютаДокумента         = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурса          = МодульВалютногоУчета.КурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов      = СтруктураКурса.Курс;
		КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		Если Основание.Проведен Тогда
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Товары);
			ЗаполнитьТоварыПоОснованиюУпр(Основание, ВозвратнаяТара);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ВетисПриходныеОперации") Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Номер Как Номер,
		|	ИсточникДанных.ВСД.ПредприятиеОтправитель КАК Грузоотправитель,
		|	ИсточникДанных.ВСД.ПредприятиеПолучатель КАК Грузополучатель,
		|	ИсточникДанных.ВСД.КонтрагентОтправитель КАК Контрагент,
		|	ИсточникДанных.ВСД.Организация КАК Организация,
		|	ИсточникДанных.ВСД.Продукция КАК Номенклатура,
		|	ИсточникДанных.ВСД.Количество КАК Количество
		|ИЗ
		|	Документ.ВетисПриходныеОперации КАК ИсточникДанных
		|Где
		|	ИсточникДанных.Ссылка=&Ссылка
		|";
		Выборка1=Запрос.Выполнить().Выбрать();
		Выборка1.Следующий();

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка1);
		ЭтотОбъект.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад;
		НоваяСтрока=ЭтотОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка1);
		НоваяСтрока.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Выборка1.Номенклатура, "ЕдиницаХраненияОстатков");
		НоваяСтрока.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
		Если НоваяСтрока.Количество=0 Тогда НоваяСтрока.Количество=1; КонецЕсли;
		НоваяСтрока.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Выборка1.Номенклатура, , , ТекущаяДата(), НоваяСтрока.ЕдиницаИзмерения);
	КонецЕсли;	

	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;

    СчетФактура=УчетНалоговСервер.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураПолученный");
    Если НЕ СчетФактура=Неопределено Тогда
		ОбщегоНазначения.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
		УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//*** ДополнительныеСвойства.УдалятьДвижения=Ложь;
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли;
	
	СтруктураШД=Документы.ПоступлениеТоваровУслуг.СформироватьСтруктуруШД(Ссылка);
	СтруктураШД.Вставить("МоментВремени", МоментВремени());
   	СтруктураШД.Вставить("Заголовок", ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект));

	СтруктураТД=Документы.ПоступлениеТоваровУслуг.ПодготовитьТаблицыДокумента(СтруктураШД);
	//тзДанные.ЗаполнитьЗначения(ДатаДокумента, "Период");
	
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			//*** Движения[СтрокаМассива].Записывать=Истина;
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
	
	Если Исправительный Тогда
		Если ЗначениеЗаполнено(Сделка) Тогда
			СторнироватьДокумент(Сделка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если РегистрироватьЦеныПоставщика Тогда
		ПроверяемыеРеквизиты.Добавить("ТипЦен");
	КонецЕсли;
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.ПриходныйОрдер");
		ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ПриходныйОрдер");
	КонецЕсли;

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Покупка");