&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий "Шкалы диапазонов"

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнениеШкалыДиапазонов(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=КодВозвратаДиалога.Да Тогда тпШкалаДиапазонов_Заполнить(); КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура тпШкалаДиапазонов_Заполнить()
	Объект.ШкалаДиапазонов.Загрузить(ЦенообразованиеСервер.ПолучитьЗапросПоЦеновымДиапазонам(Объект.ТипЦен, Объект.Дата).Выгрузить());
	тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала();
КонецПроцедуры
 
&НаКлиенте
Процедура кпШкалаДиапазонов_ВыполнитьДействие(Команда)
	Если Команда.Имя="ЗаполнитьТекущейШкалой" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ПоказатьПредупреждение(, "Не выбран тип цен. Заполнение невозможно!", 20, "Внимание");
			Возврат;
		КонецЕсли;
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнениеШкалыДиапазонов", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Перезаполнить шкалу диапазонов?", РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет, "Перезаполнить шкалу диапазонов",КодВозвратаДиалога.Нет);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала()
	ВалютаДиапазона=Строка(Объект.ТипЦен.БазовыйТипЦен.ВалютаЦены);
	Для Каждого ТекущаяСтрока Из Объект.ШкалаДиапазонов Цикл
		Если ТекущаяСтрока.ВерхняяГраница=0 Тогда Продолжить; КонецЕсли;		
		МинВерхняяГраница = 0.000001;
		ПредыдущаяСтрока = Неопределено;
		Для Каждого СтрокаТЧ Из Объект.ШкалаДиапазонов Цикл
			Если МинВерхняяГраница <= СтрокаТЧ.ВерхняяГраница
				И ТекущаяСтрока.ВерхняяГраница >= СтрокаТЧ.ВерхняяГраница
				И СтрокаТЧ <> ТекущаяСтрока Тогда
				ПредыдущаяСтрока = СтрокаТЧ;
				МинВерхняяГраница = СтрокаТЧ.ВерхняяГраница;
			КонецЕсли;
		КонецЦикла;
		Если ПредыдущаяСтрока = Неопределено Тогда
			ТекущаяСтрока.ПредставлениеИнтервала = "До " + СокрЛП(ТекущаяСтрока.ВерхняяГраница) + " " + ВалютаДиапазона;
		ИначеЕсли ТекущаяСтрока.ВерхняяГраница = ПредыдущаяСтрока.ВерхняяГраница Тогда
			ТекущаяСтрока.ПредставлениеИнтервала = "ОШИБКА: такая верхняя граница уже есть!";
		Иначе
			ТекущаяСтрока.ПредставлениеИнтервала = "От " + СокрЛП(ПредыдущаяСтрока.ВерхняяГраница) + " до " + СокрЛП(ТекущаяСтрока.ВерхняяГраница) + " " + ВалютаДиапазона;
		КонецЕсли;		
	КонецЦикла;
КонецФункции 

&НаКлиенте
Процедура тпШкалаДиапазонов_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта) Тогда
			Элемент.ТекущиеДанные.Валюта=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ВалютаЦены");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпШкалаДиапазонов_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала();
	Объект.ШкалаДиапазонов.Сортировать("ВерхняяГраница");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала();
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
