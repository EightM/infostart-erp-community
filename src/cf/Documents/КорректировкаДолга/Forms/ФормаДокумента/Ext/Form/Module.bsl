&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженности()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  Объект.КонтрагентДебитор);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентами.СуммаБухОстаток КАК СуммаБух,
	|	ВзаиморасчетыСКонтрагентами.СуммаВалОстаток КАК СуммаВал,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДокумента, Контрагент = &Контрагент И Организация = &Организация) КАК ВзаиморасчетыСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.СуммаБухОстаток > 0 ИЛИ ВзаиморасчетыСКонтрагентами.СуммаВалОстаток > 0
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока=Объект.СуммыДолга.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВидЗадолженности=Перечисления.ВидыЗадолженности.Дебиторская;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженности()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",  Объект.КонтрагентДебитор);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	|	-ВзаиморасчетыСКонтрагентами.СуммаБухОстаток КАК СуммаБух,
	|	-ВзаиморасчетыСКонтрагентами.СуммаВалОстаток КАК СуммаВал,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДокумента, Контрагент = &Контрагент  И Организация = &Организация) КАК ВзаиморасчетыСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента) КАК КурсыВалютСрезПоследних
	|		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.СуммаБухОстаток > 0 ИЛИ ВзаиморасчетыСКонтрагентами.СуммаВалОстаток > 0
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока=Объект.СуммыДолга.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВидЗадолженности=Перечисления.ВидыЗадолженности.Кредиторская;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга."+стрЗаменить(Команда.Имя, "Операция_", ""));
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
		Элементы.КонтрагентКредитор.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.ТипДоговораКонтрагента.Видимость = Истина;
		Элементы.КонтрагентКредитор.Подсказка = "Контрагент, на которого переносится долг";
		Элементы.КонтрагентКредитор.Заголовок = "Получатель";		
	Иначе
		Элементы.КонтрагентКредитор.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.ТипДоговораКонтрагента.Видимость = Ложь;
		Элементы.КонтрагентКредитор.Подсказка = "Контрагент";
		Элементы.КонтрагентКредитор.Заголовок = "Контрагент";		
	КонецЕсли;

	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
	Элементы.СуммаДолга.ОтборСтрок=Новый ФиксированнаяСтруктура(СтруктураОтбора);

	//УСН
	ВидимостьКолонкиСуммаУСН=Ложь;
	Если УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Или
		УчетнаяПолитика.СистемаНалогообложения=ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная_ЕНВД") Тогда
		ВидимостьКолонкиСуммаУСН=Истина;
	КонецЕсли;	
	Элементы.СуммаДолгаСуммаУСН.Видимость=ВидимостьКолонкиСуммаУСН;
	Элементы.СуммаДолгаНеПринимаетсяУСН.Видимость=ВидимостьКолонкиСуммаУСН;
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_Заполнить(Параметр1, Параметр2) Экспорт
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли; 
	Объект.СуммыДолга.Очистить();
	Если Параметр2=ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
		ЗаполнитьОстаткамиДебиторскойЗадолженности();
	ИначеЕсли Параметр2=ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженностиК") Тогда
		ЗаполнитьОстаткамиКредиторскойЗадолженности();		
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов&НаКлиенте

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="КонтрагентКредитор" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.КонтрагентКредитор);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПоставщиком,СПокупателем,Прочее"));

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);
		
	ИначеЕсли Элемент.Имя="Органиазция" Тогда	
		ОбновитьРеквизитыФормы("УчетнаяПолитика");

	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		
		СтруктураДоговора=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента,"ВидДоговора,ВестиПлатежныйКалендарь");
		Если СтруктураДоговора.ВестиПлатежныйКалендарь Тогда
			Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ПереносЗадолженности") Тогда
				Если СтруктураДоговора.ВидДоговора=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
					Объект.ВидДвиженияПоПлатежномуКалендарю="РасходОплата";
				КонецЕсли;
				Если СтруктураДоговора.ВидДоговора=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
					Объект.ВидДвиженияПоПлатежномуКалендарю="ПриходОжидаемый";
				КонецЕсли;
				Если СтруктураДоговора.ВидДоговора=ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее") Тогда
					ПоказатьПредупреждение(,"Укажите вид движения по платежному календарю", 10);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Услуги"

&НаКлиенте
Процедура кпСуммыДолга_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="СуммыДолга"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьОстаткамиПоВзаиморасчетам" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран контрагент-дебитор! Заполнение невозможно!",,"Объект.КонтрагентДебитор");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана валюта! Заполнение невозможно!",,"Объект.ВалютаДокумента");
			Возврат;
		КонецЕсли;

		Если Объект.СуммыДолга.Количество() > 0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_Заполнить", ЭтотОбъект,Объект.ВидОперации);
			ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением строки дебиторской задолженности будут очищены. Заполнить?", РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет, "Внимание", КодВозвратаДиалога.Нет);
		Иначе
			Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности") Тогда
				ЗаполнитьОстаткамиДебиторскойЗадолженности();
			ИначеЕсли Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженностиК") Тогда
				ЗаполнитьОстаткамиКредиторскойЗадолженности();		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура тпСуммыДолга_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСуммаДолга_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "СуммаДолга", "");
	ТекущиеДанные=Элементы.СуммаДолга.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	Если стрКолонка="ДоговорКонтрагента" Тогда		
		ВалютаВзаиморасчетов=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
			СтруктураКурса=ВалютныйУчетСервер.КурсВалюты(Объект.Дата, ВалютаВзаиморасчетов);
			ТекущиеДанные.КурсВзаиморасчетов=СтруктураКурса.Курс;
			ТекущиеДанные.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
		КонецЕсли;
		
	ИначеЕсли стрКолонка="СуммаВал" Тогда
		ПересчитатьСуммуПоСтроке(ТекущиеДанные, Ложь);

	ИначеЕсли стрКолонка="КурсВзаиморасчетов" Тогда
		ПересчитатьСуммуПоСтроке(ТекущиеДанные);
		
	ИначеЕсли стрКолонка="КратностьВзаиморасчетов" Тогда
		ПересчитатьСуммуПоСтроке(ТекущиеДанные);
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоСтроке(ТекущиеДанные, ПересчетВалютнойСуммы=Ложь)
	ВалютаДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	Если ПересчетВалютнойСуммы Тогда
		ТекущиеДанные.СуммаВал=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаБух, ВалютныйУчетСервер.ВалютаБухУчета(), ВалютаДоговора, 1, ТекущиеДанные.КурсВзаиморасчетов, 1, ТекущиеДанные.КратностьВзаиморасчетов);
	Иначе
		ТекущиеДанные.СуммаБух=ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаВал, ВалютаДоговора, ВалютныйУчетСервер.ВалютаБухУчета(), ТекущиеДанные.КурсВзаиморасчетов, 1, ТекущиеДанные.КратностьВзаиморасчетов, 1);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика"); УстановитьВидимость();	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
