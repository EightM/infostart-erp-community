Перем мРассчитыватьАвтоматическиеСкидки;

////////////////////////////////////////////////////////////////////////////////
//

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	Если Услуги.Количество() > 0 И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Услуги.Очистить();
	КонецЕсли;

	СуммаДокумента=ПолучитьСуммуСНДС();
	СуммаНДС=ЦенообразованиеСервер.ПолучитьНДСДокумента(ЭтотОбъект);

	Для Каждого СтрокаКоллекции Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаКоллекции.ЕдиницаИзмеренияМест) И СтрокаКоллекции.КоличествоМест=0 Тогда
			СтрокаКоллекции.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
		Если НЕ УчитыватьНДС Тогда
			СтрокаКоллекции.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;			
	КонецЦикла;
	Для Каждого СтрокаКоллекции из Услуги Цикл
		Если НЕ УчитыватьНДС Тогда
			СтрокаКоллекции.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;			
	КонецЦикла;	
КонецПроцедуры

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	//Если Переписать=Ложь Тогда  // Коля не считались скидки
	//	Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	//КонецЕсли;

	//Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	//КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;

КонецФункции

Функция ПересчитатьАвтоматическиеСкидки() Экспорт

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаДокументаБезСкидок = ЦенообразованиеСервер.ПолучитьСуммуДокументаБезСкидки(Товары) + ЦенообразованиеСервер.ПолучитьСуммуДокументаБезСкидки(Услуги);

		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента"                , СуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта"                         , ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС"                  , УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС"              , СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ДополнительныеСвойства.ВалютаБухУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика"               , ПараметрыУчетнойПолитики());

		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров);
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Услуги, СтруктураПараметров);

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция МожноРассчитыватьАвтоматическиеСкидки() Экспорт
	//Если мРассчитыватьАвтоматическиеСкидки = Неопределено Тогда  // Коля не считались скидки
		Если ПараметрыУчетнойПолитики().ИспользоватьСкидкиПоКоличествуТовара
		 Или ПараметрыУчетнойПолитики().ИспользоватьСкидкиПоСуммеДокумента
		 Или ПараметрыУчетнойПолитики().ИспользоватьСкидкиПоВидуОплаты
		 Или ПараметрыУчетнойПолитики().ИспользоватьСкидкиПоДисконтнойКарте Тогда
			мРассчитыватьАвтоматическиеСкидки = Истина;
		Иначе
			мРассчитыватьАвтоматическиеСкидки = Ложь;
		КонецЕсли;
	//КонецЕсли;
	Возврат мРассчитыватьАвтоматическиеСкидки;
КонецФункции

Функция РассчитыватьАвтоматическиеСкидки() Экспорт
	Возврат МожноРассчитыватьАвтоматическиеСкидки() И Не Проведен;
КонецФункции

Функция ПолучитьСуммуСНДС() Экспорт
	Возврат ЦенообразованиеСервер.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+ЦенообразованиеСервер.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
КонецФункции

Функция ПолучитьСуммуНДС() Экспорт
	Возврат ЦенообразованиеСервер.ПолучитьНДСДокумента(ЭтотОбъект, "Товары")+ЦенообразованиеСервер.ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подготовка таблиц для проведения

Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти)
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураРеквизитов.Вставить("Подразделение", Подразделение);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
		тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
	КонецЦикла;
КонецПроцедуры
 
Функция СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок)
	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.Размещение.Имя="Склад";
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент /СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");
	
	Возврат тзДанные;
КонецФункции

Функция СформироватьТаблицу_Услуги(СтруктураШД, Отказ, Заголовок)
	Если НЕ СтруктураШД.ВидДоговора=Неопределено И Услуги.Количество()>0 И (СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Или ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ передачи на комиссию не может содержать услуг!", Отказ, Заголовок);
	КонецЕсли;

	тзДанные=Услуги.Выгрузить();	
	тзДанные.Колонки.Добавить("Комплект");
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Услуги");

	Возврат тзДанные;	
КонецФункции

Функция СформироватьТаблицу_ТараВТ(СтруктураШД, Отказ, Заголовок)
	тзДанные=ВозвратнаяТара.Выгрузить();
	тзДанные.Колонки.Размещение.Имя="Склад";
	тзДанные.Колонки.Добавить("Комплект");

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Тара");

	Возврат тзДанные;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ЗаказыПокупателей(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентов(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ЗаказыПокупателей(СтруктураШД, СтруктураТД, Отказ)
	Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Подвид)="КорректировкаПотребностей" Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.ЗаказыПокупателей.ВыгрузитьКолонки();
	
	ЕстьСоставНабор=НЕ СоставНабора.Количество()=0;

	//Товары
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если НоваяСтрока.Склад.Пустая() Тогда
			НоваяСтрока.Склад=Склад;
		КонецЕсли;
	КонецЦикла;

	//Услуги
	Для каждого СтрокаКоллекции Из СтруктураТД.Услуги Цикл
		ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(), СтрокаКоллекции);
	КонецЦикла;

	//Возвратная тара
	Для каждого СтрокаКоллекции Из СтруктураТД.ВозвратнаяТара Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если НоваяСтрока.Склад.Пустая() Тогда
			НоваяСтрока.Склад=Склад;
		КонецЕсли;
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(?(УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Подвид)="Корректировка", ДокументОснование, Ссылка), "ЗаказПокупателя");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");	
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	Если Константы.НеИспользоватьСкладаЗаказаПриСписании.Получить() Тогда
		тзДвижения.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(), "Склад");
	КонецЕсли;
	Движения.ЗаказыПокупателей.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Подвид)="КорректировкаПотребностей" Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДокументРезерва", ДокументОснование);
		Запрос.УстановитьПараметр("Склад", СтруктураТД.Товары.ВыгрузитьКолонку("Склад"));
		Запрос.УстановитьПараметр("Номенклатура", СтруктураТД.Товары.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтруктураТД.Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Склад КАК Склад,
		|	ИсточникДанных.Номенклатура КАК Номенклатура,
		|	ИсточникДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ИсточникДанных.ДокументРезерва КАК ДокументРезерва,
		|	ИсточникДанных.Организация КАК Организация,
		|	ИсточникДанных.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.УчетПотребностей.Остатки(&МоментВремени, Организация = &Организация И Склад В (&Склад) И Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ИсточникДанных
		|";
		тзДанные=Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаКоллекции Из тзДанные Цикл
			НоваяСтрока=Движения.УчетПотребностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
		КонецЦикла; 

		//Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		//	НоваяСтрока=Движения.УчетПотребностей.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		//	НоваяСтрока.ДокументРезерва=ДокументОснование;
		//	НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
		//КонецЦикла;
		Возврат;
	КонецЕсли;

	Если НЕ Константы.УчетРезервов.Получить() Тогда Возврат; КонецЕсли; 
	
	СтруктураШД.Вставить("тзУчетРезервовТМЦ", Движения.УчетРезервовТМЦ.ВыгрузитьКолонки());
	Если Константы.УчетПотребностей.Получить() Тогда
		СтруктураШД.Вставить("тзУчетПотребностей", Движения.УчетПотребностей.ВыгрузитьКолонки());
	КонецЕсли;	
	УправлениеРезервамиСервер.СформироватьДвиженияПриход(СтруктураШД, СтруктураТД, Отказ);

	Движения.УчетРезервовТМЦ.Загрузить(СтруктураШД.тзУчетРезервовТМЦ);
	Если СтруктураШД.Свойство("тзУчетПотребностей") Тогда
		Движения.УчетПотребностей.Загрузить(СтруктураШД.тзУчетПотребностей);
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентов(СтруктураШД, СтруктураТД, Отказ)
	Если СтруктураШД.ИспользоватьУсловияПоставок Тогда
		Для каждого СтрокаТабличнойЧасти Из СтруктураТД.Товары Цикл
			Движение=Движения.УсловияПоставокПоДоговорамКонтрагентов.Добавить();
			Движение.Активность=Истина;
			Движение.ВидДвижения=ВидДвиженияНакопления.Приход;
			Движение.Период=НачалоДня(ДатаОплаты);
			Движение.ДоговорКонтрагента=ДоговорКонтрагента;
			Движение.Номенклатура=СтрокаТабличнойЧасти.Номенклатура;
			Движение.ХарактеристикаНоменклатуры=СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			Движение.Цена=СтрокаТабличнойЧасти.Цена;
			Движение.Количество=СтрокаТабличнойЧасти.Количество;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	НастройкиПользователяСервер.ПроверитьДопустимостьЦенОтпуска(Ссылка, "Товары", Отказ);	
	НастройкиПользователяСервер.ПроверитьДопустимостьЦенОтпуска(Ссылка, "Услуги", Отказ);

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;
    СтруктураТД.Вставить("Комплекты", УправлениеЗапасами.СформироватьТаблицуКомплектующих(СтруктураТД.Товары, ЭтотОбъект));

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли;
	ЗаполнениеДокументов.ЗаполнитьТабличныеЧастиДокументаПоОснованию(ЭтотОбъект, Основание);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	Если КратностьВзаиморасчетов=0 Тогда КратностьВзаиморасчетов=1; КонецЕсли; 
	
	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);

	//Проверка значений реквизитов шапки документа
	Если НЕ ДоговорКонтрагента.Пустая() И НЕ Организация.Пустая() Тогда
		ВзаиморасчетыСервер.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШД.ДоговорОрганизация, Отказ, Заголовок);
	КонецЕсли; 	

	//Проверяемые значения
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "Товары"		 , ПроверяемыеРеквизиты, СтруктураШД.ВидСклада);
	УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "Услуги"		 , ПроверяемыеРеквизиты, СтруктураШД.ВидСклада);
    УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", ПроверяемыеРеквизиты, СтруктураШД.ВидСклада);

	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Товары"		 , СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));
	СтруктураТД.Вставить("Услуги"		 , СформироватьТаблицу_Услуги(СтруктураШД, Отказ, Заголовок));
	СтруктураТД.Вставить("ВозвратнаяТара", СформироватьТаблицу_ТараВТ(СтруктураШД, Отказ, Заголовок));
	Если НЕ СоставНабора.Количество()=0 Тогда
		тзСоставНабора=СоставНабора.Выгрузить();
		Для каждого СтрокаКоллекции Из тзСоставНабора Цикл
			СтрокаТЧ=Товары.Найти(СтрокаКоллекции.ID_Товары, "ID");
			Если СтрокаТЧ=Неопределено Тогда Продолжить; КонецЕсли; //Ошибка
			СтрокаКоллекции.Количество=?(СтрокаКоллекции.ЕдиницаИзмерения.Коэффициент <> 0, СтрокаКоллекции.Количество * СтрокаТЧ.Количество * СтрокаТЧ.ЕдиницаИзмерения.Коэффициент / СтрокаКоллекции.ЕдиницаИзмерения.Коэффициент, 0);
		КонецЦикла;
		СтруктураТД.Вставить("СоставНабора", тзСоставНабора);
	КонецЕсли;

	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);
	ДополнительныеСвойства.Вставить("ПроверкаЗаполненияТиповыхОпераций", Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Продажа");

//Существует 2 предопределенных подвида
// - Корректировка (для корректировки регистра "Учет заказов покупателей")
// - КорректировкаПотреностей (для корректировки регистра "Учет потребностей")