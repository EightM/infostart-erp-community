&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПокупателя(стрИмя)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Заказ", Объект.Сделка);
	
	Если стрИмя="ЗаполнитьПоЗаказуПокупателя1" Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	СУММА(ИсточникДанных.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментВремени, ЗаказПокупателя = &Заказ И Номенклатура.Услуга=Ложь) КАК ИсточникДанных
		|СГРУППИРОВАТЬ ПО
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.ХарактеристикаНоменклатуры
		|";
	ИначеЕсли стрИмя="ЗаполнитьПоЗаказуПокупателя2" Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.Склад,
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	ИсточникДанных.СерияНоменклатуры,
		|	ИсточникДанных.Качество,
		|	СУММА(ИсточникДанных.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментВремени, Организация = &Организация	И Заказ = &Заказ И Номенклатура.Услуга=Ложь) КАК ИсточникДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.Склад,
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	ИсточникДанных.СерияНоменклатуры,
		|	ИсточникДанных.Качество
		|";
	КонецЕсли;
	тзДанные=Запрос.Выполнить().Выгрузить();		
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНераспределенныеЗатраты(ВыводитьПредупреждение=Ложь, стрИмя)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МоментВремени", КонецДня(Объект.Дата));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.СтатьяЗатрат,
	|	ИсточникДанных.ЦФО,
	|	ИсточникДанных.СтоимостьОстаток Как Стоимость,
	|	ИсточникДанных.КоличествоОстаток Как Количество
	|ИЗ
	|	РегистрНакопления.ЗатратыНераспределенные.Остатки(&МоментВремени, Организация = &Организация) КАК ИсточникДанных
	|";
	тзРезультатЗапроса=Запрос.Выполнить().Выгрузить();
	Если ВыводитьПредупреждение=Истина И тзРезультатЗапроса.Количество()=0 Тогда
		Сообщить("Нет нераспределенных затрат"); Возврат;
	КонецЕсли;	

	тзСтатьиЗатрат=тзРезультатЗапроса.Скопировать(,"СтатьяЗатрат,Стоимость,Количество");
	тзСтатьиЗатрат.Свернуть("СтатьяЗатрат", "Стоимость,Количество");

	Если стрИмя="ЗаполнитьНераспределенныеЗатраты" Тогда
		Объект.Издержки.Загрузить(тзСтатьиЗатрат);
		Для каждого СтрокаТабличнойЧасти Из Объект.Издержки Цикл
			СтрокаТабличнойЧасти.ID=Новый УникальныйИдентификатор;
			СтруктураОтбора=Новый Структура("СтатьяЗатрат", СтрокаТабличнойЧасти.СтатьяЗатрат);
			МассивСтрок=тзРезультатЗапроса.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаКоллекции Из МассивСтрок Цикл
				НоваяСтрока=Объект.СоставИздержек.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.ID=СтрокаТабличнойЧасти.ID;
			КонецЦикла; 
		КонецЦикла;

	ИначеЕсли стрИмя="Обновить" Тогда
		МассивСтрокТабличнойЧастиДляУдаления=Новый Массив;
		Для каждого СтрокаТабличнойЧасти Из Объект.Издержки Цикл
			СтрокаТаблицыЗначений=тзСтатьиЗатрат.Найти(СтрокаТабличнойЧасти.СтатьяЗатрат, "СтатьяЗатрат");
			Если СтрокаТаблицыЗначений=Неопределено Тогда
				МассивСтрокТабличнойЧастиДляУдаления.Добавить(СтрокаТабличнойЧасти);
				Продолжить; 
			КонецЕсли;
			СтруктураОтбора=Новый Структура("ID", СтрокаТабличнойЧасти.ID);
			МассивСтрок=Объект.СоставИздержек.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаКоллекции Из МассивСтрок Цикл
				Объект.СоставИздержек.Удалить(СтрокаКоллекции);
			КонецЦикла;
			СтруктураОтбора=Новый Структура("СтатьяЗатрат", СтрокаТабличнойЧасти.СтатьяЗатрат);
			МассивСтрок=тзРезультатЗапроса.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаКоллекции Из МассивСтрок Цикл
				НоваяСтрока=Объект.СоставИздержек.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.ID=СтрокаТабличнойЧасти.ID;
			КонецЦикла; 
		КонецЦикла;
		Для каждого СтрокаКоллекции Из МассивСтрокТабличнойЧастиДляУдаления Цикл
			Объект.СоставИздержек.Удалить(СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуЗатратНаПроизводство(ВыводитьПредупреждение=Ложь)
	Запрос=Новый Запрос; стрПериод=СокрЛП(Перечисления.Периодичность.Месяц);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Объект.Дата));
	Если Объект.Период=Перечисления.Периодичность.Квартал Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(Объект.Дата));
		Запрос.УстановитьПараметр("ДатаКонца", КонецКвартала(Объект.Дата));
		стрПериод="Квартал";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Статус", Перечисления.ПланФакт.Факт);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ЗатратыНаПроизводство.Обороты(&ДатаНачала,&ДатаКонца, "+стрПериод+", Организация=&Организация) КАК ИсточникДанных
	|";
	РезультатЗапроса=Запрос.Выполнить().Выгрузить();
	Если ВыводитьПредупреждение=Истина И РезультатЗапроса.Количество()=0 Тогда
		Сообщить("Нет прямых (производственных) затрат!"); Возврат;
	КонецЕсли;
	
	тзСоставИзделий.Очистить();
	Для каждого СтрокаКоллекции Из РезультатЗапроса Цикл
		НоваяСтрока=тзСоставИзделий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_Универсальный(Параметр1, СтруктураПараметров) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ ТипЗнч(СтруктураПараметров)=Тип("Структура") Тогда Возврат; КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Алгоритм") Тогда Возврат; КонецЕсли;
	Выполнить(СтруктураПараметров.Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьНераспределенныеЗатраты(Результат, Параметры) Экспорт
	Если Результат=КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
	Объект.Издержки.Очистить(); Объект.СоставИздержек.Очистить();
	ЗаполнитьНераспределенныеЗатраты(Истина, Параметры.Команда);
	кпСоставИзделий_ВыполнитьДействие("Обновить");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));
	
	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;
	
	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");		
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
		
	ИначеЕсли стрКоманда="ЗаполнитьНераспределенныеЗатраты" Или стрКоманда="Обновить" Тогда
		Если стрКоманда="ЗаполнитьНераспределенныеЗатраты" Тогда
			Если НЕ Объект.Издержки.Количество()=0 Тогда
				Оповещение=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьНераспределенныеЗатраты", ЭтотОбъект, Новый Структура("Команда", стрКоманда));
				ТекстВопроса="Табличная часть будет очищена, продолжить?";
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет); Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьНераспределенныеЗатраты(Истина, стрКоманда);
		кпСоставИзделий_ВыполнитьДействие("Обновить");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Издержки"

&НаКлиенте
Процедура кпИздержки_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		//тпТовары_Заполнить(стрКоманда);		
		
	ИначеЕсли стрКоманда="ЗаполнитьПоПриходномуОрдеру" Тогда
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоПриходномуОрдеру", ЭтотОбъект), , "Выберите документ поступления для заполнения документа реализации", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));

	ИначеЕсли стрКоманда="ЗаполнитьПоВыбранномуДокументу" Тогда		
		//ФормаЗаполнения=ПолучитьФорму("ОбработкаЗаполнения", ЭтаФорма);
		//ФормаЗаполнения.ДокументОбъект=ЭтотОбъект;
		//ФормаЗаполнения.Открыть();
		
	ИначеЕсли стрКоманда="ЗаполнитьПоЗаказуПокупателя1" Или стрКоманда="ЗаполнитьПоЗаказуПокупателя2" Тогда
		Если Не ЗначениеЗаполнено(Объект.Сделка) Тогда 
			ПоказатьПредупреждение(,"Не выбран заказ покупателя!", 10);
			Возврат;
		КонецЕсли;
		ЗаполнитьПоЗаказуПокупателя(стрКоманда);
		
	ИначеЕсли стрКоманда="ОтображениеКартинкиТовара" Тогда
		Элементы.КартинкаТовара.Видимость=НЕ Элементы.КартинкаТовара.Видимость;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпИздержки_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Издержки.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли; 
	Элементы.СтраницаСоставИзделий.Видимость=ТекущиеДанные.ВариантРаспределения=ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.НеРаспределяется");
	
	ОтборПоID=Элементы.СоставИздержек.ОтборСтрок.ID;
	ОтборПоID.Использование=Истина;
	ОтборПоID.Значение=ТекущиеДанные.ID;
	
	Для каждого СтрокаКоллекции Из тзСоставИзделий Цикл
		СтрокаКоллекции.Доля=0;		
	КонецЦикла; 
	
	МассивСтрок_ДолиРаспределения=Объект.ДолиРаспределения.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
	Для каждого СтрокаТабличнойЧасти_ДолиРаспределения Из МассивСтрок_ДолиРаспределения Цикл
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТабличнойЧасти_ДолиРаспределения.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти_ДолиРаспределения.ХарактеристикаНоменклатуры);
		
		МассивСтрок=тзСоставИзделий.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКоллекции Из МассивСтрок Цикл
			СтрокаКоллекции.Доля=СтрокаТабличнойЧасти_ДолиРаспределения.Доля;
		КонецЦикла; 
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура тпИздержки_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура тпИздержки_ПередУдалением(Элемент, Отказ)
	МассивСтрок=Объект.Издержки.НайтиСтроки(Новый Структура("ID_Товары", Элемент.ТекущиеДанные.ID));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.СоставИздержек.Удалить(СтрокаКоллекции);
	КонецЦикла;
	
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.ДолиРаспределения.Удалить(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпИздержки_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Издержки", "");
	ТекущиеДанные=Элементы.Издержки.ТекущиеДанные;
	
	Если стрКолонка="ВариантРаспределения" Тогда
		Элементы.СтраницаСоставИзделий.Видимость=ТекущиеДанные.ВариантРаспределения=ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.НеРаспределяется");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Состав издержек"

&НаКлиенте
Процедура кпСоставИзделий_ВыполнитьДействие(Команда)
	стрКоманда=?(ТипЗнч(Команда)=Тип("Строка"), Команда, стрЗаменить(Команда.Имя, "кпСоставИзделий_", ""));

	Если стрКоманда="Обновить" Тогда
		//тпТовары_Заполнить(стрКоманда);		
		
	ИначеЕсли стрКоманда="ЗаполнитьПоПриходномуОрдеру" Тогда
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоПриходномуОрдеру", ЭтотОбъект), , "Выберите документ поступления для заполнения документа реализации", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));

	ИначеЕсли стрКоманда="ЗаполнитьПоВыбранномуДокументу" Тогда		
		//ФормаЗаполнения=ПолучитьФорму("ОбработкаЗаполнения", ЭтаФорма);
		//ФормаЗаполнения.ДокументОбъект=ЭтотОбъект;
		//ФормаЗаполнения.Открыть();
		
	ИначеЕсли стрКоманда="ЗаполнитьПоЗаказуПокупателя1" Или стрКоманда="ЗаполнитьПоЗаказуПокупателя2" Тогда
		Если Не ЗначениеЗаполнено(Объект.Сделка) Тогда 
			ПоказатьПредупреждение(,"Не выбран заказ покупателя!", 20);
			Возврат;
		КонецЕсли;
		ЗаполнитьПоЗаказуПокупателя(стрКоманда);
		
	ИначеЕсли стрКоманда="ОтображениеКартинкиТовара" Тогда
		Элементы.КартинкаТовара.Видимость=НЕ Элементы.КартинкаТовара.Видимость;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСоставИзделий_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "тзСоставИзделий", "");
	ТекущиеДанные=Элементы.тзСоставИзделий.ТекущиеДанные;
	
	Если стрКолонка="Доля" Тогда
		СтрокаТабличнойЧасти_Издержки=Элементы.Издержки.ТекущиеДанные;
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ID", СтрокаТабличнойЧасти_Издержки.ID);
		СтруктураОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.ХарактеристикаНоменклатуры);
		
		МассивСтрок=Объект.ДолиРаспределения.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()=0 Тогда			
			СтрокаТабличнойЧасти_ДолиРаспределения=Объект.ДолиРаспределения.Добавить();
			СтрокаТабличнойЧасти_ДолиРаспределения.ID=СтрокаТабличнойЧасти_Издержки.ID;
			СтрокаТабличнойЧасти_ДолиРаспределения.Доля=Элемент.Значение;
			СтрокаТабличнойЧасти_ДолиРаспределения.Номенклатура=ТекущиеДанные.Номенклатура;
			СтрокаТабличнойЧасти_ДолиРаспределения.ХарактеристикаНоменклатуры=ТекущиеДанные.ХарактеристикаНоменклатуры;
		Иначе
			СтрокаТабличнойЧасти_ДолиРаспределения=МассивСтрок[0];
		КонецЕсли;
		Если Элемент.Значение=0 Тогда Объект.ДолиРаспределения.Удалить(СтрокаТабличнойЧасти_ДолиРаспределения); КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Состав издержек"

&НаКлиенте
Процедура тпСоставИздержек_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "СоставИздержек", "");
	ТекущиеДанные=Элементы.СоставИздержек.ТекущиеДанные;
	
	Если стрКолонка="ВариантРаспределения" Тогда
		Элементы.СтраницаСоставИзделий.Видимость=ТекущиеДанные.ВариантРаспределения=ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.НеРаспределяется");
		
	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Инициализация базы распределения
	Элементы.ИздержкиВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска"));
	Элементы.ИздержкиВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты"));
	Элементы.ИздержкиВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты"));
	Элементы.ИздержкиВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.НеРаспределяется"), "Долевое распределение");
	
	Элементы.СоставИздержекВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска"));
	Элементы.СоставИздержекВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты"));
	Элементы.СоставИздержекВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты"));
	Элементы.СоставИздержекВариантРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияКосвенныхРасходов.НеРаспределяется"), "Долевое распределение");

	//Инициализация периодов
	Элементы.Период.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"), "Месяц");
	Элементы.Период.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"), "Квартал");

	//кпСоставИзделий_ВыполнитьДействие("Обновить");
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
