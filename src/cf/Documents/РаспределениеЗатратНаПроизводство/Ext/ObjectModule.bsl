Функция ПолучитьОборотВыпускаПродукции()
	Запрос=Новый Запрос; стрПериод=СокрЛП(Перечисления.Периодичность.Месяц);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Дата));
	Если Период=Перечисления.Периодичность.Квартал Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(Дата));
		Запрос.УстановитьПараметр("ДатаКонца", КонецКвартала(Дата));
		стрПериод="Квартал";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Статус", Перечисления.ПланФакт.Факт);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Продукция КАК Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.Подразделение КАК ЦФО,
	|	ИсточникДанных.ПлановаяСтоимостьОборот Как Стоимость,
	|	ИсточникДанных.КоличествоОборот Как Количество
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&ДатаНачала,&ДатаКонца, "+стрПериод+", Организация=&Организация) КАК ИсточникДанных
	|";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьОборотЗатратНаПродукцию()
	Запрос=Новый Запрос; стрПериод=СокрЛП(Перечисления.Периодичность.Месяц);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Дата));
	Если Период=Перечисления.Периодичность.Квартал Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(Дата));
		Запрос.УстановитьПараметр("ДатаКонца", КонецКвартала(Дата));
		стрПериод="Квартал";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Статус", Перечисления.ПланФакт.Факт);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ХарактеристикаНоменклатуры,
	|	ИсточникДанных.ЦФО,
	|	ИсточникДанных.СтатьяЗатрат.РазделЗатрат Как ВидЗатрат,
	|	ИсточникДанных.СтоимостьОборот Как Стоимость
	|ИЗ
	|	РегистрНакопления.ЗатратыНаПроизводство.Обороты(&ДатаНачала,&ДатаКонца, "+стрПериод+", Организация=&Организация) КАК ИсточникДанных
	|";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураТабличныхЧастей, Отказ)
	тзИздержки=СтруктураТабличныхЧастей.Издержки;
	тзСоставИздержек=СтруктураТабличныхЧастей.СоставИздержек;
	тзДолиРаспределения=СтруктураТабличныхЧастей.ДолиРаспределения;
	тзТовары=СтруктураТабличныхЧастей.Товары;

	тзВыпускПродукции=ПолучитьОборотВыпускаПродукции();
	тзЗатратыНаПродукцию=ПолучитьОборотЗатратНаПродукцию();
	
	тзДвижения_ЗатратыНаПроизводство=Движения.ЗатратыНаПроизводство.ВыгрузитьКолонки();
	тзДвижения_ЗатратыНераспределенные=Движения.ЗатратыНераспределенные.ВыгрузитьКолонки();

	прчБаза=Перечисления.БазыРаспределенияКосвенныхРасходов;
	
	Для каждого СтрокаТабличнойЧасти_Издержки Из тзИздержки Цикл
		СтруткураОтбора=Новый Структура("ID", СтрокаТабличнойЧасти_Издержки.ID);

		МассивСтрок_СоставИздержки=тзСоставИздержек.НайтиСтроки(СтруткураОтбора);
		Для каждого СтрокаТабличнойЧасти_СоставИздержки Из МассивСтрок_СоставИздержки Цикл
			текВариантРаспределения=СтрокаТабличнойЧасти_Издержки.ВариантРаспределения;
			Если Не СтрокаТабличнойЧасти_СоставИздержки.ВариантРаспределения.Пустая() Тогда
				текВариантРаспределения=СтрокаТабличнойЧасти_СоставИздержки.ВариантРаспределения;
			КонецЕсли;

			Если текВариантРаспределения=прчБаза.ОбъемВыпуска Тогда
				тзБаза=тзВыпускПродукции.Скопировать();
				тзБаза.Колонки.Добавить("СтатьяЗатрат");
				УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(тзБаза, СтрокаТабличнойЧасти_СоставИздержки.Стоимость, "Количество", 1, "Стоимость");

			ИначеЕсли текВариантРаспределения=прчБаза.МатериальныеЗатраты Тогда
				спОтбор=Новый СписокЗначений;
				спОтбор.Добавить(Справочники.КлассификаторПеречислений.РазделыЗатрат_ОсновныеМатериалы);
				спОтбор.Добавить(Справочники.КлассификаторПеречислений.РазделыЗатрат_ВспомогательныеМатериалы);
				СтруктураКритериев=Новый Структура("ВидЗатрат", спОтбор);
				СтруктураСложныхКритериев=Новый Структура("ВидЗатрат", ВидСравнения.ВСписке);
				тзБаза=ОбщегоНазначения.ОтобратьСтрокиПоКритериям(тзЗатратыНаПродукцию, СтруктураКритериев, СтруктураСложныхКритериев).Выгрузить();
				УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(тзБаза, СтрокаТабличнойЧасти_СоставИздержки.Стоимость, "Стоимость", 1);

			ИначеЕсли текВариантРаспределения=прчБаза.ПрямыеЗатраты Тогда
				тзБаза=тзЗатратыНаПродукцию.Скопировать();
				УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(тзБаза, СтрокаТабличнойЧасти_СоставИздержки.Стоимость, "Стоимость", 1);

			ИначеЕсли текВариантРаспределения=прчБаза.НеРаспределяется Тогда //Долевое распределение
				тзБаза=тзЗатратыНаПродукцию.Скопировать();
				Для каждого СтрокаКоллекции Из тзБаза Цикл
					СтруктураОтбора=Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
					СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаКоллекции.ХарактеристикаНоменклатуры);
					МассивСтрок=тзДолиРаспределения.НайтиСтроки(СтруктураОтбора);
					Если МассивСтрок.Количество()=0 Тогда
						СтрокаКоллекции.Стоимость=0;
					Иначе
						СтрокаКоллекции.Стоимость=МассивСтрок[0].Доля;
					КонецЕсли;
				КонецЦикла;
				УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(тзБаза, СтрокаТабличнойЧасти_СоставИздержки.Стоимость, "Стоимость", 1);
			КонецЕсли;

			//Затраты на производство
			Для каждого СтрокаКоллекции Из тзБаза Цикл
				НоваяСтрока=тзДвижения_ЗатратыНаПроизводство.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.СтатьяЗатрат=СтрокаТабличнойЧасти_Издержки.СтатьяЗатрат;
				НоваяСтрока.Количество=0;
			КонецЦикла;
			//Затраты нераспределенные
			НоваяСтрока=тзДвижения_ЗатратыНераспределенные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти_СоставИздержки);
			НоваяСтрока.СтатьяЗатрат=СтрокаТабличнойЧасти_Издержки.СтатьяЗатрат;
		КонецЦикла;
	КонецЦикла;

	//Движения по регистру "Затраты на производство"
	Если тзДвижения_ЗатратыНаПроизводство.Количество()>0 Тогда
		тзДвижения_ЗатратыНаПроизводство.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СтатьяЗатрат,ЦФО", "Количество,Стоимость");
		тзДвижения_ЗатратыНаПроизводство.Колонки.Добавить("Период");
		тзДвижения_ЗатратыНаПроизводство.Колонки.Добавить("Активность");
		тзДвижения_ЗатратыНаПроизводство.Колонки.Добавить("Регистратор");
		тзДвижения_ЗатратыНаПроизводство.Колонки.Добавить("Организация");
		тзДвижения_ЗатратыНаПроизводство.Колонки.Добавить("Статус");
		тзДвижения_ЗатратыНаПроизводство.ЗаполнитьЗначения(Дата, "Период");
		тзДвижения_ЗатратыНаПроизводство.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения_ЗатратыНаПроизводство.ЗаполнитьЗначения(Ссылка, "Регистратор");
		тзДвижения_ЗатратыНаПроизводство.ЗаполнитьЗначения(Организация, "Организация");
		тзДвижения_ЗатратыНаПроизводство.ЗаполнитьЗначения(Перечисления.ПланФакт.Факт, "Статус");
		Движения.ЗатратыНаПроизводство.Загрузить(тзДвижения_ЗатратыНаПроизводство);
	КонецЕсли;

	//Движения по регистру "Затраты нераспределенные"
	Если тзДвижения_ЗатратыНераспределенные.Количество()>0 Тогда
		тзДвижения_ЗатратыНераспределенные.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СтатьяЗатрат,ЦФО", "Количество,Стоимость");
		тзДвижения_ЗатратыНераспределенные.Колонки.Добавить("Период");
		тзДвижения_ЗатратыНераспределенные.Колонки.Добавить("Активность");
		тзДвижения_ЗатратыНераспределенные.Колонки.Добавить("Регистратор");
		тзДвижения_ЗатратыНераспределенные.Колонки.Добавить("Организация");
		тзДвижения_ЗатратыНераспределенные.Колонки.Добавить("ВидДвижения");
		тзДвижения_ЗатратыНераспределенные.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		тзДвижения_ЗатратыНераспределенные.ЗаполнитьЗначения(Дата, "Период");		
		тзДвижения_ЗатратыНераспределенные.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения_ЗатратыНераспределенные.ЗаполнитьЗначения(Ссылка, "Регистратор");
		тзДвижения_ЗатратыНераспределенные.ЗаполнитьЗначения(Организация, "Организация");		
		Движения.ЗатратыНераспределенные.Загрузить(тзДвижения_ЗатратыНераспределенные);
	КонецЕсли;
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	СуммаДокумента=Издержки.Итог("Стоимость");
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	СтруктураТЧ=Новый Структура;
	СтруктураТЧ.Вставить("Издержки", Издержки.Выгрузить());
	СтруктураТЧ.Вставить("СоставИздержек", СоставИздержек.Выгрузить());
	СтруктураТЧ.Вставить("ДолиРаспределения", ДолиРаспределения.Выгрузить());
	СтруктураТЧ.Вставить("Товары", Товары.Выгрузить());

	ДвиженияПоРегистрам(РежимПроведения, СтруктураТЧ, Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);