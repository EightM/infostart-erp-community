Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт
	СуммаДокумента=ЦенообразованиеСервер.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаНДС=ЦенообразованиеСервер.ПолучитьНДСДокумента(ЭтотОбъект);

	//Товары
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
		Если Не УчитыватьНДС Тогда СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС; КонецЕсли;
		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		Если СтрокаТабличнойЧасти.Качество.Пустая() Тогда
			СтрокаТабличнойЧасти.Качество=Справочники.Качество.Новый;
		КонецЕсли;	 
	КонецЦикла;
	
	//Возвратная тара
	Для каждого СтрокаТабличнойЧасти Из ВозвратнаяТара Цикл
		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	//Удаляем неиспользуемые строки состав набора
	МассивСтрок=Новый Массив;
	Для каждого СтрокаКоллекции Из СоставНабора Цикл
		Если ПустаяСтрока(СтрокаКоллекции.ID_Товары) Тогда Продолжить; КонецЕсли; 
		Если Товары.Найти(СтрокаКоллекции.ID_Товары, "ID")=Неопределено Тогда
			МассивСтрок.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		СоставНабора.Удалить(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти) Экспорт
	Если НЕ ЗначениеЗаполнено(Склад) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
			СтрокаТабличнойЧасти.ПриходныйОрдер=Склад;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад.Склад;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШД, ПерезаполнятьДокумент = Истина)
	Если ПерезаполнятьДокумент И Не ДополнительныеСвойства.УчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументОприходования");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(СтатусПартии, "СтатусПартии");

	ТаблицаТЧ.Индексы.Добавить("НомерСтроки");
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл		
		СтрокаТЧ=ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		Если НЕ СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры=Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТоварыПоОрдеруУпр(ДокументОснование, ТабличнаяЧасть) Экспорт
    ИмяТабличнойЧасти=?(ТабличнаяЧасть=ВозвратнаяТара, "ВозвратнаяТара", "Товары");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура,
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);	

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТабличнаяЧасть=Товары Тогда
			СтрокаТабличнойЧасти=Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		Иначе
			СтрокаТабличнойЧасти=ВозвратнаяТара.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);

			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, , ДополнительныеСвойства.ВалютаБухУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	мКурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	мКратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	ТипДокументаОснования = ТипЗнч(ДокументОснование);

	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ОтКомиссионера             = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	МетаданныеДокументаОснования = ДокументОснование.Метаданные();
	ДокументОснованиеИмя         = МетаданныеДокументаОснования.Имя;
	ЕстьСоставНабора             = УправлениеМетаданными.ЕстьТабличнаяЧасть("СоставНабора", МетаданныеДокументаОснования);
	ЕстьАвтоматическиеСкидки     = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок",МетаданныеДокументаОснования, "Товары");

	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.СтавкаНДС,
	|	Док.Количество,
	|	Док.Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.Комплект КАК Комплект,
	|	Док.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	Док.ТипДоговораКонтрагента КАК ТипДоговораКонтрагента,
	|"
	+ ?(ЕстьАвтоматическиеСкидки,"
	|	Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Док.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Док.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|","")
	+?(ЕстьСоставНабора, "
	|	Док.ID,", "")
	+ ?(ОснованиеРеализацияТоваров, "
	|	Док.Качество КАК Качество
	|", "
	|	&Качество КАК Качество
	|");

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", МетаданныеДокументаОснования, "Товары") Тогда
		Запрос.Текст = Запрос.Текст+", Док.Склад";
	Иначе
		Запрос.Текст = Запрос.Текст+", Неопределено КАК Склад";
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", МетаданныеДокументаОснования, "Товары") Тогда
		Запрос.Текст = Запрос.Текст+", Док.ЗаказПокупателя КАК ЗаказПокупателя";
	Иначе
		Запрос.Текст = Запрос.Текст+", Неопределено КАК ЗаказПокупателя";
	КонецЕсли;

	ДополнительныеПоляЗапросаРегл = "";

	Если ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Док.СерияНоменклатуры"+ДополнительныеПоляЗапросаРегл+"
		|"
	КонецЕсли; 

	Если ОтКомиссионера Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Остатки.КоличествоОстаток          КАК КоличествоОстатокПереданных,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары   КАК Док
	|";

	Если ОтКомиссионера Тогда
		Запрос.Текст = Запрос.Текст + ",
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|	                                           ДоговорКонтрагента = &ДоговорКонтрагента
		|											   И СтатусПередачи = &СтатусПередачи			 
		|											   И Сделка = &Сделка
		|	                                           ) КАК Остатки
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура 
		|   И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	РезультатЗапроса=Запрос.Выполнить();	
	Выборка=РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		Если ОтКомиссионера Тогда
			КолвоПереданных = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			Если КолвоПереданных>0 Тогда
				Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
				                   ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, мКурсДокумента,
				                   КратностьВзаиморасчетов, мКратностьДокумента);

				СтрокаТабличнойЧасти.Сумма = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, 
				                                              Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
				                                              Истина, УчитыватьНДС, СуммаВключаетНДС, 
				                                              УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку, ЕстьАвтоматическиеСкидки, "Товары");
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Цена = Выборка.Цена;

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
			                                                   Выборка.КурсДокумента, мКурсДокумента,
			                                                   Выборка.КратностьДокумента, мКратностьДокумента);

			СтрокаТабличнойЧасти.Цена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										УчитыватьНДС, СуммаВключаетНДС,
										УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если ОснованиеРеализацияТоваров Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ДокументПартии    = ДокументОснование;
		КонецЕсли;

		СтрокаТабличнойЧасти.ID=Новый УникальныйИдентификатор;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт
	мКурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	мКратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	
	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	ДокументОснованиеИмя=ДокументОснование.Метаданные().Имя;
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", ДокументОснование.Метаданные(), "ВозвратнаяТара") Тогда
		ДобавкаСклад = "Док.Склад,";
	Иначе
		ДобавкаСклад = "неопределено КАК Склад,";
	КонецЕсли;
	
    Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", ДокументОснование.Метаданные(), "ВозвратнаяТара") Тогда
		ДобавкаЗаказПокупателя = "Док.ЗаказПокупателя,";
	Иначе
		ДобавкаЗаказПокупателя = "неопределено КАК ЗаказПокупателя,";
	КонецЕсли;

	Запрос.Текст="
	|ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента, "
	+ ДобавкаСклад + " "+ДобавкаЗаказПокупателя+"
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаВозвратнойТары=ВозвратнаяТара.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВозвратнойТары, Выборка);
		ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаВозвратнойТары);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТоварыНереализованнымиУпр(СпособЗаполнения, ДокументРеализации = Неопределено) Экспорт

	мКурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	мКратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета);
	
	// Добудем нереализованные товары
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);

	Если СпособЗаполнения = "ПоДокументу" Тогда

		// Вложенный запрос, ограничивающий список номенклатуры
		// документ типа Внутренний заказ не может быть основанием для возврата с комиссии  
		ТекстЗапросаСписокНоменклатуры = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура 
		|ИЗ 
		|	Документ.РеализацияТоваровУслуг.Товары   
		|ГДЕ Ссылка = &ДокументОснование";

		Запрос.УстановитьПараметр("ДокументОснование", ДокументРеализации);

		Если Не ЗначениеЗаполнено(ДокументРеализации.Сделка) Тогда
			Запрос.УстановитьПараметр("Сделка", Неопределено);
		Иначе
			Запрос.УстановитьПараметр("Сделка", ДокументРеализации.Сделка);
		КонецЕсли;

	КонецЕсли;

	ДополнительныеПоляЗапросаРегл = "";
	
	МетаданныеДокументаОснования = ДокументРеализации.Метаданные();
	ЕстьАвтоматическиеСкидки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок",МетаданныеДокументаОснования, "Товары");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.Количество                                           КАК КоличествоРеализации,
	|	Док.Цена,
	|"
	+ ?(ЕстьАвтоматическиеСкидки,"
	|	Док.ПроцентСкидкиНаценки 
	| + Док.ПроцентАвтоматическихСкидок                          КАК ПроцентСкидкиНаценки,
	|","
	|	Док.ПроцентСкидкиНаценки                                 КАК ПроцентСкидкиНаценки,
	|") + "
	|	Остатки.ХарактеристикаНоменклатуры," + 
		ДополнительныеПоляЗапросаРегл + "
	|	Док.СерияНоменклатуры,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                                                    КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                                                    КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|   Остатки.СуммаВзаиморасчетовОстаток                       КАК СтоимостьОтданнаяВалОстаток,
	|	Остатки.КоличествоОстаток                                КАК КоличествоОстатокРеализации
	|ИЗ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|";

	Если СпособЗаполнения = "ПоДокументу" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	          Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
		|	        И ДоговорКонтрагента = &Договор
		|	        И Сделка             = &Сделка
		|	        ) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|   Док.Номенклатура                 = Остатки.Номенклатура
		| И Док.ХарактеристикаНоменклатуры   = Остатки.ХарактеристикаНоменклатуры
		| И Док.СерияНоменклатуры            = Остатки.СерияНоменклатуры
		| И Док.Ссылка.Проведен
		|
		|ГДЕ
		|	  Остатки.КоличествоОстаток > 0
		|	 И Док.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";
	Иначе // по договору
		Запрос.Текст = Запрос.Текст + "
		|	        ДоговорКонтрагента = &Договор
		|	        И Сделка           = &Сделка
		|	        ) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|   Док.Номенклатура               = Остатки.Номенклатура
		| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		| И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры
		| И Док.Ссылка.Проведен
		|
		|ГДЕ
		|	  Остатки.КоличествоОстаток > 0
		|";
	КонецЕсли;

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		НетДокумента      = (Выборка.КоличествоРеализации = NULL);
		ОстатокПереданных = ?(Выборка.КоличествоОстатокРеализации = NULL, 0, Выборка.КоличествоОстатокРеализации);
		Если НетДокумента Тогда
			Количество = Выборка.КоличествоОстатокРеализации;
		Иначе
			Количество = Мин(Выборка.КоличествоРеализации, Выборка.КоличествоОстатокРеализации);
		КонецЕсли;

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ?(НетДокумента, Выборка.ЕдиницаХраненияОстатков, Выборка.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Коэффициент          = ?(НетДокумента, Выборка.КоэффициентХраненияОстатков, Выборка.Коэффициент);
		СтрокаТабличнойЧасти.СтавкаНДС            = ?(НетДокумента, Выборка.Номенклатура.СтавкаНДС,Выборка.СтавкаНДС);
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ?(НетДокумента, 0, Выборка.ПроцентСкидкиНаценки);

		Если НетДокумента Тогда
			СтрокаТабличнойЧасти.Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток / ОстатокПереданных,
			                            ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
			                            КурсВзаиморасчетов, мКурсДокумента, КратностьВзаиморасчетов, мКратностьДокумента);
		Иначе
			СтрокаТабличнойЧасти.Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			                            Выборка.ВалютаДокумента, ВалютаДокумента,
			                            Выборка.КурсДокумента, мКурсДокумента,
			                            Выборка.КратностьДокумента, мКратностьДокумента);
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументРеализации;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		ЗаполнитьСкладСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);

		Если НЕ НетДокумента Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьРеквизитыУчетаНДС() Экспорт
	
	Если ПокупателемВыставляетсяСчетФактураНаВозврат И (Дата <= '20060101' Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
	КонецЕсли;
	
	Если ПокупателемВыставляетсяСчетФактураНаВозврат И Не ОтразитьВКнигеПокупок Тогда
		ОтразитьВКнигеПокупок = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка таблиц для проведения

Функция КоэффициентПересчета(СтруктураШД)
	Если Не СтруктураШД.ВалютаДокумента=СтруктураШД.ВалютаРегламентированногоУчета Тогда
		Если Число(СтруктураШД.КурсДокумента)=0 Или Число(СтруктураШД.КратностьДокумента)=0 Тогда
			Возврат 1;
		КонецЕсли;
		Возврат СтруктураШД.КурсДокумента/СтруктураШД.КратностьДокумента;		
	КонецЕсли;
	Возврат 1; 
КонецФункции
 
Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти)
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураРеквизитов.Вставить("Подразделение", Подразделение);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		Если тзСсылка.Колонки.Найти(СтрокаКоллекции.Ключ)=Неопределено Тогда
			тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
			тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);		
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
 
Функция СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок)
	ОписаниеТипаЧисло=ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);
	текДата=ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);

	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.Добавить("ДокументПолучения");
	тзДанные.Колонки.Добавить("ОрганизацияДокументаПолучения");
	тзДанные.Колонки.Добавить("ПриходныйОрдерСклад");
	тзДанные.Колонки.Добавить("БезПраваПродажи");
	тзДанные.Колонки.Добавить("Услуга");
	тзДанные.Колонки.Добавить("Набор");
	тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("СуммаБезНДС", ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("СуммаСНДС"  , ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("Стоимость"  , ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("СтоимостьНУ", ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("НДС"	 	   , ОписаниеТипаЧисло); //СуммаНДС  ---- УДАЛИТЬ
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзДанные.Колонки.Добавить("КоличествоДок");
	тзДанные.Колонки.Добавить("СчетУчетаНДС");
	тзДанные.Колонки.Добавить("ВидЦенности");
	тзДанные.Колонки.Добавить("Ценность");	

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		СтрокаКоллекции.ЕдиницаИзмерения=СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ПриходныйОрдер) Тогда
			СтрокаКоллекции.ДокументПолучения=СтрокаКоллекции.ПриходныйОрдер;
			СтрокаКоллекции.ОрганизацияДокументаПолучения=СтрокаКоллекции.ПриходныйОрдер.Организация;
			СтрокаКоллекции.ПриходныйОрдерСклад=СтрокаКоллекции.ПриходныйОрдер.Склад;
			СтрокаКоллекции.БезПраваПродажи=СтрокаКоллекции.ПриходныйОрдер.БезПраваПродажи;
		КонецЕсли;
		СтрокаКоллекции.КоличествоДок=СтрокаКоллекции.Количество;
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество*СтрокаКоллекции.Коэффициент/СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;

		Если СтрокаКоллекции.Набор Тогда
			стрСообщение="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
			стрСообщение=стрСообщение+"содержится набор-пакет. Наборов-пакетов здесь быть не должно!";
			ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;

		СтрокаКоллекции.Сумма=Окр(СтрокаКоллекции.Сумма*КоэффициентПересчета, 2);
		СтрокаКоллекции.СуммаНДС=Окр(СтрокаКоллекции.СуммаНДС*КоэффициентПересчета, 2);		
		СтрокаКоллекции.НДС=СтрокаКоллекции.СуммаНДС;
		СтрокаКоллекции.СуммаБезНДС=СтрокаКоллекции.Сумма-?(УчитыватьНДС  И СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);

		СтоимостьСНДС=СтрокаКоллекции.Сумма+?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
		Если СтруктураШД.УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий И НЕ СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаКоллекции.Стоимость=СтрокаКоллекции.Сумма-?(УчитыватьНДС И СуммаВключаетНДС, СтрокаКоллекции.СуммаНДС, 0);
		Иначе
			СтрокаКоллекции.Стоимость=СтоимостьСНДС;
		КонецЕсли;		
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.Стоимость;
		//*** СтрокаКоллекции.СтоимостьПродажи=СтрокаКоллекции.Стоимость;
		СтрокаКоллекции.СуммаСНДС=СтоимостьСНДС;

		УчетНДС.ЗаполнитьСчетУчета(СтрокаКоллекции);
		
		// Определяем себестоимость товара, при условии что себестоимость явно не указана
		// сначала пытаемся получисть себестоимость по остаткам на складе, если таковой нет то
		// берем из типа цены регламентированного как "покупки", если такого нет то из текущего типа цены
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.ДокументПартии) Тогда
			Если НЕ СтрокаКоллекции.КоличествоДок=0 И СтрокаКоллекции.Себестоимость=0 Тогда 				
				Если ЗначениеЗаполнено(ТипЦенВозврата) Тогда
					УчетнаяЦена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, ТипЦенВозврата, текДата);
				Иначе			
					УчетнаяЦена=ЦенообразованиеСервер.УчетнаяЦенаТовара(Организация, СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Склад, СтрокаКоллекции.СерияНоменклатуры, текДата, "УУ");
				КонецЕсли;
				Если УчетнаяЦена=0 Тогда Продолжить; КонецЕсли;
				//*** текСебестоимость=СтрокаКоллекции.КоличествоДок*УчетнаяЦена;
				текСебестоимость=СтрокаКоллекции.Количество*УчетнаяЦена;

				СтрокаКоллекции.Себестоимость=текСебестоимость;
				СтрокаКоллекции.СебестоимостьНУ=текСебестоимость;
				
				СтрокаКоллекции.Стоимость=текСебестоимость;
				СтрокаКоллекции.СтоимостьНУ=текСебестоимость;
			КонецЕсли;
		КонецЕсли;
		
		Если ОтразитьВКнигеПокупок Тогда
			Если Не ПокупателемВыставляетсяСчетФактураНаВозврат И Не ЗначениеЗаполнено(СтрокаКоллекции.ДокументПартии) Тогда
				СтрокаНачалаСообщенияОбОшибке="В строке номер """+СокрЛП(СтрокаКоллекции.НомерСтроки)+""" табличной части ""Товары"": ";
				СтрокаСообщения="Не заполнено значение реквизита ""Документ партии""! Для автоматического отражения вычета в книге покупок по счету-фактуре реализации требуется указание документа партии.";
				Сообщить(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения, СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если Не Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
		тзДанные.ЗаполнитьЗначения(Неопределено, "СерияНоменклатуры");
	КонецЕсли;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");
	
	Возврат тзДанные;
КонецФункции

Функция СформироватьТаблицу_ТараВТ(СтруктураШД, Отказ, Заголовок)
	ОписаниеТипаЧисло=ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	КоэффициентПересчета=КоэффициентПересчета(СтруктураШД);

	тзДанные=ВозвратнаяТара.Выгрузить();
	тзДанные.Колонки.Добавить("ДокументПолучения");
	тзДанные.Колонки.Добавить("БезПраваПродажи");
	тзДанные.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	тзДанные.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	тзДанные.Колонки.Добавить("СуммаБезНДС"	, ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("СуммаНДС"	, ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("НДС"			, ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("ВидЦенности");
	тзДанные.Колонки.Добавить("Ценность");		
	тзДанные.Колонки.Добавить("Стоимость"	, ОписаниеТипаЧисло);
	тзДанные.Колонки.Добавить("СтоимостьНУ"	, ОписаниеТипаЧисло);

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.ДокументПолучения=СтрокаКоллекции.ПриходныйОрдер;
		СтрокаКоллекции.БезПраваПродажи=СтрокаКоллекции.ПриходныйОрдер.БезПраваПродажи;
		СтрокаКоллекции.Сумма=Окр(СтрокаКоллекции.Сумма*КоэффициентПересчета, 2);
		СтрокаКоллекции.СуммаБезНДС=СтрокаКоллекции.Сумма; // Сумма по таре всегда с НДС
		СтрокаКоллекции.НДС=0;
		СтрокаКоллекции.СуммаНДС=0;		
		СтрокаКоллекции.Стоимость=СтрокаКоллекции.Сумма;
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.Стоимость;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Тара");
	
	Возврат тзДанные;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ПараметрыУчетнойПолитики(Истина);

    //Движения по регистру "Продажи по дисконтным картам"
	ДвижениеПоРегистру_ПродажиПоДисконтнымКартам(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Предоставленные скидки"
	ДвижениеПоРегистру_ПредоставленныеСкидки(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Учет переданных ТМЦ"
	ДвижениеПоРегистру_ТоварыПереданные(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Учет ТМЦ к получению"
	ДвижениеПоРегистру_ТоварыКПолучениюНаСклады(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения по регистру "Учет ТМЦ" (по ячейкам)
	ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистру "Взаиморасчеты с контрагентами"
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения по регистру "Списанные товары"
	ДвиженияПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);
	
	//Движения по регистрам "Учет НДС"
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистрам "Учет партий ТМЦ"
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;
	Если НЕ СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда Возврат; КонецЕсли; 

	тзДвижения=Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();
	ВзаиморасчетыСервер.ОтражениеЗадолженности(СтруктураШД, СтруктураТД, "Приход", тзДвижения, Отказ, ДополнительныеСвойства.Заголовок, Истина);
	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_ПродажиПоДисконтнымКартам(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПродажиПоДисконтнымКартам") Тогда Возврат; КонецЕсли;
	
	Если СтруктураШД.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем И СуммаДокумента <> 0 Тогда
		Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда Возврат; КонецЕсли;

		тзПродажиПоДисконтнымКартам=Движения.ПродажиПоДисконтнымКартам.ВыгрузитьКолонки();

		УчетПоСетевымКонтрагентам=Константы.УчетПоСетевымКонтрагентам.Получить();
		КонтрагентПродажи=?(УчетПоСетевымКонтрагентам, Грузополучатель, Контрагент);
		Если Не ЗначениеЗаполнено(КонтрагентПродажи) Тогда КонтрагентПродажи=Контрагент; КонецЕсли;

		НоваяСтрока=тзПродажиПоДисконтнымКартам.Добавить();
		НоваяСтрока.Период=Дата;
		НоваяСтрока.Активность=Истина;
		НоваяСтрока.ДисконтнаяКарта=СтруктураШД.ДисконтнаяКарта;
		НоваяСтрока.ВладелецДисконтнойКарты=КонтрагентПродажи;
		НоваяСтрока.Сумма=МодульВалютногоУчета.ПересчитатьИзВалюты(-СуммаДокумента, ВалютаДокумента, СтруктураШД);

		Движения.ПродажиПоДисконтнымКартам.Загрузить(тзПродажиПоДисконтнымКартам);
	КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_ПредоставленныеСкидки(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПредоставленныеСкидки") Тогда Возврат; КонецЕсли;
	
	Если СтруктураШД.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем И НЕ СуммаДокумента=0 Тогда
		
	тзДанные=Движения.ПредоставленныеСкидки.ВыгрузитьКолонки();

	Для Каждого СтрокаТаблицы Из СтруктураТД.Товары Цикл
		СуммаБезСкидки=СтрокаТаблицы.СуммаБезНДС;
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если НЕ СтрокаТаблицы.ПроцентАвтоматическихСкидок=0 Тогда
			СтрокаДвижений=тзДанные.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если НЕ СтрокаТаблицы.ПроцентСкидкиНаценки=0 Тогда
			СтрокаДвижений=тзДанные.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально=СтрокаТаблицы.СуммаБезНДС;
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если НЕ Разница=0 И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если ЦенообразованиеСервер.ЭтоСпецПредложение(СтруктураШД.Дата, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, ЦенообразованиеСервер.МассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие=СоставНабора.НайтиСтроки(Новый Структура("ID_Товары", СтрокаТаблицы.ID));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					СтоимостьКомплектующей=Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество;
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки=СтоимостьКомплектующих - СтрокаТаблицы.Сумма;
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений=тзДанные.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	тзДанные.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");
	тзДанные.ЗаполнитьЗначения(ДоговорКонтрагента, "ПолучательСкидки");
	тзДанные.ЗаполнитьЗначения(Истина, "Активность");
	тзДанные.ЗаполнитьЗначения(Дата, "Период");
	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");

	Движения.ПредоставленныеСкидки.Загрузить(тзДанные);

		////////тзСкидки=СтруктураТД.Скидки;
		////////Если тзСкидки.Количество() > 0 Тогда
		////////	тзСкидки.ЗаполнитьЗначения(Дата, "Период");
		////////	тзСкидки.ЗаполнитьЗначения(Истина, "Активность");
		////////	тзСкидки.ЗаполнитьЗначения(ДоговорКонтрагента, "ПолучательСкидки");

		////////	Движения.ПредоставленныеСкидки.Загрузить(тзСкидки);
		////////КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыПереданные(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыПереданные") Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.ТоварыПереданные.ВыгрузитьКолонки();

	//Возвратная тара
	Для каждого СтрокаКоллекции Из СтруктураТД.ТараВТ Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара;
		НоваяСтрока.ВидДвижения=ВидДвиженияНакопления[?(НеСторнироватьТару, "Расход", "Приход")];
		НоваяСтрока.СуммаВзаиморасчетов=СтрокаКоллекции.Стоимость;
		Если НЕ НеСторнироватьТару Тогда
			НоваяСтрока.Количество=-СтрокаКоллекции.Количество;
			НоваяСтрока.СуммаВзаиморасчетов=-СтрокаКоллекции.Стоимость;
		КонецЕсли;
	КонецЦикла;

	//Товары
	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяСтрока.Количество=-СтрокаКоллекции.Количество;
			НоваяСтрока.СуммаВзаиморасчетов=-СтрокаКоллекции.Стоимость;
		КонецЦикла;
	КонецЕсли;
	
	Если тзДвижения.Количество()>0 Тогда
        тзДвижения.ЗаполнитьЗначения(Дата, "Период");
		тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
		тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		тзДвижения.ЗаполнитьЗначения(Контрагент , "Контрагент");
		тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
		Движения.ТоварыПереданные.Загрузить(тзДвижения);
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегистру_ТоварыКПолучениюНаСклады(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыКПолучениюНаСклады") Тогда Возврат; КонецЕсли;
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад Тогда Возврат; КонецЕсли;
	
	тзДвижения=Движения.ТоварыКПолучениюНаСклады.ВыгрузитьКолонки();
	Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный;
		НоваяСтрока.Количество=СтрокаКоллекции.КоличествоДок;
	КонецЦикла;
	Для каждого СтрокаКоллекции Из СтруктураТД.ТараВТ Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
		НоваяСтрока.Количество=СтрокаКоллекции.КоличествоДок;
	КонецЦикла;
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	Движения.ТоварыКПолучениюНаСклады.Загрузить(тзДвижения);	
КонецПроцедуры

Процедура ДвиженияПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ)
	тзДанные=Движения.СписанныеТовары.ВыгрузитьКолонки(); НомСтроки=0;
	Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
		НоваяСтрока=тзДанные.Добавить(); НомСтроки=НомСтроки+1;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Количество=СтрокаКоллекции.КоличествоДок;
		НоваяСтрока.СтоимостьСписаниеУУ=СтрокаКоллекции.Себестоимость;
		НоваяСтрока.СтоимостьСписаниеНУ=СтрокаКоллекции.СебестоимостьНУ;
		НоваяСтрока.СуммаЗадолженности=СтрокаКоллекции.СуммаСНДС;
		НоваяСтрока.НомерСтрокиДокумента=НомСтроки;
		НоваяСтрока.ДокументПередачи=СтрокаКоллекции.ДокументПартии;
		НоваяСтрока.СуммаНДС=СтрокаКоллекции.НДС;
		НоваяСтрока.СуммаЗадолженностиБУ=СтрокаКоллекции.СуммаБезНДС+СтрокаКоллекции.НДС;
	КонецЦикла;

	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		тзДанные.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя,   "КодОперацииПартииТоваров");

	ИначеЕсли СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		тзДанные.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, "КодОперацииПартииТоваров");
		тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,      "ДопустимыйСтатусПередачи");
	КонецЕсли;

	тзДанные.ЗаполнитьЗначения(Дата,   "Период");
	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДанные.ЗаполнитьЗначения(Истина, "Активность");
	тзДанные.ЗаполнитьЗначения(Контрагент, "Контрагент");
	тзДанные.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	тзДанные.ЗаполнитьЗначения(Сделка, "ЗаказСписания");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	тзДанные.ЗаполнитьЗначения(Подразделение, "Подразделение");
	тзДанные.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	тзДанные.ЗаполнитьЗначения(СтруктураШД.КурсДокумента, "КурсДокумента");
	тзДанные.ЗаполнитьЗначения(СтруктураШД.КратностьДокумента, "КратностьДокумента");
	тзДанные.ЗаполнитьЗначения(Проект, "Проект");
	тзДанные.ЗаполнитьЗначения(Организация, "Организация");

	Движения.СписанныеТовары.Загрузить(тзДанные);
	//Движения.СписанныеТовары.Записать();
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ) Экспорт
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;
	Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда Возврат; КонецЕсли;
	УчетНДС.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШД, СтруктураТД.Товары, Движения, Отказ, Истина);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыНаСкладах") Тогда Возврат; КонецЕсли;

	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		тзДвижения=Движения.ТоварыНаСкладах.ВыгрузитьКолонки();

		//Товары
		Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
			Если СтрокаКоллекции.Склад.Ячеистый Тогда
				НоваяСтрока=тзДвижения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
				//НоваяСтрока.Количество=СтрокаКоллекции.МинусКоличество;
				НоваяСтрока.Количество=-НоваяСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
		
		//Возвратная тара
		Для каждого СтрокаКоллекции Из СтруктураТД.ТараВТ Цикл
			Если СтрокаКоллекции.Склад.Ячеистый Тогда
				НоваяСтрока=тзДвижения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяСтрока.Качество=Справочники.Качество.Новый;
				//НоваяСтрока.Количество=СтрокаКоллекции.КоличествоДок;
				НоваяСтрока.Количество=СтрокаКоллекции.Количество;
			КонецЕсли;
		КонецЦикла;
	Иначе //Перечисления.ВидыПоступленияТоваров.ПоОрдеру
		тзДвижения=Движения.ТоварыНаСкладах.ВыгрузитьКолонки();
		Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
			НоваяСтрока=тзДвижения.Добавить(); //движение расход
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			//НоваяСтрока.Количество=СтрокаКоллекции.МинусКоличество;
			НоваяСтрока.Количество=-НоваяСтрока.Количество;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
			
			НоваяСтрока=тзДвижения.Добавить(); //движение приход
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Качество=Справочники.Качество.Новый;
			//*** НоваяСтрока.Количество=СтрокаКоллекции.МинусКоличество;
			НоваяСтрока.Количество=-НоваяСтрока.Количество;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
		КонецЦикла;
		Для каждого СтрокаКоллекции Из СтруктураТД.ТараВТ Цикл
			НоваяСтрока=тзДвижения.Добавить(); //движение расход
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Качество=Справочники.Качество.Новый;
			//НоваяСтрока.Количество=СтрокаКоллекции.МинусКоличество;
			НоваяСтрока.Количество=-НоваяСтрока.Количество;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
			
			НоваяСтрока=тзДвижения.Добавить(); //движение приход
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.Качество=Справочники.Качество.Новый;
			//НоваяСтрока.Количество=СтрокаКоллекции.МинусКоличество;
			НоваяСтрока.Количество=-НоваяСтрока.Количество;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
		КонецЦикла;
	КонецЕсли;

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	Движения.ТоварыНаСкладах.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ) Экспорт
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;
	
	//Товары без документа-партии (для регистра "Учет партий ТМЦ")
	Если НЕ СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		тзДвижения=Движения.ПартииТоваровНаСкладах.ВыгрузитьКолонки();
		
		КодОперацииПартииТоваров=Неопределено;
		Если СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			КодОперацииПартииТоваров=Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя
		ИначеЕсли СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			КодОперацииПартииТоваров=Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
		КонецЕсли;
		
		Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
			Если ЗначениеЗаполнено(СтрокаКоллекции.ДокументПартии) Тогда Продолжить; КонецЕсли;
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный;
			НоваяСтрока.КодОперации=КодОперацииПартииТоваров;
			Если НЕ СтрокаКоллекции.Себестоимость=0 Тогда
				НоваяСтрока.Стоимость=СтрокаКоллекции.Себестоимость;
			КонецЕсли; //3.10.2016
			Если НЕ СтрокаКоллекции.СебестоимостьНУ=0 Тогда
				НоваяСтрока.СтоимостьНУ=СтрокаКоллекции.СебестоимостьНУ;
			КонецЕсли; //3.10.2016

			// При поступлении по ордеру нужно сторнировать партию ордера
			Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Если НЕ СтрокаКоллекции.БезПраваПродажи=Истина Тогда
					НоваяСтрока=тзДвижения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
					НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.ПоОрдеру;
					НоваяСтрока.КодОперации=Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру;
					НоваяСтрока.Стоимость=0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого СтрокаКоллекции Из СтруктураТД.ТараВТ Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный;
			НоваяСтрока.КодОперации=КодОперацииПартииТоваров;
			НоваяСтрока.Качество=Справочники.Качество.Новый;
			НоваяСтрока.ВидДвижения=?(НеСторнироватьТару, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			Если НЕ НеСторнироватьТару Тогда
				НоваяСтрока.Количество=-НоваяСтрока.Количество;
				НоваяСтрока.Стоимость=-НоваяСтрока.Стоимость;
				НоваяСтрока.СтоимостьНУ=-НоваяСтрока.СтоимостьНУ;			
			КонецЕсли; 
			
			// При поступлении по ордеру нужно сторнировать партию ордера
			Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				НоваяСтрока=тзДвижения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.СтатусПартии=Перечисления.СтатусыПартийТоваров.ПоОрдеру;
				НоваяСтрока.Качество=Справочники.Качество.Новый;
				НоваяСтрока.КодОперации=Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру;
				НоваяСтрока.Стоимость=0;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ДополнительныеСвойства.УчетнаяПолитика.СпособОценкиМПЗ=Перечисления.СпособыОценки.ПоСредней Тогда
			тзДвижения.ЗаполнитьЗначения(Ссылка, "ДокументОприходования");
		КонецЕсли;

		Если НЕ тзДвижения.Количество()=0 Тогда
			Движения.ПартииТоваровНаСкладах.Загрузить(тзДвижения);
			Движения.ПартииТоваровНаСкладах.Записать();
		КонецЕсли;
	КонецЕсли;

	//{Таблица товаров без документа-партии (для регистра "Продажи")
	тзПродажи=Новый ТаблицаЗначений;
	мдРегистрпПродажи=Метаданные.РегистрыНакопления.Продажи;
	Для каждого мдОбъект Из мдРегистрпПродажи.Измерения Цикл
		тзПродажи.Колонки.Добавить(мдОбъект.Имя);
	КонецЦикла; 
	Для каждого мдОбъект Из мдРегистрпПродажи.Ресурсы Цикл
		тзПродажи.Колонки.Добавить(мдОбъект.Имя);
	КонецЦикла;
	Для каждого мдОбъект Из мдРегистрпПродажи.Реквизиты Цикл
		тзПродажи.Колонки.Добавить(мдОбъект.Имя);
	КонецЦикла;
	
	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаКоллекции.ДокументПартии) Тогда Продолжить; КонецЕсли;
		НоваяСтрока=тзПродажи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.ДопИнформация=СтрокаКоллекции.ПричинаВозврата;
		НоваяСтрока.ДокументОприходования=Ссылка;
		НоваяСтрока.Количество=-НоваяСтрока.Количество;
		НоваяСтрока.Себестоимость=-СтрокаКоллекции.Себестоимость;
		//НоваяСтрока.Стоимость=-СтрокаКоллекции.СтоимостьПродажи;
		//*** НоваяСтрока.Стоимость=-СтрокаКоллекции.СуммаБезНДС;
		НоваяСтрока.Стоимость=-СтрокаКоллекции.СуммаСНДС;
		НоваяСтрока.НДС=-СтрокаКоллекции.НДС;
	КонецЦикла;
	
	УчетПоСетевымКонтрагентам=Константы.УчетПоСетевымКонтрагентам.Получить();
	КонтрагентПродажи=?(УчетПоСетевымКонтрагентам, Грузополучатель, Контрагент);
	Если Не ЗначениеЗаполнено(КонтрагентПродажи) Тогда КонтрагентПродажи=Контрагент; КонецЕсли;
	ДоговорКонтрагентаПродажи=?(УчетПоСетевымКонтрагентам, ДоговорГрузополучателя, ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(ДоговорКонтрагентаПродажи) Тогда	ДоговорКонтрагентаПродажи=ДоговорКонтрагента; КонецЕсли;
	
	тзПродажи.ЗаполнитьЗначения(КонтрагентПродажи, "Контрагент");
	тзПродажи.ЗаполнитьЗначения(ДоговорКонтрагентаПродажи, "ДоговорКонтрагента");
	тзПродажи.ЗаполнитьЗначения(Подразделение, "Подразделение");
	тзПродажи.ЗаполнитьЗначения(Проект, "Проект");
	//}Таблица товаров без документа-партии
	
	СтруктураШД.Вставить("Отказ", Отказ);
	СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
	Если тзПродажи.Количество()>0 Тогда
		СтруктураШД.Вставить("РегистрНакопления_Продажи", тзПродажи);
	КонецЕсли;
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		//Проект = Основание.Проект;
		//Сделка = Основание.Сделка;

		Если Основание.Проведен Тогда
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ЗаполнитьТоварыНереализованнымиУпр("ПоДокументу", Основание);
			Иначе
				// Скопируем табличные части из документа основания.
				ЗаполнитьТоварыПоОснованию(Основание);
			КонецЕсли;
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		Сделка = Основание;
		Если Сделка.Проведен Тогда
			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОснованию(Сделка);
			ЗаполнитьВозвратнуюТаруПоОснованию(Сделка);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Склад     = Основание;
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		УчитыватьНДС   = Истина;

		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтруктураПраметров=Новый Структура;
			СтруктураПраметров.Вставить("Организация", Организация);
			СтруктураПраметров.Вставить("Контрагент", Контрагент);
			СтруктураПраметров.Вставить("ВидДоговора", "СПокупателем,СКомиссионером");
			ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

			// Тип цен заполняем, только если в договоре указаны тип цен номенклатуры (он - покупатель или комиссионер).
			Если ДоговорКонтрагента <> Неопределено Тогда
				ТипЦенКонтрагента = ДоговорКонтрагента.ТипЦен;
				Если ЗначениеЗаполнено(ТипЦенКонтрагента) И ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
					ТипЦен = ТипЦенКонтрагента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СуммаВключаетНДС=?(ЗначениеЗаполнено(ТипЦен), ТипЦен.ЦенаВключаетНДС, Истина);
		ВалютаДокумента=?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента.ВалютаВзаиморасчетов, ДополнительныеСвойства.ВалютаБухУчета);
		СтруктураКурса          = МодульВалютногоУчета.КурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов      = СтруктураКурса.Курс;
		КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		Если Основание.Проведен Тогда
			ЗаполнитьТоварыПоОрдеруУпр(Основание, Товары);
			ЗаполнитьТоварыПоОрдеруУпр(Основание, ВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;
	СтруктураТД.Вставить("Комплекты", УправлениеЗапасами.СформироватьТаблицуКомплектующих(СтруктураТД.Товары, ЭтотОбъект, СтруктураШД));

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Авто-заполнение реквизитов документа
	АвтоЗаполнениеРеквизитовДокумента();

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);	
	Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураШД.Вставить("ВидСклада", Склад.Склад.ВидСклада);
		СтруктураШД.Вставить("СкладПриходногоОрдера", Склад.Склад);
	Иначе
		СтруктураШД.Вставить("ВидСклада", Склад.ВидСклада);
	КонецЕсли;
	СтруктураШД.Вставить("ПроводитьПоВзаиморасчетам", СтруктураШД.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СтруктураШД.Вставить("Направление", "Реализация");
	СтруктураШД.Вставить("ЭтоВозврат", Истина);

	//При выборочном проведении нет необходимости вызывать данные проверки (как выяснилось, не все так просто)
	//Если НЕ ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		//Реквизиты табличной части "Товары", "Возвратная тара"
		Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			ПроверяемыеРеквизиты.Добавить("Товары.ПриходныйОрдер");
			ПроверяемыеРеквизиты.Добавить("ВозвратнаяТара.ПриходныйОрдер");
		КонецЕсли;
		
		Если ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "Товары", ПроверяемыеРеквизиты, Склад.ВидСклада);
			УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", ПроверяемыеРеквизиты, Склад.ВидСклада);
		Иначе
			УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "Товары", ПроверяемыеРеквизиты);
			УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", ПроверяемыеРеквизиты);
		КонецЕсли;
		
		//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
		ВзаиморасчетыСервер.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, ДоговорКонтрагента.Организация, Отказ, Заголовок);
	//КонецЕсли;
	
	//Формирование значений реквизитов табличных частей
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Товары", СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));
	СтруктураТД.Вставить("ТараВТ", СформироватьТаблицу_ТараВТ(СтруктураШД, Отказ, Заголовок));
	//*** СтруктураТД.Вставить("Скидки", СформироватьТаблицу_Скидки(СтруктураШД, СтруктураТД.Товары));
	
	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Продажа");