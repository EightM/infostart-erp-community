&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()
	Объект.СуммаДокумента=Объект["Товары"].Итог("Сумма");
	Объект.СуммаНДС=Объект.Товары.Итог("СуммаНДС");
	Если Объект.УчитыватьНДС И Не Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента=Объект.СуммаДокумента+Объект.СуммаНДС;
	КонецЕсли;

	//*** Элементы.НадписьВсего.Заголовок="Всего ("+СокрЛП(Объект.ВалютаДокумента)+")";
	Элементы.НадписьВсегоНДС.Заголовок="НДС "+?(Объект.СуммаВключаетНДС, "(в т. ч.)", "(сверху)");

	//Элементы.НадписьВсего.Заголовок="Всего: "+ОбщегоНазначенияСервер.ФорматСумм(Объект.СуммаДокумента);
	//Элементы.НадписьВсегоНДС.Заголовок="НДС"+?(Объект.СуммаВключаетНДС, "(в т. ч.)", "НДС (сверху)")+":"+ОбщегоНазначенияСервер.ФорматСумм(Объект.СуммаНДС);

	Если Объект.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ВременнаяСтрока="Цены АТТ: "+Строка(Объект.Склад)+".";
	Иначе
		ВременнаяСтрока="Тип цен: "+?(ЗначениеЗаполнено(Объект.ТипЦен), Строка(Объект.ТипЦен)+".", "Не заполнено!");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловиеПродаж) Тогда
		ВременнаяСтрока=ВременнаяСтрока+", Условие продаж: "+Строка(Объект.УсловиеПродаж);
	КонецЕсли;
	Элементы.ЦенаВалютаДокумента.Заголовок=ВременнаяСтрока;
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДанныеФормы()
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	Если ОбщегоНазначенияСервер.ПроверкаРасширения("33lab_ЕГАИС") Тогда
		Модуль_ЕГАИС_Переопределяемый=ОбщегоНазначенияКлиент.ОбщийМодуль("ЕГАИС_СерверПереопределяемый");
		МассивНоменклатуры=Новый Массив;
		Для Каждого СтрокаКоллекции Из Объект.Товары Цикл
			МассивНоменклатуры.Добавить(СтрокаКоллекции.Номенклатура);
		КонецЦикла;
		Если Модуль_ЕГАИС_Переопределяемый.ПроверитьВозможностьСозданияДокументаЕГАИС(МассивНоменклатуры) Тогда
			ДокументЕГАИС=Модуль_ЕГАИС_Переопределяемый.ПолучитьДокументЕГАИС(Объект.Ссылка);
			ДокументЕГАИСПредставление = Новый ФорматированнаяСтрока(?(ЗначениеЗаполнено(ДокументЕГАИС), Строка(ДокументЕГАИС), "Создать документ ЕГАИС"), Новый Шрифт(,,,,Истина), WebЦвета.SteelBlue,, ПолучитьНавигационнуюСсылку(ДокументЕГАИС));
			Элементы.ДокументЕГАИСПредставление.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки_ДокументЕГАИС(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДокументЕГАИС=ОбщегоНазначенияСервер.СсылкаИзНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
	Если ЗначениеЗаполнено(ДокументЕГАИС) Тогда
		ОткрытьФорму(УправлениеМетаданными.ОписаниеСсылки(ДокументЕГАИС)+".ФормаОбъекта", Новый Структура("Ключ", ДокументЕГАИС));
	Иначе
		ОткрытьФорму(УправлениеМетаданными.ОписаниеСсылки(ДокументЕГАИС)+".ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьАвтоматическиеСкидки()
	Если ЦенообразованиеСервер.МожноРассчитыватьАвтоматическиеСкидки(УчетнаяПолитика) Тогда Возврат; КонецЕсли; 

	СуммаДокументаБезСкидок=0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СуммаДокументаБезСкидок=СуммаДокументаБезСкидок+Окр(СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество, 2);
	КонецЦикла;

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВидРеализации", ПредопределенноеЗначение("Перечисление.ВидыСкидок.Розничная"));
	СтруктураПараметров.Вставить("СуммаДокумента", СуммаДокументаБезСкидок);
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("ВидОплаты", Неопределено);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("УчетнаяПолитика", УчетнаяПолитика);
	//СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	//СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	//СтруктураПараметров.Вставить("КурсКратность", Объект.КурсВзаиморасчетов);
	//СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);

	СтруктураПараметров.Вставить("ТаблицаДанных", Объект.Товары.Выгрузить()); НомерСтроки=0;
	Если ЦенообразованиеСервер.РассчитатьСкидкиПриПродаже(СтруктураПараметров) Тогда		
		Для каждого СтрокаКоллекции Из СтруктураПараметров.ТаблицаДанных Цикл
			СтрокаТабличнойЧасти=Объект.Товары[НомерСтроки]; НомерСтроки=НомерСтроки+1;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаКоллекции, "ПроцентАвтоматическихСкидок,УсловиеАвтоматическойСкидки,ЗначениеУсловияАвтоматическойСкидки,Сумма,СуммаНДС");			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РедактированиеЦенВДокументах()
	Возврат ПараметрыСеанса.ДопПраваПользователя["РедактированиеЦенВДокументах"];
КонецФункции	 

&НаСервере
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровСервер() Экспорт
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТоварыПоИнвентаризацииТоваров(Объект.ИнвентаризацияТМЦ);
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ЦенаВалюта(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметр1);
	
	Если Параметр1.ПерезаполнитьЦеныПоТипу Тогда
		НаДату=ТекущаяДата();
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.ТипЦен, НаДату, СтрокаКоллекции.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму(СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки(); ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ПересчитатьЗначенияТорговойУступки(Параметр1, Параметр2=Неопределено) Экспорт
	Если НЕ Параметр1=Истина Тогда Возврат; КонецЕсли;

	СоответствиеТарифов=УправлениеРозничнойТорговлейСервер.СформироватьСоответствиеТарифовЭквайринг(Объект.ДоговорЭквайринга);
	Для Каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		СтрокаОплаты.ПроцентТорговойУступки=СоответствиеТарифов[СтрокаОплаты.ВидОплаты];
		СтрокаОплаты.СуммаТорговойУступки=СтрокаОплаты.Сумма*СтрокаОплаты.ПроцентТорговойУступки/100;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповешения_ОтветНаВопрос(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Да Тогда 
		Объект.Товары.Очистить();
	КонецЕсли;
	ЗаполнитьТоварыПоИнвентаризацииТоваровСервер();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаСервере
Процедура Атрибут_ПриИзменении_Сервер(стрИмя)
	Если стрИмя="ДоговорКонтрагента" Тогда
		//РеквизитФормыВЗначение("Объект")
		
		//ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента
		//Объект.ДоговорКонтрагента
		//СтруктураРеквизитовДокумента=ЦенообразованиеСервер.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Объект);
		//ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, ПредыдущиеЗначенияАтрибутов.ВалютаВзаиморасчетов, ДополнительныеСвойства.ВалютаБухУчета, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, СтруктураРеквизитовДокумента, "Продажа", "Товары", ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	////УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	////Атрибут_ПриИзменении_Сервер(Элемент.Имя);

	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");
		
	ИначеЕсли Элемент.Имя="КассаККМ" Тогда
		
	ИначеЕсли Элемент.Имя="ДоговорЭквайринга" Тогда
		Эквайрер=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорЭквайринга, "Эквайрер");
		ДоговорВзаиморасчетовЭквайрера=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорЭквайринга, "ДоговорВзаиморасчетов");

		Если Объект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ПересчитатьЗначенияТорговойУступки", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Пересчитать значения торговой уступки?", РежимДиалогаВопрос.ДаНет, 20);
		Иначе
			ОбработчикОповещения_ПересчитатьЗначенияТорговойУступки(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="АвтоматическиеСкидки" Тогда
		ПересчитатьАвтоматическиеСкидки();				

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
		ОбновитьДанныеФормы();
		
	ИначеЕсли стрКоманда="ОбновитьПредставлениеТабличнойЧасти" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаСервере
Процедура тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть)
	Если стрТабличнаяЧасть="Товары" Тогда
		ИспользоватьХарактеристики=ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИспользоватьСерии=ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	КонецЕсли;

	Для каждого СтрокаКоллекции Из Объект[стрТабличнаяЧасть] Цикл
		Если стрТабличнаяЧасть="Товары" Тогда
			СтрокаКоллекции.СуммаБезСкидок=СтрокаКоллекции.Цена*СтрокаКоллекции.Количество;
		КонецЕсли;
		СтрокаКоллекции.Всего=СтрокаКоллекции.Сумма+?(Объект.СуммаВключаетНДС, 0, СтрокаКоллекции.СуммаНДС);
		
		Если стрТабличнаяЧасть="Товары" И (ИспользоватьХарактеристики ИЛИ ИспользоватьСерии) Тогда
			СтруктураДанных=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(СтрокаКоллекции.Номенклатура, "ВестиУчетПоХарактеристикам,ВестиУчетПоСериям");
			СтрокаКоллекции.ХарактеристикиИспользуются=СтруктураДанных.ВестиУчетПоХарактеристикам;
			СтрокаКоллекции.СерииИспользуются=СтруктураДанных.ВестиУчетПоСериям;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрКоманда=стрЗаменить(Команда.Имя, "кпТовары_", "");
	
	Если стрКоманда="ЗаполнитьТОП" Тогда
		
	ИначеЕсли стрКоманда="ЗаполнитьПоИнвентаризации" Тогда
		ЗаполнятьТабличнуюЧасть=Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.ИнвентаризацияТМЦ) Тогда
			ТекстПредупреждения="Документ Инвентаризация ТМЦ не выбран.
			|Заполнение невозможно.";
		Иначе
			ЗаполнятьТабличнуюЧасть=Истина;
		КонецЕсли;
		
		Если Не ЗаполнятьТабличнуюЧасть Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если Объект.Товары.Количество()>0 Тогда
			ОчиститьТабЧасть=Истина;
			
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповешения_ОтветНаВопрос", ЭтотОбъект);
			стрВопрос="Перед заполнением табличная часть будет очищена. Заполнить?";
			ПоказатьВопрос(ОписаниеОповещения, стрВопрос, РежимДиалогаВопрос.ДаНет, 0,,"Внимание!");
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередУдалением(Элемент, Отказ)
	МассивСтрок=Объект.СоставНабора.НайтиСтроки(Новый Структура("ID_Товары", Элемент.ТекущиеДанные.ID));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Объект.СоставНабора.Удалить(СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	
	Если стрКолонка="Склад" Тогда		
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаНДС,СтавкаАкциза");

		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.СтавкаАкциза=СтруктураНоменклатуры.СтавкаАкциза;
		ТекущиеДанные.СтавкаНДС=СтруктураНоменклатуры.СтавкаНДС;
		
	ИначеЕсли стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаНДС,СтавкаАкциза");

		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.СтавкаАкциза=СтруктураНоменклатуры.СтавкаАкциза;
		ТекущиеДанные.СтавкаНДС=СтруктураНоменклатуры.СтавкаНДС;
		
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Если НЕ ТекущиеДанные.ХарактеристикаНоменклатуры.Владелец=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму();
		КонецЕсли;
		
	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
				тпТовары_РассчитатьСумму();
			КонецЕсли;
		КонецЕсли;		

	ИначеЕсли стрКолонка="Количество" Тогда
		тпТовары_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Цена" Тогда
		тпТовары_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="Сумма" Тогда
		СуммаБезСкидки=ТекущиеДанные.Сумма * 100/ (100 - ТекущиеДанные.ПроцентСкидкиНаценки - ТекущиеДанные.ПроцентАвтоматическихСкидок);		
		ТекущиеДанные.Цена=СуммаБезСкидки / ТекущиеДанные.Количество;
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);		
		ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
		ОбновитьНадписи();

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		тпТовары_РассчитатьСумму();

	ИначеЕсли стрКолонка="ПроцентСкидкиНаценки" Тогда
		тпТовары_РассчитатьСумму();
		
	ИначеЕсли стрКолонка="СтавкаАкциза" Тогда
		ТекущиеДанные.СуммаАкциза=ТекущиеДанные.СтавкаАкциза*ТекущиеДанные.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_НачалоВыбора(Элемент, СтандартнаяОбработка)
	//стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	//ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	//Если стрКолонка="УсловиеАвтоматическойСкидки" Тогда

	//	Элемент.СписокВыбора.Очистить();
	//	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента"));
	//	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.ПоКоличествуТовара"));
	//	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты"));
	//	Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте"));
	//КонецЕсли;
	//Сообщить("в");
	//стрКолонка=?(ТипЗнч(Элемент)=Тип("ПолеВвода"), ЭлементыФормы.Товары.ТекущаяКолонка.Имя, Элемент);
	//СтрокаТабличнойЧасти=?(СтрокаТабличнойЧастиПрограмно=Неопределено, ЭлементыФормы.Товары.ТекущиеДанные, СтрокаТабличнойЧастиПрограмно);

	//Если стрКолонка="СерияНоменклатуры" Тогда
	//	СтрокаТабличнойЧасти=ЭлементыФормы.Товары.ТекущиеДанные;
	//	Если НЕ СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям Тогда
	//		Предупреждение("Для номенклатуры """ + СтрокаТабличнойЧасти.Номенклатура+""" не ведется учет по сериям!");
	//		СтандартнаяОбработка = Ложь; Возврат;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	КонецЕсли; 

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	Если (СпособРасчета=Неопределено) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок")) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки")) Тогда
		СуммаСкидки=Сумма*ТекущиеДанные.ПроцентАвтоматическихСкидок / 100;
		Если НЕ СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки") Тогда
			СуммаСкидки=СуммаСкидки+(Сумма*ТекущиеДанные.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;

	ТекущиеДанные.Сумма=Сумма-СуммаСкидки;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	ТекущиеДанные.СуммаАкциза=ТекущиеДанные.СтавкаАкциза*ТекущиеДанные.Количество;
	
	ОбновитьНадписи();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Оплата платежными картами"

&НаКлиенте
Процедура тпОплатаПлатежнымиКартами_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОплатаПлатежнымиКартами", "");
	ТекущиеДанные=Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	Если стрКолонка="ВидОплаты" Тогда
		УправлениеРозничнойТорговлейСервер.ПроверитьКорректностьВидаОплаты(ТекущиеДанные.ВидОплаты, ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
		
		Если ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
			ТекущиеДанные.ПроцентТорговойУступки=УправлениеРозничнойТорговлейСервер.ПолучитьПроцентТорговойУступки(Объект.ДоговорЭквайринга, ТекущиеДанные.ВидОплаты);
			ТекущиеДанные.СуммаТорговойУступки=ТекущиеДанные.Сумма*ТекущиеДанные.ПроцентТорговойУступки / 100;
		КонецЕсли;

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаТорговойУступки=ТекущиеДанные.Сумма*ТекущиеДанные.ПроцентТорговойУступки / 100;
		
	ИначеЕсли стрКолонка="ПроцентТорговойУступки" Тогда
		ТекущиеДанные.СуммаТорговойУступки=ТекущиеДанные.Сумма*ТекущиеДанные.ПроцентТорговойУступки / 100;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпОплатаПлатежнымиКартами_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОплатаПлатежнымиКартами", "");
	ТекущиеДанные=Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	Если стрКолонка="ВидОплаты" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта")));
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпОплатаПлатежнымиКартами_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпОплатаПлатежнымиКартами_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаСервере
Процедура кпОплатаПлатежнымиКартами_ВыполнитьДействие_Сервер(стрКоманда)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Если стрКоманда="ЗаполнитьТОП" Тогда
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект["ОплатаПлатежнымиКартами"] Цикл
			УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, "ОплатаПлатежнымиКартами");
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЭквайрерНажатие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Эквайрер) Тогда
		ПараметрыФормы=Новый Структура("Ключ",Объект.Эквайрер);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовЭквайрераНажатие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовЭквайрера) Тогда
		ПараметрыФормы=Новый Структура("Ключ",Объект.ДоговорВзаиморасчетовЭквайрера);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Обработчики событий табличной части "Оплата Банковскими Кредитами"

&НаКлиенте
Процедура тпОплатаБанковскимиКредитами_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОплатаБанковскимиКредитами", "");
	ТекущиеДанные=Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	Если стрКолонка="ВидОплаты" Тогда
		УправлениеРозничнойТорговлейСервер.ПроверитьКорректностьВидаОплаты(ТекущиеДанные.ВидОплаты, ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
		
		ТекВидОплаты=ТекущиеДанные.ВидОплаты;
		СтруктураТекВидОплаты=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекВидОплаты,"БанкКредитор,ДоговорВзаиморасчетовБанкаКредитора,ПроцентБанковскойКомиссии");
		ТекущиеДанные.БанкКредитор=СтруктураТекВидОплаты.БанкКредитор;
		ТекущиеДанные.ДоговорВзаиморасчетовБанкаКредитора=СтруктураТекВидОплаты.ДоговорВзаиморасчетовБанкаКредитора;
		ТекущиеДанные.ПроцентБанковскойКомиссии=СтруктураТекВидОплаты.ПроцентБанковскойКомиссии;
		
		ТекущиеДанные.СуммаБанковскойКомиссии=ТекущиеДанные.Сумма*ТекущиеДанные.ПроцентБанковскойКомиссии/100;

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаБанковскойКомиссии=ТекущиеДанные.Сумма*ТекущиеДанные.ПроцентБанковскойКомиссии/100;
		
	ИначеЕсли стрКолонка="ПроцентБанковскойКомиссии" Тогда
		ТекущиеДанные.СуммаБанковскойКомиссии=ТекущиеДанные.Сумма*ТекущиеДанные.ПроцентБанковскойКомиссии/100;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпОплатаБанковскимиКредитами_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОплатаБанковскимиКредитами", "");
	ТекущиеДанные=Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Если стрКолонка="ВидОплаты" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта")));
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Обработчики событий табличной части "Продажи По Дисконтным Картам"

&НаКлиенте
Процедура тпПродажиПоДисконтнымКартам_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ПродажиПоДисконтнымКартам", "");
	ТекущиеДанные=Элементы.ПродажиПоДисконтнымКартам.ТекущиеДанные;
	
	Если стрКолонка="ДисконтнаяКарта" Тогда
 		УправлениеРозничнойТорговлейСервер.ПроверитьКорректностьИнформационнойКарты(ТекущиеДанные.ДисконтнаяКарта, ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Дисконтная"));
		ТекущиеДанные.ВладелецДисконтнойКарты=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДисконтнаяКарта,"ВладелецКарты");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПродажиПоДисконтнымКартам_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ОплатаБанковскимиКредитами", "");
	ТекущиеДанные=Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	Если стрКолонка="ДисконтнаяКарта" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипКарты", ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Дисконтная")));
		ОткрытьФорму("Справочник.ИнформационныеКарты.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	РазрешитьРедактированиеЦен=РедактированиеЦенВДокументах(); //УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РедактированиеЦенВДокументах");
	Элементы.ТоварыЦена.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ТоварыПроцентСкидкиНаценки.Видимость=РазрешитьРедактированиеЦен;
	Элементы.ТоварыПроцентСкидкиНаценки.Доступность=РазрешитьРедактированиеЦен;
	Элементы.ТоварыПроцентАвтоматическихСкидок.Видимость=ЦенообразованиеСервер.МожноРассчитыватьАвтоматическиеСкидки(УчетнаяПолитика);

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
