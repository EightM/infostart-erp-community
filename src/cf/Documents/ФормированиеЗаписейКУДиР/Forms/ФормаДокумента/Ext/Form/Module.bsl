&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Видимость=НЕ Элементы.ШапкаПанель1.Видимость;		
		Элементы.ШапкаПанель1.Видимость=Видимость;
		Элементы.ШапкаПанель2.Видимость=Видимость;
		Элементы[Команда.Имя].Картинка=?(Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоКрасная);
		Элементы.ШапкаИнфо.Видимость=Не Видимость;

		МассивДанных=Новый Массив;
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" Организация: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Организация));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Куратор: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Ответственный));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Комментарий: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Комментарий));

		Элементы.ШапкаИнфо.Заголовок=Новый ФорматированнаяСтрока(МассивДанных);		
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	ЗаполнитьДокументНаСервере();
	ПолучитьОписаниеСодержания();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаСервере()
	Запрос=Новый Запрос; Объект.Расшифровка.Очистить();
	Запрос.УстановитьПараметр("ПустойКонтрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ПустойФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаКонца", Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ТОП,
	|	ИсточникДанных.СтатусыОплатыРасходов,
	|	ИсточникДанных.РасчетныйДокумент,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.НеПринимаетсяУСН КАК НеПринимаетсяУСН,
	|	СУММА(ИсточникДанных.СуммаОстаток) КАК Сумма,
	|	СУММА(ИсточникДанных.СуммаНДСОстаток) КАК СуммаНДС,
	|	ИсточникДанных.РасчетныйДокумент.Дата КАК ДокументДата,
	|	ВЫБОР КОГДА ИсточникДанных.ДоговорКонтрагента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		ИсточникДанных.ДоговорКонтрагента.Владелец 
	|	ИНАЧЕ
	|		ИсточникДанных.ДоговорКонтрагента 
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Остатки(&ДатаКонца,	Организация = &Организация) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.ТОП,
	|	ИсточникДанных.СтатусыОплатыРасходов,
	|	ИсточникДанных.РасчетныйДокумент,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.НеПринимаетсяУСН,
	|	ИсточникДанных.РасчетныйДокумент.Дата,
	|	ВЫБОР КОГДА ИсточникДанных.ДоговорКонтрагента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		ИсточникДанных.ДоговорКонтрагента.Владелец 
	|	ИНАЧЕ
	|		ИсточникДанных.ДоговорКонтрагента 
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата Возр
	|";
	тзДанные=Запрос.Выполнить().Выгрузить();
	
	/// Сначала обработаем все без номенклатуры
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("СтатусыОплатыРасходов", ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.Куплено"));
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	тзЗакупки=тзДанные.НайтиСтроки(СтруктураПоиска);
	
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	тзРасходыУСН=ДокументОбъект.Расшифровка.ВыгрузитьКолонки();
	
	//Заполняем табличные части "Расходы" и "Графы КУДиР"
	Для каждого СтрокаКоллекции Из тзЗакупки Цикл		
		СтруктураОтбора=Новый Структура("ДоговорКонтрагента", СтрокаКоллекции.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтатусыОплатыРасходов", ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.ПредоплатаПоставщику"));
		МассивСтрокОплаты=тзДанные.НайтиСтроки(СтруктураОтбора);
		
		МассивОтрицательныеСуммы=Новый Массив;
		МассивПоложительныеСуммы=Новый Массив;
		Для Каждого СтрокаМ ИЗ МассивСтрокОплаты Цикл
			Если СтрокаМ.Сумма>0 Тогда
				МассивПоложительныеСуммы.Добавить(СтрокаМ);
			ИначеЕсли СтрокаМ.Сумма<0 Тогда	
				МассивОтрицательныеСуммы.Добавить(СтрокаМ);
			КонецЕсли;	
		КонецЦикла;	
		
		Если НЕ МассивОтрицательныеСуммы.Количество()=0 И НЕ МассивПоложительныеСуммы.Количество()=0 Тогда
			Для Каждого СтрокаМ ИЗ МассивОтрицательныеСуммы Цикл
				
				Для Каждого СтрокаМП ИЗ МассивПоложительныеСуммы Цикл
					Если СтрокаМ.Сумма=0 Тогда Продолжить; КонецЕсли;
					Если СтрокаМП.Сумма=0 Тогда Продолжить; КонецЕсли;
					Если СтрокаМП.Сумма>=(СтрокаМ.Сумма*-1) Тогда
						СтрокаМП.Сумма=СтрокаМП.Сумма+СтрокаМ.Сумма;
						
						
						НоваяСтрока=тзРасходыУСН.Добавить();
						НоваяСтрока.Контрагент=СтрокаМ.Контрагент;
						НоваяСтрока.ДоговорКонтрагента=СтрокаМ.ДоговорКонтрагента;
						НоваяСтрока.СуммаОплаты=СтрокаМ.Сумма;
						НоваяСтрока.СуммаНеПринимаетсяУСН=СтрокаМ.Сумма;
						НоваяСтрока.ДокументОплаты=СтрокаМ.РасчетныйДокумент;
						НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМ.НеПринимаетсяУСН;
						НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМ.СтатусыОплатыРасходов;
						НоваяСтрока.ТОПОплаты=СтрокаМ.ТОП;
						
						НоваяСтрока=тзРасходыУСН.Добавить();
						НоваяСтрока.Контрагент=СтрокаМП.Контрагент;
						НоваяСтрока.ДоговорКонтрагента=СтрокаМП.ДоговорКонтрагента;
						НоваяСтрока.СуммаОплаты=-СтрокаМ.Сумма;
						НоваяСтрока.СуммаНеПринимаетсяУСН=-СтрокаМ.Сумма;
						НоваяСтрока.ДокументОплаты=СтрокаМП.РасчетныйДокумент;
						НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМП.НеПринимаетсяУСН;
						НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМП.СтатусыОплатыРасходов;
						НоваяСтрока.ТОПОплаты=СтрокаМП.ТОП;
						
						СтрокаМ.Сумма=0;
						
					ИначеЕсли СтрокаМП.Сумма<(СтрокаМ.Сумма*-1) Тогда
						СтрокаМ.Сумма=СтрокаМ.Сумма+СтрокаМП.Сумма;
						НоваяСтрока=тзРасходыУСН.Добавить();
						НоваяСтрока.Контрагент=СтрокаМ.Контрагент;
						НоваяСтрока.ДоговорКонтрагента=СтрокаМ.ДоговорКонтрагента;
						НоваяСтрока.СуммаОплаты=-СтрокаМП.Сумма;
						НоваяСтрока.СуммаНеПринимаетсяУСН=-СтрокаМП.Сумма;
						НоваяСтрока.ДокументОплаты=СтрокаМ.РасчетныйДокумент;
						НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМ.НеПринимаетсяУСН;
						НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМ.СтатусыОплатыРасходов;
						НоваяСтрока.ТОПОплаты=СтрокаМ.ТОП;

						НоваяСтрока=тзРасходыУСН.Добавить();
						НоваяСтрока.Контрагент=СтрокаМП.Контрагент;
						НоваяСтрока.ДоговорКонтрагента=СтрокаМП.ДоговорКонтрагента;
						НоваяСтрока.СуммаОплаты=СтрокаМП.Сумма;
						НоваяСтрока.СуммаНеПринимаетсяУСН=СтрокаМП.Сумма;
						НоваяСтрока.ДокументОплаты=СтрокаМП.РасчетныйДокумент;
						НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМП.НеПринимаетсяУСН;
						НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМП.СтатусыОплатыРасходов;
						НоваяСтрока.ТОПОплаты=СтрокаМП.ТОП;

						СтрокаМП.Сумма=0;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;
		
		Если МассивСтрокОплаты.Количество()=0 Тогда Продолжить; КонецЕсли;
		
		Для каждого СтрокаОплаты Из МассивСтрокОплаты Цикл
			Если СтрокаОплаты.Сумма=0 Тогда Продолжить; КонецЕсли; 
			Если СтрокаКоллекции.Сумма=0 И СтрокаКоллекции.СуммаНДС=0 Тогда Прервать; КонецЕсли; 
			НоваяСтрока=тзРасходыУСН.Добавить();
			НоваяСтрока.Контрагент=СтрокаКоллекции.Контрагент;
			НоваяСтрока.ДоговорКонтрагента=СтрокаКоллекции.ДоговорКонтрагента;
			НоваяСтрока.ДокументПокупки=СтрокаКоллекции.РасчетныйДокумент;
			НоваяСтрока.СуммаПокупки=СтрокаКоллекции.Сумма;
			НоваяСтрока.СуммаПокупкиНДС=СтрокаКоллекции.СуммаНДС;
			НоваяСтрока.НеПринимаетсяУСН_Покупки=СтрокаКоллекции.НеПринимаетсяУСН;
			текСумма=Мин(СтрокаОплаты.Сумма, СтрокаКоллекции.Сумма);
			текСуммаНДС=Окр(СтрокаКоллекции.СуммаНДС*(текСумма/СтрокаКоллекции.Сумма),2);
			НоваяСтрока.СуммаОплаты=текСумма;
			НоваяСтрока.СуммаОплатыНДС=текСуммаНДС;
			НоваяСтрока.ДокументОплаты=СтрокаОплаты.РасчетныйДокумент;
			НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаОплаты.НеПринимаетсяУСН;
			Если СтрокаКоллекции.НеПринимаетсяУСН ИЛИ НоваяСтрока.НеПринимаетсяУСН_Оплата Тогда
				НоваяСтрока.СуммаНеПринимаетсяУСН=НоваяСтрока.СуммаОплаты;
				НоваяСтрока.СуммаНеПринимаетсяУСН_НДС=НоваяСтрока.СуммаОплатыНДС;
				НоваяСтрока.ТОПОплаты=СтрокаОплаты.ТОП;
				НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
				НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
				НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаОплаты.СтатусыОплатыРасходов;
			Иначе
				НоваяСтрока.СуммаПринятыхРасходов=НоваяСтрока.СуммаОплаты;
				НоваяСтрока.СуммаПринятыхРасходовНДС=НоваяСтрока.СуммаОплатыНДС;
				НоваяСтрока.ТОПОплаты=СтрокаОплаты.ТОП;
				НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
				НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
				НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаОплаты.СтатусыОплатыРасходов;
			КонецЕсли;
			СтрокаОплаты.Сумма=СтрокаОплаты.Сумма-текСумма; //Уменьшаем сумму оплаты
			СтрокаКоллекции.Сумма=СтрокаКоллекции.Сумма-текСумма; //Уменьшаем сумму расхода
			СтрокаКоллекции.СуммаНДС=СтрокаКоллекции.СуммаНДС-текСуммаНДС; //Уменьшаем сумму НДС
			Если СтрокаКоллекции.Сумма=0 И СтрокаКоллекции.СуммаНДС<>0 Тогда
				Если СтрокаКоллекции.НеПринимаетсяУСН ИЛИ НоваяСтрока.НеПринимаетсяУСН_Оплата Тогда
					НоваяСтрока.СуммаНеПринимаетсяУСН_НДС=НоваяСтрока.СуммаНеПринимаетсяУСН_НДС+СтрокаКоллекции.СуммаНДС;
				Иначе	
					НоваяСтрока.СуммаПринятыхРасходовНДС=НоваяСтрока.СуммаПринятыхРасходовНДС+СтрокаКоллекции.СуммаНДС;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла; 
	КонецЦикла;
	
	/// Потом все что с номенклатурой
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("СтатусыОплатыРасходов", ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.КупленоСписано"));
	тзСписано=тзДанные.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаКоллекции Из тзСписано Цикл
		Если СтрокаКоллекции.Сумма=0 Тогда Продолжить; КонецЕсли; ///****
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("СтатусыОплатыРасходов", ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.КупленоОплаченоПоставщику"));
		СтруктураПоиска.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
		тзЗакупки=тзДанные.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаЗакупки ИЗ тзЗакупки Цикл
			Если СтрокаЗакупки.Сумма=0 Тогда Продолжить; КонецЕсли; 
			Если СтрокаКоллекции.Сумма=0 Тогда Прервать; КонецЕсли; 
			НоваяСтрока=тзРасходыУСН.Добавить();
			НоваяСтрока.Номенклатура=СтрокаКоллекции.Номенклатура;
			НоваяСтрока.Контрагент=СтрокаЗакупки.Контрагент;
			НоваяСтрока.ДоговорКонтрагента=СтрокаЗакупки.ДоговорКонтрагента;
			НоваяСтрока.ДокументПокупки=СтрокаЗакупки.РасчетныйДокумент;
			НоваяСтрока.НеПринимаетсяУСН_Покупки=СтрокаЗакупки.НеПринимаетсяУСН;
			НоваяСтрока.ДокументОплаты=СтрокаЗакупки.РасчетныйДокумент;
			НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаЗакупки.НеПринимаетсяУСН;
			НоваяСтрока.ДокументСписания=СтрокаКоллекции.РасчетныйДокумент;
			НоваяСтрока.НеПринимаетсяУСН_Списание=СтрокаКоллекции.НеПринимаетсяУСН;
			НоваяСтрока.СуммаПокупки=СтрокаЗакупки.Сумма;
			НоваяСтрока.СуммаПокупкиНДС=СтрокаЗакупки.СуммаНДС;
			НоваяСтрока.СуммаОплаты=СтрокаЗакупки.Сумма;
			НоваяСтрока.СуммаОплатыНДС=СтрокаЗакупки.СуммаНДС;
			НоваяСтрока.СуммаСписания=СтрокаКоллекции.Сумма;
			текСумма=Мин(СтрокаКоллекции.Сумма,СтрокаЗакупки.Сумма);
			текСуммаНДС=Окр(СтрокаЗакупки.СуммаНДС*(текСумма/СтрокаЗакупки.Сумма),2);
			НоваяСтрока.ТОПОплаты=СтрокаЗакупки.ТОП;
			НоваяСтрока.ТОППокупки=СтрокаЗакупки.ТОП;
			НоваяСтрока.ТОПСписания=СтрокаКоллекции.ТОП;
			НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаЗакупки.СтатусыОплатыРасходов;
			НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаЗакупки.СтатусыОплатыРасходов;
			НоваяСтрока.СтатусыОплатыРасходовСписания=СтрокаКоллекции.СтатусыОплатыРасходов;
			Если СтрокаКоллекции.НеПринимаетсяУСН ИЛИ НоваяСтрока.НеПринимаетсяУСН_Покупки ИЛИ НоваяСтрока.НеПринимаетсяУСН_Оплата Тогда
				НоваяСтрока.СуммаНеПринимаетсяУСН=текСумма;
				НоваяСтрока.СуммаНеПринимаетсяУСН_НДС=текСуммаНДС;
			Иначе
				НоваяСтрока.СуммаПринятыхРасходов=текСумма;
				НоваяСтрока.СуммаПринятыхРасходовНДС=текСуммаНДС;
			КонецЕсли;
			СтрокаЗакупки.Сумма=СтрокаЗакупки.Сумма-текСумма; //Уменьшаем сумму расхода
			СтрокаКоллекции.Сумма=СтрокаКоллекции.Сумма-текСумма; //Уменьшаем сумму списания
			СтрокаЗакупки.СуммаНДС=СтрокаЗакупки.СуммаНДС-текСуммаНДС; //Уменьшаем сумму расхода
			Если СтрокаЗакупки.Сумма=0 И СтрокаЗакупки.СуммаНДС<>0 Тогда
				Если СтрокаКоллекции.НеПринимаетсяУСН ИЛИ НоваяСтрока.НеПринимаетсяУСН_Покупки ИЛИ НоваяСтрока.НеПринимаетсяУСН_Оплата Тогда
					НоваяСтрока.СуммаНеПринимаетсяУСН_НДС=НоваяСтрока.СуммаНеПринимаетсяУСН_НДС+СтрокаЗакупки.СуммаНДС;
				Иначе
					НоваяСтрока.СуммаПринятыхРасходовНДС=НоваяСтрока.СуммаПринятыхРасходовНДС+СтрокаЗакупки.СуммаНДС;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	
		Если СтрокаКоллекции.Сумма=0 Тогда Продолжить; КонецЕсли; ///****
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("СтатусыОплатыРасходов", ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.Куплено"));
		СтруктураПоиска.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
		тзЗакупки=тзДанные.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаЗакупки ИЗ тзЗакупки Цикл
			Если СтрокаКоллекции.Сумма=0 Тогда Прервать; КонецЕсли; ///****
			СтруктураОтбора=Новый Структура("ДоговорКонтрагента", СтрокаЗакупки.ДоговорКонтрагента);
			СтруктураОтбора.Вставить("СтатусыОплатыРасходов", ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.ПредоплатаПоставщику"));
			МассивСтрокОплаты=тзДанные.НайтиСтроки(СтруктураОтбора);
			
			МассивОтрицательныеСуммы=Новый Массив;
			МассивПоложительныеСуммы=Новый Массив;
			Для Каждого СтрокаМ ИЗ МассивСтрокОплаты Цикл
				Если СтрокаМ.Сумма>0 Тогда
					МассивПоложительныеСуммы.Добавить(СтрокаМ);
				ИначеЕсли СтрокаМ.Сумма<0 Тогда	
					МассивОтрицательныеСуммы.Добавить(СтрокаМ);
				КонецЕсли;	
			КонецЦикла;	
			
			Если НЕ МассивОтрицательныеСуммы.Количество()=0 И НЕ МассивПоложительныеСуммы.Количество()=0 Тогда
				Для Каждого СтрокаМ ИЗ МассивОтрицательныеСуммы Цикл
					Для Каждого СтрокаМП ИЗ МассивПоложительныеСуммы Цикл
						Если СтрокаМ.Сумма=0 Тогда Продолжить; КонецЕсли;
						Если СтрокаМП.Сумма=0 Тогда Продолжить; КонецЕсли;
						Если СтрокаМП.Сумма>=(СтрокаМ.Сумма*-1) Тогда
							СтрокаМП.Сумма=СтрокаМП.Сумма+СтрокаМ.Сумма;

							НоваяСтрока=тзРасходыУСН.Добавить();
							НоваяСтрока.Контрагент=СтрокаМ.Контрагент;
							НоваяСтрока.ДоговорКонтрагента=СтрокаМ.ДоговорКонтрагента;
							НоваяСтрока.СуммаОплаты=СтрокаМ.Сумма;
							НоваяСтрока.ДокументОплаты=СтрокаМ.РасчетныйДокумент;
							НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМ.НеПринимаетсяУСН;
							НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМ.СтатусыОплатыРасходов;
							НоваяСтрока.СуммаНеПринимаетсяУСН=СтрокаМ.Сумма;
							НоваяСтрока.ТОПОплаты=СтрокаМ.ТОП;
							
							НоваяСтрока=тзРасходыУСН.Добавить();
							НоваяСтрока.Контрагент=СтрокаМП.Контрагент;
							НоваяСтрока.ДоговорКонтрагента=СтрокаМП.ДоговорКонтрагента;
							НоваяСтрока.СуммаОплаты=-СтрокаМ.Сумма;
							НоваяСтрока.СуммаНеПринимаетсяУСН=-СтрокаМ.Сумма;
							НоваяСтрока.ДокументОплаты=СтрокаМП.РасчетныйДокумент;
							НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМП.НеПринимаетсяУСН;
							НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМП.СтатусыОплатыРасходов;
							НоваяСтрока.ТОПОплаты=СтрокаМП.ТОП;
							
							СтрокаМ.Сумма=0;
							
						ИначеЕсли СтрокаМП.Сумма<(СтрокаМ.Сумма*-1) Тогда
							СтрокаМ.Сумма=СтрокаМ.Сумма+СтрокаМП.Сумма;
							НоваяСтрока=тзРасходыУСН.Добавить();
							НоваяСтрока.Контрагент=СтрокаМ.Контрагент;
							НоваяСтрока.ДоговорКонтрагента=СтрокаМ.ДоговорКонтрагента;
							НоваяСтрока.СуммаОплаты=-СтрокаМП.Сумма;
							НоваяСтрока.СуммаНеПринимаетсяУСН=-СтрокаМП.Сумма;
							НоваяСтрока.ДокументОплаты=СтрокаМ.РасчетныйДокумент;
							НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМ.НеПринимаетсяУСН;
							НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМ.СтатусыОплатыРасходов;
							НоваяСтрока.ТОПОплаты=СтрокаМ.ТОП;
							
							НоваяСтрока=тзРасходыУСН.Добавить();
							НоваяСтрока.Контрагент=СтрокаМП.Контрагент;
							НоваяСтрока.ДоговорКонтрагента=СтрокаМП.ДоговорКонтрагента;
							НоваяСтрока.СуммаОплаты=СтрокаМП.Сумма;
							НоваяСтрока.СуммаНеПринимаетсяУСН=СтрокаМП.Сумма;
							НоваяСтрока.ДокументОплаты=СтрокаМП.РасчетныйДокумент;
							НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаМП.НеПринимаетсяУСН;
							НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаМП.СтатусыОплатыРасходов;
							НоваяСтрока.ТОПОплаты=СтрокаМП.ТОП;
							
							СтрокаМП.Сумма=0;
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;
			
			Если МассивСтрокОплаты.Количество()=0 Тогда Продолжить; КонецЕсли;
			Для каждого СтрокаОплаты Из МассивСтрокОплаты Цикл
				Если СтрокаЗакупки.Сумма=0 Тогда Продолжить; КонецЕсли; 
				Если СтрокаОплаты.Сумма=0 Тогда Продолжить; КонецЕсли; 
				Если СтрокаКоллекции.Сумма=0 Тогда Прервать; КонецЕсли; 
				НоваяСтрока=тзРасходыУСН.Добавить();
				НоваяСтрока.Номенклатура=СтрокаКоллекции.Номенклатура;
				НоваяСтрока.Контрагент=СтрокаЗакупки.Контрагент;
				НоваяСтрока.ДоговорКонтрагента=СтрокаЗакупки.ДоговорКонтрагента;
				НоваяСтрока.ДокументПокупки=СтрокаЗакупки.РасчетныйДокумент;
				НоваяСтрока.НеПринимаетсяУСН_Покупки=СтрокаЗакупки.НеПринимаетсяУСН;
				НоваяСтрока.ДокументОплаты=СтрокаОплаты.РасчетныйДокумент;
				НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаОплаты.НеПринимаетсяУСН;
				НоваяСтрока.ДокументСписания=СтрокаКоллекции.РасчетныйДокумент;
				НоваяСтрока.НеПринимаетсяУСН_Списание=СтрокаКоллекции.НеПринимаетсяУСН;
				НоваяСтрока.СуммаПокупки=СтрокаЗакупки.Сумма;
				НоваяСтрока.СуммаПокупкиНДС=СтрокаЗакупки.СуммаНДС;
				НоваяСтрока.СуммаОплаты=СтрокаОплаты.Сумма;
				НоваяСтрока.СуммаСписания=СтрокаКоллекции.Сумма;
				текСумма=Мин(СтрокаОплаты.Сумма,СтрокаКоллекции.Сумма,СтрокаЗакупки.Сумма);
				текСуммаНДС=Окр(СтрокаЗакупки.СуммаНДС*(текСумма/СтрокаЗакупки.Сумма),2);
				НоваяСтрока.ТОПОплаты=СтрокаОплаты.ТОП;
				НоваяСтрока.ТОППокупки=СтрокаЗакупки.ТОП;
				НоваяСтрока.ТОПСписания=СтрокаКоллекции.ТОП;
				НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаЗакупки.СтатусыОплатыРасходов;
				НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаОплаты.СтатусыОплатыРасходов;
				НоваяСтрока.СтатусыОплатыРасходовСписания=СтрокаКоллекции.СтатусыОплатыРасходов;
				Если СтрокаКоллекции.НеПринимаетсяУСН ИЛИ НоваяСтрока.НеПринимаетсяУСН_Покупки ИЛИ НоваяСтрока.НеПринимаетсяУСН_Оплата Тогда
					НоваяСтрока.СуммаНеПринимаетсяУСН=текСумма;
					НоваяСтрока.СуммаНеПринимаетсяУСН_НДС=текСуммаНДС;
				Иначе
					НоваяСтрока.СуммаПринятыхРасходов=текСумма;
					НоваяСтрока.СуммаПринятыхРасходовНДС=текСуммаНДС;
				КонецЕсли;
				СтрокаОплаты.Сумма=СтрокаОплаты.Сумма-текСумма; //Уменьшаем сумму оплаты
				СтрокаЗакупки.Сумма=СтрокаЗакупки.Сумма-текСумма; //Уменьшаем сумму расхода
				СтрокаКоллекции.Сумма=СтрокаКоллекции.Сумма-текСумма; //Уменьшаем сумму списания
				СтрокаЗакупки.СуммаНДС=СтрокаЗакупки.СуммаНДС-текСуммаНДС; //Уменьшаем сумму НДС
			КонецЦикла; 
		КонецЦикла;	
	КонецЦикла;	
	
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		Если СтрокаКоллекции.Сумма=0 Тогда Продолжить; КонецЕсли;
		НоваяСтрока=тзРасходыУСН.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если СтрокаКоллекции.СтатусыОплатыРасходов=ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.ПредоплатаПоставщику") Тогда
			НоваяСтрока.СуммаОплаты=СтрокаКоллекции.Сумма;
			НоваяСтрока.ДокументОплаты=СтрокаКоллекции.РасчетныйДокумент;
			НоваяСтрока.ТОПОплаты=СтрокаКоллекции.ТОП;
			НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаКоллекции.НеПринимаетсяУСН;
			НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаКоллекции.СтатусыОплатыРасходов;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Контрагент) И НЕ ЗначениеЗаполнено(НоваяСтрока.ДоговорКонтрагента) Тогда
				НоваяСтрока.СуммаНеПринимаетсяУСН=НоваяСтрока.СуммаОплаты;
				НоваяСтрока.ДокументПокупки=СтрокаКоллекции.РасчетныйДокумент;
				НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
				НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
			Иначе	
				НоваяСтрока.СуммаНеПринятыхРасходов=НоваяСтрока.СуммаОплаты;
			КонецЕсли;
		ИначеЕсли СтрокаКоллекции.СтатусыОплатыРасходов=ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.Куплено") Тогда
			НоваяСтрока.СуммаПокупки=СтрокаКоллекции.Сумма;
			НоваяСтрока.СуммаПокупкиНДС=СтрокаКоллекции.СуммаНДС;
			НоваяСтрока.ДокументПокупки=СтрокаКоллекции.РасчетныйДокумент;
			НоваяСтрока.СуммаНеПринятыхРасходов=НоваяСтрока.СуммаПокупки;
			НоваяСтрока.СуммаНеПринятыхРасходовНДС=НоваяСтрока.СуммаПокупкиНДС;
			НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
			НоваяСтрока.ТОПОплаты=СтрокаКоллекции.ТОП;
			НоваяСтрока.НеПринимаетсяУСН_Покупки=СтрокаКоллекции.НеПринимаетсяУСН;
			НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
		ИначеЕсли СтрокаКоллекции.СтатусыОплатыРасходов=ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.КупленоСписано") Тогда
			НоваяСтрока.СуммаСписания=СтрокаКоллекции.Сумма;
			НоваяСтрока.ДокументСписания=СтрокаКоллекции.РасчетныйДокумент;
			НоваяСтрока.СуммаНеПринятыхРасходов=НоваяСтрока.СуммаСписания;
			НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
			НоваяСтрока.ТОПОплаты=СтрокаКоллекции.ТОП;
			НоваяСтрока.ТОПСписания=СтрокаКоллекции.ТОП;
			НоваяСтрока.НеПринимаетсяУСН_Списание=СтрокаКоллекции.НеПринимаетсяУСН;
			НоваяСтрока.СтатусыОплатыРасходовСписания=СтрокаКоллекции.СтатусыОплатыРасходов;
		ИначеЕсли СтрокаКоллекции.СтатусыОплатыРасходов=ПредопределенноеЗначение("Перечисление.СтатусыРасходовУСН.КупленоОплаченоПоставщику") Тогда
			Если ЗначениеЗаполнено(СтрокаКоллекции.Номенклатура) Тогда
				НоваяСтрока.СуммаПокупки=СтрокаКоллекции.Сумма;
				НоваяСтрока.СуммаОплаты=СтрокаКоллекции.Сумма;
				НоваяСтрока.СуммаПокупкиНДС=СтрокаКоллекции.СуммаНДС;
				НоваяСтрока.СуммаОплатыНДС=СтрокаКоллекции.СуммаНДС;
				НоваяСтрока.ДокументПокупки=СтрокаКоллекции.РасчетныйДокумент;
				НоваяСтрока.ДокументОплаты=СтрокаКоллекции.РасчетныйДокумент;
				НоваяСтрока.НеПринимаетсяУСН_Покупки=СтрокаКоллекции.НеПринимаетсяУСН;
				НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаКоллекции.НеПринимаетсяУСН;
				Если СтрокаКоллекции.НеПринимаетсяУСН Тогда
					НоваяСтрока.СуммаНеПринимаетсяУСН=НоваяСтрока.СуммаОплаты;
					НоваяСтрока.СуммаНеПринимаетсяУСН_НДС=НоваяСтрока.СуммаОплатыНДС;
					НоваяСтрока.ТОПОплаты=СтрокаКоллекции.ТОП;
					НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
					НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
					НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаКоллекции.СтатусыОплатыРасходов;
				Иначе
					НоваяСтрока.СуммаНеПринятыхРасходов=НоваяСтрока.СуммаОплаты;
					НоваяСтрока.СуммаНеПринятыхРасходовНДС=НоваяСтрока.СуммаОплатыНДС;
					НоваяСтрока.ТОПОплаты=СтрокаКоллекции.ТОП;
					НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
					НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
					НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаКоллекции.СтатусыОплатыРасходов;
				КонецЕсли;
			Иначе	
				НоваяСтрока.СуммаПокупки=СтрокаКоллекции.Сумма;
				НоваяСтрока.СуммаПокупкиНДС=СтрокаКоллекции.СуммаНДС;
				НоваяСтрока.СуммаОплаты=СтрокаКоллекции.Сумма;
				НоваяСтрока.СуммаОплатыНДС=СтрокаКоллекции.СуммаНДС;
				НоваяСтрока.ДокументПокупки=СтрокаКоллекции.РасчетныйДокумент;
				НоваяСтрока.ДокументОплаты=СтрокаКоллекции.РасчетныйДокумент;
				НоваяСтрока.НеПринимаетсяУСН_Покупки=СтрокаКоллекции.НеПринимаетсяУСН;
				НоваяСтрока.НеПринимаетсяУСН_Оплата=СтрокаКоллекции.НеПринимаетсяУСН;
				Если СтрокаКоллекции.НеПринимаетсяУСН Тогда
					НоваяСтрока.СуммаНеПринимаетсяУСН=НоваяСтрока.СуммаОплаты;
					НоваяСтрока.СуммаНеПринимаетсяУСН_НДС=НоваяСтрока.СуммаОплатыНДС;
					НоваяСтрока.ТОПОплаты=СтрокаКоллекции.ТОП;
					НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
					НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
					НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаКоллекции.СтатусыОплатыРасходов;
				Иначе
					НоваяСтрока.СуммаПринятыхРасходов=НоваяСтрока.СуммаОплаты;
					НоваяСтрока.СуммаПринятыхРасходовНДС=НоваяСтрока.СуммаОплатыНДС;
					НоваяСтрока.ТОПОплаты=СтрокаКоллекции.ТОП;
					НоваяСтрока.ТОППокупки=СтрокаКоллекции.ТОП;
					НоваяСтрока.СтатусыОплатыРасходовПокупки=СтрокаКоллекции.СтатусыОплатыРасходов;
					НоваяСтрока.СтатусыОплатыРасходовОплаты=СтрокаКоллекции.СтатусыОплатыРасходов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	тзРасходыУСН.Сортировать("Контрагент,ДоговорКонтрагента,ДокументПокупки");

	ДокументОбъект.Расшифровка.Загрузить(тзРасходыУСН);

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеСодержания()
	Для Каждого СтрокаКоллекции ИЗ Объект.Расшифровка Цикл
		Если Не ЗначениеЗаполнено(СтрокаКоллекции.ДокументПокупки) Тогда 
			стрСодержание="Принятие расходов: ";
		Иначе
			мдОбъект=СтрокаКоллекции.ДокументПокупки.Метаданные(); стрСодержание="Принятие расходов: "+мдОбъект.Представление();
		КонецЕсли; 
		Если фКонтрагент Тогда
			стрСодержание=стрСодержание+" "+СокрЛП(СтрокаКоллекции.Контрагент);
		КонецЕсли;
		Если фДоговор Тогда
			Если ТипЗнч(СтрокаКоллекции.ДоговорКонтрагента)=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				стрСодержание=стрСодержание+" "+СокрЛП(СтрокаКоллекции.ДоговорКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если фКомментарий И (Не мдОбъект=Неопределено) И ЗначениеЗаполнено(СтрокаКоллекции.ДокументПокупки) Тогда
			Если Не мдОбъект.Реквизиты.Найти("Комментарий")=Неопределено Тогда
				стрСодержание=стрСодержание+" "+СокрЛП(СтрокаКоллекции.ДокументПокупки.Комментарий);
			КонецЕсли;
		КонецЕсли;
		Если фТОП Тогда
			стрСодержание=стрСодержание+" "+СокрЛП(СтрокаКоллекции.ТОППокупки);
		КонецЕсли;
		СтрокаКоллекции.Содержание=стрСодержание;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
	Если НЕ УчетнаяПолитика.УчитыватьСписание Тогда
		Элементы.РасшифровкаДокументСписания.Видимость=Ложь;
		Элементы.РасшифровкаСуммаСписания.Видимость=Ложь;
	КонецЕсли;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура АтрибутФормы_ПриИзменении(Элемент)
	Если Элемент.Имя="фТОП" ИЛИ Элемент.Имя="фКонтрагент" ИЛИ Элемент.Имя="фДоговор" ИЛИ Элемент.Имя="фКомментарий" Тогда
		ПолучитьОписаниеСодержания();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "УменьшениеНалога"

&НаКлиенте
Процедура тпУменьшениеНалога_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	//Если НоваяСтрока И (Не Копирование) Тогда
	//	ЭлементыФормы.УменьшениеНалога.ТекущаяСтрока.ПериодНачисления = НачалоМесяца(Дата);
	//Иначе
	//	ЭлементыФормы.УменьшениеНалога.Колонки.ПериодНачисленияСтр.ЭлементУправления.Значение =
	//	Формат(Элемент.ТекущаяСтрока.ПериодНачисления, "ДФ='ММММ гггг'");
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпУменьшениеНалога_Колонка_ПриИзменении(Элемент) Экспорт
	стрКолонка=стрЗаменить(Элемент.Имя, "УменьшениеНалога", "");
	Если стрКолонка="ПериодНачисления" Тогда
		////ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодНачисленияТЧ);
		////Элемент.Значение = Формат(ПериодНачисленияТЧ, "ДФ='ММММ гггг'");
		////ЭлементыФормы.УменьшениеНалога.ТекущаяСтрока.ПериодНачисления = ПериодНачисленияТЧ;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпУменьшениеНалога_Колонка_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "УменьшениеНалога", "");
	Если стрКолонка="ПериодНачисленияСтр" Тогда
		//ПериодНачисленияТЧ = ЭлементыФормы.УменьшениеНалога.ТекущаяСтрока.ПериодНачисления;
		//НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодНачисленияТЧ, ЭтаФорма);
		//ЭлементыФормы.УменьшениеНалога.ТекущаяСтрока.ПериодНачисления = ПериодНачисленияТЧ;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура тпУменьшениеНалога_Колонка_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "УменьшениеНалога", "");
	Если стрКолонка="ПериодНачисленияСтр" Тогда
		//ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпУменьшениеНалога_Колонка_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "УменьшениеНалога", "");
	Если стрКолонка="ПериодНачисленияСтр" Тогда
		//ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры

//// функции из БП
&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	СписокМесяцев = Новый СписокЗначений;
	Месяцы = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	Возврат МесяцыВозврата;
КонецФункции

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ТекущаяДата());
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат СписокВозврата;
	КонецЕсли;
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	Если Подстроки.Количество() = 1 Тогда
		// единственное слово - пытаемся получить месяц
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		// два слова - первое считаем месяцем, второе - годом
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
				СтрокаФорматированияГода = "г";
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
				СтрокаФорматированияГода = "гг";
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
				СтрокаФорматированияГода = "гггг";
			КонецЕсли;                    
		Иначе
			// второе слово может быть только годом
			Возврат СписокВозврата;
		КонецЕсли;                
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
				// если "правильный" месяц и год
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(ТекстВозврата);
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить("");
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СписокВозврата;
КонецФункции

&НаКлиенте
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, Формат(НачалоМесяцаЗаполнения, "ДФ='MMMM yyyy'"));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	Если Список.Количество() = 1 Тогда
		ТекстАвтоПодбора = Список[0];
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
	Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
	Если Список.Количество() = 1 Тогда
		Значение = Текст;
	Иначе
		Значение = Список;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Расшифровка"

&НаКлиенте
Процедура тпРасшифровка_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		//Объект.ДатаНачала=НачалоМесяца(Объект.Дата);
		//Объект.ДатаКонца=КонецМесяца(Объект.Дата);
		фКонтрагент=Истина;
		фДоговор=Истина;
	КонецЕсли;
	УправлениеВидимостью();

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
