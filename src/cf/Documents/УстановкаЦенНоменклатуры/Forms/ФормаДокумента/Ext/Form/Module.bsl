&НаСервереБезКонтекста
Функция ТипЦенПоИмениКолонки(стрИдентификатор)
	Возврат XMLЗначение(Тип("СправочникСсылка.ТипыЦенНоменклатуры"), стрЗаменить(стрИдентификатор, "_", "-"));
КонецФункции

&НаСервере
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт
	СтрокаТабличнойЧасти=Неопределено;
	МассивНайденныхСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество()>0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти=МассивНайденныхСтрок[0];
	КонецЕсли;
	Возврат СтрокаТабличнойЧасти;
КонецФункции

&НаСервере
Процедура УстановитьНедостающиеПараметры()
	//Элементы.ТаблицаЦенИндексСтрокиТаблицыЦен.ТолькоПросмотр=Истина;

	//// АвтоотметкаНезаполненного для валюты.
	//Для каждого СтрокаТипаЦен Из Объект.ТипыЦен Цикл
	//	МассивСтрок=Объект.ТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", СтрокаТипаЦен.ТипЦен));
	//	Если МассивСтрок.Количество()=0 Тогда Продолжить; КонецЕсли;
	//	
	//	стрID=стрЗаменить(МассивСтрок[0].ID, "-", "_");
	//	КолонкаВалюты=Элементы.Найти("Валюта"+стрID);

	//	Если Не КолонкаВалюты=Неопределено Тогда
	//		КолонкаВалюты.АвтоОтметкаНезаполненного=Истина;
	//		КолонкаВалюты.АвтоВыборНезаполненного=Истина;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОтклонениеЦен(СтараяЦена, НоваяЦена)
	Если СтараяЦена=0 тогда Возврат 0; КонецЕсли;
	Возврат ((НоваяЦена-СтараяЦена)/СтараяЦена)*100;
КонецФункции

&НаСервере
Процедура ПерезаполнитьСтроку(Идентификатор)
	СтрокаТабличнойЧасти=ТаблицаЦен.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТабличнойЧасти=Неопределено Тогда Возврат; КонецЕсли; 
	Если Объект.ТипыЦен.Количество()=0 Тогда Возврат; КонецЕсли;

	тзТаблицаЦен=РеквизитФормыВЗначение("ТаблицаЦен");
	КолонкиТаблицыЦен=тзТаблицаЦен.Колонки;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
	Запрос.УстановитьПараметр("ТипыЦен", Объект.ТипыЦен.Выгрузить(, "ТипЦен"));
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ТипыЦенСправочник.Ссылка КАК ТипЦен,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыБезХарактеристики.Цена ЕСТЬ NULL 
		|				И ЦеныНоменклатурыСХарактеристикой.Цена ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Цена, ЦеныНоменклатурыБезХарактеристики.Цена)
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыБезХарактеристики.Валюта ЕСТЬ NULL 
		|				И ЦеныНоменклатурыСХарактеристикой.Валюта ЕСТЬ NULL 
		|			ТОГДА ТипыЦенСправочник.ВалютаЦены
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Валюта, ЦеныНоменклатурыБезХарактеристики.Валюта)
		|	КОНЕЦ КАК Валюта,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения ЕСТЬ NULL 
		|				И ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения ЕСТЬ NULL 
		|			ТОГДА ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения, ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения)
		|	КОНЕЦ КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.ТипыЦенНоменклатурыКонтрагентов КАК ТипыЦенСправочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаЦен, ТипЦен В (&ТипыЦен)	И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыБезХарактеристики
		|		ПО ЦеныНоменклатурыБезХарактеристики.ТипЦен = ТипыЦенСправочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаЦен, ТипЦен В (&ТипыЦен) И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЦеныНоменклатурыСХарактеристикой
		|		ПО ЦеныНоменклатурыСХарактеристикой.ТипЦен = ТипыЦенСправочник.Ссылка
		|ГДЕ
		|	ТипыЦенСправочник.Ссылка В(&ТипыЦен)
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			стрID=стрЗаменить(Выборка.ТипЦен.УникальныйИдентификатор(), "-", "_");

			Если НЕ КолонкиТаблицыЦен.Найти("Цена"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["Цена"+стрID]=Выборка.Цена;
			КонецЕсли;
			Если НЕ КолонкиТаблицыЦен.Найти("Валюта"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["Валюта"+стрID]=Выборка.Валюта;
			КонецЕсли;
			Если НЕ КолонкиТаблицыЦен.Найти("Единица"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["Единица"+стрID]=Выборка.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЦикла;		                                       	
	Иначе			
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ТипыЦенСправочник.Ссылка КАК ТипЦен,
		|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.Цена ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.Цена ЕСТЬ NULL ТОГДА
		|		0
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Цена, ЦеныНоменклатурыБезХарактеристики.Цена)
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.Валюта ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.Валюта ЕСТЬ NULL ТОГДА
		|		ТипыЦенСправочник.ВалютаЦены
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Валюта, ЦеныНоменклатурыБезХарактеристики.Валюта)
		|	КОНЕЦ КАК Валюта,
		|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
		|		ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения, ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения)
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.ПроцентСкидкиНаценки ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.ПроцентСкидкиНаценки ЕСТЬ NULL ТОГДА
		|		ТипыЦенСправочник.ПроцентСкидкиНаценки
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.ПроцентСкидкиНаценки, ЦеныНоменклатурыБезХарактеристики.ПроцентСкидкиНаценки)
		|	КОНЕЦ КАК ПроцентСкидкиНаценки,
		|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.СпособРасчетаЦены ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.СпособРасчетаЦены ЕСТЬ NULL ТОГДА
		|		ТипыЦенСправочник.СпособРасчетаЦены
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.СпособРасчетаЦены, ЦеныНоменклатурыБезХарактеристики.СпособРасчетаЦены)
		|	КОНЕЦ КАК СпособРасчетаЦены
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен) И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыБезХарактеристики
		|ПО 
		|	ТипыЦенСправочник.Ссылка = ЦеныНоменклатурыБезХарактеристики.ТипЦен
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен) И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЦеныНоменклатурыСХарактеристикой
		|ПО
		|	ТипыЦенСправочник.Ссылка = ЦеныНоменклатурыСХарактеристикой.ТипЦен
		|ГДЕ
		|	ТипыЦенСправочник.Ссылка В (&ТипыЦен)
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			стрID=стрЗаменить(Выборка.ТипЦен.УникальныйИдентификатор(), "-", "_");

			Если НЕ КолонкиТаблицыЦен.Найти("Цена"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["Цена"+стрID]=Выборка.Цена;
				СтрокаТабличнойЧасти["Отклонение"+стрID]=ОтклонениеЦен(Выборка.Цена,Выборка.Цена);
			КонецЕсли;
			Если НЕ КолонкиТаблицыЦен.Найти("СтараяЦена"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["СтараяЦена"+стрID]=Выборка.Цена;
				СтрокаТабличнойЧасти["Отклонение"+стрID]=ОтклонениеЦен(Выборка.Цена,Выборка.Цена); 
			КонецЕсли;
			Если НЕ КолонкиТаблицыЦен.Найти("Валюта"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["Валюта"+стрID]=Выборка.Валюта;
			КонецЕсли;
			Если НЕ КолонкиТаблицыЦен.Найти("Единица"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["Единица"+стрID]=Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			Если НЕ КолонкиТаблицыЦен.Найти("Процент"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["Процент"+стрID]=Выборка.ПроцентСкидкиНаценки;
			КонецЕсли;
			Если НЕ КолонкиТаблицыЦен.Найти("СпособРасчета"+стрID)=Неопределено Тогда
				СтрокаТабличнойЧасти["СпособРасчета"+стрID]=Выборка.СпособРасчетаЦены;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(Идентификатор) Экспорт
	ПерезаполнитьСтроку(Идентификатор);
КонецПроцедуры 

&НаСервере
Функция ПолучитьУчетнуюЦену(спНоменклатура)
	стрУсловие="Номенклатура В (&Номенклатура)";
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		стрУсловие=стрУсловие+" И Организация = (&Организация)";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда		
		стрУсловие=стрУсловие+" И Склад = (&Склад)";
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКонца", Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура", спНоменклатура);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладахОстатки.Номенклатура,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладахОстатки.КоличествоОстаток = 0
	|			ТОГДА ПартииТоваровНаСкладахОстатки.СтоимостьОстаток
	|		ИНАЧЕ ПартииТоваровНаСкладахОстатки.СтоимостьОстаток / ПартииТоваровНаСкладахОстатки.КоличествоОстаток * ВЫБОР
	|				КОГДА ЕСТЬNULL(УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий, ИСТИНА) = ИСТИНА
	|					ТОГДА 1.20
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК УчетнаяЦена
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаКонца, "+стрУсловие+") КАК ПартииТоваровНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаКонца, Организация = &Организация) КАК УчетнаяПолитика
	|		ПО ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетнаяЦена УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

&НаСервере
Процедура ДоступностьКолонок()
	Для Каждого СтрокаТипаЦен Из Объект.ТипыЦен Цикл
		стрID=СтрЗаменить(XMLСтрока(СтрокаТипаЦен.ТипЦен), "-", "_");
		//*** стрID=СтрЗаменить(СтрокаТипаЦен.ТипЦен.УникальныйИдентификатор(), "-", "_");
		Если СтрокаТипаЦен.ТипЦен.Рассчитывается Тогда
			ОбъектКолонка=Элементы.Найти("Цена"+стрID);
			Если НЕ ОбъектКолонка=Неопределено Тогда
				ОбъектКолонка.ТолькоПросмотр=Истина;
			КонецЕсли;
			ОбъектКолонка=Элементы.Найти("Валюта"+стрID);
			Если НЕ ОбъектКолонка=Неопределено Тогда
				ОбъектКолонка.ТолькоПросмотр=Истина;
			КонецЕсли;
			ОбъектКолонка=Элементы.Найти("Вдиница"+стрID);
			Если НЕ ОбъектКолонка=Неопределено Тогда
				ОбъектКолонка.ТолькоПросмотр=Истина;
			КонецЕсли;
		Иначе
			ОбъектКолонка=Элементы.Найти("СпособРасчета"+стрID);
			Если НЕ ОбъектКолонка=Неопределено Тогда
				ОбъектКолонка.ТолькоПросмотр=Истина;
			КонецЕсли;
		КонецЕсли;

		//ОбъектКолонка=Элементы.Найти("СпособРасчета"+стрID);
		//Если НЕ ОбъектКолонка=Неопределено Тогда
		//	ОбъектКолонка.АвтоОтметкаНезаполненного=Истина;
		//КонецЕсли;

		ОбъектКолонка=Элементы.Найти("СтараяЦена"+стрID);
		Если НЕ ОбъектКолонка=Неопределено Тогда
			ОбъектКолонка.ТолькоПросмотр=Истина;
		КонецЕсли;

		Элементы["СпособРасчета"+стрID].УстановитьДействие("ПриИзменении", "тпТаблицаЦен_Колонка_ПриИзменении");
	КонецЦикла;
	
   	ОбъектКолонка=Элементы.Найти("УчетнаяЦена");
	Если НЕ ОбъектКолонка=Неопределено Тогда
		ОбъектКолонка.ТолькоПросмотр=Истина;
		ОбъектКолонка.Доступность=Ложь;
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура УстановитьПодменюВыбораИзмененияПоТипуЦен(ОбъектОбработкиВыбора) Экспорт
	Для каждого СтрокаКоллекции Из Элементы.кпТаблицаЦен_ГруппаДействиеИзменить.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(СтрокаКоллекции);
	КонецЦикла;

	Для Каждого СтрокаТипаЦен Из Объект.ТипыЦен Цикл
		стрID=СтрЗаменить(XMLСтрока(СтрокаТипаЦен.ТипЦен), "-", "_");

		НоваяКомандаФормы=ЭтаФорма.Команды.Добавить("Команда"+стрID);
		НоваяКомандаФормы.Действие="кпТаблицаЦен_ВыполнитьДействие"; //НажатиеКнопки
		НоваяКомандаФормы.Заголовок=СокрЛП(СтрокаТипаЦен.ТипЦен);

		НовыйЭлементФормы=Элементы.Добавить("Кнопка"+стрID, Тип("КнопкаФормы"), Элементы.кпТаблицаЦен_ГруппаДействиеИзменить);
		НовыйЭлементФормы.Вид=ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлементФормы.ИмяКоманды="Команда"+стрID;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ПересчитатьУчетнуюЦену()
	ВыборкаНоменклатуры=ПолучитьУчетнуюЦену(ТаблицаЦен.Выгрузить(,"Номенклатура"));										 
	Если Не ВыборкаНоменклатуры.Количество()=0 Тогда
		Для Каждого стрТЧ из ТаблицаЦен Цикл
			СтруктураОтбора=Новый Структура("Номенклатура",стрТЧ.Номенклатура);
			ВыборкаНоменклатуры.Сбросить();
			Если ВыборкаНоменклатуры.НайтиСледующий(СтруктураОтбора) Тогда
				стрТЧ.УчетнаяЦена=ВыборкаНоменклатуры.УчетнаяЦена;
			Иначе
				стрТЧ.УчетнаяЦена = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаКоллекции Из ТаблицаЦен Цикл
			СтрокаКоллекции.УчетнаяЦена=0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УчетнаяЦенаТовары(Номенклатура)
	Выборка=ПолучитьУчетнуюЦену(Номенклатура);
	Возврат ?(Выборка.Следующий(), Выборка.УчетнаяЦена, 0);
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныеТипыЦен(БазовыйТипЦен)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("БазовыйТипЦен", БазовыйТипЦен);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	ТипыЦенНоменклатуры.БазовыйТипЦен.Ссылка = &БазовыйТипЦен
	|	И Не ТипыЦенНоменклатуры.Рассчитывается
	|УПОРЯДОЧИТЬ ПО
	|	ТипыЦенНоменклатуры.Представление
	|";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипЦен");
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоДокументуОснованию(Знач ДокументПоступление, Перезаполнение=Ложь)
	Если ТипЗнч(ДокументПоступление)=Тип("Массив") Тогда
		ДокументПоступление=ДокументПоступление[0];
	КонецЕсли; 
	
	ТипЦенБазовый=ДокументПоступление.ТипЦен;

	Если Не Перезаполнение Тогда
		// Получим подчиненные типы цен.
		ПодчиненныеТипыЦен=ПолучитьПодчиненныеТипыЦен(ТипЦенБазовый);
		ПодчиненныеТипыЦен.Добавить(ТипЦенБазовый);

		//Обойдем массив в обратном порядке.
		КоличествоПодчиненныхТипов=ПодчиненныеТипыЦен.Количество();
		Для Тмп = 1 По КоличествоПодчиненныхТипов Цикл
			СтрокаТабличнойЧасти=Объект.ТипыЦен.Добавить();
			СтрокаТабличнойЧасти.ТипЦен=ПодчиненныеТипыЦен[КоличествоПодчиненныхТипов - Тмп];
		КонецЦикла;
	Иначе
		ПодчиненныеТипыЦен=Объект.ТипыЦен.Выгрузить(,"ТипЦен");
	КонецЕсли;	

	стрВидДок=ДокументПоступление.Метаданные().Имя;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);
	Запрос.УстановитьПараметр("ПодчиненныеТипыЦен", ПодчиненныеТипыЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СуммаВключаетНДС", Ложь);
	Запрос.УстановитьПараметр("ВалютаДокумента", МодульВалютногоУчета.ПолучитьВалюту());
	Запрос.УстановитьПараметр("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ТоварыИзДокумента.*,
	|	СпрТипыЦен.Ссылка КАК ТипЦен,
	|   ЦеныНоменклатурыСрезПоследних.Цена КАК СтараяЦена,
	|	ВЫБОР
	|		КОГДА (НЕ СпрТипыЦен.БазовыйТипЦен = &ПустойТипЦен)
	|			ТОГДА СпрТипыЦен.ПроцентСкидкиНаценки
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки, СпрТипыЦен.ПроцентСкидкиНаценки)
	|	КОНЕЦ КАК ПроцентСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА (НЕ СпрТипыЦен.БазовыйТипЦен = &ПустойТипЦен)
	|			ТОГДА СпрТипыЦен.СпособРасчетаЦены
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены, СпрТипыЦен.СпособРасчетаЦены)
	|	КОНЕЦ КАК СпособРасчетаЦены	
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.НомерСтроки КАК Метка,
	|";	
	Если НЕ стрВидДок="ОприходованиеТоваров" Тогда
		Запрос.Текст=Запрос.Текст+"
		|Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|Док.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|Док.СтавкаНДС КАК СтавкаНДС,
		|";
	Иначе
		Запрос.Текст=Запрос.Текст+"
		|&СуммаВключаетНДС,
		|&ВалютаДокумента,
		|&СтавкаНДС,
		|";				
	КонецЕсли; 
	Запрос.Текст=Запрос.Текст+"
	|		Док.Номенклатура КАК Номенклатура,
	|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СРЕДНЕЕ(Док.Цена) КАК Цена,
	|		Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		Документ."+стрВидДок+".Товары КАК Док
	|	ГДЕ
	|		Док.Ссылка = &ДокументОснование
	|	СГРУППИРОВАТЬ ПО
	|		Док.НомерСтроки,
	|";	
	Если НЕ стрВидДок="ОприходованиеТоваров" Тогда
		Запрос.Текст=Запрос.Текст+"
		|Док.Ссылка.СуммаВключаетНДС,
		|Док.Ссылка.ВалютаДокумента,
		|Док.СтавкаНДС,
		|";
	Иначе
		Запрос.Текст=Запрос.Текст+"
		|&СуммаВключаетНДС,
		|&ВалютаДокумента,
		|&СтавкаНДС,
		|";		
	КонецЕсли; 
	Запрос.Текст=Запрос.Текст+"
	|		Док.Номенклатура,
	|		Док.ХарактеристикаНоменклатуры,
	|		Док.ЕдиницаИзмерения
	|	
	|	) КАК ТоварыИзДокумента
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ТипыЦенНоменклатуры КАК СпрТипыЦен
	|ПО
	|	СпрТипыЦен.Ссылка В (&ПодчиненныеТипыЦен)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен В (&ПодчиненныеТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
	|ПО
	|	СпрТипыЦен.Ссылка = ЦеныНоменклатурыСрезПоследних.ТипЦен
	|	И ТоварыИзДокумента.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|	И ТоварыИзДокумента.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|	УПОРЯДОЧИТЬ ПО
	|		Метка
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

		СтрокаТабличнойЧасти=ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураПоиска);
		Если СтрокаТабличнойЧасти=Неопределено Тогда
			СтрокаТабличнойЧасти=ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура=Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаНоменклатуры;
		КонецЕсли;

		стрID=стрЗаменить(Выборка.ТипЦен.УникальныйИдентификатор(), "-", "_");

		ОкруглятьВБольшуюСторону = Выборка.ТипЦен.ОкруглятьВБольшуюСторону;
		ПорядокОкругления = Выборка.ТипЦен.ПорядокОкругления;

		БазоваяЦена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
		              Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		              Выборка.СуммаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              УчетНалоговСервер.СтавкаНДС(Выборка.СтавкаНДС));

		СпособРасчетаЦены = Выборка.СпособРасчетаЦены;
		НовыйПроцент      = Выборка.ПроцентСкидкиНаценки;
		ВалютаДокумента   = Выборка.ВалютаДокумента;
		ЕдиницаИзмерения  = Выборка.ЕдиницаИзмерения;
		СтараяЦена		  = ?(Выборка.СтараяЦена=Null, 0, Выборка.СтараяЦена);
		
		Если НЕ ЗначениеЗаполнено(Выборка.ТипЦен.БазовыйТипЦен) Тогда
			НоваяЦена = БазоваяЦена;
		Иначе
			Если СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
				НоваяЦена = БазоваяЦена * (1 + НовыйПроцент / 100);
			ИначеЕсли СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
				НоваяЦена = ЦенообразованиеСервер.ПолучитьЦенуПоЦеновымДиапазонам(Выборка.ТипЦен, Объект.Дата, БазоваяЦена, ВалютаДокумента, ВалютаДокумента);
				НовыйПроцент = 0;
			Иначе
				НоваяЦена = 0;
			КонецЕсли;
			НоваяЦена=ЦенообразованиеСервер.ОкруглитьЦену(НоваяЦена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
		КонецЕсли;

		СтрокаТабличнойЧасти["Цена" + стрID]          = НоваяЦена;
		СтрокаТабличнойЧасти["СпособРасчета" + стрID] = СпособРасчетаЦены;
		СтрокаТабличнойЧасти["Валюта" + стрID]        = ВалютаДокумента;
		СтрокаТабличнойЧасти["Единица" + стрID]       = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти["Процент" + стрID]       = НовыйПроцент;
		СтрокаТабличнойЧасти["СтараяЦена" + стрID]    = СтараяЦена;
		СтрокаТабличнойЧасти["Отклонение" + стрID]    = ОтклонениеЦен(СтараяЦена,НоваяЦена);
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТовары(Очистить, Обновить, ПоЦенамКонтрагентов, ТолькоОстатками=Ложь)

	//Если Очистить И НЕ ТипЗнч(ПоЦенамКонтрагентов) = Тип("Строка") И ПоЦенамКонтрагентов Тогда
	//	Объект.ТипыЦен.Очистить();
	//КонецЕсли;

	//ФормированиеЦен=Обработки.ФормированиеЦен.Создать();
	//ФормаЗаполнения=ФормированиеЦен.ПолучитьФорму("ФормаЗаполнения", ЭтаФорма);

	//ФормированиеЦен.мКоманда = "Изменить";

	//Если ТолькоОстатками Тогда
	//	ФормаЗаполнения.ИмяРегистра = "ПартииТоваровНаСкладах";
	//	ТаблицаТиповЦен=ТипыЦен.Выгрузить();
	//	ТаблицаТиповЦен.Колонки.ТипЦен.Имя = "ТипЦенСкидок";
	//	ФормированиеЦен.ТипыЦенСкидок.Загрузить(ТаблицаТиповЦен);
	//	ФормированиеЦен.ДатаЦенСкидок=Дата;
	//ИначеЕсли ПоЦенамКонтрагентов Тогда
	//	ФормаЗаполнения.ИмяРегистра = "ЦеныНоменклатурыКонтрагентов";
	//	Если ЗначениеЗаполнено(Контрагент) Тогда
	//		ФормаЗаполнения.мКонтрагент=Контрагент;
	//	КОнецЕсли;
	//Иначе
	//	ФормаЗаполнения.ИмяРегистра = "ЦеныНоменклатуры";
	//	ТаблицаТиповЦен=ТипыЦен.Выгрузить();
	//	ТаблицаТиповЦен.Колонки.ТипЦен.Имя = "ТипЦенСкидок";
	//	ФормированиеЦен.ТипыЦенСкидок.Загрузить(ТаблицаТиповЦен);
	//КонецЕсли;

	//Если Обновить Тогда
	//	СписокНоменклатуры = Новый СписокЗначений;
	//	СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
	//	ФормаЗаполнения.мСписокНоменклатуры = СписокНоменклатуры;
	//КонецЕсли;

	//ФормаЗаполнения.ОткрытьМодально();

	//УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.кпТаблицаЦен.Кнопки.Дополнительно.Кнопки.ДействиеИзменить, Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));
КонецПроцедуры 

&НаСервере
Процедура КоманднаяПанельТаблицыТиповЦенРассчитатьПоБазовымЦенам(Кнопка)
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда Возврат; КонецЕсли; 
	
	СтруктураПоиска=Новый Структура;

	Для Каждого СтрокаТипЦен Из Объект.ТипыЦен Цикл
		ТипЦен=СтрокаТипЦен.ТипЦен;

		Если Не (НЕ ЗначениеЗаполнено(ТипЦен.БазовыйТипЦен) Или ТипЦен.Рассчитывается) Тогда
			ВалютаТипаЦен=ТипЦен.БазовыйТипЦен.ВалютаЦены;

			СтрокаТипаЦенБазовый=Объект.ТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", ТипЦен.БазовыйТипЦен));

			//Если в документе есть колонка с базовым типом цен, то запомним номер этой колонки,
			//иначе - сформируем запрос по ценам базового типа.
			Если Не СтрокаТипаЦенБазовый=Неопределено Тогда
				МассивСтрок=Объект.ТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", СтрокаТипаЦенБазовый.ТипЦен));
				Если МассивСтрок.Количество()=0 Тогда Продолжить; КонецЕсли;
				
				стрID=стрЗаменить(МассивСтрок[0].ID, "-", "_");
			Иначе
				стрID=Неопределено;

				ВалютаЦены=ВалютаТипаЦен;

				СтруктураВалюты=МодульВалютногоУчета.КурсВалюты(ВалютаЦены, Объект.Дата);
				КурсВалюты     =СтруктураВалюты.Курс;
				КратностьВалюты=СтруктураВалюты.Кратность;

				// Надо будет получать цену. Сформируем запрос по ценам
				СтруктураЗначений=Новый Структура;
				СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен.БазовыйТипЦен);
				СтруктураЗначений.Вставить("НовыйВалютаДокумента", ВалютаЦены);
				СтруктураЗначений.Вставить("НовыйКурсДокумента", КурсВалюты);
				СтруктураЗначений.Вставить("НовыйКратностьДокумента", КратностьВалюты);

				СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

				// Получить нужные цены запросом
				РезультатЗапросаЦен=ЦенообразованиеСервер.СформироватьЗапросПоЦенам(СтруктураЗначений, СпособЗаполненияЦен, ТаблицаЦен.Выгрузить("Номенклатура").ВыгрузитьКолонку("Номенклатура"), Объект.Дата, Неопределено);

				ВыборкаИзРезультатаЗапроса=РезультатЗапросаЦен.Выбрать();
			КонецЕсли;

			Для Каждого СтрокаТабличнойЧасти Из ТаблицаЦен Цикл
				МассивСтрок=Объект.ТипыЦен.НайтиСтроки(Новый Структура("ТипЦен", ТипЦен));
				Если МассивСтрок.Количество()=0 Тогда Продолжить; КонецЕсли;
				
				стрID=стрЗаменить(МассивСтрок[0].ID, "-", "_");
				ВалютаТекущая = ТипЦен.ВалютаЦены;

				Если Не стрID=Неопределено Тогда
					ЦенаБазовая = СтрокаТабличнойЧасти["цена" + стрID];
					ЦенаБазовая = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииЕдиницы(ЦенаБазовая, СтрокаТабличнойЧасти["Единица" + стрID], СтрокаТабличнойЧасти["Единица" + стрID]);

					ВалютаБазовая = СтрокаТабличнойЧасти["валюта" + стрID];
				Иначе
					СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
					СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

					ВыборкаИзРезультатаЗапроса.Сбросить();
					Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // нашли запись
						Если НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
							ЦенаБазовая = 0;
							ВалютаБазовая = ВалютаТипаЦен;
						Иначе
							ЦенаБазовая = ВыборкаИзРезультатаЗапроса.Цена;

							// Пересчитываем цену в единицу документа.
							ЦенаБазовая = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииЕдиницы(ЦенаБазовая, ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены, СтрокаТабличнойЧасти["Единица" + стрID]);

							ВалютаБазовая = ВыборкаИзРезультатаЗапроса.ВалютаЦены;
						КонецЕсли;
					Иначе
						ЦенаБазовая = 0;
						ВалютаБазовая = ВалютаТипаЦен;
					КонецЕсли;
				КонецЕсли;

				ВалютаТекущая = ТипЦен.ВалютаЦены;

				Если СтрокаТабличнойЧасти["СпособРасчета" + стрID] = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					ПолученнаяЦена = ЦенаБазовая * (1 + СтрокаТабличнойЧасти["процент" + стрID] / 100);
					ВалютаТекущая = ВалютаБазовая;
				ИначеЕсли СтрокаТабличнойЧасти["СпособРасчета" + стрID] = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					ПолученнаяЦена = ЦенообразованиеСервер.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Объект.Дата, ЦенаБазовая, ВалютаТекущая, ВалютаБазовая);

					СтрокаТабличнойЧасти["валюта" + стрID] = ВалютаТекущая;
				Иначе
					ПолученнаяЦена = 0;
				КонецЕсли;

				ПолученнаяЦена = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, СтрокаТабличнойЧасти["валюта" + стрID], 0, 1, Объект.Дата);
				ПолученнаяЦена = ЦенообразованиеСервер.ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);

				СтрокаТабличнойЧасти["цена" + стрID] = ПолученнаяЦена;
				//СтрокаТабличнойЧасти["СтараяЦена" + стрID] = ПолученнаяЦена;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура ТабличныеЧасти_ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	тпТаблицаЦен_Инициализация();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТаблицаЦен_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВыборДокумента(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ОткрытьФорму("Документ."+Параметр1+".ФормаСписка", Новый Структура("РежимВыбора", Истина), ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	//ДокументОбъект=РеквизитФормыВЗначение("Объект");
	//Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
	//	УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	//КонецЦикла;
	//ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" ИЛИ Элемент.Имя="Склад" Тогда
		ПересчитатьУчетнуюЦену();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;
	
	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТаблицаЦен_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура кпТаблицаЦен_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ТаблицаЦен"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьПоДокументуОснования" Или стрКоманда="ДобавитьПоДокументуОснования" Тогда
		Если стрКоманда="ЗаполнитьПоДокументуОснования" Тогда
			СтрокаТабличнойЧасти=Элементы.ТаблицаЦен.ТекущиеДанные;
			Если Не СтрокаТабличнойЧасти=Неопределено Тогда
				Ответ=Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
				Если Ответ=КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
				ТаблицаЦен.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		спВыбор=Новый СписокЗначений;
		спВыбор.Добавить("ПоступлениеТоваровУслуг", "Поступление товаров услуг");
		спВыбор.Добавить("ОприходованиеТоваров", "Оприходование товаров");
		
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВыборДокумента", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Укажите вид документа для заполнения", спВыбор, 20,,"Внимание",);
		
	ИначеЕсли стрКоманда="ОбновитьПоЦенамНоменклатурыКонтрагентов" Тогда
		ЗаполнитьТовары(Ложь, Истина, Истина);
		
	ИначеЕсли стрКоманда="ДобавитьПоЦенамНоменклатурыКонтрагентов" Тогда
		ЗаполнитьТовары(Ложь, Ложь, Истина);
		
	ИначеЕсли стрКоманда="ЗаполнитьПоЦенамНоменклатурыКонтрагентов" Тогда
		ЗаполнитьТовары(Истина, Ложь, Истина);
		
	ИначеЕсли стрКоманда="ОбновитьПоЦенамНоменклатуры" Тогда
		ЗаполнитьТовары(Ложь, Истина, Ложь);
		
	ИначеЕсли стрКоманда="ДобавитьПоЦенамНоменклатуры" Тогда
		ЗаполнитьТовары(Ложь, Ложь, Ложь);
		
	ИначеЕсли стрКоманда="ЗаполнитьПоЦенамНоменклатуры" Тогда
		ЗаполнитьТовары(Истина, Ложь, Ложь);
		КоманднаяПанельТаблицыТиповЦенРассчитатьПоБазовымЦенам("");
		
	ИначеЕсли стрКоманда="ЗаполнитьПоУчетнойЦене" Тогда
		текКолонка=Элементы.ТаблицаЦен.ТекущийЭлемент;
		Если текКолонка=Неопределено ИЛИ Не Лев(текКолонка.Имя, 4)="Цена" Тогда
			ПоказатьПредупреждение(,"Не выбрана колонка с типом цен!", 30); Возврат;
		КонецЕсли;
		Для каждого СтрокаКоллекции Из ТаблицаЦен Цикл
			СтрокаКоллекции[текКолонка.Имя]=СтрокаКоллекции.УчетнаяЦена;
		КонецЦикла;
		
	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		
		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);
		
	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");
		
	ИначеЕсли стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
		
	ИначеЕсли стрКоманда="Прайс" Тогда
		Если Не Объект.Проведен Тогда
			ПоказатьПредупреждение(,"Прайс можно распечатать только после проведения документа");
			Возврат;
		КонецЕсли;
		//ФормаПрайса=Обработки.ПечатьПрайсЛиста.ПолучитьФорму("ФормаЗаполнения");
		//Если ТаблицаЦен.Количество() > 0 Тогда
		//	СписокНоменклатуры = Новый СписокЗначений;
		//	СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
		//	ФормаПрайса.мСписокНоменклатуры = СписокНоменклатуры;
		//КонецЕсли;
		//Если СписокТиповЦен.Количество() > 0 Тогда
		//	ФормаПрайса.мСписокТиповЦен = СписокТиповЦен;
		//КонецЕсли;
		//ФормаПрайса.Открыть();
		//ФормаПрайса.ОбновитьОтчет();
		
	ИначеЕсли стрКоманда="ЗаполнитьПоОстаткамНаСкладе" Тогда
		ЗаполнитьТовары(Истина, Ложь, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура тпТаблицаЦен_Инициализация()
	ДобавляемыеРеквизиты=Новый Массив;
	Если СуществующиеРеквизиты.НайтиПоЗначению("УчетнаяЦена")=Неопределено Тогда
		Реквизит=Новый РеквизитФормы("УчетнаяЦена",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)),"ТаблицаЦен","Учетная цена");
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		СуществующиеРеквизиты.Добавить(Реквизит.Имя);
	КонецЕсли;
	Для Каждого СтрокаТипаЦен Из Объект.ТипыЦен Цикл
		стрИмяКолонки=СтрЗаменить(XMLСтрока(СтрокаТипаЦен.ТипЦен), "-", "_");

		Если СуществующиеРеквизиты.НайтиПоЗначению("Цена"+стрИмяКолонки)=Неопределено Тогда
			Реквизит=Новый РеквизитФормы("Цена"+стрИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "ТаблицаЦен", СокрЛП(СтрокаТипаЦен.ТипЦен));
			ДобавляемыеРеквизиты.Добавить(Реквизит); СуществующиеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
		Если СуществующиеРеквизиты.НайтиПоЗначению("СтараяЦена"+стрИмяКолонки)=Неопределено Тогда
			Реквизит=Новый РеквизитФормы("СтараяЦена"+стрИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "ТаблицаЦен", "Старая цена");
			ДобавляемыеРеквизиты.Добавить(Реквизит); СуществующиеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
		Если СуществующиеРеквизиты.НайтиПоЗначению("Отклонение"+стрИмяКолонки)=Неопределено Тогда
			Реквизит=Новый РеквизитФормы("Отклонение"+стрИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 2)), "ТаблицаЦен", "Отклонение");
			ДобавляемыеРеквизиты.Добавить(Реквизит); СуществующиеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
		Если СуществующиеРеквизиты.НайтиПоЗначению("СпособРасчета"+стрИмяКолонки)=Неопределено Тогда
			Реквизит=Новый РеквизитФормы("СпособРасчета"+стрИмяКолонки, Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаЦены"), "ТаблицаЦен", "Способ расчета");
			ДобавляемыеРеквизиты.Добавить(Реквизит); СуществующиеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
		Если СуществующиеРеквизиты.НайтиПоЗначению("Валюта"+стрИмяКолонки)=Неопределено Тогда
			Реквизит=Новый РеквизитФормы("Валюта"+стрИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), "ТаблицаЦен", "Валюта");
			ДобавляемыеРеквизиты.Добавить(Реквизит); СуществующиеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
		Если СуществующиеРеквизиты.НайтиПоЗначению("Единица"+стрИмяКолонки)=Неопределено Тогда
			Реквизит=Новый РеквизитФормы("Единица"+стрИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "ТаблицаЦен", "Единица");
			ДобавляемыеРеквизиты.Добавить(Реквизит); СуществующиеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
		Если СуществующиеРеквизиты.НайтиПоЗначению("Процент"+стрИмяКолонки)=Неопределено Тогда
			Реквизит=Новый РеквизитФормы("Процент"+стрИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), "ТаблицаЦен", "% скидки (наценки)");
			ДобавляемыеРеквизиты.Добавить(Реквизит); СуществующиеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;

	Если ДобавляемыеРеквизиты.Количество()=0 Тогда Возврат; КонецЕсли;

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для каждого СтрокаКоллекции Из ДобавляемыеРеквизиты Цикл
		Если НЕ Элементы.Найти(СтрокаКоллекции.Имя)=Неопределено Тогда Продолжить; КонецЕсли; 

		РодительЭлемента=Элементы.ТаблицаЦен;
		Если Лев(СтрокаКоллекции.Имя, 4)="Цена" Тогда
			РодительЭлемента1=Элементы.Добавить("Группа"+стрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_"), Тип("ГруппаФормы"), РодительЭлемента);
			РодительЭлемента1.Группировка=ГруппировкаКолонок.Вертикальная;

			РодительЭлемента2=Элементы.Добавить("Группа"+стрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_"), Тип("ГруппаФормы"), РодительЭлемента1);
			РодительЭлемента2.Группировка=ГруппировкаКолонок.Горизонтальная;

		ИначеЕсли Лев(СтрокаКоллекции.Имя, 6)="Валюта" Тогда
			РодительЭлемента3=Элементы.Добавить("Группа"+стрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_"), Тип("ГруппаФормы"), РодительЭлемента1);
			РодительЭлемента3.Группировка=ГруппировкаКолонок.Горизонтальная;
		КонецЕсли;

		Если Лев(СтрокаКоллекции.Имя, 4)="Цена" ИЛИ Лев(СтрокаКоллекции.Имя, 10)="СтараяЦена" ИЛИ Лев(СтрокаКоллекции.Имя, 10)="Отклонение" Тогда
			РодительЭлемента=РодительЭлемента2;

		ИначеЕсли Лев(СтрокаКоллекции.Имя, 13)="СпособРасчета" Тогда
			РодительЭлемента=РодительЭлемента1;

		ИначеЕсли Лев(СтрокаКоллекции.Имя, 6)="Валюта" ИЛИ Лев(СтрокаКоллекции.Имя, 7)="Единица" ИЛИ Лев(СтрокаКоллекции.Имя, 7)="Процент" Тогда
			РодительЭлемента=РодительЭлемента3;
		КонецЕсли;

		Элемент=Элементы.Добавить(СтрокаКоллекции.Имя, Тип("ПолеФормы"), РодительЭлемента);
		Элемент.ПутьКДанным="ТаблицаЦен."+СтрокаКоллекции.Имя;
		Элемент.Вид=ВидПоляФормы.ПолеВвода;
		Элемент.УстановитьДействие("ПриИзменении", "тпТаблицаЦен_Колонка_ПриИзменении");
		Элемент.УстановитьДействие("НачалоВыбора", "тпТаблицаЦен_Колонка_НачалоВыбора");
		
		Если Лев(СтрокаКоллекции.Имя, 7)="Единица" Тогда
			НовыйМассив=Новый Массив();
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.ТаблицаЦен.ТекущиеДанные.Номенклатура"));
			Элемент.СвязиПараметровВыбора=Новый ФиксированныйМассив(НовыйМассив);
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры 

&НаСервере
Процедура тпТаблицаЦен_Заполнить()
	Если Объект.ТипыЦен.Количество()=0 Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из Объект.Товары Цикл			
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаКоллекции.ХарактеристикаНоменклатуры);
		
		стрID=стрЗаменить(СтрокаКоллекции.ТипЦен.УникальныйИдентификатор(), "-", "_");
		МассивСтрок=ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		СтрокаТаблицы=?(МассивСтрок.Количество()=0, ТаблицаЦен.Добавить(), МассивСтрок[0]);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаКоллекции, "Номенклатура,ХарактеристикаНоменклатуры");
		СтрокаТаблицы["Цена"+стрID]=СтрокаКоллекции.Цена;
		СтрокаТаблицы["СпособРасчета"+стрID]=СтрокаКоллекции.СпособРасчетаЦены;
		СтрокаТаблицы["Валюта"+стрID]=СтрокаКоллекции.Валюта;
		СтрокаТаблицы["Единица"+стрID]=СтрокаКоллекции.ЕдиницаИзмерения;
		СтрокаТаблицы["Процент"+стрID]=СтрокаКоллекции.ПроцентСкидкиНаценки;
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура тпТаблицаЦен_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	ТипЦен=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ТипЦен");

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;

	Элементы.ТаблицаЦен.Обновить();
	Элементы.ТаблицаЦен.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТаблицаЦен_ПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные=Элементы.ТаблицаЦен.ТекущиеДанные;
	стрКолонка=Элементы.ТаблицаЦен.ТекущийЭлемент.Имя;

	Если ТекущиеДанные=Неопределено Или стрКолонка=Неопределено Тогда Возврат; КонецЕсли;
	
	Если Лев(стрКолонка, 4)="един" Тогда
		МассивПараметров=Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Номенклатура", ТекущиеДанные.Номенклатура));
		Элементы.ТаблицаЦен.ТекущийЭлемент.ПараметрыВыбора=Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ТаблицаЦен.ТекущийЭлемент.КнопкаОчистки=Ложь;

	ИначеЕсли Лев(стрКолонка, 6)="Валюта" Или Лев(стрКолонка,6)="Способ" Или стрКолонка="ТаблицаЦенНоменклатура" Тогда
		Элементы.ТаблицаЦен.ТекущийЭлемент.КнопкаОчистки=Ложь;
	КонецЕсли;

	//Если Лев(ТекущаяКолонкаИмя, 7)="процент" Тогда
	//	Если ТекущаяСтрока[Элемент.ТекущийЭлемент.Имя]=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон") Тогда
	//		ТекущаяКолонка.ТолькоПросмотр=Истина;
	//	Иначе
	//		ТекущаяКолонка.ТолькоПросмотр=Ложь;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура тпТаблицаЦен_ПередНачаломИзменения(Элемент, Отказ)
	//стрКолонка=Элементы.ТаблицаЦен.ТекущийЭлемент.Имя;
	//Если Лев(стрКолонка, 4)="Цена" ИЛИ Лев(стрКолонка, 13)="СпособРасчета" ИЛИ Лев(стрКолонка, 7)="Единица" ИЛИ Лев(стрКолонка, 4)="Процент" Тогда
	//	Отказ=Истина; Возврат;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТаблицаЦен_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
    стрКолонка=Элементы.ТаблицаЦен.ТекущийЭлемент.Имя;	
	Если Лев(стрКолонка, 4)="Цена" Тогда
		ТекущиеДанные=Элементы.ТаблицаЦен.ТекущиеДанные;

		стрИдентификатор1=Сред(стрКолонка, 5);
		ТипЦен=ТипЦенПоИмениКолонки(стрИдентификатор1);

		РеквизитыТипаЦен=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТипЦен, "ПорядокОкругления,ОкруглятьВБольшуюСторону");

		ТекущиеДанные[стрКолонка]=ЦенообразованиеСервер.ОкруглитьЦену(Элементы.ТаблицаЦен.ТекущиеДанные[стрКолонка], РеквизитыТипаЦен.ПорядокОкругления, РеквизитыТипаЦен.ОкруглятьВБольшуюСторону);
        ТекущиеДанные["Отклонение"+стрИдентификатор1]=ОтклонениеЦен(Элементы.ТаблицаЦен.ТекущиеДанные["СтараяЦена"+стрИдентификатор1], Элементы.ТаблицаЦен.ТекущиеДанные[стрКолонка]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТаблицаЦен_Колонка_ПриИзменении(Элемент) Экспорт
	стрКолонка=стрЗаменить(Элемент.Имя, "ТаблицаЦен", "");
	ТекущиеДанные=Элементы.ТаблицаЦен.ТекущиеДанные;
	
	Если стрКолонка="Номенклатура" Тогда
		ПриИзмененииНоменклатуры(Элементы.ТаблицаЦен.ТекущаяСтрока);
		ТекущиеДанные.УчетнаяЦена=УчетнаяЦенаТовары(ТекущиеДанные.Номенклатура);

	ИначеЕсли стрКолонка="ХарактеристикиНоменклатуры" Тогда
		ПерезаполнитьСтроку(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпТаблицаЦен_Записать()
	Объект.Товары.Очистить();
	Для каждого СтрокаКоллекции1 Из ТаблицаЦен Цикл
		Для каждого СтрокаКоллекции2 Из Объект.ТипыЦен Цикл
			стрИдентификатор=СтрЗаменить(СтрокаКоллекции2.ТипЦен.УникальныйИдентификатор(), "-", "_");

			НоваяСтрока=Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1, "Номенклатура,ХарактеристикаНоменклатуры");
			НоваяСтрока.ТипЦен=СтрокаКоллекции2.ТипЦен;
			НоваяСтрока.Цена=СтрокаКоллекции1["Цена"+стрИдентификатор];
			НоваяСтрока.Отклонение=СтрокаКоллекции1["Отклонение"+стрИдентификатор];
			НоваяСтрока.СтараяЦена=СтрокаКоллекции1["СтараяЦена"+стрИдентификатор];
			НоваяСтрока.СпособРасчетаЦены=СтрокаКоллекции1["СпособРасчета"+стрИдентификатор];
			НоваяСтрока.ПроцентСкидкиНаценки=СтрокаКоллекции1["Процент"+стрИдентификатор];
			НоваяСтрока.ЕдиницаИзмерения=СтрокаКоллекции1["Единица"+стрИдентификатор];
			НоваяСтрока.Валюта=СтрокаКоллекции1["Валюта"+стрИдентификатор];
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Типы цен"

&НаКлиенте
Процедура тпТипыЦен_ПередУдалением(Элемент, Отказ)
	стрПостфиксКолонка=стрЗаменить(Элемент.ТекущиеДанные.ТипЦен.УникальныйИдентификатор(), "-", "_");
	тпТипыЦен_УдалитьСвязанныеЭлементы(стрПостфиксКолонка);
КонецПроцедуры

&НаСервере
Процедура тпТипыЦен_УдалитьСвязанныеЭлементы(стрПостфиксКолонка)
	РезультатПоиска=Элементы.Найти("Цена"+стрПостфиксКолонка);
	Если НЕ РезультатПоиска=Неопределено Тогда Элементы.Удалить(РезультатПоиска); КонецЕсли;

	РезультатПоиска=Элементы.Найти("Валюта"+стрПостфиксКолонка);
	Если НЕ РезультатПоиска=Неопределено Тогда Элементы.Удалить(РезультатПоиска); КонецЕсли; 

	РезультатПоиска=Элементы.Найти("СпособРасчета"+стрПостфиксКолонка);
	Если НЕ РезультатПоиска=Неопределено Тогда Элементы.Удалить(РезультатПоиска); КонецЕсли; 
	
	РезультатПоиска=Элементы.Найти("СтараяЦена"+стрПостфиксКолонка);
	Если НЕ РезультатПоиска=Неопределено Тогда Элементы.Удалить(РезультатПоиска); КонецЕсли; 
	
	РезультатПоиска=Элементы.Найти("Отклонение"+стрПостфиксКолонка);
	Если НЕ РезультатПоиска=Неопределено Тогда Элементы.Удалить(РезультатПоиска); КонецЕсли; 

	РезультатПоиска=Элементы.Найти("Процент"+стрПостфиксКолонка);
	Если НЕ РезультатПоиска=Неопределено Тогда Элементы.Удалить(РезультатПоиска); КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТипыЦен_ПослеУдаления(Элемент)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	тпТаблицаЦен_Инициализация();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.ТипыЦен.Количество()=0 И Объект.Товары.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ "+СокрЛП(Объект.Ссылка)+" был записан некорректно! Информация о ценах очищена.");
		Объект.Товары.Очистить();
	КонецЕсли;
	
	тпТаблицаЦен_Заполнить();
	УстановитьНедостающиеПараметры();
	ДоступностьКолонок();
	
	УстановитьПодменюВыбораИзмененияПоТипуЦен("КоманднаяПанельТаблицыТиповЦенДействиеИзменить");
	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда Возврат; КонецЕсли;
	ЗаполнитьТабличнуюЧастьПоДокументуОснованию(ВыбранноеЗначение, Истина);
	ПересчитатьУчетнуюЦену();
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	ПересчитатьУчетнуюЦену();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
	тпТаблицаЦен_Записать();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
