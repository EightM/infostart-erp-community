#Область Заполнение

Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПодОтчетник", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация.ГоловнаяОрганизация);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуммаОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(, ФизЛицо = &ПодОтчетник И Организация = &Организация)
	|ГДЕ
	|	СуммаОстаток > 0
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда		
		СтрокаПлатеж.СуммаПлатежа=Выборка.СуммаДолга;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("РозничнаяТочка", Контрагент);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка.Остатки(, РозничнаяТочка = &РозничнаяТочка)
	|ГДЕ
	|	СуммаОстаток > 0  
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаПлатежа=Выборка.СуммаОстаток;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт
	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаДокументаУСН=РасшифровкаПлатежа.Итог("СуммаУСН");

	Для каждого СтрокаКоллекции Из РасшифровкаПлатежа Цикл
		Если СтрокаКоллекции.Подразделение.Пустая() Тогда
			СтрокаКоллекции.Подразделение=Подразделение;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти

#Область Проведение

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	//Движения по регистру "Взаиморасчеты с контрагентами"
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);

	// По регистру "ВзаиморасчетыСПодотчетнымиЛицами"
	ДвижениеПоРегистру_ВзаиморасчетыСПодотчетнымиЛицами(СтруктураШД, СтруктураТД, Отказ);
		
	// По регистру "Денежные средства"
	ДвижениеПоРегистру_ДенежныеСредства(СтруктураШД, СтруктураТД, Отказ);

	// По регистру "Движения денежных средств"
	ДвижениеПоРегистру_ДвиженияДенежныхСредств(СтруктураШД, СтруктураТД, Отказ);
	
	// По регистру "Розничная выручка"
	ДвижениеПоРегистру_РозничнаяВыручка(СтруктураШД, СтруктураТД, Отказ);

	//Движения по регистрам "КУДиР"
	ДвижениеПоРегистру_КнигаУчетаДоходовИРасходов(СтруктураШД, СтруктураТД, Отказ);
	
	ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ);

	//Движения по расчетам "Учет НДС"
	ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ДвижениеПоРегистру_ДенежныеСредства(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ДенежныеСредства") Тогда Возврат; КонецЕсли;
	тзДанные=Движения.ДенежныеСредства.ВыгрузитьКолонки();
	
	НоваяСтрока=тзДанные.Добавить();
	НоваяСтрока.БанковскийСчетКасса=Касса;
	НоваяСтрока.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Наличные;
	НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;

	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ СтруктураШД.ПоДенежномуЧеку Тогда
		НоваяСтрока=тзДанные.Добавить();
		НоваяСтрока.БанковскийСчетКасса = СчетОрганизации;
		НоваяСтрока.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Безналичные;
		НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
	КонецЕсли;

	тзДанные.ЗаполнитьЗначения(Истина, "Активность");
	тзДанные.ЗаполнитьЗначения(Дата, "Период");
	тзДанные.ЗаполнитьЗначения(Организация, "Организация");
	тзДанные.ЗаполнитьЗначения(СтруктураТД.РасшифровкаПлатежа.Итог("СуммаПлатежа"), "Сумма");
	тзДанные.ЗаполнитьЗначения(СтруктураТД.РасшифровкаПлатежа.Итог("СуммаВал"), "СуммаУпр");

	Движения.ДенежныеСредства.Загрузить(тзДанные);	
КонецПроцедуры	

Процедура ДвижениеПоРегистру_ДвиженияДенежныхСредств(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ДвиженияДенежныхСредств") Тогда Возврат; КонецЕсли;
	тзДвижения=Движения.ДвиженияДенежныхСредств.ВыгрузитьКолонки();

	ФормироватьДвижениеПоБезНалу=ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ СтруктураШД.ПоДенежномуЧеку;
	Для каждого СтрокаКоллекции Из СтруктураТД.Взаиморасчеты Цикл
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
			НоваяСтрока.Контрагент=?(ЗначениеЗаполнено(СтрокаКоллекции.Сотрудник), СтрокаКоллекции.Сотрудник, Контрагент);	
		КонецЕсли;
		НоваяСтрока.Сумма=СтрокаКоллекции.СуммаБух;
		НоваяСтрока.СуммаУпр=СтрокаКоллекции.СуммаВал;
		НоваяСтрока.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход;
		НоваяСтрока.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Наличные;
		НоваяСтрока.БанковскийСчетКасса=Касса;

		Если ФормироватьДвижениеПоБезНалу Тогда
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.Контрагент=?(ЗначениеЗаполнено(СтрокаКоллекции.Сотрудник), СтрокаКоллекции.Сотрудник, Контрагент);	
			КонецЕсли;
			НоваяСтрока.Сумма=СтрокаКоллекции.СуммаБух;
			НоваяСтрока.СуммаУпр=СтрокаКоллекции.СуммаВал;			
			НоваяСтрока.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Расход;
			НоваяСтрока.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Безналичные;
			НоваяСтрока.БанковскийСчетКасса=СчетОрганизации;
		КонецЕсли;			
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Подразделение, "ЦФО");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "ДокументДвижения");

	Движения.ДвиженияДенежныхСредств.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВзаиморасчетыСПодотчетнымиЛицами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда Возврат; КонецЕсли;
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСПодотчетнымиЛицами") Тогда Возврат; КонецЕсли;
	
	НоваяСтрока=Движения.ВзаиморасчетыСПодотчетнымиЛицами.Добавить();
	НоваяСтрока.Активность=Истина;
	НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
	НоваяСтрока.Период=Дата;
	НоваяСтрока.Организация=Организация;
	НоваяСтрока.Сумма=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	НоваяСтрока.ФизЛицо=Контрагент;
КонецПроцедуры

Процедура ДвижениеПоРегистру_РозничнаяВыручка(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда Возврат; КонецЕсли;
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "РозничнаяВыручка") Тогда Возврат; КонецЕсли;
	
	НаборДвижений   = Движения.РозничнаяВыручка;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
	СтрокаДвижений=ТаблицаДвижений.Добавить();
	СтрокаДвижений.РозничнаяТочка  = Контрагент;
	СтрокаДвижений.Подразделение   = Подразделение;
	СтрокаДвижений.Сумма           = СуммаДокумента;
		
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
	Движения.РозничнаяВыручка.ВыполнитьРасход();
КонецПроцедуры	

Процедура ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ВзаиморасчетыСКонтрагентами") Тогда Возврат; КонецЕсли;
	Если НЕ ДенежныеСредстваСервер.ЕстьВзаиморасчеты(ВидОперации) Тогда Возврат; КонецЕсли;
	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(СтруктураТД.Взаиморасчеты);
КонецПроцедуры	

Процедура ДвижениеПоРегистру_КнигаУчетаДоходовИРасходов(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "КнигаУчетаДоходовИРасходов") Тогда Возврат; КонецЕсли;
	УправлениеДокументамиСервер.ПараметрыУчетнойПолитики(ЭтотОбъект, Истина);
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда Возврат; КонецЕсли;
	НалоговыйУчет.ДвиженияДенежныхСредствКУДиР(Ссылка, ДополнительныеСвойства, СтруктураШД, СтруктураТД.РасшифровкаПлатежа, "Доходы");
КонецПроцедуры

Процедура ДвижениеПоРегистру_РасходыПриУСН(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "РасходыПриУСН") Тогда Возврат; КонецЕсли;
	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.ОбъектНалогообложенияУСН=Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда	Возврат; КонецЕсли;
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда Возврат; КонецЕсли;
	Если ВидОперации<>Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда Возврат; КонецЕсли;
	ВключитьДвиженияУСН=Ложь;
	Если ДополнительныеСвойства.Свойство("ВключитьДвиженияУСН") Тогда
		ВключитьДвиженияУСН=ДополнительныеСвойства.ВключитьДвиженияУСН;
	КонецЕсли;

	СистемаНалогообложения=УчетнаяПолитика.СистемаНалогообложения;
	Если СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная Или СистемаНалогообложения=Перечисления.СистемыНалогообложения.Упрощенная_ЕНВД ИЛИ ВключитьДвиженияУСН Тогда
		тзДвижения=Движения.РасходыПриУСН.ВыгрузитьКолонки();
		тзДанные=СтруктураТД.РасшифровкаПлатежа.Скопировать();
		тзДанные.Свернуть("ДоговорКонтрагента,ТОП,НомерСтрокиТабличнойЧасти,ВидТабличнойЧасти","СуммаПлатежа");
		Для Каждого СтрокаКоллекции ИЗ тзДанные Цикл
			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКоллекции);
			НоваяСтрока.Сумма=-СтрокаКоллекции.СуммаПлатежа;
			НоваяСтрока.ТОП=СтрокаКоллекции.ТОП;
			НоваяСтрока.Активность=Истина;
			НоваяСтрока.Период=Дата;
			НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяСтрока.Организация=Организация;
			НоваяСтрока.СтатусыОплатыРасходов=Перечисления.СтатусыРасходовУСН.ПредоплатаПоставщику;
			НоваяСтрока.РасчетныйДокумент=Ссылка;
		КонецЦикла;
		тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
		тзДвижения.ЗаполнитьЗначения(Дата, "Период");
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
   		тзДвижения.ЗаполнитьЗначения(Ссылка, "РасчетныйДокумент");
		
		Движения.РасходыПриУСН.Загрузить(тзДвижения);
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетДенежныхСведств(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ДенежныеСредства(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_ДвиженияДенежныхСредств(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетВзаиморасчетов(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_ВзаиморасчетыСКонтрагентами(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетНДС(СтруктураШД, СтруктураТД, Отказ)
	Если ДенежныеСредстваСервер.ЕстьВзаиморасчеты(ВидОперации) Тогда
		УчетНДС.ДвижениеДенежныхСредств(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияМодуля

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	ДокументОснование=Основание.Ссылка;

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	 	ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.СтавкаНДС=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
		СтрокаПлатеж.СуммаПлатежа=Основание.СуммаДокумента;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
		ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.СтавкаНДС=?(Контрагент.УчетБезНДС, Перечисления.СтавкиНДС.БезНДС, УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС"));
		СтрокаПлатеж.СуммаНДС=Основание.СуммаДокумента;
		СтрокаПлатеж.СуммаПлатежа=Основание.СуммаДокумента;
		СтрокаПлатеж.ID=Новый УникальныйИдентификатор;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, МодульВалютногоУчета.КурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата));

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя;

		текДоговорКонтрагента=Основание.ДоговорКонтрагента;
		текСтатьяДвиженияДенежныхСредств=текДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурса=МодульВалютногоУчета.КурсВалюты(текДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДаннных1.СтавкаНДС,
		|	ИсточникДаннных1.Сумма,
		|	ИсточникДаннных1.СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ИсточникДаннных1
		|ГДЕ
		|	ИсточникДаннных1.Ссылка = &Ссылка
		|
		|Объединить ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсточникДаннных1.СтавкаНДС,
		|	ИсточникДаннных1.Сумма,
		|	ИсточникДаннных1.СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ИсточникДаннных1
		|ГДЕ
		|	ИсточникДаннных1.Ссылка = &Ссылка
		|
		|Объединить ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсточникДаннных1.СтавкаНДС,
		|	ИсточникДаннных1.Сумма,
		|	ИсточникДаннных1.СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ОС КАК ИсточникДаннных1
		|ГДЕ
		|	ИсточникДаннных1.Ссылка = &Ссылка
		|
		|Объединить ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсточникДаннных1.СтавкаНДС,
		|	ИсточникДаннных1.Сумма,
		|	ИсточникДаннных1.СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.НМА КАК ИсточникДаннных1
		|ГДЕ
		|	ИсточникДаннных1.Ссылка = &Ссылка
		|
		|Объединить ВСЕ
		|
		|ВЫБРАТЬ
		|	Неопределено,
		|	ИсточникДаннных1.Сумма,
		|	0
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ИсточникДаннных1
		|ГДЕ
		|	ИсточникДаннных1.Ссылка = &Ссылка
		|
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(СуммаНДС)
		|ПО
		|	СтавкаНДС
		|";
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.ДоговорКонтрагента=текДоговорКонтрагента;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=текСтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.СуммаНДС=Выборка.СуммаНДС;
			СтрокаПлатеж.СуммаПлатежа=Выборка.Сумма;
			СтрокаПлатеж.СтавкаНДС=Выборка.СтавкаНДС;
			СтрокаПлатеж.ID=Новый УникальныйИдентификатор;
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СтруктураКурса);
		КонецЦикла;		
		
	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
        ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.СтавкаНДС=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
		СтрокаПлатеж.СуммаПлатежа=Основание.СуммаДокумента;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, МодульВалютногоУчета.КурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата));

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику ИЛИ ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
			
			ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
			
			Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
				СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
				СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента;
				СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
				СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
				СтрокаПлатеж.ID=Новый УникальныйИдентификатор;				
			КонецЦикла;

			ДенежныеСредстваСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета,РасшифровкаПлатежа);

			Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
				СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
				СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа; 

				ДенежныеСредстваСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
			КонецЦикла;
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;

		Контрагент        = ДокументОснование.Контрагент;
		РасчетныйДокумент = ДокументОснование;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		Возврат;

	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		Возврат;

	Иначе
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		Возврат;
	КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		Контрагент=Основание.КассаККМ;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СтавкаНДС=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДенежныйЧек") Тогда
		ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;

		ДенежныйЧек=Основание.Ссылка;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;

	Если НЕ СтрокаПлатеж=Неопределено Тогда
		ДенежныеСредстваСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	Если ПринятоОт="" И ЗначениеЗаполнено(Контрагент) Тогда

		Если ДенежныеСредстваСервер.ЕстьВзаиморасчеты(ВидОперации) Тогда
			ПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			Запрос.Текст="
			|ВЫБРАТЬ
			|	ИсточникДанных.Фамилия КАК Фамилия,
			|	ИсточникДанных.Имя КАК Имя,
			|	ИсточникДанных.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ИсточникДанных
			|";
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
			КонецЕсли;

			Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
				ЭтотОбъект.Основание=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЭтотОбъект.Основание=Метаданные.НайтиПоТипу(ТипЗнч(ДокументОснование)).Синоним+" "+ОбщегоНазначенияСервер.НомерНаПечать(ДокументОснование)+" от "+Формат(ДокументОснование.Дата, "ДФ=dd.MM.yy");

	ОбработкаТабличныхЧастей.ЗаполнитьТиповыеОперации(ЭтотОбъект);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЧекПробитНаККМ=Ложь;
	НомерЧекаККМ=0;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;
	СтруктураТД.Вставить("Взаиморасчеты", ВзаиморасчетыСервер.СформироватьТаблицуОплаты(СтруктураШД, СтруктураТД, ВидДвиженияНакопления.Расход, Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки(), Отказ, ДополнительныеСвойства.Заголовок));

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();
	
	Если ДенежныеСредстваСервер.ЕстьВзаиморасчеты(ВидОперации) Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
	КонецЕсли;
	
	//Формируем структуру шапки документа "СтруктураШД"
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);
	СтруктураШД.Вставить("ПоДенежномуЧеку",?(ДенежныйЧек.Пустая(), Ложь, Истина));
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		Если НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Не совпадают валюты банковского счета и кассы"); Отказ=Истина; Возврат;
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("СчетОрганизации");

	ИначеЕсли НЕ(ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоЗаработнойПлате
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСПерсоналом) Тогда
		ПроверяемыеРеквизиты.Добавить("Контрагент");

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		Если НЕ Касса.ВалютаДенежныхСредств=ДополнительныеСвойства.ВалютаБухУчета Тогда
			Сообщить("Прием розничной выручки производится только в валюте регламентированного учета.");
			Отказ=Истина; Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(Контрагент)=Тип("СправочникСсылка.Контрагенты") И Контрагент.НеЯвляетсяРезидентом Тогда
		Сообщить("Проводить наличные расчеты с нерезидентами по данной Организации запрещено.");
		Отказ=Истина; Возврат;
	КонецЕсли;
	
	//Формируем структуру таблиц документа "СтруктураТД"
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("РасшифровкаПлатежа", ДенежныеСредстваСервер.СформироватьТаблицуПлатежей(ЭтотОбъект, Отказ, Заголовок));
	СтруктураТД.Вставить("ОплачиваемыеДокументы", ОплачиваемыеДокументы.Выгрузить());

	ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);