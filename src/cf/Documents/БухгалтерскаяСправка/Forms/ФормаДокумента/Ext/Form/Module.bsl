&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Функция ОднаСтрокаТОП(ТОП)
	Возврат ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТОП, "ПроводкиБУ").Выгрузить().Количество()=1; 
КонецФункции

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");

	Если Команда.Имя="Сортировать" Тогда
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли Команда.Имя="ЗаполнитьТОП" Тогда
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ОбработчикОповещения_Проводки_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Проводки.Очистить();
	КонецЕсли;

	тпПроводки_Заполнить(Параметр2.Команда, Параметр2.ТОП);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнениеПроводкиПоТОП(Параметр1, Параметр2) Экспорт
	Если Не ЗначениеЗаполнено(Параметр1) Тогда Возврат; КонецЕсли;

	Если НЕ Объект.Проводки.Количество()=0 Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_Проводки_Заполнить", ЭтотОбъект, Новый Структура("Команда,ТОП", Параметр2.Команда, Параметр1));
		ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
	Иначе
		тпПроводки_Заполнить(Параметр2.Команда, Параметр1);
	КонецЕсли;	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Дата" Тогда
		//УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);

	ИначеЕсли Элемент.Имя="Организация" Тогда
		//УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Проводки"

&НаКлиенте
Процедура кпПроводки_ВыполнитьДействие(Команда)
	Если Команда.Имя="ПроводкиЗаполнитьПоСчетуДебета" Или Команда.Имя="ПроводкиЗаполнитьПоСчетуКредита" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнениеПроводкиПоТОП", ЭтотОбъект, Новый Структура("Команда", Команда.Имя));
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);		
		ОткрытьФорму("Справочник.ТиповыеОперации.ФормаВыбора", ПараметрыФормы, ЭтаФорма,УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпПроводки_ПриАктивизацииСтроки(Элемент)
	Если Элементы.Проводки.ТекущаяСтрока=Неопределено Тогда Возврат; КонецЕсли;
	Если ПроводкиПриАктивизацииСтрокиВыполнено Тогда ПроводкиПриАктивизацииСтрокиВыполнено=Ложь; Возврат; КонецЕсли;
	Если Элементы.Проводки.ТекущиеДанные.ТОП.Пустая() Тогда Возврат; КонецЕсли; 
	тпПроводки_ПараметрыСубконто(Элементы.Проводки.ТекущаяСтрока);	
КонецПроцедуры

&НаКлиенте
Процедура тпПроводки_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПроводки_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Проводки", "");
	ТекущиеДанные=Элементы.Проводки.ТекущиеДанные;

	Если стрКолонка="ТОП" Тогда
		Если НЕ ОднаСтрокаТОП(ТекущиеДанные.ТОП) Тогда
			Сообщить("Ошибка настройки типовой операции <"+СокрЛП(ТекущиеДанные.ТОП)+">, количество проводок > 1");
		КонецЕсли;
		тпПроводки_ПараметрыСубконто(Элементы.Проводки.ТекущаяСтрока);

	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.СуммаНУ=ТекущиеДанные.Сумма; 
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура тпПроводки_Заполнить(стрКоманда, ТОП)
	Если стрКоманда="ПроводкиЗаполнитьПоСчетуДебета" Тогда
		Счет=ТОП.ПроводкиБУ[0].СчетДебет; стрДтКт="Дт";
	ИначеЕсли стрКоманда="ПроводкиЗаполнитьПоСчетуКредита" Тогда
		Счет=ТОП.ПроводкиБУ[0].СчетКредит; стрДтКт="Кт";		
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Субконто1 КАК Субконто"+стрДтКт+"1,
	|	ИсточникДанных.Субконто2 КАК Субконто"+стрДтКт+"2,
	|	ИсточникДанных.Субконто3 КАК Субконто"+стрДтКт+"3,
	|	ИсточникДанных.Подразделение КАК Подразделение"+стрДтКт+",
	|	ИсточникДанных.КоличествоОстаток КАК Количество,
	|	ИсточникДанных.СуммаОстаток КАК Сумма,
	|	ИсточникДанных.СуммаНУОстаток КАК СуммаНУ,
	|	ИсточникДанных.СуммаПРОстаток КАК СуммаПР,
	|	ИсточникДанных.СуммаВРОстаток КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет = &Счет, , Организация = &Организация) КАК ИсточникДанных
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока=Объект.Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ТОП=ТОП;		
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура тпПроводки_ПараметрыСубконто(ИндексСтоки)
	ПроводкиПриАктивизацииСтрокиВыполнено=Истина;

	ТекущиеДанные=Объект["Проводки"].НайтиПоИдентификатору(ИндексСтоки);

	//Субконто Дт
	СтруктураСубконто=Новый Структура;
	Для ъ=1 По 3 Цикл
		СтруктураСубконто.Вставить("ЗначениеСубконто"+СокрЛП(ъ), ТекущиеДанные["СубконтоДт"+СокрЛП(ъ)]);
		ЭлементСубконто=Элементы["ПроводкиСубконтоДт"+СокрЛП(ъ)];
		ЭлементСубконто.Доступность=Ложь;
	КонецЦикла;

	тзДанные=БухгалтерскийУчетСервер.ТаблицаСубконтоПоСчету(ТекущиеДанные.ТОП.ПроводкиБУ[0].СчетДебет, СтруктураСубконто);
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		ИндексСубконто=тзДанные.Индекс(СтрокаКоллекции)+1;
		ЭлементСубконто=Элементы["ПроводкиСубконтоДт"+ИндексСубконто];
		ЭлементСубконто.ОграничениеТипа=СтрокаКоллекции.ТипЗначения;
		ЭлементСубконто.ВыбиратьТип=ЭлементСубконто.ОграничениеТипа.Типы().Количество()>1;
		ЭлементСубконто.Заголовок=СокрЛП(СтрокаКоллекции.ВидСубконто);
		ЭлементСубконто.Доступность=Истина;
		ТекущиеДанные["СубконтоДт"+ИндексСубконто]=СтрокаКоллекции.Значение;
	КонецЦикла;

	//Субконто Кт
	СтруктураСубконто=Новый Структура;
	Для ъ=1 По 3 Цикл
		СтруктураСубконто.Вставить("ЗначениеСубконто"+СокрЛП(ъ), ТекущиеДанные["СубконтоКт"+СокрЛП(ъ)]);
		ЭлементСубконто=Элементы["ПроводкиСубконтоКт"+СокрЛП(ъ)];
		ЭлементСубконто.Доступность=Ложь;
	КонецЦикла;

	тзДанные=БухгалтерскийУчетСервер.ТаблицаСубконтоПоСчету(ТекущиеДанные.ТОП.ПроводкиБУ[0].СчетКредит, СтруктураСубконто);
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		ИндексСубконто=тзДанные.Индекс(СтрокаКоллекции)+1;
		ЭлементСубконто=Элементы["ПроводкиСубконтоКт"+ИндексСубконто];
		ЭлементСубконто.ОграничениеТипа=СтрокаКоллекции.ТипЗначения;
		ЭлементСубконто.ВыбиратьТип=ЭлементСубконто.ОграничениеТипа.Типы().Количество()>1;
		ЭлементСубконто.Заголовок=СокрЛП(СтрокаКоллекции.ВидСубконто);
		ЭлементСубконто.Доступность=Истина;
		ТекущиеДанные["СубконтоКт"+ИндексСубконто]=СтрокаКоллекции.Значение;
	КонецЦикла;	
КонецПроцедуры	 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры