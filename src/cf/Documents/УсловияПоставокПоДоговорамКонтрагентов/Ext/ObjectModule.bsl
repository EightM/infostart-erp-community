// Процедура проверяет нет ли пересекающихся интервалами документов с текущим.
//
Процедура ПроверитьПересекающиесяДокументы(Отказ, Заголовок)
	Если Отказ Тогда Возврат; КонецЕсли; 

	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("ТекущийДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Регистратор               КАК Регистратор,
	|	ИсточникДанных.Регистратор.ДатаНачала    КАК ДатаНачала,
	|	ИсточникДанных.Регистратор.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ДоговорКонтрагента = &ТекущийДоговорКонтрагента
	|	И ИсточникДанных.Номенклатура В (&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Регистратор,
	|	ИсточникДанных.Регистратор.ДатаНачала,
	|	ИсточникДанных.Регистратор.ДатаОкончания
	|";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	СтрокаДокументовПересечений = "";
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда // Без даты окончания
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда
				Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
				КонецЕсли; 
				СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			ИначеЕсли СтрокаТаблицы.ДатаОкончания > ДатаНачала Тогда
				Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
				КонецЕсли; 
				СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			КонецЕсли; 
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда 
				Если ДатаОкончания > СтрокаТаблицы.ДатаНачала Тогда
					Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
						СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
					КонецЕсли; 
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			ИначеЕсли (ДатаНачала >= СтрокаТаблицы.ДатаНачала И ДатаОкончания <= СтрокаТаблицы.ДатаОкончания)
				  ИЛИ (ДатаНачала <= СтрокаТаблицы.ДатаНачала И ДатаОкончания >= СтрокаТаблицы.ДатаОкончания)
				  ИЛИ (ДатаНачала <= СтрокаТаблицы.ДатаНачала И ДатаОкончания >= СтрокаТаблицы.ДатаНачала)
				  ИЛИ (ДатаНачала <= СтрокаТаблицы.ДатаОкончания И ДатаОкончания >= СтрокаТаблицы.ДатаОкончания) Тогда
					Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
						СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
					КонецЕсли; 
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(("Найдены условия поставок, которые уже действуют в выбранном периоде:" + Символы.ПС + СтрокаДокументовПересечений), Отказ, Заголовок);
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

// Проверяет дубли номенклатуры (разные строки с одинаковой номенклатурой) в товарах документа.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента - спозиционированная на определеной строке выборка 
//                              из результата запроса по товарам документа, 
//  Отказ                     - флаг отказа в проведении.
//
Процедура ПроверитьДублиНоменклатуры(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	Если ВыборкаПоСтрокамДокумента.КоличествоДублей > 1 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СокрЛП(ВыборкаПоСтрокамДокумента.Номенклатура) + ", " + СокрЛП(ВыборкаПоСтрокамДокумента.ХарактеристикаНоменклатуры) + """
			               |: дублей строк номенклатуры в этом документе быть не должно!", Отказ, Заголовок);
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(Отказ)
	ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре(Отказ);
	ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентов(Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре(Отказ)
	тзДвижения=Движения.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ВыгрузитьКолонки();

	//Товары
	Для каждого СтркаКоллекции Из Товары Цикл
		НоваяСтрока=тзДвижения.Добавить();
		НоваяСтрока.Период=НачалоДня(ДатаНачала);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтркаКоллекции);
		НоваяСтрока.ВалютаЦены=ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			НоваяСтрока=тзДвижения.Добавить();
			НоваяСтрока.Период=КонецДня(ДатаОкончания);
			НоваяСтрока.Номенклатура=СтркаКоллекции.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры=СтркаКоллекции.ХарактеристикаНоменклатуры;
			// Ресурсы (все пусто, т.к. условия с этой даты не действуют)
		КонецЕсли;
	КонецЦикла; 

	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	Движения.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УсловияПоставокПоДоговорамКонтрагентов(Отказ)
	тзДвижения=Движения.УсловияПоставокПоДоговорамКонтрагентов.ВыгрузитьКолонки();

	//Товары
	Для каждого СтркаКоллекции Из Товары Цикл
		НоваяСтрока=тзДвижения.Добавить();
		НоваяСтрока.Период=НачалоДня(ДатаНачала);
		НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Приход;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтркаКоллекции);

		//Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		//	НоваяСтрока=тзДвижения.Добавить();
		//	НоваяСтрока.Период=КонецДня(ДатаОкончания);
		//	НоваяСтрока.ВидДвижения=ВидДвиженияНакопления.Расход;
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтркаКоллекции);
		//КонецЕсли;
	КонецЦикла; 

	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	Движения.УсловияПоставокПоДоговорамКонтрагентов.Загрузить(тзДвижения);	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	ПроверитьПересекающиесяДокументы(Отказ, ДополнительныеСвойства.Заголовок);
	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	СуммаДокумента=Товары.Итог("Сумма");

	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	Если ЗначениеЗаполнено(Периодичность) И ДатаОкончания <> '00010101' Тогда
		РасчетнаяДатаКонца = ОбщегоНазначения.ПолучитьДатуНачалаПериодаПоДатеОкончанияКоличествуПериодов(ДатаНачала, Периодичность, -1);
		Если РасчетнаяДатаКонца > КонецДня(ДатаОкончания) Тогда
			стрСообщение="Некорректная дата окончания, не будет закончен хотя бы один период с указанной периодичностью!";
			Отказ=Истина; ОбщегоНазначения.СообщитьОбОшибке(стрСообщение, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Договор
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран договор контрагента в документе!", Отказ, Заголовок);
	Иначе
		Если НЕ ДоговорКонтрагента.ДопУсловияДоговора Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В договоре взаиморасчетов не указан признак ведения договора с дополнительными условиями поставок !", Отказ, Заголовок);
		КонецЕсли; 
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка()
		 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Вид договора взаиморасчетов может быть только ""С поставщиком"" или ""С покупателем"" !", Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;
			
	// Даты начала и окончания
	Если ЗначениеЗаполнено(ДатаОкончания) И ДатаОкончания < ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата окончания не может быть меньше даты начала!", Отказ, Заголовок);
	КонецЕсли;	

	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);