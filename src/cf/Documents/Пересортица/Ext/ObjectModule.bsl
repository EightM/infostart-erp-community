Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	СуммаДокумента=Товары.Итог("Сумма");

	Для Каждого СтрокаКоллекции Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.КачествоПриход) Тогда
			СтрокаКоллекции.КачествоПриход=Справочники.Качество.Новый;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.КачествоРасход) Тогда
			СтрокаКоллекции.КачествоРасход=Справочники.Качество.Новый;
		КонецЕсли;
	КонецЦикла;	

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка таблиц для проведения

Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти="")
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("Регистратор", Ссылка);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
		тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
	КонецЦикла;	
КонецПроцедуры
 
Функция СформироватьТаблицу_ТоварыРасход(СтруктураШД, Отказ, Заголовок)
	тзДанные=Товары.Выгрузить();
	тзДанные.Колонки.НоменклатураРасход.Имя="Номенклатура";
	тзДанные.Колонки.ХарактеристикаНоменклатурыРасход.Имя="ХарактеристикаНоменклатуры";
	тзДанные.Колонки.СерияНоменклатурыРасход.Имя="СерияНоменклатуры";
	тзДанные.Колонки.ЕдиницаИзмеренияРасход.Имя="ЕдиницаИзмерения";
	тзДанные.Колонки.КачествоРасход.Имя="Качество";
	тзДанные.Колонки.СебестоимостьРасходУУ.Имя="СебестоимостьУУ";
	тзДанные.Колонки.СебестоимостьРасходНУ.Имя="СебестоимостьНУ";
	тзДанные.Колонки.КоличествоРасход.Имя="Количество";
	тзДанные.Колонки.КоэффициентРасход.Имя="Коэффициент";

	тзДанные.Колонки.Добавить("Услуга");
	//тзДанные.Колонки.Добавить("Набор");
	//тзДанные.Колонки.Добавить("Комплект");
	тзДанные.Колонки.Добавить("ВестиУчетПоХарактеристикам");
	тзДанные.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
	тзДанные.Колонки.Добавить("Стоимость");
	тзДанные.Колонки.Добавить("СтоимостьНУ");
	тзДанные.Колонки.Добавить("КоличествоДок");
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");

	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.КоличествоДок=СтрокаКоллекции.Количество;
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество * СтрокаКоллекции.Коэффициент/СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.Услуга=СтрокаКоллекции.Номенклатура.Услуга;
		//СтрокаКоллекции.Набор=СтрокаКоллекции.Номенклатура.Набор;
		//СтрокаКоллекции.Комплект=СтрокаКоллекции.Номенклатура.Комплект;
		СтрокаКоллекции.ВестиУчетПоХарактеристикам=СтрокаКоллекции.Номенклатура.ВестиУчетПоХарактеристикам;
		СтрокаКоллекции.ВестиПартионныйУчетПоСериям=СтрокаКоллекции.Номенклатура.ВестиПартионныйУчетПоСериям;
		СтрокаКоллекции.Стоимость=СтрокаКоллекции.СебестоимостьУУ;
		СтрокаКоллекции.СтоимостьНУ=СтрокаКоллекции.СебестоимостьНУ;
	КонецЦикла;

	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Товары");

	ВзаиморасчетыСервер.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(тзДанные, СтруктураШД, Ложь);

	Возврат тзДанные;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);
	//ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ)
	//Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетПотребностей") Тогда Возврат; КонецЕсли;

	//тзТМЦ=Новый ТаблицаЗначений;
	//тзТМЦ.Колонки.Добавить("Склад");
	//тзТМЦ.Колонки.Добавить("Номенклатура");
	//тзТМЦ.Колонки.Добавить("ХарактеристикаНоменклатуры");
	//тзТМЦ.Колонки.Добавить("Количество");
	//тзТМЦ.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	//тзТМЦ.Колонки.Добавить("ВидТабличнойЧасти");

	//МассивСерийНоменклатуры=Новый Массив;	
	//МассивХарактеристикНоменклатуры=Новый Массив;	
	//МассивТоваров=Новый Массив;

	//Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
	//	ЗаполнитьЗначенияСвойств(тзТМЦ.Добавить(), СтрокаКоллекции);
	//	Если ЗначениеЗаполнено(СтрокаКоллекции.ХарактеристикаНоменклатуры) Тогда
	//		МассивХарактеристикНоменклатуры.Добавить(СтрокаКоллекции.ХарактеристикаНоменклатуры);
	//	КонецЕсли;
	//	МассивТоваров.Добавить(СтрокаКоллекции.Номенклатура);
	//КонецЦикла;

	//стрУсловие="Организация = Организация И Склад = &Склад И Номенклатура В (&Номенклатура)";
	//Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
	//	МассивХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	//	стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	//КонецЕсли;
	//Если НЕ Сделки.Количество()=0 Тогда
	//	стрУсловие=стрУсловие+" И ДокументРезерва В (&Сделка)";
	//КонецЕсли;
	//ОрганизацияСсылка=Организация;

	//Запрос=Новый Запрос;
	//Запрос.УстановитьПараметр("НаДату", МоментВремени());
	//Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	//Запрос.УстановитьПараметр("Склад", Склад);
	//Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	//Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	//Запрос.УстановитьПараметр("Сделка", Сделки.ВыгрузитьКолонку("Сделка"));	
	//Запрос.Текст="
	//|ВЫБРАТЬ
	//|	ИсточникДанных1.Номенклатура,
	//|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	//|	ИсточникДанных1.ДокументРезерва,
	//|	СУММА(ИсточникДанных1.КоличествоОстаток) КАК Количество
	//|ИЗ
	//|	РегистрНакопления.УчетПотребностей.Остатки(&НаДату, "+стрУсловие+") КАК ИсточникДанных1
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ИсточникДанных1.Номенклатура,
	//|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	//|	ИсточникДанных1.ДокументРезерва
	//|";
	//тзОстаткиПоСделкам=Запрос.Выполнить().Выгрузить();
	//Если тзОстаткиПоСделкам.Количество()=0 Тогда Возврат; КонецЕсли;

	////Отсортируем сделки по порядку списания
	//Если Сделки.Количество()>0 Тогда
	//	тзОстаткиПоСделкам.Колонки.Добавить("ПорядковыйНомер");
	//	Для каждого СтрокаКоллекции Из Сделки Цикл
	//		РезультатПоиска=тзОстаткиПоСделкам.Найти(СтрокаКоллекции.Сделка, "ДокументРезерва");
	//		Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
	//		РезультатПоиска.ПорядковыйНомер=Сделки.Индекс(СтрокаКоллекции);
	//	КонецЦикла;
	//	тзОстаткиПоСделкам.Сортировать("ПорядковыйНомер Возвр");
	//КонецЕсли;

	//тзДвижения=Движения.УчетПотребностей.ВыгрузитьКолонки();

	//СтруктураОтбора=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	//Для каждого СтрокаКоллекции1 Из тзТМЦ Цикл
	//	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКоллекции1);
	//	МассивСтрок=тзОстаткиПоСделкам.НайтиСтроки(СтруктураОтбора);
	//	Для каждого СтрокаКоллекции2 Из МассивСтрок Цикл
	//		текКоличество=Мин(СтрокаКоллекции2.Количество, СтрокаКоллекции1.Количество);
	//		Если текКоличество<=0 Или СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
	//		СтрокаКоллекции1.Количество=СтрокаКоллекции1.Количество-текКоличество;
	//        СтрокаКоллекции2.Количество=СтрокаКоллекции2.Количество-текКоличество;

	//		НоваяСтрока=тзДвижения.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
	//		НоваяСтрока.ДокументРезерва=СтрокаКоллекции2.ДокументРезерва;
	//		НоваяСтрока.Количество=текКоличество;			
	//	КонецЦикла;
	//КонецЦикла; 

	//тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	//тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	//тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	//тзДвижения.ЗаполнитьЗначения(ОрганизацияСсылка, "Организация");
	//тзДвижения.ЗаполнитьЗначения(Склад, "Склад");
	//тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	//Движения.УчетПотребностей.Загрузить(тзДвижения);
	//
	////Учет резервов ТМЦ
	//Если Константы.УчетРезервов.Получить() Тогда
	//	тзДвижения.Колонки.ДокументРезерва.Имя="Заказ";
	//	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	//	Движения.УчетРезервовТМЦ.Загрузить(тзДвижения);
	//КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ)
	тзДанные=Движения.СписанныеТовары.ВыгрузитьКолонки();

	НомерСтрокиДокумента=0;
	Для каждого СтрокаКоллекции Из СтруктураТД.ТоварыРасход Цикл
		НомерСтрокиДокумента=НомерСтрокиДокумента+1;
		НоваяСтрока=тзДанные.Добавить();
		НоваяСтрока.НомерСтрокиДокумента=НомерСтрокиДокумента;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);		
		НоваяСтрока.НоменклатураНовая=СтрокаКоллекции.НоменклатураПриход;
		НоваяСтрока.ХарактеристикаНоменклатурыНовая=СтрокаКоллекции.ХарактеристикаНоменклатурыПриход;
		НоваяСтрока.СерияНоменклатурыНовая=СтрокаКоллекции.СерияНоменклатурыПриход;
		НоваяСтрока.КачествоНовое=СтрокаКоллекции.КачествоПриход;
		НоваяСтрока.КоличествоПоступление=СтрокаКоллекции.КоличествоПриход;
		НоваяСтрока.СтоимостьСписаниеУУ=СтрокаКоллекции.СебестоимостьУУ;
		НоваяСтрока.СтоимостьСписаниеНУ=СтрокаКоллекции.СебестоимостьНУ;
		НоваяСтрока.СтоимостьПоступление=СтрокаКоллекции.СебестоимостьПриходУУ;
		НоваяСтрока.СтоимостьПоступлениеНУ=СтрокаКоллекции.СебестоимостьПриходНУ;
	КонецЦикла; 

	тзДанные.ЗаполнитьЗначения(Ссылка, "ДокументОприходованияНовый");
	тзДанные.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");
	тзДанные.ЗаполнитьЗначения(Склад, "Склад");
	тзДанные.ЗаполнитьЗначения(Склад, "СкладПолучатель");
	тзДанные.ЗаполнитьЗначения(Дата,   "Период");
	тзДанные.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДанные.ЗаполнитьЗначения(Истина, "Активность");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,   "ДопустимыйСтатус3");
	тзДанные.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");
	тзДанные.ЗаполнитьЗначения(Организация, "Организация");

	Движения.СписанныеТовары.Загрузить(тзДанные);
    Движения.СписанныеТовары.Записать(Истина);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;

	СтруктураШД.Вставить("Отказ", Отказ);
	СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 	

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);

	//Проверка реквизитов
	//Если СтруктураШД.ВидСклада=Перечисления.ВидыСкладов.Розничный И Не ДополнительныеСвойства.РазрешитьНулевыеЦеныВРознице Тогда
	//	ПроверяемыеРеквизиты.Добавить("Товары.ЦенаВРознице");
	//КонецЕсли;
	УправлениеЗапасами.КорректировкаМассиваОбязательныхПолей(ЭтотОбъект, "Товары", ПроверяемыеРеквизиты, СтруктураШД.ВидСклада);

	//Формирование значений реквизитов табличных частей
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("ТоварыРасход", СформироватьТаблицу_ТоварыРасход(СтруктураШД, Отказ, Заголовок));
	//СтруктураТД.Вставить("ТоварыПриход", СформироватьТаблицу_Товары(СтруктураШД, Отказ, Заголовок));
	
	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);