&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент()
	Если Объект.СчетТЗР.Пустая() Тогда ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан счет ТЗР",,"Объект.СчетТЗР"); Возврат; КонецЕсли;
	Если Объект.СчетаЗатрат.Количество()=0 Тогда ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указаны счета затрат",,Объект.СчетаЗатрат); Возврат; КонецЕсли;
	Если Объект.СчетаУчетаМатериалов.Количество()=0 Тогда ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указаны счета учета",,Объект.СчетаУчетаМатериалов); Возврат; КонецЕсли;
	Объект.Проводки.Очистить(); Объект.Товары.Очистить();
	
	Если Объект.Масштаб.Пустая() Тогда
		Объект.Масштаб=ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	КонецЕсли; 
	Если Объект.Масштаб=ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		ПериодС=НачалоДня(НачалоМесяца(Объект.Дата));
		ПериодПо=КонецДня(КонецМесяца(Объект.Дата));
	ИначеЕсли Объект.Масштаб=ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		ПериодС=НачалоДня(НачалоКвартала(Объект.Дата));
		ПериодПо=КонецДня(КонецКвартала(Объект.Дата));
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодС);
	Запрос.УстановитьПараметр("ДатаКонца", ПериодПо);
	Запрос.УстановитьПараметр("Счет", Объект.СчетТЗР);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Счет,
	|	ИсточникДанных.Субконто1 Как Номенклатура,
	|	ИсточникДанных.СуммаНачальныйОстатокДт Как ОстатокНаНачало,
	|	ИсточникДанных.СуммаОборотДт Как Приход
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца) КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Счет В ИЕРАРХИИ(&Счет) И ИсточникДанных.Организация = (&Организация)
	|";
	тзОстаткиТЗР=Запрос.Выполнить().Выгрузить();
	Если тзОстаткиТЗР.Количество()=0 Тогда Возврат; КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодС);
	Запрос.УстановитьПараметр("ДатаКонца", ПериодПо);
	Запрос.УстановитьПараметр("МассивСчетаУчетаМатериалов", Объект.СчетаУчетаМатериалов.Выгрузить(, "Счет").ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("МассивСчетаУчетаПоставщиков", Объект.СчетаУчетаПоставщиков.Выгрузить(, "Счет").ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("МассивСчетаЗатрат", Объект.СчетаЗатрат.Выгрузить(, "Счет").ВыгрузитьКолонку("Счет"));
	
	Для Каждого СтрокаКоллекции Из тзОстаткиТЗР Цикл
		Запрос.УстановитьПараметр("Номенклатура", СтрокаКоллекции.Номенклатура);
		//Приход
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.СчетДт,
		|	ИсточникДанных.СубконтоДт1 Как Номенклатура,
		|	ИсточникДанных.СуммаОборот Как Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНачала, &ДатаКонца) КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.СчетДт В Иерархии (&МассивСчетаУчетаМатериалов)
		|	И ИсточникДанных.СчетКт В Иерархии (&МассивСчетаУчетаПоставщиков)
		|	И ИсточникДанных.СубконтоДт1 = (&Номенклатура)
		|	И ИсточникДанных.Организация = (&Организация)
		|";
		тзПриход=Запрос.Выполнить().Выгрузить();
		
		//Расход
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.ПодразделениеДт Как Подразделение,
		|	ИсточникДанных.СчетДт Как Счет,
		|	ИсточникДанных.СубконтоДт1 Как Субконто1,
		|	ИсточникДанных.СубконтоДт2 Как Субконто2,
		|	ИсточникДанных.СубконтоДт3 Как Субконто3,
		|	ИсточникДанных.СчетКт,
		|	ИсточникДанных.СубконтоКт1 Как Номенклатура,
		|	ИсточникДанных.СуммаОборот Как Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНачала, &ДатаКонца) КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.СчетДт В ИЕРАРХИИ (&МассивСчетаЗатрат)
		|	И ИсточникДанных.СчетКт В ИЕРАРХИИ (&МассивСчетаУчетаМатериалов)
		|	И ИсточникДанных.СубконтоКт1 = (&Номенклатура)
		|	И ИсточникДанных.Организация = (&Организация)
		|";
		тзРасход=Запрос.Выполнить().Выгрузить();
		
		//Остатки
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Счет,
		|	ИсточникДанных.Субконто1 Как Номенклатура,
		|	ИсточникДанных.СуммаОстаток Как Остаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНачала) КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Счет В ИЕРАРХИИ (&МассивСчетаУчетаМатериалов)
		|	И ИсточникДанных.Субконто1 = (&Номенклатура)
		|	И ИсточникДанных.Организация = (&Организация)
		|";
		тзОстатки=Запрос.Выполнить().Выгрузить();
		
		Итого=тзОстатки.Итог("Остаток")+тзПриход.Итог("Сумма");
		ПроцентТЗР=?(Итого=0, 0, тзРасход.Итог("Сумма")/Итого*100);
		
		СуммаСписанияТЗР=(СтрокаКоллекции.ОстатокНаНачало+СтрокаКоллекции.Приход)*ПроцентТЗР/100;
		
		НоваяСтрока=Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура=СтрокаКоллекции.Номенклатура;
		НоваяСтрока.ОстатокНаНачалоТЗР=СтрокаКоллекции.ОстатокНаНачало;
		НоваяСтрока.ПриходТЗР=СтрокаКоллекции.Приход;
		НоваяСтрока.РасходТЗР=СуммаСписанияТЗР;
		НоваяСтрока.ОстатокНаКонецТЗР=НоваяСтрока.ОстатокНаНачалоТЗР+НоваяСтрока.ПриходТЗР-НоваяСтрока.РасходТЗР;
		НоваяСтрока.ПроцентТЗР=ПроцентТЗР;
		
		НоваяСтрока.ОстатокНаНачало=тзОстатки.Итог("Остаток");
		НоваяСтрока.Приход=тзПриход.Итог("Сумма");
		НоваяСтрока.Расход=тзРасход.Итог("Сумма");
		НоваяСтрока.ОстатокНаКонец=НоваяСтрока.ОстатокНаНачало+НоваяСтрока.Приход-НоваяСтрока.Расход;
		
		УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(тзРасход, СуммаСписанияТЗР, "Сумма", 1);
		
		Для каждого СтрокаКоллекции1 Из тзРасход Цикл
			НоваяСтрока=Объект.Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.СуммаНУ=НоваяСтрока.Сумма;
		КонецЦикла; 
	КонецЦикла;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура АтрибутФормы_ПриИзменении(Элемент)
	Если Элемент.Имя="Дата" Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Регулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.Имя="Период" Тогда
		Объект.Дата=ДобавитьМесяц(Объект.Дата, Направление);
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если стрКоманда="ЗаполнитьДокумент" Тогда
		ЗаполнитьДокумент();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Проводки"

&НаКлиенте
Процедура тпПроводки_ПриАктивизацииСтроки(Элемент)
	Если Элементы.Проводки.ТекущаяСтрока=Неопределено Тогда Возврат; КонецЕсли;
	Если ПроводкиПриАктивизацииСтрокиВыполнено Тогда ПроводкиПриАктивизацииСтрокиВыполнено=Ложь; Возврат; КонецЕсли;
	Если Элементы.Проводки.ТекущиеДанные.Счет.Пустая() Тогда Возврат; КонецЕсли; 
	тпПроводки_ПараметрыСубконто(Элементы.Проводки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура тпПроводки_Колонка_ПриИзменении(Элемент) Экспорт
	стрКолонка=стрЗаменить(Элемент.Имя, "Проводки", "");
	Если стрКолонка="Счет" Тогда
		тпПроводки_ПараметрыСубконто(Элементы.Проводки.ТекущаяСтрока);
	КонецЕСли;
КонецПроцедуры

&НаСервере
Процедура тпПроводки_ПараметрыСубконто(ИндексСтоки)
	ТекущиеДанные=Объект["Проводки"].НайтиПоИдентификатору(ИндексСтоки);
	
	СтруктураСубконто=Новый Структура;
	Для ъ=1 По 3 Цикл
		СтруктураСубконто.Вставить("ЗначениеСубконто"+СокрЛП(ъ), ТекущиеДанные["Субконто"+СокрЛП(ъ)]);
		ЭлементСубконто=Элементы["ПроводкиСубконто"+СокрЛП(ъ)];
		ЭлементСубконто.Доступность=Ложь;
	КонецЦикла;

	тзДанные=БухгалтерскийУчетСервер.ТаблицаСубконтоПоСчету(ТекущиеДанные["Счет"], СтруктураСубконто);
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		ИндексСубконто=тзДанные.Индекс(СтрокаКоллекции)+1;
		ЭлементСубконто=Элементы["ПроводкиСубконто"+ИндексСубконто];
		ЭлементСубконто.ОграничениеТипа=СтрокаКоллекции.ТипЗначения;
		ЭлементСубконто.ВыбиратьТип=ЭлементСубконто.ОграничениеТипа.Типы().Количество()>1;
		ЭлементСубконто.Заголовок=СокрЛП(СтрокаКоллекции.ВидСубконто);
		ЭлементСубконто.Доступность=Истина;
		ТекущиеДанные["Субконто"+ИндексСубконто]=СтрокаКоллекции.Значение;
	КонецЦикла;

	ПроводкиПриАктивизацииСтрокиВыполнено=Истина;
КонецПроцедуры	 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры