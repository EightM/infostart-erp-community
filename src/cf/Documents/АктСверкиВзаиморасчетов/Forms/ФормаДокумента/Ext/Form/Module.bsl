&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	Объект.ВидОперации=стрЗаменить(Команда.Имя, "Операция_", "");
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	Элементы.СтраницаСчетаУчета.Видимость=Объект.ВидОперации="БУ";
	стрПоДаннымУчета=?(Объект.ВидОперации="БУ", "бухгалтерского", "управленческого")+" учета";
	Элементы.Документ.Заголовок="Акт сверки взаиморасчетов (по данным "+стрПоДаннымУчета+")";
	Элементы.ПоДаннымОрганизацииТараНоменклатура.Видимость=Объект.ПоказатьТару;
	
	СверкаСогласована=Объект.СверкаСогласована;
	Элементы.Контрагент.Доступность       	= НЕ СверкаСогласована;
	Элементы.ДоговорКонтрагента.Доступность	= НЕ СверкаСогласована;
	Элементы.ВалютаСвертки.Доступность 		= НЕ СверкаСогласована;
	Элементы.Ответственный.Доступность 		= НЕ СверкаСогласована;
	Элементы.ПредставительОрганизации.Доступность = НЕ СверкаСогласована;
	Элементы.ПредставительКонтрагента.Доступность = НЕ СверкаСогласована;
	Элементы.кпСчетаУчета_ЗаполнитьПоУмолчанию.Доступность = НЕ СверкаСогласована;
	Элементы.кпСчетаУчета_ЗаполнитьПоУмолчаниюТара.Доступность = НЕ СверкаСогласована;
	
	
	//Элементы.ОстатокНаНачало.Доступность   	= НЕ СверкаСогласована;
	Элементы.ДатаНачала.Доступность 		= НЕ СверкаСогласована;
	Элементы.ДатаОкончания.Доступность 		= НЕ СверкаСогласована;	
	Элементы.Организация.Доступность 		= НЕ СверкаСогласована;
	Элементы.СтраницаПоДаннымКонтрагента.ТолькоПросмотр = СверкаСогласована;
	Элементы.СтраницаПоДаннымОрганизации.ТолькоПросмотр = СверкаСогласована;
	Элементы.СтраницаПоДаннымОрганизацииТара.ТолькоПросмотр = СверкаСогласована;
	Элементы.СтраницаСчетаУчета.ТолькоПросмотр = СверкаСогласована;

	Элементы.ПоДаннымОрганизацииТараНоменклатура.Видимость=Объект.ПоказатьТару;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОстатки()
	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") - Объект.ПоДаннымОрганизации.Итог("Кредит");

	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	ОстатокНаКонецКонтрагент = - Объект.ОстатокНаНачало + Объект.ПоДаннымКонтрагента.Итог("Дебет") -  Объект.ПоДаннымКонтрагента.Итог("Кредит");

	Если Объект.ПоДаннымКонтрагента.Количество()=0 Тогда
		Расхождение=ОстатокНаКонец;
	Иначе
		Если Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
			Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
		КонецЕсли; 
	КонецЕсли;
	
	РасхождениеКонтрагент = Расхождение*(-1);
	Объект.СуммаДокумента=ОстатокНаКонец;

	ОстатокНаКонецТара = Объект.ОстатокНаНачалоТара+Объект.ПоДаннымОрганизацииТара.Итог("Дебет") -  Объект.ПоДаннымОрганизацииТара.Итог("Кредит");	
	Если НЕ РасхождениеТара=ОстатокНаКонецТара Тогда
		РасхождениеТара = ОстатокНаКонецТара;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СписокДоговоров()
	сзДоговоры=Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		сзДоговоры.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат сзДоговоры;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ВыборДоговоров(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	МассивДоговоров=Новый Массив;
	Для каждого СтрокаКоллекции Из Параметр1 Цикл
		Если НЕ СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли;
		МассивДоговоров.Добавить(СтрокаКоллекции.Значение);
	КонецЦикла;
	Если МассивДоговоров.Количество()=0 Тогда Возврат; КонецЕсли;

	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		Параметр2.Вставить("МассивДоговоров", МассивДоговоров);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ПоДаннымОрганизации_Заполнить", ЭтотОбъект, Параметр2), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Иначе
		кпПоДаннымОрганизации_Заполнить(Параметр2.Команда, МассивДоговоров);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ПоДаннымОрганизации_Заполнить(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	Объект.ПоДаннымОрганизации.Очистить();
	кпПоДаннымОрганизации_Заполнить(Параметр2.Команда, Параметр2.МассивДоговоров);
КонецПроцедуры	 

&НаКлиенте
Процедура ОбработчикОповещения_ПоДаннымКонтрагента_Заполнить(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	Объект.ПоДаннымКонтрагента.Очистить();
	кпПоДаннымКонтрагента_Заполнить(Параметр2.Команда);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_СчетаУчета_ЗаполнитьПоУмолчанию(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	Объект[Параметр2.ТабличнаяЧасть].Очистить();
	тпСчетаУчета_ЗаполнитьПоУмолчанию(Параметр2.ТабличнаяЧасть);
КонецПроцедуры	 

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");		

	ИначеЕсли Элемент.Имя="ОстатокНаНачало" Тогда
		ПересчитатьОстатки();
		
	ИначеЕсли Элемент.Имя="СверкаСогласована" Тогда
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="ПоказатьТару" Тогда
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", Неопределено);

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);
	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);

	Если Элемент.Имя="ДоговорКонтрагента" Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ВалютаВзаиморасчетов=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если НЕ Объект.ВалютаДокумента=ВалютаВзаиморасчетов Тогда
				Объект.ВалютаДокумента=ВалютаВзаиморасчетов;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "По данным организации"

&НаКлиенте
Процедура кпПоДаннымОрганизации_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ПоДаннымОрганизации"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");		

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран контрагент!",,"Объект.Контрагент");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана валюта документа!",,"Объект.ВалютаДокумента");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана дата окончания периода сверки!",,"Объект.ДатаОкончания");
		Возврат;
	КонецЕсли;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неверно задан период сверки расчетов!!",,"Объект.ДатаОкончания");
		Возврат;
	КонецЕсли;

	СтруктураДопПараметров=Новый Структура;
	СтруктураДопПараметров.Вставить("Команда", стрКоманда);
	
	Если стрКоманда="ЗаполнитьПоСпискуДоговоров" Тогда
		сзДоговоры=СписокДоговоров();
		Если сзДоговоры.Количество()=0 Тогда Возврат; КонецЕсли;
		сзДоговоры.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборДоговоров", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Выберите договоры");
		Возврат;		
	КонецЕсли;

	СтруктураДопПараметров.Вставить("МассивДоговоров", Неопределено);

	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ПоДаннымОрганизации_Заполнить", ЭтотОбъект, СтруктураДопПараметров), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	Иначе
		кпПоДаннымОрганизации_Заполнить(стрКоманда); ПересчитатьОстатки();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура кпПоДаннымОрганизации_Заполнить(Команда, МассивДоговоров=Неопределено)
	ТекущийОбъект=РеквизитФормыВЗначение("Объект");

	Если Объект.ВидОперации="БУ" Тогда
		ФильтрСчетаУчета=Новый массив();
		Для каждого СтрокаСчета Из Объект.СчетаУчета Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) Или НЕ СтрокаСчета.УчаствуетВРасчетах Тогда
				Продолжить;
			КонецЕсли; 
			ФильтрСчетаУчета.Добавить(СтрокаСчета.Счет);
		КонецЦикла;		
		Если ФильтрСчетаУчета.Количество()=0 Тогда
			Сообщить("Неверно задан список счетов, по которым производится сверка!");
			Возврат;
		КонецЕсли;
		ТекущийОбъект.ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСчетаУчета, МассивДоговоров, Команда="ЗаполнитьПоДаннымУчетаПоВсемОрганизациям");
	Иначе
		ТекущийОбъект.ЗаполнитьПоДаннымУправленческогоУчета(МассивДоговоров, Команда="ЗаполнитьПоДаннымУчетаПоВсемОрганизациям");
	КонецЕсли;

	ТекущийОбъект.ПоДаннымОрганизации.Сортировать("Дата возр");
	ТекущийОбъект.ПоДаннымКонтрагента.Сортировать("Дата возр");

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура тпПоДаннымОрганизации_ПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

&НаКлиенте
Процедура тпПоДаннымОрганизации_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьОстатки();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "По данным контрагента"

&НаКлиенте
Процедура кпПоДаннымКонтрагента_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ПоДаннымКонтрагента"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	
	Если стрКоманда="ЗаполнитьПоДаннымОрганизации" Тогда
		Если Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ПоДаннымКонтрагента_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			кпПоДаннымКонтрагента_Заполнить(стрКоманда); ПересчитатьОстатки();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура кпПоДаннымКонтрагента_Заполнить(стрКоманда)
	Для каждого СтрокаКоллекции Из Объект.ПоДаннымОрганизации Цикл
		НоваяСтрока=Объект.ПоДаннымКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Дебет=СтрокаКоллекции.Кредит;
		НоваяСтрока.Кредит=СтрокаКоллекции.Дебет;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпПоДаннымКонтрагента_ПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

&НаКлиенте
Процедура тпПоДаннымКонтрагента_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьОстатки();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "По данным организации (тара)"

&НаКлиенте
Процедура кпПоДаннымОрганизацииТара_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ПоДаннымОрганизацииТара"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если стрКоманда="ЗаполнитьПоДаннымУчетаТара" Тогда
		Если Объект.ПоДаннымОрганизацииТара.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ПоДаннымОрганизацииТара_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			кпПоДаннымОрганизацииТара_Заполнить(стрКоманда); ПересчитатьОстатки();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ПоДаннымОрганизацииТара_Заполнить(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	Объект.ПоДаннымОрганизацииТара.Очистить();
	кпПоДаннымОрганизацииТара_Заполнить(Параметр2.Команда); ПересчитатьОстатки();
КонецПроцедуры

&НаСервере
Процедура кпПоДаннымОрганизацииТара_Заполнить(Команда)
	ТекущийОбъект=РеквизитФормыВЗначение("Объект");

	Если Объект.ВидОперации="БУ" Тогда
		ФильтрСчетаУчета=Новый массив();
		Для каждого СтрокаСчета Из Объект.СчетаУчетаТара Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) Или НЕ СтрокаСчета.УчаствуетВРасчетах Тогда
				Продолжить;
			КонецЕсли; 
			ФильтрСчетаУчета.Добавить(СтрокаСчета.Счет);
		КонецЦикла;		
		Если ФильтрСчетаУчета.Количество()=0 Тогда
			Сообщить("Неверно задан список счетов, по которым производится сверка!");
			Возврат;
		КонецЕсли;
		ТекущийОбъект.ЗаполнитьПоДаннымБухгалтерскогоУчетаТара(ФильтрСчетаУчета);
	Иначе
		ТекущийОбъект.ЗаполнитьПоДаннымУправленческогоУчетаТара();
	КонецЕсли;

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура тпПоДаннымОрганизацииТара_ПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

&НаКлиенте
Процедура тпПоДаннымОрганизацииТара_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьОстатки();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Счета учета"

&НаКлиенте
Процедура кпСчетаУчета_ВыполнитьДействие(Команда)
	тпСчетаУчета_ЗаполнитьПоУмолчанию(?(Команда.Имя="кпСчетаУчета_ЗаполнитьПоУмолчанию", "СчетаУчета", "СчетаУчетаТара"));
КонецПроцедуры

&НаКлиенте
Процедура тпСчетаУчета_ЗаполнитьПоУмолчанию(стрТабличнаяЧасть)
	Если НЕ Объект[стрТабличнаяЧасть].Количество()=0 Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_СчетаУчета_ЗаполнитьПоУмолчанию", ЭтотОбъект, Новый Структура("ТабличнаяЧасть", стрТабличнаяЧасть));
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет, "Внимание", КодВозвратаДиалога.Нет);
	Иначе		
		МассивСчетов=Новый Массив();
		Если стрТабличнаяЧасть="СчетаУчета" Тогда
			МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками"));
			МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками"));
			МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам"));
			МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам"));
			МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами"));
		Иначе //Тара
			МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами"));
		КонецЕсли; 	
		Для каждого СчетУчета Из МассивСчетов Цикл
			НоваяСтрока=Объект[стрТабличнаяЧасть].Добавить();
			НоваяСтрока.Счет=СчетУчета;
			НоваяСтрока.УчаствуетВРасчетах=Истина;
		КонецЦикла;	 		
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	ПересчитатьОстатки();
	УстановитьВидимостьЭлементовФормы();

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
