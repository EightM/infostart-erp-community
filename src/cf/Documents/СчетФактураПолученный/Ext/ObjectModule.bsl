Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

Процедура УстановитьКодВидаОперации()
	Если НЕ ПустаяСтрока(КодВидаОперации) Тогда Возврат; КонецЕсли; 
	КодВидаОперации="01";
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		КодВидаОперации="02";
	//ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	//	КодВидаОперации="03";
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаАванс(ДокументЗаполнен) Экспорт
	Если ДокументыОснования.Количество() = 0 Тогда Возврат; КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Поставщик КАК Контрагент,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента,
	//*** |	ИсточникДанных.ВалютаРасчетов,
	|	СУММА(ИсточникДанных.Сумма) КАК СуммаДокумента
	//*** |	СУММА(ИсточникДанных.ВалютнаяСумма) КАК ВалютнаяСумма
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПоставщиками КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Регистратор = &ДокументОснование
	|	И ИсточникДанных.Документ = &ДокументОснование
	|	И ИсточникДанных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ИсточникДанных.РасчетыСБюджетом = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Поставщик,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	//***|	ИсточникДанных.ВалютаРасчетов
	|";
	Результат=Запрос.Выполнить().Выгрузить();
	
	СоответствиеСтавок=Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	
	ОшибкаПриЗаполнении = Ложь;
	СтрокаСообщения = "";
	СуммаДокумента = 0;
	СуммаНДС=0;
	ДокументЗаполнен = Ложь;
	Для Каждого СтрокаТаблицы Из Результат Цикл
		Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			ТаблицаПоСтавкам = Новый ТаблицаЗначений();
			ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			Для Каждого СтрПлатежа Из ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа Цикл
				Если СтрПлатежа.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента Тогда
					ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
					Если ТекСтавкаНДС = Неопределено Тогда
						ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
					КонецЕсли; 
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
					СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаПоСтавкам.Свернуть("СтавкаНДС", "Сумма");
			
			//Распределение суммы рег учета
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.СуммаДокумента, ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
			Если Не МассивСумм = Неопределено Тогда
				ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
			Иначе
				МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
			КонецЕсли; 
			
			Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					Или СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				КонецЕсли;
				
				Контрагент = СтрокаТаблицы.Контрагент;
				ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
				СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.Сумма;
				НовыйАванс = Авансы.Добавить();
				НовыйАванс.Сумма = СтрокаПоСтавке.Сумма;
				НовыйАванс.СтавкаНДС	  = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], ?(Год(Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118));
				НовыйАванс.СуммаНДС		  = УчетНалоговСервер.РассчитатьСуммуНДС(НовыйАванс.Сумма, Истина, Истина, УчетНалоговСервер.СтавкаНДС(НовыйАванс.СтавкаНДС));
				ОшибкаПриЗаполнении = Ложь;
				ДокументЗаполнен = Истина;
			КонецЦикла;
			
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
				ДокументЗаполнен = Ложь;
			Иначе
				Прервать;
			КонецЕсли;

		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаТаблицы);
			СтрокаАванса = Авансы.Добавить();
			СтрокаАванса.Сумма = СтрокаТаблицы.СуммаДокумента;
			СтрокаАванса.СтавкаНДС = ?(Год(Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118);
			СтрокаАванса.СуммаНДС = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаАванса.Сумма, Истина, Истина, УчетНалоговСервер.СтавкаНДС(СтрокаАванса.СтавкаНДС));
			СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
			Иначе
				ДокументЗаполнен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаНДС=Авансы.Итог("СуммаНДС");
	
	Если Результат.Количество() = 0 Тогда 
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		//*** ВалютнаяСумма = 0;
		СуммаНДС = 0;
	КонецЕсли;		
	
	Если ОшибкаПриЗаполнении Тогда
		ДокументЗаполнен = Ложь;
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		//*** ВалютнаяСумма = 0;
		СуммаНДС = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры, ПометкаУдаления", Перечисления.НДСВидСчетаФактуры.НаАванс, Ложь);
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтавкиНДС"			, Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
		
		Если Не СуществующийСФ = Неопределено Тогда
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура на аванс 
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;
				Сумма = Авансы.Итог("Сумма");
				СуммаДокумента = Сумма;
				СуммаНДС=Авансы.Итог("СуммаНДС");
			КонецЕсли;
			
			Отказ = Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		КонецЕсли;
	Иначе
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			Если ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") тогда
				//Может быть много СФ, проверка затруднительна. СФ отрабатываются при записи документа АО.
				Продолжить;
			КонецЕсли;

			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","");
				СтрокаСообщения = СтрокаСообщения +" «"+Строка(СуществующийСФ)+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Регистрация еще одного счета-фактуры не допускается."
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(НаАванс) Экспорт
	СписокТипов=Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	
	Если НаАванс Тогда
		СписокТипов=Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов=СписокТипов.Типы();
	КонецЕсли;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	
	Возврат СписокТипов;	
КонецФункции

Процедура ОпределениеПараметровСчетаФактуры() Экспорт
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс ИЛИ ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Лизинг Тогда 
		СуммаДокумента = Авансы.Итог("Сумма");
		СуммаНДС = Авансы.Итог("СуммаНДС");
	Иначе
		ПараметрыСФ = Неопределено;
		
		УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета, ПараметрыСФ);
		
		Если не ПараметрыСФ.Организация = Неопределено И не ПараметрыСФ.Организация = Организация Тогда
			Организация = ПараметрыСФ.Организация;
		КонецЕсли;
		
		Если не ПараметрыСФ.Контрагент = Неопределено  И не ПараметрыСФ.Контрагент = Контрагент Тогда
			Контрагент = ПараметрыСФ.Контрагент;
		КонецЕсли;

		Если (не СуммаДокумента = ПараметрыСФ.СуммаДокумента) ИЛИ (не СуммаНДС = ПараметрыСФ.СуммаНДС) Тогда
			Если Не РучнаяКорректировка Тогда
				СуммаДокумента = ПараметрыСФ.СуммаДокумента;
			КонецЕсли;
			СуммаНДС = ПараметрыСФ.СуммаНДС;
		КонецЕсли;
		
		Если не ПараметрыСФ.ВалютаДокумента = Неопределено И не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента Тогда
			ВалютаДокумента = ПараметрыСФ.ВалютаДокумента;
		КонецЕсли;
		
		Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
			ДокументОснование = ДокументыОснования[0].ДокументОснование;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;

КонецФункции

Процедура ПодготовитьТаблицыДокумента(СтруктураШД, ТаблицаПоДокументамОснованиям, ПодготовитьТаблицыДокументовОснования = Ложь) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      	, "ДокументОснование");
	СтруктураПолей.Вставить("ДокументОснованиеПроведен" , "ДокументОснование.Проведен");
	СтруктураПолей.Вставить("УчитыватьНДС"				, "ДокументОснование.УчитыватьНДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость"		, "ДокументОснование.НДСВключенВСтоимость");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"			, "СчетУчетаНДС");

	
	РезультатЗапросаПоДокументамОснованиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
	
	Если СтруктураШД.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс ИЛИ СтруктураШД.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Лизинг Тогда
		
		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");
		
		Для Каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл
			
			СтрокаОснования.УчитыватьНДС = Истина;
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Сумма",		"Сумма");
			СтруктураПолей.Вставить("НДС",			"СуммаНДС");
			СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
			
			РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
			
			СтрокаОснования.ТаблицаДанных = РезультатЗапросаПоАвансам.Выгрузить();
			ТаблицаПоАвансам = СтрокаОснования.ТаблицаДанных; 
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура", ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения);			
			ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
			ТаблицаПоАвансам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШД.Контрагент, "Поставщик");
			ТаблицаПоАвансам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШД.Контрагент, "Контрагент");
			ТаблицаПоАвансам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШД.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШД.Контрагент, "СуммаБезНДС");
			ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДС");
			ТаблицаПоАвансам.Колонки.Добавить("СчетУчетаНДСПоРеализации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным, "СчетУчетаНДСПоРеализации");
			ТаблицаПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "Событие");
			
			Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
				СтрокаТаблицы.СчетФактура = СтрокаОснования.ДокументОснование;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли;		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок)
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		ДокОснование=СтрокаТЧ.ДокументОснование;
		Если ЗначениеЗаполнено(ДокОснование) и НЕ ДокОснование.Проведен И ТипЗнч(ДокОснование)<>Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			Сообщить("Счет-фактуру можно вводить только на основании проведенного документа (строка № "+СтрокаТЧ.НомерСтроки+")"); Отказ=Истина; Возврат;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШД, ТаблицаДокумента, Отказ, Заголовок)
	
	Если СтруктураШД.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				// Проводки по вычету НДС с выданного аванса
				Если СтрокаДанных.НДС = 0 Тогда Продолжить;	КонецЕсли;

				ПроводкиБУ = Движения.Хозрасчетный;				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = СтруктураШД.Дата;
				Проводка.Организация = СтруктураШД.Организация;
				Проводка.Содержание  = "Вычет НДС с выданного аванса";
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС; //68.02

				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт,"СФПолученные", СтрокаДанных.СчетФактура, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт,"Контрагенты", СтрокаДанных.Контрагент, Истина);

				Проводка.Сумма       = СтрокаДанных.НДС;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДвижениеПоРегистрамПодсистемыНДС(СтруктураШД, ТаблицаДокумента, Отказ, Заголовок);
	
	ДвижениеПоРегистру_ЖурналРегистрацииСчетовФактур(СтруктураШД, Новый Структура, Отказ)
	
КонецПроцедуры

Функция НайтиСчетУчетаНДС(Регистратор)
	НаборЗаписей=РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.регистратор.Значение=Регистратор;
	НаборЗаписей.Отбор.регистратор.Использование=Истина;
	НаборЗаписей.Прочитать();
	СчетУчетаНДС=Неопределено;
	Для Каждого СтрокаН ИЗ НаборЗаписей Цикл
		Если СтрокаН.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда
			СчетУчетаНДС=СтрокаН.СчетДт; Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат СчетУчетаНДС;
КонецФункции

Процедура ДвижениеПоРегистрамПодсистемыНДС(СтруктураШД, ТаблицаДокумента, Отказ, Заголовок)

	Если СтруктураШД.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				НоваяЗапись = ТаблицаДвижений_НДСПредъявленный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШД.Организация;
				НоваяЗапись.СчетУчетаНДС = Неопределено;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				НоваяЗапись = ТаблицаДвижений_НДССАвансов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШД.Организация;
				НоваяЗапись.ВалютаАванса = СтруктураШД.ВалютаДокумента;
				НоваяЗапись.Покупатель = СтрокаДанных.Контрагент;
				НоваяЗапись.ВалютнаяСуммаСНДС = СтрокаДанных.Сумма;
				НоваяЗапись.ДатаСобытия = СтруктураШД.Дата;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.ВидЦенности=Перечисления.ВидыЦенностей.АвансыВыданные;
			КонецЦикла;
		КонецЦикла;
			
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
			Движения.НДСПредъявленный.мПериод          = СтруктураШД.Дата;
			Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			Движения.НДСПредъявленный.ДобавитьДвижение();
		КонецЕсли;
		
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
			Движения.НДСсАвансов.мПериод          = СтруктураШД.Дата;
			Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
			Движения.НДСсАвансов.ДобавитьДвижение();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШД.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Лизинг Тогда
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Для Каждого СтрокаДанных Из СтрокаТаблицы.ТаблицаДанных Цикл
				НоваяЗапись = ТаблицаДвижений_НДСПредъявленный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
				НоваяЗапись.Организация = СтруктураШД.Организация;
				Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
					СчетУчетаНДС=СтрокаТаблицы.СчетУчетаНДС;
				Иначе	
					СчетУчетаНДС=НайтиСчетУчетаНДС(СтрокаДанных.СчетФактура);
				КонецЕсли;	
				НоваяЗапись.СчетУчетаНДС = СчетУчетаНДС;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяЗапись.ВидЦенности=Перечисления.ВидыЦенностей.Оборудование;
				НоваяЗапись.СчетФактура=Ссылка;
			КонецЦикла;
		КонецЦикла;
			
		Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
			Движения.НДСПредъявленный.мПериод          = СтруктураШД.Дата;
			Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			Движения.НДСПредъявленный.ДобавитьДвижение();
		КонецЕсли;

	КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_ЖурналРегистрацииСчетовФактур(СтруктураШД, СтруктураТД, Отказ)
	
	НаборЗаписейСФ=РегистрыСведений.ЖурналРегистрацииСчетовФактур.СоздатьНаборЗаписей();
	НаборЗаписейСФ.Отбор.СчетФактура.Установить(Ссылка);
	НаборЗаписейСФ.Прочитать();
    НаборЗаписейСФ.Очистить();
	
	/// Реализация перепредъявление
	Если ТипЗнч(СтруктураШД.ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(Продавец) Тогда
			НоваяСтрока=НаборЗаписейСФ.Добавить();
			НоваяСтрока.Комитент=СтруктураШД.Продавец;
			НоваяСтрока.Субкомиссионер=СтруктураШД.Контрагент;
			СчетФактураКомитента=Ссылка;
			НоваяСтрока.ДатаСчетаФактурыКомитента=СчетФактураКомитента.Дата;
			НоваяСтрока.НомерСчетаФактурыКомитента=СчетФактураКомитента.Номер;
			НоваяСтрока.СуммаДокумента=СтруктураШД.СуммаДокумента;
			НоваяСтрока.СуммаНДС=СтруктураШД.СуммаНДС;
			НоваяСтрока.СчетФактура=Ссылка;
			НоваяСтрока.ЧастьЖурнала="ПолученныеСчетаФактуры";
			НоваяСтрока.Организация=Организация;
			НаборЗаписейСФ.Записать();
		КонецЕсли;	
		
		Если СтруктураШД.ДокументОснование.ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров.Перепредъявление Тогда
			НоваяСтрока=НаборЗаписейСФ.Добавить();
			НоваяСтрока.Комитент=СтруктураШД.Контрагент;
			СчетФактураКомитента=Ссылка;
			НоваяСтрока.ДатаСчетаФактурыКомитента=СчетФактураКомитента.Дата;
			НоваяСтрока.НомерСчетаФактурыКомитента=СчетФактураКомитента.Номер;
			НоваяСтрока.СуммаДокумента=СтруктураШД.СуммаДокумента;
			НоваяСтрока.СуммаНДС=СтруктураШД.СуммаНДС;
			НоваяСтрока.СчетФактура=Ссылка;
			НоваяСтрока.ЧастьЖурнала="ПолученныеСчетаФактуры";
			НоваяСтрока.Организация=Организация;
			НаборЗаписейСФ.Записать();
		Конецесли;
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание) Экспорт
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли;

	СтрДокОснования=ДокументыОснования.Добавить();
	СтрДокОснования.ДокументОснование=Основание.Ссылка;

	Дата=Основание.Дата;
	Если ТипЗнч(Основание)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Основание.Подвид)="Корректировка" Тогда
			ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный; НомерИсправления=1;
			ДокументОснованиеКорректировка=УчетНДС.НайтиПодчиненныйДокумент(Основание.Сделка, "СчетФактураПолученный")
		Иначе
			ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаПокупку;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда
		ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаРеализацию;
		Если Основание.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СуммаДокумента=Основание.СуммаВознаграждения;
			СуммаНДС=Основание.Товары.Итог("СуммаНДСВознаграждения");
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаПокупку;
			
	Иначе //Аванс
		СписокТиповНаАванс=ПолучитьСписокТиповПоВидуСчетаФактуры(Истина);
		Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
			ВалютаДокумента = ДополнительныеСвойства.ВалютаБухУчета;
			ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс;
			ДокументЗаполнен = Ложь;
			
			ЗаполнитьСчетФактуруНаАванс(ДокументЗаполнен);
			
			Если Не ДокументЗаполнен Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
			КонецЕсли; 
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	Заголовок=ДополнительныеСвойства.Заголовок;

	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      , "ДокументОснование");
	СтруктураПолей.Вставить("Контрагент"             , "ДокументОснование.Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"     , "ДокументОснование.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаДокумента"        , "ДокументОснование.ВалютаДокумента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"     , "ДокументОснование.КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов", "ДокументОснование.КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("Организация" 		     , "ДокументОснование.Организация");
	СтруктураПолей.Вставить("СчетУчетаНДС" 		     , "СчетУчетаНДС");
	
	РезультатЗапросаПоДокументамОснованиям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();

	СтруктураШД=ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект); УпрощенныйУчетНДС=Ложь;
	ПодготовитьТаблицыДокумента(СтруктураШД, ТаблицаПоДокументамОснованиям);

	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок);

	Если Не Отказ И Не СформированПриВводеНачальныхОстатковНДС Тогда
		ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//*** ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	
	Если НЕ СформированПриВводеНачальныхОстатковНДС И мОбновлятьРеквизитыПриЗаписи = ИСТИНА Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		НаборЗаписейСФ=РегистрыСведений.ЖурналРегистрацииСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписейСФ.Отбор.СчетФактура.Установить(Ссылка);
		НаборЗаписейСФ.Прочитать();
   		НаборЗаписейСФ.Очистить();
		НаборЗаписейСФ.Записать();
	КонецЕсли;

	УстановитьКодВидаОперации();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);
мОбновлятьРеквизитыПриЗаписи=ИСТИНА;