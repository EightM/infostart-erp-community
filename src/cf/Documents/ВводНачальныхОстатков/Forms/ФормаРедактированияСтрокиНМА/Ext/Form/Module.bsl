
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ЭтоНовый",ЭтоНовый);
	Параметры.Свойство("Копирование",Копирование);
	Параметры.Свойство("мСтруктураРеквизитовЗаполняемыхПоУмолчанию",мСтруктураРеквизитовЗаполняемыхПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//// Нужно получить реально
	//УСН=ОбщегоНазначения.ПрименениеУСН(ВладелецФормы.Объект.Организация, ВладелецФормы.Объект.Дата);
	//УСНДоходы=ОбщегоНазначения.ПрименениеУСНДоходы(ВладелецФормы.Объект.Организация, ВладелецФормы.Объект.Дата);
	УСН=Ложь;
	УСНДоходы=Ложь;
	Если НЕ (ЭтоНовый И НЕ Копирование) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВладелецФормы.Элементы.НМА.ТекущиеДанные);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мСтруктураРеквизитовЗаполняемыхПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
		Если ЭтоНовый Тогда
		ДанныеДляЗаписи = ВладелецФормы.Объект.НМА.Добавить();
	Иначе
		ДанныеДляЗаписи = ВладелецФормы.Элементы.НМА.ТекущиеДанные;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеДляЗаписи, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НематериальныйАктивПриИзменении(Элемент)
	ВидОбъектаУчета = ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НематериальныйАктив, "ВидОбъектаУчета");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "НАЧАЛЬНЫЕ ОСТАТКИ"

&НаКлиенте
Процедура ПересчитатьСуммыРазниц()
	
	ТекущаяСтоимостьВР       = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
	
КонецПроцедуры // ПересчитатьСуммыРазниц()

&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьБУ = 0 Тогда
		ТекущаяСтоимостьБУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
	Если НЕ УСН Тогда
		
		Если ПервоначальнаяСтоимостьНУ = 0 Тогда
			ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		ПервоначальнаяСтоимостьНУПриИзменении(Неопределено);
		
	ИначеЕсли (УСН И НЕ УСНДоходы) Тогда
		
		Если ПервоначальнаяСтоимостьУСН = 0 Тогда
			ПервоначальнаяСтоимостьУСН = ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьБУПриИзменении()

&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	Если НЕ УСН Тогда
		
		Если НакопленнаяАмортизацияНУ = 0 Тогда
			
			НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьНУ = 0 Тогда
		ТекущаяСтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяСтоимостьНУПриИзменении()

&НаКлиенте
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьНУПриИзменении()

&НаКлиенте
Процедура ТекущаяСтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // ТекущаяСтоимостьПРПриИзменении()

&НаКлиенте
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // НакопленнаяАмортизацияНУПриИзменении()

&НаКлиенте
Процедура НакопленнаяАмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц();
	
КонецПроцедуры // НакопленнаяАмортизацияПРПриИзменении()

