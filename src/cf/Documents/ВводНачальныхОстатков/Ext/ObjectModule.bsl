//////Объект "Перечисление._____СпособыНачисленияАмортизацииОС" использован в:
//////Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ОС.Реквизит.МетодНачисленияАмортизацииНУ.Тип
//////Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ОС.Реквизит.СпособНачисленияАмортизацииБУ.Тип
//////Документ.ВводНачальныхОстатков.ТабличнаяЧасть.НМА.Реквизит.СпособНачисленияАмортизацииБУ.Тип
//////Документ.ВводНачальныхОстатков.ТабличнаяЧасть.НМА.Реквизит.МетодНачисленияАмортизацииНУ.Тип


//////Объект "Перечисление.ПорядокПогашенияСтоимостиОС" использован в:
//////Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ОС.Реквизит.ПорядокВключенияСтоимостиВСоставРасходовНУ.Тип
//////Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ОС.Реквизит.ПорядокПогашенияСтоимостиБУ.Тип


Перем УСН_ДР Экспорт, УСН Экспорт, Предприниматель Экспорт;

Перем мСтруктураРеквизитовЗаполняемыхПоУмолчанию Экспорт;
Перем мСтрокаРеквизитыНалУчета Экспорт;
Перем мСтрокаРеквизитыНалУчетаУСН Экспорт;
Перем мУчетнаяПолитика Экспорт;
Перем СтруктРекв Экспорт;
Перем ПоддержкаПБУ18 Экспорт;
Перем мФормаДокумента Экспорт;
Перем мСложныйУчетНДС Экспорт;
Перем мВестиУчетНДС;
Перем ОСН Экспорт;
Перем УчетнаяПолитикаНеЗадана Экспорт;
Перем СодержаниеПроводки;
Перем СтруктураШапкиДокумента;
Перем Заголовок;

Перем мУчетнаяНУПолитикаПоДатам;
Перем мУчетнаяБУПолитикаПоДатам;

Перем мПодчиненныеДокументы;

Перем мТаблицаУсловий;
Перем мТаблицаУсловийПодчБезКоличества;
Перем мСтруктураОбязательныхРеквизитовПодчКоличество;
Перем мПустаяСтруктура;
Перем мПустаяСтруктураТЧ;
Перем мСписокВидовЦенностейУслуги;

Перем мОценкаМПЗПоСредней Экспорт;
Перем мОтказЗаписи Экспорт;
Перем мОбновитьСодержанияПодчиненныхДокументов Экспорт;
Перем СтруктураПараметровОперативногоУчета Экспорт;

// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "") Экспорт
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		КонецЦикла; 
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок=ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);
	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева=ДеревоРезультатов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ГруппировочныеКолонки) Тогда
		ТаблицаРезультатов.Индексы.Добавить(ГруппировочныеКолонки);
	КонецЕсли;
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева из  ДеревоРезультатов.Строки Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		//Поиск и заполнение подчиненными колонками
		МассивПодчиненныйхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныйхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
КонецФункции //УДАЛИТЬ!!!

Функция ПолучитьОбъектПоТипу(ТипСтр, Субконто1, Субконто2, Субконто3) Экспорт

	ИскомыйТип = Тип(ТипСтр);
	ИскомыйОбъект = Неопределено;
	
	Если ТипЗнч(Субконто1) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто1;
		
	ИначеЕсли ТипЗнч(Субконто2) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто2;
		
	ИначеЕсли ТипЗнч(Субконто3) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто3;
	КонецЕсли; 	
	
	Возврат ИскомыйОбъект;

КонецФункции

Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	УчетПоСкладам = Ложь;

	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");

	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = Истина;
	КонецЕсли;

	Возврат УчетПоСкладам;

КонецФункции

Функция ОпределитьНомерСубконто(СтруктураСубконто,ТипСправочника)
	Если ТипЗнч(СтруктураСубконто.Субконто1)= ТипСправочника Тогда
		Возврат 1;
	ИначеЕсли ТипЗнч(СтруктураСубконто.Субконто2)= ТипСправочника Тогда
	    Возврат 2;
	ИначеЕсли ТипЗнч(СтруктураСубконто.Субконто3)= ТипСправочника Тогда
	    Возврат 3;
	КонецЕсли;
	Возврат 1;
КонецФункции

Процедура ПодготовитьИЗаполнитьСтруктуруПолей(ИмяРегистра, СтрокаТаблицы,СтруктураШапки)
	
	СтруктураПараметровОперативногоУчета.Очистить();
	СтруктураПараметровОперативногоУчета.Вставить("Организация",СтруктураШапки.Организация);
	СтруктураПараметровОперативногоУчета.Вставить("Период",СтруктураШапки.Дата);
	СтруктураПараметровОперативногоУчета.Вставить("Активность",Истина);
	
	Если ИмяРегистра="ДенежныеСредства" Тогда
		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
		СтруктураПараметровОперативногоУчета.Вставить("ВидДенежныхСредств",СтрокаТаблицы.ВидДенежныхСредств);
		СтруктураПараметровОперативногоУчета.Вставить("БанковскийСчетКасса",?(СтрокаТаблицы.ВидДенежныхСредств=Перечисления.ВидыДенежныхСредств.Безналичные,СтрокаТаблицы["Субконто1"],СтрокаТаблицы.Касса));
		СтруктураПараметровОперативногоУчета.Вставить("СуммаУпр",СтрокаТаблицы.Сумма);
		СтруктураПараметровОперативногоУчета.Вставить("Сумма",СтрокаТаблицы.Сумма);
	ИначеЕсли ИмяРегистра="ВзаиморасчетыСКонтрагентами" Тогда
		СтруктураСубконто= Новый Структура;
		СтруктураСубконто.Вставить("Субконто1",СтрокаТаблицы["Субконто1"]);
		СтруктураСубконто.Вставить("Субконто2",СтрокаТаблицы["Субконто2"]);
		СтруктураСубконто.Вставить("Субконто3",СтрокаТаблицы["Субконто3"]);
		СтруктураПараметровОперативногоУчета.Вставить("ДоговорКонтрагента",СтрокаТаблицы["Субконто"+ОпределитьНомерСубконто(СтруктураСубконто,Тип("СправочникСсылка.ДоговорыКонтрагентов"))]);
		СтруктураПараметровОперативногоУчета.Вставить("Контрагент",СтрокаТаблицы["Субконто"+ОпределитьНомерСубконто(СтруктураСубконто,Тип("СправочникСсылка.Контрагенты"))]);
		Если СтрокаТаблицы.Сумма<>0 Тогда
			СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
			СтруктураПараметровОперативногоУчета.Вставить("СуммаВал",?(СтрокаТаблицы.ВалютнаяСумма=0,СтрокаТаблицы.Сумма,СтрокаТаблицы.ВалютнаяСумма));
			СтруктураПараметровОперативногоУчета.Вставить("СуммаБух",СтрокаТаблицы.Сумма);
		Иначе
			СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Расход);
			СтруктураПараметровОперативногоУчета.Вставить("СуммаВал",СтрокаТаблицы.СуммаКт);
			СтруктураПараметровОперативногоУчета.Вставить("СуммаБух",СтрокаТаблицы.СуммаКт)
		КонецЕсли;
		
	//ИначеЕсли ИмяРегистра="ТоварыПереданные" Тогда
	//	СтруктураСубконто= Новый Структура;
	//	СтруктураСубконто.Вставить("Субконто1",СтрокаТаблицы["Субконто1"]);
	//	СтруктураСубконто.Вставить("Субконто2",СтрокаТаблицы["Субконто2"]);
	//	СтруктураСубконто.Вставить("Субконто3",СтрокаТаблицы["Субконто3"]);
	//	СтруктураПараметровОперативногоУчета.Вставить("ДоговорКонтрагента",СтрокаТаблицы["Субконто"+ОпределитьНомерСубконто(СтруктураСубконто,Тип("СправочникСсылка.ДоговорыКонтрагентов"))]);
	//	СтруктураПараметровОперативногоУчета.Вставить("Контрагент",СтрокаТаблицы["Субконто"+ОпределитьНомерСубконто(СтруктураСубконто,Тип("СправочникСсылка.Контрагенты"))]);
	//	Если СтрокаТаблицы.Сумма<>0 Тогда
	//		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
	//		СтруктураПараметровОперативногоУчета.Вставить("СуммаВзаиморасчетов",СтрокаТаблицы.Сумма);
	//	Иначе
	//		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Расход);
	//		СтруктураПараметровОперативногоУчета.Вставить("СуммаВзаиморасчетов",СтрокаТаблицы.СуммаКт)
	//	КонецЕсли;

	ИначеЕсли ИмяРегистра="УчетЦенныхБумаг" Тогда
		СтруктураСубконто= Новый Структура;
		СтруктураСубконто.Вставить("Субконто1",СтрокаТаблицы["Субконто1"]);
		СтруктураСубконто.Вставить("Субконто2",СтрокаТаблицы["Субконто2"]);
		СтруктураСубконто.Вставить("Субконто3",СтрокаТаблицы["Субконто3"]);
		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
		СтруктураПараметровОперативногоУчета.Вставить("Количество",СтрокаТаблицы.Количество);
		СтруктураПараметровОперативногоУчета.Вставить("Стоимость",СтрокаТаблицы.Сумма);
		СтруктураПараметровОперативногоУчета.Вставить("ЦеннаяБумага",СтрокаТаблицы["Субконто"+ОпределитьНомерСубконто(СтруктураСубконто,Тип("СправочникСсылка.ЦенныеБумаги"))]);
		
	ИначеЕсли ИмяРегистра="ТоварыНаСкладах" Тогда
		СтруктураСубконто= Новый Структура;
		СтруктураСубконто.Вставить("Субконто1",СтрокаТаблицы["Субконто1"]);
		СтруктураСубконто.Вставить("Субконто2",СтрокаТаблицы["Субконто2"]);
		СтруктураСубконто.Вставить("Субконто3",СтрокаТаблицы["Субконто3"]);
		СтруктураПараметровОперативногоУчета.Вставить("Склад",СтрокаТаблицы["Субконто2"]);
		СтруктураПараметровОперативногоУчета.Вставить("Номенклатура",СтрокаТаблицы["Субконто1"]);
		СтруктураПараметровОперативногоУчета.Вставить("Количество",СтрокаТаблицы.Количество);
		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
		СтруктураПараметровОперативногоУчета.Вставить("Качество",Справочники.Качество.Новый);
		//СтруктураПараметровОперативногоУчета.Вставить("СерияНоменклатуры",СтрокаТаблицы.СерияНоменклатуры);
		//СтруктураПараметровОперативногоУчета.Вставить("ХарактеристикаНоменклатуры",СтрокаТаблицы.ХарактеристикаНоменклатуры);		

	ИначеЕсли ИмяРегистра="ПартииТоваровНаСкладах" Тогда
		СтруктураСубконто= Новый Структура;
		СтруктураСубконто.Вставить("Субконто1",СтрокаТаблицы["Субконто1"]);
		СтруктураСубконто.Вставить("Субконто2",СтрокаТаблицы["Субконто2"]);
		СтруктураСубконто.Вставить("Субконто3",СтрокаТаблицы["Субконто3"]);
		СтруктураПараметровОперативногоУчета.Вставить("Склад",СтрокаТаблицы["Субконто2"]);
		СтруктураПараметровОперативногоУчета.Вставить("Номенклатура",СтрокаТаблицы["Субконто1"]);
		СтруктураПараметровОперативногоУчета.Вставить("Количество",СтрокаТаблицы.Количество);
		СтруктураПараметровОперативногоУчета.Вставить("Стоимость",СтрокаТаблицы.Сумма);
		СтруктураПараметровОперативногоУчета.Вставить("СтоимостьНУ",СтрокаТаблицы.СуммаНУ);
		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
		СтруктураПараметровОперативногоУчета.Вставить("СтатусПартии",Перечисления.СтатусыПартийТоваров.Купленный);
		СтруктураПараметровОперативногоУчета.Вставить("Качество",СтрокаТаблицы["Качество"]);
		
	ИначеЕсли ИмяРегистра="ВзаиморасчетыСотрудники" Тогда
		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",?(Найти(СтрокаТаблицы.СчетУчета,"76")>0,ВидДвиженияНакопления.Расход,ВидДвиженияНакопления.Приход));
		СтруктураПараметровОперативногоУчета.Вставить("ФизЛицо",СтрокаТаблицы["Субконто1"]);

		_Перечисления=Справочники.КлассификаторПеречислений;
		СтруктураПараметровОперативногоУчета.Вставить("ВидРасчетов",?(Найти(СтрокаТаблицы.СчетУчета,"76")>0, _Перечисления.ВидыРасчетовСотрудники_ДепонированнаяЗаработнаяПлата, _Перечисления.ВидыРасчетовСотрудники_Ссуда));
		СтруктураПараметровОперативногоУчета.Вставить("Сумма", СтрокаТаблицы.Сумма);

	ИначеЕсли ИмяРегистра="УчетОсновныхСредств" Тогда
		СтруктураПараметровОперативногоУчета.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
		СтруктураПараметровОперативногоУчета.Вставить("Количество",1);
		СтруктураПараметровОперативногоУчета.Вставить("СтоимостьБУ",СтрокаТаблицы.ТекущаяСтоимостьБУ);
		СтруктураПараметровОперативногоУчета.Вставить("СтоимостьНУ",СтрокаТаблицы.ТекущаяСтоимостьНУ);
		СтруктураПараметровОперативногоУчета.Вставить("АмортизацияБУ",СтрокаТаблицы.НакопленнаяАмортизацияБУ);
		СтруктураПараметровОперативногоУчета.Вставить("АмортизацияНУ",СтрокаТаблицы.НакопленнаяАмортизацияНУ);
		СтруктураПараметровОперативногоУчета.Вставить("ОсновноеСредство",СтрокаТаблицы.ОсновноеСредство);
		СтруктураПараметровОперативногоУчета.Вставить("Подразделение", СтрокаТаблицы.ПодразделениеОрганизации);
		СтруктураПараметровОперативногоУчета.Вставить("МОЛ", СтрокаТаблицы.МОЛРегл);
	КонецЕсли;
КонецПроцедуры
	
Процедура ДвиженияПоРегистрамОперативногоУчета(СчетУчета,СтрокаТаблицы,СтруктураШапки)
	ИмяРегистра=Неопределено;
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Счет", СчетУчета);
	Выборка=РегистрыСведений.СоответствиеСчетовРегистрам.Выбрать(СтруктураОтбора);
	Пока Выборка.Следующий() Цикл
		ИмяРегистра=СтрЗаменить(Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьИмяПредопределенного(Выборка.Регистр),"РегистрыНакопления_",""); 
		Если ИмяРегистра=Неопределено Тогда Продолжить; КонецЕсли;
		НаборЗаписейРегистра=Движения[ИмяРегистра];
		ПодготовитьИЗаполнитьСтруктуруПолей(ИмяРегистра, СтрокаТаблицы,СтруктураШапки);
		НоваяСтрока=НаборЗаписейРегистра.Добавить();
		Для Каждого СтрокаСтруктуры ИЗ СтруктураПараметровОперативногоУчета Цикл
			НоваяСтрока[СтрокаСтруктуры.Ключ]=СтрокаСтруктуры.Значение;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	

Функция СодержаниеПроводки(РазделУчета)
	
	СодержаниеТекст = "Остатки по разделу: """ + РазделУчета + """";
	
	Возврат(СодержаниеТекст);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКИ ПРОВЕДЕНИЯ ПО РАЗЛИЧНЫМ РАЗДЕЛАМ

////////////////////////////////////////////////////////////////////////////////
//Общий блок - формирования проводок и движений регистров

Процедура СообщитьОбОшибкеБезОстановкиПроведения(ТекстСообщения, Заголовок = "",Статус)
	
	#Если не ВнешнееСоединение Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
		
	#КонецЕсли
	
КонецПроцедуры

Функция ТипСчетаСубконто(Значение, СтрокаБухСправки,ЭтоАванс=Ложь,ЭтоПоставщики=Ложь)
	
	Если Значение = 1 Тогда //Тип счета
		Строка = "Счет";
	Иначе //Тип субконто
		Строка = "Субконто";
	КонецЕсли;
	
	СчетУчета = СтрокаБухСправки.СчетУчета;
	ВидСчетаУчета = СчетУчета.Вид;

	Если ВидСчетаУчета = ВидСчета.Активный И ЭтоАванс И ЭтоПоставщики Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный И ЭтоАванс И ЭтоПоставщики Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Активный И ЭтоАванс=Ложь И ЭтоПоставщики Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный И ЭтоАванс=Ложь И ЭтоПоставщики Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Активный И ЭтоАванс И ЭтоПоставщики=Ложь Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный И ЭтоАванс И ЭтоПоставщики=Ложь Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный И ЭтоАванс=Ложь И ЭтоПоставщики=Ложь Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Активный И ЭтоАванс=Ложь И ЭтоПоставщики=Ложь Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Активный Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Строка = Строка + "Дт";
		Иначе
			Строка = Строка + "Кт";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция СформироватьПроводкуБух(Операция, СтрокаБухСправки,ЭтоАванс=Ложь,ЭтоПоставщики=Ложь)
	
	СчетУчета = СтрокаБухСправки.СчетУчета;
	ВидСчетаУчета = СчетУчета.Вид;
	
	Проводка=Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = СодержаниеПроводки;
	
	Забалансовый = СчетУчета.Забалансовый;
	
	Если (ВидСчетаУчета = ВидСчета.Активный) И ЭтоПоставщики И ЭтоАванс Тогда
		Проводка.Сумма       = СтрокаБухСправки.Сумма;
		ОтразитьПоДебету = Истина;
	ИначеЕсли (ВидСчетаУчета = ВидСчета.Активный) И ЭтоПоставщики И ЭтоАванс=Ложь Тогда
		Проводка.Сумма       = СтрокаБухСправки.Сумма;
		ОтразитьПоДебету = Ложь;
	ИначеЕсли (ВидСчетаУчета = ВидСчета.Активный) И ЭтоПоставщики=Ложь И ЭтоАванс=Ложь Тогда
		Если СтрокаБухСправки.Сумма<>0 Тогда
			Проводка.Сумма       = СтрокаБухСправки.Сумма;
			ОтразитьПоДебету = Истина;
		Иначе	
			Проводка.Сумма       = СтрокаБухСправки.СуммаКт;
			ОтразитьПоДебету = Ложь;
		КонецЕсли;
	ИначеЕсли (ВидСчетаУчета = ВидСчета.Активный) И ЭтоПоставщики=Ложь И ЭтоАванс Тогда
		Проводка.Сумма       = СтрокаБухСправки.Сумма;
		ОтразитьПоДебету = Ложь;
	ИначеЕсли (ВидСчетаУчета = ВидСчета.Пассивный) И ЭтоПоставщики И ЭтоАванс Тогда
		ОтразитьПоДебету = Истина;
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма       = СтрокаБухСправки.Сумма;
		Иначе
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда
				Проводка.Сумма       = СтрокаБухСправки.СуммаКт;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли (ВидСчетаУчета = ВидСчета.Пассивный) И ЭтоПоставщики И ЭтоАванс=Ложь Тогда
		ОтразитьПоДебету = Ложь;
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма       = СтрокаБухСправки.Сумма;
		Иначе
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда
				Проводка.Сумма       = СтрокаБухСправки.СуммаКт;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ВидСчетаУчета = ВидСчета.Пассивный) И ЭтоПоставщики=Ложь И ЭтоАванс=Ложь Тогда
		ОтразитьПоДебету = Ложь;
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма       = СтрокаБухСправки.Сумма;
		Иначе
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда
				Проводка.Сумма       = СтрокаБухСправки.СуммаКт;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ВидСчетаУчета = ВидСчета.Пассивный) И ЭтоПоставщики=Ложь И ЭтоАванс Тогда
		ОтразитьПоДебету = Ложь;
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма       = СтрокаБухСправки.Сумма;
		Иначе
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда
				Проводка.Сумма = СтрокаБухСправки.СуммаКт;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидСчетаУчета = ВидСчета.Активный Тогда
		Проводка.Сумма = СтрокаБухСправки.Сумма;
		ОтразитьПоДебету = Истина;

	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		ОтразитьПоДебету = Ложь;
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма = СтрокаБухСправки.Сумма;
		Иначе
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями Тогда
				Проводка.Сумма = СтрокаБухСправки.СуммаКт;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СтрокаБухСправки.Сумма <> 0 Тогда
			Проводка.Сумма = СтрокаБухСправки.Сумма;
			ОтразитьПоДебету = Истина;
		Иначе
			Проводка.Сумма = СтрокаБухСправки.СуммаКт;
			ОтразитьПоДебету = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Проводка.Сумма=0 Тогда
		ОтразитьПоДебету = Истина;
	КонецЕсли;	

	Если ОтразитьПоДебету Тогда
		Если СчетУчета.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт=СтрокаБухСправки.Подразделение;
		КонецЕсли;
		Проводка.СчетДт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаДт = СтрокаБухСправки.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаБухСправки.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаБухСправки.Количество;
		КонецЕсли;
		
		Если СчетУчета.НалоговыйУчет Тогда
			Попытка
				Проводка.СуммаНУДт = СтрокаБухСправки.СуммаНУ;
			Исключение
				Проводка.СуммаНУДт = Проводка.Сумма;
			КонецПопытки;
			
			Попытка
				Проводка.СуммаВРДт = СтрокаБухСправки.СуммаВР;
				Проводка.СуммаПРДт = СтрокаБухСправки.СуммаПР;
			Исключение
			КонецПопытки;

		КонецЕсли;
	Иначе
		Если СчетУчета.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт=СтрокаБухСправки.Подразделение;
		КонецЕсли;
		Проводка.СчетКт = СчетУчета;
		Если НЕ Забалансовый Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
		КонецЕсли;
		Если СчетУчета.Валютный Тогда
			Проводка.ВалютаКт = СтрокаБухСправки.Валюта;
			Проводка.ВалютнаяСуммаКт = СтрокаБухСправки.ВалютнаяСумма;
		КонецЕсли;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаБухСправки.Количество;
		КонецЕсли;
 		Если СчетУчета.НалоговыйУчет Тогда
			Попытка
				Проводка.СуммаНУКт = СтрокаБухСправки.СуммаНУ;
			Исключение
				Проводка.СуммаНУКт = Проводка.Сумма;
			КонецПопытки;
			
			Попытка
				Проводка.СуммаВРКт = СтрокаБухСправки.СуммаВР;
				Проводка.СуммаПРКт = СтрокаБухСправки.СуммаПР;
			Исключение
			КонецПопытки;

		КонецЕсли;	
	КонецЕсли;
	
	Возврат Проводка;
	
КонецФункции

////////////////////////////////////////////////////////
//Движения по регистрам партий НДС

Процедура ДвиженияПоРегистрамПартийНДС_Номенклатура(ТаблицаДанных, Отказ)
	
	ПроверитьЗаполнениеТабЧастиНДС(Отказ);
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		ТаблицаДокумента = ПодготовитьТаблицуДвиженийДокументаНДСПоГотовойПродукции(Отказ);
	Иначе
		ТаблицаДокумента = ПодготовитьТаблицуДвиженийДокументаНДС(Отказ);
	КонецЕсли;
	
	мВестиУчетНДС = Истина;//УчетНДС.ПроводитьПоРазделуУчетаНДС(СтруктураШапкиДокумента.Дата);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрамНДС(ТаблицаДокумента, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабЧастиНДС(Отказ);
	
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	ВестиПартионныйУчетБУ = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);
	
	//проверка заполнения обязательных реквизитов
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		Возврат;
	КонецЕсли;                                                
	                                                                           
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
	Запрос.УстановитьПараметр("СписокВидовЦенностейУслуги", мСписокВидовЦенностейУслуги);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Количество, 0) КАК Количество,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Количество КАК КоличествоПоПартии,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.НомерСтрокиТЧ КАК НомерСтроки,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Партия,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗПриобретенные КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Количество) КАК Количество,
	|			ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ключ КАК Ключ
	|		ИЗ
	|			Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ
	|		ГДЕ
	|			ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ссылка = &Ссылка
	|			И (НЕ ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.ВидЦенности В (&СписокВидовЦенностейУслуги))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ключ) КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ
	|		ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ключ = ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ключ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета = Хозрасчетный.Ссылка
	|ГДЕ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка = &Ссылка
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &СсылкаВидСубконто";
		
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МПЗПриобретенные", "МПЗОтгруженные");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НомерСтрокиТЧ", "НомерСтроки");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		//Если Строка.Количество <> Строка.КоличествоПоПартии Тогда
		//	СтрокаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
		//								   """ табличной части: Количество по партии не соответствует количеству по счетам-фактурам (табличная часть ""Данные по счетам-фактурам"")";
		//	Сообщить(СтрокаСообщенияОбОшибке);
		//	Отказ=Истина;
		//КонецЕсли; 
		
		//Если НЕ ЗначениеЗаполнено(Строка.Партия) и ВестиПартионныйУчетБУ Тогда
		//	СтрокаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
		//								   """ табличной части: Не заполнена партия, возможно расхождение данных с бухгалтерским учетом.";
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, , Заголовок, СтатусСообщения.Информация);
		//КонецЕсли; 
			

	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДвиженийДокументаНДС(Отказ)
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
		ИмяТЧ = "МПЗОтгруженные";
	Иначе
		ИмяТЧ = "МПЗПриобретенные";
	КонецЕсли;
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
    Запрос.УстановитьПараметр("СписокВидовЦенностейУслуги", мСписокВидовЦенностейУслуги);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Номенклатура,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Партия," + ?(ИмяТЧ = "МПЗПриобретенные","
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Склад,", "         
	|") + "
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетФактура,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.ВидЦенности,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.НДСВключенВСтоимость,
	|	ВЫБОР
	|		КОГДА ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.ВидЦенности В (&СписокВидовЦенностейУслуги)
	|			ТОГДА 0
	|		ИНАЧЕ ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Количество
	|	КОНЕЦ КАК Количество,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Стоимость,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СчетУчетаНДС,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.СтавкаНДС,
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.НДС,
	|	Хозрасчетный.ВидыСубконто.(
	|		ВидСубконто
	|	)
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков." +ИмяТЧ + " КАК ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|			ПО ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.СчетУчета = Хозрасчетный.Ссылка
	|		ПО (ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ключ = ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ключ)
	|ГДЕ
	|	ВводНачальныхОстатковНДСпоПартиямДанныеПоСФ.Ссылка = &Ссылка
	|	И ВводНачальныхОстатковНДСпоПартиямДанныеПоПартиям.Ссылка = &Ссылка
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &СсылкаВидСубконто";
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	Если ИмяТЧ = "МПЗОтгруженные" Тогда
		ТаблицаДокумента.Колонки.Добавить("Склад");
		ТаблицаДокумента.ЗаполнитьЗначения(Справочники.Склады.ПустаяСсылка(), "Склад");
	КонецЕсли;
	
	ПустаяПартия = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
	Для каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокумента.Партия) Тогда
			СтрокаТаблицыДокумента.Партия = ПустаяПартия;
		КонецЕсли;
		
		БУ = СтрокаТаблицыДокумента.СчетУчета.ПолучитьОбъект();
		ВестиСкладскойУчетБУ  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		Если ВестиСкладскойУчетБУ Тогда
			ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
		Иначе
			ВестиСуммовойУчетПоСкладамБУ = Ложь;
		КонецЕсли;
		
		Если Не ВестиСуммовойУчетПоСкладамБУ Тогда
			СтрокаТаблицыДокумента.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПодготовитьТаблицуДвиженийДокументаНДСПоГотовойПродукции(Отказ)
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.СчетУчета,
	|	ИсточникДанных.Партия,
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Количество
	|ИЗ
	|	Документ.ВводНачальныхОстатков.МПЗПриобретенные КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";
	
	ТаблицаДокумента=Запрос.Выполнить().Выгрузить();	
	ТаблицаДокумента.Колонки.Добавить("ВидЦенности");
	ТаблицаДокумента.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.Товары, "ВидЦенности");
	
	ПустаяПартия = Документы.Партия.ПустаяСсылка();
	Для каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДокумента.Партия) Тогда
			СтрокаТаблицыДокумента.Партия = ПустаяПартия;
		КонецЕсли;
		
		БУ = СтрокаТаблицыДокумента.СчетУчета.ПолучитьОбъект();
		ВестиСкладскойУчетБУ  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		Если ВестиСкладскойУчетБУ Тогда
			ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
		Иначе
			ВестиСуммовойУчетПоСкладамБУ = Ложь;
		КонецЕсли;
		
		Если Не ВестиСуммовойУчетПоСкладамБУ Тогда
			СтрокаТаблицыДокумента.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаДокумента;
КонецФункции

Процедура ДвиженияПоРегистрамНДС(ТаблицаДокумента, Отказ)

	Если ТаблицаДокумента.Количество()=0 Тогда Возврат; КонецЕсли;
	
	ТаблицаДвижений = ЭтотОбъект.Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвижений.Очистить();
	ТаблицаДокумента.Колонки.Добавить("Организация");
	ТаблицаДокумента.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДокумента,ТаблицаДвижений);
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		ЭтотОбъект.Движения.НДСПартииТоваров.мПериод          = СтруктураШапкиДокумента.Дата;
		ЭтотОбъект.Движения.НДСПартииТоваров.мТаблицаДвижений = ТаблицаДвижений;

		ЭтотОбъект.Движения.НДСПартииТоваров.ВыполнитьПриход();
		ЭтотОбъект.Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
КонецПроцедуры

//*****************************************************************************************************************************
// ПО ТАБЛИЦЕ БУХГАЛТЕРСКАЯ СПРАВКА (ПРОЧИЕ СЧЕТА УЧЕТА)

Процедура ОбработкаПроведения_БухСправка(Отказ)
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ФормированиеПроводокБух_БухСправка(БухСправка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_БухСправка(БухСправка)
	
	Операция = Движения.Хозрасчетный;

	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.Количество = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
		
		Для Сч = 1 По ЧислоАктивныхСубконто Цикл
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], Сч, СтрокаБухСправки["Субконто"+Сч]);
		КонецЦикла;
		
		
		Если ОтражатьВУправленческомУчете Тогда 
			ДвиженияПоРегистрамОперативногоУчета(СчетУчета,СтрокаБухСправки,СтруктураШапкиДокумента);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

//*****************************************************************************************************************************
// РАСЧЕТЫ ПО НАЛОГАМ И СБОРАМ

Процедура ОбработкаПроведения_РасчетыПоНалогамИСборам(Отказ)
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ФормированиеПроводокБух_БухСправка(БухСправка);
	КонецЕсли;
	
КонецПроцедуры

//*****************************************************************************************************************************
// ОСТАТКИ НОМЕНКЛАТУРЫ

Процедура ОбработкаПроведения_Номенклатура(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_Номенклатура(Отказ);
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ФормированиеПроводокБух_Номенклатура(МПЗПриобретенные);
	КонецЕсли;
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Если мСложныйУчетНДС ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			ДвиженияПоРегистрамПартийНДС_Номенклатура(МПЗПриобретенные, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_Номенклатура(Отказ)
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы Тогда
		
		Если УСН_ДР Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Склад, Партия");
		ИначеЕсли Предприниматель Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура");
		Иначе
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура");
			Если НЕ мОценкаМПЗПоСредней Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Партия");
			КонецЕсли;
		КонецЕсли;
		
		//Проверка материалов на складах
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если мСложныйУчетНДС И НЕ УСН Тогда
//			СтруктураОбязательныхРеквизитов.Вставить("Партия");
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы на складе", мТаблицаУсловий);
//			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы на складе", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, мПустаяСтруктураТЧ, "МПЗПриобретенные", "Материалы на складе", мТаблицаУсловий, мСтруктураОбязательныхРеквизитовПодчКоличество, "ДанныеПоСФ", "Данные по счетам-фактурам", мТаблицаУсловийПодчБезКоличества);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы на складе", мТаблицаУсловий);
		КонецЕсли;
		
		//Поверка материалов в переработке
		Если СтруктураОбязательныхРеквизитов.Свойство("Склад") Тогда
			СтруктураОбязательныхРеквизитов.Удалить("Склад");
		КонецЕсли;
		СтруктураОбязательныхРеквизитов.Вставить("Контрагент");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если мСложныйУчетНДС И НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы переданные в переработку (счет 10.7)", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам", );
			ПроверкаЗаполненияТабличныхЧастей(Отказ, мПустаяСтруктураТЧ, "МПЗПриобретенные", "Материалы переданные в переработку (счет 10.7)", мТаблицаУсловий, мСтруктураОбязательныхРеквизитовПодчКоличество, "ДанныеПоСФ", "Данные по счетам-фактурам", мТаблицаУсловийПодчБезКоличества);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Материалы переданные в переработку (счет 10.7)", мТаблицаУсловий);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары Тогда
		
		Если УСН_ДР Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Склад, Количество, Партия, Валюта");
		ИначеЕсли Предприниматель Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Склад, Количество, Партия");
		Иначе
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество");
			Если НЕ мОценкаМПЗПоСредней Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Партия");
			КонецЕсли;
			Если ВедетсяУчетПоСкладам (ПланыСчетов.Хозрасчетный.СырьеИМатериалы) Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Склад");
			КонецЕсли;
		КонецЕсли;
		
		//Проверка товаров на складах
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если мСложныйУчетНДС И НЕ УСН Тогда
		//	СтруктураОбязательныхРеквизитов.Вставить("Партия");
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Товары на складе", мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам",);
			ПроверкаЗаполненияТабличныхЧастей(Отказ, мПустаяСтруктураТЧ, "МПЗПриобретенные", "Товары на складе", мТаблицаУсловий, мСтруктураОбязательныхРеквизитовПодчКоличество, "ДанныеПоСФ", "Данные по счетам-фактурам", мТаблицаУсловийПодчБезКоличества);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", "Товары на складе", мТаблицаУсловий);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество");
		Если ОСН ИЛИ УСН Тогда
			Если ВедетсяУчетПоСкладам (ПланыСчетов.Хозрасчетный.ГотоваяПродукция) Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Склад");
			КонецЕсли;
			Если НЕ мОценкаМПЗПоСредней Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Партия");
			КонецЕсли;
		ИначеЕсли Предприниматель Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Склад");
			СтруктураОбязательныхРеквизитов.Вставить("Партия");
		КонецЕсли;
		
		//Проверка готовой продукции
		Если Предприниматель Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, Номенклатура, ВидМПЗ, Партия, Количество");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , ,СтруктураОбязательныхРеквизитовПодч, "Обороты", "Материалы, неоплаченные поставщикам",);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", ,);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
		
		Если УСН_ДР Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Склад, Количество, Партия, Валюта");
		ИначеЕсли Предприниматель Тогда
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Склад, Количество, Партия");
		Иначе
			СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, Количество");
			СтруктураОбязательныхРеквизитов.Вставить("Партия");
			Если ВедетсяУчетПоСкладам (ПланыСчетов.Хозрасчетный.СырьеИМатериалы) Тогда
				СтруктураОбязательныхРеквизитов.Вставить("Склад");
			КонецЕсли;
		КонецЕсли;
		
		//Проверка ВНА на складах
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам",);
			ПроверкаЗаполненияТабличныхЧастей(Отказ, мПустаяСтруктураТЧ, "МПЗПриобретенные", , мТаблицаУсловий, мСтруктураОбязательныхРеквизитовПодчКоличество, "ДанныеПоСФ", "Данные по счетам-фактурам", мТаблицаУсловийПодчБезКоличества);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		КонецЕсли;
		
		//Проверка объектов строительства
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура, СпособСтроительства");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если НЕ УСН Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам",);
			ПроверкаЗаполненияТабличныхЧастей(Отказ, мПустаяСтруктураТЧ, "МПЗПриобретенные", , мТаблицаУсловий, мСтруктураОбязательныхРеквизитовПодчКоличество, "ДанныеПоСФ", "Данные по счетам-фактурам", мТаблицаУсловийПодчБезКоличества);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		КонецЕсли;
		
		//Животные
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Количество");
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереводМолоднякаЖивотныхВОсновноеСтадо);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		
		//Прочие
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтрокиТЧ, СчетУчета, Номенклатура");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПереводМолоднякаЖивотныхВОсновноеСтадо);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеВзрослыхЖивотных);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗПриобретенные", , мТаблицаУсловий);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_Номенклатура(БухСправка)
	
	Операция = Движения.Хозрасчетный;
	// Управленческий учет
	Если ОтражатьВУправленческомУчете Тогда 
		НаборЗаписейТоварыНаСкладах=Движения.ТоварыНаСкладах;
		НаборЗаписейПартииТоваровНаСкладах=Движения.ПартииТоваровНаСкладах;
		НаборЗаписейУчетПартииТоваровПереданные=Движения.ПартииТоваровПереданные;
    КонецЕсли;
	// Управленческий учет
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		СчетУчета = СтрокаБухСправки.СчетУчета;
		Если СчетУчета = ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда Продолжить; КонецЕсли;

		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.Количество = 0 И СтрокаБухСправки.СуммаНУ = 0
			И СтрокаБухСправки.СуммаВР = 0 И СтрокаБухСправки.СуммаПР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
		Если НЕ мОценкаМПЗПоСредней Тогда
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаБухСправки["Партия"]);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаБухСправки["Склад"]);
		
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаБухСправки["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаБухСправки["СпособСтроительства"]);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаБухСправки["Номенклатура"]);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтрокаБухСправки["Номенклатура"]);
		КонецЕсли;
		
		Если СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаБухСправки["СпецМатериалПодразделениеФизЛицо"]);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаБухСправки["СпецМатериалПодразделениеФизЛицо"]);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаБухСправки["Контрагент"]);
		КонецЕсли;
		
		//Для спецматериалов в эксплуатации
		Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ
			ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			Если СтрокаБухСправки.ТорговаяНаценка <> 0 Тогда
				Проводка = Операция.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				Проводка.Сумма       = СтрокаБухСправки.ТорговаяНаценка;
				Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				Иначе
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
				Если НЕ мОценкаМПЗПоСредней Тогда
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаБухСправки["Партия"]);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаБухСправки["СтавкаНДС"]);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаБухСправки["Склад"]);
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			КонецЕсли;
		КонецЕсли;
		
		Если СчетУчета<>ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации И СчетУчета <> ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации
			И СчетУчета <> ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку И ОтражатьВУправленческомУчете Тогда
			НоваяЗаписьРегистраПартииТоваровНаСкладах=НаборЗаписейПартииТоваровНаСкладах.Добавить();
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Организация=Организация;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Склад=СтрокаБухСправки["Склад"];
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Номенклатура=СтрокаБухСправки["Номенклатура"];
			НоваяЗаписьРегистраПартииТоваровНаСкладах.СерияНоменклатуры=СтрокаБухСправки.СерияНоменклатуры;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.ХарактеристикаНоменклатуры=СтрокаБухСправки.ХарактеристикаНоменклатуры;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.ДокументОприходования=?(ЗначениеЗаполнено(СтрокаБухСправки["Партия"]),СтрокаБухСправки["Партия"],Неопределено);
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Количество=СтрокаБухСправки.Количество;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Стоимость=СтрокаБухСправки.Сумма-СтрокаБухСправки.ТорговаяНаценка;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.СтоимостьНУ=НоваяЗаписьРегистраПартииТоваровНаСкладах.Стоимость;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Качество=Справочники.Качество.Новый;
			НоваяЗаписьРегистраПартииТоваровНаСкладах.Активность=Истина;

		ИначеЕсли СчетУчета= ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку И ОтражатьВУправленческомУчете Тогда
			НоваяЗаписьПартииТоваровПереданные=НаборЗаписейУчетПартииТоваровПереданные.Добавить();
			НоваяЗаписьПартииТоваровПереданные.Активность=Истина;
			НоваяЗаписьПартииТоваровПереданные.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗаписьПартииТоваровПереданные.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьПартииТоваровПереданные.ДоговорКонтрагента=СтрокаБухСправки.Контрагент.ОсновнойДоговорКонтрагента;
			НоваяЗаписьПартииТоваровПереданные.Количество=СтрокаБухСправки.Количество;
			НоваяЗаписьПартииТоваровПереданные.Номенклатура=СтрокаБухСправки.Номенклатура;
			НоваяЗаписьПартииТоваровПереданные.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьПартииТоваровПереданные.Стоимость=СтрокаБухСправки.Сумма;
			НоваяЗаписьПартииТоваровПереданные.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.НаПереработку;
		КонецЕсли	
	КонецЦикла;
КонецПроцедуры

//*****************************************************************************************************************************
// РАСЧЕТЫ С ПОДОТЧЕТНЫМИ ЛИЦАМИ

Процедура ОбработкаПроведения_РасчетыСПодотчетнымиЛицами(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПодотчетнымиЛицами(Отказ);
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ФормированиеПроводокБух_РасчетыСПодотчетнымиЛицами(РасчетыСПодотчетнымиЛицами);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПодотчетнымиЛицами(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, РаботникОрганизации");
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыСПодотчетнымиЛицами", , );
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСПодотчетнымиЛицами(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Если ОтражатьВУправленческомУчете Тогда 
		НаборЗаписейУчетВзаиморасчетыСПодотчетнымиЛицами=Движения.ВзаиморасчетыСПодотчетнымиЛицами;
    КонецЕсли;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда
			Продолжить;
		КонецЕсли;
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "РаботникиОрганизаций", СтрокаБухСправки["РаботникОрганизации"]);
		
		Если СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами И ОтражатьВУправленческомУчете Тогда
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами=НаборЗаписейУчетВзаиморасчетыСПодотчетнымиЛицами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.ФизЛицо=СтрокаБухСправки["РаботникОрганизации"];
			Если СтрокаБухСправки.Сумма<>0 Тогда
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Сумма=СтрокаБухСправки.Сумма;
			Иначе
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения=ВидДвиженияНакопления.Расход;
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Сумма=СтрокаБухСправки.СуммаКт;
			КонецЕсли;	
		ИначеЕсли СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал И ОтражатьВУправленческомУчете Тогда
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами=НаборЗаписейУчетВзаиморасчетыСПодотчетнымиЛицами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.ФизЛицо=СтрокаБухСправки["РаботникОрганизации"];
			Если СтрокаБухСправки.Сумма<>0 Тогда
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Сумма=СтрокаБухСправки.ВалютнаяСумма;
			Иначе
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения=ВидДвиженияНакопления.Расход;
				НоваяЗаписьРегистраВзаиморасчетыСПодотчетнымиЛицами.Сумма=СтрокаБухСправки.ВалютнаяСумма;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

//*****************************************************************************************************************************
// РАСЧЕТЫ С КОНТРАГЕНТАМИ

Процедура ОбработкаПроведения_РасчетыСКонтрагентами(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыСКонтрагентами(Отказ);
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ФормированиеПроводокБух_РасчетыСКонтрагентами(РасчетыСКонтрагентами);
	КонецЕсли;
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		ДвиженияПоРегистрамВзаиморасчетовНДС_РасчетыСКонтрагентами(РасчетыСКонтрагентами, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСКонтрагентами(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Контрагент, ДоговорКонтрагента, Документ");
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыСКонтрагентами", , );
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСКонтрагентами(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;

	Если ОтражатьВУправленческомУчете Тогда 
		НаборЗаписейУчетВзаиморасчетыСКонтрагентами=Движения.ВзаиморасчетыСКонтрагентами;
    КонецЕсли;

	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.СуммаКт = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		ЭтоАванс=СтрокаБухСправки.Аванс;
		ЭтоПоставщики=Ложь;
		Если СчетУчета.Родитель=ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками ИЛИ 
			СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками Тогда
			ЭтоПоставщики=Истина;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки,ЭтоАванс,ЭтоПоставщики);
		
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки,ЭтоАванс,ЭтоПоставщики)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки,ЭтоАванс,ЭтоПоставщики)], "Контрагенты", СтрокаБухСправки["Контрагент"]);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки,ЭтоАванс,ЭтоПоставщики)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки,ЭтоАванс,ЭтоПоставщики)], "Договоры", СтрокаБухСправки["ДоговорКонтрагента"]);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки,ЭтоАванс,ЭтоПоставщики)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки,ЭтоАванс,ЭтоПоставщики)], "ДокументыРасчетовСКонтрагентами", СтрокаБухСправки["Документ"]);
		
		Если ЭтоПоставщики И ОтражатьВУправленческомУчете И ЭтоАванс=Ложь Тогда
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			Если СтрокаБухСправки.Сумма<>0 Тогда
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Расход;
			Иначе
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.СуммаКт;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Расход;
			КонецЕсли;	
		ИначеЕсли ЭтоПоставщики И ОтражатьВУправленческомУчете И ЭтоАванс Тогда	
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
		ИначеЕсли (СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал ИЛИ СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ) И ОтражатьВУправленческомУчете Тогда	
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Расход;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
		ИначеЕсли (СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал ИЛИ СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ) И ОтражатьВУправленческомУчете Тогда	
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
		ИначеЕсли ЭтоПоставщики=Ложь И ОтражатьВУправленческомУчете И ЭтоАванс=Ложь Тогда	
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			Если СтрокаБухСправки.Сумма<>0 Тогда
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Приход;
			Иначе
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.СуммаКт;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Расход;
			КонецЕсли;	
		ИначеЕсли ЭтоПоставщики=Ложь И ОтражатьВУправленческомУчете И ЭтоАванс=Истина Тогда	
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Расход;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
		ИначеЕсли (СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал ИЛИ СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ) И ОтражатьВУправленческомУчете Тогда	
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
		ИначеЕсли (СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал ИЛИ СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ) И ОтражатьВУправленческомУчете Тогда	
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Расход;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
		ИначеЕсли (СчетУчета=ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами ИЛИ СчетУчета=ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию) И ОтражатьВУправленческомУчете Тогда
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами=НаборЗаписейУчетВзаиморасчетыСКонтрагентами.Добавить();
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Активность=Истина;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Период=СтруктураШапкиДокумента.Дата;
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ДоговорКонтрагента=СтрокаБухСправки["ДоговорКонтрагента"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Контрагент=СтрокаБухСправки["Контрагент"];
			НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.Организация=СтруктураШапкиДокумента.Организация;
			Если СтрокаБухСправки.Сумма<>0 Тогда
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.Сумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Приход;
			Иначе
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаБух=СтрокаБухСправки.СуммаКт;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.СуммаВал=СтрокаБухСправки.ВалютнаяСумма;
				НоваяЗаписьРегистраВзаиморасчетыСКонтрагентами.ВидДвижения=ВидДвиженияНакопления.Расход;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	ФормированиеПроводокПоСчетамУЕиВАЛ(БухСправка);
	
КонецПроцедуры

Процедура ФормированиеПроводокПоСчетамУЕиВАЛ(ТаблицаРасчетов)
	
	Если УСН Тогда Возврат; КонецЕсли;
	
	// По остаткам расчетов в условных единицах, которые не являются авансом, формируем проводки по субсчетам счета УЕ в БУ и НУ
	// По остаткам расчетов в валюте, которые являются авансом, для плательщиков налога на прибыль 
	// с 31.12.2007 формируем проводки по субсчетам счета ВАЛ в БУ
	
	ФормироватьПроводкиПоВАЛ = ОСН И (Дата >= '20071231');
	
	// Счета расчетов с поставщиками - используются для определения авансов по валютным договорам с комиссионерами и комитентами
	Запрос=Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ))";
	
	СчетаРасчетовСПоставщиками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета расчетов с покупателями - используются для определения авансов по валютным договорам с комиссионерами и комитентами
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ))";
	
	СчетаРасчетовСПокупателями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		
		Если НЕ СтрокаТаблицы.СчетУчета.Валютный Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыСумма = ?(СтрокаТаблицы.Сумма <> 0, СтрокаТаблицы.Сумма, СтрокаТаблицы.СуммаКт);
		
		ВалютнаяСумма = СтрокаТаблицы.ВалютнаяСумма;
		Если СтрокаТаблицы.СчетУчета.Вид = ВидСчета.Пассивный Тогда
			ВалютнаяСумма = -ВалютнаяСумма;
		ИначеЕсли СтрокаТаблицы.СчетУчета.Вид = ВидСчета.АктивноПассивный Тогда
			ВалютнаяСумма = ?(СтрокаТаблицы.Сумма <> 0, ВалютнаяСумма, -ВалютнаяСумма);
		КонецЕсли;
		
		ВидДоговора = СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора;
		
		// Аванс или задолженность - определяется по виду остатка на счете (дебиторская/кредиторская)
		// и по виду договора
		
		Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
			
			ЭтоАванс = Ложь;
			ЭтоЗадолженность = Ложь;
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			ЭтоАванс = ВалютнаяСумма < 0;
			ЭтоЗадолженность = НЕ ЭтоАванс;
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			ЭтоАванс = ВалютнаяСумма > 0;
			ЭтоЗадолженность = НЕ ЭтоАванс;
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			Если ВалютнаяСумма > 0 Тогда
				ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаТаблицы.СчетУчета) <> Неопределено;
				ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
			Иначе
				ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаТаблицы.СчетУчета) <> Неопределено;
				ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
			КонецЕсли;
			ЭтоЗадолженность = НЕ ЭтоАванс;
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			Если ВалютнаяСумма > 0 Тогда
				ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаТаблицы.СчетУчета) <> Неопределено;
				ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
			Иначе
				ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаТаблицы.СчетУчета) <> Неопределено;
				ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
			КонецЕсли;
			ЭтоЗадолженность = НЕ ЭтоАванс;
			
		Иначе //.Прочее
			
			ЭтоАванс = Ложь;
			ЭтоЗадолженность = Ложь;
			
		КонецЕсли;

		Если НЕ ФормироватьПроводкиПоВАЛ Тогда Продолжить; КонецЕсли;
		Если НЕ ЭтоАванс Тогда Продолжить; КонецЕсли;
		
		// Остаток аванса по дебету (положительный) - авансы выданные поставщикам, счет ВАЛ.60
		// Остаток аванса по кредиту (отрицательный) - авансы полученные от покупателей, счет ВАЛ.62
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Формирование остатков по авансам в валюте для НУ";
		
		Если ВалютнаяСумма > 0 Тогда
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
			Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
			Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
			Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.Документ;
			
			Проводка.Сумма           = СтрокаТаблицы.СуммаНУ;
			Проводка.ВалютаДт        = СтрокаТаблицы.Валюта;
			Проводка.ВалютнаяСуммаДт = ВалютнаяСумма;
			
		Иначе
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
			Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
			Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
			Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.Документ;
			
			Проводка.Сумма           = СтрокаТаблицы.СуммаНУ;
			Проводка.ВалютаКт        = СтрокаТаблицы.Валюта;
			Проводка.ВалютнаяСуммаКт = -ВалютнаяСумма;
			
		КонецЕсли;
			
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам НДС

Процедура ДвиженияПоРегистрамВзаиморасчетовНДС_РасчетыСКонтрагентами(ТаблицаДанных, Отказ)
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		ТаблицаПоПрочимРасчетамПокупателей = ПодготовитьТаблицуПоПрочимРасчетам(Отказ);
		ТаблицаПоПрочимРасчетамПоставщиков = ПодготовитьТаблицуПоПрочимРасчетам(Отказ, Ложь);
	Иначе
		ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетам(Отказ);
	КонецЕсли;
	ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(ТаблицаДанных, Отказ);
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	мВестиУчетНДС = Истина;
	
	Если Не Отказ Тогда
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(, ТаблицаПоРасчетам, Отказ);
		ИначеЕсли (СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками) Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(, ТаблицаПоРасчетам, Отказ);
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(, ТаблицаПоПрочимРасчетамПоставщиков, Отказ);
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(, ТаблицаПоПрочимРасчетамПокупателей, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуПоПрочимРасчетам(Отказ, ПоПокупателям = Истина)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	Если ПоПокупателям Тогда
		Запрос.УстановитьПараметр("ВидДоговора",	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Иначе
		Запрос.УстановитьПараметр("ВидДоговора",	Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыСКонтрагентами.Ссылка.Организация,
	|	РасчетыСКонтрагентами.Контрагент,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.Документ КАК СчетФактура,
	|	РасчетыСКонтрагентами.Документ КАК ДокументОплаты,
	|	РасчетыСКонтрагентами.СчетУчета,
	|	РасчетыСКонтрагентами.Сумма КАК СуммаДт,
	|	РасчетыСКонтрагентами.СуммаКт КАК СуммаКт,
	|	РасчетыСКонтрагентами.Валюта КАК ВалютаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ВалютнаяСумма КАК ВалютнаяСуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.СчетУчета.Валютный КАК СчетУчетаРасчетовСКонтрагентомВалютный,
	|	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки,
	|	РасчетыСКонтрагентами.Аванс КАК Аванс,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.Документ.Дата, &ПустаяДата) КАК СчетФактураДата,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.Документ.Дата, &ПустаяДата) КАК ДокументОплатыДата,
	|	РасчетыСКонтрагентами.СуммаНДС КАК СуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора,
	|	РасчетыСКонтрагентами.ТипДоговораКонтрагента
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	РасчетыСКонтрагентами.Ссылка = &Ссылка
	|	И РасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора = &ВидДоговора
	//|	И РасчетыСКонтрагентами." + ?(ПоПокупателям,"Сумма", "СуммаКт") + " <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	ТаблицаДокумента.Колонки.Добавить("СуммаСУчетомПереоценки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.ВалютаВзаиморасчетов = ДополнительныеСвойства.ВалютаБухУчета Тогда
			Если СтрокаТаблицы.СуммаКт <> 0 Тогда
				СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаКт;
			Иначе
				СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаДт;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда 
			СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаСУчетомПереоценки;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.Дата < '20070101' Тогда
		ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"СуммаСУчетомПереоценки");
	КонецЕсли; 
	
	Возврат ТаблицаДокумента;
	
КонецФункции

Функция ПодготовитьТаблицуПоРасчетам(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыСКонтрагентами.Ссылка.Организация,
	|	РасчетыСКонтрагентами.Контрагент,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.Документ КАК СчетФактура,
	|	РасчетыСКонтрагентами.Документ КАК ДокументОплаты,
	|	РасчетыСКонтрагентами.СчетУчета,
	|	РасчетыСКонтрагентами.Сумма КАК СуммаСУчетомПереоценки,
	|	РасчетыСКонтрагентами.Валюта КАК ВалютаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ВалютнаяСумма КАК ВалютнаяСуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.СчетУчета.Валютный КАК СчетУчетаРасчетовСКонтрагентомВалютный,
	|	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки,
	|	РасчетыСКонтрагентами.Аванс КАК Аванс,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.Документ.Дата, &ПустаяДата) КАК СчетФактураДата,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.Документ.Дата, &ПустаяДата) КАК ДокументОплатыДата,
	|	РасчетыСКонтрагентами.СуммаНДС КАК СуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ТипДоговораКонтрагента
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	РасчетыСКонтрагентами.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда 
			СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаСУчетомПереоценки;
		КонецЕсли;
	КонецЦикла;
		
	Если СтруктураШапкиДокумента.Дата < '20070101' Тогда
		ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"СуммаСУчетомПереоценки");
	КонецЕсли; 
	
	Возврат ТаблицаДокумента;
	
КонецФункции

// Процедура формирования движения по НДС расчеты с поставщиками
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(ТаблицаПоДвижениям = Неопределено, ТаблицаРасчетов, Отказ)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСРасчетыСПоставщиками = ЭтотОбъект.Движения.НДСРасчетыСПоставщиками;
	
	ТаблицаДвиженийНДСРасчетыСПоставщиками = ДвиженияНДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	// Долг перед поставщиком
	//ТаблицаДвиженийНДСРасчетыСПоставщиками.Очистить();
	
	ТаблицаРасчетов.Индексы.Добавить("Аванс");
	СтрокиРасчетов = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Ложь));
	
	Для Каждого СтрокаТаблицы из СтрокиРасчетов Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация				= СтрокаТаблицы.Организация;
		СтрокаДвижения.Поставщик			= СтрокаТаблицы.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
		СтрокаДвижения.Документ					= СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.Сумма					= СтрокаТаблицы.СуммаВзаиморасчетов;
		СтрокаДвижения.ДатаСобытия				= СтрокаТаблицы.СчетФактураДата;
		СтрокаДвижения.ТипДоговораКонтрагента				= СтрокаТаблицы.ТипДоговораКонтрагента;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	ТаблицаДвиженийНДСРасчетыСПоставщиками.Индексы.Добавить("Сумма");
	СтрокиКУдалению = ТаблицаДвиженийНДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("Сумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийНДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДвиженийНДСРасчетыСПоставщиками.Количество() > 0 Тогда
		
		ДвиженияНДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПоставщиками;
		ДвиженияНДСРасчетыСПоставщиками.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Движения по авансам выданным
	ТаблицаДвиженийНДСРасчетыСПоставщиками.Очистить();
	ТаблицаРасчетов.Индексы.Добавить("Аванс");
	СтрокиАванса = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Истина));
	Для Каждого СтрокаТаблицы Из СтрокиАванса Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
		СтрокаДвижения.Поставщик			= СтрокаТаблицы.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
		СтрокаДвижения.Документ				= СтрокаТаблицы.ДокументОплаты;
		СтрокаДвижения.РасчетыСБюджетом		= Ложь;
		СтрокаДвижения.Сумма				= СтрокаТаблицы.СуммаВзаиморасчетов;
		СтрокаДвижения.ДатаСобытия			= СтрокаТаблицы.ДокументОплатыДата;
		СтрокаДвижения.ТипДоговораКонтрагента= СтрокаТаблицы.ТипДоговораКонтрагента;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	СтрокиКУдалению = ТаблицаДвиженийНДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("Сумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийНДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДвиженийНДСРасчетыСПоставщиками.Количество() > 0 Тогда
		
		ДвиженияНДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПоставщиками;
		ДвиженияНДСРасчетыСПоставщиками.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС расчеты с покупателями
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(ТаблицаПоДвижениям = Неопределено, ТаблицаРасчетов, Отказ)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСРасчетыСПокупателями = ЭтотОбъект.Движения.НДСРасчетыСПокупателями;
	
	ТаблицаДвиженийНДСРасчетыСПокупателями = ДвиженияНДСРасчетыСПокупателями.ВыгрузитьКолонки();
	
	// Долг покупателя
	//ТаблицаДвиженийНДСРасчетыСПокупателями.Очистить();
	
	Для Каждого СтрокаТаблицы из ТаблицаРасчетов Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Аванс Тогда
			СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
			СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
			СтрокаДвижения.Покупатель			= СтрокаТаблицы.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
			СтрокаДвижения.Документ				= СтрокаТаблицы.ДокументОплаты;
			СтрокаДвижения.Сумма				= СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаДвижения.ТипДоговораКонтрагента= СтрокаТаблицы.ТипДоговораКонтрагента;
			СтрокаДвижения.ДатаСобытия			= ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплатыДата),СтруктураШапкиДокумента.Дата,СтрокаТаблицы.ДокументОплатыДата);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	Счетчик = ТаблицаДвиженийНДСРасчетыСПокупателями.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик].Сумма = 0) Тогда
			ТаблицаДвиженийНДСРасчетыСПокупателями.Удалить(ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		Если ТаблицаДвиженийНДСРасчетыСПокупателями.Количество() <> 0 Тогда
			ДвиженияНДСРасчетыСПокупателями.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПокупателями;
			ДвиженияНДСРасчетыСПокупателями.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДвиженийНДСРасчетыСПокупателями = ДвиженияНДСРасчетыСПокупателями.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТаблицы из ТаблицаРасчетов Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Аванс Тогда
			
			СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
			СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
			СтрокаДвижения.Покупатель			= СтрокаТаблицы.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
			СтрокаДвижения.Документ				= СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.Сумма				= СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаДвижения.ДатаСобытия			= СтрокаТаблицы.СчетФактураДата;
			СтрокаДвижения.ТипДоговораКонтрагента				= СтрокаТаблицы.ТипДоговораКонтрагента;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	Счетчик = ТаблицаДвиженийНДСРасчетыСПокупателями.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик].Сумма = 0) Тогда
			ТаблицаДвиженийНДСРасчетыСПокупателями.Удалить(ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		Если ТаблицаДвиженийНДСРасчетыСПокупателями.Количество() <> 0 Тогда
			ДвиженияНДСРасчетыСПокупателями.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПокупателями;
			ДвиженияНДСРасчетыСПокупателями.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;
	
	//ВНИМАНИЕ! ЗДЕСЬ ДВИЖЕНИЯ ПО РАСПРЕДЕЛЕНИЮ НДС
	
КонецПроцедуры

// Процедура проверяет корректность заполнения реквизитов таб. части "РасчетыСКонтрагентами" документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(ТаблицаДанных, Отказ)
	
	Для Каждого СтрокаТЧ Из ТаблицаДанных Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		""" табличной части ""Расчеты с контрагентами"": ";
		//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
		//	ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Контрагент""!", Отказ, Заголовок);
		//КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
		//	ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Договор контрагента""!", Отказ, Заголовок);
		//КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
		//	ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Документ расчетов""!", Отказ, Заголовок);
		//КонецЕсли;
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Сумма) И НЕ ЗначениеЗаполнено(СтрокаТЧ.СуммаКт) Тогда
				СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнены реквизиты ""Остаток по дебету"" или ""Остаток по кредиту""!",Заголовок,СтатусСообщения.Внимание);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Сумма) Тогда
				СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Сумма""!",Заголовок,СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Валюта) Тогда
			Сообщить(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Валюта""!");
			//Отказ=Истина;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КурсВзаиморасчетов) Тогда
				Сообщить(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Курс взаиморасчетов""!");
				//Отказ=Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВалютнаяСумма) Тогда
				СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Вал. сумма""!",Заголовок,СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчета)
			И ЗначениеЗаполнено(СтрокаТЧ.Сумма)
			И ЗначениеЗаполнено(СтрокаТЧ.ВалютнаяСумма) Тогда
			Сообщить(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Счет учета""!");
			//Отказ=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************************************************************
// НОМЕНКЛАТУРА ОТГРУЖЕННАЯ

Процедура ОбработкаПроведения_ТоварыОтгруженные(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_ТоварыОтгруженные(Отказ);
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ФормированиеПроводокБух_ТоварыОтгруженные(МПЗОтгруженные);
	КонецЕсли;
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Если мСложныйУчетНДС Тогда
			ДвиженияПоРегистрамПартийНДС_Номенклатура(МПЗОтгруженные, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_ТоварыОтгруженные(Отказ)
	
	Если УСН_ДР Тогда
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура,Покупатель, ДоговорПокупателя, ДокументОтгрузки, Поставщик, ДоговорПоставщика, Партия, Количество, Валюта");
	ИначеЕсли Предприниматель Тогда
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура, ВидМПЗ, Покупатель, ДоговорПокупателя, ДокументОтгрузки, Поставщик, ДоговорПоставщика, Партия, Количество");
	Иначе
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, Номенклатура, Покупатель, ДоговорПокупателя, Количество");
		Если мСложныйУчетНДС Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Партия");
		КонецЕсли;
	КонецЕсли;
	
	//Проверка товаров отгруженных
	мТаблицаУсловий.Очистить();
	Если НЕ ОСН Тогда
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если Предприниматель Тогда
			НовоеУсловие = мТаблицаУсловий.Добавить();
			НовоеУсловие.ИмяРеквизита = "Оплачен";
			НовоеУсловие.ВидСравнения = "=";
			НовоеУсловие.УсловиеОбъединения = "И ";
			НовоеУсловие.ЗначениеРеквизита = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	Если мСложныйУчетНДС И НЕ УСН Тогда
		СтруктураОбязательныхРеквизитов.Вставить("Ключ");
		СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий, СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам",);
		ПроверкаЗаполненияТабличныхЧастей(Отказ, мПустаяСтруктура, "МПЗОтгруженные", , мТаблицаУсловий, мСтруктураОбязательныхРеквизитовПодчКоличество, "ДанныеПоСФ", "Данные по счетам-фактурам", мТаблицаУсловийПодчБезКоличества);
	Иначе
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
	КонецЕсли;
	
	Если НЕ ОСН Тогда
		//Проверка готовой продукции отгруженной
		СтруктураОбязательныхРеквизитов.Удалить("Поставщик");
		СтруктураОбязательныхРеквизитов.Удалить("ДоговорПоставщика");
		
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		Если Предприниматель Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, Номенклатура, ВидМПЗ, Партия, Количество");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий,СтруктураОбязательныхРеквизитовПодч, "Обороты", "Материалы, неоплаченные поставщикам",);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
		КонецЕсли;
	КонецЕсли;
	
	Если Предприниматель Тогда
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчета";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "Оплачен";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = ИСТИНА;
		Если мСложныйУчетНДС Тогда
			СтруктураОбязательныхРеквизитов.Вставить("Ключ");
			СтруктураОбязательныхРеквизитовПодч = Новый Структура("Ключ,НомерСтрокиТЧ, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС");
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий,СтруктураОбязательныхРеквизитовПодч, "ДанныеПоСФ", "Данные по счетам-фактурам",);
			ПроверкаЗаполненияТабличныхЧастей(Отказ, мПустаяСтруктура, "МПЗОтгруженные", , мТаблицаУсловий, мСтруктураОбязательныхРеквизитовПодчКоличество, "ДанныеПоСФ", "Данные по счетам-фактурам", мТаблицаУсловийПодчБезКоличества);
		Иначе
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "МПЗОтгруженные", , мТаблицаУсловий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_ТоварыОтгруженные(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если СтрокаБухСправки.Сумма = 0 И СтрокаБухСправки.Количество = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);

		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
		Если НЕ мОценкаМПЗПоСредней Тогда
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаБухСправки["Партия"]);
		КонецЕсли;
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаБухСправки["Покупатель"]);
		
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************************************************************
// ОСТАТКИ НДС

Процедура ОбработкаПроведения_ОстаткиПоНДС(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_ОстаткиПоНДС(Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
		
	ДвиженияПоРегистрамНДС_ОстаткиПоНДС(ДанныеПоСФНДС, Отказ);

	Если Не Отказ Тогда
		СинхронизацияСостоянияПодчиненныхДокументов();
	КонецЕсли;
КонецПроцедуры

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабличнойЧасти_ОстаткиПоНДС(Отказ);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета,СтавкаНДС, ВидЦенности, СчетФактура, ОбъектСтроительства, СуммаБезНДС");
		//Для СМР хоз способом
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ВидЦенности";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , мТаблицаУсловий);
		СтруктураОбязательныхРеквизитов.Удалить("ОбъектСтроительства");
		
		//Для прочих ценностей БЕЗ ПРЕДЪЯВЛЕННОГО сч/ф
		СтруктураОбязательныхРеквизитов.Вставить("ПредъявленСФ");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ВидЦенности";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ПредъявленСФ";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = ЛОЖЬ;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , мТаблицаУсловий);
		
		//Для прочих ценностей С ПРЕДЪЯВЛЕННЫМ сч/ф
		СтруктураОбязательныхРеквизитов.Вставить("ДатаСФ");
		СтруктураОбязательныхРеквизитов.Вставить("НомерСФ");
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ВидЦенности";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		СписокЗнач = Новый СписокЗначений();
		СписокЗнач.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
		НовоеУсловие.ЗначениеРеквизита = СписокЗнач;
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "ПредъявленСФ";
		НовоеУсловие.ВидСравнения = "=";
		НовоеУсловие.УсловиеОбъединения = "И ";
		НовоеУсловие.ЗначениеРеквизита = ИСТИНА;
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , мТаблицаУсловий);
	
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СчетУчета, СтавкаНДС, ВидЦенности, Контрагент, ДоговорКонтрагента, СчетФактура, ДатаСФ, НомерСФ, СуммаБезНДС");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , );
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		
		СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, СтавкаНДС, ВидЦенности, Контрагент, ДоговорКонтрагента, СчетФактура, ДатаСФ, НомерСФ, СуммаБезНДС");
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ДанныеПоСФНДС", , );
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам НДС

Процедура ДвиженияПоРегистрамНДС_ОстаткиПоНДС(ДанныеПоСФНДС, Отказ);
	
	ТаблицаПоСобытиям = ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПоРасчетам = "";
	
	Если Не Отказ Тогда

		ДвиженияПоРегистрам_ОстаткиПоНДС(СтруктураШапкиДокумента, ТаблицаПоСобытиям, ТаблицаПоРасчетам, ТаблицаПоДвижениям, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыУчетнойПолитикиЛокально(КонДата, Отказ, ОбрабатываемаяОрганизация, Учет = "Бух", СчетФактура = Неопределено)
	
	Если мУчетнаяНУПолитикаПоДатам = Неопределено тогда 
		мУчетнаяНУПолитикаПоДатам = новый Соответствие;
	КонецЕсли;
	Если мУчетнаяБУПолитикаПоДатам = Неопределено тогда 
		мУчетнаяБУПолитикаПоДатам = новый Соответствие;
	КонецЕсли;
	
	Если Учет = "Нал" Тогда
		УчетнаяПолитика = мУчетнаяНУПолитикаПоДатам[?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура)];
	Иначе
		УчетнаяПолитика = мУчетнаяБУПолитикаПоДатам[?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура)];
	КонецЕсли; 
	
	Если УчетнаяПолитика = Неопределено Тогда
		ОшибкаПолученияУчетнойПолитики = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонДата, ОшибкаПолученияУчетнойПолитики, ОбрабатываемаяОрганизация);
		
		Если ОшибкаПолученияУчетнойПолитики тогда
			Если Учет = "Нал" тогда
				ОбщегоНазначения.СообщитьОбОшибке("При формировании движений по НДС "+?(НЕ ЗначениеЗаполнено(СчетФактура),"на "+Формат(КонДата, "ДФ=dd.MM.yyyy"),"для документа <"+строка(СчетФактура)+">")+" 
				| используется момент определения налоговой базы ""по отгрузке"".",,,СтатусСообщения.Информация); 
				УчетнаяПолитика = Новый Структура("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
				мУчетнаяНУПолитикаПоДатам.Вставить(?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если Учет = "Нал" тогда
				мУчетнаяНУПолитикаПоДатам.Вставить(?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			Иначе
				мУчетнаяБУПолитикаПоДатам.Вставить(?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат УчетнаяПолитика;
	
КонецФункции

Функция ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("СчетУчетаНДС0",	ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	Запрос.УстановитьПараметр("СчетУчетаНДССтр",ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
	Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",ДополнительныеСвойства.ВалютаБухУчета);
	
	СоответствиеСобытияИколонки  = новый Соответствие();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,	"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСОплачен,				"НДСОплата");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,"НДССтроительство");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию,	"НДСВведеноВЭксплуатацию");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,		"НДСВключеноВСтоимость");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,	"НДССтавка0");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, 	"НДСПредъявлено");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0,	"НДСПредъявлено0");
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Реализация,				"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Оплата,					"НДСОплата");
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.ПолученАванс,				"НДС");
	КонецЕсли; 
	
	Счетчик = 0;
	ТекстЗапроса = "";
	Для каждого Событие из СоответствиеСобытияИколонки Цикл
		Если Счетчик>0 Тогда
			ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Событие.Ключ);
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПокупки") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Событие.Ключ));
		ИначеЕсли ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПродажи.Индекс(Событие.Ключ));
		Иначе
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Счетчик);
		КонецЕсли; 
				
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&Организация как Организация,
		|	&Параметр"+Счетчик+" как Событие,
		|	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		|	ОсновныеДанные.Контрагент,
		|	ОсновныеДанные.ДоговорКонтрагента,
		|	ОсновныеДанные.ПредъявленСФ,";
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			ПустыеВалюты = новый массив();
			ПустыеВалюты.Добавить(Справочники.Валюты.ПустаяСсылка());
			ПустыеВалюты.Добавить(Неопределено);
			Запрос.УстановитьПараметр("ПустыеВалюты",ПустыеВалюты);
			Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",ДополнительныеСвойства.ВалютаБухУчета);
			ТекстЗапроса = ТекстЗапроса +"
			|	(выбор когда ОсновныеДанные.ВалютнаяСуммаСНДС = 0 или (ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютаАванса = &мВалютаРегламентированногоУчета) тогда ОсновныеДанные.СуммаБез" + Событие.Значение +" + ОсновныеДанные."+Событие.Значение+" иначе ОсновныеДанные.ВалютнаяСуммаСНДС конец) как ВалютнаяСуммаСНДС,
			|	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютнаяСуммаСНДС = 0 тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ВалютаДокумента,
			|	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ОргигинальнаяВалютаАванса,
			|	ОсновныеДанные.СчетФактура,";
		Иначе
			ТекстЗапроса = ТекстЗапроса +"
			|	ОсновныеДанные.СчетФактура,";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		|	ОсновныеДанные.ВидЦенности,
		|	ОсновныеДанные.СтавкаНДС,";
		
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	Неопределено  как СчетУчетаНДС,";
		ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	&СчетУчетаНДССтр  как СчетУчетаНДС,";
		Иначе	
			ТекстЗапроса = ТекстЗапроса +"
			|	ОсновныеДанные.СчетУчета как СчетУчетаНДС,";
		КонецЕсли; 
		
		ТекстЗапроса = ТекстЗапроса +"
		|	ОсновныеДанные.СуммаБез" + Событие.Значение +" как СуммаБезНДС,
		|	ОсновныеДанные."+Событие.Значение+" как НДС,
		|	ОсновныеДанные.НомерСтроки";
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
			Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.НДСОплачен 
				или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Оплата 
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Выбор когда ОсновныеДанные.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура иначе ОсновныеДанные.ДокументОплаты Конец как ДокументОплаты
				|	, Выбор когда ОсновныеДанные.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура.дата иначе ОсновныеДанные.ДокументОплаты.дата Конец как ДатаСобытия
				|	";
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком 
				или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Реализация 
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				|	";
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				тогда
				//Заполнение даты события далее
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	";
				
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОплаты
				|	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				|	";
			КонецЕслИ;
		Иначе
			Если Событие.Ключ = Перечисления.СобытияПоНДСПродажи.ПолученАванс тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				|	";
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				|	";
			КонецЕслИ;
			
		КонецЕсли; 
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, Выбор когда ОсновныеДанные.ДокументОтгрузки = Неопределено тогда ОсновныеДанные.Ссылка.дата иначе ОсновныеДанные.ДокументОтгрузки.дата Конец как ДатаСобытия
				|	, ОсновныеДанные.ДокументОтгрузки как ДокументОтгрузки";
				
			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0
				тогда
				ТекстЗапроса = ТекстЗапроса +"
				|	, ОсновныеДанные.ДокументОтгрузки как ДокументОтгрузки";
			Иначе
				ТекстЗапроса = ТекстЗапроса +"
				|	, Неопределено как ДокументОтгрузки";
			КонецЕслИ;	 
			
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса +"
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные";
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
			|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|	
			|ГДЕ
			|	(СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)) КАК СвязанныйСФ
			|	ПО ОсновныеДанные.ДоговорКонтрагента = СвязанныйСФ.ДоговорКонтрагента И ОсновныеДанные.СчетФактура = СвязанныйСФ.ДокументОснование
			|	";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		|
		|ГДЕ
		|	ОсновныеДанные.Ссылка = &Ссылка И
		|	(ОсновныеДанные.СуммаБез" + Событие.Значение +" <> 0 или ОсновныеДанные."+Событие.Значение+" <> 0)";
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Если Счетчик>0 Тогда
			ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
		Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура));
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	&Организация как Организация,
		|	&Параметр"+Счетчик+" как Событие,
		|	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		|	ОсновныеДанные.Контрагент,
		|	ОсновныеДанные.ДоговорКонтрагента,
		|	ОсновныеДанные.ПредъявленСФ,
		|	ОсновныеДанные.СчетФактура,
		|	ОсновныеДанные.ВидЦенности,
		|	ОсновныеДанные.СтавкаНДС,
		|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
		|	ОсновныеДанные.СуммаБезНДС КАК СуммаБезНДС,
		|	ОсновныеДанные.НДС,
		|	ОсновныеДанные.НомерСтроки
		|	, Неопределено как ДокументОплаты
		|	, ОсновныеДанные.СчетФактура.Дата как ДатаСобытия
		|	, Неопределено как ДокументОтгрузки
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
		|
		|ГДЕ
		|	ОсновныеДанные.Ссылка = &Ссылка И
		|	(ОсновныеДанные.СуммаБезНДС <> 0 или ОсновныеДанные.НДС <> 0)
		|	и ОсновныеДанные.ПредъявленСФ = Истина ";
	КонецЕсли; 
	Если Счетчик = 0  Тогда
		Возврат новый ТаблицаЗначений();
	КонецЕсли; 
	Запрос.Текст = ТекстЗапроса + "
	|	УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.НомерСтроки,
	|	ПорядокСобытия
	|";

	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Поставщик,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ВидЦенности,
	|	СУММА(ОсновныеДанные.НДС) КАК НДС,
	|	СУММА(ОсновныеДанные.НДСОплата) КАК НДСОплата,
	|	СУММА(ОсновныеДанные.НДССтроительство) КАК НДССтроительство,
	|	СУММА(ОсновныеДанные.НДСВведеноВЭксплуатацию) КАК НДСВведеноВЭксплуатацию,
	|	СУММА(ОсновныеДанные.НДСВключеноВСтоимость) КАК НДСВключеноВСтоимость,
	|	СУММА(ОсновныеДанные.НДССтавка0) КАК НДССтавка0,
	|	СУММА(ОсновныеДанные.НДСПредъявлено) КАК НДСПредъявлено,
	|	СУММА(ОсновныеДанные.НДСПредъявлено0) КАК НДСПредъявлено0,
	|	СУММА(ОсновныеДанные.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДС - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0) КАК НДСНаСчетУчета,
	|	СУММА(ОсновныеДанные.НДССтавка0 - ОсновныеДанные.НДСПредъявлено0) КАК НДСНаСчет0,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеДанные.НДССтроительство = 0
	|				ТОГДА 0
	|			КОГДА ОсновныеДанные.НДСПредъявлено = 0
	|					ИЛИ ОсновныеДанные.НДС = 0
	|				ТОГДА ОсновныеДанные.НДССтроительство
	|			КОГДА ОсновныеДанные.НДСВведеноВЭксплуатацию = 0
	|				ТОГДА ВЫБОР
	|						КОГДА -ОсновныеДанные.НДС - ОсновныеДанные.НДССтроительство - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0 > ОсновныеДанные.НДССтроительство
	|							ТОГДА ОсновныеДанные.НДССтроительство
	|						ИНАЧЕ -ОсновныеДанные.НДС - ОсновныеДанные.НДССтроительство - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0
	|					КОНЕЦ
	|			ИНАЧЕ ОсновныеДанные.НДССтроительство
	|		КОНЕЦ) КАК НДСНаСчетСтроительства,
	|	ВЫБОР
	|		КОГДА ОсновныеДанные.НДССтроительство > 0
	|				И ОсновныеДанные.НДС > 0
	|				И ОсновныеДанные.НДСПредъявлено > 0
	|				И ОсновныеДанные.НДСВведеноВЭксплуатацию > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РаспределитьВычетПоСтроительству,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	СУММА(ОсновныеДанные.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	СУММА(ОсновныеДанные.СуммаБезНДССтроительство) КАК СуммаБезНДССтроительство,
	|	СУММА(ОсновныеДанные.СуммаБезНДСВведеноВЭксплуатацию) КАК СуммаБезНДСВведеноВЭксплуатацию,
	|	СУММА(ОсновныеДанные.СуммаБезНДСВключеноВСтоимость) КАК СуммаБезНДСВключеноВСтоимость,
	|	СУММА(ОсновныеДанные.СуммаБезНДССтавка0) КАК СуммаБезНДССтавка0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.ОбъектСтроительства КАК Объект,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	ОсновныеДанные.НеВлияетНаВычет,
	|	ОсновныеДанные.ДокументОплаты
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.Контрагент,
	|	ВЫБОР
	|		КОГДА ОсновныеДанные.НДССтроительство > 0
	|				И ОсновныеДанные.НДС > 0
	|				И ОсновныеДанные.НДСПредъявлено > 0
	|				И ОсновныеДанные.НДСВведеноВЭксплуатацию > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ОсновныеДанные.СчетУчета,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.ОбъектСтроительства,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.ВалютаВзаиморасчетов,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	ОсновныеДанные.Ссылка.Дата,
	|	ОсновныеДанные.НеВлияетНаВычет,
	|	ОсновныеДанные.ДокументОплаты
	|";
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС неоплаченный покупателями"
//
Функция ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок)	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Покупатель,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ВидЦенности,
	|	СУММА(ОсновныеДанные.НДС) КАК НДС,
	|	СУММА(ОсновныеДанные.НДСОплата) КАК НДСОплата,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	СУММА(ОсновныеДанные.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.ОбъектСтроительства КАК Объект,
	|	ОсновныеДанные.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	ОсновныеДанные.СтавкаНДСНеПодтверждена0
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.СчетУчета,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.ОбъектСтроительства,
	|	ОсновныеДанные.ДокументОплаты,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.Ссылка.Дата,
	|	ОсновныеДанные.СтавкаНДСНеПодтверждена0
	|";	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент КАК Покупатель,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.ВидЦенности,
	|	СУММА(ОсновныеДанные.НДС) КАК НДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ОсновныеДанные.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	СУММА(ОсновныеДанные.НДСОплата) КАК НДСОплата,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПодтверждено0) КАК НДСПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	|	СУММА(ОсновныеДанные.НДСПредъявлено) КАК НДСПредъявлено,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	|	СУММА(ОсновныеДанные.НДСПредъявлено0) КАК НДСПредъявлено0,
	|	СУММА(ОсновныеДанные.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	|	СУММА(ОсновныеДанные.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	|	ОсновныеДанные.ВалютаАванса,
	|	СУММА(ОсновныеДанные.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	|	ОсновныеДанные.СчетФактура КАК СчетФактура,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ДокументОтгрузки.Дата КАК ДатаОплаты,
	|	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеДанные.ВалютнаяСуммаСНДС = 0
	|				ТОГДА 1
	|			ИНАЧЕ (ОсновныеДанные.СуммаБезНДС + ОсновныеДанные.НДС) / ОсновныеДанные.ВалютнаяСуммаСНДС
	|		КОНЕЦ) КАК КурсАванса,
	|	ОсновныеДанные.ДокументОплаты
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.СчетУчета,
	|	ОсновныеДанные.СтавкаНДС,
	|	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	|	ОсновныеДанные.ВалютаВзаиморасчетов,
	|	ОсновныеДанные.КурсВзаиморасчетов,
	|	ОсновныеДанные.КратностьВзаиморасчетов,
	|	ОсновныеДанные.ВалютаАванса,
	|	ОсновныеДанные.ВалютнаяСуммаСНДС,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ДокументОтгрузки,
	|	ОсновныеДанные.ДокументОтгрузки.Дата,
	|	ОсновныеДанные.Ссылка.Дата,
	|	ОсновныеДанные.ДокументОплаты
	|";
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.ВидЦенности,
	|	ОсновныеДанные.ОбъектСтроительства,
	|	ОсновныеДанные.СчетУчета КАК СчетУчетаНДС,
	|	ОсновныеДанные.НДС,
	|	ОсновныеДанные.НДСОплата,
	|	ОсновныеДанные.НДССтроительство,
	|	ОсновныеДанные.НДСВведеноВЭксплуатацию,
	|	ОсновныеДанные.НДСВключеноВСтоимость,
	|	ОсновныеДанные.НДССтавка0,
	|	ОсновныеДанные.НДСПредъявлено,
	|	ОсновныеДанные.НДСПредъявлено0,
	|	ОсновныеДанные.НДС - ОсновныеДанные.НДСВключеноВСтоимость - ОсновныеДанные.НДСПредъявлено - ОсновныеДанные.НДССтавка0 КАК НДСНаСчетУчета,
	|	ОсновныеДанные.НДССтавка0 - ОсновныеДанные.НДСПредъявлено0 - ОсновныеДанные.НДСПредъявленоНеПодтверждено0 КАК НДСНаСчет0,
	|	ОсновныеДанные.НомерСтроки КАК НомерСтроки,
	|	ОсновныеДанные.ДокументОтгрузки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("Авансы0", Перечисления.ВидыЦенностей.АвансыПолученные0);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОсновныеДанные.Контрагент,
	|	ОсновныеДанные.ДоговорКонтрагента,
	|	ОсновныеДанные.СчетФактура,
	|	ОсновныеДанные.НДС КАК НДСНаСчетУчета,
	|	ОсновныеДанные.НомерСтроки,
	|	ОсновныеДанные.СчетУчета,
	|	" + ?(СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным, "ВЫБОР КОГДА ОсновныеДанные.ВидЦенности = &Авансы0 ТОГДА ОсновныеДанные.НДСПредъявлено0 + ОсновныеДанные.НДСПредъявленоНеПодтверждено0 ИНАЧЕ ОсновныеДанные.НДСОплата КОНЕЦ", "0") + " КАК НДСКВычету
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ОсновныеДанные
	|
	|ГДЕ
	|	ОсновныеДанные.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.НомерСтроки
	|";
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Процедура ДвиженияПоРегистрам_ОстаткиПоНДС(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаРасчетов, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если ТаблицаДокумента.Количество() = 0 И ТаблицаПоДвижениям.Количество() = 0 Тогда //И ТаблицаРасчетов.Количество() = 0
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		
		Если Не УСН Тогда
			
			СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
			
			СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			
			СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			
			СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			
			СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);	
			
			ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		
		Если Не УСН Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		КонецЕсли;
			
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента,  Отказ, Заголовок);
		
		Если Не УСН Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);			
			СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками_НДС(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл		
		Если СтрокаДок.НДСНаСчет0<>0 Тогда
			Проводка=Движения.Хозрасчетный.Добавить();
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СодержаниеПроводки;
			
			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаДок.ДокументОтгрузки);
			
			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчет0;
		КонецЕсли; 
		
		Если СтрокаДок.НДСНаСчетУчета <> 0 Тогда
			Проводка=Движения.Хозрасчетный.Добавить();
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СодержаниеПроводки;
			
			Проводка.СчетДт       = СтрокаДок.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			Если ТипЗнч(СтрокаДок.ОбъектСтроительства) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаДок.ОбъектСтроительства);
			КонецЕсли;			
			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл
		//Нет необходимости формировать проводку с 0 суммой.
		Если СтрокаДок.НДСНаСчетУчета=0 Тогда Продолжить; КонецЕсли; 

		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			Если СтрокаДок.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам Тогда
				Если СтрокаДок.НДСНаСчетУчета=0 Тогда Продолжить; КонецЕсли;
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = СодержаниеПроводки;
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
				
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаДок.СчетФактура);
				
				Проводка.СчетКт       = Счет000;
				
				Если СтрокаДок.НДСКВычету <> 0 Тогда
					Проводка2=Движения.Хозрасчетный.Добавить();					
					Проводка2.Период       = СтруктураШапкиДокумента.Дата;
					Проводка2.Организация  = СтруктураШапкиДокумента.Организация;					
					Проводка2.СчетДт       = Счет000;					
					Проводка2.Содержание   = СодержаниеПроводки;
					Проводка2.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;
					
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка2.СчетКт, Проводка2.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка2.СчетКт, Проводка2.СубконтоКт, "СФВыданные", СтрокаДок.СчетФактура);
					
					Проводка2.Сумма = СтрокаДок.НДСКВычету;
				КонецЕсли;
				Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
			ИначеЕсли СтрокаДок.СчетУчета = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
				Если СтрокаДок.НДСНаСчетУчета=0 Тогда Продолжить; КонецЕсли;
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = СодержаниеПроводки;
				Проводка.СчетДт       = Счет000;
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
				
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДок.СчетФактура);
		
				Если СтрокаДок.НДСКВычету <> 0 Тогда
					Проводка2=Движения.Хозрасчетный.Добавить();					
					Проводка2.Период       = СтруктураШапкиДокумента.Дата;
					Проводка2.Организация  = СтруктураШапкиДокумента.Организация;					
					Проводка2.СчетКт       = Счет000;					
					Проводка2.Содержание   = СодержаниеПроводки;
					Проводка2.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
					
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка2.СчетДт, Проводка2.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка2.СчетДт, Проводка2.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
					
					Проводка2.Сумма = СтрокаДок.НДСКВычету;
				КонецЕсли;
				Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
	
			Иначе
				Если СтрокаДок.НДСКВычету <> 0 Тогда
					Проводка = Движения.Хозрасчетный.Добавить();
					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = СодержаниеПроводки;
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;
					
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДок.СчетФактура);
					
					Проводка.СчетДт       = Счет000;
					Проводка.Сумма        = СтрокаДок.НДСКВычету;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСПредъявленный = Движения.НДСПредъявленный;
	
	ТаблицаДвиженийНДСПредъявленный = ДвиженияНДСПредъявленный.ВыгрузитьКолонки();
	// НДС предъявленный поставщиком
	//ТаблицаДвиженийНДСПредъявленный.Очистить();
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Для Каждого СтрокаДвижения Из ТаблицаПоДвижениям Цикл
			Если СтрокаДвижения.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыВыданные Тогда
				СтрокаДвижения.СуммаБезНДС = 0;
				СтрокаДвижения.НДС = 0;
				Продолжить;
			Иначе
				СтрокаДвижения.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС - СтрокаДвижения.СуммаБезНДСОплата;
				СтрокаДвижения.НДС = СтрокаДвижения.НДС - СтрокаДвижения.НДСОплата;
				СтрокаДвижения.СчетУчетаНДС = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.Поставщик = Неопределено;
			КонецЕсли;
		КонецЕсли;
		СтрокаДвижения.ДатаСобытия = ?(СтрокаДвижения.СчетФактура = Неопределено, "", СтрокаДвижения.СчетФактура.Дата);
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьПриход();
	КонецЕсли;	
	
	// НДС включенный в стоимость
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		ТаблицаДвиженийНДСПредъявленный.Очистить();
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
		ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "Событие");
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.Поставщик = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
		
		Если Не Отказ Тогда
			ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
			ДвиженияНДСПредъявленный.ВыполнитьРасход();
		КонецЕсли;	
	КонецЕсли;
	
	// НДС принятый к вычету
	ТаблицаДвиженийНДСПредъявленный.Очистить();
	
	ТаблицаКВычету = ТаблицаПоДвижениям.Скопировать();
	ТаблицаКВычету.Свернуть("Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДатаСобытия",
	"СуммаБезНДСПредъявлено, НДСПредъявлено, СуммаБезНДСПредъявлено0, НДСПредъявлено0, 
	|СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0");
	
	// НДС принятый к вычету						
	ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
	ТаблицаКВычету.Колонки.НДСПредъявлено.Имя = "НДС";
	ТаблицаКВычету.Колонки.Добавить("Событие");
	ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		// НДС по ставке 0% принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявлено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
		
		// НДС по ставке 0% (не подтверждено) принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
			Если СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаДвижения.Поставщик = Неопределено;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьРасход();
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость;
	
	ТаблицаДвиженийНДСВключенныйВСтоимость = ДвиженияНДСВключенныйВСтоимость.ВыгрузитьКолонки();
	//ТаблицаДвиженийНДСВключенныйВСтоимость.Очистить();
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
	ТаблицаПоДвижениямНДС = ТаблицаПоДвижениям.Скопировать();
	УдалитьДвиженияПоВидуЦенности(ТаблицаПоДвижениямНДС, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениямНДС, ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	Если Не Отказ Тогда
		ДвиженияНДСВключенныйВСтоимость.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвиженийНДСВключенныйВСтоимость;
		ДвиженияНДСВключенныйВСтоимость.ДобавитьДвижение();
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0;
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = ДвиженияНДСПредъявленныйРеализация0.ВыгрузитьКолонки(); 
	
	// Движение по НДС по ставке 0% ожидается подтверждение
	//ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	УдалитьДвиженияПоВидуЦенности(ТаблицаДвижений, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтавка0;
			СтрокаТаблицы.НДС			= СтрокаТаблицы.НДССтавка0;
			СтрокаТаблицы.ДатаСобытия 	= ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
			СтруктураШапкиДокумента.Дата, 
			СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСОплата;
			СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
			СтруктураШапкиДокумента.Дата, 
			СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	КонецЕсли;							
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
	КонецЕсли;
	
	// Движение по НДС по ставке 0% подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
		СтруктураШапкиДокумента.Дата, 
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
	КонецЕсли;	
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
	КонецЕсли;	
	
	// Движение по НДС по ставке 0% не подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
		СтруктураШапкиДокумента.Дата, 
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
	КонецЕсли;	
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
	КонецЕсли;	
	
	// Движение по НДС по ставке 0% предъявлена к вычету
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявлено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявлено0;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
	КонецЕсли;
	// Движение по НДС по ставке 0% не подтверждено предъявлена к вычету
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	
	Если Не Отказ Тогда
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок;
	
	ТаблицаДвиженийНДСЗаписиКнигиПокупок = ДвиженияНДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	//ТаблицаДвиженийНДСЗаписиКнигиПокупок.Очистить();
	
	ТаблицаЗаписей = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки.Покупатель.Имя = "Поставщик";
	КонецЕсли;
	
	КолонкиГруппировки 	= "";
	КолонкиСуммирования	= "СуммаБезНДСПредъявлено0, НДСПредъявлено0, СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0";
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДокументОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСПредъявлено, НДСПредъявлено"; 
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДоговорКонтрагента, ДатаОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСОплата, НДСОплата";
	КонецЕсли;
	
	ТаблицаЗаписей.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	ТаблицаЗаписей.Колонки.Добавить("Событие");
	
	Если не СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявлено.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПокупок Цикл
			Если СтрокаДвижения.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДвижения.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
			СтрокаДвижения.ДатаОплаты = ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), 
			Неопределено,
			СтрокаДвижения.ДокументОплаты.Дата);
		КонецЦикла;
	Иначе
		ТаблицаЗаписей.Колонки.СуммаБезНДСОплата.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСОплата.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		Для каждого СтрокаЗаписи Из ТаблицаЗаписей Цикл
			Если не СтрокаЗаписи.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 
				и не (СтрокаЗаписи.СуммаБезНДС = 0 и СтрокаЗаписи.НДС = 0)
				Тогда
				СтрокаКниги = ТаблицаДвиженийНДСЗаписиКнигиПокупок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКниги,СтрокаЗаписи);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	УдалитьДвиженияПоВидуЦенности(ТаблицаЗаписей, Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// НДС по ставке 0% принятый к вычету
	ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
	ТаблицаЗаписей.Колонки.Удалить("НДС");
	ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
	ТаблицаЗаписей.Колонки.НДСПредъявлено0.Имя = "НДС";
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	// НДС по ставке 0% (не подтверждено) принятый к вычету
	ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
	ТаблицаЗаписей.Колонки.Удалить("НДС");
	ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
	ТаблицаЗаписей.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	Если Не Отказ Тогда
		ДвиженияНДСЗаписиКнигиПокупок.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПокупок;
		ДвиженияНДСЗаписиКнигиПокупок.ДобавитьДвижение();
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж;
	
	ТаблицаДвиженийНДСЗаписиКнигиПродаж = ДвиженияНДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			СтрокаДвижения.ДокументОплаты 	= СтрокаДвижения.СчетФактура;
			СтрокаДвижения.ДатаОплаты		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
			СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		
		ТаблицаПоДвижениямСМР = ТаблицаПоДвижениям.Скопировать();
		УдалитьДвиженияПоВидуЦенности(ТаблицаПоДвижениямСМР, Перечисления.ВидыЦенностей.СМРСобственнымиСилами, Ложь);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениямСМР, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			СтрокаДвижения.ДатаОплаты		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты),
			СтрокаДвижения.СчетФактура.Дата,
			СтрокаДвижения.ДокументОплаты.Дата);
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			СтрокаДвижения.ДоговорКонтрагента = Неопределено;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактура.Дата), Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтрокаТаблицы.СчетФактура);
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаДвижения.ДокументОплаты.Дата);
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
			Иначе
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС 				= СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаДвижения.ДокументОплаты.Дата);
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				Если УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
					СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
					СтрокаДвижения.СуммаБезНДС 		= СтрокаДвижения.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСОплата;
					СтрокаДвижения.НДС 				= СтрокаДвижения.НДС - СтрокаТаблицы.НДСОплата;
					СтрокаДвижения.ДокументОплаты 	= Неопределено;
					СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
					СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
					Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
						СтрокаДвижения.ДоговорКонтрагента = Неопределено;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПродаж);
	
	Если Не Отказ Тогда
		ДвиженияНДСЗаписиКнигиПродаж.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПродаж;
		ДвиженияНДСЗаписиКнигиПродаж.ДобавитьДвижение();
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСНачисленный = Движения.НДСНачисленный;
	
	ТаблицаДвиженийНДСНачисленный = ДвиженияНДСНачисленный.ВыгрузитьКолонки();
	
	//ТаблицаДвиженийНДСНачисленный.Очистить();
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		// Авансы и СМРХозпособом
		
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		Для Каждого СтрокаТаблицы ИЗ ТаблицаДвижений Цикл
			Если СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным Тогда
				СтрокаТаблицы.СуммаБезНДС = 0;
				СтрокаТаблицы.НДС = 0;
				Продолжить;
			КонецЕсли;
		КонецЦикла;

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			УдалитьДвиженияПоВидуЦенности(ТаблицаДвиженийНДСНачисленный, Перечисления.ВидыЦенностей.СМРСобственнымиСилами, Ложь);
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСНачисленКУплате, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Неопределено, "Покупатель, ДоговорКонтрагента");
		Иначе	
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСсАвансов, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные , "ВидЦенности");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		КонецЕсли;
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			// Отражение в книге продаж сразу же, по факту начисления НДС с аванса
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;
		
	Иначе
		// Продажа
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Для Каждого СтрокаДвижения из ТаблицаДвиженийНДСНачисленный Цикл
			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			ИначеЕсли СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			Иначе
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
			КонецЕсли;	
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
			Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаДвижения.ДоговорКонтрагента = Неопределено;
			КонецЕсли; 
		КонецЦикла;
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		// Не подтверждение 0%
		ТаблицаДвиженийНДСНачисленный.Очистить();
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		СтрокиКУдалению = Новый Массив();
		
		Для Каждого СтрокаТаблицы из ТаблицаДвижений Цикл
			Если (Не СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Или (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 = 0) Или 
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.СуммаБезНДС = - (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0);
				СтрокаТаблицы.НДС = 0;
				СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),
				СтрокаТаблицы.СчетФактура.Дата,
				СтрокаТаблицы.ДокументОплаты.Дата);
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
				
				Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			
			Если не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
			КонецЕсли; 
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.Реализация0, "ВидНачисления");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		ТаблицаДвиженийНДСНачисленный.Очистить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактура.Дата), Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтрокаТаблицы.СчетФактура);
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			ИначеЕсли Не УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				Перечисления.НДСВидНачисления.РеализацияБезНДС,
				Перечисления.НДСВидНачисления.РеализацияСНДС);
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			Иначе
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				Перечисления.НДСВидНачисления.РеализацияБезНДС,
				Перечисления.НДСВидНачисления.РеализацияСНДС);
				Если не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения("" , "СчетУчетаНДС");
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСРеализация0 = Движения.НДСРеализация0;
	
	ТаблицаДвиженийНДСРеализация0 = ДвиженияНДСРеализация0.ВыгрузитьКолонки();
	//ТаблицаДвиженийНДСРеализация0.Очистить();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Счетчик = ТаблицаДвижений.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если ТаблицаДвижений[Счетчик].СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Или 
			(ТаблицаДвижений[Счетчик].СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(ТаблицаДвижений[Счетчик].СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			ТаблицаДвижений.Удалить(ТаблицаДвижений[Счетчик]);
		Иначе	
			ТаблицаДвижений[Счетчик].ДатаСобытия = ?(НЕ ЗначениеЗаполнено(ТаблицаДвижений[Счетчик].СчетФактура),
			СтруктураШапкиДокумента.Дата,
			ТаблицаДвижений[Счетчик].СчетФактура.Дата);
		КонецЕсли;
	КонецЦикла;
	
	// Ожидается подтверждение ставки 0%
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	Если Не Отказ Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% не подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.НДС = 0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
		СтруктураШапкиДокумента.Дата,
		СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
			
		КонецЕсли;
		
	КонецЦикла;
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСсАвансов = Движения.НДСсАвансов;
	
	ТаблицаДвиженийНДСсАвансов = ДвиженияНДСсАвансов.ВыгрузитьКолонки();
	// НДС с аванса начисленный
	//ТаблицаДвиженийНДСсАвансов.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
	
	// НДС с аванса к вычету
	ТаблицаДвиженийНДСсАвансов.Очистить();
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	
	Для Каждого	СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		СтрокаТаблицы.СуммаБезНДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
		СтрокаТаблицы.СуммаБезНДСПредъявлено0 + СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0, 
		СтрокаТаблицы.СуммаБезНДСОплата);
		СтрокаТаблицы.НДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
		СтрокаТаблицы.НДСПредъявлено0 + СтрокаТаблицы.НДСПредъявленоНеПодтверждено0, 
		СтрокаТаблицы.НДСОплата);
		СтрокаТаблицы.ВалютнаяСуммаСНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС,
		ДополнительныеСвойства.ВалютаБухУчета,
		СтрокаТаблицы.ВалютаАванса,
		1, СтрокаТаблицы.КурсАванса,
		1, 1);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками_НДС (СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)

	Если Не СтруктураШапкиДокумента.ПроводитьПоПодсистемеНДС Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками;
	
	ТаблицаДвиженийНДСРасчетыСПоставщиками = ДвиженияНДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами
			И НЕ СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация				= СтрокаТаблицы.Организация;
		Если СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			СтрокаДвижения.Поставщик			= СтрокаТаблицы.Поставщик;
			СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
		КонецЕсли;
		СтрокаДвижения.Документ					= СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.РасчетыСБюджетом			= Истина;
		СтрокаДвижения.Сумма					= СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаДвижения.ДатаСобытия				= СтрокаТаблицы.СчетФактура.Дата;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	ТаблицаДвиженийНДСРасчетыСПоставщиками.Индексы.Добавить("Сумма");
	СтрокиКУдалению = ТаблицаДвиженийНДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("Сумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийНДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ТаблицаДвиженийНДСРасчетыСПоставщиками.Количество() > 0 Тогда
		
		ДвиженияНДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПоставщиками;
		ДвиженияНДСРасчетыСПоставщиками.ВыполнитьПриход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРасчетыСПоставщиками.Очистить();
	
		Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.СМРСобственнымиСилами
			И НЕ СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация				= СтрокаТаблицы.Организация;
		Если СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			СтрокаДвижения.Поставщик			= СтрокаТаблицы.Поставщик;
			СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
		КонецЕсли;
		СтрокаДвижения.Документ					= СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.РасчетыСБюджетом			= Истина;
		СтрокаДвижения.Сумма					= СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата;
		СтрокаДвижения.ДатаСобытия				= СтрокаТаблицы.СчетФактура.Дата;
		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	ТаблицаДвиженийНДСРасчетыСПоставщиками.Индексы.Добавить("Сумма");
	СтрокиКУдалению = ТаблицаДвиженийНДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("Сумма", 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийНДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
	КонецЦикла;

	Если ТаблицаДвиженийНДСРасчетыСПоставщиками.Количество() > 0 Тогда
		ДвиженияНДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПоставщиками;
		ДвиженияНДСРасчетыСПоставщиками.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, ИмяСуммаБезНДС, ИмяНДС, Заменить = Истина)
	
	Если Заменить Тогда
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = "УдалитьСуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.НДС.Имя = "УдалитьНДС";
		ТаблицаПоДвижениям.Колонки[ИмяСуммаБезНДС].Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки[ИмяНДС].Имя = "НДС";
	Иначе
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = ИмяСуммаБезНДС;
		ТаблицаПоДвижениям.Колонки.НДС.Имя = ИмяНДС;
		ТаблицаПоДвижениям.Колонки.УдалитьСуммаБезНДС.Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.УдалитьНДС.Имя = "НДС";
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПустыеДвижения(ТаблицаПоДвижениям)
	
	Счетчик = ТаблицаПоДвижениям.Количество();
	
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		
		Если (ТаблицаПоДвижениям[Счетчик].СуммаБезНДС = 0) И (ТаблицаПоДвижениям[Счетчик].НДС = 0) Тогда
			
			ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДвиженияПоВидуЦенности(ТаблицаПоДвижениям, ВидЦенности, ВидСравненияРавно = Истина)
	
	Счетчик = ТаблицаПоДвижениям.Количество();
	
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		
		Если ВидСравненияРавно Тогда
			Если (ТаблицаПоДвижениям[Счетчик].ВидЦенности = ВидЦенности) Тогда
				ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			КонецЕсли;
			
		Иначе
			Если (ТаблицаПоДвижениям[Счетчик].ВидЦенности <> ВидЦенности) Тогда
				ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСчетаФактуры(СоздаватьПодчиненныеДокументыОснования = Ложь, ОбновитьСодержаниеПодчиненныхДокументов = Истина, СоздаватьСчетаФактуры = Истина, Отказ = Ложь) Экспорт	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДанныеПоСФ", ДанныеПоСФНДС);
	Запрос.УстановитьПараметр("РазделУчета", РазделУчета);
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВНО_НДСДанныеПоСФ.Контрагент КАК Контрагент,
		|	ВНО_НДСДанныеПоСФ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ПредъявленСФ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПредъявленСФ,
		|	ВНО_НДСДанныеПоСФ.ДатаСФ КАК ДатаСФ,
		|	ВНО_НДСДанныеПоСФ.НомерСФ КАК НомерСФКакУказан,
		|	ВНО_НДСДанныеПоСФ.СчетФактура КАК ТекущийДокумент,
		|	ВНО_НДСДанныеПоСФ.НомерСтроки КАК НомерСтроки,
		|	ВНО_НДСДанныеПоСФ.СуммаБезНДС Как Сумма,
		|	ВНО_НДСДанныеПоСФ.НДС Как СуммаНДС,
		|";
		
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям 
			или РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			Запрос.Текст = Запрос.Текст + "
			|ВНО_НДСДанныеПоСФ.ВидЦенности Как ВидЦенности,
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютаАванса
		|		ИНАЧЕ &ВалютаРегламентированногоУчета
		|	КОНЕЦ КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА &РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютнаяСуммаСНДС
		|		ИНАЧЕ ВНО_НДСДанныеПоСФ.СуммаБезНДС + ВНО_НДСДанныеПоСФ.НДС
		|	КОНЕЦ КАК СуммаДокумента
		| Поместить ПараметрыДокументов
		|ИЗ
		|	&ДанныеПоСФ КАК ВНО_НДСДанныеПоСФ
		|";
	Запрос.Выполнить();
	
	Запрос.Текст ="Выбрать * из ПараметрыДокументов 		
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	ПараметрыДокументов.Колонки.Добавить("ДатаВходящего");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящегоКакУказан");
	
	Для Каждого СтрокаПараметров ИЗ ПараметрыДокументов Цикл
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
			Если СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
				СтрокаПараметров.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
				СтрокаПараметров.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ИначеЕсли РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
				СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		СтрокаПараметров.ДатаВходящего = СтрокаПараметров.ТекущийДокумент.ДатаВходящегоДокумента;
		СтрокаПараметров.НомерВходящегоКакУказан = СтрокаПараметров.ТекущийДокумент.НомерВходящегоДокумента;
	КонецЦикла;
	
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	ПараметрыДокументов.Индексы.Добавить("ТекущийДокумент");
	
	ИспользоватьПрефиксыПриОтработкеНомеров = НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям;
	ПрефиксОрганизации = ?(ЗначениеЗаполнено(Организация.Префикс),Организация.Префикс,"0");
	СписокПрефиксов = Новый СписокЗначений();
	
	Если ИспользоватьПрефиксыПриОтработкеНомеров Тогда
		МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
			МассивПрефиксов.Добавить("А"+ПрефиксОрганизации);
		КонецЕсли; 
		СписокПрефиксов.ЗагрузитьЗначения(МассивПрефиксов);
	КонецЕсли; 
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	КонецЦикла; 
	
	ПодчиненныеДокументы = ПолучитьТаблицуПодчиненныхДокументов(Ссылка, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	
	ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы);
	
	СокращеннаяТаблица = ПараметрыДокументов.Скопировать();
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
		СокращеннаяТаблица.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ТекущийДокумент","");
	Иначе
		СокращеннаяТаблица.Свернуть("Контрагент, ДоговорКонтрагента, ВидЦенности, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ТекущийДокумент","");
	КонецЕсли;
	
	СокращеннаяТаблица.Колонки.Добавить("МассивОснований");
	СокращеннаяТаблица.Колонки.Добавить("СчетФактура");
	
	СтруктураПоискаОснования= Новый Структура("ДокументОснование");
	СтруктураПоискаСФ		= Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ");
	
	Для каждого СтрокаПараметров Из СокращеннаяТаблица Цикл
		
		СтруктураПоискаОснования.Вставить("ДокументОснование", СтрокаПараметров.ТекущийДокумент);
		//ЗаполнитьЗначенияСвойств(СтруктураПоискаОснования, СтрокаПараметров);
		СтрокиОснований = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаОснования);
		АвансВыданный = Ложь;
		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
			Если СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные Тогда
				АвансВыданный = Истина;
			КонецЕсли;
		КонецЕсли;
		
		МассивОснований = новый Массив();
		НоваяСтрокаОснования = Неопределено;
		Если СтрокиОснований.Количество() = 0 Тогда
			МассивОснований.Добавить(СтрокаПараметров.ТекущийДокумент);
		Иначе
			Для каждого СтрокаОснования Из СтрокиОснований Цикл
				МассивОснований.Добавить(СтрокаОснования.ДокументОснование);
			КонецЦикла; 
		КонецЕсли;
		
		СтрокаПараметров.МассивОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОснований,Истина);
		
		Если СтрокаПараметров.ПредъявленСФ тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСФ, СтрокаПараметров);
			СтрокиСФ = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаСФ);
			Если СтрокиСФ.Количество() = 0 Тогда
				Если НЕ СоздаватьСчетаФактуры Тогда
					//не создаем документы
				ИначеЕсли СтрокаПараметров.МассивОснований.Количество()>0 Тогда
					// Ничего не найдено.
					Если (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям)
						или (РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным И АвансВыданный) Тогда
						ОснованиеСФ = СоздатьДокументСчетФактураПолученный(СтрокаПараметров, Ссылка, РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным);
						Попытка
							ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать полученный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
							ОснованиеСФ = Неопределено;
							Отказ = Истина;
						КонецПопытки; 
							
					Иначе
						ОснованиеСФ = СоздатьДокументСчетФактураВыданный(СтрокаПараметров, Ссылка, ПрефиксОрганизации);
						Попытка
							ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							Попытка
								Если не ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ Тогда
									ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ;
									ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
								Иначе
									ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
									ОснованиеСФ = Неопределено;
									Отказ = Истина;
								КонецЕсли; 
							Исключение
								ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
								ОснованиеСФ = Неопределено;
								Отказ = Истина;
							КонецПопытки; 
						КонецПопытки;
					КонецЕсли; 
					СтрокаПараметров.СчетФактура = ?(ОснованиеСФ = Неопределено, Неопределено,ОснованиеСФ.Ссылка);
					
					Если не НоваяСтрокаОснования = Неопределено Тогда
						НоваяСтрокаОснования = ПодчиненныеДокументы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, СтрокаПараметров);
					КонецЕсли;
				КонецЕсли; 
			Иначе
				СтрокаПараметров.СчетФактура = СтрокиСФ[0].СчетФактура;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего");
	
	ПараметрыДокументов.Колонки.Добавить("НовоеОснование");
	ПараметрыДокументов.Колонки.Добавить("НовыйСчетФактура");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПараметров);
		СтрокиОснований = СокращеннаяТаблица.НайтиСтроки(СтруктураПоиска);
		
		// Таблица получена из таблицы параметров, всегда находится одна строка
		СтрокаОснований = СтрокиОснований[0];
		
		// Не более чем одна строка
		Если СтрокаОснований.МассивОснований.Количество() = 0 Тогда
			// Ничего не найдено.
		Иначе
			Если ЗначениеЗаполнено(СтрокаПараметров.ТекущийДокумент) Тогда
				//Ищем в массиве выбранное ранее основание. Если есть - используем его, чтобы не подменять ссылки.
				Для каждого ЭлементМассика Из СтрокаОснований.МассивОснований Цикл
					Если СтрокаПараметров.ТекущийДокумент = ЭлементМассика Тогда
						СтрокаПараметров.НовоеОснование = СтрокаПараметров.ТекущийДокумент;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) и СоздаватьПодчиненныеДокументыОснования Тогда
				СтрокаПараметров.НовоеОснование = СтрокаОснований.МассивОснований[0];
			КонецЕсли;
			СтрокаПараметров.НовыйСчетФактура = СтрокаОснований.СчетФактура;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		#Если Клиент Тогда
		ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
		#КонецЕсли
	КонецЕсли;
	
	мПодчиненныеДокументы = Новый ТаблицаЗначений();
	мПодчиненныеДокументы.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(ПодчиненныеДокументы.Колонки.ДокументОснование.ТипЗначения,ПодчиненныеДокументы.Колонки.СчетФактура.ТипЗначения.Типы()));
	мПодчиненныеДокументы.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	мПодчиненныеДокументы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ИспользуемыеПодчиненныеДокументы = Новый списокЗначений();
	ИспользуемыеПодчиненныеДокументы.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовоеОснование"),Истина));
	
	ИспользуемыеСчетаФактуры = Новый списокЗначений();
	ИспользуемыеСчетаФактуры.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовыйСчетФактура"),Истина));
	
	ВсеПодчиненныеДокументы = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("ДокументОснование"),Истина);
	Для каждого Документ Из ВсеПодчиненныеДокументы Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеПодчиненныеДокументы.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
	
	ВсеПодчиненныеСчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого Документ Из ВсеПодчиненныеСчетаФактуры Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеСчетаФактуры.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

// Сокращает номер документа - удаляет префиксы и лидирующие 0
//
Функция ПолучитьНомерДляСравнения(Знач Номер, ИспользоватьПрефиксы = Ложь, СписокПрефиксов = Неопределено)
	
	Если не ЗначениеЗаполнено(Номер) Тогда Возврат ""; КонецЕсли; 

	Если ИспользоватьПрефиксы Тогда
		//Список префиксов определен ранее	
	Иначе
		СписокПрефиксов = Новый СписокЗначений();
	КонецЕсли;
	
	Если СписокПрефиксов.Количество() = 0 Тогда
		СписокПрефиксов.Добавить("");
	КонецЕсли;
	
	Для Каждого ЭлементСписка ИЗ СписокПрефиксов Цикл
		
		ТекущийПрефикс = ЭлементСписка.Значение;
		
		// удаление префикса из номера документа
		Если Найти(Номер, ТекущийПрефикс)=1 Тогда 
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;

	Возврат СокрЛП(Номер);

КонецФункции

Функция ПолучитьТаблицуПодчиненныхДокументов(ДокументОснование, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов) экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВводНачальныхОстатков.Контрагент,
	               |	ВводНачальныхОстатков.ДоговорКонтрагента,
				   |	ВводНачальныхОстатков.ВидЦенности,
	               |	ВводНачальныхОстатков.СчетФактура.Дата КАК ДатаВходящего,
	               |	ВводНачальныхОстатков.СчетФактура.Номер КАК НомерВходящегоКакУказан,
	               |	ВЫБОР
	               |		КОГДА СчетаФактуры.Ссылка ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПредъявленСФ,
	               |	ЕСТЬNULL(СчетаФактуры.ДатаСФ, НЕОПРЕДЕЛЕНО) КАК ДатаСФ,
	               |	ЕСТЬNULL(СчетаФактуры.НомерСФ, НЕОПРЕДЕЛЕНО) КАК НомерСФКакУказан,
	               |	ВводНачальныхОстатков.СчетФактура КАК ДокументОснование,
	               |	СчетаФактуры.Ссылка КАК СчетФактура
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ВводНачальныхОстатков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ОснованияСФ.Ссылка КАК Ссылка,
	               |			НАЧАЛОПЕРИОДА(ОснованияСФ.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
	               |			ОснованияСФ.Ссылка.Номер КАК НомерСФ,
	               |			ОснованияСФ.ДокументОснование КАК ДокументОснование
	               |		ИЗ
	               |			Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСФ
	               |		ГДЕ
	               |			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
	               |			И ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ОснованияСФ.Ссылка,
	               |			ОснованияСФ.Ссылка.ДатаВходящегоДокумента,
	               |			ОснованияСФ.Ссылка.Номер,
	               |			ОснованияСФ.ДокументОснование
	               |		ИЗ
	               |			Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСФ
	               |		ГДЕ
	               |			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
	               |			И ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом) КАК СчетаФактуры
	               |		ПО ВводНачальныхОстатков.СчетФактура = СчетаФактуры.ДокументОснование
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ВНО_НДС";
		
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
		Если СтрокаПараметров.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
			СтрокаПараметров.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			СтрокаПараметров.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла; 
	ПараметрыДокументов.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ДокументОснование, СчетФактура","");
	
	Возврат ПараметрыДокументов;
	
КонецФункции

Процедура ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы)
	
	НаборТекущихДокументов = ПараметрыДокументов.Скопировать();
	НаборТекущихДокументов.Свернуть("ДатаВходящего,НомерВходящего,ТекущийДокумент, ДатаСФ, НомерСФ");
	
	НаборТекущихДокументов = ТаблицуЗначенийВДеревоСГруппировкой(НаборТекущихДокументов, "ТекущийДокумент");
	
	Для каждого СтрокаДокумента Из НаборТекущихДокументов.Строки Цикл
		Если не ЗначениеЗаполнено(СтрокаДокумента.ТекущийДокумент) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаНовогоНомера = Неопределено;
		// По одному документу разные номера. Это недопустимо.
		// Необходимо затереть ссылки на текущий документ в таблице параметров.
		Для каждого СтрокаДаты_Номера Из СтрокаДокумента.Строки Цикл
			СтруктураПоиска = Новый Структура ("ДокументОснование, ДатаВходящего, НомерВходящего"
							, СтрокаДаты_Номера.ТекущийДокумент,СтрокаДаты_Номера.ДатаВходящего,СтрокаДаты_Номера.НомерВходящего);
			СтрокиПодчиненныхДокументов = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПодчиненныхДокументов.Количество() > 0 Тогда
				// Это старый номер. Оставляем его у основания, Затираем ссылки на текущий документ по строкам таблицы параметров.
				СтрокаНовогоНомера = СтрокаДаты_Номера;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
			 
		Если СтрокаНовогоНомера = Неопределено Тогда
			// Ни один из номеров не соотвествует введенному ранее. 
			// Берем номер из первой строки
			СтрокаНовогоНомера = СтрокаДокумента.Строки[0];
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Истина;
		Иначе
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Ложь;
		КонецЕсли; 
		
		Если ЗаменитьНомерВТаблицеПодчиненныхДокументов Тогда
			СтрокиДляЗамены = ПодчиненныеДокументы.НайтиСтроки(Новый Структура("ДокументОснование",СтрокаНовогоНомера.ТекущийДокумент));
			Для каждого СтрокаДляЗаменыНомера Из СтрокиДляЗамены Цикл
				СтрокаДляЗаменыНомера.ДатаВходящего		= СтрокаНовогоНомера.ДатаВходящего;
				СтрокаДляЗаменыНомера.НомерВходящего	= СтрокаНовогоНомера.НомерВходящего;
			КонецЦикла; 
		КонецЕсли; 
		
		Если СтрокаДокумента.Строки.Количество()>1 Тогда
			СтрокиТаблицыПараметров = ПараметрыДокументов.НайтиСтроки(Новый Структура("ТекущийДокумент",СтрокаДокумента.ТекущийДокумент));
			Для каждого СтрокаТаблицыПараметров Из СтрокиТаблицыПараметров Цикл
				Если СтрокаТаблицыПараметров.ДатаВходящего = СтрокаНовогоНомера.ДатаВходящего
					и СтрокаТаблицыПараметров.НомерВходящего = СтрокаНовогоНомера.НомерВходящего
				 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыПараметров.ТекущийДокумент = Неопределено;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// Создает документ вида СчетФактураПолученный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураПолученный (не записан)
//
Функция СоздатьДокументСчетФактураПолученный(СтрокаПараметров, ДокументОснование, НаАванс = Ложь)
	НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,ДокументОснование.Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	НовыйДокумент.Номер	= СтрокаПараметров.НомерСФ;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	Если НаАванс Тогда
		НовыйДокумент.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
	КонецЕсли;

	Возврат НовыйДокумент;	
КонецФункции

// Создает документ вида СчетФактураВыданный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураПолученный (не записан)
//
Функция СоздатьДокументСчетФактураВыданный(СтрокаПараметров, ДокументОснование, ПрефиксОрганизации)
	НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,ДокументОснование.Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	//НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	//НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	НовыйДокумент.ВидСчетаФактуры = ?(ДокументОснование.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным
									, Перечисления.НДСВидСчетаФактуры.НаАванс
									, Перечисления.НДСВидСчетаФактуры.НаРеализацию);
	// Установка номера формируемого документа
	НовыйДокумент.Номер = УстановитьНомерСФсУчетомПрефикса(СтрокаПараметров.НомерСФ, ПрефиксОрганизации, НовыйДокумент.Метаданные().ДлинаНомера);
	
	Возврат НовыйДокумент;
	
КонецФункции

// Формирует номер документа с учетом префиксов с указанной значащей частью
Функция УстановитьНомерСФсУчетомПрефикса(НомерСФ, Префикс,ДлинаНомераДок)
	
	ЧистыйНомер = СокрЛП(НомерСФ);
	НовыйНомер = Префикс;
	
	Если СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) > ДлинаНомераДок Тогда
		Возврат ЧистыйНомер;
	КонецЕсли;		
	
	Пока СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) < ДлинаНомераДок Цикл
		НовыйНомер = НовыйНомер + "0";
	КонецЦикла;
	
	Возврат НовыйНомер+ЧистыйНомер;

КонецФункции

#Если Клиент Тогда
Процедура ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования, ИспользоватьПрефиксыПриОтработкеНомеров = Ложь, СписокПрефиксов = Неопределено) Экспорт
	//Обновление документов-оснований
	ДеревоДокументов = ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовоеОснование","СуммаДокумента, Сумма, СуммаНДС");
	ЗаголовокДокумента = СокрЛП("Ввод начальных остатков "+Номер+" от "+Формат(Дата,"ДЛФ =Д"));
	
	РасшифровкаСФ = Неопределено;
	
	//Обновление счетов-фаткур
	ПараметрыДокументов.Свернуть("НовыйСчетФактура,Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ,НовоеОснование, ВалютаДокумента,НомерСтроки, ДатаВходящего, НомерВходящего", "Сумма, СуммаНДС, СуммаДокумента");
	ДеревоДокументов = ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовыйСчетФактура","СуммаДокумента, Сумма, СуммаНДС");

	Для каждого СтрокаДокументаОснования Из ДеревоДокументов.Строки Цикл
		Если не СтрокаДокументаОснования.Строки[0].ПредъявленСФ 
			или не ЗначениеЗаполнено(СтрокаДокументаОснования.НовыйСчетФактура) Тогда
			Продолжить;
		КонецЕсли; 

		ОснованиеОбъект = СтрокаДокументаОснования.НовыйСчетФактура.ПолучитьОбъект();
		СтрокаПараметров = СтрокаДокументаОснования.Строки[0];
		
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			ОснованиеОбъект.Организация				= Организация;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
		Иначе
			Если не ОснованиеОбъект.Организация = Организация Тогда
				ОснованиеОбъект.Номер = "";
			КонецЕсли; 
			
			ОснованиеОбъект.Организация				= Организация;
			СтараяДата = ОснованиеОбъект.Дата;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
		КонецЕсли; 
		
		ОснованиеОбъект.Контрагент				= СтрокаПараметров.Контрагент;
		ОснованиеОбъект.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	
		ОснованиеОбъект.СуммаДокумента			= СтрокаДокументаОснования.СуммаДокумента;
		ОснованиеОбъект.ВалютаДокумента			= СтрокаПараметров.ВалютаДокумента;
		Если ТипЗнч(ОснованиеОбъект.Ссылка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			ОснованиеОбъект.Комментарий				= "Создан автоматически документом <"+ЗаголовокДокумента+">";
		КонецЕсли;
		ОснованиеОбъект.ПометкаУдаления			= Ложь;
		
		ОснованиеОбъект.СформированПриВводеНачальныхОстатковНДС = Истина;
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ОснованиеОбъект.ВидСчетаФактуры = ?(РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным
										, Перечисления.НДСВидСчетаФактуры.НаАванс
										, Перечисления.НДСВидСчетаФактуры.НаРеализацию);
										
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
				
				Если ОснованиеОбъект.Авансы.Количество() = 0 Тогда
					СтрокаАвансов = ОснованиеОбъект.Авансы.Добавить();
				Иначе
					СтрокаАвансов = ОснованиеОбъект.Авансы.Получить(0);
				КонецЕсли;
				
				СтрокаАвансов.Сумма	= СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;
				СтрокаАвансов.СуммаНДС	= СтрокаДокументаОснования.СуммаНДС;
				Если РасшифровкаСФ= Неопределено Тогда
					РасшифровкаСФ = ДанныеПоСФНДС.Выгрузить(); 
					Для Каждого СтрокаРасшифровкиСФ ИЗ РасшифровкаСФ Цикл
						СтрокаРасшифровкиСФ.НомерСФ = ПолучитьНомерДляСравнения(СтрокаРасшифровкиСФ.НомерСФ, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
					КонецЦикла;
				КонецЕсли;
				СтрокаАвансов.СтавкаНДС = "";
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СчетФактура",СтрокаДокументаОснования.Строки[0].НовоеОснование);
				СтруктураПоиска.Вставить("ДатаСФ",СтрокаДокументаОснования.Строки[0].ДатаСФ);
				СтруктураПоиска.Вставить("НомерСФ",СтрокаДокументаОснования.Строки[0].НомерСФ);
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					СтрокаАвансов.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС;
					Прервать; 
				КонецЦикла; 
				Если не ЗначениеЗаполнено(СтрокаАвансов.СтавкаНДС) Тогда
					СтрокаАвансов.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли; 
				
			КонецЕсли;
		Иначе
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
				
				ОснованиеОбъект.СуммаДокумента = СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;
				
				Если ОснованиеОбъект.Авансы.Количество() = 0 Тогда
					СтрокаАвансов = ОснованиеОбъект.Авансы.Добавить();
				Иначе
					СтрокаАвансов = ОснованиеОбъект.Авансы.Получить(0);
				КонецЕсли;
				
				СтрокаАвансов.Сумма	= СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;
				СтрокаАвансов.СуммаНДС	= СтрокаДокументаОснования.СуммаНДС;
				Если РасшифровкаСФ= Неопределено Тогда
					РасшифровкаСФ = ДанныеПоСФНДС.Выгрузить(); 
					Для Каждого СтрокаРасшифровкиСФ ИЗ РасшифровкаСФ Цикл
						СтрокаРасшифровкиСФ.НомерСФ = ПолучитьНомерДляСравнения(СтрокаРасшифровкиСФ.НомерСФ, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
					КонецЦикла;
				КонецЕсли;
				СтрокаАвансов.СтавкаНДС = "";
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СчетФактура",СтрокаДокументаОснования.Строки[0].НовоеОснование);
				СтруктураПоиска.Вставить("ДатаСФ",СтрокаДокументаОснования.Строки[0].ДатаСФ);
				СтруктураПоиска.Вставить("НомерСФ",СтрокаДокументаОснования.Строки[0].НомерСФ);
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					СтрокаАвансов.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС;
					Прервать; 
				КонецЦикла; 
				Если не ЗначениеЗаполнено(СтрокаАвансов.СтавкаНДС) Тогда
					СтрокаАвансов.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли; 
				
			КонецЕсли;
			
			ОснованиеОбъект.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
			ОснованиеОбъект.Номер	= СтрокаПараметров.НомерСФ;
		КонецЕсли; 
		ОснованиеОбъект.ДокументыОснования.Очистить();
		
		Для каждого СтрокаПараметров Из СтрокаДокументаОснования.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) 
				и ОснованиеОбъект.ДокументыОснования.Найти(СтрокаПараметров.НовоеОснование, "ДокументОснование") = неопределено Тогда
				ОснованиеОбъект.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.НовоеОснование;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			
			ОснованиеОбъект.ДатаНомерДокументовОплаты.Очистить();
			ОснованиеОбъект.ДатаНомерДокументовОплаты.Добавить();
			
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСпоАвансамПолученным Тогда
				ОснованиеОбъект.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = СтрокаПараметров.ДатаВходящего;
				ОснованиеОбъект.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = СтрокаПараметров.НомерВходящего;
				
				ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= СтрокаПараметров.ДатаВходящего;
				ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= СтрокаПараметров.НомерВходящего;
			Иначе
				ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= Неопределено;
				ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= Неопределено;
			КонецЕсли;
		КонецЕсли;
		Попытка
			ОснованиеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Для каждого СтрокаТабличнойЧасти Из СтрокаДокументаОснования.Строки Цикл
				ОбщегоНазначения.СообщитьОбОшибке("Для строки №" + СтрокаТабличнойЧасти.НомерСтроки + " не удалось обновить параметры документа-основания счета-фактуры.");
			КонецЦикла; 
		Конецпопытки;

	КонецЦикла;
	
КонецПроцедуры    
#КонецЕсли

Процедура СинхронизацияСостоянияПодчиненныхДокументов() Экспорт

	Если мОтказЗаписи Тогда Возврат; КонецЕсли;

	//Если мПодчиненныеДокументы = Неопределено Тогда
			СформироватьСчетаФактуры(Ложь, Ложь, Ложь);
	//КонецЕсли;
	
	Запрос=Новый Запрос;
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.УстановитьПараметр("таблица", мПодчиненныеДокументы);
	Запрос.УстановитьПараметр("ПометкаУдаления",ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", Проведен и не ПометкаУдаления);
	Запрос.Текст="ВЫБРАТЬ *
	| Поместить ПодчиненныеДокументы
	|ИЗ
	|	&таблица КАК ПодчиненныеДокументы
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат; КонецЕсли; 

	Запрос.Текст ="Выбрать 
		|	ПодчиненныеДокументы.Ссылка КАК Ссылка,
		|	ПодчиненныеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	ПодчиненныеДокументы.Ссылка.Проведен КАК Проведен,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|			 ТОГДА ЛОЖЬ
		|		КОГДА ПодчиненныеДокументы.Использован
		|			 ТОГДА &Проведен 
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Провести,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Использован
		|			ТОГДА &ПометкаУдаления
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПометитьНаУдаление
		|ИЗ
		|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА не Использован
		|				ТОГДА (НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления)
		|			КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|				ТОГДА НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления
		|			ИНАЧЕ (НЕ(ПодчиненныеДокументы.Ссылка.Проведен = &Проведен
		|							И ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления))
		|		КОНЕЦ
		|	Упорядочить По НомерСтроки " + ?(ПометкаУдаления," Убыв","");
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат=Неопределено Тогда Возврат; КонецЕсли;

	Пока Результат.Следующий() Цикл
		Если не ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
			Если Результат.ПометитьНаУдаление Тогда
			 	ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ИначеЕсли Результат.Провести тогда
				Если Результат.ПометкаУдаления тогда
					ДокументОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);				
			ИначеЕсли Результат.Проведен тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);  
			Иначе
			 	ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли; 
		Исключение
		    // Не удалось обновить документ. Он сам об этом расскажет.
		КонецПопытки;
	КонецЦикла; 

КонецПроцедуры

//*****************************************************************************************************************************
// ОСТАТКИ РБП

Процедура ОбработкаПроведения_РасходыБудущихПериодов(Отказ)
	
	Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
		ФормированиеПроводокБух_РасходыБудущихПериодов(БухСправка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасходыБудущихПериодов(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		//Если СтрокаБухСправки.Сумма = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		СчетУчета = СтрокаБухСправки.СчетУчета;
		
		Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
		
		ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
		
		Для Сч = 1 По ЧислоАктивныхСубконто Цикл
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], Сч, СтрокаБухСправки["Субконто"+Сч]);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхПолей, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти = "", ТаблицаУсловий = Неопределено, СтруктураОбязательныхПолейПодч = Неопределено, ИмяТабличнойЧастиПодч = Неопределено, ПредставлениеТабличнойЧастиПодч = "", ТаблицаУсловийПодч = Неопределено, Отступ = "")
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.УстановитьПараметр(Условие.ИмяРеквизита, Условие.ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ
	|";
	
	Шаг = 0;
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Шаг = Шаг + 1;
		Запрос.Текст = Запрос.Текст + "ВводНачальныхОстатков." + КлючЗначение.Ключ + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
		|";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков." + ИмяТабличнойЧасти + " КАК ВводНачальныхОстатков
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ТекущийДокумент
				   |";
	
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.Текст = Запрос.Текст + "
			| " + Условие.УсловиеОбъединения + " ВводНачальныхОстатков." + Условие.ИмяРеквизита + " " + Условие.ВидСравнения +
			?(Условие.ВидСравнения = "В", "(", "") + " &" + Условие.ИмяРеквизита + ?(Условие.ВидСравнения = "В", ")", "") + "
			|";
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()=0 Тогда Возврат; КонецЕсли;
	
	//Обработка ситуации исключения № 1
	Если РезультатЗапроса.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ИмяКолонкиНомерСтроки = "НомерСтрокиТЧ";
	Иначе
		ИмяКолонкиНомерСтроки = "НомерСтроки";
	КонецЕсли;
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
		Если ПредставлениеТабличнойЧасти = "" Тогда
			СтрокаНачалаСообщенияОбОшибке = Отступ + "В строке номер """+ СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]) +
			""" табличной части: ";	
		Иначе
			СтрокаНачалаСообщенияОбОшибке = Отступ + "В строке номер """+ СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]) +
			""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		КонецЕсли;
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаЗапроса[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					
					//Обработка ситуации исключения № 2
					Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
						Если ПредставлениеРеквизита = "Номенклатура" Тогда
							ПредставлениеРеквизита = "Капитальные вложения";
						КонецЕсли;
					КонецЕсли;
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения);
				//Отказ=Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ИмяТабличнойЧастиПодч <> Неопределено Тогда
			мТаблицаУсловий.Очистить();
			НовоеУсловие = мТаблицаУсловий.Добавить();
			НовоеУсловие.ИмяРеквизита = "Ключ";
			НовоеУсловие.ВидСравнения = "=";
			НовоеУсловие.УсловиеОбъединения = "И ";
			НовоеУсловие.ЗначениеРеквизита = СтрокаЗапроса.Ключ;
			ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхПолейПодч, ИмяТабличнойЧастиПодч, , ТаблицаУсловийПодч,,,,,"Подчиненная таблица """ + ПредставлениеТабличнойЧастиПодч + """.");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	Заголовок=ДополнительныеСвойства.Заголовок;
	мФормаДокумента = Неопределено;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеПредпринимателя", Ложь);	
	СтруктураШапкиДокумента.Вставить("ПроводитьПоПодсистемеНДС", Истина);

	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата+86400, УчетнаяПолитикаНеЗадана, СтруктураШапкиДокумента.Организация);
	ПоддержкаПБУ18 = НалоговыйУчет.ПрименениеПБУ18(ЭтотОбъект.Организация, СтруктураШапкиДокумента.Дата+86400);
	УСН = ОбщегоНазначения.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата+86400);
	УСН_ДР = УСН И (НЕ ОбщегоНазначения.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата+86400));
	Предприниматель = (СтруктураШапкиДокумента.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ УСН);
	ОСН = НЕ УСН И НЕ Предприниматель;
	Если УчетнаяПолитикаНеЗадана Тогда
		мОценкаМПЗПоСредней = Истина;
	Иначе
		мОценкаМПЗПоСредней = мУчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней;
	КонецЕсли;
	
	СодержаниеПроводки = СодержаниеПроводки(СтруктураШапкиДокумента.РазделУчета);
	мСложныйУчетНДС		= Ложь;
	
	Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
		Если НЕ УчетнаяПолитикаНеЗадана Тогда
			мСложныйУчетНДС = мУчетнаяПолитика.СложныйУчетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство Тогда
			ОбработкаПроведения_БухСправка(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			ОбработкаПроведения_Номенклатура(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
			ОбработкаПроведения_РасчетыПоНалогамИСборам(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
			ОбработкаПроведения_РасчетыСПодотчетнымиЛицами(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
			ОбработкаПроведения_РасчетыСКонтрагентами(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные Тогда
			ОбработкаПроведения_ТоварыОтгруженные(Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
			ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
			ОбработкаПроведения_ОстаткиПоНДС(Отказ);

		ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов Тогда
			ОбработкаПроведения_РасходыБудущихПериодов(Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Отказ = мОтказЗаписи;
		Если НЕ Проведен Тогда
			СинхронизацияСостоянияПодчиненныхДокументов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Раздел учета"", документ не записан.");
		Отказ = Истина;
	КонецЕсли;
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		Если мОбновитьСодержанияПодчиненныхДокументов = Неопределено Тогда
			мОбновитьСодержанияПодчиненныхДокументов = Ложь;
		КонецЕсли;
		Если мОтказЗаписи = Неопределено Тогда
			мОтказЗаписи = Ложь;
		КонецЕсли;
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда
		Иначе
			Если НЕ мОбновитьСодержанияПодчиненныхДокументов Тогда
				СформироватьСчетаФактуры(Ложь, Ложь, Истина, мОтказЗаписи);
			КонецЕсли;
		КонецЕсли;
		СинхронизацияСостоянияПодчиненныхДокументов();
	Конецесли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным
		ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям Тогда
		СинхронизацияСостоянияПодчиненныхДокументов();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);

мТаблицаУсловий = Новый ТаблицаЗначений();
мТаблицаУсловий.Колонки.Добавить("ИмяРеквизита");
мТаблицаУсловий.Колонки.Добавить("ВидСравнения");
мТаблицаУсловий.Колонки.Добавить("ЗначениеРеквизита");
мТаблицаУсловий.Колонки.Добавить("УсловиеОбъединения");

мТаблицаУсловийПодчБезКоличества = Новый ТаблицаЗначений();
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("ИмяРеквизита");
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("ВидСравнения");
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("ЗначениеРеквизита");
мТаблицаУсловийПодчБезКоличества.Колонки.Добавить("УсловиеОбъединения");
НовоеУсловие = мТаблицаУсловийПодчБезКоличества.Добавить();
НовоеУсловие.ИмяРеквизита = "ВидЦенности";
НовоеУсловие.ВидСравнения = "В";
НовоеУсловие.УсловиеОбъединения = "И НЕ";
мСписокВидовЦенностейУслуги = Новый СписокЗначений();
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
мСписокВидовЦенностейУслуги.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
НовоеУсловие.ЗначениеРеквизита = мСписокВидовЦенностейУслуги;

мСтруктураОбязательныхРеквизитовПодчКоличество = Новый Структура("Ключ, НомерСтрокиТЧ, Количество");
мПустаяСтруктураТЧ = Новый Структура("Ключ, НомерСтрокиТЧ");
мПустаяСтруктура = Новый Структура("Ключ, НомерСтроки");

СтруктураПараметровОперативногоУчета=Новый Структура;