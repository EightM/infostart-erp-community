&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы()
	тпТабличноеПоле_ОбновитьПредставление("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			УстановитьВидимостьЭлементовФормы();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	//*** тпТовары_Заполнить(Параметр2.Команда);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");		

	ИначеЕсли Элемент.Имя="Подвид" Тогда
		УстановитьВидимостьЭлементовФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Очистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="" Тогда
		СтандартнаяОбработка=Ложь;		
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);
		ОбновитьДанныеФормы();
		
	ИначеЕсли стрКоманда="ОбновитьПредставлениеТабличнойЧасти" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаСервере
Процедура тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть)
	//Если стрТабличнаяЧасть="Товары" Тогда
	//	ИспользоватьХарактеристики=ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	//	ИспользоватьСерии=ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	//КонецЕсли;

	//Для каждого СтрокаКоллекции Из Объект[стрТабличнаяЧасть] Цикл
	//	Если стрТабличнаяЧасть="Товары" И (ИспользоватьХарактеристики ИЛИ ИспользоватьСерии) Тогда
	//		СтруктураДанных=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(СтрокаКоллекции.Номенклатура, "ВестиУчетПоХарактеристикам,ВестиУчетПоСериям");
	//		СтрокаКоллекции.ХарактеристикиИспользуются=СтруктураДанных.ВестиУчетПоХарактеристикам;
	//		СтрокаКоллекции.СерииИспользуются=СтруктураДанных.ВестиУчетПоСериям;
	//	КонецЕсли;
	//	
	//	Если ЭтоКорректировка Тогда
	//		РезультатПоиска=тзДанные.Найти(СтрокаКоллекции.Номенклатура, "Номенклатура");
	//		Если НЕ РезультатПоиска=Неопределено Тогда
	//			СтрокаКоллекции.Количество=РезультатПоиска.Количество;
	//		КонецЕсли;
	//	КонецЕсли;		
	//КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		тпТовары_Заполнить(стрКоманда);		
		ОбновитьДанныеФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
		КонецЕсли;

	ИначеЕсли стрКолонка="Количество" Тогда
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура тпТовары_Заполнить(стрКоманда)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	
	Если стрКоманда="" Тогда
		
	ИначеЕсли стрКоманда="ЗаполнитьПоСериям" Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСерии(ДокументОбъект);
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Заказы"

&НаКлиенте
Процедура тпЗаказы_ПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьДанныеТаблиц", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура тпЗаказы_ПередУдалением(Элемент, Отказ)
	Для каждого СтрокаКоллекции Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные=Объект.Заказы.НайтиПоИдентификатору(СтрокаКоллекции);

		//Резервы
		МассивСтрок=Объект.Резервы.НайтиСтроки(Новый Структура("Заказ", ТекущиеДанные.Заказ));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Объект.Резервы.Удалить(СтрокаМассива);
		КонецЦикла;

		//Потребности
		МассивСтрок=Объект.Потребности.НайтиСтроки(Новый Структура("Заказ", ТекущиеДанные.Заказ));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Объект.Потребности.Удалить(СтрокаМассива);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Резервы"

&НаКлиенте
Процедура ОбновитьДанныеТаблиц()
	тпРезервы_Заполнить();
	тпПотребности_Заполнить();
КонецПроцедуры

&НаСервере
Процедура тпРезервы_Заполнить()
	тзРезервы.Очистить();

	Если Элементы.Заказы.ТекущаяСтрока=Неопределено Тогда Возврат; КонецЕсли;

	ДокументСсылка=Объект.Заказы.НайтиПоИдентификатору(Элементы.Заказы.ТекущаяСтрока).Заказ;
	Если ДокументСсылка=Неопределено Тогда Возврат; КонецЕсли; 
	
	МассивСтрок=Объект.Резервы.НайтиСтроки(Новый Структура("Заказ", ДокументСсылка));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(тзРезервы.Добавить(), СтрокаКоллекции);
	КонецЦикла;

	СтруктураПоиска=Новый Структура("Номенклатура,Склад,ХарактеристикаНоменклатуры,СерияНоменклатуры");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДата", Объект.Дата);
	Запрос.УстановитьПараметр("Заказ", ДокументСсылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Склад КАК Склад,
	|	ИсточникДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИсточникДанных.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ИсточникДанных.Заказ КАК Заказ,
	|	Сумма(ИсточникДанных.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.УчетРезервовТМЦ.Остатки(&НаДата, Заказ = &Заказ) КАК ИсточникДанных
	|Сгруппировать ПО
	|	Номенклатура,
	|	Склад,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	Заказ		
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		МассивСтрок=тзРезервы.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока=тзРезервы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"Количество");
			НоваяСтрока.КоличествоЗаказа=Выборка.Количество;
			НоваяСтрока.ID=Новый УникальныйИдентификатор;
		Иначе
			МассивСтрок[0].КоличествоЗаказа=Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпРезервы_ПередНачаломИзменения(Элемент, Отказ)
	Если НЕ Элемент.ТекущиеДанные.КоличествоЗаказа=0 Тогда
		Отказ=НЕ Элемент.ТекущийЭлемент.Имя="Резервы_Количество";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРезервы_ПередУдалением(Элемент, Отказ)
	Отказ=НЕ Элемент.ТекущиеДанные.КоличествоЗаказа=0;
	Если Отказ Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные=тзРезервы.НайтиПоИдентификатору(СтрокаКоллекции);
		МассивСтрок=Объект.Резервы.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Объект.Резервы.Удалить(СтрокаМассива);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпРезервы_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные=Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.ID=Новый УникальныйИдентификатор;
		ТекущиеДанные.Заказ=Элементы.Заказы.ТекущиеДанные.Заказ;
		ЗаполнитьЗначенияСвойств(Объект.Резервы.Добавить(), ТекущиеДанные);
	Иначе
		МассивСтрок=Объект.Резервы.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
		Если МассивСтрок.Количество()=0 Тогда
			МассивСтрок.Добавить(Объект.Резервы.Добавить());	
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МассивСтрок[0], ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Потребности"

&НаСервере
Процедура тпПотребности_Заполнить()
	тзПотребности.Очистить();

	Если Элементы.Заказы.ТекущаяСтрока=Неопределено Тогда Возврат; КонецЕсли;

	ДокументСсылка=Объект.Заказы.НайтиПоИдентификатору(Элементы.Заказы.ТекущаяСтрока).Заказ;
	Если ДокументСсылка=Неопределено Тогда Возврат; КонецЕсли; 

	МассивСтрок=Объект.Потребности.НайтиСтроки(Новый Структура("Заказ", ДокументСсылка));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(тзПотребности.Добавить(), СтрокаКоллекции);
	КонецЦикла;

	СтруктураПоиска=Новый Структура("Номенклатура,Склад,ХарактеристикаНоменклатуры");
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументСсылка);
	Запрос.УстановитьПараметр("НаДата", Объект.Дата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Склад КАК Склад,
	|	ИсточникДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИсточникДанных.ДокументРезерва КАК Заказ,
	|	Сумма(ИсточникДанных.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.УчетПотребностей.Остатки(&НаДата, ДокументРезерва = &Заказ) КАК ИсточникДанных
	|Сгруппировать ПО
	|	Номенклатура,
	|	Склад,
	|	ХарактеристикаНоменклатуры,
	|	ДокументРезерва
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		МассивСтрок=тзПотребности.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока=тзПотребности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"Количество");
			НоваяСтрока.КоличествоЗаказа=Выборка.Количество;
			НоваяСтрока.ID=Новый УникальныйИдентификатор;
		Иначе
			МассивСтрок[0].КоличествоЗаказа=Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпПотребности_ПередНачаломИзменения(Элемент, Отказ)
	Если НЕ Элемент.ТекущиеДанные.КоличествоЗаказа=0 Тогда
		Отказ=НЕ Элемент.ТекущийЭлемент.Имя="Потребности_Количество";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПотребности_ПередУдалением(Элемент, Отказ)
	Отказ=НЕ Элемент.ТекущиеДанные.КоличествоЗаказа=0;
	Если Отказ Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные=тзПотребности.НайтиПоИдентификатору(СтрокаКоллекции);
		МассивСтрок=Объект.Потребности.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			Объект.Потребности.Удалить(СтрокаМассива);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпПотребности_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные=Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.ID=Новый УникальныйИдентификатор;
		ТекущиеДанные.Заказ=Элементы.Заказы.ТекущиеДанные.Заказ;
		ЗаполнитьЗначенияСвойств(Объект.Потребности.Добавить(), ТекущиеДанные);
	Иначе
		МассивСтрок=Объект.Потребности.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
		Если МассивСтрок.Количество()=0 Тогда
			МассивСтрок.Добавить(Объект.Потребности.Добавить());
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МассивСтрок[0], ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпТабличноеПоле_ОбновитьПредставление("Товары");
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
	//УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
