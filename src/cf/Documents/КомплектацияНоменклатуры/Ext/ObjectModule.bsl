Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 	
	Если НЕ ЗначениеЗаполнено(Качество) Тогда
		Качество=Справочники.Качество.Новый;
	КонецЕсли;
	Для Каждого СтрокаТабличнойЧасти из Материалы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
			СтрокаТабличнойЧасти.Качество=Справочники.Качество.Новый;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Склад.Пустая() Тогда
			СтрокаТабличнойЧасти.Склад=Склад;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подготовка таблиц для проведения

Процедура ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзСсылка, стрВидТабличнойЧасти="")
	СтруктураРеквизитов=Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Период", Дата);
	СтруктураРеквизитов.Вставить("Активность", Истина);
	СтруктураРеквизитов.Вставить("Регистратор", Ссылка);
	СтруктураРеквизитов.Вставить("ВидТабличнойЧасти", стрВидТабличнойЧасти);
	Для каждого СтрокаКоллекции Из СтруктураРеквизитов Цикл
		тзСсылка.Колонки.Добавить(СтрокаКоллекции.Ключ);
		тзСсылка.ЗаполнитьЗначения(СтрокаКоллекции.Значение, СтрокаКоллекции.Ключ);
	КонецЦикла;	
КонецПроцедуры
 
Функция СформироватьТаблицу_Материалы(СтруктураШД, Отказ, Заголовок)
	МассивТипов=Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннийЗаказ"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	тзДанные=Материалы.Выгрузить();
	тзДанные.Колонки.Добавить("КоличествоДок", Новый ОписаниеТипов("Число"));
	тзДанные.Колонки.Добавить("ЗаказПартии", Новый ОписаниеТипов(МассивТипов));	
	тзДанные.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзДанные.Колонки.Добавить("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		СтрокаКоллекции.КоличествоДок=СтрокаКоллекции.Количество;
		СтрокаКоллекции.Количество=СтрокаКоллекции.Количество*СтрокаКоллекции.Коэффициент/СтрокаКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКоллекции.ЗаказПартии=Заказ;		
		СтрокаКоллекции.НомерСтрокиТабличнойЧасти=СтрокаКоллекции.НомерСтроки;
		СтрокаКоллекции.СкладПолучатель=СтрокаКоллекции.Склад;
	КонецЦикла;
	ДополнитьТаблицуАтрибутамиШапки(СтруктураШД, тзДанные, "Материалы");
	Возврат тзДанные;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_ВнутренниеЗаказы(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
	ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ТоварыНаСкладах") Тогда Возврат; КонецЕсли;

	тзДвижения=Движения.ТоварыНаСкладах.ВыгрузитьКолонки();
	
	Для каждого СтрокаКоллекции Из СтруктураТД.Материалы Цикл
		Если НЕ СтруктураШД.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда Продолжить; КонецЕсли;
		НоваяСтрока=тзДвижения.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.ВидДвижения=?(ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	КонецЦикла;

	Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
		Если НЕ СтруктураШД.ВидСклада=Перечисления.ВидыСкладов.Оптовый Тогда Продолжить; КонецЕсли;
		НоваяСтрока=тзДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.ВидДвижения=?(ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(Склад, "Склад");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	Движения.ТоварыНаСкладах.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетПотребностей(СтруктураШД, СтруктураТД, Отказ)
	//Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "УчетПотребностей") Тогда Возврат; КонецЕсли;
	Если НЕ ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда Возврат; КонецЕсли;

	тзТМЦ=Новый ТаблицаЗначений;
	тзТМЦ.Колонки.Добавить("Склад");
	тзТМЦ.Колонки.Добавить("Номенклатура");
	тзТМЦ.Колонки.Добавить("ХарактеристикаНоменклатуры");
	тзТМЦ.Колонки.Добавить("Количество");
	тзТМЦ.Колонки.Добавить("НомерСтрокиТабличнойЧасти");
	тзТМЦ.Колонки.Добавить("ВидТабличнойЧасти");

	МассивХарактеристикНоменклатуры=Новый Массив;	
	МассивСкладов=Новый Массив;
    МассивТоваров=Новый Массив;	
	
	Если ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		МассивТоваров.Добавить(Номенклатура);
		МассивСкладов.Добавить(Склад);
		Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
			МассивХарактеристикНоменклатуры.Добавить(ХарактеристикаНоменклатуры);
		КонецЕсли;
		НоваяСстрока=тзТМЦ.Добавить();
		НоваяСстрока.Номенклатура=Номенклатура;
		НоваяСстрока.ХарактеристикаНоменклатуры=ХарактеристикаНоменклатуры;
		НоваяСстрока.Склад=Склад;
		НоваяСстрока.Количество=Количество;
		
	Иначе //Для разукомплектации
		Для каждого СтрокаКоллекции Из СтруктураТД.Материалы Цикл
			ЗаполнитьЗначенияСвойств(тзТМЦ.Добавить(), СтрокаКоллекции);
			Если ЗначениеЗаполнено(СтрокаКоллекции.ХарактеристикаНоменклатуры) Тогда
				МассивХарактеристикНоменклатуры.Добавить(СтрокаКоллекции.ХарактеристикаНоменклатуры);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаКоллекции.Склад) Тогда
				МассивСкладов.Добавить(СтрокаКоллекции.Склад);
			КонецЕсли;
			МассивТоваров.Добавить(СтрокаКоллекции.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
	МассивСделок=Новый Массив;
	Для каждого СтрокаКоллекции Из Сделки Цикл
		МассивСделок.Добавить(СтрокаКоллекции.Сделка);
	КонецЦикла; 

	стрУсловие="Организация = Организация И Склад В (&Склад) И Номенклатура В (&Номенклатура)";
	Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
		МассивХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	КонецЕсли;
	Если НЕ МассивСделок.Количество()=0 Тогда
		стрУсловие=стрУсловие+" И ДокументРезерва В (&Сделка)";
	КонецЕсли;
	ОрганизацияСсылка=Организация;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", МоментВремени());
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("Склад", МассивСкладов);
	Запрос.УстановитьПараметр("Номенклатура", МассивТоваров);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("Сделка", МассивСделок);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва,
	|	СУММА(ИсточникДанных1.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.УчетПотребностей.Остатки(&НаДату, "+стрУсловие+") КАК ИсточникДанных1
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных1.Склад,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.ДокументРезерва
	|";
	тзОстаткиПоСделкам=Запрос.Выполнить().Выгрузить();
	Если тзОстаткиПоСделкам.Количество()=0 Тогда Возврат; КонецЕсли;

	//Отсортируем сделки по порядку списания
	Если Сделки.Количество()>0 Тогда
		тзОстаткиПоСделкам.Колонки.Добавить("ПорядковыйНомер");
		Для каждого СтрокаКоллекции Из Сделки Цикл
			РезультатПоиска=тзОстаткиПоСделкам.Найти(СтрокаКоллекции.Сделка, "ДокументРезерва");
			Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
			РезультатПоиска.ПорядковыйНомер=Сделки.Индекс(СтрокаКоллекции);
		КонецЦикла;
		тзОстаткиПоСделкам.Сортировать("ПорядковыйНомер Возвр");
	КонецЕсли;

	тзДвижения=Движения.УчетПотребностей.ВыгрузитьКолонки();

	СтруктураОтбора=Новый Структура("Склад,Номенклатура,ХарактеристикаНоменклатуры");
	Для каждого СтрокаКоллекции1 Из тзТМЦ Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКоллекции1);
		МассивСтрок=тзОстаткиПоСделкам.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКоллекции2 Из МассивСтрок Цикл
			текКоличество=Мин(СтрокаКоллекции2.Количество, СтрокаКоллекции1.Количество);
			Если текКоличество<=0 Или СтрокаКоллекции1.Количество<=0 Тогда Продолжить; КонецЕсли;
			СтрокаКоллекции1.Количество=СтрокаКоллекции1.Количество-текКоличество;
            СтрокаКоллекции2.Количество=СтрокаКоллекции2.Количество-текКоличество;

			НоваяСтрока=тзДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции1);
			НоваяСтрока.ДокументРезерва=СтрокаКоллекции2.ДокументРезерва;
			НоваяСтрока.Количество=текКоличество;			
		КонецЦикла;
	КонецЦикла; 

    тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ОрганизацияСсылка, "Организация");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	Движения.УчетПотребностей.Загрузить(тзДвижения);
	
	//Учет резервов ТМЦ
	Если Константы.УчетРезервов.Получить() Тогда
		тзДвижения.Колонки.ДокументРезерва.Имя="Заказ";
		тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		Движения.УчетРезервовТМЦ.Загрузить(тзДвижения);
	КонецЕсли; 
КонецПроцедуры

Процедура ДвижениеПоРегистру_ВнутренниеЗаказы(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда Возврат; КонецЕсли;
	
	тзИсточникДанных=СтруктураТД.Комплекты.СкопироватьКолонки("Склад,ЗаказПартии,Номенклатура,ХарактеристикаНоменклатуры,Количество");
	тзИсточникДанных.Колонки.ЗаказПартии.Имя="Заказ";

	МассивХарактеристикНоменклатуры=Новый Массив;

	Для каждого СтрокаКоллекции Из СтруктураТД.Комплекты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКоллекции.ЗаказПартии) Тогда Продолжить; КонецЕсли;
		ЗаполнитьЗначенияСвойств(тзИсточникДанных.Добавить(), СтрокаКоллекции);
		Если ЗначениеЗаполнено(СтрокаКоллекции.ХарактеристикаНоменклатуры) Тогда
			МассивХарактеристикНоменклатуры.Добавить(СтрокаКоллекции.ХарактеристикаНоменклатуры);
		КонецЕсли;
	КонецЦикла;

	Если тзИсточникДанных.Количество()=0 Тогда Возврат; КонецЕсли; 

	стрУсловие="Организация = &Организация И Склад = &Склад И Номенклатура В (&Номенклатура) И ВнутреннийЗаказ В (&Заказ)";
    Если МассивХарактеристикНоменклатуры.Количество()>0 Тогда
		стрУсловие=стрУсловие+" И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
	КонецЕсли; 

	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсточникДанных", тзИсточникДанных);
	Запрос.УстановитьПараметр("НаДату", МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Заказ", тзИсточникДанных.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", тзИсточникДанных.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.Текст="
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ &ИсточникДанных Как ИсточникДанных
	|;
	|
	|ВЫБРАТЬ
	|	ИсточникДанных2.Склад,
	|	ИсточникДанных2.Подразделение,
	|	ИсточникДанных1.Номенклатура,
	|	ИсточникДанных1.ХарактеристикаНоменклатуры,
	|	ИсточникДанных1.Заказ Как ВнутреннийЗаказ,
	|	ИсточникДанных1.Количество КАК КоличествоДок,
	|	ИсточникДанных2.КоличествоОстаток КАК Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных1
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутренниеЗаказы.Остатки(&НаДату, "+стрУсловие+") Как ИсточникДанных2
	|		ПО ИсточникДанных1.Номенклатура = ИсточникДанных2.Номенклатура
	|		И ИсточникДанных1.Заказ = ИсточникДанных2.ВнутреннийЗаказ
	|		"+?(МассивХарактеристикНоменклатуры.Количество()=0, "", "И ИсточникДанных1.ХарактеристикаНоменклатуры = ИсточникДанных2.ХарактеристикаНоменклатуры")+"
	|";
	тзДвижения=Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаКоллекции Из тзДвижения Цикл
		СтрокаКоллекции.Количество=Мин(СтрокаКоллекции.Количество, СтрокаКоллекции.КоличествоДок);
	КонецЦикла;
	МассивСтрок=тзДвижения.НайтиСтроки(Новый Структура("Количество", 0));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		тзДвижения.Удалить(МассивСтрок);
	КонецЦикла;

	тзДвижения.Колонки.Добавить("ВидДвижения");
	тзДвижения.Колонки.Добавить("Активность");
	тзДвижения.Колонки.Добавить("Период");
	тзДвижения.Колонки.Добавить("Регистратор");
	тзДвижения.Колонки.Добавить("Организация");

	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	тзДвижения.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");

	Движения.ВнутренниеЗаказы.Загрузить(тзДвижения);
КонецПроцедуры

Процедура ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ)
	ТаблицаПоКомплектам=СтруктураТД.Комплекты;
	ТаблицаПоКомплектующим=СтруктураТД.Материалы;

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	ТаблицаПоТоварам = ТаблицаПоКомплектующим.Скопировать();

	// Количество комплекта распределяется на Материалы
	СтрокаКомплекта = ТаблицаПоКомплектам[0];

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		ТаблицаПоТоварам.Колонки.Добавить("НоменклатураНовая");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("КоличествоПоступление");
		ТаблицаПоТоварам.Колонки.Добавить("КоличествоПоступлениеДоп");

		КоличествоКомплекта=0; КоличествоКомплектаДоп=0;
		Если НЕ ТаблицаПоТоварам.Количество()=0 Тогда
			КоличествоКомплекта=Окр(СтрокаКомплекта.Количество/ТаблицаПоТоварам.Количество(), 3);
			КоличествоКомплектаДоп=Окр(СтрокаКомплекта.КоличествоДоп/ТаблицаПоТоварам.Количество(), 3);
		КонецЕсли;

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;

		Для каждого Строка Из ТаблицаПоТоварам Цикл
			Строка.НоменклатураНовая               = СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатурыНовая = СтрокаКомплекта.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатурыНовая          = СтрокаКомплекта.СерияНоменклатуры;

			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта-КоличествоКомплекта;

			Строка.КоличествоПоступление = КоличествоКомплекта;
			Строка.КоличествоПоступлениеДоп = КоличествоКомплектаДоп;

			Если ТаблицаПоТоварам.Индекс(Строка)=ТаблицаПоТоварам.Количество()-1 Тогда
				Строка.КоличествоПоступление = Строка.КоличествоПоступление + НеРаспределеноКоличествоКомплекта;
			КонецЕсли;
			
			Если Строка.Склад.Пустая() Тогда Строка.Склад=Склад; КонецЕсли; 
		КонецЦикла;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда

		ТаблицаПоТоварам.Колонки.Номенклатура.Имя               = "НоменклатураНовая";
		ТаблицаПоТоварам.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаНоменклатурыНовая";
		ТаблицаПоТоварам.Колонки.СерияНоменклатуры.Имя          = "СерияНоменклатурыНовая"; 
		ТаблицаПоТоварам.Колонки.Количество.Имя                 = "КоличествоПоступление";

		ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("Количество");
		ТаблицаПоТоварам.Колонки.Добавить("СтоимостьПоступление");
		ТаблицаПоТоварам.Колонки.Добавить("СтоимостьПоступлениеНУ");

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;
		НеРаспределеноКоличествоКомплектаДоп = СтрокаКомплекта.КоличествоДоп;

		ВсегоДолейСтоимости = ТаблицаПоТоварам.Итог("ДоляСтоимости");

		Для каждого Строка Из ТаблицаПоТоварам Цикл
			КоэффициентСтроки   = ?(ВсегоДолейСтоимости=0, 0, Строка.ДоляСтоимости/ВсегоДолейСтоимости);
			КоличествоКомплекта = СтрокаКомплекта.Количество*КоэффициентСтроки;
			КоличествоКомплектаДоп = СтрокаКомплекта.КоличествоДоп*КоэффициентСтроки;

			Строка.Номенклатура               = СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатуры = СтрокаКомплекта.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатуры          = СтрокаКомплекта.СерияНоменклатуры;
			
			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта-КоличествоКомплекта;
			НеРаспределеноКоличествоКомплектаДоп = НеРаспределеноКоличествоКомплектаДоп-КоличествоКомплектаДоп;
			
			Строка.Количество = КоличествоКомплекта;
			Строка.КоличествоДоп = КоличествоКомплектаДоп;

			Если ТаблицаПоТоварам.Индекс(Строка)=ТаблицаПоТоварам.Количество()-1 Тогда
				Строка.Количество = Строка.Количество + НеРаспределеноКоличествоКомплекта;
				Строка.КоличествоДоп = Строка.КоличествоДоп + НеРаспределеноКоличествоКомплектаДоп;
			КонецЕсли;
			Строка.СтоимостьПоступление=Строка.Стоимость;
			Строка.СтоимостьПоступлениеНУ=Строка.СтоимостьНУ;
			//Если Строка.Склад.Пустая() Тогда Строка.Склад=Склад; КонецЕсли; 
			Строка.Склад=Склад;
		КонецЦикла;
		
		//Если НЕ НеРаспределеноКоличествоКомплекта=0 Тогда
		//	НоваяСтрока=ТаблицаПоТоварам.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		//КонецЕсли;
	КонецЕсли;
	
	ТаблицаПоТоварам.Колонки.Добавить("ДокументОприходованияНовый");
	ТаблицаПоТоварам.ЗаполнитьЗначения(Ссылка, "ДокументОприходованияНовый");

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");

	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1; Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	Если ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "СкладПолучатель");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.Качество, "КачествоНовое");

	// Если резервирование под заказ - заказ партии
	Если ТипЗнч(Заказ) =  Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено), "ЗаказПартии");
		// Заказ, на который списывается
		ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено), "ЗаказСписания");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,   "ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры

Процедура ДвижениеПоРегистру_УчетРезервовТМЦ(СтруктураШД, СтруктураТД, Отказ)
	СтруктураПараметров=Новый Структура("МоментВремени,Дата,Ссылка,Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШД);
	СтруктураПараметров.Вставить("тзУчетРезервовТМЦ", Движения.УчетРезервовТМЦ.ВыгрузитьКолонки());
	УправлениеРезервамиСервер.СформироватьДвиженияРасход(СтруктураПараметров, СтруктураТД, Отказ);
	Если НЕ СтруктураПараметров.тзУчетРезервовТМЦ.Количество()=0 Тогда
		Движения.УчетРезервовТМЦ.Загрузить(СтруктураПараметров.тзУчетРезервовТМЦ);
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Проведение по регистрам (по нескольким регистрам одного типа)

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	Если НЕ УправлениеДокументамиСервер.РазрешитьДвиженияПоРегистру(СтруктураШД, "ПартииТоваровНаСкладах") Тогда Возврат; КонецЕсли;

	СтруктураШД.Вставить("Отказ", Отказ);
	СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 

	СтруктураШД=ДополнительныеСвойства.СтруктураШД;
	СтруктураТД=ДополнительныеСвойства.СтруктураТД;

	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Основание)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Заказ=Основание;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Заказ=Основание;
		
	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
	КонецЕсли;

	мдОбъект=Основание.Метаданные();
	Если НЕ мдОбъект.ТабличныеЧасти.Найти("Товары")=Неопределено Тогда
		стрИсключить=?(мдОбъект.ТабличныеЧасти.Товары.Реквизиты.Найти("ТОП")=Неопределено, "", "ТОП");
		Для Каждого СтрокаКоллекции Из Основание.Товары Цикл
			ЗаполнитьЗначенияСвойств(ЭтотОбъект.Материалы.Добавить(), СтрокаКоллекции,,стрИсключить);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	//Автозаполнение ревизитов шапки\табличных частей
	АвтоЗаполнениеРеквизитовДокумента();

	//Формирование значений реквизитов шапки документа
	СтруктураШД=УправлениеДокументамиСервер.СформироватьСтруктуруШД(ЭтотОбъект);
	СтруктураШД.Вставить("Услуга", Номенклатура.Услуга);
	СтруктураШД.Вставить("Набор", Номенклатура.Набор);
	СтруктураШД.Вставить("Комплект", Номенклатура.Комплект);
	СтруктураШД.Вставить("КоэффициентЕдиницыХранения", Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);

	//Проверяем реквизиты шапки
	УчетнаяПолитика=СтруктураШД.УчетнаяПолитика;
	Если УчетнаяПолитика.СложныйУчетНДС	И Не УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда
		ПроверяемыеРеквизиты.Добавить("НДСвСтоимостиТоваров");
	КонецЕсли;

	Если ВидОперации=Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		ПроверяемыеРеквизиты.Добавить("Материалы.ДоляСтоимости");
	КонецЕсли;

	Если СтруктураШД.Услуга=Истина Или СтруктураШД.Набор=Истина Или СтруктураШД.Комплект=Истина Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Комплектуемая номенклатура не может быть услугой, набором-пакетом или набором-комплектом!", Отказ, Заголовок);
		Если Отказ Тогда Возврат; КонецЕсли; 
	КонецЕсли;

	//Формирование значений реквизитов табличных частей
	тзМатериалы=СформироватьТаблицу_Материалы(СтруктураШД, Отказ, Заголовок);

	//Создаем таблицу "Комплекты"
	тзКомплекты=тзМатериалы.СкопироватьКолонки();
	НоваяСтрока=тзКомплекты.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураШД);
	НоваяСтрока.Количество=СтруктураШД.Количество * СтруктураШД.Коэффициент / СтруктураШД.КоэффициентЕдиницыХранения;
	НоваяСтрока.КоличествоДоп=СтруктураШД.КоличествоДоп;
	НоваяСтрока.НомерСтроки=0;
	НоваяСтрока.ВидТабличнойЧасти="Материалы";
	НоваяСтрока.НомерСтрокиТабличнойЧасти=0;
	НоваяСтрока.ЗаказПартии=СтруктураШД.Заказ;
	
	СтруктураТД=Новый Структура;
	СтруктураТД.Вставить("Материалы", тзМатериалы);
	СтруктураТД.Вставить("Комплекты", тзКомплекты);
	СтруктураТД.Вставить("Сделки", Сделки.Выгрузить());

	//Инициализация доп.свойств документа	
    ДополнительныеСвойства.Вставить("Заголовок", Заголовок);
	ДополнительныеСвойства.Вставить("СтруктураШД", СтруктураШД);
	ДополнительныеСвойства.Вставить("СтруктураТД", СтруктураТД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);