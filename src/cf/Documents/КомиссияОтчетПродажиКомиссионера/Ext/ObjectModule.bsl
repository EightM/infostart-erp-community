Процедура АвтоЗаполнениеРеквизитовДокумента() Экспорт 
	//Товары
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест=Неопределено;
		КонецЕсли;
		Если НЕ УчитыватьНДС Тогда СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС; КонецЕсли;		
	КонецЦикла;

	//Денежные средства
	Для каждого СтрокаТабличнойЧасти Из ДенежныеСредства Цикл
		Если НЕ УчитыватьНДС Тогда СтрокаТабличнойЧасти.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС; КонецЕсли;		
	КонецЦикла;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента=ЦенообразованиеСервер.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВознаграждения=Товары.Итог("СуммаВознаграждения")+?(УчитыватьНДС И (Не СуммаВключаетНДС), Товары.Итог("СуммаНДСВознаграждения"), 0);
	СуммаНДС=ЦенообразованиеСервер.ПолучитьНДСДокумента(ЭтотОбъект);
КонецПроцедуры

Функция ПараметрыУчетнойПолитики(Переписать=Ложь) Экспорт

	Если Переписать=Ложь Тогда
		Переписать=?(ДополнительныеСвойства.УчетнаяПолитика=Неопределено, Истина, Ложь);
	КонецЕсли;

	Если Переписать Тогда
		ДополнительныеСвойства.УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь, Организация);
	КонецЕсли;

	Возврат ДополнительныеСвойства.УчетнаяПолитика;

КонецФункции

Процедура ЗаполнитьТовары(ДокументПередачи=Неопределено, ID_Покупатели="") Экспорт

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПередачи",   Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	Если ДокументПередачи = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.КоличествоОстаток,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПередачи = &СтатусПередачи			 
		|" + ?(НЕ ЗначениеЗаполнено(Сделка),   "",     "И Сделка = &Сделка") + "
		|	                                                     ) КАК Остатки
		|ГДЕ
		| 	Остатки.КоличествоОстаток > 0
		|";
	Иначе		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|   Док.СтавкаНДС,
		|   Док.СерияНоменклатуры,
		|   МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
		//*** |   СУММА(Док.Количество)             КАК КоличествоПоДокументу, 
		|   СУММА(Остатки.КоличествоОстаток)             КАК КоличествоПоДокументу, 
		|	МАКСИМУМ(Остатки.КоличествоОстаток)          КАК КоличествоОстатокПереданных,
		|	МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток) КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|   Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПередачи = &СтатусПередачи			 
		|" + ?(НЕ ЗначениеЗаполнено(Сделка),   "",     "И Сделка = &Сделка") + "
		|	                                                     ) КАК Остатки
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура 
		|   И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|   И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры
		|ГДЕ
		|   Док.Ссылка = &ДокументПередачи
		| 	И Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Номенклатура,
		|	Док.СтавкаНДС,
		|	Док.СерияНоменклатуры,
		|	Док.ХарактеристикаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|
		|ИТОГИ МАКСИМУМ(КоличествоОстатокПереданных) ПО Док.Номенклатура, Док.ХарактеристикаНоменклатуры";
	КонецЕсли;

	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КолвоОстПереданных    = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			КолвоПереданных       = КолвоОстПереданных;
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

		Если ДокументПередачи = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.Количество = Мин(Выборка.КоличествоПоДокументу, КолвоОстПереданных);
			КолвоОстПереданных = КолвоОстПереданных - СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС         = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		Если ДокументПередачи = Неопределено Тогда
			Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / Выборка.КоличествоОстаток, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета));
		Иначе
			Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета));
		КонецЕсли;

		СтрокаТабличнойЧасти.Сумма = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, УчетНалоговСервер.СтавкаНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		УчитыватьНДС, СуммаВключаетНДС,
																		УчетНалоговСервер.СтавкаНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры=Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ID_Покупатели=ID_Покупатели;
	КонецЦикла;

КонецПроцедуры 

Процедура ЗаполнитьТоварыПоИнвентаризацииОтданных(ДокументОснование, ID_Покупатели="") Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента",    ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование" ,    ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество) КАК Количество,
	|	(МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество))
	|	* МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток)
	|	/ МАКСИМУМ(Остатки.КоличествоОстаток) КАК Стоимость
	|ИЗ
	|	Документ.ИнвентаризацияТоваровОтданныхНаКомиссию.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|	                                                      ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                     ) КАК Остатки
	|ПО
	|	  Док.Номенклатура               = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры
	|	И (Док.Ссылка.Сделка             = Остатки.Сделка
	|      ИЛИ (Док.Ссылка.Сделка = &ПустойЗаказПокупателя И Остатки.Сделка = Неопределено))
	|
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|	И Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество <= 0 Тогда Продолжить; КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Стоимость;
		СтрокаТабличнойЧасти.СуммаПередачи    = Выборка.Стоимость;

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,  ЭтотОбъект,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                         * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
			                                              УчитыватьНДС, СуммаВключаетНДС,
			                                              УчетНалоговСервер.СтавкаНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ID_Покупатели=ID_Покупатели;
	КонецЦикла;

КонецПроцедуры 

Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)
	Если СпособРасчетаКомиссионногоВознаграждения=Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения=Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения=Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения *(СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения, УчитыватьНДС, СуммаВключаетНДС, УчетНалоговСервер.СтавкаНДС(СтавкаНДСВознаграждения));
КонецПроцедуры 

Функция ОпределитьПартиюВозврата(ДокументСсылка, Номенклатура, ХарактеристикаНоменклатуры)
	СтруктураВозврата=Новый Структура("Себестоимость,ДокументПартии", 0, Неопределено);
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ВидТабличнойЧасти", "Товары");
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СУММА(ИсточникДанных.Количество) КАК Количество,
	|	СУММА(ИсточникДанных.Стоимость) КАК Стоимость,
	|	ИсточникДанных.ДокументПередачи КАК ДокументПередачи
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Регистратор = &Регистратор
	|	И ИсточникДанных.ВидТабличнойЧасти = &ВидТабличнойЧасти
	|	И ИсточникДанных.Номенклатура = &Номенклатура
	|	И ИсточникДанных.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.ДокументПередачи
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Себестоимость=Выборка.Стоимость/Выборка.Количество;
		СтруктураВозврата.ДокументПартии=Выборка.ДокументПередачи;
	КонецЕсли;

	Возврат СтруктураВозврата;
КонецФункции

////////////////////////////////////////////
// Движения по регистрам

Процедура ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ)
	ДвиженияПоРегистрамУпр(СтруктураШД, СтруктураТД.Товары, Отказ, ДополнительныеСвойства.Заголовок);

	ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ);

	ТаблицаАвансов=Новый ТаблицаЗначений;
	ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШД, СтруктураТД.Услуги, ТаблицаАвансов, Отказ);
	ДвиженияРегистровПодсистемыНДСРеализация(СтруктураШД, СтруктураТД.Товары, Отказ, ДополнительныеСвойства.Заголовок);
	ДвиженияРегистровПодсистемыНДСКнигаПродаж(СтруктураШД, СтруктураТД.Товары, Отказ, ДополнительныеСвойства.Заголовок);
	ДвиженияПоРегистрамНДСДенежныеСредства(СтруктураШД, СтруктураТД.Деньги, Отказ, ДополнительныеСвойства.Заголовок);

	ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(СтруктураШД, ТаблицаПоТоварам, Отказ, Заголовок)
	РежимПроведения=Неопределено;

	// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
	СуммаДолга = ?(СтруктураШД.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);
	
	// По регистру ВзаиморасчетыСКонтрагентами.
	НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Если НЕ СуммаДолга=0 Тогда
		СтрокаДвижений=ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Контрагент  		  = Контрагент;
		СтрокаДвижений.Организация  	  = Организация;
		СтрокаДвижений.СуммаБух 		  = СуммаДолга; 
		СтрокаДвижений.СуммаВал   		  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента, СтруктураШД.ВалютаВзаиморасчетов, СтруктураШД.КурсДокумента, КурсВзаиморасчетов, СтруктураШД.КратностьДокумента, КратностьВзаиморасчетов);
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();

	// Долг комиссионера за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШД.УдержатьКомиссионноеВознаграждение И СуммаВознаграждения<>0 Тогда
		// По регистру ВзаиморасчетыСКонтрагентами.
		НаборДвижений=Движения.ВзаиморасчетыСКонтрагентами;
		ТаблицаДвижений=НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Контрагент  		  = Контрагент;
		СтрокаДвижений.Организация  	  = Организация;
		СтрокаДвижений.СуммаБух = СуммаВознаграждения;
		СтрокаДвижений.СуммаВал = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
												СтруктураШД.ВалютаВзаиморасчетов,
												СтруктураШД.КурсДокумента, КурсВзаиморасчетов,
												СтруктураШД.КратностьДокумента, КратностьВзаиморасчетов);

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
	КонецЕсли;
	
	Если  СуммаВознаграждения<>0 Тогда
		// По регистру Закупки.
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Контрагент 		  = Контрагент;
		СтрокаДвижений.Организация 		  = Организация;
		СтрокаДвижений.ДокументЗакупки    = Ссылка;
		СтрокаДвижений.Проект             = Проект;
		СтрокаДвижений.Подразделение      = Подразделение;
		СтрокаДвижений.СтатусПартии       = Перечисления.СтатусыПартийТоваров.Купленный;
		СтрокаДвижений.Номенклатура       = Неопределено;
		СтрокаДвижений.ХарактеристикаНоменклатуры = Неопределено;
		СтрокаДвижений.Количество         = 1;
		СтрокаДвижений.Стоимость          = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения,
											ВалютаДокумента, СтруктураШД.ВалютаУправленческогоУчета,
											СтруктураШД.КурсДокумента, СтруктураШД.КурсВалютыУправленческогоУчета,
											СтруктураШД.КратностьДокумента, СтруктураШД.КратностьВалютыУправленческогоУчета);
		
		СтрокаДвижений.НДС 				 = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШД.СуммаНДСВознаграждения,
											СтруктураШД.ВалютаДокумента, СтруктураШД.ВалютаУправленческогоУчета,
											СтруктураШД.КурсДокумента, СтруктураШД.КурсВалютыУправленческогоУчета,
											СтруктураШД.КратностьДокумента, СтруктураШД.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод             = Дата;
		НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
	НаборДвижений = Движения.ТоварыПереданные;
	Если НЕ Отказ Тогда
		ТаблицаПереданные=ТаблицаПоТоварам.Скопировать();
		ТаблицаПереданные.Колонки.СуммаВзаиморасчетов.Имя = "СуммаВзаиморасчетовПродажи";
		ТаблицаПереданные.Колонки.СуммаВзаиморасчетовПередачи.Имя = "СуммаВзаиморасчетов";

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПереданные);

		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             Сделка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	КонецЕсли;

	// Движения по посредническим услугам.
	Если СуммаВознаграждения <> 0 Тогда
		ТабЗатрат=Новый ТаблицаЗначений;
		ТабЗатрат.Колонки.Добавить("СтатьяЗатрат",  Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
		ТабЗатрат.Колонки.Добавить("Сумма",         ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
		ТабЗатрат.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		ТабЗатрат.Колонки.Добавить("Подразделение",        Новый ОписаниеТипов("СправочникСсылка.Подразделения"));

		НоваяСтрока=ТабЗатрат.Добавить();
		НоваяСтрока.Подразделение        = Подразделение;
		НоваяСтрока.СтатьяЗатрат         = СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппаЗатрат;
		НоваяСтрока.Сумма                = СуммаВознаграждения - ?(СтруктураШД.УчетнаяПолитика.НеВключатьНДСВЗатраты, ТаблицаПоТоварам.Итог("СуммаНДСВознаграждения"), 0);

		ДопПараметры=Новый Структура;
		ДопПараметры.Вставить("Контрагент", Контрагент);
		ДопПараметры.Вставить("Организация", Организация);
		ДопПараметры.Вставить("Заказ", Сделка);
		ОбщегоНазначения.ДвиженияПоПрочимЗатратамУпр(ЭтотОбъект, ТабЗатрат, СтруктураШД, ДополнительныеСвойства.ВалютаБухУчета, ДопПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура ДвижениеПоРегистру_СписанныеТовары(СтруктураШД, СтруктураТД, Отказ) Экспорт
    тзДанные=Движения.СписанныеТовары.ВыгрузитьКолонки(); НомСтроки=0;

	Для каждого СтрокаКоллекции Из СтруктураТД.Товары Цикл
		НоваяСтрока=тзДанные.Добавить(); НомСтроки=НомСтроки+1;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.НомерСтрокиДокумента=НомСтроки;		
		НоваяСтрока.СуммаЗадолженности=СтрокаКоллекции.СуммаСНДС;
		НоваяСтрока.СуммаЗадолженностиБУ=СтрокаКоллекции.СуммаСНДС;
		Если НЕ СтрокаКоллекции.ДокументВозврата.Пустая() Тогда
			СтруктураПартииВозврата=ОпределитьПартиюВозврата(СтрокаКоллекции.ДокументВозврата, СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры);
			НоваяСтрока.СтоимостьСписаниеУУ=СтруктураПартииВозврата.Себестоимость;
			НоваяСтрока.ДокументПередачи=-СтруктураПартииВозврата.ДокументПартии;
		КонецЕсли;
	КонецЦикла;	

	тзДанные.ЗаполнитьЗначения(Дата,"Период");
	тзДанные.ЗаполнитьЗначения(Ссылка,"Регистратор");
	тзДанные.ЗаполнитьЗначения(Истина,"Активность");
	тзДанные.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	тзДанные.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено),"ЗаказСписания");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"ДопустимыйСтатусПередачи");
	тзДанные.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия,"КодОперацииПартииТоваров");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	тзДанные.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	тзДанные.ЗаполнитьЗначения(Подразделение, "Подразделение");
	тзДанные.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	тзДанные.ЗаполнитьЗначения(СтруктураШД.КурсДокумента, "КурсДокумента");
	тзДанные.ЗаполнитьЗначения(СтруктураШД.КратностьДокумента, "КратностьДокумента");
	тзДанные.ЗаполнитьЗначения(Проект, "Проект");
	тзДанные.ЗаполнитьЗначения(Организация, "Организация");
	
	Движения.СписанныеТовары.Загрузить(тзДанные);
	Движения.СписанныеТовары.Записать(Истина);	
КонецПроцедуры 

Процедура ДвижениеПоРегистру_УчетПартийТМЦ(СтруктураШД, СтруктураТД, Отказ)
	СтруктураШД.Вставить("Отказ", Отказ);
	СтруктураШД.Вставить("ТаблицаСписания", Движения.СписанныеТовары.Выгрузить());
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СтруктураШД);
КонецПроцедуры

////////////////////////////////////////////
// Движения по НДС

// Процедура вызывается из тела процедуры ДвиженияПоПриобретениюУслуг
// Формирует движения по регистру подсистемы учета НДС "НДСПокупки"
// для отражения поступления услуг от комиссионера
Процедура ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШД, ТаблицаДокумента, ТаблицаАвансов, Отказ) Экспорт
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС тогда Возврат; КонецЕсли;
	Если ТаблицаДокумента.Количество()= 0 Тогда Возврат; КонецЕсли;
	
	ТаблицаДокумента.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
	
	УчетНДС.СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШД, ТаблицаДокумента, "ТаблицаПоУслугам", Движения, Отказ, , ТаблицаАвансов);
	
	Если СтруктураШД.УдержатьКомиссионноеВознаграждение Тогда
		ТаблицаДвижений_НДСРасчетыСПоставщиками=Движения.НДСРасчетыСПоставщиками.Выгрузить();
		ТаблицаДвижений_НДСРасчетыСПоставщиками.Индексы.Добавить("РасчетыСБюджетом");
		СтрокиКУдалению = ТаблицаДвижений_НДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("РасчетыСБюджетом",Истина));
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
		Движения.НДСРасчетыСПоставщиками.мПериод=СтруктураШД.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений=ТаблицаДвижений_НДСРасчетыСПоставщиками;
       	Движения.НДСРасчетыСПоставщиками.ВыполнитьРасход();		
	КонецЕсли; 

	Если СтруктураШД.УчитыватьНДС Тогда
		УчетНДС.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШД, ТаблицаДокумента, "ТаблицаПоУслугам", Движения, Отказ);
		Если СтруктураШД.УчетАгентскогоНДС Тогда
			// На данный момент все наборы движений записаны.
			// Необходимо прочитать состояние набора "НДСПредъявленный"
			Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШД.Ссылка,РегистрыНакопления.НДСПредъявленный, Истина).Выгрузить();
			УчетНДС.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШД, Движения_НДСПредъявленный, Движения);
		КонецЕсли;		 
	КонецЕсли;
КонецПроцедуры 

Процедура ДвиженияРегистровПодсистемыНДСКнигаПродаж(СтруктураШД, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС тогда Возврат; КонецЕсли;
	тзДвижения=Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	Для Каждого СтрокаКоллекции Из Покупатели Цикл
		Если НЕ СтрокаКоллекции.ВыставленСФ Тогда Продолжить; КонецЕсли;
		МассивСтрок=Товары.НайтиСтроки(Новый Структура("ID_Покупатели", СтрокаКоллекции.ID));
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			НоваяСтрока=тзДвижения.Добавить();
			НоваяСтрока.Покупатель=СтрокаКоллекции.Покупатель;
			НоваяСтрока.СчетФактура=СтрокаКоллекции.СчетФактура;
			НоваяСтрока.ВидЦенности=Перечисления.ВидыЦенностей.Товары;
			НоваяСтрока.СтавкаНДС=СтрокаМассива.СтавкаНДС;
			НоваяСтрока.ДатаСобытия=СтрокаКоллекции.ДатаСФ;
			НоваяСтрока.НДС=СтрокаМассива.СуммаНДС;
			НоваяСтрока.СуммаБезНДС=СтрокаМассива.Сумма-?(СуммаВключаетНДС, СтрокаМассива.СуммаНДС, 0);
		КонецЦикла;
	КонецЦикла;

	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Организация, "Организация");
	тзДвижения.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");

	Движения.НДСЗаписиКнигиПродаж.Загрузить(тзДвижения);
КонецПроцедуры 

Процедура ДвиженияРегистровПодсистемыНДСРеализация(СтруктураШД, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС тогда Возврат; КонецЕсли;
	УчетНДС.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШД, ТаблицаПоТоварам, Движения, Отказ);	
КонецПроцедуры 

Функция ПолучитьТаблицуАвансов(СтруктураШД)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	Запрос.УстановитьПараметр("Организация", СтруктураШД.Организация);
	Запрос.УстановитьПараметр("Покупатель",	СтруктураШД.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШД.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("КонецПериода", СтруктураШД.Дата);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.УстановитьПараметр("ЭтоАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Организация,
	|	ИсточникДанных1.Покупатель,
	|	ИсточникДанных1.ДоговорКонтрагента,
	|	ИсточникДанных1.ТипДоговораКонтрагента,
	|	ИсточникДанных1.Документ КАК ДокументОплаты,
	|	-ИсточникДанных1.СуммаОстаток КАК Сумма,
	|	ЛОЖЬ КАК ТекущийДокумент
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(&КонецПериода,
	|			Организация = &Организация
	|			И Покупатель = &Покупатель
	|			И ДоговорКонтрагента = &ДоговорКонтрагента
	|			И АвансПоРасчетамСКомиссионером) КАК ИсточникДанных1
	|ГДЕ
	|	ИсточникДанных1.СуммаОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсточникДанных2.Ссылка.Организация,
	|	ИсточникДанных2.Ссылка.Контрагент,
	|	ИсточникДанных2.Ссылка.ДоговорКонтрагента,
	|	ИсточникДанных2.ТипДоговораКонтрагента,
	|	ИсточникДанных2.Ссылка,
	|	ИсточникДанных2.Сумма,
	|	ИСТИНА
	|ИЗ
	|	Документ.КомиссияОтчетПродажиКомиссионера.ДенежныеСредства КАК ИсточникДанных2
	|ГДЕ
	|	ИсточникДанных2.Ссылка = &ЭтотДокумент
	|";
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	КоличествоЭлементов = ТаблицаРезультатов.Количество();	
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		СтрокаРезультата = ТаблицаРезультатов[КоличествоЭлементов - ОбратныйИндекс];
		Если НЕ ТипЗнч(СтрокаРезультата.ДокументОплаты)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
			// Учитываются только авансы зарегистрированные документами "Отчет комиссионера о продажах"
			ТаблицаРезультатов.Удалить(СтрокаРезультата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции 

Процедура ДвиженияПоРегистрамНДСДенежныеСредства(СтруктураШД, ТаблицаПоДенежнымСредствам, Отказ, Заголовок) Экспорт
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС тогда Возврат; КонецЕсли;
	Если ТаблицаПоДенежнымСредствам=Неопределено Тогда Возврат; КонецЕсли; 

	ТаблицаАвансов = ПолучитьТаблицуАвансов(СтруктураШД);
	
	ДвиженияНДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями;
	ТаблицаДвиженийНДСРасчетыСПокупателями = ДвиженияНДСРасчетыСПокупателями.ВыгрузитьКолонки();
	
	Для Каждого СтрокаДС Из ТаблицаПоДенежнымСредствам Цикл
		СтрокаДвижения=ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
		СтрокаДвижения.Организация 			= СтруктураШД.Организация;
		СтрокаДвижения.Покупатель 			= СтруктураШД.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента 	= СтруктураШД.ДоговорКонтрагента;
		СтрокаДвижения.ТипДоговораКонтрагента = СтрокаДС.ТипДоговораКонтрагента;
		СтрокаДвижения.Документ 			= СтруктураШД.Ссылка;
		
		Если СтрокаДС.ВидОтчетаПоПлатежам 	= Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата
			или СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса
			тогда
			СтрокаДвижения.АвансПоРасчетамСКомиссионером = Ложь;
		Иначе
			СтрокаДвижения.АвансПоРасчетамСКомиссионером = Истина;
		КонецЕсли;
		
		СуммаРасчетов						= СтрокаДС.Сумма;
		Если СтруктураШД.ВалютаВзаиморасчетов <> СтруктураШД.ВалютаРегламентированногоУчета Тогда
			СуммаРасчетовРегл 				= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаРасчетов,
													СтруктураШД.ВалютаВзаиморасчетов,
													СтруктураШД.ВалютаРегламентированногоУчета,
													СтруктураШД.КурсВзаиморасчетов, 1,
													СтруктураШД.КратностьВзаиморасчетов, 1);
		Иначе
			СуммаРасчетовРегл 				= СуммаРасчетов;
		КонецЕсли;
		СтрокаДвижения.Сумма 				= СуммаРасчетовРегл;
		СтрокаДвижения.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		СтрокаДвижения.ДатаСобытия 			= СтруктураШД.Дата;
			
		Если СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда
			
			СуммаЗачета = СуммаРасчетов;
			СуммаЗачетаРегл = СуммаРасчетовРегл;
			Для Каждого СтрокаРаспределения Из ТаблицаАвансов Цикл
				Если (СуммаЗачета = 0) Или (СтрокаРаспределения.Сумма = 0) Тогда Продолжить; КонецЕсли;

				СтрокаДвижения=ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
				СтрокаДвижения.Организация 			= СтруктураШД.Организация;
				СтрокаДвижения.Покупатель 			= СтруктураШД.Контрагент;
				СтрокаДвижения.ДоговорКонтрагента 	= СтруктураШД.ДоговорКонтрагента;
				СтрокаДвижения.ТипДоговораКонтрагента = СтрокаРаспределения.ТипДоговораКонтрагента;
				СтрокаДвижения.Документ				= СтрокаРаспределения.ДокументОплаты;
				СтрокаДвижения.АвансПоРасчетамСКомиссионером = Истина;
				СтрокаДвижения.ДатаСобытия			= СтруктураШД.Дата;
				СтрокаДвижения.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				СуммаДвиженияРегл=СтрокаДвижения.Сумма;
				СтрокаДвижения.Сумма= СуммаДвиженияРегл;
				
				СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма - СтрокаДвижения.Сумма;
				
				ЗачтеннаяСуммаРегл =СуммаЗачетаРегл;
				СуммаЗачетаРегл = СуммаЗачетаРегл	- ЗачтеннаяСуммаРегл;

				ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШД, СтруктураШД.Ссылка, СтрокаРаспределения.ДокументОплаты, ЗачтеннаяСуммаРегл, Отказ, Заголовок)
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	ДвиженияНДСРасчетыСПокупателями.мПериод = СтруктураШД.Дата;
	ДвиженияНДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПокупателями;
	ДвиженияНДСРасчетыСПокупателями.ДобавитьДвижение();
КонецПроцедуры 

Процедура ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШД, СчетФактура, ДокументОплаты, РаспределеннаяСумма, Отказ, Заголовок)
	Если СтруктураШД.УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС тогда Возврат; КонецЕсли;

	ТаблицаРаспределения = Неопределено;
			
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШД.Организация);
	Запрос.УстановитьПараметр("Дата", СтруктураШД.Дата);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплаты);
	Запрос.УстановитьПараметр("СостояниеОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.УстановитьПараметр("ЦенностьТовары", Перечисления.ВидыЦенностей.Товары);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НДСРеализация0Обороты.Организация,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
	|	&ДокументОплаты КАК СчетФактура,
	|	НДСРеализация0Обороты.Состояние,
	|	0 КАК СуммаБезНДС,
	|	0 КАК НДС,
	|	СУММА(ВЫБОР
	|			КОГДА НДСРеализация0Обороты.Состояние = &СостояниеОжидание
	|				ТОГДА НДСРеализация0Обороты.СуммаБезНДСОборот + НДСРеализация0Обороты.НДСОборот
	|			ИНАЧЕ НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход
	|		КОНЕЦ) КАК СуммаСНДС,
	|	НДСсАвансовОстатки.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(, &Дата, , Организация = &Организация И СчетФактура = &СчетФактура) КАК НДСРеализация0Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСсАвансов.Остатки(&Дата, Организация = &Организация И СчетФактура = &ДокументОплаты) КАК НДСсАвансовОстатки
	|		ПО НДСРеализация0Обороты.Организация = НДСсАвансовОстатки.Организация
	|			И НДСРеализация0Обороты.Покупатель = НДСсАвансовОстатки.Покупатель
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРеализация0Обороты.Организация,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.Состояние,
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	&ЦенностьТовары,
	|	&ЭтотДокумент,
	|	&ЭтотДокумент,
	|	&СостояниеОжидание,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|			ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма
	|		ИНАЧЕ ОтчетКомиссионераОПродажахТовары.Сумма + ОтчетКомиссионераОПродажахТовары.СуммаНДС
	|	КОНЕЦ,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС
	|ИЗ
	|	Документ.КомиссияОтчетПродажиКомиссионера.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомиссияОтчетПродажиКомиссионера КАК ОтчетКомиссионераОПродажах
	|		ПО ОтчетКомиссионераОПродажахТовары.Ссылка = ОтчетКомиссионераОПродажах.Ссылка
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &ЭтотДокумент
	|";
	ТаблицаРаспределенияСФ=Запрос.Выполнить().Выгрузить();

	Если ТаблицаРаспределенияСФ.Количество() > 0 Тогда
		ТаблицаРаспределенияСФ.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(РаспределеннаяСумма, ТаблицаРаспределенияСФ.ВыгрузитьКолонку("СуммаСНДС")), "СуммаБезНДС");
		ТаблицаРаспределенияСФ.Колонки.Удалить("СуммаСНДС");
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределенияСФ Цикл
			СтрокаРаспределения.НДС = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаРаспределения.СуммаБезНДС, Истина, Истина, УчетНалоговСервер.СтавкаНДС(СтрокаРаспределения.СтавкаНДС));
			СтрокаРаспределения.СуммаБезНДС = СтрокаРаспределения.СуммаБезНДС - СтрокаРаспределения.НДС;
		КонецЦикла;
	
		Если ТаблицаРаспределения = Неопределено Тогда
			ТаблицаРаспределения = ТаблицаРаспределенияСФ;
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенияСФ, ТаблицаРаспределения);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаРаспределения <> Неопределено Тогда
		ТаблицаРаспределения.Колонки.Добавить("Событие");
		ТаблицаРаспределения.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные,"ВидЦенности");
		
		Счетчик = ТаблицаРаспределения.Количество();
		Пока Счетчик <> 0 Цикл 
			Счетчик = Счетчик - 1;
			Если ТаблицаРаспределения[Счетчик].СуммаБезНДС = 0 И ТаблицаРаспределения[Счетчик].НДС = 0 Тогда
				ТаблицаРаспределения.Удалить(ТаблицаРаспределения[Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДвижения Из ТаблицаРаспределения Цикл
			Если СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
		КонецЦикла;

		Если (Не Отказ) И (ТаблицаРаспределения <> Неопределено) Тогда
			Движения.НДСПредъявленныйРеализация0.мПериод = СтруктураШД.Дата;
			Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаРаспределения;
			Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание)
	Если Не ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание) Тогда Возврат; КонецЕсли; 

	Если ТипЗнч(Основание)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если НЕ ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда Возврат; КонецЕсли;
		Сделка=Основание.Сделка;

		Если Основание.Проведен Тогда
			СпособРасчетаКомиссионногоВознаграждения=ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			//ПроцентКомиссионногоВознаграждения=ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
			ЗаполнитьТовары(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если Основание.Проведен Тогда
			Сделка=Основание;
			СпособРасчетаКомиссионногоВознаграждения=ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			//ПроцентКомиссионногоВознаграждения=ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
			ЗаполнитьТовары();
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КомиссияИнвентаризацияТоваровОтданных") Тогда
		// Заполним флаги учета налогов.
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;

		Сделка                  = Основание.Сделка;
		ВалютаДокумента         = Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СпособРасчетаКомиссионногоВознаграждения=ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		//ПроцентКомиссионногоВознаграждения=ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		СтавкаНДСВознаграждения=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");

		ЗаполнитьТоварыПоИнвентаризацииОтданных(Основание);
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	ОбщегоНазначения.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	ПараметрыУчетнойПолитики(Истина);

	СтруктураШД=Документы.КомиссияОтчетПродажиКомиссионера.СформироватьСтруктуруШД(Ссылка);
	СтруктураШД.Вставить("МоментВремени", МоментВремени());
   	СтруктураШД.Вставить("Заголовок", ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект));

	СтруктураТД=Документы.КомиссияОтчетПродажиКомиссионера.ПодготовитьТаблицыДокумента(СтруктураШД, Отказ);
	
	Если ДополнительныеСвойства.Свойство("РегистрыДляПроведения") Тогда
		Для каждого СтрокаМассива Из ДополнительныеСвойства.РегистрыДляПроведения Цикл
			Выполнить("ДвижениеПоРегистру_"+СтрокаМассива+"(СтруктураШД, СтруктураТД, Отказ);");
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ДвиженияПоРегистрам(СтруктураШД, СтруктураТД, Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//Автозаполнение ревизитов шапки\табличных частей
	//Если ДополнительныеСвойства.ИнтерактивноеПроведение Тогда
		АвтоЗаполнениеРеквизитовДокумента();
	//КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства, "Продажа");