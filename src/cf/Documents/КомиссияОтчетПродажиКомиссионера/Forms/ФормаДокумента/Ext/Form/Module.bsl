&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()
	Объект.СуммаДокумента=Объект["Товары"].Итог("Сумма");
	Объект.СуммаНДС=Объект["Товары"].Итог("СуммаНДС");

	Если Объект.УчитыватьНДС И Не Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента=Объект.СуммаДокумента+Объект.СуммаНДС;
	КонецЕсли;

	ВременнаяСтрока="Тип цен: "+?(ЗначениеЗаполнено(Объект.ТипЦен), Строка(Объект.ТипЦен)+".", "Не заполнено!");
	Элементы.ЦенаВалютаДокумента.Заголовок=ВременнаяСтрока;

	Элементы.НадписьВсего.Заголовок="Всего ("+СокрЛП(Объект.ВалютаДокумента)+")";
	Элементы.НадписьВсегоНДС.Заголовок="НДС "+?(Объект.СуммаВключаетНДС, "(в т. ч.)", "(сверху)");
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	ДоступностьПроцента=Истина;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ДоступностьПроцента=Ложь;
		Если Не Объект.ПроцентКомиссионногоВознаграждения=0 Тогда
			Объект.ПроцентКомиссионногоВознаграждения=0;
		КонецЕсли;
	КонецЕсли;
	Элементы.ПроцентКомиссионногоВознаграждения.Доступность=ДоступностьПроцента;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтоотметку()
	// Процент и ставка НДС с комиссионного вознаграждения
	Автоотметка=Ложь;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли")
	 ИЛИ Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		Автоотметка=Истина;
	КонецЕсли;

	Если Не Элементы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного=Автоотметка Тогда
		Элементы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного=Автоотметка;
	КонецЕсли;

	Если Не Элементы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного=Автоотметка И НЕ ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		Элементы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного=Автоотметка;
	КонецЕсли;

	Если Не Элементы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного=Автоотметка Тогда
		Элементы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного=Автоотметка;
	КонецЕсли;

	Если Не Элементы.СтавкаНДСВознаграждения.ОтметкаНезаполненного=Автоотметка И НЕ ЗначениеЗаполнено(Объект.СтавкаНДСВознаграждения) Тогда
		Элементы.СтавкаНДСВознаграждения.ОтметкаНезаполненного=Автоотметка;
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьКомиссионноеВознаграждение(Идентификатор)
	СтрокаТабличнойЧасти=Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	Если Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения=Объект.ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли") Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения=Объект.ПроцентКомиссионногоВознаграждения * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения=0;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения=УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СтавкаНДС);
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТоварыПоИнвентаризацииОтданных(ДокументОснование, ID_Покупатели="") Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента",    Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование" ,    ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков Как ЕдиницаИзмерения,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Как Коэффициент,	
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество) КАК Количество,
	|	(МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество)) * МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток) / МАКСИМУМ(Остатки.КоличествоОстаток) КАК Стоимость
	|ИЗ
	|	Документ.ИнвентаризацияТоваровОтданныхНаКомиссию.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,ДоговорКонтрагента = &ДоговорКонтрагента) КАК Остатки
	|ПО
	|	  Док.Номенклатура               = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры
	|	И (Док.Ссылка.Сделка             = Остатки.Сделка
	|      ИЛИ (Док.Ссылка.Сделка = &ПустойЗаказПокупателя И Остатки.Сделка = Неопределено))
	|
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|	И Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	ПересчитыватьСкидку=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество <= 0 Тогда Продолжить; КонецЕсли;

		СтрокаТабличнойЧасти=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.Сумма            = Выборка.Стоимость;
		СтрокаТабличнойЧасти.СуммаПередачи    = Выборка.Стоимость;

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,  Объект,,Ложь,ПересчитыватьСкидку,Ложь,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);

		СтрокаТабличнойЧасти.ЦенаПередачи=СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если Объект.СпособРасчетаКомиссионногоВознаграждения=Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100 * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СтавкаНДС);
		КонецЕсли;

		СтрокаТабличнойЧасти.ID_Покупатели=ID_Покупатели;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТовары(ДокументПередачи=Неопределено, ID_Покупатели="") Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Объект.Сделка);
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПередачи",   Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	Если ДокументПередачи = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.КоличествоОстаток,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПередачи = &СтатусПередачи			 
		|" + ?(НЕ ЗначениеЗаполнено(Объект.Сделка),   "",     "И Сделка = &Сделка") + "
		|	                                                     ) КАК Остатки
		|ГДЕ
		| 	Остатки.КоличествоОстаток > 0
		|";
	Иначе		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|   Док.СтавкаНДС,
		|   Док.СерияНоменклатуры,
		|   МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
		|   СУММА(Док.Количество)                        КАК КоличествоПоДокументу, 
		|	МАКСИМУМ(Остатки.КоличествоОстаток)          КАК КоличествоОстатокПереданных,
		|	МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток) КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|   Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПередачи = &СтатусПередачи			 
		|" + ?(НЕ ЗначениеЗаполнено(Объект.Сделка),   "",     "И Сделка = &Сделка") + "
		|	                                                     ) КАК Остатки
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура 
		|   И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|   И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры
		|ГДЕ
		|   Док.Ссылка = &ДокументПередачи
		| 	И Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Номенклатура,
		|	Док.СтавкаНДС,
		|	Док.СерияНоменклатуры,
		|	Док.ХарактеристикаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|
		|ИТОГИ МАКСИМУМ(КоличествоОстатокПереданных) ПО Док.Номенклатура, Док.ХарактеристикаНоменклатуры";
	КонецЕсли;

	ПересчитыватьСкидку = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ПриИзмененииСуммыПересчитыватьСкидку");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КолвоОстПереданных    = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			КолвоПереданных       = КолвоОстПереданных;
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

		Если ДокументПередачи = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
		Иначе
			СтрокаТабличнойЧасти.Количество = Мин(Выборка.КоличествоПоДокументу, КолвоОстПереданных);
			КолвоОстПереданных = КолвоОстПереданных - СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС         = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		Если ДокументПередачи = Неопределено Тогда
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / Выборка.КоличествоОстаток, 
			               Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(Объект, Объект.ДополнительныеСвойства.ВалютаБухУчета),
			               Объект.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(Объект, Объект.ДополнительныеСвойства.ВалютаБухУчета));
		Иначе
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
			               Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(Объект, Объект.ДополнительныеСвойства.ВалютаБухУчета),
			               Объект.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(Объект, Объект.ДополнительныеСвойства.ВалютаБухУчета));
		КонецЕсли;

		СтрокаТабличнойЧасти.Сумма = ЦенообразованиеСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СтавкаНДС);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, Объект,,Ложь,ПересчитыватьСкидку,Ложь,"Товары");

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100 * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СтавкаНДС);
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры=Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ID_Покупатели=ID_Покупатели;
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПоРеализации(ID_Покупатели, СпособЗаполнения="Заполнить")
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран договор. Заполнение невозможно.",, "Объект.ДоговорКонтрагента"); 
		Возврат;
	КонецЕсли;

	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));

	ОписаниеОповещенияЗакрытия=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоРеализации", ЭтотОбъект, ID_Покупатели);
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещенияЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
	Элементы.ГиперссылкаСчетФактура.Заголовок=УправлениеДиалогамиКлиент.ТекстСчетаФактуры(УчетНалоговСервер.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураВыданный"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_СпособРасчетаКомиссионногоВознаграждения(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_СтавкаНДСВознаграждения(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.СуммаНДСВознаграждения=УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, СтрокаТЧ.СтавкаНДС);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоИнвентаризации(Параметр1, Параметр2) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметр1) Тогда	Возврат; КонецЕсли;
	ЗаполнитьТоварыПоИнвентаризацииОтданных(Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоРеализации(Параметр1, Параметр2) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметр1) Тогда	Возврат; КонецЕсли;
	ЗаполнитьТовары(Параметр2, Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЦенаВалюта(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	//ЗаполнитьЗначенияСвойств(Объект, Параметр1);

	//ПересчитатьЦеныПоВалюте
	//Если Параметр1.ПерезаполнитьЦеныПоТипу Тогда
	//	НаДату=ТекущаяДата();
	//	Для каждого СтрокаКоллекции Из Объект.Товары Цикл
	//		СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.ТипЦен, НаДату, СтрокаКоллекции.ЕдиницаИзмерения);
	//		тпТовары_РассчитатьСумму(СтрокаКоллекции);
	//	КонецЦикла;
	//	Для каждого СтрокаКоллекции Из Объект.Услуги Цикл
	//		СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура,,Объект.ТипЦен, НаДату);
	//		тпУслуги_РассчитатьСумму(СтрокаКоллекции);
	//	КонецЦикла;
	//КонецЕсли;

	ОбновитьНадписи();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СКомиссионером"));
		
		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);		
		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);

	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		УстановитьВидимость();
		УстановитьАвтоотметку();
		
	ИначеЕсли Элемент.Имя="СпособРасчетаКомиссионногоВознаграждения" Тогда
		Если Не Объект.СпособРасчетаКомиссионногоВознаграждения=ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
			Если Объект.Товары.Количество() > 0 Тогда
				ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_СпособРасчетаКомиссионногоВознаграждения", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, "Изменился способ расчета. Пересчитать комиссионное вознаграждение?", РежимДиалогаВопрос.ДаНет, 20);
			КонецЕсли;
		КонецЕсли;
		УстановитьВидимость();
		УстановитьАвтоотметку();
		
	ИначеЕсли Элемент.Имя="ПроцентКомиссионногоВознаграждения" Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_СпособРасчетаКомиссионногоВознаграждения", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Изменился способ расчета. Пересчитать комиссионное вознаграждение?", РежимДиалогаВопрос.ДаНет, 20);
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя="СтавкаНДСВознаграждения" Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_СтавкаНДСВознаграждения", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Пересчитать суммы НДС вознаграждения?", РежимДиалогаВопрос.ДаНет, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="ГиперссылкаСчетФактура" Тогда
		Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
			Сообщить("Необхоимо записать документ!"); Возврат;
		КонецЕсли;
		УправлениеДиалогамиКлиент.ВвестиСчетФактуру(Объект.Ссылка, ЭтаФорма, "СчетФактураВыданный");
	КонецЕсли;
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;
	
	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если Элементы.Покупатели.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	ID_Покупатели=Элементы.Покупатели.ТекущиеДанные.ID;

	Если стрКоманда="ЗаполнитьПоИнвентаризации" Или стрКоманда="ЗаполнитьПоДоговору" Тогда
		ЗаполнятьТабличнуюЧасть = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";
		Иначе
			ЗаполнятьТабличнуюЧасть = Истина;
		КонецЕсли;

		Если Не ЗаполнятьТабличнуюЧасть Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения, 10);
			Возврат;
		КонецЕсли;
		
		Если стрКоманда="ЗаполнитьПоДоговору" Тогда
			ЗаполнитьТовары(, ID_Покупатели);
			
		ИначеЕсли стрКоманда="ЗаполнитьПоИнвентаризации" Тогда
			ПараметрыФормы=Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
			
			ОписаниеОповещенияЗакрытия=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоИнвентаризации", ЭтотОбъект, ID_Покупатели);
			ОткрытьФорму("Документ.КомиссияИнвентаризацияТоваровОтданных.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещенияЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	ИначеЕсли стрКоманда="ЗаполнитьПоРеализации" Тогда
		ЗаполнитьПоРеализации(ID_Покупатели);
	
	ИначеЕсли стрКоманда="ДобавитьИзРеализации" Тогда
		ЗаполнитьПоРеализации(ID_Покупатели, "Добавить");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, Объект.ТипЦен, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.Покупатели.ТекущиеДанные=Неопределено Тогда
		Отказ=Истина; ПоказатьПредупреждение(,"Не выбран покупатель!", 10);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
		Элементы.Товары.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_Покупатели=Элементы.Покупатели.ТекущиеДанные.ID;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи(); тпПокупатели_ОбновитьПредставление();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные; стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	
	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков,СтавкаНДС");

		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.СтавкаНДС=СтруктураНоменклатуры.СтавкаНДС;
		
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);
		
	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦен, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
		КонецЕсли;
		
	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="КоличествоМест" Тогда
		ТекущиеДанные.СуммаПередачи=ТекущиеДанные.ЦенаПередачи*ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);
		тпТовары_РассчитатьСумму(ТекущиеДанные);

	ИначеЕсли стрКолонка="Количество" Тогда
		ТекущиеДанные.СуммаПередачи=ТекущиеДанные.ЦенаПередачи * ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);

	ИначеЕсли стрКолонка="Цена" Тогда
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);
		тпТовары_РассчитатьСумму(ТекущиеДанные);

	ИначеЕсли стрКолонка="Сумма" Тогда
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма/?(ТекущиеДанные.Количество=0, 1, ТекущиеДанные.Количество);
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="ЦенаПередачи" Тогда
		ТекущиеДанные.СуммаПередачи=ТекущиеДанные.ЦенаПередачи * ТекущиеДанные.Количество;
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);
		ТекущиеДанные.СуммаНДСПередачи=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);

	ИначеЕсли стрКолонка="СуммаПередачи" Тогда
		РассчитатьКомиссионноеВознаграждение(Элементы.Товары.ТекущаяСтрока);

	ИначеЕсли стрКолонка="СуммаВознаграждения" Тогда
		ТекущиеДанные.СуммаНДСВознаграждения=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.СуммаВознаграждения, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, Объект.СтавкаНДСВознаграждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда ТекущиеДанные=Элементы.Товары.ТекущиеДанные; КонецЕсли;
	ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Покупатели"

&НаКлиенте
Процедура тпПокупатели_ПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные=Неопределено Тогда
		ID=СокрЛП(Элемент.ТекущиеДанные.ID);
	КонецЕсли;
	Элементы.Товары.ОтборСтрок=Новый ФиксированнаяСтруктура("ID_Покупатели", ID);
КонецПроцедуры

&НаКлиенте
Процедура тпПокупатели_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПокупатели_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПокупатели_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПокупатели_ПередУдалением(Элемент, Отказ)
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_Покупатели", Элемент.ТекущиеДанные.ID));
	Для Каждого СтрокаМассива из МассивСтрок Цикл
		Объект.Товары.Удалить(СтрокаМассива);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпПокупатели_ОбновитьПредставление()
	Для каждого СтрокаКоллекции Из Объект.Покупатели Цикл
		Всего=0; 
		МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_Покупатели", СтрокаКоллекции.ID));
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			Всего=Всего+СтрокаМассива.Сумма;
		КонецЦикла;
		СтрокаКоллекции.Всего=Всего;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Денежные средства"

&НаКлиенте
Процедура тпДенежныеСредства_Колонка_ПриИзменении(Элемент)
	ТекущиеДанные=Элементы.ДенежныеСредства.ТекущиеДанные; стрКолонка=стрЗаменить(Элемент.Имя, "ДенежныеСредства", "");

	Если стрКолонка="Сумма" ИЛИ стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
	ЗаполнитьТекстПроСчетФактуру(); 
	УстановитьАвтоотметку();
	
	РазрешитьРедактированиеЦен=НастройкиПользователяСервер.ЗначениеПраваПользователя("РедактированиеЦенВДокументах");
	Элементы.ТоварыЦенаПередачи.ТолькоПросмотр  = НЕ РазрешитьРедактированиеЦен;
	Элементы.ТоварыСуммаПередачи.ТолькоПросмотр = НЕ РазрешитьРедактированиеЦен;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		тпПокупатели_ОбновитьПредставление();
	КонецЕсли;

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпПокупатели_ОбновитьПредставление();
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры