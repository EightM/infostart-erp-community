&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			УстановитьВидимостьЭлементовФормы();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	Элементы.ТоварыЯчейка.Видимость=?(НЕ ЗначениеЗаполнено(Объект.СкладОтправитель),Ложь,ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладОтправитель, "Ячеистый"));
	Элементы.ТоварыЯчейкаНовая.Видимость=?(НЕ ЗначениеЗаполнено(Объект.СкладПолучатель),Ложь,ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "Ячеистый"));
	Элементы.ТоварыСерияНоменклатурыНовая.Видимость=Элементы.ТоварыСерияНоменклатуры.Видимость;
	Элементы.ТоварыХарактеристикаНоменклатурыНовая.Видимость=Элементы.ТоварыХарактеристикаНоменклатуры.Видимость;

	Если НЕ Элементы.ТоварыХарактеристикаНоменклатуры.Видимость И НЕ Элементы.ТоварыСерияНоменклатуры.Видимость Тогда
		 Элементы.ТоварыТекущиеПараметры.Видимость=Элементы.ТоварыЯчейка.Видимость;
		 Элементы.ТоварыНовыеПараметры.Видимость=Элементы.ТоварыЯчейкаНовая.Видимость;
	КонецЕсли;

	Элементы.НДСвСтоимостиТоваров.Доступность=УчетнаяПолитика.СложныйУчетНДС;	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещениеТоваров."+стрЗаменить(Команда.Имя, "Операция_", ""));
	УстановитьВидимостьЭлементовФормы();
КонецПроцедуры

&НаСервере
Функция СоздатьТранспортнуюВЕТИСНаСервере()	
	ДокументОбъект=Документы["ВетисТранспортныеОперации"].СоздатьДокумент();
	ДокументОбъект.Заполнить(Объект.Ссылка);
	ДокументОбъект.Дата=ТекущаяДата();
	ДокументОбъект.Записать();
	Возврат ДокументОбъект.Ссылка;
КонецФункции

&НаКлиенте
Процедура СоздатьТранспортнуюВЕТИС(Команда)
	ДокументСсылка=СоздатьТранспортнуюВЕТИСНаСервере();
	ОткрытьФорму("Документ.ВетисТранспортныеОперации.ФормаОбъекта", Новый Структура("Ключ", ДокументСсылка));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпТовары_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

	Если Параметр2.Команда="ЗаполнитьОстаткамСкладаОтправителяПоБухСчету" Тогда
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_ВыборБухСчета", ЭтотОбъект, Параметр2),, "Укажите бух.счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		Возврат;
	КонецЕсли;

	тпТовары_Заполнить(Параметр2.Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Товары_ВыборБухСчета(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТовары_Заполнить(Параметр2.Команда, Параметр1);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьРозничнуюЦену(Параметр1, Параметр2) Экспорт 
	Если Не Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;

	Для Каждого СтрокаКоллекции Из Объект.Товары Цикл
		ТипЦенРозничнойТорговли=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ТипЦенРозничнойТорговли");
		СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыРозницы(СтрокаКоллекции.Номенклатура, ТипЦенРозничнойТорговли, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.Дата, СтрокаКоллекции.ЕдиницаИзмерения);
	КонецЦикла;

	Элементы.ТоварыЦена.АвтоОтметкаНезаполненного=НЕ НастройкиПользователяСервер.ЗначениеПраваПользователя("РазрешитьНулевыеЦеныВРознице");
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="СкладПолучатель" Тогда
		ВидСклада=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ВидСклада");
		Если ВидСклада=ПредопределенноеЗначение("Перечисление.ВидыСкладов.Розничный") И Объект.Товары.Количество() > 0 Тогда
			ТекстВопроса="Заполнить цены для товаров в соответствии с установленным типом цен для склада"+Объект.СкладПолучатель+".";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьРозничнуюЦену", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, "Внимание", КодВозвратаДиалога.Да);
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя="ЗаказПолучатель" Тогда
		Если ЗначениеЗаполнено(Объект.ЗаказПолучатель) И НЕ ТипЗнч(Объект.ЗаказПолучатель)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			СтруктураДанных=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(Объект.ЗаказПолучатель, "Склад,Подразделение");
			Объект.СкладПолучатель=СтруктураДанных.Склад;
			Объект.ПодразделениеПолучатель=СтруктураДанных.Подразделение;
		КонецЕсли;
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="ЗаказОтправитель" Тогда
		Если ЗначениеЗаполнено(Объект.ЗаказОтправитель) И НЕ ТипЗнч(Объект.ЗаказОтправитель)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			СтруктураДанных=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(Объект.ЗаказОтправитель, "Склад,Подразделение");
			Объект.СкладОтправитель=СтруктураДанных.Склад;
			Объект.Подразделение=СтруктураДанных.Подразделение;
		КонецЕсли;
		УстановитьВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="Подвид" Тогда
		УстановитьВидимостьЭлементовФормы();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.СкладОтправитель);
		//ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		//ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Возвратная тара"

&НаКлиенте
Процедура кпВозвратнаяТара_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ВозвратнаяТара"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");		
	
	Если стрКоманда="ЗаполнитьУчетнуюСтоимость" Тогда
		Для каждого СтрокаКоллекции Из Объект.ВозвратнаяТара Цикл
			СтрокаКоллекции.СебестоимостьУУ=СтрокаКоллекции.Количество*ЦенообразованиеСервер.УчетнаяЦенаТовара(Объект.Организация, СтрокаКоллекции.Номенклатура,,Объект.СкладОтправитель,,Объект.Дата, "УУ");
			СтрокаКоллекции.СебестоимостьНУ=СтрокаКоллекции.Количество*ЦенообразованиеСервер.УчетнаяЦенаТовара(Объект.Организация, СтрокаКоллекции.Номенклатура,,Объект.СкладОтправитель,,Объект.Дата, "НУ");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_ПослеУдаления(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура тпВозвратнаяТара_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ВозвратнаяТара", "");
	ТекущиеДанные=Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		ТипЦенРозничнойТорговли=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ТипЦенРозничнойТорговли");
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, ТипЦенРозничнойТорговли, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		тпТовары_Заполнить(стрКоманда);
		
	ИначеЕсли стрКоманда="ЗаполнитьПоХарактеристикам" Тогда
		тпТовары_Заполнить(стрКоманда);
		
	ИначеЕсли стрКоманда="ЗаполнитьУчетнуюСтоимость" Тогда
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			СтрокаКоллекции.СебестоимостьУУ=СтрокаКоллекции.Количество*ЦенообразованиеСервер.УчетнаяЦенаТовара(Объект.Организация, СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.СкладОтправитель, СтрокаКоллекции.СерияНоменклатуры, Объект.Дата, "УУ");
			СтрокаКоллекции.СебестоимостьНУ=СтрокаКоллекции.Количество*ЦенообразованиеСервер.УчетнаяЦенаТовара(Объект.Организация, СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.СкладОтправитель, СтрокаКоллекции.СерияНоменклатуры, Объект.Дата, "НУ");
		КонецЦикла;
		
	ИначеЕсли стрКоманда="ЗаполнитьЦену" Тогда
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			ТипЦенРозничнойТорговли=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ТипЦенРозничнойТорговли");
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, ТипЦенРозничнойТорговли, Объект.Дата, СтрокаКоллекции.ЕдиницаИзмерения);
		КонецЦикла;

	ИначеЕсли стрКоманда="ЗаполнитьНовыеПараметрыНаОснованииТекущих" Тогда
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			СтрокаКоллекции.СерияНоменклатурыНовая=СтрокаКоллекции.СерияНоменклатуры;
			СтрокаКоллекции.ХарактеристикаНоменклатурыНовая=СтрокаКоллекции.ХарактеристикаНоменклатуры;
			СтрокаКоллекции.КачествоНовое=СтрокаКоллекции.Качество;
			СтрокаКоллекции.ЯчейкаНовая=СтрокаКоллекции.Ячейка;
		КонецЦикла;
		
	ИначеЕсли стрКоманда="ЗаполнитьОстаткамСкладаОтправителяПоБухСчету" Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
			//ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_ВыборБухСчета", ЭтотОбъект, Новый Структура("Команда", стрКоманда)),, "Укажите бух.счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		КонецЕсли;

	ИначеЕсли стрКоманда="ЗаполнитьПоПоложительнымОстаткамСкладаОтправителя" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите склад-оправитель",,"Объект.СкладОтправитель");
			Возврат;
		КонецЕсли;
		Если Объект.Товары.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
			//ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе
			тпТовары_Заполнить(стрКоманда);
		КонецЕсли;

	ИначеЕсли стрКоманда="ЗаполнитьПоОтрицательнымОстаткамСкладаПолучателя" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите склад-получатель",,"Объект.СкладПолучатель");
			Возврат;
		КонецЕсли;
		Если Объект.Товары.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
			//ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Товары_Заполнить", ЭтотОбъект, Новый Структура("Команда", стрКоманда)), "Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Иначе		
			тпТовары_Заполнить(стрКоманда);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Товары.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТипЦенРозничнойТорговли=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ТипЦенРозничнойТорговли");
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;
	ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, ТипЦенРозничнойТорговли, ТекущаяДата(), Единица);;
	ТекущиеДанные.Сумма=ТекущиеДанные.Количество*ТекущиеДанные.Цена;

	Элементы.Товары.Обновить();
	Элементы.Товары.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередУдалением(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;

		Если ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ВидСклада")=ПредопределенноеЗначение("Перечисление.ВидыСкладов.Оптовый") Тогда			
			ТипЦенРозничнойТорговли=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладОтправитель, "ТипЦенРозничнойТорговли");;
		Иначе
			ТипЦенРозничнойТорговли=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ТипЦенРозничнойТорговли");;
		КонецЕсли;	
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, ТипЦенРозничнойТорговли, объект.Дата, ТекущиеДанные.ЕдиницаИзмерения);
		ТекущиеДанные.Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			ТипЦенРозничнойТорговли=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ТипЦенРозничнойТорговли");;
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, ТипЦенРозничнойТорговли, объект.Дата, ТекущиеДанные.ЕдиницаИзмерения);
		КонецЕсли;

	ИначеЕсли стрКолонка="СерияНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СерияНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура тпТовары_Заполнить(стрКоманда, ВыбСчет=Неопределено)
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		ДокументОбъект=РеквизитФормыВЗначение("Объект");
		ОбработкаТабличныхЧастей.ЗаполнитьСерии(ДокументОбъект);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	ИначеЕсли стрКоманда="ЗаполнитьПоХарактеристикам" Тогда
		ДокументОбъект=РеквизитФормыВЗначение("Объект");
		ОбработкаТабличныхЧастей.ЗаполнитьХарактеристики(ДокументОбъект);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	ИначеЕсли стрКоманда="ЗаполнитьПоПоложительнымОстаткамСкладаОтправителя" Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("КонДата", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Склад", Объект.СкладОтправитель);
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков Как ЕдиницаИзмерения,
		|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Как Коэффициент,		
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	ИсточникДанных.СерияНоменклатуры,
		|	ИсточникДанных.Качество,
		|	ИсточникДанных.КоличествоОстаток Как Количество,
		|	0 КАК Цена
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&КонДата, Склад = &Склад) КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.КоличествоОстаток > 0
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), Выборка);
		КонецЦикла;
		
	ИначеЕсли стрКоманда="ЗаполнитьПоОтрицательнымОстаткамСкладаПолучателя" Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("КонДата", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Склад", Объект.СкладПолучатель);
		Запрос.Текст="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникДанных.Номенклатура,
		|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков Как ЕдиницаИзмерения,
		|	ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент Как Коэффициент,		
		|	ИсточникДанных.ХарактеристикаНоменклатуры,
		|	ИсточникДанных.СерияНоменклатуры,
		|	ИсточникДанных.Качество,
		|	-ИсточникДанных.КоличествоОстаток Как Количество,
		|	0 КАК Цена
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&КонДата, Склад = &Склад) КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.КоличествоОстаток < 0
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), Выборка);
		КонецЦикла;

	ИначеЕсли стрКоманда="ЗаполнитьОстаткамСкладаОтправителяПоБухСчету" Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("КонДата", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Склад", Объект.СкладОтправитель);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Счет", ВыбСчет);	
		Запрос.Текст="
		|ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ОстаткиПартий.СерияНоменклатуры,
		|	ОстаткиПартий.ХарактеристикаНоменклатуры,
		|	Остатки.Субконто1.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	Остатки.Субконто1.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	ОстаткиПартий.Качество,
		|	СУММА(Остатки.КоличествоОстаток) КАК Количество,
		|	0 КАК ЦенаВРознице
		|	
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&Счет),, Субконто2 = &Склад "+?(Объект.Организация.Пустая(), "", " И Организация=&Организация")+") КАК Остатки
		|ЛЕВОЕ СОЕДИНЕНИЕ 			
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&КонДата, Склад = &Склад "+?(Объект.Организация.Пустая(), "", " И Организация=&Организация")+") КАК ОстаткиПартий
		|ПО
		|	Остатки.Субконто1 = ОстаткиПартий.Номенклатура И Остатки.Субконто2 = ОстаткиПартий.Склад
		|	
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Субконто1,
		|	ОстаткиПартий.ХарактеристикаНоменклатуры,
		|	ОстаткиПартий.СерияНоменклатуры,
		|	ОстаткиПартий.Качество
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), Выборка);
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Сделки"

&НаКлиенте
Процедура тпСделки_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_ПослеУдаления(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура кпСделки_ВыполнитьДействие(Команда)
	тпСделки_Подбор("Заполнить", ЭтаФорма);
КонецПроцедуры
 
&НаКлиенте
Процедура тпСделки_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь; тпСделки_Подбор("Изменить", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_Подбор(стрКоманда, Владелец)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("МножественныйВыбор", стрКоманда="Заполнить");

	УправлениеЗаказамиКлиент.ВыполнитьДействие(СтруктураПараметров, Владелец, стрКоманда);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");	
	АктивностьМеркурия=ОбщегоНазначенияСервер.ПроверкаРасширения("Меркурий");
	Элементы.СоздатьТранспортнуюВЕТИС.Доступность=АктивностьМеркурия;
	Элементы.СоздатьТранспортнуюВЕТИС.Видимость=АктивностьМеркурия;
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры