&НаСервере
Процедура ОбновитьДанныеФормы()
	тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормы(стрРеквизиты)
	МассивРеквизитов=СтрРазделить(стрРеквизиты, ",");
	Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
		Если ИмяРеквизита="УчетнаяПолитика" Тогда
			УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
			тпШкалаДиапазонов_ОграничениеТипа();
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПроверкаУчетнойПолитики()
	Если Не ЗначениеЗаполнено(УчетнаяПолитика) Тогда Возврат Ложь; КонецЕсли;
	Возврат УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте ИЛИ УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам;
КонецФункции

&НаСервере
Функция ТипЗначенияПорога()
	Если Не ЗначениеЗаполнено(УчетнаяПолитика) Тогда Возврат Тип("Число"); КонецЕсли;
	Если УчетнаяПолитика.СпособИспользованияНакопительныхСкидок=Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		ЗначенияПорога=Тип("Число");
	ИначеЕсли УчетнаяПолитика.СпособИспользованияНакопительныхСкидок=Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоВладельцуДисконтнойКарты Тогда
		ЗначенияПорога=Тип("СправочникСсылка.ВидыДисконтныхКарт");
	КонецЕсли;
	Возврат ЗначенияПорога;
КонецФункции 

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Дата" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");

	ИначеЕсли Элемент.Имя="Организация" Тогда
		ОбновитьРеквизитыФормы("УчетнаяПолитика");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий "Шкалы диапазонов"

&НаСервере
Функция тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала()
	Для Каждого ТекущаяСтрока Из Объект.ШкалаДиапазонов Цикл
		МаксНижняяГраница = Неопределено;
		СледующаяСтрока = Неопределено;
		Для Каждого СтрокаТЧ Из Объект.ШкалаДиапазонов Цикл
			Если (МаксНижняяГраница = Неопределено Или МаксНижняяГраница >= СтрокаТЧ.НижняяГраница)
				И ТекущаяСтрока.НижняяГраница <= СтрокаТЧ.НижняяГраница
				И СтрокаТЧ <> ТекущаяСтрока Тогда
				СледующаяСтрока = СтрокаТЧ;
				МаксНижняяГраница = СтрокаТЧ.НижняяГраница;
			КонецЕсли;
		КонецЦикла;
		
		Если СледующаяСтрока=Неопределено Тогда
			ТекущаяСтрока.ПредставлениеИнтервала="От "+СокрЛП(ТекущаяСтрока.НижняяГраница);
		ИначеЕсли ТекущаяСтрока.НижняяГраница = СледующаяСтрока.НижняяГраница Тогда
			ТекущаяСтрока.ПредставлениеИнтервала="ОШИБКА: такая нижняя граница уже есть!";
		Иначе
			ТекущаяСтрока.ПредставлениеИнтервала="От "+СокрЛП(ТекущаяСтрока.НижняяГраница)+" до "+СокрЛП(СледующаяСтрока.НижняяГраница);
		КонецЕсли;
	КонецЦикла;
КонецФункции 

&НаКлиенте
Процедура тпШкалаДиапазонов_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не ПроверкаУчетнойПолитики() Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(, "В учетной политике не установлено использование накопительных скидок!", 20);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпШкалаДиапазонов_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпШкалаДиапазонов_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала();
	Объект.ШкалаДиапазонов.Сортировать("НижняяГраница");
КонецПроцедуры

&НаКлиенте
Процедура тпШкалаДиапазонов_ОграничениеТипа()
	Массив=Новый Массив;
	Массив.Добавить(ТипЗначенияПорога());
	Элементы.ШкалаДиапазоновЗначениеПорога.ОграничениеТипа=Новый ОписаниеТипов(Массив);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьРеквизитыФормы("УчетнаяПолитика");	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпШкалаДиапазонов_ЗаполнитьПредставлениеИнтервала();
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
