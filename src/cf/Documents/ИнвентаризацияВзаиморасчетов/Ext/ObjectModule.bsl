//	Процедура выполняет заполнение документа по форме ИНВ-17 данными регистра БУ
//
//	Аргументы:	1.	аргВидЗадолженности 
// 	Тип:	 		Перечисления.ВидыЗадолженности
//	Назначение:     Формирование выборки по конкретному виду задолженности (опция)
//
// 				2.	СписокСчетовВАкт
// 	Тип:			Массив
//	Назначение:     Формирование выборки по счетам (обязательный аргумент)
//
Процедура ЗаполнитьАктДляИнв17(ВидЗадолженности = Неопределено) Экспорт
	
	// Проверка требования на отбор данных по виду задолженности
	Если НЕ (ВидЗадолженности = Неопределено) Тогда
		// Вид задолженности выбран
		// Выполнение очистки записей ТЧ Контрагенты по виду задолженности
		СтруктураОтбора = Новый Структура("ВидЗадолженности", ВидЗадолженности);
		УдаляемыеСтроки = Контрагенты.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Контрагенты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	Иначе
		// Полная очистка записей в ТЧ Контрагенты
		Контрагенты.Очистить();
	КонецЕсли;

	ГраницаАкта = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	МассивСчетов=СчетаРасчетов.ВыгрузитьКолонку("СчетРасчетов");
	МассивСчетов=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ГраницаАкта);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("ВидЗадолженности", ВидЗадолженности);
	Запрос.УстановитьПараметр("Дебиторская", Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("Активный", ВидСчета.Активный);
	Запрос.УстановитьПараметр("Пассивный", ВидСчета.Пассивный);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА  ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			КОГДА  ХозрасчетныйОстатки.СуммаОстатокДт < 0
	|				ТОГДА -ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстатокДт > 0 ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ КАК ВидЗадолженности	
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов),, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(&ВидЗадолженности = НЕОПРЕДЕЛЕНО
	|			ИЛИ ВЫБОР
	|				КОГДА ХозрасчетныйОстатки.СуммаОстатокДт > 0 ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|					ТОГДА &Дебиторская
	|				ИНАЧЕ &Кредиторская
	|			КОНЕЦ = &ВидЗадолженности)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстатокДт > 0 ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1.Представление,
	|	ХозрасчетныйОстатки.Счет.Порядок
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных=Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
		Если СтрокаДанных.Подтверждено<0 Тогда
			СтрокаДанных.Подтверждено=-СтрокаДанных.Подтверждено;
		КонецЕсли;	
	КонецЦикла;	
	Контрагенты.Свернуть("ВидЗадолженности,Контрагент,СчетРасчетов","Подтверждено,НеПодтверждено,ИстекСрокДавности");
КонецПроцедуры

//	Функция возвращает выборку должностей для членов инвентаризационной комиссии
//	
//	Аргументы	1. ОдиночнаяВыборка
//				Тип: булево
//				Назначение: признак выборки должности при изменении единичного
//				поля члена комиссии
//				2. Комиссия
//				Тип: Структура
//				а) для одиночной выборки - Организация, ФизЛицо
//
//	Возвращаемое значение: выборка запроса
//
Функция ПолучитьДолжностиЧленовКомиссии(ОдиночнаяВыборка=Ложь, ФизЛицо=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Если ОдиночнаяВыборка Тогда
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);		
		Запрос.Текст="
		|ВЫБРАТЬ 
		|		ЕСТЬNULL(ИсточникДанных.Должность.Представление, ""<Не заполнена>"")
		|		КАК Должность
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Организация=&Организация И ФизЛицо=&ФизЛицо)
		|		КАК ИсточникДанных
		|";
	Иначе
		Запрос.Текст="
		|ВЫБРАТЬ 
		|	ЕСТЬNULL(ИсточникДанных1.Должность.Представление, ""<Не заполнена>"")
		|	КАК ДолжностьПредседатель,
		|	ЕСТЬNULL(ИсточникДанных2.Должность.Представление, ""<Не заполнена>"")
		|	КАК Должность1,
		|	ЕСТЬNULL(ИсточникДанных3.Должность.Представление, ""<Не заполнена>"")
		|	КАК Должность2,
		|	ЕСТЬNULL(ИсточникДанных4.Должность.Представление, ""<Не заполнена>"")
		|	КАК Должность3
		|ИЗ
		|	Документ.ИнвентаризацияРасчетов КАК ИнвентаризацияРасчетов
		|
		|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(	&Дата, Организация=&Организация) 
		|		КАК ИсточникДанных1
		|ПО 
		|	ИнвентаризацияРасчетов.Председатель = ИсточникДанных1.ФизЛицо
		|
		|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(	&Дата, Организация=&Организация) 
		|		КАК ИсточникДанных2
		|ПО 
		|	ИнвентаризацияРасчетов.Сотрудник1 = ИсточникДанных2.ФизЛицо
		|
		|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(	&Дата, Организация=&Организация) 
		|	КАК ИсточникДанных3
		|ПО 
		|	ИнвентаризацияРасчетов.Сотрудник2 = ИсточникДанных3.ФизЛицо
		|
		|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(	&Дата, Организация=&Организация) 
		|	КАК ИсточникДанных4
		|ПО 
		|	ИнвентаризацияРасчетов.Сотрудник3 = ИсточникДанных4.ФизЛицо
		|ГДЕ
		|	ИнвентаризацияРасчетов.Ссылка = &ТекущийДокумент
		|";
	КонецЕсли;

	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ПолучитьИтоги() Экспорт
	ТабКонтрагентыДт = Контрагенты.Выгрузить();
	ТабКонтрагентыКт = ТабКонтрагентыДт.Скопировать();
	
	ОтборДт	 = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	ОтборКт	 = Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	мИтогиДт = ТабКонтрагентыДт.НайтиСтроки(ОтборКт);
	мИтогиКт = ТабКонтрагентыКт.НайтиСтроки(ОтборДт);
	
	Для Каждого ЭлмИтогиДт Из мИтогиДт Цикл
		ТабКонтрагентыДт.Удалить(ЭлмИтогиДт);
	КонецЦикла;
	
	Для Каждого ЭлмИтогиКт Из мИтогиКт Цикл
		ТабКонтрагентыКт.Удалить(ЭлмИтогиКт);
	КонецЦикла;
	
	СуммаДт = 	ТабКонтрагентыДт.Итог("Подтверждено")	+ 
				ТабКонтрагентыДт.Итог("НеПодтверждено");
				
	СуммаКт = 	ТабКонтрагентыКт.Итог("Подтверждено")	+ 
				ТабКонтрагентыКт.Итог("НеПодтверждено");
	
	ТекстИтогиДт = "Всего строк:" + Символы.НПП	+ ТабКонтрагентыДт.Количество() + Символы.Таб + 
					"Всего, руб.:" + Символы.НПП + 
					Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ "подтверждено:" + Символы.НПП + 
					Формат(ТабКонтрагентыДт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
					"не подтверждено:" + Символы.НПП + 
					Формат(ТабКонтрагентыДт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
					"истек срок давности:" + Символы.НПП + 
					Формат(ТабКонтрагентыДт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");
	
	ТекстИтогиКт = "Всего строк:" + Символы.НПП	+ ТабКонтрагентыКт.Количество() + Символы.Таб + 
					"Всего, руб.:" + Символы.НПП + 
					Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ "подтверждено:" + Символы.НПП + 
					Формат(ТабКонтрагентыКт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
					"не подтверждено:" + Символы.НПП + 
					Формат(ТабКонтрагентыКт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+ 
					"истек срок давности:" + Символы.НПП + 
					Формат(ТабКонтрагентыКт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");
	
	ТекстИтогиДт = ?(ТабКонтрагентыДт.Количество() = 0,
					"Документ по дебиторской задолженности не заполнен.",
					ТекстИтогиДт);

	ТекстИтогиКт = ?(ТабКонтрагентыКт.Количество() = 0,
					"Документ по кредиторской задолженности не заполнен.",
					ТекстИтогиКт);

	Возврат Новый Структура("СтрокаДт,СтрокаКт", ТекстИтогиДт, ТекстИтогиКт);	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);