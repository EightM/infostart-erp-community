////////////////////////////////////////////////////////////////////////////////
//Управление печатными формами

Процедура СтруктураПечатныхФорм(Структура) Экспорт
	Структура.Вставить("ИНВ17", "ИНВ-17 (акт инвентаризации)");
	Структура.Вставить("ИНВ22", "ИНВ-22 (приказ)");
	Структура.Вставить("Инв17Прил", "ИНВ-17 (справка)");
КонецПроцедуры

Функция ИнициализацияМакета(СтруктураПараметров, стрМакет)
	Если СтруктураПараметров.Свойство("Макет") Тогда
		Возврат СтруктураПараметров.Макет;
	КонецЕсли;
	Макет=СтруктураПараметров.МакетШаблон;
	Если Макет=Неопределено Тогда
		Если Метаданные.ОбщиеМакеты.Найти(стрМакет)=Неопределено Тогда
			Макет=ПолучитьМакет(стрМакет);
		Иначе
			Макет=ПолучитьОбщийМакет(стрМакет);
		КонецЕсли;
	КонецЕсли;
	Возврат Макет;
КонецФункции

Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) 
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	РаботникиОрганизацийСрезПоследних.ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ Ссылка КАК ФизЛицо ИЗ Справочник.ФизическиеЛица ГДЕ Ссылка = &ФизЛицо) КАК ФизЛица
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|	ПО ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|	ПО ФизЛица.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ 
	|			РаботникиОрганизацийСрезПоследних.ТабНомер КАК ТабельныйНомер,
	|			РаботникиОрганизацийСрезПоследних.Сотрудник КАК ФизЛицо,
	|			РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|			РаботникиОрганизацийСрезПоследних.Подразделение КАК ПодразделениеОрганизации
	|		ИЗ
	|			РегистрСведений.КадровыеСведения.СрезПоследних(&ДатаСреза,	Сотрудник = &ФизЛицо И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	|		) КАК РаботникиОрганизацийСрезПоследних
	|	ПО ФизЛица.ФизЛицо = РаботникиОрганизацийСрезПоследних.Физлицо
	|";
	
	Данные=Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
								|ПредставлениеДокумента");

	ЗаполнитьЗначенияСвойств(Результат, Данные);

	Результат.Представление=ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
	
	Возврат Результат;	
КонецФункции

Функция СформироватьПредставлениеКонтрагента(Контрагент, Наименование, ПолноеНаименование)
	
	ПредставлениеКонтрагента="";
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ТипАдрес=Перечисления.ТипыКонтактнойИнформации.Адрес;
		МассивТиповКИ=Новый Массив;
		МассивТиповКИ.Добавить(ТипАдрес);
		МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		ВидФактАдрес=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		МассивВидовКИ=Новый Массив;
		МассивВидовКИ.Добавить(ВидФактАдрес);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);

		Запрос=Новый Запрос;		
		Запрос.УстановитьПараметр("МассивТиповКИ", МассивТиповКИ);
		Запрос.УстановитьПараметр("МассивВидовКИ", МассивВидовКИ);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст="
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Тип,
			|	КонтактнаяИнформация.Вид,
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Тип В (&МассивТиповКИ)
			|	И КонтактнаяИнформация.Вид В (&МассивВидовКИ)
			|	И КонтактнаяИнформация.Объект=&Контрагент";
		Выборка=Запрос.Выполнить().Выбрать();
		ФактАдрес="";
		ЮрАдрес="";
		Телефон="";
		Пока Выборка.Следующий() Цикл
			Если Выборка.Тип=ТипАдрес И Выборка.Вид=ВидФактАдрес Тогда
				ФактАдрес=Выборка.Представление;
			ИначеЕсли Выборка.Тип=ТипАдрес Тогда
				ЮрАдрес=Выборка.Представление;
			Иначе
				Телефон=Выборка.Представление;
			КонецЕсли; 			
		КонецЦикла;
		
		Адрес=?(ПустаяСтрока(ЮрАдрес), ФактАдрес, ЮрАдрес);
		Телефон=?(ПустаяСтрока(Телефон), Телефон, "т."+Телефон);
		ПредставлениеКонтрагента=?(ПустаяСтрока(ПолноеНаименование), Наименование, ПолноеНаименование)+Символы.ПС+
			Адрес+?(ПустаяСтрока(Адрес), Телефон, ", "+Телефон);
	КонецЕсли; 
	
	Возврат ПредставлениеКонтрагента;
	
КонецФункции

Функция СформироватьЗапрос(Организация, Контрагент, ДатаКонца, ДтКт,Счет)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ДатаКонца", Новый Граница(ДатаКонца, ВидГраницы.Исключая));
	НомерСубконто=0; НомерСубконтоКонтрагента=0;
	Для Каждого СтрокаСубконто ИЗ Счет.ВидыСубконто Цикл
		НомерСубконто=НомерСубконто+1;
		Если СтрокаСубконто.ВидСубконто=ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
			НомерСубконтоКонтрагента=НомерСубконто; Прервать;
		КонецЕсли;	
	КонецЦикла;
	стрУсловиеРегистратор="НЕ Регистратор ССЫЛКА Документ.СчетФактураВыданный И НЕ Регистратор ССЫЛКА Документ.СчетФактураПолученный И НЕ Регистратор ССЫЛКА Документ.ФормированиеЗаписейКнигиПокупок
	| И НЕ Регистратор ССЫЛКА Документ.ФормированиеЗаписейКнигиПродаж";
	стрУсловие="";
	Если НЕ НомерСубконтоКонтрагента=0 Тогда
		стрУсловие=стрУсловие+" И Субконто"+СокрЛП(НомерСубконтоКонтрагента)+"=&Субконто"+СокрЛП(НомерСубконтоКонтрагента);
		Запрос.УстановитьПараметр("Субконто"+СокрЛП(НомерСубконтоКонтрагента), Контрагент);
	КонецЕсли;	
	
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,		
	|	ХозрасчетныйОбороты.Регистратор КАК Ссылка,
	|	ХозрасчетныйОбороты.СуммаОборот"+ДтКт+" КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, &ДатаКонца, Регистратор, Счет = &Счет, ,Организация = &Организация"+стрУсловие+" , , ) КАК ХозрасчетныйОбороты
	|	ГДЕ
	|"+стрУсловиеРегистратор+"
	|УПОРЯДОЧИТЬ ПО
	|	Дата Убыв";
	
	
	//Если Дебетор Тогда
	//	Знак1=">";
	//	Знак2="<";
	//Иначе
	//	Знак2=">";
	//	Знак1="<";	
	//КонецЕсли; 
	//Запрос.Текст="
	//	|ВЫБРАТЬ ПЕРВЫЕ 30
	//	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Ссылка,
	//	|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК Дата,		
	//	|	ВзаиморасчетыСКонтрагентами.Регистратор.Номер КАК Номер,
	//	|	Выбор
	//	|		Когда ВзаиморасчетыСКонтрагентами.СуммаБухОборот > 0
	//	|			Тогда ВзаиморасчетыСКонтрагентами.СуммаБухОборот
	//	|			Иначе -ВзаиморасчетыСКонтрагентами.СуммаБухОборот
	//	|		Конец КАК Сумма
	//	|ИЗ
	//	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(,&ДатаКонца, Регистратор, Организация=&Организация И Контрагент=&Контрагент) КАК ВзаиморасчетыСКонтрагентами
	//	|ГДЕ
	//	|	(ВзаиморасчетыСКонтрагентами.СуммаБухПриход "+Знак1+" 0 ИЛИ ВзаиморасчетыСКонтрагентами.СуммаБухРасход "+Знак2+" 0)
	//	|   И ВзаиморасчетыСКонтрагентами.СуммаБухОборот <> 0
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Дата Убыв";
	
	тзДанные=Запрос.Выполнить().Выгрузить();	
	тзДанные.Свернуть("Ссылка","Сумма");
	
	Возврат тзДанные;
	
КонецФункции

Функция СформироватьТаблицуДокументовЗадолженности(Организация, Контрагент, Дата, СуммаЗадолженности, Дебетор,Счет)
	
	СуммаПолученная=0;
	ДатаКонца=Дата;
	тзСсылок=Новый ТаблицаЗначений;
	тзСсылок.Колонки.Добавить("Ссылка");
	тзСсылок.Колонки.Добавить("Дата");
	тзСсылок.Колонки.Добавить("Номер");
	тзСсылок.Колонки.Добавить("Сумма");
	тзДокументы=СформироватьЗапрос(Организация, Контрагент, ДатаКонца, Дебетор, Счет);
	Для каждого Строка Из тзДокументы Цикл
		СуммаПолученная=СуммаПолученная+Строка.Сумма;
		НоваяСтрока=тзСсылок.Добавить();
		НоваяСтрока.Ссылка=Строка.Ссылка;
		НоваяСтрока.Дата=Строка.Ссылка.Дата;
		НоваяСтрока.Номер=Строка.Ссылка.Номер;
		НоваяСтрока.Сумма=Строка.Сумма;
		ДатаКонца=Строка.Ссылка.Дата;
		Если СуммаПолученная = СуммаЗадолженности Тогда
			тзСсылок.Сортировать("Дата");
			Возврат тзСсылок;
		ИначеЕсли СуммаПолученная > СуммаЗадолженности Тогда
			НоваяСтрока.Сумма=Строка.Сумма-(СуммаПолученная-СуммаЗадолженности);
			тзСсылок.Сортировать("Дата");
			Возврат тзСсылок;			
		КонецЕсли; 
	КонецЦикла;
	тзСсылок.Сортировать("Дата");
	Возврат тзСсылок;
	
КонецФункции

Функция ВыборкаПоШапкеДокумента(СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Номер КАК Номер,	
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.Подразделение КАК Подразделение,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	Инвентаризация.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации,
	|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.ИнвентаризацияВзаиморасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки
	|";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ЗапросПоТабличнойЧасти(СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Инвентаризация.ВидЗадолженности КАК ВидЗадолженности,
	|	Инвентаризация.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА Инвентаризация.Контрагент ССЫЛКА Справочник.Контрагенты Тогда
	|		ЕСТЬNULL(ВЫРАЗИТЬ(Инвентаризация.Контрагент.НаименованиеПолное КАК СТРОКА(200)),"""")
	|	ИНАЧЕ
	|		ЕСТЬNULL(ВЫРАЗИТЬ(Инвентаризация.Контрагент.Наименование КАК СТРОКА(200)),"""") 
	|	КОНЕЦ КАК КонтрагентНаименованиеПолное, 
	|	ЕСТЬNULL(Инвентаризация.Контрагент.Наименование,"""") КАК КонтрагентНаименование,
	|	Инвентаризация.СчетРасчетов КАК СчетРасчетов,
	|	ПРЕДСТАВЛЕНИЕ(Инвентаризация.СчетРасчетов) КАК СчетРасчетовПредставление,
	|	СУММА(Инвентаризация.Подтверждено + Инвентаризация.НеПодтверждено) КАК Всего,
	|	СУММА(Инвентаризация.Подтверждено) КАК Подтверждено,
	|	СУММА(Инвентаризация.НеПодтверждено) КАК НеПодтверждено,
	|	СУММА(Инвентаризация.ИстекСрокДавности) КАК ИстекСрокДавности
	|ИЗ
	|	Документ.ИнвентаризацияВзаиморасчетов.Контрагенты КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Инвентаризация.ВидЗадолженности,
	|	Инвентаризация.Контрагент,
	|	ВЫБОР КОГДА Инвентаризация.Контрагент ССЫЛКА Справочник.Контрагенты Тогда
	|		ЕСТЬNULL(ВЫРАЗИТЬ(Инвентаризация.Контрагент.НаименованиеПолное КАК СТРОКА(200)),"""")
	|	ИНАЧЕ
	|		ЕСТЬNULL(ВЫРАЗИТЬ(Инвентаризация.Контрагент.Наименование КАК СТРОКА(200)),"""") 
	|	КОНЕЦ, 
	|	ПОДСТРОКА(Инвентаризация.Контрагент.НаименованиеПолное, 1, 200),
	|	Инвентаризация.СчетРасчетов,
	|	ЕСТЬNULL(Инвентаризация.Контрагент.Наименование,"""")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентНаименование,
	|	Инвентаризация.СчетРасчетов.Порядок
	|ИТОГИ
	|	СУММА(Всего),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено),
	|	СУММА(ИстекСрокДавности)
	|ПО
	|	ВидЗадолженности
	|";
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция Печать_Инв17(СтруктураПараметров)
	СсылкаНаОбъект=СтруктураПараметров.СсылкаНаОбъект;
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	Выборка=ВыборкаПоШапкеДокумента(СсылкаНаОбъект);
	Выборка.Следующий();
	
	РезультатКонтрагенты=ЗапросПоТабличнойЧасти(СсылкаНаОбъект);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ17";
	
	Макет=ИнициализацияМакета(СтруктураПараметров, "ИНВ17");
	
	// Формирование шапки
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(Выборка);
	
	СведенияОбОрганизации=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	Шапка.Параметры.Организация=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО=СведенияОбОрганизации.КодПоОКПО;
	
	Шапка.Параметры.НомерДокумента = ОбщегоНазначенияСервер.НомерНаПечать(СсылкаНаОбъект);
	Шапка.Параметры.ДеньДокумента  = День(Выборка.Дата);
	Шапка.Параметры.МесяцДокумента = Сред(Формат(Выборка.Дата, "ДЛФ=ДД"), Найти(Формат(Выборка.Дата, "ДЛФ=ДД"), " "));

	ТабДокумент.Вывести(Шапка);

	// Формирование строк дебиторской задолженности
	ПодвалТаблицыДт = Макет.ПолучитьОбласть("ПодвалТаблицыДт");
	СтрокаТаблицыДт = Макет.ПолучитьОбласть("СтрокаТаблицыДт");
	
	ВыборкаПоВидуЗадолженности = РезультатКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") Тогда
		ПодвалТаблицыДт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыДт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыДт.Параметры.КонтрагентПредставление = "<"+ВыборкаПоКонтрагенту.СчетРасчетов.Наименование+">"+Символы.ПС+?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыДт);
		КонецЦикла;
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыДт);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Шапка оборотной стороны Акта
	ШапкаОборот = Макет.ПолучитьОбласть("ШапкаОборот");
	ТабДокумент.Вывести(ШапкаОборот);
	
	// Формирование строк кредиторской задолженности
	ПодвалТаблицыКт = Макет.ПолучитьОбласть("ПодвалТаблицыКт");
	СтрокаТаблицыКт = Макет.ПолучитьОбласть("СтрокаТаблицыКт");
			
	ВыборкаПоВидуЗадолженности.Сбросить();
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") Тогда
		ПодвалТаблицыКт.Параметры.Заполнить(ВыборкаПоВидуЗадолженности);
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СтрокаТаблицыКт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаТаблицыКт.Параметры.КонтрагентПредставление = "<"+ВыборкаПоКонтрагенту.СчетРасчетов.Наименование+">"+Символы.ПС+?(ПустаяСтрока(ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное),
				ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			ТабДокумент.Вывести(СтрокаТаблицыКт);
		КонецЦикла;
	КонецЕсли;
	
	ТабДокумент.Вывести(ПодвалТаблицыКт);
	
	// Подвал печатной формы
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Подвал);
	
	Подпись = Макет.ПолучитьОбласть("Подпись");
	ТаблицаИнвентаризационнаяКомиссия = Выборка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		ДанныеПредседателя = ДанныеФизЛица(Выборка.Организация, ПредседательКомиссии.ФизЛицо, Выборка.Дата);
			
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
	Иначе
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = "";
		Подпись.Параметры.РасшифровкаПодписи       = "";
	КонецЕсли;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
		
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из СписокЧленовКомиссии Цикл
		ДаныеЧленаКомисии = ДанныеФизЛица(Выборка.Организация, ЧленКомиссии, Выборка.Дата);
		Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
		Подпись.Параметры.Должность                = ДаныеЧленаКомисии.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДаныеЧленаКомисии.Представление;
		
		ТабДокумент.Вывести(Подпись);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	// подписей, как в форме, утвержденной Госкомстатом)
	Если СписокЧленовКомиссии.Количество() < 3 Тогда
		Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		Для Итератор = (СписокЧленовКомиссии.Количество() + 1) По 3 Цикл
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабДокумент;	
КонецФункции

Функция Печать_ИНВ22(СтруктураПараметров)
    СсылкаНаОбъект=СтруктураПараметров.СсылкаНаОбъект;
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	Выборка=ВыборкаПоШапкеДокумента(СсылкаНаОбъект);
	Выборка.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Выборка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	Макет = ИнициализацияМакета(СтруктураПараметров, "ИНВ22");
	
	// Получаем области макета для вывода в табличный документ
	Шапка   = Макет.ПолучитьОбласть("Шапка");
	Подпись = Макет.ПолучитьОбласть("Подпись");
	Подвал  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_ИНВ22";

	// Выведем шапку документа
	Шапка.Параметры.Заполнить(Выборка);
	Шапка.Параметры.НаименованиеИмуществаОбязательств = "расчетов с покупателями, поставщиками и прочими дебиторами и кредиторами";
	
	СведенияОбОрганизации = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	Шапка.Параметры.Организация          = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	ТабДокумент.Вывести(Шапка);
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		ДанныеПредседателя = ДанныеФизЛица(Выборка.Организация, ПредседательКомиссии.ФизЛицо, Выборка.Дата);
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
	Иначе
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.Должность                = "";
		Подпись.Параметры.РасшифровкаПодписи       = "";
	КонецЕсли;
		
	ТабДокумент.Вывести(Подпись);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	//ДанныеЧленовКомиссии = ОбщегоНазначения.ДанныеФизЛиц(Выборка.Организация, СписокЧленовКомиссии, Выборка.Дата);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из СписокЧленовКомиссии Цикл
		ДанныеЧленаКоммисии = ДанныеФизЛица(Выборка.Организация, ЧленКомиссии, Выборка.Дата);
		Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
		Подпись.Параметры.Должность                = ДанныеЧленаКоммисии.Должность;
		Подпись.Параметры.РасшифровкаПодписи       = ДанныеЧленаКоммисии.Представление;
		
		ТабДокумент.Вывести(Подпись);
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	// подписей, как в форме, утвержденной Госкомстатом)
	Если СписокЧленовКомиссии.Количество() < 3 Тогда
		Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подпись) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		Для Итератор = (СписокЧленовКомиссии.Количество() + 1) По 3 Цикл
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
			ТабДокумент.Вывести(Подпись);
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		КонецЦикла;
	КонецЕсли;
	
	// Выведем подвал приказа
	Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, Подвал) Тогда
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	Подвал.Параметры.НаименованиеИмуществаОбязательств = "расчеты с покупателями, поставщиками и прочими дебиторами и кредиторами";
	Подвал.Параметры.ДатаНачалаИнвентаризации          = Формат(Выборка.ДатаНачалаИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ДатаОкончанияИнвентаризации       = Формат(Выборка.ДатаОкончанияИнвентаризации, "ДЛФ=DD");
	Подвал.Параметры.ПричинаПроведенияИнвентаризации   = Выборка.ПричинаПроведенияИнвентаризации;

	Руководители=ПечатныеФормыСервер.ОтветственныеЛицаОрганизации(Выборка.Организация,Выборка.Дата, СтруктураПараметров.СсылкаНаОбъект);
	Подвал.Параметры.ДолжностьРуководителя          = Руководители.РуководительДолжность;
	Подвал.Параметры.РасшифровкаПодписиРуководителя = Руководители.Руководитель;
	
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;	
КонецФункции

Функция Печать_Инв17Прил(СтруктураПараметров)
	СсылкаНаОбъект=СтруктураПараметров.СсылкаНаОбъект;
	
	Выборка=ВыборкаПоШапкеДокумента(СсылкаНаОбъект);
	Выборка.Следующий();
	РезультатКонтрагенты=ЗапросПоТабличнойЧасти(СсылкаНаОбъект);
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетов_Инв17Прил";	
	Макет=ИнициализацияМакета(СтруктураПараметров, "Инв17Прил");

	Шапка=Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(Выборка);
	
   	СведенияОбОрганизации=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	Шапка.Параметры.Организация=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации);
	Шапка.Параметры.Номер = ОбщегоНазначенияСервер.НомерНаПечать(СсылкаНаОбъект);
   	Шапка.Параметры.ДатаН = СокрЛП(День(Выборка.Дата))+" "+Сред(Формат(Выборка.Дата, "ДЛФ=ДД"), Найти(Формат(Выборка.Дата, "ДЛФ=ДД"), " "));

	ТабДокумент.Вывести(Шапка);
	
	ВыборкаПоВидуЗадолженности = РезультатКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НомерСтроки=0;
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") Тогда
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		СтрокаДт=Макет.ПолучитьОбласть("СтрокаТаблицы");
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			тзСсылок=СформироватьТаблицуДокументовЗадолженности(Выборка.Организация, ВыборкаПоКонтрагенту.Контрагент, Выборка.Дата, ВыборкаПоКонтрагенту.Всего, "Дт",ВыборкаПоКонтрагенту.СчетРасчетов);
			НомерСтроки=НомерСтроки+1;
			СтрокаДт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаДт.Параметры.ПП=НомерСтроки;
			СтрокаДт.Параметры.СуммД=ВыборкаПоКонтрагенту.Всего;
			СтрокаДт.Параметры.КонтрагентПредставление = СформироватьПредставлениеКонтрагента(ВыборкаПоКонтрагенту.Контрагент, ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			СтрокаДт.Параметры.ДатаВозникновения="";
			СтрокаДт.Параметры.Дата="";
			СтрокаДт.Параметры.Номер="";
			ТабДокумент.Вывести(СтрокаДт);
			СтрокаДт=Макет.ПолучитьОбласть("СтрокаТаблицы");			
			Для каждого Строка Из тзСсылок Цикл
				СтрокаДт.Параметры.ДатаВозникновения=Строка.Дата;
				СтрокаДт.Параметры.СуммД=Строка.Сумма;				
				СтрокаДт.Параметры.ДокЗадолжен=Строка.Ссылка.Метаданные().Синоним;
				СтрокаДт.Параметры.Номер=Строка.Номер;				
				СтрокаДт.Параметры.Дата=Строка.Дата;				
				ТабДокумент.Вывести(СтрокаДт);
			КонецЦикла;
			СтрокаДт.Параметры.ДокЗадолжен="";
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаПоВидуЗадолженности.Сбросить();
	Если ВыборкаПоВидуЗадолженности.НайтиСледующий(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") Тогда
		ВыборкаПоКонтрагенту = ВыборкаПоВидуЗадолженности.Выбрать();
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			тзСсылок=СформироватьТаблицуДокументовЗадолженности(Выборка.Организация, ВыборкаПоКонтрагенту.Контрагент, Выборка.Дата, ВыборкаПоКонтрагенту.Всего, "Кт",ВыборкаПоКонтрагенту.СчетРасчетов);
			НомерСтроки=НомерСтроки+1;
			СтрокаКт=Макет.ПолучитьОбласть("СтрокаТаблицы");
			СтрокаКт.Параметры.Заполнить(ВыборкаПоКонтрагенту);
			СтрокаКт.Параметры.ПП=НомерСтроки;
			СтрокаКт.Параметры.СуммК=ВыборкаПоКонтрагенту.Всего;
			СтрокаКт.Параметры.КонтрагентПредставление = СформироватьПредставлениеКонтрагента(ВыборкаПоКонтрагенту.Контрагент, ВыборкаПоКонтрагенту.КонтрагентНаименование, ВыборкаПоКонтрагенту.КонтрагентНаименованиеПолное);
			СтрокаКт.Параметры.ДатаВозникновения="";
			СтрокаКт.Параметры.Дата="";
			СтрокаКт.Параметры.Номер="";
			ТабДокумент.Вывести(СтрокаКт);
			СтрокаКт=Макет.ПолучитьОбласть("СтрокаТаблицы");
			Для каждого Строка Из тзСсылок Цикл
				СтрокаКт.Параметры.ДатаВозникновения=Строка.Дата;
				СтрокаКт.Параметры.СуммК=Строка.Сумма;				
				СтрокаКт.Параметры.ДокЗадолжен=Строка.Ссылка.Метаданные().Синоним;				
				СтрокаКт.Параметры.Номер=Строка.Номер;				
				СтрокаКт.Параметры.Дата=Строка.Дата;				
				ТабДокумент.Вывести(СтрокаКт);
			КонецЦикла; 
			СтрокаКт.Параметры.ДокЗадолжен="";				
		КонецЦикла;
	КонецЕсли;
	
	Подвал=Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;

КонецФункции

Функция Печать(СтруктураПараметров, КоличествоЭкземпляров=1, НаПринтер=Ложь, ТабДокумент=Неопределено) Экспорт
	Если СтруктураПараметров.ИмяМакета="ИНВ17" Тогда
		ТабДокумент=Печать_Инв17(СтруктураПараметров);

	ИначеЕсли СтруктураПараметров.ИмяМакета="ИНВ22" Тогда
		ТабДокумент=Печать_Инв22(СтруктураПараметров);
		
	ИначеЕсли СтруктураПараметров.ИмяМакета="Инв17Прил" Тогда
		ТабДокумент=Печать_Инв17Прил(СтруктураПараметров);
	
	КонецЕсли;

	Возврат ТабДокумент;
КонецФункции
