&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Видимость=НЕ Элементы.ШапкаПанель1.Видимость;		
		Элементы.ШапкаПанель1.Видимость=Видимость;
		Элементы.ШапкаПанель2.Видимость=Видимость;
		Элементы[Команда.Имя].Картинка=?(Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоКрасная);
		Элементы.ШапкаИнфо.Видимость=Не Видимость;

		МассивДанных=Новый Массив;
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" Организация: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Организация));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Отдел: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Подразделение));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Куратор: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Ответственный));

		Элементы.ШапкаИнфо.Заголовок=Новый ФорматированнаяСтрока(МассивДанных);		
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	тпТабличноеПоле_ОбновитьПредставление("Контрагенты");
	тпТабличноеПоле_ОбновитьПредставление("СчетаРасчетов");
КонецПроцедуры

&НаСервере
Функция ПолучитьИтоги()
	ТабКонтрагентыДт = Объект.Контрагенты.Выгрузить();
	ТабКонтрагентыКт = ТабКонтрагентыДт.Скопировать();
	
	ОтборДт	 = Новый Структура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
	ОтборКт	 = Новый Структура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
	мИтогиДт = ТабКонтрагентыДт.НайтиСтроки(ОтборКт);
	мИтогиКт = ТабКонтрагентыКт.НайтиСтроки(ОтборДт);
	
	Для Каждого ЭлмИтогиДт Из мИтогиДт Цикл
		ТабКонтрагентыДт.Удалить(ЭлмИтогиДт);
	КонецЦикла;
	
	Для Каждого ЭлмИтогиКт Из мИтогиКт Цикл
		ТабКонтрагентыКт.Удалить(ЭлмИтогиКт);
	КонецЦикла;
	
	СуммаДт=ТабКонтрагентыДт.Итог("Подтверждено")+ТабКонтрагентыДт.Итог("НеПодтверждено");
	СуммаКт=ТабКонтрагентыКт.Итог("Подтверждено")+ТабКонтрагентыКт.Итог("НеПодтверждено");
	
	ТекстИтогиДт =  "Всего строк:" 			+ Символы.НПП + ТабКонтрагентыДт.Количество() + Символы.Таб +";"+ 
					"Всего, руб.:" 			+ Символы.НПП + Формат(СуммаДт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб+ ";"+
					"подтверждено:" 		+ Символы.НПП + Формат(ТабКонтрагентыДт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-")+Символы.Таб+";"+ 
					"не подтверждено:" 		+ Символы.НПП + Формат(ТабКонтрагентыДт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-")+Символы.Таб+ ";"+
					"истек срок давности:"  + Символы.НПП + Формат(ТабКонтрагентыДт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");
	
	ТекстИтогиКт =  "Всего строк:"  		+ Символы.НПП + ТабКонтрагентыКт.Количество() + Символы.Таб+";"+
					"Всего, руб.:"  		+ Символы.НПП +	Формат(СуммаКт, "ЧЦ=15; ЧДЦ=2; ЧН=-") + Символы.Таб	+";"+
					"подтверждено:" 		+ Символы.НПП + Формат(ТабКонтрагентыКт.Итог("Подтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-")+Символы.Таб+";"+
					"не подтверждено:"  	+ Символы.НПП + Формат(ТабКонтрагентыКт.Итог("НеПодтверждено"), "ЧЦ=15; ЧДЦ=2; ЧН=-")+Символы.Таб+ ";"+
					"истек срок давности:"  + Символы.НПП + Формат(ТабКонтрагентыКт.Итог("ИстекСрокДавности"), "ЧЦ=15; ЧДЦ=2; ЧН=-");

	ТекстИтогиДт = ?(ТабКонтрагентыДт.Количество()=0, "Документ по дебиторской задолженности не заполнен.", ТекстИтогиДт);
	ТекстИтогиКт = ?(ТабКонтрагентыКт.Количество()=0, "Документ по кредиторской задолженности не заполнен.", ТекстИтогиКт);

	Возврат Новый Структура("СтрокаДт,СтрокаКт", ТекстИтогиДт, ТекстИтогиКт);	
КонецФункции

&НаСервере
Процедура ЗаполнитьАктДляИнв17(ВидЗадолженности = Неопределено)
	// Проверка требования на отбор данных по виду задолженности
	Если НЕ (ВидЗадолженности = Неопределено) Тогда
		// Вид задолженности выбран
		// Выполнение очистки записей ТЧ Контрагенты по виду задолженности
		СтруктураОтбора = Новый Структура("ВидЗадолженности", ВидЗадолженности);
		УдаляемыеСтроки = Объект.Контрагенты.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Объект.Контрагенты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	Иначе
		// Полная очистка записей в ТЧ Контрагенты
		Объект.Контрагенты.Очистить();
	КонецЕсли;

	ГраницаАкта = Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая);
	
	МассивСчетов=Объект.СчетаРасчетов.Выгрузить(, "СчетРасчетов").ВыгрузитьКолонку("СчетРасчетов");
	МассивСчетов=ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ГраницаАкта);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("ВидЗадолженности", ВидЗадолженности);
	Запрос.УстановитьПараметр("Дебиторская", Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("Активный", ВидСчета.Активный);
	Запрос.УстановитьПараметр("Пассивный", ВидСчета.Пассивный);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА  ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			КОГДА  ХозрасчетныйОстатки.СуммаОстатокДт < 0
	|				ТОГДА -ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстатокДт > 0 ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ КАК ВидЗадолженности	
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов),, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(&ВидЗадолженности = НЕОПРЕДЕЛЕНО
	|			ИЛИ ВЫБОР
	|				КОГДА ХозрасчетныйОстатки.СуммаОстатокДт > 0 ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|					ТОГДА &Дебиторская
	|				ИНАЧЕ &Кредиторская
	|			КОНЕЦ = &ВидЗадолженности)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстатокДт > 0 ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|			ТОГДА &Дебиторская
	|		ИНАЧЕ &Кредиторская
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1.Представление,
	|	ХозрасчетныйОстатки.Счет.Порядок
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных=Объект.Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
		Если СтрокаДанных.Подтверждено<0 Тогда
			СтрокаДанных.Подтверждено=-СтрокаДанных.Подтверждено;
		КонецЕсли;	
		СтрокаДанных.Всего=СтрокаДанных.Подтверждено;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСчетовЗначениямиПоУмолчанию()
	СписокСчетов=Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеВложения);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("Контрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("Договоры", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК СчетРасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &Контрагенты
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &Договоры
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок
	|";
	Объект.СчетаРасчетов.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры 

&НаКлиенте
Функция ПроверитьГотовность(ВидЗадолженности = Неопределено)
	Если (Объект.СчетаРасчетов.Количество() = 0) Тогда
		Сообщить("Не задан список счетов, по которым должен формироваться документ!", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	ТекстВопроса = "";
	Если ВидЗадолженности = Неопределено И Объект.Контрагенты.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением все строки задолженности контрагентов будут удалены. 
			|Продолжить?";
	ИначеЕсли ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская")
		И Объект.Контрагенты.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности)).Количество() Тогда
		ТекстВопроса = "Перед заполнением все строки дебиторской задолженности будут удалены. 
			|Продолжить?";
	ИначеЕсли ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская")
		И Объект.Контрагенты.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности)).Количество() Тогда
		ТекстВопроса = "Перед заполнением все строки кредиторской задолженности будут удалены. 
			|Продолжить?";
	КонецЕсли;
	Если ПустаяСтрока(ТекстВопроса) Тогда Возврат Истина; КонецЕсли;

	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ПроверитьГотовность", ЭтотОбъект, ВидЗадолженности), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Возврат Ложь;
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьДокумент(ВидЗадолженности = Неопределено)
	Если ПроверитьГотовность(ВидЗадолженности) Тогда
		ЗаполнитьАктДляИнв17(ВидЗадолженности);
		ИтогиТекст = ПолучитьИтоги();
		Элементы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
		Элементы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
	КонецЕсли;
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ПроверитьГотовность(РезультатВопроса, ВидЗадолженности) Экспорт
	Если НЕ РезультатВопроса=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	ЗаполнитьАктДляИнв17(ВидЗадолженности);
	ИтогиТекст = ПолучитьИтоги();
	Элементы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
	Элементы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ОбновитьДанныеФормы();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		Объект.Контрагенты.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

&НаКлиенте
Процедура кпОсновныеДействияФормы_ВыполнитьДействие(Команда)
	ЗаполнитьДокумент();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если Лев(стрКоманда, 11)="Сортировать" Тогда
		ИмяТабличнойЧасти=стрЗаменить(стрКоманда, "Сортировать_", "");
		СортировкаТабличнойЧастиКлиент.Открыть(ИмяТабличнойЧасти, ЭтаФорма, Объект);

	ИначеЕсли Лев(стрКоманда, 16)="НайтиПоШтрихКоду"Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли Лев(стрКоманда, 6)="Подбор"Тогда
		ИмяТабличнойЧасти=стрЗаменить(стрКоманда, "Подбор_", "");

		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли Лев(стрКоманда, 12)="ЗаполнитьТОП" Тогда
		ИмяТабличнойЧасти=стрЗаменить(стрКоманда, "ЗаполнитьТОП_", "");
		ЗаполнитьТиповыеОперации(ИмяТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт

КонецПроцедуры

&НаСервере
Процедура тпТабличноеПоле_ОбновитьПредставление(стрТабличнаяЧасть)
	Если стрТабличнаяЧасть="Контрагенты" Тогда
		Для каждого СтрокаКоллекции Из Объект.Контрагенты Цикл
			СтрокаКоллекции.Всего=СтрокаКоллекции.Подтверждено+СтрокаКоллекции.НеПодтверждено;
		КонецЦикла;
	ИначеЕсли стрТабличнаяЧасть="СчетаРасчетов" Тогда
		Для каждого СтрокаКоллекции Из Объект.СчетаРасчетов Цикл
			СтрокаКоллекции.Наименование=СтрокаКоллекции.СчетРасчетов.Наименование;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ДебиторскаяЗадолженность"

&НаКлиенте
Процедура тпДебиторскаяЗадолженность_ВыполнитьДействие(Команда)
	Если Команда.Имя="ИтогиДт" Тогда
		ПоказатьПредупреждение(, стрЗаменить(Элементы.НадписьИтогиДт.Заголовок, ";", Символы.ПС));
	Иначе
		ЗаполнитьДокумент(ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпДебиторскаяЗадолженность_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДебиторскаяЗадолженность_ПослеУдаления(Элемент)
	ИтогиТекст = ПолучитьИтоги();
	Элементы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;	
КонецПроцедуры

&НаКлиенте
Процедура тпДебиторскаяЗадолженность_Колонка_ПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	Если Элемент.Имя="ДебиторскаяЗадолженностьПодтверждено" Тогда
		Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
			ТекущаяСтрока.ИстекСрокДавности = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
			Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
		КонецЕсли;
		ТекущаяСтрока.Всего=ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
	ИначеЕсли Элемент.Имя="ДебиторскаяЗадолженностьНеПодтверждено" Тогда
		Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
			ТекущаяСтрока.ИстекСрокДавности = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
			Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
		КонецЕсли;
		ТекущаяСтрока.Всего=ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
	ИначеЕсли Элемент.Имя="ДебиторскаяЗадолженностьИстекСрокДавности" Тогда
		Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
			ТекущаяСтрока.ИстекСрокДавности = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
			Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	Элементы.НадписьИтогиДт.Заголовок = ПолучитьИтоги().СтрокаДт;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "КредиторскаяЗадолженность"

&НаКлиенте
Процедура тпКредиторскаяЗадолженность_ВыполнитьДействие(Команда)
	Если Команда.Имя="ИтогиКт" Тогда
		ПоказатьПредупреждение(, стрЗаменить(Элементы.НадписьИтогиКт.Заголовок, ";", Символы.ПС));
	Иначе
		ЗаполнитьДокумент(ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));				
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура тпКредиторскаяЗадолженность_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпКредиторскаяЗадолженность_ПослеУдаления(Элемент)
	ИтогиТекст = ПолучитьИтоги();
	Элементы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;	
КонецПроцедуры

&НаКлиенте
Процедура тпКредиторскаяЗадолженность_Колонка_ПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если Элемент.Имя="КредиторскаяЗадолженностьПодтверждено" Тогда
		Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
			ТекущаяСтрока.ИстекСрокДавности = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
			Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
		КонецЕсли;
		ТекущаяСтрока.Всего=ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
	ИначеЕсли Элемент.Имя="КредиторскаяЗадолженностьНеПодтверждено" Тогда
		Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
			ТекущаяСтрока.ИстекСрокДавности = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
			Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
		КонецЕсли;
		ТекущаяСтрока.Всего=ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
	ИначеЕсли Элемент.Имя="КредиторскаяЗадолженностьИстекСрокДавности" Тогда
		Если ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено < ТекущаяСтрока.ИстекСрокДавности Тогда
			ТекущаяСтрока.ИстекСрокДавности = ТекущаяСтрока.Подтверждено+ТекущаяСтрока.НеПодтверждено;
			Сообщить("Сумма с истекшим сроком давности не может быть больше общей суммы задолженности",СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	Элементы.НадписьИтогиКт.Заголовок = ПолучитьИтоги().СтрокаКт;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Инвентаризационная комиссия"

&НаКлиенте
Процедура кпИнвентаризационнаяКомиссия_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="ИнвентаризационнаяКомиссия"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="Сортировать" Тогда
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="Подбор" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ОбработкаПодбора", ЭтотОбъект);
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпИнвентаризационнаяКомиссия_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ФизЛицо=ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Элемент.ТекущиеДанные.Председатель=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпИнвентаризационнаяКомиссия_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ИнвентаризационнаяКомиссия", "");
	ТекущиеДанные=Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;

	Если стрКолонка="ФизЛицо" Тогда
		Если Объект.ИнвентаризационнаяКомиссия.Количество()=1 Тогда
			ТекущиеДанные.Председатель=Истина;
		КонецЕсли;

	ИначеЕсли стрКолонка="Председатель" Тогда
		Для каждого СтрокаКоллекции Из Объект.ИнвентаризационнаяКомиссия Цикл
			СтрокаКоллекции.Председатель=Ложь;
		КонецЦикла;
		ТекущиеДанные.Председатель=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпИнвентаризационнаяКомиссия_Колонка_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ИнвентаризационнаяКомиссия", "");
	ТекущиеДанные=Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	
	Если стрКолонка="ФизЛицо" Тогда
		Если НЕ ТекущиеДанные.ФизЛицо=ВыбранноеЗначение Тогда // если выбрано значение, отличное от того, что было
			Если НЕ Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество()=0 Тогда
				ПоказатьПредупреждение(,"Физическое лицо <"+СокрЛП(ВыбранноеЗначение)+"> уже включено в состав комиссии!", 60);
				СтандартнаяОбработка=Ложь; Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

 
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
	Если Отказ Тогда Возврат; КонецЕсли;
	
	Элементы.ДебиторскаяЗадолженность.ОтборСтрок=Новый ФиксированнаяСтруктура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская"));
	Элементы.КредиторскаяЗадолженность.ОтборСтрок=Новый ФиксированнаяСтруктура("ВидЗадолженности", ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"));
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьСписокСчетовЗначениямиПоУмолчанию();
		тпТабличноеПоле_ОбновитьПредставление("СчетаРасчетов");
	КонецЕсли;
	ИтогиТекст = ПолучитьИтоги();
	Элементы.НадписьИтогиДт.Заголовок = ИтогиТекст.СтрокаДт;
	Элементы.НадписьИтогиКт.Заголовок = ИтогиТекст.СтрокаКт;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	тпТабличноеПоле_ОбновитьПредставление("Контрагенты");
	тпТабличноеПоле_ОбновитьПредставление("СчетаРасчетов");
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры