&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов."+стрЗаменить(Команда.Имя, "Операция_", ""));
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыДокумента()
	Объект.СуммаНДС=Объект.РаспределяемыеУслуги.Итог("СуммаНДС");
	Объект.СуммаДокумента=Объект.РаспределяемыеУслуги.Итог("Сумма")+?(Объект.СуммаВключаетНДС, 0, Объект.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоДокументу(стрВидДокумента="", СпособЗаполнения)
	Если Элементы.РаспределяемыеУслуги.ТекущиеДанные.ID=Неопределено Тогда
		ПоказатьПредупреждение(,"Не указана строка владелец!", 30); Возврат;
	КонецЕсли;	
	
	Если ПустаяСтрока(стрВидДокумента) Тогда
		Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииПокупка") Тогда
			стрВидДокумента="ПоступлениеТоваровУслуг";
		Иначе
			стрВидДокумента="РеализацияТоваровУслуг";
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("стрВидДокумента",стрВидДокумента);
	
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("Отбор", Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	
	ОписаниеОповещенияЗакрытия=Новый ОписаниеОповещения("ОбработчикОповещения_ДобавитьПоПоступлениюУслуги", ЭтотОбъект, СтруктураПараметров);
	ОткрытьФорму("Документ."+стрВидДокумента+".ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещенияЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование, ID_РаспределяемыеУслуги=Неопределено) Экспорт
	Если ID_РаспределяемыеУслуги=Неопределено Тогда
		ID_РаспределяемыеУслуги=Строка(Новый УникальныйИдентификатор);
		НоваяСтрока=Объект.РаспределяемыеУслуги.Добавить();
		НоваяСтрока.ID=ID_РаспределяемыеУслуги;
		НоваяСтрока.Содержание="Заполнено по поступлению товаров";
	КонецЕсли;

	ВалютаБухУчета=МодульВалютногоУчета.ПолучитьВалюту();
	КурсДокумента      = Объект.КурсВзаиморасчетов;
	КурсОснования      = МодульВалютногоУчета.КурсДокумента(ДокументОснование, ВалютаБухУчета);
	КратностьДокумента = Объект.КратностьВзаиморасчетов;
	КратностьОснования = МодульВалютногоУчета.КратностьДокумента(ДокументОснование, ВалютаБухУчета);
	
	ИмяДокумента = ДокументОснование.Метаданные().Имя;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмерения.Коэффициент Как Коэффициент,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ."+ИмяДокумента+".Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка,,"Сумма, СуммаНДС");
		СтрокаТабличнойЧасти.ДокументПартии=ДокументОснование;
        СтрокаТабличнойЧасти.ID=Новый УникальныйИдентификатор;
        СтрокаТабличнойЧасти.ID_РаспределяемыеУслуги=ID_РаспределяемыеУслуги;

		СтрокаТабличнойЧасти.СуммаТовара = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма+?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0), Выборка.ВалютаДокумента,
		                                   Объект.ВалютаДокумента, КурсОснования,
		                                   КурсДокумента,
		                                   КратностьОснования,
		                                   КратностьДокумента);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоПереработке(ДокументОснование, ID_РаспределяемыеУслуги=Неопределено) Экспорт
	Если ID_РаспределяемыеУслуги=Неопределено Тогда
		ID_РаспределяемыеУслуги=Строка(Новый УникальныйИдентификатор);
		НоваяСтрока=Объект.РаспределяемыеУслуги.Добавить();
		НоваяСтрока.ID=ID_РаспределяемыеУслуги;
		НоваяСтрока.Содержание="Заполнено по переработке";
	КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмерения.Коэффициент Как Коэффициент,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ."+ДокументОснование.Метаданные().Имя+".Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти=Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		СтрокаТабличнойЧасти.ДокументПартии=ДокументОснование;
		СтрокаТабличнойЧасти.ID_РаспределяемыеУслуги=ID_РаспределяемыеУслуги;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстПроСчетФактуру()
	Элементы.ГиперссылкаСчетФактура.Заголовок=УправлениеДиалогамиКлиент.ТекстСчетаФактуры(УчетНалоговСервер.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураПолученный"));
КонецПроцедуры

&НаСервере
Процедура Распределить(Идентификатор)
	СтрокаТабличнойЧасти=Объект.РаспределяемыеУслуги.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда 
		стрИсходнаяКолонка="Вес";
	ИначеЕсли СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда 
		стрИсходнаяКолонка="Количество";
	ИначеЕсли СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда 
		стрИсходнаяКолонка="СуммаТовара";
	Иначе
		стрИсходнаяКолонка="Объем";
	КонецЕсли;
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_РаспределяемыеУслуги", СтрокаТабличнойЧасти.ID));
	УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(МассивСтрок, СтрокаТабличнойЧасти.Сумма, стрИсходнаяКолонка, 1, "Сумма");
	УправлениеКоллекциямиЗначенийСервер.РаспределитьПоТаблицеЗначений(МассивСтрок, СтрокаТабличнойЧасти.СуммаНДС, стрИсходнаяКолонка, 1, "СуммаНДС");	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСерииПоНомеруГТД(НомерГТД, Идентификатор)
	СтрокаТабличнойЧасти=Объект.РаспределяемыеУслуги.НайтиПоИдентификатору(Идентификатор);
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_РаспределяемыеУслуги", СтрокаТабличнойЧасти.ID));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Если СтрокаКоллекции.СерияНоменклатуры.Пустая() Тогда
			СтрокаКоллекции.СерияНоменклатуры=Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД", НомерГТД,,СтрокаКоллекции.Номенклатура);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()	
	ДоступностьКонтрагента=НЕ(Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход"));	

	Если НЕ (ДоступностьКонтрагента=Элементы.Контрагент.Доступность) Тогда
		Элементы.Контрагент.Доступность=ДоступностьКонтрагента;
	КонецЕсли;

	Если НЕ (ДоступностьКонтрагента=Элементы.ДоговорКонтрагента.Доступность) Тогда
		Элементы.ДоговорКонтрагента.Доступность=ДоступностьКонтрагента;
	КонецЕсли;

	Если НЕ (ДоступностьКонтрагента=Элементы.Сделка.Доступность) Тогда
		Элементы.Сделка.Доступность=ДоступностьКонтрагента;
	КонецЕсли;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход") Тогда
		Элементы.НадписьВсегоНДС.Видимость=Ложь;
		Элементы.ИнфНадписьДолга.Видимость=Ложь;
		Элементы.ДатаВходящегоДокумента.Доступность=Ложь;
	Иначе
		Элементы.НадписьВсегоНДС.Видимость=Объект.УчитыватьНДС;
		Элементы.ИнфНадписьДолга.Видимость=Истина;
		Элементы.ДатаВходящегоДокумента.Доступность=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтоотметку()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход") Тогда
		Элементы.Контрагент.АвтоОтметкаНезаполненного         = Ложь;
		Элементы.Контрагент.ОтметкаНезаполненного             = Ложь;
		Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДоговорКонтрагента.ОтметкаНезаполненного     = Ложь;
	Иначе
		Элементы.Контрагент.АвтоОтметкаНезаполненного         = Истина;
		Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЦенаВалюта(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметр1);

	//ПересчитатьЦеныПоВалюте
	Если Параметр1.ПерезаполнитьЦеныПоТипу Тогда
		НаДату=ТекущаяДата();
		Для каждого СтрокаКоллекции Из Объект.Товары Цикл
			СтрокаКоллекции.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(СтрокаКоллекции.Номенклатура, СтрокаКоллекции.ХарактеристикаНоменклатуры, Объект.ТипЦен, НаДату, СтрокаКоллекции.ЕдиницаИзмерения);
			тпТовары_РассчитатьСумму(СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ДобавитьПоПоступлениюУслуги(Параметр1, Параметр2) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметр1) Тогда	Возврат; КонецЕсли;
	ID=Элементы.РаспределяемыеУслуги.ТекущиеДанные.ID;
	Если Параметр2.стрВидДокумента="ПоступлениеИзПереработки" ИЛИ Параметр2.стрВидДокумента="ПередачаВПереработку" Тогда
		ЗаполнитьТоварыПоПереработке(Параметр1, ID);
	Иначе
		ЗаполнитьТоварыПоПоступлениюТоваров(Параметр1, ID);
	КонецЕсли;
	Элементы.Товары.ОтборСтрок=Новый ФиксированнаяСтруктура("ID_РаспределяемыеУслуги", ID);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПоставщиком"));

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);		
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);
		
	ИначеЕсли Элемент.Имя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		УправлениеДиалогамиКлиент.ОбновитьНадписиДолга(ЭтаФорма);

	ИначеЕсли Элемент.Имя="СтавкаНДС" Или Элемент.Имя="Сумма" Тогда
        РассчитатьСуммыДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент)
	Если Элемент.Имя="ГиперссылкаСчетФактура" Тогда
		Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
			Сообщить("Необхоимо записать документ!"); Возврат;		
		КонецЕсли;
		УправлениеДиалогамиКлиент.ВвестиСчетФактуру(Объект.Ссылка, ЭтаФорма, "СчетФактураПолученный");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
		
	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ Объект.ТипЦен.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
	
	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Товары" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;

	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Товары"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="ЗаполнитьПоВыбранномуДокументу" Тогда
		ЗаполнитьТабличнуюЧастьПоДокументу("", "Заполнить");

	ИначеЕсли стрКоманда="ДобавитьИзВыбранногоДокумента" Тогда
		ЗаполнитьТабличнуюЧастьПоДокументу("", "Добавить");

	ИначеЕсли стрКоманда="ЗаполнитьПоПереработке" Тогда
		ЗаполнитьТабличнуюЧастьПоДокументу("ПоступлениеИзПереработки", "Заполнить");
		
	ИначеЕсли стрКоманда="ЗаполнитьПоДокументуПередачаВПереработку" Тогда
		ЗаполнитьТабличнуюЧастьПоДокументу("ПередачаВПереработку", "Заполнить");

	ИначеЕсли стрКоманда="Распределить" Тогда
		Распределить(Элементы.РаспределяемыеУслуги.ТекущаяСтрока);

	ИначеЕсли стрКоманда="ЗаполнитьВесОбъем" Тогда
		МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_РаспределяемыеУслуги", Элементы.РаспределяемыеУслуги.ТекущиеДанные.ID));
		Для каждого СтрокаКоллекции Из МассивСтрок Цикл
			СтруктураЕдиницыИзмерения=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(СтрокаКоллекции.ЕдиницаИзмерения, "Вес,Объем");
			СтрокаКоллекции.Вес=СтрокаКоллекции.Количество*СтруктураЕдиницыИзмерения.Вес;
			СтрокаКоллекции.Объем=СтрокаКоллекции.Количество*СтруктураЕдиницыИзмерения.Объем;
		КонецЦикла;

	ИначеЕсли стрКоманда="ЗаполнитьСерииПоНомеруГТД" Тогда
		НомерГТД="";
		Если НЕ ВвестиЗначение(НомерГТД, "Укажите номер ГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД")) Тогда Возврат; КонецЕсли;
		Если ТипЗнч(НомерГТД)=Тип("Массив") Тогда НомерГТД=НомерГТД[0]; КонецЕсли;
		
		ЗаполнитьСерииПоНомеруГТД(НомерГТД, Элементы.РаспределяемыеУслуги.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.РаспределяемыеУслуги.ТекущиеДанные=Неопределено Тогда
		Отказ=Истина; ПоказатьПредупреждение(,"Не выбрана услуга!", 10);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID_РаспределяемыеУслуги=Элементы.РаспределяемыеУслуги.ТекущиеДанные.ID;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные; стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	
	Если стрКолонка="Номенклатура" Тогда
		СтруктураНоменклатуры=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаХраненияОстатков;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		ТекущиеДанные.Вес=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Вес")*ТекущиеДанные.Количество;
		ТекущиеДанные.Объем=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Объем")*ТекущиеДанные.Количество;

	ИначеЕсли стрКолонка="Сумма" ИЛИ стрКолонка="СуммаНДС" Тогда
		СтрокаВладелец=Элементы.РаспределяемыеУслуги.ТекущиеДанные;
		СтрокаВладелец.Сумма=0;
		СтрокаВладелец.СуммаНДС=0;

		тпТовары_РассчитатьСумму();
		тпТовары_РассчитатьСуммуРаспределяемыхУслуг();
		
		РассчитатьСуммыДокумента();
	КонецЕСли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_РассчитатьСумму(ТекущиеДанные=Неопределено, СпособРасчета=Неопределено)
	Если ТекущиеДанные=Неопределено Тогда
		ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество; СуммаСкидки=0;

	Если (СпособРасчета=Неопределено) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок")) Или (СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки")) Тогда
		СуммаСкидки=Сумма*ТекущиеДанные.ПроцентАвтоматическихСкидок / 100;
		Если НЕ СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки") Тогда
			СуммаСкидки=СуммаСкидки+(Сумма*ТекущиеДанные.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
	КонецЕсли;

	ТекущиеДанные.Сумма=Сумма-СуммаСкидки;
	ТекущиеДанные.СуммаБезСкидок=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
	ТекущиеДанные.СуммаАкциза=ТекущиеДанные.СтавкаАкциза*ТекущиеДанные.Количество;
	ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
	ТекущиеДанные.Всего=ТекущиеДанные.Сумма+?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	
	//ОбновитьНадписи();
КонецПроцедуры

&НаСервере
Процедура тпТовары_РассчитатьСуммуРаспределяемыхУслуг()
	СтрокаВладелец=Элементы.РаспределяемыеУслуги.ТекущиеДанные;
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_РаспределяемыеУслуги", СтрокаВладелец.ID));
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		СтрокаВладелец.Сумма=СтрокаВладелец.Сумма+СтрокаКоллекции.Сумма;
		СтрокаВладелец.СуммаНДС=СтрокаВладелец.СуммаНДС+СтрокаКоллекции.СуммаНДС;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Поставщики"

&НаКлиенте
Процедура кпРаспределяемыеУслуги_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="РаспределяемыеУслуги"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
	Если Элементы.Поставщики.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРаспределяемыеУслуги_ПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные=Неопределено Тогда
		стрID=Элемент.ТекущиеДанные.ID;
	КонецЕсли;
	Элементы.Товары.ОтборСтрок=Новый ФиксированнаяСтруктура("ID_РаспределяемыеУслуги", стрID);
КонецПроцедуры

&НаКлиенте
Процедура тпРаспределяемыеУслуги_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпРаспределяемыеУслуги_ПередУдалением(Элемент, Отказ)
	МассивСтрок=Объект.Товары.НайтиСтроки(Новый Структура("ID_РаспределяемыеУслуги", Элемент.ТекущиеДанные.ID));
	Для Каждого СтрокаМассива из МассивСтрок Цикл
		Объект.Товары.Удалить(СтрокаМассива);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура тпРаспределяемыеУслуги_Колонка_ПриИзменении(Элемент)
	ТекущиеДанные=Элементы.РаспределяемыеУслуги.ТекущиеДанные; стрКолонка=стрЗаменить(Элемент.Имя, "РаспределяемыеУслуги", "");

	Если стрКолонка="Сумма" Или стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, ТекущиеДанные.СтавкаНДС);
		РассчитатьСуммыДокумента();
	КонецЕСли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТекстПроСчетФактуру(); 
	УстановитьВидимость();	
	УстановитьАвтоотметку();
	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="Запись_СчетФактураПолученный" Тогда
		ЗаполнитьТекстПроСчетФактуру();
	КонецЕсли;	
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.АвтоЗаполнениеРеквизитовДокумента();
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры