////////////////////////////////////////////////////////////////////////////////
//Управление печатными формами

Процедура СтруктураПечатныхФорм(Структура) Экспорт
	Структура.Вставить("СчетФактура", "Счет-фактура");
	Структура.Вставить("КорректировочныйСчетФактура", "Корректировочный счет-фактура");
	Структура.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ");
	Структура.Вставить("УниверсальныйКорректировочныйДокумент", "Универсальный корректировочный документ");
КонецПроцедуры

Функция ИнициализацияМакета(СтруктураПараметров, стрМакет)
	Макет=СтруктураПараметров.МакетШаблон;
	Если Макет=Неопределено Тогда
		Если Метаданные.ОбщиеМакеты.Найти(стрМакет)=Неопределено Тогда
			Макет=ПолучитьМакет(стрМакет);
		Иначе
			Макет=ПолучитьОбщийМакет(стрМакет);
		КонецЕсли;
	КонецЕсли;
	Возврат Макет;
КонецФункции

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
	Найти(Параметр1, "%")
	Или Найти(Параметр2, "%")
	Или Найти(Параметр3, "%")
	Или Найти(Параметр4, "%")
	Или Найти(Параметр5, "%")
	Или Найти(Параметр6, "%")
	Или Найти(Параметр7, "%")
	Или Найти(Параметр8, "%")
	Или Найти(Параметр9, "%");
	
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция СформироватьСтрокуСимволов(Знач Символ, Знач ДлинаСтроки) Экспорт
	
	Результат = "";
	Для Счетчик = 1 По ДлинаСтроки Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)
	
	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0) И (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0) И (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0) И (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0) И (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0) И (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0) И (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0) И (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0) И (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция __ПолучитьОригинальныйСчетФактура(ИсправительныйСчетФактура)
	Если ИсправительныйСчетФактура.ДокументОснованиеКорректировка.Исправление Тогда
		__ПолучитьОригинальныйСчетФактура(ИсправительныйСчетФактура.ДокументОснованиеКорректировка);
	КонецЕсли;	
	Возврат ИсправительныйСчетФактура.ДокументОснованиеКорректировка;
КонецФункции

///////////////////-----------------------
Функция ИнициализацияТабличнойЧасти()
	Товары=Новый ТаблицаЗначений();
	Товары.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ТабличнаяЧасть");
	Товары.Колонки.Добавить("НоменклатураКод");
	Товары.Колонки.Добавить("НоменклатураКодТНВЭД");
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("НоменклатураНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");	
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("НомерРазделаГТД");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");
	Товары.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьБезНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьСНДС",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Характеристика");
	Товары.Колонки.Добавить("Серия");
	Товары.Колонки.Добавить("СуммаАкциза",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ID");
	/// для корректировочных форм
	Товары.Колонки.Добавить("КоличествоДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаНДСДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СуммаНДСПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаНДСУвеличение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаНДСУменьшение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьБезНДСДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьБезНДСПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаБезНДСУвеличение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаБезНДСУменьшение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьСНДСДоИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("СтоимостьСНДСПослеИзменения",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаСНДСУвеличение",Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("РазницаСНДСУменьшение",Новый ОписаниеТипов("Число"));
	
	Возврат Товары;
КонецФункции

Функция ИнициализацияСтруктурыДанных()
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("Свидетельство");
	СтруктураДанных.Вставить("Основание");
	СтруктураДанных.Вставить("ДатаОтгрузкиПередачи");
	СтруктураДанных.Вставить("Организация");
	СтруктураДанных.Вставить("Поставщик");
	СтруктураДанных.Вставить("Покупатель");
	СтруктураДанных.Вставить("Грузоотправитель");
	СтруктураДанных.Вставить("Грузополучатель");
	СтруктураДанных.Вставить("Подразделение");
	СтруктураДанных.Вставить("ОтпускРазрешил");
	СтруктураДанных.Вставить("ОтпускПроизвел");
	СтруктураДанных.Вставить("ДоверенностьНомер");
	СтруктураДанных.Вставить("ДоверенностьДата");
	СтруктураДанных.Вставить("ДоверенностьВыдана");
	СтруктураДанных.Вставить("ДоверенностьЧерезКого");
	СтруктураДанных.Вставить("Валюта");
	СтруктураДанных.Вставить("УчитыватьНДС");
	СтруктураДанных.Вставить("СуммаВключаетНДС");
	СтруктураДанных.Вставить("АдресДоставки");
	СтруктураДанных.Вставить("ИдентификаторГосКонтракта");
	СтруктураДанных.Вставить("ПодписьРуководителя");
	СтруктураДанных.Вставить("ПодписьГлавногоБухгалтера");
	СтруктураДанных.Вставить("ОснованиеРуководителя");
	СтруктураДанных.Вставить("ОснованиеГлавногоБухгалтера");
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеСФнаАвансиСуммовуюРазницу(СсылкаНаОбъект)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Организация КАК Поставщик,
	|	ИсточникДанных.Организация КАК Грузоотправитель,
	|	ИсточникДанных.Контрагент КАК Покупатель,
	|	ИсточникДанных.Контрагент КАК Грузополучатель,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	Истина КАК УчитыватьНДС,
	|	Истина КАК СуммаВключаетНДС,
	|	ИсточникДанных.СуммаНДС Как СуммаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";	
	тзДанные=Запрос.Выполнить().Выгрузить();
	
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	тзДанные = ИнициализацияТабличнойЧасти();
	НоваяСтрока=тзДанные.Добавить();
	НоваяСтрока.Номенклатура               = "Предварительная оплата";
	НоваяСтрока.НоменклатураНаименование   = "Предварительная оплата";
	НоваяСтрока.СтавкаНДС 			= СсылкаНаОбъект.СтавкаНДС;
	НоваяСтрока.СуммаНДС  			= СтруктураДанных.СуммаНДС;
	НоваяСтрока.СтоимостьСНДС     	= СтруктураДанных.СуммаДокумента;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеСФНалоговыйАгент(СсылкаНаОбъект)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Если СсылкаНаОбъект.ДоговорКонтрагента.ВидАгентскогоДоговора=Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
		Запрос.Текст="
	|ВЫБРАТЬ
	|	ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Контрагент КАК Поставщик,
	|	ИсточникДанных.Контрагент КАК Грузоотправитель,
	|	ИсточникДанных.Организация КАК Покупатель,
	|	ИсточникДанных.Организация КАК Грузополучатель,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	Истина КАК УчитыватьНДС,
	|	Истина КАК СуммаВключаетНДС,
	|	ИсточникДанных.СуммаНДС Как СуммаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";	
	
	Иначе
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Организация КАК Поставщик,
	|	ИсточникДанных.Организация КАК Грузоотправитель,
	|	ИсточникДанных.Контрагент КАК Покупатель,
	|	ИсточникДанных.Контрагент КАК Грузополучатель,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	Истина КАК УчитыватьНДС,
	|	Истина КАК СуммаВключаетНДС,
	|	ИсточникДанных.СуммаНДС Как СуммаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";	
	КонецЕсли;
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Сумма КАК СтоимостьСНДС,
	|	ИсточникДанных.СуммаНДС КАК СуммаНДС,
	|	ИсточникДанных.СтавкаНДС Как СтавкаНДС,
	|	ИсточникДанных.Номенклатура Как Номенклатура,
	|	""Авансы"" КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";	
	тзАвансы=Запрос.Выполнить().Выгрузить();
	
	тзДанные = ИнициализацияТабличнойЧасти();
	Для Каждого СтрокаТз ИЗ тзАвансы Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.Номенклатура               = "Аренда муниципального имущества";
			НоваяСтрока.НоменклатураНаименование   = "Аренда муниципального имущества";
		КонецЕсли;
	КонецЦикла;
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеПоКомиссияОтчетПродажиКомитенту(ДокОснование,СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокОснование);
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникДанных.ДоговорКонтрагента.Наименование КАК Основание,
	             |	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	             |	ИсточникДанных.Организация КАК Организация,
	             |	ИсточникДанных.Организация КАК Поставщик,
	             |	ИсточникДанных.Организация КАК Грузоотправитель,
	             |	ИсточникДанных.Подразделение КАК Подразделение,
	             |	ИсточникДанных.Контрагент КАК Покупатель,
	             |	ИсточникДанных.Контрагент КАК Грузополучатель,
	             |	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	             |	ИсточникДанных.ВалютаДокумента КАК Валюта,
	             |	ИСТИНА КАК УчитыватьНДС,
	             |	ИСТИНА КАК СуммаВключаетНДС,
	             |	ИсточникДанных.СтавкаНДСВознаграждения КАК СтавкаНДСВознаграждения
	             |ИЗ
	             |	Документ.КомиссияОтчетПродажиКомитенту КАК ИсточникДанных
	             |ГДЕ
	             |	ИсточникДанных.Ссылка = &Ссылка";	
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.СуммаВознаграждения КАК СтоимостьСНДС,
	|	ИсточникДанных.СуммаНДСВознаграждения КАК СуммаНДС,
	|	ИсточникДанных.Ссылка.СтавкаНДСВознаграждения Как СтавкаНДС,
	|	ИсточникДанных.Номенклатура Как Номенклатура,
	|	""Товары"" КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.КомиссияОтчетПродажиКомитенту.Товары КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";	
	тзТовары=Запрос.Выполнить().Выгрузить();
	
	тзДанные = ИнициализацияТабличнойЧасти();
	Если НЕ тзТовары.Количество()=0 Тогда
		НоваяСтрока=тзДанные.Добавить();
		НоваяСтрока.Номенклатура               = "Комиссионное вознаграждение";
		НоваяСтрока.НоменклатураНаименование   = "Комиссионное вознаграждение";
   		НоваяСтрока.СтоимостьСНДС=тзТовары.Итог("СтоимостьСНДС");
		НоваяСтрока.СуммаНДС=тзТовары.Итог("СуммаНДС");
		НоваяСтрока.СтоимостьБезНДС=НоваяСтрока.СтоимостьСНДС-НоваяСтрока.СуммаНДС;
	  	НоваяСтрока.ТабличнаяЧасть="Товары";
		НоваяСтрока.СтавкаНДС=СтруктураДанных.СтавкаНДСВознаграждения;
	КонецЕсли;
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование,СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ИсточникДанных.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ИсточникДанных.Контрагент
	|		ИНАЧЕ ИсточникДанных.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ИсточникДанных.Сделка КАК Сделка,
	|	ИсточникДанных.ОтпускРазрешил КАК ОтпускРазрешил,
	|	ИсточникДанных.ОтпускПроизвел КАК ОтпускПроизвел,
	|	ИсточникДанных.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ИсточникДанных.ДоверенностьДата КАК ДоверенностьДата,
	|	ИсточникДанных.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ИсточникДанных.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	ИсточникДанных.УчитыватьНДС КАК УчитыватьНДС,
	|	ИсточникДанных.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИсточникДанных.АдресДоставки КАК АдресДоставки,
	|	ИсточникДанных.ДоговорКонтрагента.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	ИсточникДанных.ПодписьРуководителя КАК ПодписьРуководителя,
	|	ИсточникДанных.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	ИсточникДанных.ОснованиеРуководителя КАК ОснованиеРуководителя,
	|	ИсточникДанных.ОснованиеГлавногоБухгалтера КАК ОснованиеГлавногоБухгалтера,
	|	ИсточникДанных.СуммаНДС Как СуммаНДСДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументОснование";
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	НоменклатураКод=Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ПустаяСтрока(НоменклатураКод) Тогда НоменклатураКод="Код"; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Номенклатура." + НоменклатураКод + "                 КАК НоменклатураКод,
	|	Номенклатура.КодТНВЭД                 		  КАК НоменклатураКодТНВЭД,
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК НоменклатураНаименование,
	|	ВЫБОР КОГДА СерияНоменклатуры = &ПустаяСерия Тогда
	|   	Номенклатура.СтранаПроисхождения
	|	Иначе 
	|		СерияНоменклатуры.СтранаПроисхождения
	|   Конец КАК СтранаПроисхождения,
	
	|	ВЫБОР КОГДА СерияНоменклатуры = &ПустаяСерия Тогда
	|   	Номенклатура.СтранаПроисхождения.Код
	|	Иначе 
	|		СерияНоменклатуры.СтранаПроисхождения.Код
	|   Конец КАК СтранаПроисхожденияКод,	
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД					             КАК ПредставлениеГТД,
	|	СерияНоменклатуры.НомерРазделаГТД		                 КАК НомерРазделаГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	СуммаАкциза                            КАК СуммаАкциза,
	|	""Товары"" КАК ТабличнаяЧасть,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура." + НоменклатураКод + "          КАК НоменклатураКод,
	|	NULL                                   КАК НоменклатураКодТНВЭД,
	|	Номенклатура                           КАК Номенклатура,
	|	Содержание                             КАК НоменклатураНаименование,
	|	NULL                                   КАК СтранаПроисхождения,
	|	NULL                                   КАК СтранаПроисхожденияКод,
	|	NULL                                   КАК ПредставлениеСтраны,
	|	NULL                                   КАК НомерГТД,
	|	""""                                   КАК ПредставлениеГТД,
	|	""""                                   КАК НомерРазделаГТД,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	|	ТОГДА 0 ИНАЧЕ Количество
	|	КОНЕЦ КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	NULL                                   КАК Характеристика,
	|	NULL                                   КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	0                                      КАК СуммаАкциза,
	|	""Услуги"" КАК ТабличнаяЧасть,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновноеСредство.Код                КАК НоменклатураКод,
	|	NULL                                КАК НоменклатураКодТНВЭД,
	|	ОсновноеСредство                    КАК Номенклатура,
	|	ОсновноеСредство.Наименование       КАК НоменклатураНаименование,
	|	NULL                                КАК СтранаПроисхождения,
	|	NULL                                КАК СтранаПроисхожденияКод,
	|	NULL                                КАК ПредставлениеСтраны,
	|	NULL                                КАК НомерГТД,
	|	""""                                КАК ПредставлениеГТД,
	|	""""                                КАК НомерРазделаГТД,
	|	NULL  								КАК ЕдиницаИзмерения,
	|	""""     							КАК ЕдиницаИзмеренияКод,
	|	Количество  						КАК Количество,
	|	0                                   КАК Цена,
	|	СтавкаНДС                           КАК СтавкаНДС,
	|	СуммаНДС                            КАК СуммаНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	NULL                                КАК Характеристика,
	|	NULL                                КАК Серия,
	|	НомерСтроки                         КАК НомерСтроки,
	|	0                                   КАК СуммаАкциза,
	|	""ОС"" КАК ТабличнаяЧасть,
	|	ID КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ОС КАК РеализацияТоваровУслугУслуги
	|
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть,
	|	НомерСтроки
	|";
	тзТовары=Запрос.Выполнить().Выгрузить();
	
	Если СсылкаНаОбъект.Исправление Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ДокОснование.Сделка);
		тзТоварыИсточника=Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаКорректировки Из тзТовары Цикл
			МассивСтрок=тзТоварыИсточника.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Серия,ТабличнаяЧасть", СтрокаКорректировки.Номенклатура, СтрокаКорректировки.Характеристика, СтрокаКорректировки.Серия, СтрокаКорректировки.ТабличнаяЧасть));
			Если МассивСтрок.Количество()<>1 Тогда ВызватьИсключение("Не корректно заполнен исправительный документ!"); КонецЕсли;
			
			МассивСтрок[0].Количество=МассивСтрок[0].Количество+СтрокаКорректировки.Количество;
			МассивСтрок[0].Цена=МассивСтрок[0].Цена+СтрокаКорректировки.Цена;
			МассивСтрок[0].СуммаНДС=МассивСтрок[0].СуммаНДС+СтрокаКорректировки.СуммаНДС;
			МассивСтрок[0].СтоимостьБезНДС=МассивСтрок[0].СтоимостьБезНДС+СтрокаКорректировки.СтоимостьБезНДС;
			МассивСтрок[0].СтоимостьСНДС=МассивСтрок[0].СтоимостьСНДС+СтрокаКорректировки.СтоимостьСНДС;
			МассивСтрок[0].СуммаАкциза=МассивСтрок[0].СуммаАкциза+СтрокаКорректировки.СуммаАкциза;
		КонецЦикла;
		тзТовары=тзТоварыИсточника;
	КонецЕсли;
	
	тзДанные = ИнициализацияТабличнойЧасти();
	Для Каждого СтрокаТз ИЗ тзТовары Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование, СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ИсточникДанных.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ИсточникДанных.Контрагент
	|		ИНАЧЕ ИсточникДанных.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	ИсточникДанных.УчитыватьНДС КАК УчитыватьНДС,
	|	ИсточникДанных.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИсточникДанных.ДоговорКонтрагента.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	ИсточникДанных.СуммаНДС Как СуммаНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументОснование";
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	НоменклатураКод=Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ПустаяСтрока(НоменклатураКод) Тогда НоменклатураКод="Код"; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура." + НоменклатураКод + "                 КАК НоменклатураКод,
	|	Номенклатура,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК НоменклатураНаименование,
	|	СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|	ЕдиницаИзмерения.Представление         КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Количество                             КАК Количество,
	|	Цена                                   КАК Цена,
	|	СтавкаНДС                              КАК СтавкаНДС,
	|	СуммаНДС                               КАК СуммаНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	ХарактеристикаНоменклатуры             КАК Характеристика,
	|	СерияНоменклатуры                      КАК Серия,
	|	НомерСтроки                            КАК НомерСтроки,
	|	""Товары"" КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть,
	|	НомерСтроки
	|";
	
	тзТовары=Запрос.Выполнить().Выгрузить();
	
	тзДанные = ИнициализацияТабличнойЧасти();
	Для Каждого СтрокаТз ИЗ тзТовары Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеПоКомиссияОтчетПродажиКомиссионера(ДокОснование,СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ИсточникДанных.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ИсточникДанных.Контрагент
	|		ИНАЧЕ ИсточникДанных.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	ИсточникДанных.УчитыватьНДС КАК УчитыватьНДС,
	|	ИсточникДанных.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИсточникДанных.ДоговорКонтрагента.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	ИсточникДанных.СуммаНДС Как СуммаНДС
	|ИЗ
	|	Документ.КомиссияОтчетПродажиКомиссионера КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументОснование";
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("СчетФактура",СсылкаНаОбъект);
	МассивСтрок=ДокОснование.Покупатели.НайтиСтроки(СтруктураПоиска);
	Если НЕ МассивСтрок.Количество()=0 Тогда
		СтруктураДанных.Грузоотправитель=СтруктураДанных.Покупатель;
		СтруктураДанных.Грузополучатель=МассивСтрок[0].Покупатель;
		СтруктураДанных.Покупатель=МассивСтрок[0].Покупатель;
	КонецЕсли;
	
	НоменклатураКод=Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ПустаяСтрока(НоменклатураКод) Тогда НоменклатураКод="Код"; КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	
	|		Номенклатура." + НоменклатураКод + "                 КАК НоменклатураКод,
	|		Номенклатура КАК Номенклатура,
	|		ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК НоменклатураНаименование,
	|		СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|		СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|		СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|		СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|		Количество,
	|		Цена,
	|		ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма-СуммаНДС ИНАЧЕ Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|		ВЫБОР КОГДА  Ссылка.СуммаВключаетНДС ТОГДА Сумма ИНАЧЕ Сумма+СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия,
	|	""Товары"" КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.КомиссияОтчетПродажиКомиссионера.Товары КАК КомиссияОтчетПродажиКомиссионера
	|
	|ГДЕ
	|	КомиссияОтчетПродажиКомиссионера.Ссылка = &ДокументОснование
	|";
	тзТовары=Запрос.Выполнить().Выгрузить();
	
	тзДанные = ИнициализацияТабличнойЧасти();
	Для Каждого СтрокаТз ИЗ тзТовары Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование,СсылкаНаОбъект)
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникДанных.ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ИсточникДанных.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ИсточникДанных.Контрагент
	|		ИНАЧЕ ИсточникДанных.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	Истина КАК УчитыватьНДС,
	|	Ложь КАК СуммаВключаетНДС,
	|	ИсточникДанных.ДоговорКонтрагента.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	ИсточникДанных.СуммаНДС Как СуммаНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровУслугНДС КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументОснование";
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	НоменклатураКод=Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ПустаяСтрока(НоменклатураКод) Тогда НоменклатураКод="Код"; КонецЕсли; 
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Номенклатура." + НоменклатураКод + " КАК НоменклатураКод,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Номенклатура КАК Номенклатура,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Номенклатура.Представление КАК НоменклатураНаименование,
	|	&ПустаяСтранаПроисхождения КАК СтранаПроисхождения,
	|	"""" КАК ПредставлениеСтраны,
	|	&ПустойНомерГТД КАК НомерГТД,
	|	"""" КАК ПредставлениеГТД,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Количество,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Цена,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.СтавкаНДС,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.СуммаНДС,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Сумма КАК СтоимостьБезНДС,
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Сумма+ОтражениеРеализацииТоваровУслугНДСТовары.СуммаНДС КАК СтоимостьСНДС,
	|	""Товары"" КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровУслугНДС.Товары КАК ОтражениеРеализацииТоваровУслугНДСТовары
	|ГДЕ
	|	ОтражениеРеализацииТоваровУслугНДСТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	тзТовары=Запрос.Выполнить().Выгрузить();
	
	тзДанные = ИнициализацияТабличнойЧасти();
	Для Каждого СтрокаТз ИЗ тзТовары Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция СобратьДанныеПоПоступлениюТоваров(ДокОснование,СсылкаНаОбъект)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникДанных.ВидОперации КАК ВидОперации,
	|	ИсточникДанных.ДоговорКонтрагента.Наименование КАК Основание,
	|	ИсточникДанных.Дата КАК ДатаОтгрузкиПередачи,
	|	ИсточникДанных.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ИсточникДанных.Организация
	|		ИНАЧЕ ИсточникДанных.Грузоотправитель
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ИсточникДанных.Контрагент
	|		ИНАЧЕ ИсточникДанных.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Грузополучатель КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсточникДанных.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ИсточникДанных.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ИсточникДанных.СуммаДокумента КАК СуммаДокумента,
	|	ИсточникДанных.ВалютаДокумента КАК Валюта,
	|	ИсточникДанных.УчитыватьНДС КАК УчитыватьНДС,
	|	ИсточникДанных.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИсточникДанных.ДоговорКонтрагента.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	ИсточникДанных.СуммаНДС Как СуммаНДСДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &ДокументОснование";
	тзДанные=Запрос.Выполнить().Выгрузить();
	СтруктураДанных=ИнициализацияСтруктурыДанных();
	Для каждого СтрокаКоллекции Из тзДанные.Колонки Цикл
		Если СтруктураДанных.Свойство(СтрокаКоллекции.Имя) Тогда
			СтруктураДанных[СтрокаКоллекции.Имя]=тзДанные[0][СтрокаКоллекции.Имя];
		Иначе	
			СтруктураДанных.Вставить(СтрокаКоллекции.Имя, тзДанные[0][СтрокаКоллекции.Имя]);
		Конецесли;
	КонецЦикла;
	
	НоменклатураКод=Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ПустаяСтрока(НоменклатураКод) Тогда НоменклатураКод="Код"; КонецЕсли; 
	
	ЗапросПоТоварам=Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс", ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст="
	|ВЫБРАТЬ
	|	ТаблицаПоТоварам.Номенклатура." + НоменклатураКод + " КАК НоменклатураКод,
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура,
	|	ТаблицаПоТоварам.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	NULL КАК ОбъектСтроительства,
	|	NULL КАК ОбъектСтроительстваНаименование, 
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаПоТоварам.Количество,
	|	ТаблицаПоТоварам.Цена,
	|	ВЫБОР КОГДА  ТаблицаПоТоварам.Ссылка.СуммаВключаетНДС ТОГДА ТаблицаПоТоварам.Сумма-ТаблицаПоТоварам.СуммаНДС ИНАЧЕ ТаблицаПоТоварам.Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  ТаблицаПоТоварам.Ссылка.СуммаВключаетНДС ТОГДА ТаблицаПоТоварам.Сумма ИНАЧЕ ТаблицаПоТоварам.Сумма+ТаблицаПоТоварам.СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	|	""Товары"" КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.Номенклатура." + НоменклатураКод + ",
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ТаблицаПоУслугам.Содержание,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка),
	|	""--"",
	|	""--"",
	|	""--"",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ВЫБОР КОГДА  ТаблицаПоУслугам.Ссылка.СуммаВключаетНДС ТОГДА ТаблицаПоУслугам.Сумма-ТаблицаПоУслугам.СуммаНДС ИНАЧЕ ТаблицаПоУслугам.Сумма КОНЕЦ КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА  ТаблицаПоУслугам.Ссылка.СуммаВключаетНДС ТОГДА ТаблицаПоУслугам.Сумма ИНАЧЕ ТаблицаПоУслугам.Сумма+ТаблицаПоУслугам.СуммаНДС КОНЕЦ КАК СтоимостьСНДС,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	""Услуги"" КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаПоУслугам
	
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
	|";

	тзТовары=ЗапросПоТоварам.Выполнить().Выгрузить();
	
	тзДанные = ИнициализацияТабличнойЧасти();
	Для Каждого СтрокаТз ИЗ тзТовары Цикл
		НоваяСтрока=тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТз);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Позиции", тзДанные);
	
	Возврат СтруктураДанных;
КонецФункции

Функция ПолучитьОбщиеДанныеДляПечати(СсылкаНаОбъект)
	
	ОбщиеДанныеДляПечати = Неопределено;
	Для Каждого СтрДокОснования Из СсылкаНаОбъект.ДокументыОснования Цикл
		Если Не ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда Продолжить; КонецЕсли;
		
		ТипОснования = ТипЗнч(СтрДокОснования.ДокументОснование);
		
		Если СсылкаНаОбъект.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс  Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансиСуммовуюРазницу(СсылкаНаОбъект);
		ИначеЕсли СсылкаНаОбъект.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НалоговыйАгент  Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеСФНалоговыйАгент(СсылкаНаОбъект);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоКомиссияОтчетПродажиКомитенту(СтрДокОснования.ДокументОснование,СсылкаНаОбъект);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(СтрДокОснования.ДокументОснование,СсылкаНаОбъект);			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(СтрДокОснования.ДокументОснование,СсылкаНаОбъект);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоКомиссияОтчетПродажиКомиссионера(СтрДокОснования.ДокументОснование,СсылкаНаОбъект);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровУслугНДС") Тогда
			ЭкземплярДанныхДляПечати =СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(СтрДокОснования.ДокументОснование,СсылкаНаОбъект);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоПоступлениюТоваров(СтрДокОснования.ДокументОснование,СсылкаНаОбъект);	
		КонецЕсли;
		
		Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
			Если ОбщиеДанныеДляПечати = Неопределено Тогда
				ОбщиеДанныеДляПечати = ЭкземплярДанныхДляПечати;
			Иначе
				Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
					Если СтрДанных.Ключ = "Позиции" Тогда
						СтараяТабЧасть = ОбщиеДанныеДляПечати.Позиции;
						НоваяТабЧасть = СтрДанных.Значение;
						
						Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
							СтрокаТабЧасти = СтараяТабЧасть.Добавить();
							Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
								Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
									СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					Иначе
						Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ОбщиеДанныеДляПечати)=Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ОбщиеДанныеДляПечати=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщиеДанныеДляПечати.Вставить("ДатаДокумента", СсылкаНаОбъект.Дата);
	ОбщиеДанныеДляПечати.Вставить("НомерДокумента", СсылкаНаОбъект.Номер);
	Если СсылкаНаОбъект.Исправление Тогда
		ОбщиеДанныеДляПечати.Вставить("НомерИсправления",  СокрЛП(СсылкаНаОбъект.НомерИсправления));
		ОбщиеДанныеДляПечати.Вставить("ДатаИсправления",  Формат(СсылкаНаОбъект.Дата,"ДФ=dd.MM.yyyy"));
	Конецесли;

	ОбщиеДанныеДляПечати.Вставить("Дата", СсылкаНаОбъект.Дата);
	ОбщиеДанныеДляПечати.Вставить("Номер", СсылкаНаОбъект.Номер);
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьЧерезКого) Тогда
		ОбщиеДанныеДляПечати.Основание=ОбщиеДанныеДляПечати.Основание+"; Доверенность "+ОбщиеДанныеДляПечати.ДоверенностьНомер+?(ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ДоверенностьДата), " от "+Формат(ОбщиеДанныеДляПечати.ДоверенностьДата, "ДЛФ=DD"), "")
		+" "+ОбщиеДанныеДляПечати.ДоверенностьВыдана+" "+ОбщиеДанныеДляПечати.ДоверенностьЧерезКого;
	КонецЕсли;	
	Руководители = ПечатныеФормыСервер.ОтветственныеЛицаОрганизации(ОбщиеДанныеДляПечати.Организация, СсылкаНаОбъект.Дата, СсылкаНаОбъект);
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ПодписьРуководителя) Тогда
		ФИОРуководителя = УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ПодписьРуководителя,,Истина,);
	Иначе
		ФИОРуководителя = Руководители.Руководитель;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ПодписьГлавногоБухгалтера) Тогда
		ФИОГлавногоБухгалтера = УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ПодписьГлавногоБухгалтера,,Истина,);
	Иначе
		ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
	КонецЕсли;	

	ОбщиеДанныеДляПечати.Вставить(?(ОбщиеДанныеДляПечати.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, "ФИОПБОЮЛ", "ФИОРуководителя"), ФИОРуководителя);
	ОбщиеДанныеДляПечати.Вставить("ФИОРуководителяНакладная", ФИОРуководителя);
	ОбщиеДанныеДляПечати.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
	ОбщиеДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", ФИОГлавногоБухгалтера);
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОснованиеРуководителя) Тогда
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаРуководителя", ОбщиеДанныеДляПечати.ОснованиеРуководителя);
	Иначе
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаРуководителя", "(ф.и.о.)");
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОснованиеГлавногоБухгалтера) Тогда
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаГлавногоБухгалтера",ОбщиеДанныеДляПечати.ОснованиеГлавногоБухгалтера);
	Иначе
		ОбщиеДанныеДляПечати.Вставить("ОснованиеПодписантаГлавногоБухгалтера","(ф.и.о.)");
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОтпускРазрешил) Тогда
		ОбщиеДанныеДляПечати.Вставить("ФИООтветственного", УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ОтпускРазрешил, , Истина));
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ОбщиеДанныеДляПечати.ДатаДокумента);
		Запрос.УстановитьПараметр("Сотрудник", ОбщиеДанныеДляПечати.ОтпускРазрешил);
		Запрос.УстановитьПараметр("Организация", ОбщиеДанныеДляПечати.Организация);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КадровыеСведенияСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.КадровыеСведения.СрезПоследних(&Дата, Сотрудник = &Сотрудник И Организация = &Организация) КАК КадровыеСведенияСрезПоследних
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщиеДанныеДляПечати.Вставить("ДолжностьОтветственного", Выборка.Должность);
		КонецЕсли;
	Иначе
		ОбщиеДанныеДляПечати.Вставить("ФИООтветственного", ФИОРуководителя);
		ОбщиеДанныеДляПечати.Вставить("ДолжностьОтветственного", Руководители.РуководительДолжность);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.ОтпускПроизвел) Тогда
		ОбщиеДанныеДляПечати.Вставить("ФИОКладовщика", УправлениеКонфигурациейСервер.ФИО(ОбщиеДанныеДляПечати.ОтпускПроизвел, , Истина));
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ОбщиеДанныеДляПечати.ДатаДокумента);
		Запрос.УстановитьПараметр("Сотрудник", ОбщиеДанныеДляПечати.ОтпускПроизвел);
		Запрос.УстановитьПараметр("Организация", ОбщиеДанныеДляПечати.Организация);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КадровыеСведенияСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.КадровыеСведения.СрезПоследних(&Дата, Сотрудник = &Сотрудник И Организация = &Организация) КАК КадровыеСведенияСрезПоследних
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщиеДанныеДляПечати.Вставить("ДолжностьКладовщика", Выборка.Должность);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПоставщике=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ОбщиеДанныеДляПечати.Поставщик, ОбщиеДанныеДляПечати.Дата);
	Если ОбщиеДанныеДляПечати.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбщиеДанныеДляПечати.Свидетельство=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;
	ОбщиеДанныеДляПечати.Вставить("СтоимостьБезНДС",ОбщиеДанныеДляПечати.Позиции.Итог("СтоимостьБезНДС"));
	ОбщиеДанныеДляПечати.Вставить("СуммаНДС",ОбщиеДанныеДляПечати.Позиции.Итог("СуммаНДС"));
	ОбщиеДанныеДляПечати.Вставить("СтоимостьСНДС",ОбщиеДанныеДляПечати.Позиции.Итог("СтоимостьСНДС"));
	
	ТаблицаДатОплат=СсылкаНаОбъект.ДатаНомерДокументовОплаты.Выгрузить();
	ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
	СтрокиКУдалению=Новый массив();
	Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
		Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) И ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
			СтрокиКУдалению.Добавить(СтрокаОплат);
		КонецЕсли;
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДатОплат.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	НомерСтроки=0;
	Для Каждого СтрокаТз ИЗ ОбщиеДанныеДляПечати.Позиции Цикл
		НомерСтроки=НомерСтроки+1;
		СтрокаТз.НомерСтроки=НомерСтроки;
		Если ЗначениеЗаполнено(СтрокаТз.НомерРазделаГТД) Тогда
			СтрокаТз.ПредставлениеГТД=СокрЛП(СтрокаТз.ПредставлениеГТД)+"/"+СокрЛП(СтрокаТз.НомерРазделаГТД);
		КонецЕсли;
//		СтрокаТз.Цена=?(СтрокаТз.Количество=0, 0, Окр(СтрокаТз.СтоимостьБезНДС / СтрокаТз.Количество, 2));
		Если НЕ ЗначениеЗаполнено(СтрокаТз.НоменклатураКодТНВЭД) ИЛИ СтрокаТз.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаТз.НоменклатураКодТНВЭД="--";
		КонецЕсли;
		
		Если Строка(СтрокаТз.ПредставлениеСтраны)="Россия" 
			ИЛИ Строка(СтрокаТз.ПредставлениеСтраны)="Российская Федерация"
			ИЛИ СтрокаТз.СтранаПроисхождения=Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			СтрокаТз.ПредставлениеСтраны="";
			СтрокаТз.СтранаПроисхожденияКод="";
		Иначе
			Если ЗначениеЗаполнено(СтрокаТз.СтранаПроисхождения) Тогда
				СтрокаТз.ПредставлениеСтраны=СокрЛП(СтрокаТз.СтранаПроисхождения.Наименование);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТз.ЕдиницаИзмерения) Тогда
			СтрокаТз.Количество = 0;
			СтрокаТз.ЕдиницаИзмеренияКод="";
		КонецЕсли;
		СтрокаТз.БазоваяЕдиницаКодПоОКЕИ=СтрокаТз.ЕдиницаИзмеренияКод;
		СтрокаТз.НоменклатураНаименование=СокрЛП(СтрокаТз.НоменклатураНаименование) + ПечатныеФормыСервер.ПредставлениеСерий(СтрокаТз, Истина);
	КонецЦикла;
	
	ОбщиеДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
	
	Возврат ОбщиеДанныеДляПечати;	
КонецФункции

Функция Печать_СчетаФактуры2012(СтруктураПараметров, ТабДокумент)
	
	ПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	Приставка="";
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		Приставка="(при наличии)";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПечати.ИдентификаторГосКонтракта) Тогда
		ПараметрыПечати.ИдентификаторГосКонтракта = "Идентификатор государственного контракта, договора (соглашения) "+Приставка+" : "+СокрЛП(ПараметрыПечати.ИдентификаторГосКонтракта);
	Иначе
		ПараметрыПечати.ИдентификаторГосКонтракта = "Идентификатор государственного контракта, договора (соглашения) "+Приставка+" :---";
	КонецЕсли;
	ПараметрыПечати.Вставить("КонтрагентПерепредъявление", СтруктураПараметров.СсылкаНаОбъект.Контрагент);

	ЭтоРеализацияТоваровУслуг=ТипЗнч(СтруктураПараметров.СсылкаНаОбъект.ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг");
	текВидСчетаФактуры=СтруктураПараметров.СсылкаНаОбъект.ВидСчетаФактуры;
	
	СведенияОПокупателе 	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента);
	СведенияОПоставщике  	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Поставщик, ПараметрыПечати.ДатаДокумента);
	СведенияОГрузоотправителе = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(?(ПараметрыПечати.Грузоотправитель = "он же", Неопределено, ПараметрыПечати.Грузоотправитель), ПараметрыПечати.ДатаДокумента);
	СведенияОГрузополучателе  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузополучатель, ПараметрыПечати.ДатаДокумента);
	
	Если ПараметрыПечати.Свойство("ВидОперации") Тогда
		Если ПараметрыПечати.ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров.Перепредъявление Тогда
			СведенияОГрузополучателе=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.КонтрагентПерепредъявление, ПараметрыПечати.ДатаДокумента);
			СведенияОПокупателе=КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.КонтрагентПерепредъявление, ПараметрыПечати.ДатаДокумента);
		КонецЕсли;	
	КонецЕсли;
	
	//Если ПараметрыПечати.Свойство("АдресДоставки") И НЕ ПустаяСтрока(ПараметрыПечати.АдресДоставки) Тогда
	//	ПредставлениеГрузополучателя="Грузополучатель и его адрес: "+?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузополучатель), ПараметрыПечати.АдресДоставки,
	//	ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ПараметрыПечати.АдресДоставки);
	//Иначе
		ПредставлениеГрузополучателя="Грузополучатель и его адрес: "+?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузополучатель), "---",
		ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
	//КонецЕсли;
	
	Если ЭтоРеализацияТоваровУслуг Тогда
		Если СтруктураПараметров.СсылкаНаОбъект.ДокументОснование.Товары.Количество()=0 Тогда
			ПредставлениеГрузополучателя="Грузополучатель и его адрес: ---";
		КонецЕсли; 
	КонецЕсли; 	//идиотизм
	ПараметрыПечати.Вставить("ПредставлениеГрузополучателя",ПредставлениеГрузополучателя);
	
	АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	Если НЕ (текВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НалоговыйАгент И СтруктураПараметров.СсылкаНаОбъект.ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если СведенияОПоставщике.ИНН=СведенияОГрузоотправителе.ИНН Тогда
			КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "КПП,", Ложь);
			АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ЮридическийАдрес,");
		КонецЕсли; //29.09.17
		Если ЗначениеЗаполнено(КПП) Тогда КПП="/"+КПП; КонецЕсли;
		ПараметрыПечати.Вставить("ИННпоставщика","ИНН/КПП продавца: "+ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
	Иначе
		ПараметрыПечати.Вставить("ИННпоставщика","ИНН/КПП продавца: ---");
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ПредставлениеПоставщика","Продавец: "+ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПоставщика","Адрес: "+АдресПоставщика);
	
	Если текВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаРеализацию Тогда
		ПараметрыПечати.Номер="Счет-фактура № "+ОбщегоНазначенияСервер.НомерНаПечать(СтруктураПараметров.СсылкаНаОбъект)+" от "+Формат(ПараметрыПечати.ДатаДокумента, "ДФ='дд ММММ гггг'") + " г.";
		ПараметрыПечати.Вставить("НомерИсправления","Исправление № - от -");
	Иначе
		ЗаголовокДляПечати=ОбщегоНазначения.СформироватьЗаголовокДокумента(СтруктураПараметров.СсылкаНаОбъект, "Счет-фактура");
		ПараметрыПечати.Номер=ЗаголовокДляПечати;
		Если СтруктураПараметров.СсылкаНаОбъект.Исправление Тогда
			ЗаголовокДляПечати=ОбщегоНазначения.СформироватьЗаголовокДокумента(СтруктураПараметров.СсылкаНаОбъект.ДокументОснованиеКорректировка, "Счет-фактура");
			ПараметрыПечати.Номер=ЗаголовокДляПечати;
			ПараметрыПечати.Вставить("НомерИсправления","Исправление № "+СтруктураПараметров.СсылкаНаОбъект.НомерИсправления+" от "+Формат(ПараметрыПечати.ДатаИсправления, "ДФ=dd.MM.yyyy"));
		Иначе
			ПараметрыПечати.Вставить("НомерИсправления","Исправление № - от -");
		КонецЕсли;		
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ПредставлениеГрузоотправителя","Грузоотправитель и его адрес: "
	+ ?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузоотправитель), "он же", 
	?(ПараметрыПечати.Грузоотправитель = "он же", ПараметрыПечати.Грузоотправитель, ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,"))));
	
	Если ЭтоРеализацияТоваровУслуг Тогда
		Если СтруктураПараметров.СсылкаНаОбъект.ДокументОснование.Товары.Количество()=0 Тогда
			ПараметрыПечати.ПредставлениеГрузоотправителя="Грузоотправитель и его адрес: ---";
		КонецЕсли;
	КонецЕсли;
	
	Строка_ПоДокументу = "";
	Для каждого ПараметрыДокументаОплаты Из ПараметрыПечати.ТаблицаДатОплат Цикл
		мНомерПлатежноРасчетногоДокумента = ?(НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента), "---", ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента);
		мДатаПлатежноРасчетногоДокумента  = ?(НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) , "---", Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy"));		
		Строка_ПоДокументу = Строка_ПоДокументу+ ?(ПустаяСтрока(Строка_ПоДокументу), "К платежно-расчетному документу № ",", ")+мНомерПлатежноРасчетногоДокумента+" от "+мДатаПлатежноРасчетногоДокумента;
	КонецЦикла; 
	Если ПустаяСтрока(Строка_ПоДокументу) Тогда
		Если СтруктураПараметров.СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
			Строка_ПоДокументу = "К платежно-расчетному документу № -- от --";	
		Иначе
			Строка_ПоДокументу = "К платежно-расчетному документу №    от";
		КонецЕсли;	
//		Строка_ПоДокументу = "К платежно-расчетному документу № ---";
	КонецЕсли; 
	ПараметрыПечати.Вставить("ПоДокументу",Строка_ПоДокументу);
	
	АдресПокупателя=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если СведенияОПокупателе.ИНН=СведенияОГрузополучателе.ИНН Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
		//*** АдресПокупателя=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ЮридическийАдрес,");
	КонецЕсли; //29.09.17	
	Если ЗначениеЗаполнено(КПП) Тогда КПП = "/" + КПП; КонецЕсли;
	ПараметрыПечати.Вставить("ИННПокупателя", "ИНН/КПП покупателя: "+ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
	ПараметрыПечати.Валюта=?(ЗначениеЗаполнено(ПараметрыПечати.Валюта), "Валюта: наименование, код " +ПараметрыПечати.Валюта.НаименованиеПолное+", "+ПараметрыПечати.Валюта.Код, "Валюта: наименование, код");		
	
	ПараметрыПечати.Вставить("ПредставлениеПокупателя", "Покупатель: "+ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПокупателя", "Адрес: "+АдресПокупателя);
	
	
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		Строчка.Цена=?(Строчка.Количество=0, 0, Окр(Строчка.СтоимостьБезНДС / Строчка.Количество, 2));
		Если текВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию 
			И ((Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
			ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110)) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ ПараметрыПечати.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если текВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		ПараметрыПечати.Свидетельство = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "Свидетельство,");
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет = ИнициализацияМакета(СтруктураПараметров, "СчетФактура2017");
	
	ЭтоРеализацияТоваровУслуг=ТипЗнч(СтруктураПараметров.СсылкаНаОбъект.ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг");
	текВидСчетаФактуры=СтруктураПараметров.СсылкаНаОбъект.ВидСчетаФактуры;
	
	// Выводим шапку
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаИнформация=Макет.ПолучитьОбласть("ШапкаИнформация20171001");
	Иначе	
		ОбластьМакетаИнформация=Макет.ПолучитьОбласть("ШапкаИнформация");
	КонецЕсли;
	ОбластьМакетаИнформация.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаИнформация);
	
	ОбластьМакета=Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы20171001");
	Иначе	
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	КонецЕсли;
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим строки таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакета=Макет.ПолучитьОбласть("Строка20171001");
	Иначе	
		ОбластьМакета=Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого20171001");
	Иначе	
		ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	КонецЕсли;
	
	НомерСтроки = 0;
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.Заполнить(Строчка);
		Если НЕ ЗначениеЗаполнено(Строчка.СуммаАкциза) Тогда
			ОбластьМакета.Параметры.СуммаАкциза="Без акциза";
		КонецЕсли;
		Если ОбластьМакета.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "Без НДС";
			ОбластьМакета.Параметры.СуммаНДС = "Без НДС";
		КонецЕсли;

		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом=Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
		
		Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
		КонецЕсли;
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета); //**
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Если ПараметрыПечати.Позиции.Количество() > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакетаИтого.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Если НЕ ЭтоРеализацияТоваровУслуг Тогда
		ТабДокумент.ВерхнийКолонтитул.Выводить=Истина;
		ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
		ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
		ТабДокумент.ВерхнийКолонтитул.ТекстСлева=ЗаголовокДляПечати;
		ТабДокумент.ВерхнийКолонтитул.ТекстСправа="Лист [&НомерСтраницы]";
	КонецЕсли;
	
	Возврат ТабДокумент;
КонецФункции

Функция ЗаполнитьЗначениеДоКорректировки(Основание, ДанныеДляЗаполнения)
	ДокОснование=Основание.ДокументОснование;
	Если НЕ Основание.ДокументыОснования.Количество()=0 Тогда
		ДокОснование=Основание.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеДляЗаполнения Цикл
		РезультатПоиска=ДокОснование[СтрокаТаблицы.ТабличнаяЧасть].Найти(СтрокаТаблицы.ID_Поиск, "ID");
		Если РезультатПоиска=Неопределено Тогда
			РезультатПоиска=ДокОснование[СтрокаТаблицы.ТабличнаяЧасть].Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		КонецЕсли;
		Если НЕ РезультатПоиска=Неопределено Тогда
			СтрокаТаблицы.ID_Поиск=РезультатПоиска.ID;
			Для Каждого Поле Из ДанныеДляЗаполнения.Колонки Цикл
				Если Поле.ТипЗначения=Новый ОписаниеТипов("Число") Тогда
					СтрокаТаблицы[Поле.Имя]=СтрокаТаблицы[Поле.Имя]+РезультатПоиска[Поле.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	Если Основание.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
		Возврат ЗаполнитьЗначениеДоКорректировки(Основание.ДокументОснованиеКорректировка, ДанныеДляЗаполнения);
	КонецЕсли;			
	Возврат ДокОснование.СуммаВключаетНДС;
КонецФункции

Функция Печать_КорректировочногоСчетаФактуры1137(СтруктураПараметров,ТабДокумент)
	
	ПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	
	ДанныеДляЗаполнения=ПараметрыПечати.Позиции.Скопировать(, "ТабличнаяЧасть,ID,Номенклатура");
	ДанныеДляЗаполнения.Колонки.Добавить("ID_Поиск", Новый ОписаниеТипов("Строка"));
	ДанныеДляЗаполнения.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ДанныеДляЗаполнения.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ДанныеДляЗаполнения.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	ДанныеДляЗаполнения.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ДанныеДляЗаполнения Цикл
		СтрокаТаблицы.ID_Поиск=СтрокаТаблицы.ID;
	КонецЦикла;
	СуммаВключаетНДС=ЗаполнитьЗначениеДоКорректировки(СтруктураПараметров.СсылкаНаОбъект.ДокументОснованиеКорректировка, ДанныеДляЗаполнения);
	
	Для Каждого СтрокаТз ИЗ ПараметрыПечати.Позиции Цикл
		ИсточникДанных=ДанныеДляЗаполнения[ПараметрыПечати.Позиции.Индекс(СтрокаТз)];
		СтрокаТз.КоличествоДоИзменения=СтрокаТз.КоличествоДоИзменения+ИсточникДанных.Количество;
		СтрокаТз.СуммаНДСДоИзменения=СтрокаТз.СуммаНДСДоИзменения+ИсточникДанных.СуммаНДС;
		СтрокаТз.СтоимостьБезНДСДоИзменения=СтрокаТз.СтоимостьБезНДСДоИзменения+?(СуммаВключаетНДС, ИсточникДанных.Сумма-ИсточникДанных.СуммаНДС, ИсточникДанных.Сумма);
		СтрокаТз.СтоимостьСНДСДоИзменения=СтрокаТз.СтоимостьСНДСДоИзменения+?(СуммаВключаетНДС, ИсточникДанных.Сумма, ИсточникДанных.Сумма+ИсточникДанных.СуммаНДС);
		СтрокаТз.ЦенаДоИзменения=ИсточникДанных.Цена;
		Если НЕ СтрокаТз.КоличествоДоИзменения=0 Тогда
			СтрокаТз.ЦенаДоИзменения=?(СуммаВключаетНДС,Окр(СтрокаТз.СтоимостьБезНДСДоИзменения/СтрокаТз.КоличествоДоИзменения,2), ИсточникДанных.Цена);
		КонецЕсли;
		СтрокаТз.КоличествоПослеИзменения=СтрокаТз.Количество+СтрокаТз.КоличествоДоИзменения;
		СтрокаТз.СуммаНДСПослеИзменения=СтрокаТз.СуммаНДС+СтрокаТз.СуммаНДСДоИзменения;
		СтрокаТз.СтоимостьБезНДСПослеИзменения=СтрокаТз.СтоимостьБезНДС+СтрокаТз.СтоимостьБезНДСДоИзменения;
		СтрокаТз.СтоимостьСНДСПослеИзменения=СтрокаТз.СтоимостьСНДС+СтрокаТз.СтоимостьСНДСДоИзменения;
		СтрокаТз.ЦенаПослеИзменения=СтрокаТз.ЦенаДоИзменения;
		Если НЕ СтрокаТз.КоличествоПослеИзменения=0 Тогда
			СтрокаТз.ЦенаПослеИзменения=?(ПараметрыПечати.СуммаВключаетНДС,Окр(СтрокаТз.СтоимостьБезНДСПослеИзменения/СтрокаТз.КоличествоПослеИзменения,2),СтрокаТз.ЦенаПослеИзменения);
		КонецЕсли;	
		
		Если СтрокаТз.СуммаНДС<0 Тогда
			СтрокаТз.РазницаНДСУменьшение=-СтрокаТз.СуммаНДС;
		Иначе
			СтрокаТз.РазницаНДСУвеличение=СтрокаТз.СуммаНДС;
		КонецЕсли;	
		
		Если СтрокаТз.СтоимостьБезНДС<0 Тогда
			СтрокаТз.РазницаБезНДСУменьшение=-СтрокаТз.СтоимостьБезНДС;
		Иначе
			СтрокаТз.РазницаБезНДСУвеличение=СтрокаТз.СтоимостьБезНДС;
		КонецЕсли;	
		
		Если СтрокаТз.СтоимостьСНДС<0 Тогда
			СтрокаТз.РазницаСНДСУменьшение=-СтрокаТз.СтоимостьСНДС;
		Иначе
			СтрокаТз.РазницаСНДСУвеличение=СтрокаТз.СтоимостьСНДС;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтрокаТз.НоменклатураКодТНВЭД) ИЛИ СтрокаТз.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаТз.НоменклатураКодТНВЭД="--";
		КонецЕсли;
	КонецЦикла;	

	СведенияОПокупателе = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента);
	СведенияОПоставщике  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Поставщик, ПараметрыПечати.ДатаДокумента);
	
	ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Получить();
	Если ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <> '00010101'
		И ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <= ПараметрыПечати.ДатаДокумента Тогда
		ПараметрыПечати.Вставить("НаименованиеПродавца", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") + 
		" (" + ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")");
	Иначе
		ПараметрыПечати.Вставить("НаименованиеПродавца", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	КонецЕсли;
	ПараметрыПечати.Вставить("АдресПродавца", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
	КПП = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если  ЗначениеЗаполнено(КПП) Тогда КПП = "/" + КПП; КонецЕсли;
	ПараметрыПечати.Вставить("ИННКПППродавца", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
	
	ПараметрыПечати.Вставить("НаименованиеПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	КПП = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если  ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ПараметрыПечати.Вставить("ИННКПППокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
	ПараметрыПечати.Валюта=?(ЗначениеЗаполнено(ПараметрыПечати.Валюта), "Валюта: наименование, код " +ПараметрыПечати.Валюта.НаименованиеПолное+", "+ПараметрыПечати.Валюта.Код, "Валюта: наименование, код");

	ПараметрыПечати.Вставить("РазницаБезНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаБезНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаБезНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаБезНДСУвеличение"));
	ПараметрыПечати.Вставить("РазницаНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаНДСУвеличение"));
	ПараметрыПечати.Вставить("РазницаСНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаСНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаСНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаСНДСУвеличение"));

	ПараметрыПечати.Номер=ОбщегоНазначенияСервер.НомерНаПечать(СтруктураПараметров.СсылкаНаОбъект);
	ПараметрыПечати.Дата=Формат(ПараметрыПечати.ДатаДокумента, "ДФ='дд ММММ гггг'") + " г.";
	ПараметрыПечати.Вставить("НомерСчетаФактурыОснования",  СокрЛП(СтруктураПараметров.СсылкаНаОбъект.ДокументОснованиеКорректировка.Номер));
	ПараметрыПечати.Вставить("ДатаСчетаФактурыОснования",  Формат(СтруктураПараметров.СсылкаНаОбъект.ДокументОснованиеКорректировка.Дата,"ДФ=dd.MM.yyyy"));


	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)<Дата(2017,07,01,0,0,0) Тогда
		Макет = ИнициализацияМакета(СтруктураПараметров, "КорректировочныйСчетФактура1137");
	Иначе
		Макет = ИнициализацияМакета(СтруктураПараметров, "КорректировочныйСчетФактура2017");
	КонецЕсли;
	
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка20171001");
	Иначе	
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы20171001");
	Иначе	
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим строки таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакета=Макет.ПолучитьОбласть("Строка20171001");
	Иначе	
		ОбластьМакета=Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	НомерСтроки     = 0;
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	
	Для Каждого СтрокаТаблицы Из ПараметрыПечати.Позиции Цикл
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместиться итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
		
		Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, , ТабДокумент.ВысотаТаблицы, ).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакетаИтого.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	// Задаем параметры табличного документа
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	ТабДокумент.ВерхнийКолонтитул.Выводить              = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница     = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа           = "Лист [&НомерСтраницы]";
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева            = "Корректировочный счет-фактура №"+ПараметрыПечати.Номер+"от "+ПараметрыПечати.Дата;
	
	Возврат ТабДокумент;
КонецФункции

Функция Печать_УниверсальныйПередаточныйДокумент(СтруктураПараметров, ТабДокумент)
	
	ПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	
	ЭтоРеализацияТоваровУслуг=ТипЗнч(СтруктураПараметров.СсылкаНаОбъект.ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг");
	текВидСчетаФактуры=СтруктураПараметров.СсылкаНаОбъект.ВидСчетаФактуры;
	
	СведенияОПокупателе 	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента);
	СведенияОПоставщике  	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Поставщик, ПараметрыПечати.ДатаДокумента);
	СведенияОГрузоотправителе = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(?(ПараметрыПечати.Грузоотправитель = "он же", Неопределено, ПараметрыПечати.Грузоотправитель), ПараметрыПечати.ДатаДокумента);
	СведенияОГрузополучателе  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузополучатель, ПараметрыПечати.ДатаДокумента);

	Приставка="";
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		Приставка="(при наличии)";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПечати.ИдентификаторГосКонтракта) Тогда
		ПараметрыПечати.ИдентификаторГосКонтракта = "Идентификатор государственного контракта, договора (соглашения) "+Приставка+" : "+СокрЛП(ПараметрыПечати.ИдентификаторГосКонтракта);
	Иначе
		ПараметрыПечати.ИдентификаторГосКонтракта = "Идентификатор государственного контракта, договора (соглашения) "+Приставка+" :---";
	КонецЕсли;

	//Если ПараметрыПечати.Свойство("АдресДоставки") И НЕ ПустаяСтрока(ПараметрыПечати.АдресДоставки) Тогда
	//	ПредставлениеГрузополучателя=?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузополучатель), ПараметрыПечати.АдресДоставки,
	//	ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ПараметрыПечати.АдресДоставки);
	//Иначе
		ПредставлениеГрузополучателя=?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузополучатель), "---",
		ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
	//КонецЕсли;
	
	Если ЭтоРеализацияТоваровУслуг Тогда
		Если СтруктураПараметров.СсылкаНаОбъект.ДокументОснование.Товары.Количество()=0 Тогда
			ПредставлениеГрузополучателя="---";
		КонецЕсли; 
	КонецЕсли; 	//идиотизм
	
	АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	Если НЕ (текВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НалоговыйАгент И СтруктураПараметров.СсылкаНаОбъект.ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент) Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если СведенияОПоставщике.ИНН=СведенияОГрузоотправителе.ИНН Тогда
			КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "КПП,", Ложь);
			АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ЮридическийАдрес,");
		КонецЕсли; //29.09.17
		Если ЗначениеЗаполнено(КПП) Тогда КПП="/"+КПП; КонецЕсли;
		ПараметрыПечати.Вставить("ИННпоставщика",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
	Иначе
		ПараметрыПечати.Вставить("ИННпоставщика","---");
	КонецЕсли;
	ПараметрыПечати.Вставить("ПредставлениеПоставщика",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПоставщика",АдресПоставщика);
	
	
	ПараметрыПечати.Номер=ОбщегоНазначенияСервер.НомерНаПечать(СтруктураПараметров.СсылкаНаОбъект);
	ПараметрыПечати.Дата=Формат(ПараметрыПечати.ДатаДокумента, "ДФ='дд ММММ гггг'") + " г.";
	Если СтруктураПараметров.СсылкаНаОбъект.Исправление Тогда
		ПараметрыПечати.Номер=ОбщегоНазначенияСервер.НомерНаПечать(СтруктураПараметров.СсылкаНаОбъект.ДокументОснованиеКорректировка);
		ПараметрыПечати.Дата=Формат(СтруктураПараметров.СсылкаНаОбъект.ДокументОснованиеКорректировка.Дата, "ДФ='дд ММММ гггг'") + " г.";
		ПараметрыПечати.НомерИсправления=СокрЛП(СтруктураПараметров.СсылкаНаОбъект.НомерИсправления);
		ПараметрыПечати.ДатаИсправления=Формат(ПараметрыПечати.ДатаДокумента,"ДФ='дд ММММ гггг'")+ " г.";
	Иначе
		ПараметрыПечати.Вставить("НомерИсправления","-");
		ПараметрыПечати.Вставить("ДатаИсправления","-");
	КонецЕсли;

	ПараметрыПечати.Вставить("ПредставлениеГрузоотправителя",?(НЕ ЗначениеЗаполнено(ПараметрыПечати.Грузоотправитель), "он же", 
	?(ПараметрыПечати.Грузоотправитель = "он же", ПараметрыПечати.Грузоотправитель, ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,"))));
	
	ПараметрыПечати.Вставить("ПредставлениеГрузополучателя",ПредставлениеГрузополучателя);
	
	Строка_ПоДокументу = "";
	Для каждого ПараметрыДокументаОплаты Из ПараметрыПечати.ТаблицаДатОплат Цикл
		мНомерПлатежноРасчетногоДокумента = ?(НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента), "---", ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента);
		мДатаПлатежноРасчетногоДокумента  = ?(НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) , "---", Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy"));		
		Строка_ПоДокументу = Строка_ПоДокументу+ ?(ПустаяСтрока(Строка_ПоДокументу), "",", ")+мНомерПлатежноРасчетногоДокумента+" от "+мДатаПлатежноРасчетногоДокумента;
	КонецЦикла; 
	Если ПустаяСтрока(Строка_ПоДокументу) Тогда
		Строка_ПоДокументу = "---";
	КонецЕсли; 
	ПараметрыПечати.Вставить("ПоДокументу",Строка_ПоДокументу);
	
	КПП = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если СведенияОПокупателе.ИНН=СведенияОГрузополучателе.ИНН Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
	КонецЕсли; //29.09.17
	
	ПараметрыПечати.Вставить("ПредставлениеПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	
	Если ЗначениеЗаполнено(КПП) Тогда КПП = "/" + КПП; КонецЕсли;
	ПараметрыПечати.Вставить("ИННПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
	ПараметрыПечати.Вставить("Валюта",?(ЗначениеЗаполнено(ПараметрыПечати.Валюта), ПараметрыПечати.Валюта.НаименованиеПолное+", "+ПараметрыПечати.Валюта.Код, ""));
	ПараметрыПечати.Вставить("СтатусУПД",1);
	
	
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		Строчка.Цена=?(Строчка.Количество=0, 0, Окр(Строчка.СтоимостьБезНДС / Строчка.Количество, 2));
		Если текВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаРеализацию 
			И ((Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
			ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			ИЛИ (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110)) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ ПараметрыПечати.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если текВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		ПараметрыПечати.Свидетельство = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "Свидетельство,");
	Иначе
		ПараметрыПечати.Свидетельство = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыПечати.ДатаОтгрузкиПередачи) Тогда		
		ШаблонДатыОтгрузкиПередачи = Формат(ПараметрыПечати.ДатаОтгрузкиПередачи, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
		
		ДлинаДаты = 32;
		ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
		ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
		
		ДатаОтгрузкиПередачи = ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
		СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
		СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа), "года");
		
	Иначе
		ДатаОтгрузкиПередачи = "«      »                    20     года";
	КонецЕсли;

	ПараметрыПечати.Вставить("ДатаОтгрузкиПередачи", ДатаОтгрузкиПередачи);
	ПараметрыПечати.Вставить("ПредставлениеОрганизации",  ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")+?(ПустаяСтрока(ПараметрыПечати.ИННпоставщика), "" , ", ") + ПараметрыПечати.ИННпоставщика);
	ПараметрыПечати.Вставить("ПредставлениеКонтрагента",  ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")+?(ПустаяСтрока(ПараметрыПечати.ИННПокупателя), "" , ", ") + ПараметрыПечати.ИННПокупателя);

	
	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет = ИнициализацияМакета(СтруктураПараметров, "УниверсальныйПередаточныйДокумент");
	
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка20171001");
	Иначе	
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы20171001");
	Иначе	
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	КонецЕсли;
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим строки таблицы
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакета=Макет.ПолучитьОбласть("Строка20171001");
	Иначе	
		ОбластьМакета=Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	Если НачалоДня(ПараметрыПечати.ДатаДокумента)>=Дата(2017,10,01,0,0,0) Тогда
		ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого20171001");
	Иначе	
		ОбластьМакетаИтого = Макет.ПолучитьОбласть("Итого");
	КонецЕсли;
	
	НомерСтроки = 0;
	НомерСтраницы   = 1;
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	ОбластьМакетаНомерСтраницы = Макет.ПолучитьОбласть("НумерацияЛистов");
	
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		НомерСтроки=НомерСтроки+1;
		ОбластьМакета.Параметры.Заполнить(Строчка);
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "Без НДС";
			ОбластьМакета.Параметры.СуммаНДС = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.СуммаАкциза) Тогда
			ОбластьМакета.Параметры.СуммаАкциза="Без акциза";
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		Если СтруктураПараметров.Свойство("МодульПечати") Тогда
			Если СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ВключитьРазрывСтраницы Тогда
				СтрокаСПодвалом=Новый Массив;
				СтрокаСПодвалом.Добавить(ОбластьМакета);
				Если НомерСтроки = КоличествоСтрок Тогда
					// Если последняя строка, то должен поместится итог и подвал
					СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
				КонецЕсли;
				Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
					Если КоличествоСтрок > 0 Тогда
						// Вывод разделителя и заголовка таблицы на новой странице
						НомерСтраницы = НомерСтраницы + 1;
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ОбластьМакетаНомерСтраницы.Параметры.НомерЛиста = НомерСтраницы;
						ОбластьМакетаНомерСтраницы.Параметры.Номер = "Универсальный передаточный документ № "+СокрЛП(ПараметрыПечати.Номер)+" от "+СокрЛП(Формат(ПараметрыПечати.ДатаДокумента,"ДЛФ=DD"));
						ТабДокумент.Вывести(ОбластьМакетаНомерСтраницы);
						ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета); //**
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакетаИтого.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПечати);
	ОбластьМакетаПодвал.Параметры.КоличествоЛистов="Документ составлен на "+СокрЛП(НомерСтраницы)+" листах";
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	
	ОбластьМакетаПодвалНакладной.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвалНакладной);
	
	Если НЕ ЭтоРеализацияТоваровУслуг Тогда
		ТабДокумент.ВерхнийКолонтитул.Выводить=Истина;
		ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
		ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
		ТабДокумент.ВерхнийКолонтитул.ТекстСправа="Лист [&НомерСтраницы]";
	КонецЕсли;
	
	Возврат ТабДокумент;
КонецФункции

Функция Печать_УниверсальныйКорректировочныйДокумент(СтруктураПараметров,ТабДокумент)
	ПараметрыПечати=ПолучитьОбщиеДанныеДляПечати(СтруктураПараметров.СсылкаНаОбъект);
	
	ОригиналСчетФактуры=__ПолучитьОригинальныйСчетФактура(СтруктураПараметров.СсылкаНаОбъект);
	Если ОригиналСчетФактуры=Неопределено Тогда Возврат ТабДокумент; КонецЕсли;
	
	ОригиналДокОснование=ОригиналСчетФактуры.ДокументОснование;
	Если НЕ ОригиналСчетФактуры.ДокументыОснования.Количество()=0 Тогда
		ОригиналДокОснование=ОригиналСчетФактуры.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	ПараметрыПечати.Дата=Формат(ПараметрыПечати.ДатаДокумента,"ДФ=dd.MM.yyyy");
	
	Если ЗначениеЗаполнено(ОригиналСчетФактуры.ДокументОснование) Тогда
		МетаданныеДокумента = ОригиналСчетФактуры.ДокументОснование.Метаданные();
		ПараметрыПечати.Вставить("РеквизитыПередаточныхДокументов", "Универсальный передаточный документ " +МетаданныеДокумента.Синоним + " № "+ СокрЛП(ОригиналСчетФактуры.ДокументОснование.Номер) + " от " + Формат(ОригиналСчетФактуры.ДокументОснование.Дата,"ДФ=дд.ММ.гггг"));
    Конецесли;

	ПараметрыПечати.Вставить("НомерСчетаФактурыОснования",  СокрЛП(ОригиналСчетФактуры.Номер));
	ПараметрыПечати.Вставить("ДатаСчетаФактурыОсновнания",  Формат(ОригиналСчетФактуры.Дата,"ДФ=dd.MM.yyyy"));
	ПараметрыПечати.Вставить("СтатусУКД",1);
	ПараметрыПечати.Вставить("Валюта",?(ЗначениеЗаполнено(ПараметрыПечати.Валюта), ПараметрыПечати.Валюта.НаименованиеПолное+", "+ПараметрыПечати.Валюта.Код, ""));
	Если ЗначениеЗаполнено(ПараметрыПечати.ИдентификаторГосКонтракта) Тогда
		ПараметрыПечати.ИдентификаторГосКонтракта = СокрЛП(ПараметрыПечати.ИдентификаторГосКонтракта);
	Иначе
		ПараметрыПечати.ИдентификаторГосКонтракта = "---";
	КонецЕсли;

	СведенияОПокупателе 	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Покупатель, ПараметрыПечати.ДатаДокумента);
	СведенияОПоставщике  	  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Поставщик, ПараметрыПечати.ДатаДокумента);
	СведенияОГрузоотправителе = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(?(ПараметрыПечати.Грузоотправитель = "он же", Неопределено, ПараметрыПечати.Грузоотправитель), ПараметрыПечати.ДатаДокумента);
	СведенияОГрузополучателе  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(ПараметрыПечати.Грузополучатель, ПараметрыПечати.ДатаДокумента);
	
	АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если СведенияОПоставщике.ИНН=СведенияОГрузоотправителе.ИНН Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "КПП,", Ложь);
		АдресПоставщика=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ЮридическийАдрес,");
	КонецЕсли; //29.09.17
	Если ЗначениеЗаполнено(КПП) Тогда КПП="/"+КПП; КонецЕсли;
	ПараметрыПечати.Вставить("ИННКПППродавца",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
	ПараметрыПечати.Вставить("НаименованиеПродавца",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПродавца",АдресПоставщика);
	
	КПП = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если СведенияОПокупателе.ИНН=СведенияОГрузополучателе.ИНН Тогда
		КПП=ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "КПП,", Ложь);
	КонецЕсли; //29.09.17
	
	ПараметрыПечати.Вставить("НаименованиеПокупателя",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("АдресПокупателя", ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	Если ЗначениеЗаполнено(КПП) Тогда КПП = "/" + КПП; КонецЕсли;
	ПараметрыПечати.Вставить("ИННКПППокупателя",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
	ПараметрыПечати.Вставить("ПредставлениеОрганизации",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")+?(ПустаяСтрока(ПараметрыПечати.ИННКПППродавца), "" , ", ") + ПараметрыПечати.ИННКПППродавца);
	ПараметрыПечати.Вставить("ПредставлениеКонтрагента",ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")+?(ПустаяСтрока(ПараметрыПечати.ИННКПППокупателя), "" , ", ") + ПараметрыПечати.ИННКПППокупателя);
	
	СтруктураПоискаПоID=Новый Структура;
	СтруктураПоискаПоID.Вставить("ID","");

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",Неопределено);
	Для Каждого СтрокаТз ИЗ ПараметрыПечати.Позиции Цикл
		СтруктураПоиска.Номенклатура=СтрокаТз.Номенклатура;
		СтруктураПоискаПоID.ID=СтрокаТз.ID;
		МассивСтрок=ОригиналДокОснование[СтрокаТз.ТабличнаяЧасть].НайтиСтроки(СтруктураПоискаПоID);
		Если МассивСтрок.Количество()=0 Тогда
			МассивСтрок=ОригиналДокОснование[СтрокаТз.ТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
		КонецЕсли;	
		Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
			СтрокаТз.КоличествоДоИзменения=СтрокаТз.КоличествоДоИзменения+СтрокаМассива.Количество;
			СтрокаТз.СуммаНДСДоИзменения=СтрокаТз.СуммаНДСДоИзменения+СтрокаМассива.СуммаНДС;
			СтрокаТз.СтоимостьБезНДСДоИзменения=СтрокаТз.СтоимостьБезНДСДоИзменения+?(ОригиналДокОснование.СуммаВключаетНДС,СтрокаМассива.Сумма-СтрокаМассива.СуммаНДС,СтрокаМассива.Сумма);
			СтрокаТз.СтоимостьСНДСДоИзменения=СтрокаТз.СтоимостьСНДСДоИзменения+?(ОригиналДокОснование.СуммаВключаетНДС,СтрокаМассива.Сумма,СтрокаМассива.Сумма+СтрокаМассива.СуммаНДС);
			СтрокаТз.ЦенаДоИзменения=СтрокаМассива.Цена;
			Если НЕ СтрокаТз.КоличествоДоИзменения=0 Тогда
				СтрокаТз.ЦенаДоИзменения=?(ОригиналДокОснование.СуммаВключаетНДС,Окр(СтрокаТз.СтоимостьБезНДСДоИзменения/СтрокаТз.КоличествоДоИзменения,2),СтрокаМассива.Цена);
			КонецЕсли;
		КонецЦикла;	
		СтрокаТз.КоличествоПослеИзменения=СтрокаТз.Количество+СтрокаТз.КоличествоДоИзменения;
		СтрокаТз.СуммаНДСПослеИзменения=СтрокаТз.СуммаНДС+СтрокаТз.СуммаНДСДоИзменения;
		СтрокаТз.СтоимостьБезНДСПослеИзменения=СтрокаТз.СтоимостьБезНДС+СтрокаТз.СтоимостьБезНДСДоИзменения;
		СтрокаТз.СтоимостьСНДСПослеИзменения=СтрокаТз.СтоимостьСНДС+СтрокаТз.СтоимостьСНДСДоИзменения;
		СтрокаТз.ЦенаПослеИзменения=СтрокаТз.Цена;
		Если НЕ СтрокаТз.КоличествоПослеИзменения=0 Тогда
			СтрокаТз.ЦенаПослеИзменения=?(ПараметрыПечати.СуммаВключаетНДС,Окр(СтрокаТз.СтоимостьБезНДСПослеИзменения/СтрокаТз.КоличествоПослеИзменения,2),СтрокаТз.ЦенаПослеИзменения);
		КонецЕсли;	
		
		Если СтрокаТз.СуммаНДС<0 Тогда
			СтрокаТз.РазницаНДСУменьшение=-СтрокаТз.СуммаНДС;
		Иначе
			СтрокаТз.РазницаНДСУвеличение=СтрокаТз.СуммаНДС;
		КонецЕсли;	
		
		Если СтрокаТз.СтоимостьБезНДС<0 Тогда
			СтрокаТз.РазницаБезНДСУменьшение=-СтрокаТз.СтоимостьБезНДС;
		Иначе
			СтрокаТз.РазницаБезНДСУвеличение=СтрокаТз.СтоимостьБезНДС;
		КонецЕсли;	
		
		Если СтрокаТз.СтоимостьСНДС<0 Тогда
			СтрокаТз.РазницаСНДСУменьшение=-СтрокаТз.СтоимостьСНДС;
		Иначе
			СтрокаТз.РазницаСНДСУвеличение=СтрокаТз.СтоимостьСНДС;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтрокаТз.НоменклатураКодТНВЭД) ИЛИ СтрокаТз.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаТз.НоменклатураКодТНВЭД="--";
		КонецЕсли;
	КонецЦикла;
	ПараметрыПечати.Вставить("РазницаБезНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаБезНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаБезНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаБезНДСУвеличение"));
	ПараметрыПечати.Вставить("РазницаНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаНДСУвеличение"));
	ПараметрыПечати.Вставить("РазницаСНДСУменьшение",ПараметрыПечати.Позиции.Итог("РазницаСНДСУменьшение"));
	ПараметрыПечати.Вставить("РазницаСНДСУвеличение",ПараметрыПечати.Позиции.Итог("РазницаСНДСУвеличение"));


	Если СтруктураПараметров.Свойство("ПараметрыПечати") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("МодульПечати") Тогда
		стрТекстМодуля=СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ТекстМодуля;
		Если Не ПустаяСтрока(стрТекстМодуля) Тогда Выполнить(стрТекстМодуля); КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВыполняемыйМодуль") Тогда
		Если Не ПустаяСтрока(СтруктураПараметров.ВыполняемыйМодуль) Тогда
			Выполнить(СтруктураПараметров.ВыполняемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Отказ") И ПараметрыПечати.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент=Неопределено Тогда
		ТабДокумент=Новый ТабличныйДокумент;	
	КонецЕсли;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 13;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет = ИнициализацияМакета(СтруктураПараметров, "УниверсальныйКорректировочныйДокумент");
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьОснования");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	ОбластьМакетаИтого=Макет.ПолучитьОбласть("Итого");	
	ОбластьМакетаПодвал=Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвалНакладной=Макет.ПолучитьОбласть("ПодвалНакладной");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	Для Каждого Строчка Из ПараметрыПечати.Позиции Цикл
		НомерСтроки=НомерСтроки+1;
		ОбластьМакета=Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(Строчка);
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		
		Если СтруктураПараметров.Свойство("МодульПечати") Тогда
			Если СтруктураПараметров.МодульПечати.ПараметрыПечатнойФормы.ВключитьРазрывСтраницы Тогда
				СтрокаСПодвалом=Новый Массив;
				СтрокаСПодвалом.Добавить(ОбластьМакета);
				Если НомерСтроки = КоличествоСтрок Тогда
					// Если последняя строка, то должен поместится итог и подвал
					СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
				КонецЕсли;
				
				Если НЕ ПечатныеФормыСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
					Если КоличествоСтрок > 0 Тогда
						// Вывод разделителя и заголовка таблицы на новой странице
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, , ТабДокумент.ВысотаТаблицы, ).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакетаИтого.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ОбластьМакетаПодвалНакладной.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакетаПодвалНакладной);
	
	ТабДокумент.ВерхнийКолонтитул.Выводить=Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа           = "Лист [&НомерСтраницы]";
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева            = "Универсальный корректировочный документ №"+ПараметрыПечати.Номер+"от "+ПараметрыПечати.Дата;
	
	Возврат ТабДокумент;
КонецФункции	

Функция Печать(СтруктураПараметров, КоличествоЭкземпляров=1, НаПринтер=Ложь, ТабДокумент=Неопределено) Экспорт
	
	Если СтруктураПараметров.ИмяМакета="КорректировочныйСчетФактура" Тогда			
		ТабДокумент = Печать_КорректировочногоСчетаФактуры1137(СтруктураПараметров,ТабДокумент);
	ИначеЕсли СтруктураПараметров.ИмяМакета="УниверсальныйПередаточныйДокумент" Тогда
		ТабДокумент=Печать_УниверсальныйПередаточныйДокумент(СтруктураПараметров,ТабДокумент);
	ИначеЕсли СтруктураПараметров.ИмяМакета="УниверсальныйКорректировочныйДокумент" Тогда
		ТабДокумент=Печать_УниверсальныйКорректировочныйДокумент(СтруктураПараметров,ТабДокумент);
	ИначеЕсли СтруктураПараметров.ИмяМакета="СчетФактура" Тогда
		ТабДокумент=Печать_СчетаФактуры2012(СтруктураПараметров,ТабДокумент);
	КонецЕсли; 				
	
	Возврат ТабДокумент;
КонецФункции