Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

// Сравнивает дату счета-фактуры и документов оснований
Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю) Экспорт
	
	СписокДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	Если СписокДокументов.Количество()=0 Тогда Возврат Ложь; КонецЕсли; СообщениеПользователю="";

	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Дата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаСФМеньше,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаНеРавнаСФ
	|ИЗ
	|	Документ." + СписокДокументов[0].Метаданные().Имя + " КАК ДокументОснованиеСФ
	|ГДЕ
	|	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат Ложь; КонецЕсли;

	Результат=Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Програмный модуль

Процедура ВыполнитьМодуль(стрМодуль, СтруктураПараметров) Экспорт
	Выполнить(стрМодуль);
КонецПроцедуры

Процедура УстановитьКодВидаОперации()
	Если НЕ ПустаяСтрока(КодВидаОперации) Тогда Возврат; КонецЕсли; 
	КодВидаОперации="01";
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		КодВидаОперации="02";
	//ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	//	КодВидаОперации="03";
	КонецЕсли;	
КонецПроцедуры	

Функция ПроверитьВозможностьЗаписиСФ(Отказ, УдалятьЛишниеСтроки = Ложь) Экспорт

	СтрокаСообщения = "";
	//СтруктураОтбора = Новый Структура("ВидСчетаФактуры", ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс);
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры", Перечисления.НДСВидСчетаФактуры.НаАванс);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтавкиНДС"			, Авансы.ВыгрузитьКолонку("СтавкаНДС"));

		СуществующийСФ = Неопределено;
		ИсключитьСФ = Новый Массив;
		ИсключитьСФ.Добавить(Ссылка);
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		Пока СуществующийСФ <> Неопределено Цикл
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
					СтрокиКУдалению = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокиКУдалению);
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на аванс 
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;
				Сумма = Авансы.Итог("Сумма");
				СуммаДокумента = Сумма;
			КонецЕсли;
			Отказ = Отказ Или Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
			ИсключитьСФ.Добавить(СуществующийСФ);
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		КонецЦикла;
	Иначе
		СтрокаСообщенияНеНуженСчетФактура = "";
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			//Проверка наличия других счетов-фактур на основании документа
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","")+" «"+СуществующийСФ+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	Если Не ПустаяСтрока(СтрокаСообщенияНеНуженСчетФактура) Тогда
		СтрокаСообщения = СтрокаСообщения + СтрокаСообщенияНеНуженСчетФактура;
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции
 
// Процедура для определения параметров счета-фактуры на аванс
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		Возврат; // Основание не выбрано, параметры не определяем
	КонецЕсли; 
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.СтавкаНДС,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Дата,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Контрагент,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	СУММА(КомиссияОтчетПродажиКомиссионераДенежныеСредства.Сумма + ВЫБОР
		|			КОГДА КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
		|				ТОГДА 0
		|			ИНАЧЕ КомиссияОтчетПродажиКомиссионераДенежныеСредства.СуммаНДС
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(КомиссияОтчетПродажиКомиссионераДенежныеСредства.СуммаНДС) КАК СуммаНДС,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	Документ.КомиссияОтчетПродажиКомиссионера.ДенежныеСредства КАК КомиссияОтчетПродажиКомиссионераДенежныеСредства
		|ГДЕ
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка = &ДокументОснование
		|	И КомиссияОтчетПродажиКомиссионераДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
		|
		|СГРУППИРОВАТЬ ПО
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.СтавкаНДС,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Дата,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Контрагент,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КурсВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КратностьВзаиморасчетов
		|";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					Продолжить; // НДС с авансов под экспортные поставки не начисляется
				ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					Продолжить; // НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
				КонецЕсли;
				
				Контрагент = Выборка.Контрагент;
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				СтавкаНДС			= ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);;
				
				Сумма 			= Выборка.Сумма;
				СуммаНДС 		= Выборка.СуммаНДС;
				СуммаДокумента 	= Сумма;
				
				ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
				
				СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], ?(Год(Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118));
				ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(Выборка.Сумма, Выборка.СуммаНДС, СтавкаНДС, Неопределено);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);
				
				ОшибкаПриЗаполнении = Ложь;
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;

	Иначе

		Запрос=Новый Запрос;		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Покупатель КАК Контрагент,
		|	ИсточникДанных.ДоговорКонтрагента,
		|	ИсточникДанных.ТипДоговораКонтрагента,
		|	-1 * ИсточникДанных.СуммаОборот КАК СуммаАванса
		|ИЗ
		|	РегистрНакопления.НДСРасчетыСПокупателями.Обороты(,,Регистратор, Документ = &ДокументОснование) КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Регистратор = &ДокументОснование И ИсточникДанных.СуммаОборот < 0
		|";
		Результат = Запрос.Выполнить();

		ДокументЗаполнен = Ложь;
		Если Не Результат.Пустой() Тогда
			
			ДокАванса = ДокументыОснования[0].ДокументОснование;
			ДокАвансаДата = ?(ДокАванса.Метаданные().Реквизиты.Найти("ДатаОплаты") <> Неопределено И ЗначениеЗаполнено(ДокАванса.ДатаОплаты),
								ДокАванса.ДатаОплаты, ДокАванса.Дата);
								
			Выборка = Результат.Выбрать();			
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Контрагент = Выборка.Контрагент;
				//ВалютаДокумента = ДополнительныеСвойства.ВалютаБухУчета;	
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
				
				Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ?(Год(Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118);
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
				Иначе
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ?(Год(Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118);
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
				КонецЕсли;
					
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма");

				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 

				ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
				
				Сумма = 0;
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						Продолжить; // НДС с авансов под экспортные поставки не начисляется
					ИначеЕсли СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						Продолжить; // НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					КонецЕсли;
					
					Контрагент = Выборка.Контрагент;
					ДоговорКонтрагента = Выборка.ДоговорКонтрагента;

					СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], ?(Год(Дата)>2018,Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС18_118));
					ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
												УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНалоговСервер.СтавкаНДС(СтавкаНДС)), 
												СтавкаНДС,
												СтрокаПоСтавке.СчетНаОплату);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);							
					ОшибкаПриЗаполнении = Ложь;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				Сумма = Авансы.Итог("Сумма");
				СуммаНДС = Авансы.Итог("СуммаНДС");
		
				СуммаДокумента = Сумма;
		
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
					Прервать;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(СчетФактураНаАванс) Экспорт
	
	СписокТипов=Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
	
	Если СчетФактураНаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Иначе
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков")); //НДС
		СписокТипов=Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов=СписокТипов.Типы();
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ИсточникДанных) Экспорт
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда Возврат; КонецЕсли;
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда Возврат; КонецЕсли;
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ДокументОснование.ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров.Перепредъявление Тогда
			тчТовары=ДокументОснование.Товары;
			Если НЕ тчТовары.Количество()=0 Тогда
				Контрагент=тчТовары[0].Контрагент;
				ДоговорКонтрагента=тчТовары[0].ДоговорКонтрагента;
				Сумма=ДокументОснование.СуммаДокумента;
				СуммаНДС=ДокументОснование.СуммаНДС
			КонецЕсли; //01.07.2016
			Возврат; 
		КонецЕсли;
	КонецЕсли;
	ПараметрыСФ = Неопределено;

	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, ДополнительныеСвойства.ВалютаБухУчета, ПараметрыСФ);

	Если не ПараметрыСФ.Организация = Неопределено и не ПараметрыСФ.Организация = Организация Тогда
		Организация = ПараметрыСФ.Организация;
	КонецЕсли;

	Если не ПараметрыСФ.Контрагент = Null И не ПараметрыСФ.Контрагент = Неопределено и не ПараметрыСФ.Контрагент = Контрагент Тогда
		Если ПараметрыСФ.контрагент.ГоловнойКонтрагент = ПараметрыСФ.Контрагент тогда
			Контрагент = ПараметрыСФ.Контрагент;
		ИначеЕсли ПараметрыСФ.контрагент.ГоловнойКонтрагент <> ПараметрыСФ.Контрагент тогда
			Контрагент = ПараметрыСФ.контрагент.ГоловнойКонтрагент;
		КонецЕсли;
	КонецЕсли;

	Если не ПараметрыСФ.Договор = Null И не ПараметрыСФ.Договор = Неопределено и не ПараметрыСФ.Договор = ДоговорКонтрагента Тогда
		Если ПараметрыСФ.контрагент.ГоловнойКонтрагент = ПараметрыСФ.Контрагент тогда
			ДоговорКонтрагента = ПараметрыСФ.Договор;
		ИначеЕсли ПараметрыСФ.контрагент.ГоловнойКонтрагент <> ПараметрыСФ.Контрагент тогда
			ДоговорКонтрагента = ПараметрыСФ.Договор.ДоговорГоловногоКонтрагента;
		КонецЕсли;
	КонецЕсли;

	Если Не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента = ПараметрыСФ.СуммаДокумента;
	КонецЕсли;
	Если Не СуммаНДС = ПараметрыСФ.СуммаНДС Тогда
		СуммаНДС = ПараметрыСФ.СуммаНДС;
	КонецЕсли;

	Если не ПараметрыСФ.ВалютаДокумента = Неопределено и не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента Тогда
		ВалютаДокумента = ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;

	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
	Если ТипЗнч(ИсточникДанных)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(ИсточникДанных.Подвид)="Корректировка" Тогда
			Если Не ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный;
			КонецЕсли; 
			Если НЕ НомерИсправления=1 Тогда НомерИсправления=1; КонецЕсли; 
			
			текДокументОснованиеКорректировка=УчетНДС.НайтиПодчиненныйДокумент(ИсточникДанных.Сделка, "СчетФактураВыданный");
			Если НЕ ДокументОснованиеКорректировка=текДокументОснованиеКорректировка Тогда  ДокументОснованиеКорректировка=текДокументОснованиеКорректировка; КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоСчетуНаОплату(Сумма, СуммаНДС, СтавкаНДС, СчетНаОплату) Экспорт
	ТаблицаРезультата=Авансы.ВыгрузитьКолонки();	
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда
		СоответствиеСтавок=Новый Соответствие;
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
		
		СтавкиНДС=Новый СписокЗначений;
		СтавкиНДС.Добавить(СтавкаНДС);
		СтавкиНДС.Добавить(СоответствиеСтавок[СтавкаНДС]);

		Запрос=Новый Запрос;		
		Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);		
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		Запрос.Текст="ВЫБРАТЬ
		             |	ИсточникДанныхТовары.Номенклатура КАК Номенклатура,
		             |	"""" КАК Содержание,
		             |	ИсточникДанныхТовары.СтавкаНДС КАК СтавкаНДС,
		             |	ИсточникДанныхТовары.СуммаНДС КАК СуммаНДС,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхТовары.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхТовары.Сумма
		             |		ИНАЧЕ ИсточникДанныхТовары.Сумма + ИсточникДанныхТовары.СуммаНДС
		             |	КОНЕЦ КАК Сумма,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхТовары.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхТовары.Сумма - ИсточникДанныхТовары.СуммаНДС
		             |		ИНАЧЕ ИсточникДанныхТовары.Сумма
		             |	КОНЕЦ КАК СуммаБезНДС,
		             |	ИсточникДанныхТовары.НомерСтроки КАК НомерСтроки,
		             |	ИсточникДанныхТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		             |	1 КАК ID
		             |ИЗ
		             |	Документ.ЗаказПокупателя.Товары КАК ИсточникДанныхТовары
		             |ГДЕ
		             |	ИсточникДанныхТовары.Ссылка = &СчетНаОплату
		             |	И ИсточникДанныхТовары.СтавкаНДС В(&СтавкиНДС)
		             |
		             |ОБЪЕДИНИТЬ ВСЕ
		             |
		             |ВЫБРАТЬ
		             |	ИсточникДанныхУслуги.Номенклатура,
		             |	ИсточникДанныхУслуги.Содержание,
		             |	ИсточникДанныхУслуги.СтавкаНДС,
		             |	ИсточникДанныхУслуги.СуммаНДС,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхУслуги.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхУслуги.Сумма
		             |		ИНАЧЕ ИсточникДанныхУслуги.Сумма + ИсточникДанныхУслуги.СуммаНДС
		             |	КОНЕЦ,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхУслуги.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхУслуги.Сумма - ИсточникДанныхУслуги.СуммаНДС
		             |		ИНАЧЕ ИсточникДанныхУслуги.Сумма
		             |	КОНЕЦ,
		             |	ИсточникДанныхУслуги.НомерСтроки,
		             |	ИсточникДанныхУслуги.Ссылка.ВалютаДокумента,
		             |	2
		             |ИЗ
		             |	Документ.ЗаказПокупателя.Услуги КАК ИсточникДанныхУслуги
		             |ГДЕ
		             |	ИсточникДанныхУслуги.Ссылка = &СчетНаОплату
		             |	И ИсточникДанныхУслуги.СтавкаНДС В(&СтавкиНДС)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ID,
		             |	НомерСтроки";
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() <> 0 Тогда
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
			
			Результат.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			Результат.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
			
			МассивРаспределения = Новый Массив;
			
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				
				Если ДокументыОснования.Количество() = 0
					Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Дата);
				Иначе
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, ДокументыОснования[0].ДокументОснование.Дата);
				КонецЕсли;
				
				Если СтрокаРезультата.ВалютаДокумента <> ДополнительныеСвойства.ВалютаБухУчета Тогда
					СтрокаРезультата.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																						СтрокаРезультата.ВалютаДокумента, ДополнительныеСвойства.ВалютаБухУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаБезНДС, 
																						СтрокаРезультата.ВалютаДокумента, ДополнительныеСвойства.ВалютаБухУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаНДС, 
																						СтрокаРезультата.ВалютаДокумента, ДополнительныеСвойства.ВалютаБухУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
				КонецЕсли;
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
				
				РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
				
				СтрокаРезультата.СуммаНДС = Мин(СтрокаРезультата.СуммаНДС, РезультатРаспределения[1]);
				СтрокаРезультата.СуммаБезНДС = Мин(СтрокаРезультата.СуммаБезНДС, РезультатРаспределения[0]); 
				СтрокаРезультата.Сумма = СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.СуммаНДС; 
				
				ДобавитьСтрокуАвансы(ТаблицаРезультата, СтрокаРезультата.Номенклатура, СтрокаРезультата.Сумма, СтрокаРезультата.СуммаНДС, СтавкаНДС);
				Сумма = Сумма - СтрокаРезультата.Сумма;
				СуммаНДС = СуммаНДС - СтрокаРезультата.СуммаНДС;
				
			КонецЦикла;	
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, Сумма, СуммаНДС, СтавкаНДС);
		КонецЕсли;
		
	Иначе
		ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, Сумма, СуммаНДС, СтавкаНДС);
	КонецЕсли;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС"); 
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Сумма, СуммаНДС, СтавкаНДС)
	НоваяСтрока=ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И НоваяСтрока.Номенклатура.Услуга Тогда
		НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.Наименование;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;	
КонецПроцедуры

Функция ПолучитьСписовТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка) Экспорт
	
	СписокТипов=Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	
	Если ВидСчетаФактурыСписка = Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Иначе
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));
		//*** 2020 СписокТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
		//*** 2020 СписокТипов.Добавить(Тип("ДокументСсылка.ВнеоборотныеАктивыМодернизация"));

		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов = СписокТипов.Типы();
	КонецЕсли;
	
	СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип);//.Типы();
	СписокТипов = СписокТипов.Типы();
	
	Возврат СписокТипов;
	
КонецФункции

Функция ПодготовитьСтруктуруШапкиДокумента() Экспорт
	// Сформируем структуру реквизитов шапки документа
	СтруктураШД = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШД=УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШД, ДополнительныеСвойства.ВалютаБухУчета);

	Возврат СтруктураШД;
КонецФункции

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      , "ДокументОснование");
	СтруктураПолей.Вставить("Организация"		     , "ДокументОснование.Организация");
	СтруктураПолей.Вставить("Контрагент"             , "ДокументОснование.Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"     , "ДокументОснование.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаДокумента"        , "ДокументОснование.ВалютаДокумента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"     , "ДокументОснование.КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов", "ДокументОснование.КратностьВзаиморасчетов");
	
	РезультатЗапросаПоДокументамОснованиям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШД, Отказ, Заголовок)
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		ДокОснование=СтрокаТЧ.ДокументОснование;
		Если ЗначениеЗаполнено(ДокОснование) И НЕ ДокОснование.Проведен И ТипЗнч(ДокОснование)<>Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			Сообщить("Счет-фактуру можно вводить только на основании проведенного документа (строка № "+СтрокаТЧ.НомерСтроки+")");
			Отказ=Истина; Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоДокументамОснованиям, Отказ, Заголовок)
    Если Отказ Тогда Возврат; КонецЕсли;
	Если СтруктураШД.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда Возврат; КонецЕсли;

	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		// Формирование проводки по начислению НДС с авансов в бюджет
		ДвиженияПоРегистрамБухгалтерии(СтруктураШД, Заголовок, Отказ);

		// Отражение начисления НДС с авансов для последующего отражения в книге продаж
		ДвиженияПоРегиструНДСНачисленный(СтруктураШД, Отказ, Заголовок);

		// Отражение НДС с авансов для последующего предъявления НДС к вычету при зачете аванса,
		// отражения вычета в книге покупок
		ДвиженияПоРегиструНДСсАвансов(СтруктураШД, Отказ, Заголовок);
		
	ИначеЕсли ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда	
		ДвиженияПоРегистрамБухгалтерии(СтруктураШД, Заголовок, Отказ);
		ДвиженияПоРегиструНДСНачисленный(СтруктураШД, Отказ, Заголовок);
	КонецЕсли;
	ДвижениеПоРегистру_ЖурналРегистрацииСчетовФактур(СтруктураШД, Новый Структура, Отказ);

КонецПроцедуры 

Процедура ДвижениеПоРегистру_ЖурналРегистрацииСчетовФактур(СтруктураШД, СтруктураТД, Отказ)
	
	НаборЗаписейСФ=РегистрыСведений.ЖурналРегистрацииСчетовФактур.СоздатьНаборЗаписей();
	НаборЗаписейСФ.Отбор.СчетФактура.Установить(Ссылка);
	НаборЗаписейСФ.Прочитать();
    НаборЗаписейСФ.Очистить();
    Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда Возврат; КонецЕсли;
	
	/// Реализация комитенского товара
	Если ТипЗнч(СтруктураШД.ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		НаборЗаписей=РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураШД.ДокументОснование);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()=0 Тогда Возврат; КонецЕсли;
		НоваяСтрока=НаборЗаписейСФ.Добавить();
		НоваяСтрока.Комитент=НаборЗаписей[0].ДоговорКонтрагента.Владелец;
		СчетФактураКомитента=УчетНДС.НайтиПодчиненныйСчетФактуру(НаборЗаписей[0].ДокументПоставки,"СчетФактураПолученный");
		Если СчетФактураКомитента=Неопределено Тогда
			СчетФактураКомитента=НаборЗаписей[0].ДокументПоставки;
		КонецЕсли;
		НоваяСтрока.ДатаСчетаФактурыКомитента=СчетФактураКомитента.Дата;
		НоваяСтрока.НомерСчетаФактурыКомитента=СчетФактураКомитента.Номер;
		НоваяСтрока.СуммаДокумента=СтруктураШД.СуммаДокумента;
		НоваяСтрока.СуммаНДС=СтруктураШД.СуммаНДС;
		НоваяСтрока.СчетФактура=Ссылка;
		НоваяСтрока.ЧастьЖурнала="ВыставленныеСчетаФактуры";
		НоваяСтрока.Организация=Организация;
		НаборЗаписейСФ.Записать();
	КонецЕсли;	
	
	/// Реализация перепредъявление
	Если ТипЗнч(СтруктураШД.ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если НЕ СтруктураШД.ДокументОснование.ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров.Перепредъявление Тогда Возврат; КонецЕсли;
		НоваяСтрока=НаборЗаписейСФ.Добавить();
		НоваяСтрока.Комитент=СтруктураШД.ДокументОснование.Контрагент;
		СчетФактураКомитента=УчетНДС.НайтиПодчиненныйСчетФактуру(СтруктураШД.ДокументОснование,"СчетФактураПолученный");
		Если СчетФактураКомитента=Неопределено Тогда
			СчетФактураКомитента=СтруктураШД.ДокументОснование;
		КонецЕсли;
		НоваяСтрока.ДатаСчетаФактурыКомитента=СчетФактураКомитента.Дата;
		НоваяСтрока.НомерСчетаФактурыКомитента=СчетФактураКомитента.Номер;
		НоваяСтрока.СуммаДокумента=СтруктураШД.СуммаДокумента;
		НоваяСтрока.СуммаНДС=СтруктураШД.СуммаНДС;
		НоваяСтрока.СчетФактура=Ссылка;
		НоваяСтрока.ЧастьЖурнала="ВыставленныеСчетаФактуры";
		НоваяСтрока.Организация=Организация;
		НаборЗаписейСФ.Записать();
	КонецЕсли;	
	
	/// Покупка агенские услуги
	Если ТипЗнч(СтруктураШД.ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда
		Если СтруктураШД.ДокументОснование.СуммаВознаграждения=СтруктураШД.СуммаДокумента Тогда Возврат; КонецЕсли;
		НоваяСтрока=НаборЗаписейСФ.Добавить();
		НоваяСтрока.Комитент=СтруктураШД.ДокументОснование.Поставщики[0].Поставщик;
		НоваяСтрока.ДатаСчетаФактурыКомитента=СтруктураШД.ДокументОснование.Поставщики[0].ДатаСФ;
		НоваяСтрока.НомерСчетаФактурыКомитента=СтруктураШД.ДокументОснование.Поставщики[0].НомерСчетаФактуры;
		НоваяСтрока.СуммаДокумента=СтруктураШД.СуммаДокумента;
		НоваяСтрока.СуммаНДС=СтруктураШД.СуммаНДС;
		НоваяСтрока.СчетФактура=Ссылка;
		НоваяСтрока.ЧастьЖурнала="ВыставленныеСчетаФактуры";
		НоваяСтрока.Организация=Организация;
		НаборЗаписейСФ.Записать();
	КонецЕсли;	
	
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда 
		Если ДоговорКонтрагента.ВидАгентскогоДоговора=Перечисления.ВидыАгентскихДоговоров.Нерезидент тогда
			/// Налоговый агент
			НоваяСтрока=НаборЗаписейСФ.Добавить();
			НоваяСтрока.СуммаДокумента=СтруктураШД.СуммаДокумента;
			НоваяСтрока.СуммаНДС=СтруктураШД.СуммаНДС;
			НоваяСтрока.СчетФактура=Ссылка;
			НоваяСтрока.ЧастьЖурнала="ВыставленныеСчетаФактуры";
			НоваяСтрока.Организация=Организация;
			НаборЗаписейСФ.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДвиженияПоРегиструНДСНачисленный(СтруктураШД, Отказ, Заголовок) Экспорт
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = Движения.НДСНачисленный.ВыгрузитьКолонки();
		
	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Организация = 	СтруктураШД.Организация;
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда	
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		
		СтрокаДвижений.Покупатель = 	СтруктураШД.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента = 	СтруктураШД.ДоговорКонтрагента;
		
		СтрокаДвижений.СчетФактура =    СтруктураШД.ДокументОснование;
		
		СтрокаДвижений.Событие = 		Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		СтрокаДвижений.СтавкаНДС = 		СтруктураШД.СтавкаНДС;
		
		СтрокаДвижений.СуммаБезНДС = 	Авансы.Итог("Сумма") - Авансы.Итог("СуммаНДС");
		СтрокаДвижений.НДС = 			Авансы.Итог("СуммаНДС");

		//СтрокаДвижений.СуммаБезНДС = 	СтруктураШД.Сумма - СтруктураШД.СуммаНДС;
		//СтрокаДвижений.НДС = 			СтруктураШД.СуммаНДС;
		СтрокаДвижений.ВидНачисления = 	Перечисления.НДСВидНачисления.НДСсАвансов;
		
	ИначеЕсли ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда	
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;

		Если СтруктураШД.ДоговорКонтрагента.ВидАгентскогоДоговора=Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;
		
		СтрокаДвижений.Покупатель = 	СтруктураШД.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента = 	СтруктураШД.ДоговорКонтрагента;
		
		СтрокаДвижений.СчетФактура =    СтруктураШД.ДокументОснование;
		
		СтрокаДвижений.Событие = 		Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		СтрокаДвижений.СтавкаНДС = 		СтруктураШД.СтавкаНДС;
		
		СтрокаДвижений.СуммаБезНДС = 	СтруктураШД.Сумма - СтруктураШД.СуммаНДС;
		СтрокаДвижений.НДС = 			СтруктураШД.СуммаНДС;
		СтрокаДвижений.ВидНачисления = 	Перечисления.НДСВидНачисления.НДСНачисленКУплате;
	КонецЕсли;
	
	
	Движения.НДСНачисленный.мПериод =   СтруктураШД.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСНачисленный.ВыполнитьПриход();
	
КонецПроцедуры

Процедура ДвиженияПоРегиструНДСсАвансов(СтруктураШД, Отказ, Заголовок) Экспорт

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = Движения.НДСсАвансов.ВыгрузитьКолонки();
	
	Если Авансы.Количество()=1 Тогда /// nik
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		СтрокаДвижений.Организация = 	 СтруктураШД.Организация;
		
		СтрокаДвижений.Покупатель = 		 СтруктураШД.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента =  СтруктураШД.ДоговорКонтрагента;
		
		СтрокаДвижений.СчетФактура = СтруктураШД.ДокументОснование;
		
		СтрокаДвижений.СтавкаНДС = 		СтруктураШД.СтавкаНДС;
		
		СтрокаДвижений.СуммаБезНДС = 	Авансы.Итог("Сумма") - Авансы.Итог("СуммаНДС");
		СтрокаДвижений.НДС = 			Авансы.Итог("СуммаНДС");

		//СтрокаДвижений.СуммаБезНДС = 	СтруктураШД.Сумма - СтруктураШД.СуммаНДС;
		//СтрокаДвижений.НДС = 			СтруктураШД.СуммаНДС;
		СтрокаДвижений.ВидЦенности= 	Перечисления.ВидыЦенностей.АвансыПолученные;
		
		СтрокаДвижений.ВалютнаяСуммаСНДС = СтруктураШД.СуммаДокумента;
		СтрокаДвижений.ВалютаАванса      = СтруктураШД.ВалютаДокумента;
		
		Движения.НДСсАвансов.мПериод =   СтруктураШД.Дата;
	Иначе
		Для Каждого СтрокаДок ИЗ Авансы Цикл  /// Лаборатория 33
			
			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			СтрокаДвижений.Организация = 	 СтруктураШД.Организация;
			
			СтрокаДвижений.Покупатель = 		 СтруктураШД.Контрагент;
			СтрокаДвижений.ДоговорКонтрагента =  СтруктураШД.ДоговорКонтрагента;
			
			СтрокаДвижений.СчетФактура = ?(ЗначениеЗаполнено(СтрокаДок.ДокументОснование),СтрокаДок.ДокументОснование,СтруктураШД.ДокументОснование);
			
			СтрокаДвижений.СтавкаНДС = 		СтрокаДок.СтавкаНДС;
			
			СтрокаДвижений.СуммаБезНДС = 	СтрокаДок.Сумма - СтрокаДок.СуммаНДС;
			СтрокаДвижений.НДС = 			СтрокаДок.СуммаНДС;
			СтрокаДвижений.ВидЦенности= 	Перечисления.ВидыЦенностей.АвансыПолученные;
			
			СтрокаДвижений.ВалютнаяСуммаСНДС = СтрокаДок.Сумма ;
			СтрокаДвижений.ВалютаАванса      = СтруктураШД.ВалютаДокумента;
			
			Движения.НДСсАвансов.мПериод =   СтруктураШД.Дата;
		КонецЦикла;
	КонецЕсли;
	
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений;
	Движения.НДСсАвансов.ВыполнитьПриход();
	
КонецПроцедуры

Функция ДвиженияПоРегистрамБухгалтерии(СтруктураШД=Неопределено, Заголовок=Неопределено, Отказ=Ложь) Экспорт
	Если СуммаНДС=0 Тогда Возврат Истина; КонецЕсли; 

	Если СтруктураШД=Неопределено Тогда
		СтруктураШД=ПодготовитьСтруктуруШапкиДокумента();
	КонецЕсли;
	Если Заголовок=Неопределено Тогда
		Заголовок=ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	КонецЕсли;
	
	// Заполним характеристики проводок
	Проводка=Движения.Хозрасчетный.Добавить();
	Проводка.Период    = СтруктураШД.Дата;
	Проводка.Активность = Истина;
	Проводка.Организация = СтруктураШД.Организация;
	
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; //76.АВ
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШД.Контрагент);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтруктураШД.ДокументОснование);
		Проводка.Содержание = "НДС по предоплате";
	    Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; //68.01
    	БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

	ИначеЕсли ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НалоговыйАгент Тогда
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; //76.НА
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШД.Контрагент);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШД.ДоговорКонтрагента);
		Проводка.Содержание = "НДС по налоговым агентам";
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; //68.32
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШД.Контрагент);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШД.ДоговорКонтрагента);
	КонецЕсли;
		
	//Проводка.Сумма = СтруктураШД.СуммаНДС;
	Проводка.Сумма = Авансы.Итог("СуммаНДС");
	
	Если Проводка.СчетДт.НалоговыйУчет Тогда
		Проводка.СуммаНУДт=Проводка.Сумма;
	КонецЕсли;
	Если Проводка.СчетКт.НалоговыйУчет Тогда
		Проводка.СуммаНУКт=Проводка.Сумма;
	КонецЕсли;
	
	Если ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		Док=?(Авансы[0].ДокументОснование=Неопределено, ДокументОснование, Авансы[0].ДокументОснование);
		мдДокумент=Док.Метаданные();
		Для Каждого мдТабличнаяЧасть Из мдДокумент.ТабличныеЧасти Цикл
			Если мдТабличнаяЧасть.Реквизиты.Найти("ТОП")=Неопределено Тогда Продолжить; КонецЕсли;
			тзДанные=Док[мдТабличнаяЧасть.Имя].Выгрузить();
			Для Каждого СтрокаКоллекции Из тзДанные Цикл
				Для каждого СтрокаПроводки Из СтрокаКоллекции.ТОП.ПроводкиБУ Цикл
					Если СтрокаПроводки.СчетКредит.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						СчетУчета=СтрокаПроводки.СчетКредит; Прервать;
					КонецЕсли;
					Если СтрокаПроводки.СчетДебет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						СчетУчета=СтрокаПроводки.СчетДебет; Прервать;
					КонецЕсли;			
				КонецЦикла;		
			КонецЦикла;
		КонецЦикла;	
		Если СчетУчета=Неопределено Тогда Сообщить("Не сформирована проводка по авансам проверьте ТОП у документа основания"); Возврат Истина; КонецЕсли;
		
		Проводка=Движения.Хозрасчетный.Добавить();
		Проводка.Период = СтруктураШД.Дата;
		Проводка.Активность=Истина;
		Проводка.Организация=СтруктураШД.Организация;
		
		Проводка.СчетДт = СчетУчета; //62.01
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШД.Контрагент);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШД.ДоговорКонтрагента);
		Проводка.Содержание = "Сумма аванса";
		
		Проводка.СчетКт=ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным; //62.02
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШД.Контрагент);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШД.ДоговорКонтрагента);
		//Проводка.Сумма=СтруктураШД.СуммаДокумента;
		Проводка.Сумма = Авансы.Итог("Сумма");

		Если Проводка.СчетДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт=Проводка.Сумма;
		КонецЕсли;
		Если Проводка.СчетКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт=Проводка.Сумма;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаЗаполнения(Основание) Экспорт
	Если Основание=Неопределено Или ТипЗнч(Основание)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Дата = Основание.Дата;
	Организация = Основание.Организация;
	
	ДокументыОснования.Добавить().ДокументОснование = Основание.Ссылка;
	ДокументОснование = Основание.Ссылка;
	
	СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Истина);
	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		НаАванс = Истина;
		
		ДатаНомерДокументовОплаты.Очистить();
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
			НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначенияСервер.НомерНаПечать(Основание);
			ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
		Иначе
			НомерПлатежноРасчетногоДокумента = "";
			ДатаПлатежноРасчетногоДокумента =  Неопределено;
		КонецЕсли;
		
		СтрокаПРД=ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		
		мДокументЗаполнен = Ложь;
		ОпределениеПараметровСчетаФактурыНаАванс(мДокументЗаполнен);
		ВалютаДокумента = ДополнительныеСвойства.ВалютаБухУчета;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;	
		Сумма = Авансы.Итог("Сумма");
		СуммаДокумента = Авансы.Итог("Сумма");
		СуммаНДС = Авансы.Итог("СуммаНДС");

		Если Авансы.Количество()>0 Тогда
			Если Не ЗначениеЗаполнено(Авансы[0].ДокументОснование) Тогда
				Если ДокументыОснования.Количество()>0 Тогда
					Авансы[0].ДокументОснование=ДокументыОснования[0].ДокументОснование;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; //28.02.11
		
		Если не мДокументЗаполнен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
		КонецЕсли; 
	Иначе
		ОпределениеПараметровСчетаФактуры(Основание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ОбновитьПараметры = Истина)
    Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;

	Если НЕ СформированПриВводеНачальныхОстатковНДС И мОбновлятьРеквизитыПриЗаписи = ИСТИНА Тогда
		ОпределениеПараметровСчетаФактуры(Ссылка);
	КонецЕсли;

	УстановитьКодВидаОперации();
	
	Если НЕ ЭтоНовый() Тогда
		НаборЗаписейСФ=РегистрыСведений.ЖурналРегистрацииСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписейСФ.Отбор.СчетФактура.Установить(Ссылка);
		НаборЗаписейСФ.Прочитать();
   		НаборЗаписейСФ.Очистить();
		НаборЗаписейСФ.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УправлениеДокументамиСервер.ПередПроведением(Отказ, РежимПроведения, ЭтотОбъект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	
	Заголовок=ДополнительныеСвойства.Заголовок;
	
	СтруктураШД=ПодготовитьСтруктуруШапкиДокумента();
	Если СформированПриВводеНачальныхОстатковНДС Тогда Возврат; КонецЕсли;
	
	ТаблицаПоДокументамОснованиям=Неопределено; ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШД, Отказ, Заголовок);
	
	ДвиженияПоРегистрам(СтруктураШД, ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);
мОбновлятьРеквизитыПриЗаписи=ИСТИНА;