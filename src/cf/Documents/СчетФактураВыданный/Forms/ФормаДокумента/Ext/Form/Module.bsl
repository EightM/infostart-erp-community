&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.Сумма.Видимость=Ложь;
	Элементы.СуммаНДС.Видимость=Ложь;
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") ИЛИ ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда 
		Элементы.Сумма.Видимость=Истина;
		Элементы.СуммаНДС.Видимость=Истина;
	КонецЕсли;
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ВидОперации")=ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступленияТоваров.Перепредъявление") Тогда 
			Элементы.Сумма.Видимость=Истина;
			Элементы.СуммаНДС.Видимость=Истина;
		КонецЕсли;
	КонецЕсли;	
	Если Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаРеализацию") Тогда
		Элементы.ПанельОснование.ТекущаяСтраница=Элементы.ПанельОснование.ПодчиненныеЭлементы.НаРеализацию;
	ИначеЕсли Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаАванс") ИЛИ Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.Лизинг") ИЛИ Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НалоговыйАгент") Тогда
		Элементы.ПанельОснование.ТекущаяСтраница=Элементы.ПанельОснование.ПодчиненныеЭлементы.НаАванс;
	ИначеЕсли Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.Корректировочный") Тогда
		Элементы.ПанельОснование.ТекущаяСтраница=Элементы.ПанельОснование.ПодчиненныеЭлементы.Корректировка;
	КонецЕсли;
	Элементы.НомерИсправления.Видимость=Объект.Исправление;
	УказанДокументОснование = Объект.ДокументыОснования.Количество()>0 и ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование);
	СФНаАвансИлиСР = (Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаАванс"));
	//*** Элементы.СписокПРД.Видимость=НЕ СФНаАвансИлиСР;
	//Элементы.ДополнительныеПараметрыСчетаФактуры.ТекущаяСтраница=?(НЕ СФНаАвансИлиСР И СписокПРД, Элементы.ДополнительныеПараметрыСчетаФактуры.ПодчиненныеЭлементы.СписокПлатежноРасчетныхДокументов, Элементы.ДополнительныеПараметрыСчетаФактуры.ПодчиненныеЭлементы.ПараметрыПлатежноРасчетногоДокумента);
	Элементы.ДополнительныеПараметрыСчетаФактуры.ТекущаяСтраница=?(НЕ СФНаАвансИлиСР, Элементы.ДополнительныеПараметрыСчетаФактуры.ПодчиненныеЭлементы.СписокПлатежноРасчетныхДокументов, Элементы.ДополнительныеПараметрыСчетаФактуры.ПодчиненныеЭлементы.ПараметрыПлатежноРасчетногоДокумента);
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	Если Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаАванс") ИЛИ Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НалоговыйАгент") Тогда
		Объект.Сумма = Объект.Авансы.Итог("Сумма");
		Объект.СуммаНДС = Объект.Авансы.Итог("СуммаНДС");
	КонецЕсли;
	Если Объект.ВалютаДокумента <> МодульВалютногоУчета.ПолучитьВалюту("Бух") Тогда
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Объект.Сумма, МодульВалютногоУчета.ПолучитьВалюту("Бух"), Объект.ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс, 1, СтруктураКурсаВзаиморасчетов.Кратность);
	Иначе
		Объект.СуммаДокумента = Объект.Сумма;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаАвансПриИзменении(Элемент, ВыбранноеЗначение)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТипОснования = ТипЗнч(ВыбранноеЗначение);
		Если ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
			НоваяДатаПРД	= ВыбранноеЗначение.ДатаВходящегоДокумента;
			НовыйНомерПРД	= ВыбранноеЗначение.НомерВходящегоДокумента;
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			НоваяДатаПРД	= ВыбранноеЗначение.Дата;
			НовыйНомерПРД	= ОбщегоНазначенияСервер.НомерНаПечать(ВыбранноеЗначение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяДатаПРД) и не ПустаяСтрока(НовыйНомерПРД)
			и Объект.ДатаНомерДокументовОплаты.НайтиСтроки(Новый Структура("ДатаПлатежноРасчетногоДокумента,НомерПлатежноРасчетногоДокумента",НоваяДатаПРД,НовыйНомерПРД)) = Неопределено Тогда
			Если Объект.ДатаНомерДокументовОплаты.Количество()>0
				и (ЗначениеЗаполнено(Объект.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента) 
					или не ПустаяСтрока(Объект.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента)
				) Тогда
				НовыйПРД = Объект.ДатаНомерДокументовОплаты.Добавить();
			Иначе 
				НовыйПРД = Объект.ДатаНомерДокументовОплаты[0];
			КонецЕсли;
			НовыйПРД.ДатаПлатежноРасчетногоДокумента = НоваяДатаПРД;
			НовыйПРД.НомерПлатежноРасчетногоДокумента = НовыйНомерПРД;
			Элементы.ДатаНомерДокументовОплаты.ТекущаяСтрока = НовыйПРД;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеСчетаФактуры()
	Если Объект.Ссылка.Пустая() ИЛИ Объект.ДокументыОснования.Количество() = 0 Тогда Возврат; КонецЕсли;
	СообщениеПользователю = "";
	Если ПроверитьДатуСчетаФактуры(СообщениеПользователю) Тогда
		ОтветНаВопрос = Вопрос(СообщениеПользователю + Символы.ПС + "Изменить дату счета-фактуры на дату документа-основания?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			Объект.Дата = Объект.ДокументыОснования[0].ДокументОснование.Дата;
		КонецЕсли;
	Иначе
		Если СообщениеПользователю <> "" Тогда
			ПоказатьПредупреждение(, СообщениеПользователю+Символы.ПС+"Внесите изменения в счет-фактуру вручную");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю)
	
	СписокДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Объект.ДокументыОснования.Выгрузить(, "ДокументОснование").ВыгрузитьКолонку("ДокументОснование"), Истина);
	Если СписокДокументов.Количество()=0 Тогда Возврат Ложь; КонецЕсли; СообщениеПользователю="";

	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Объект.Дата);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаСФМеньше,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаНеРавнаСФ
	|ИЗ
	|	Документ." + СписокДокументов[0].Метаданные().Имя + " КАК ДокументОснованиеСФ
	|ГДЕ
	|	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат Ложь; КонецЕсли;

	Результат=Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьЗаписиСФ(Отказ, УдалятьЛишниеСтроки = Ложь)
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры", Перечисления.НДСВидСчетаФактуры.НаАванс);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	Если Объект.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("СтавкиНДС", Объект.Авансы.Выгрузить(, "СтавкаНДС").ВыгрузитьКолонку("СтавкаНДС"));

		СуществующийСФ = Неопределено;
		ИсключитьСФ = Новый Массив;
		ИсключитьСФ.Добавить(Объект.Ссылка);
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(Объект.ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		Пока СуществующийСФ <> Неопределено Цикл
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Объект.Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
					СтрокиКУдалению = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокиКУдалению);
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на аванс 
			|по договору «"+Объект.ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Объект.Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;
				Объект.Сумма = Объект.Авансы.Итог("Сумма");
				Объект.СуммаДокумента = Объект.Сумма;
			КонецЕсли;
			Отказ = Отказ Или Не (УдалятьЛишниеСтроки И Объект.Авансы.Количество() <> 0);
			ИсключитьСФ.Добавить(СуществующийСФ);
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(Объект.ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		КонецЦикла;
	Иначе
		СтрокаСообщенияНеНуженСчетФактура = "";
		Для каждого ТекущееОснование Из Объект.ДокументыОснования Цикл
			//Проверка наличия других счетов-фактур на основании документа
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Объект.Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(Объект.ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","")+" «"+СуществующийСФ+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	Если Не ПустаяСтрока(СтрокаСообщенияНеНуженСчетФактура) Тогда
		СтрокаСообщения = СтрокаСообщения + СтрокаСообщенияНеНуженСчетФактура;
	КонецЕсли;
	
	Возврат СтрокаСообщения;
КонецФункции
 
&НаСервере
Функция СписокТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка)
	СписокТипов=Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
	
	Если ВидСчетаФактурыСписка=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Иначе
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков")); //НДС
		СписокТипов=Новый ОписаниеТипов(Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов=СписокТипов.Типы();
	КонецЕсли;
	
	Возврат СписокТипов;
	//ОснованиеТип=Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип;
	//
	//СписокТипов=Новый Массив;
	//СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	//СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	//СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	//СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	//СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	//СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	//
	//Если ВидСчетаФактурыСписка=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
	//	СписокТипов.Добавить(Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера"));
	//	СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	//Иначе
	//	// Типы документов оплаты исключаются из состава доступных типом.
	//	// Дополним типами, не выбираемыми вручную
	//	СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));
	//	СписокТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
	//	СписокТипов.Добавить(Тип("ДокументСсылка.ВнеоборотныеАктивыМодернизация"));
	//	
	//	СписокТипов=Новый ОписаниеТипов(ОснованиеТип, ,СписокТипов);
	//	СписокТипов=СписокТипов.Типы();
	//КонецЕсли;
	//СписокТипов=Новый ОписаниеТипов(ОснованиеТип);
	//СписокТипов=СписокТипов.Типы();

	//Возврат СписокТипов;
КонецФункции

&НаСервере
Функция ТаблицаАвансовПоСчетуНаОплату(Сумма, СуммаНДС, СтавкаНДС, СчетНаОплату)
	ТаблицаРезультата=Объект.Авансы.Выгрузить();
	ТаблицаРезультата.Очистить();
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда
		СоответствиеСтавок=Новый Соответствие;
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
		
		СтавкиНДС=Новый СписокЗначений;
		СтавкиНДС.Добавить(СтавкаНДС);
		СтавкиНДС.Добавить(СоответствиеСтавок[СтавкаНДС]);

		Запрос=Новый Запрос;		
		Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);		
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		Запрос.Текст="ВЫБРАТЬ
		             |	ИсточникДанныхТовары.Номенклатура КАК Номенклатура,
		             |	"""" КАК Содержание,
		             |	ИсточникДанныхТовары.СтавкаНДС КАК СтавкаНДС,
		             |	ИсточникДанныхТовары.СуммаНДС КАК СуммаНДС,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхТовары.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхТовары.Сумма
		             |		ИНАЧЕ ИсточникДанныхТовары.Сумма + ИсточникДанныхТовары.СуммаНДС
		             |	КОНЕЦ КАК Сумма,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхТовары.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхТовары.Сумма - ИсточникДанныхТовары.СуммаНДС
		             |		ИНАЧЕ ИсточникДанныхТовары.Сумма
		             |	КОНЕЦ КАК СуммаБезНДС,
		             |	ИсточникДанныхТовары.НомерСтроки КАК НомерСтроки,
		             |	ИсточникДанныхТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		             |	1 КАК ID
		             |ИЗ
		             |	Документ.ЗаказПокупателя.Товары КАК ИсточникДанныхТовары
		             |ГДЕ
		             |	ИсточникДанныхТовары.Ссылка = &СчетНаОплату
		             |	И ИсточникДанныхТовары.СтавкаНДС В(&СтавкиНДС)
		             |
		             |ОБЪЕДИНИТЬ ВСЕ
		             |
		             |ВЫБРАТЬ
		             |	ИсточникДанныхУслуги.Номенклатура,
		             |	ИсточникДанныхУслуги.Содержание,
		             |	ИсточникДанныхУслуги.СтавкаНДС,
		             |	ИсточникДанныхУслуги.СуммаНДС,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхУслуги.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхУслуги.Сумма
		             |		ИНАЧЕ ИсточникДанныхУслуги.Сумма + ИсточникДанныхУслуги.СуммаНДС
		             |	КОНЕЦ,
		             |	ВЫБОР
		             |		КОГДА ИсточникДанныхУслуги.Ссылка.СуммаВключаетНДС
		             |			ТОГДА ИсточникДанныхУслуги.Сумма - ИсточникДанныхУслуги.СуммаНДС
		             |		ИНАЧЕ ИсточникДанныхУслуги.Сумма
		             |	КОНЕЦ,
		             |	ИсточникДанныхУслуги.НомерСтроки,
		             |	ИсточникДанныхУслуги.Ссылка.ВалютаДокумента,
		             |	2
		             |ИЗ
		             |	Документ.ЗаказПокупателя.Услуги КАК ИсточникДанныхУслуги
		             |ГДЕ
		             |	ИсточникДанныхУслуги.Ссылка = &СчетНаОплату
		             |	И ИсточникДанныхУслуги.СтавкаНДС В(&СтавкиНДС)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ID,
		             |	НомерСтроки";
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() <> 0 Тогда
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
			
			Результат.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			Результат.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
			
			МассивРаспределения = Новый Массив;
			
			ВалютаБух=МодульВалютногоУчета.ПолучитьВалюту("Бух");
			Для Каждого СтрокаРезультата Из Результат Цикл
				
				Если Объект.ДокументыОснования.Количество() = 0
					Или Не ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Объект.Дата);
				Иначе
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Объект.ДокументыОснования[0].ДокументОснование.Дата);
				КонецЕсли;
				
				Если СтрокаРезультата.ВалютаДокумента <> МодульВалютногоУчета.ПолучитьВалюту("Бух") Тогда
					СтрокаРезультата.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																						СтрокаРезультата.ВалютаДокумента, ВалютаБух,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаБезНДС, 
																						СтрокаРезультата.ВалютаДокумента, ВалютаБух,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаНДС, 
																						СтрокаРезультата.ВалютаДокумента, ВалютаБух,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
				КонецЕсли;
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
				
				РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
				
				СтрокаРезультата.СуммаНДС = Мин(СтрокаРезультата.СуммаНДС, РезультатРаспределения[1]);
				СтрокаРезультата.СуммаБезНДС = Мин(СтрокаРезультата.СуммаБезНДС, РезультатРаспределения[0]); 
				СтрокаРезультата.Сумма = СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.СуммаНДС; 
				
				ДобавитьСтрокуАвансы(ТаблицаРезультата, СтрокаРезультата.Номенклатура, СтрокаРезультата.Сумма, СтрокаРезультата.СуммаНДС, СтавкаНДС);
				Сумма = Сумма - СтрокаРезультата.Сумма;
				СуммаНДС = СуммаНДС - СтрокаРезультата.СуммаНДС;
				
			КонецЦикла;	
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			ДобавитьСтрокуАвансы(ТаблицаРезультата, Объект.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, Сумма, СуммаНДС, СтавкаНДС);
		КонецЕсли;
		
	Иначе
		ДобавитьСтрокуАвансы(ТаблицаРезультата, Объект.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, Сумма, СуммаНДС, СтавкаНДС);
	КонецЕсли;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС"); 
	
	Возврат ТаблицаРезультата;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Сумма, СуммаНДС, СтавкаНДС)
	НоваяСтрока=ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И НоваяСтрока.Номенклатура.Услуга Тогда
		НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.Наименование;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;	
КонецПроцедуры

&НаСервере
Процедура ОпределениеПараметровСчетаФактуры()
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда Возврат; КонецЕсли;
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда Возврат; КонецЕсли;
	Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если Объект.ДокументОснование.ВидОперации=Перечисления.ВидыОперацийПоступленияТоваров.Перепредъявление Тогда
			тчТовары=Объект.ДокументОснование.Товары;
			Если НЕ тчТовары.Количество()=0 Тогда
				Контрагент=тчТовары[0].Контрагент;
				ДоговорКонтрагента=тчТовары[0].ДоговорКонтрагента;
				Сумма=Объект.ДокументОснование.СуммаДокумента;
				СуммаНДС=Объект.ДокументОснование.СуммаНДС
			КонецЕсли; //01.07.2016
			Возврат; 
		КонецЕсли;
	КонецЕсли;
	ПараметрыСФ = Неопределено;

	УчетНалоговСервер.ПараметрыСчетаФактуры(Объект, ПараметрыСФ);

	Если не ПараметрыСФ.Организация = Неопределено и не ПараметрыСФ.Организация = Объект.Организация Тогда
		Объект.Организация = ПараметрыСФ.Организация;
	КонецЕсли;

	Если не ПараметрыСФ.Контрагент = Null И не ПараметрыСФ.Контрагент = Неопределено и не ПараметрыСФ.Контрагент = Объект.Контрагент Тогда
		Если ПараметрыСФ.контрагент.ГоловнойКонтрагент = ПараметрыСФ.Контрагент тогда
			Объект.Контрагент = ПараметрыСФ.Контрагент;
		ИначеЕсли ПараметрыСФ.контрагент.ГоловнойКонтрагент <> ПараметрыСФ.Контрагент тогда
			Объект.Контрагент = ПараметрыСФ.контрагент.ГоловнойКонтрагент;
		КонецЕсли;
	КонецЕсли;

	Если не ПараметрыСФ.Договор = Null И не ПараметрыСФ.Договор = Неопределено и не ПараметрыСФ.Договор = Объект.ДоговорКонтрагента Тогда
		Если ПараметрыСФ.контрагент.ГоловнойКонтрагент = ПараметрыСФ.Контрагент тогда
			Объект.ДоговорКонтрагента = ПараметрыСФ.Договор;
		ИначеЕсли ПараметрыСФ.контрагент.ГоловнойКонтрагент <> ПараметрыСФ.Контрагент тогда
			Объект.ДоговорКонтрагента = ПараметрыСФ.Договор.ДоговорГоловногоКонтрагента;
		КонецЕсли;
	КонецЕсли;

	Если Не Объект.СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		Объект.СуммаДокумента = ПараметрыСФ.СуммаДокумента;
	КонецЕсли;
	Если Не Объект.СуммаНДС = ПараметрыСФ.СуммаНДС Тогда
		Объект.СуммаНДС = ПараметрыСФ.СуммаНДС;
	КонецЕсли;

	Если не ПараметрыСФ.ВалютаДокумента = Неопределено и не Объект.ВалютаДокумента = ПараметрыСФ.ВалютаДокумента Тогда
		Объект.ВалютаДокумента = ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;

	Если Объект.ДокументыОснования.Количество() = 1 и не Объект.ДокументыОснования[0].ДокументОснование = Объект.ДокументОснование Тогда
		Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
	Если ТипЗнч(Объект.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Объект.Подвид)="Корректировка" Тогда
			Если Не Объект.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Объект.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный;
			КонецЕсли; 
			Если НЕ Объект.НомерИсправления=1 Тогда Объект.НомерИсправления=1; КонецЕсли; 
			
			текДокументОснованиеКорректировка=УчетНДС.НайтиПодчиненныйДокумент(Объект.Сделка, "СчетФактураВыданный");
			Если НЕ Объект.ДокументОснованиеКорректировка=текДокументОснованиеКорректировка Тогда  Объект.ДокументОснованиеКорректировка=текДокументОснованиеКорректировка; КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен)
	
	Если Объект.ДокументыОснования.Количество()=0 Или Не ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) тогда
		Возврат; // Основание не выбрано, параметры не определяем
	КонецЕсли; 
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
		
	Если ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.СтавкаНДС,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Дата,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Контрагент,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	СУММА(КомиссияОтчетПродажиКомиссионераДенежныеСредства.Сумма + ВЫБОР
		|			КОГДА КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
		|				ТОГДА 0
		|			ИНАЧЕ КомиссияОтчетПродажиКомиссионераДенежныеСредства.СуммаНДС
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(КомиссияОтчетПродажиКомиссионераДенежныеСредства.СуммаНДС) КАК СуммаНДС,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
		|ИЗ
		|	Документ.КомиссияОтчетПродажиКомиссионера.ДенежныеСредства КАК КомиссияОтчетПродажиКомиссионераДенежныеСредства
		|ГДЕ
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка = &ДокументОснование
		|	И КомиссияОтчетПродажиКомиссионераДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
		|
		|СГРУППИРОВАТЬ ПО
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.СтавкаНДС,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Дата,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.Контрагент,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КурсВзаиморасчетов,
		|	КомиссияОтчетПродажиКомиссионераДенежныеСредства.Ссылка.КратностьВзаиморасчетов
		|";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					Продолжить; // НДС с авансов под экспортные поставки не начисляется
				ИначеЕсли Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					Продолжить; // НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
				КонецЕсли;
				
				Объект.Контрагент = Выборка.Контрагент;
				Объект.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				
				Объект.Сумма 			= Выборка.Сумма;
				Объект.СуммаНДС 		= Выборка.СуммаНДС;
				Объект.СуммаДокумента 	= Объект.Сумма;
				
				Объект.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
				
				Объект.СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], ?(Год(Объект.Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118));
				ТаблицаАвансов = ТаблицаАвансовПоСчетуНаОплату(Выборка.Сумма, Выборка.СуммаНДС, Объект.СтавкаНДС, Неопределено);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Объект.Авансы);
				
				ОшибкаПриЗаполнении = Ложь;
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;

	Иначе

		Запрос=Новый Запрос;		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументыОснования[0].ДокументОснование);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Покупатель КАК Контрагент,
		|	ИсточникДанных.ДоговорКонтрагента,
		|	ИсточникДанных.ТипДоговораКонтрагента,
		|	-1 * ИсточникДанных.СуммаОборот КАК СуммаАванса
		|ИЗ
		|	РегистрНакопления.НДСРасчетыСПокупателями.Обороты(,,Регистратор, Документ = &ДокументОснование) КАК ИсточникДанных
		|ГДЕ
		|	ИсточникДанных.Регистратор = &ДокументОснование И ИсточникДанных.СуммаОборот < 0
		|";
		Результат = Запрос.Выполнить();

		ДокументЗаполнен = Ложь;
		Если Не Результат.Пустой() Тогда
			
			ДокАванса = Объект.ДокументыОснования[0].ДокументОснование;
			ДокАвансаДата = ?(ДокАванса.Метаданные().Реквизиты.Найти("ДатаОплаты") <> Неопределено И ЗначениеЗаполнено(ДокАванса.ДатаОплаты),
								ДокАванса.ДатаОплаты, ДокАванса.Дата);
								
			Выборка = Результат.Выбрать();			
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Объект.Контрагент = Выборка.Контрагент;
				Объект.ВалютаДокумента = МодульВалютногоУчета.ПолучитьВалюту("Бух");	
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
				
				Если Объект.ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(Объект.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ?(Год(Объект.Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118);
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
				Иначе
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ?(Год(Объект.Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118);
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
				КонецЕсли;
					
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма");

				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 

				Объект.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
				
				Сумма = 0;
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						Продолжить; // НДС с авансов под экспортные поставки не начисляется
					ИначеЕсли СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						Продолжить; // НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					КонецЕсли;
					
					Объект.Контрагент = Выборка.Контрагент;
					Объект.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;

					Объект.СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], ?(Год(Объект.Дата)>2018,Перечисления.СтавкиНДС.НДС20_120,Перечисления.СтавкиНДС.НДС18_118));
					ТаблицаАвансов = ТаблицаАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
												УчетНалоговСервер.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНалоговСервер.СтавкаНДС(Объект.СтавкаНДС)), 
												Объект.СтавкаНДС,
												СтрокаПоСтавке.СчетНаОплату);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Объект.Авансы);							
					ОшибкаПриЗаполнении = Ложь;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				Объект.Сумма = Объект.Авансы.Итог("Сумма");
				Объект.СуммаНДС = Объект.Авансы.Итог("СуммаНДС");
		
				Объект.СуммаДокумента = Объект.Сумма;
		
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					ДокументЗаполнен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		Объект.ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Объект.Сумма = 0;
		Объект.СуммаНДС = 0;
		Объект.СуммаДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ПодборПРД(Параметр1, Параметр2) Экспорт
	Если НЕ ТипЗнч(Параметр1)=Тип("Соответствие") Тогда Возврат; КонецЕсли;
	
	Объект.ДатаНомерДокументовОплаты.Очистить();
	Для каждого СтрокаКллекции Из Параметр1 Цикл
		НоваяСтрока=Объект.ДатаНомерДокументовОплаты.Добавить();
		НоваяСтрока.НомерПлатежноРасчетногоДокумента=СтрокаКллекции.Ключ;
		НоваяСтрока.ДатаПлатежноРасчетногоДокумента=СтрокаКллекции.Значение;
	КонецЦикла;
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	стрИмя=Элемент.Имя;
	Если стрИмя="СписокПРД" ИЛИ стрИмя="Исправление" Тогда
		УстановитьВидимость();

	ИначеЕсли стрИмя="ВидСчетаФактуры" Тогда
		Если Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.Исправительный") Тогда
			ПоказатьПредупреждение(, "Вид счета-фактуры <Исправительный> более не используется.", 20, "Внимание");
			Объект.ВидСчетаФактуры=ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.Корректировочный");
			Объект.Исправление=Истина;
			Объект.НомерИсправления=1;
		Конецесли;	
		УстановитьВидимость();
		Если Объект.ДокументыОснования.Количество()=0 Тогда
			Объект.ДокументыОснования.Добавить();
		КонецЕсли;

	ИначеЕсли стрИмя="Исправление" Тогда
		УстановитьВидимость();

	ИначеЕсли стрИмя="Организация" Тогда
        Атрибут_ПриИзменении(Элементы.Контрагент);

	ИначеЕсли стрИмя="Контрагент" Тогда
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("ВидДоговора", УправлениеДиалогамиКлиент.СписокВидовДоговоров("СПокупателем,СКомиссионером"));

		Объект.ДоговорКонтрагента=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);

		Атрибут_ПриИзменении(Элементы.ДоговорКонтрагента);

	ИначеЕсли стрИмя="ДоговорКонтрагента" Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ВалютаДокумента=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			РассчитатьСуммуДокумента();
		КонецЕсли;

	ИначеЕсли стрИмя="Сумма" Тогда	
		Объект.СуммаДокумента=Объект.Сумма;

	ИначеЕсли стрИмя="Дата" Тогда	
		Элементы.КодВидаОперации.СписокВыбора.Очистить();
		УчетНалоговКлиент.СписокКодовВидовОпераций("ВыставленныеСчетаФактуры", Элементы.КодВидаОперации.СписокВыбора, Объект.Дата);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	Если Элемент.Имя="ДокументОснование" Тогда
		НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура кпТабличноеПоле_ВыполнитьДействие(Команда)
	стрКоманда=Команда.Имя;
	Если стрКоманда="Сортировать" Тогда
		стрТабличнаяЧасть=стрЗаменить(ЭтаФорма.Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ДокументыОснования"

&НаКлиенте
Процедура ПриИзмененииДокументаОснования(Элемент)
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		УстановитьВидимость();
		Возврат;
	КонецЕсли;	
	Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаАванс") Тогда
		Объект.Авансы.Очистить();
		ОпределениеПараметровСчетаФактурыНаАванс(Неопределено);
		Ответ = Вопрос("Перезаполнить данные о платежно-расчетном документе?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ДатаНомерДокументовОплаты.Очистить();
			Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
				Или ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
				НомерПлатежноРасчетногоДокумента = Элемент.Значение.НомерВходящегоДокумента;
				ДатаПлатежноРасчетногоДокумента =  Элемент.Значение.ДатаВходящегоДокумента;
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				НомерПлатежноРасчетногоДокумента = ОбщегоНазначенияСервер.НомерНаПечать(Элемент.Значение);
				ДатаПлатежноРасчетногоДокумента =  Элемент.Значение.Дата;
			Иначе
				НомерПлатежноРасчетногоДокумента = "";
				ДатаПлатежноРасчетногоДокумента = Неопределено;
			КонецЕсли;
			
			СтрокаПРД = Объект.ДатаНомерДокументовОплаты.Добавить();
			СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
			СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
			
			Элементы.ДатаНомерДокументовОплаты.ТекущаяСтрока = Объект.ДатаНомерДокументовОплаты[0];
			
			Если Объект.Авансы.Количество() = 0 Тогда
				Объект.Авансы.Добавить();
			КонецЕсли;

			СписокАвансы = (Объект.Авансы.Количество()>1);
			Элементы.Авансы.ТекущаяСтрока = Объект.Авансы[0];
		КонецЕсли;
		
	ИначеЕсли Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НалоговыйАгент") Тогда
		Объект.Авансы.Очистить();
		Если ТипЗнч(Элемент.Значение)=Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			Для Каждого СтрокаДокумента ИЗ Элемент.Значение.РасшифровкаПлатежа Цикл
				НоваяСтрока=Объект.Авансы.Добавить();
				НоваяСтрока.ДокументОснование=Элемент.Значение;
				НоваяСтрока.Сумма=СтрокаДокумента.СуммаПлатежа;
				НоваяСтрока.СуммаНДС=СтрокаДокумента.СуммаНДС;
				НоваяСтрока.СтавкаНДС=СтрокаДокумента.СтавкаНДС;
			КонецЦикла;	
			СписокАвансы = (Объект.Авансы.Количество()>1);
			Элементы.Авансы.ТекущаяСтрока = Объект.Авансы[0];
		КонецЕсли;
		Объект.СтавкаНДС=СтрокаДокумента.СтавкаНДС;
		РассчитатьСуммуДокумента();
	
	ИначеЕсли Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаРеализацию") Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;
	
	УстановитьВидимость();	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, ВыбратьТекущуюКолонку = Ложь)
	////СтандартнаяОбработка = Ложь;
	////СписокТипов = СписокТиповПоВидуСчетаФактуры(Объект.ВидСчетаФактуры);
	////Отбор = Новый Структура();
	////Если ЗначениеЗаполнено(Объект.Организация) Тогда
	////	Отбор.Вставить("Организация", Объект.Организация);
	////КонецЕсли;
	////Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	////	Отбор.Вставить("Контрагент", Объект.Контрагент);
	////КонецЕсли;
	////Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	////	Отбор.Вставить("ДокументыПоДоговоруКонтрагента", Объект.ДоговорКонтрагента);
	////КонецЕсли;
	////
	////Отбор.Вставить("ПоставщикуВыставляетсяСчетФактураНаВозврат", Истина);
	////Отбор.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Ложь);
	////
	////Если ВыбратьТекущуюКолонку Тогда
	////    Элементы.ДокументыОснования.ТекущаяКолонка = Элементы.ДокументыОснования.Колонки.ДокументОснование;
	////КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыОснования_ДокументОснованиеПриИзменении(Элемент)
	// надо проверить, а не выбран ли уже в качестве документа основания этот документ
	ТекЗначение = Элемент.Значение;
	Если Не ЗначениеЗаполнено(ТекЗначение) Тогда Возврат; КонецЕсли; 
	
	УжеВыбран = Ложь;

	Для Каждого СтрДокОснования Из Объект.ДокументыОснования Цикл
		Если (СтрДокОснования.ДокументОснование = ТекЗначение) И (СтрДокОснования.НомерСтроки <> Элементы.ДокументыОснования.ТекущаяСтрока.НомерСтроки) Тогда
			УжеВыбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеВыбран Тогда
		Сообщить("Данный документ уже выбран в качестве документа-основания! Повторный выбор не допускается.");
		Элемент.Значение = Неопределено;
	ИначеЕсли Не Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаРеализацию") тогда
			
		Если ТипЗнч(ТекЗначение) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			Или ТипЗнч(ТекЗначение) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
			НомерПлатежноРасчетногоДокумента = ТекЗначение.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента =  ТекЗначение.ДатаВходящегоДокумента;
		Иначе
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначенияСервер.НомерНаПечать(ТекЗначение);
			ДатаПлатежноРасчетногоДокумента =  ТекЗначение.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
		ТекЗначение = Неопределено;
	КонецЕсли;
	
	ОпределениеПараметровСчетаФактуры();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыОснования_ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыОснования_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущаяСтрока.ДокументОснование = Неопределено;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ДатаНомерДокументовОплаты"

&НаКлиенте
Процедура кпДатаНомерДокументовОплаты_ВыполнитьДействие(Команда)
	Если Команда.Имя="ПодборПРД" Тогда
		Если Объект.Контрагент.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан контрагент",,"Объект.Контрагент");
			Возврат;
		КонецЕсли;
		Если Объект.ДоговорКонтрагента.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан договор контрагента",,"Объект.ДоговорКонтрагента");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);

	ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ПодборПРД", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаПодбораПРД", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Авансы"

&НаКлиенте
Процедура тпАвансы_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Авансы", "");
	ТекущиеДанные=Элементы.Авансы.ТекущиеДанные;
	
	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.СтавкаНДС=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "СтавкаНДС");
		
	ИначеЕсли стрКолонка="Сумма" Или стрКолонка="СтавкаНДС" Тогда
		ТекущиеДанные.СуммаНДС=УчетНалоговСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, Истина, Истина, УчетНалоговСервер.СтавкаНДС(ТекущиеДанные.СтавкаНДС));
	    РассчитатьСуммуДокумента();

	ИначеЕсли стрКолонка="СуммаНДС" Тогда
	    РассчитатьСуммуДокумента();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
	Если Отказ Тогда Возврат; КонецЕсли; 

	Если Параметры.Свойство("ДокументОснование") Тогда
		ДокументОбъект=РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ОбработкаЗаполнения(Параметры.ДокументОснование);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

		Если ТипЗнч(Параметры.ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если ЗначениеЗаполнено(Параметры.ДокументОснование.Подвид) Тогда
				Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Параметры.ДокументОснование.Подвид)="Корректировка" Тогда
					Объект.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный;
					Объект.НомерИсправления=1;
					Объект.ДокументОснованиеКорректировка=УчетНалоговСервер.НайтиПодчиненныйДокумент(Параметры.ДокументОснование.Сделка, "СчетФактураВыданный");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
			
		Если ТипЗнч(Параметры.ДокументОснование)=Тип("ДокументСсылка.КомиссияОтчетПродажиКомитенту") Тогда
			Если Параметры.ДокументОснование.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Объект.Контрагент=Параметры.ДокументОснование.Контрагент;
				Объект.ДоговорКонтрагента=Параметры.ДокументОснование.ДоговорКонтрагента;
				Объект.Сумма=Параметры.ДокументОснование.СуммаВознаграждения;
				Объект.СуммаДокумента=Параметры.ДокументОснование.СуммаВознаграждения;
				Объект.СуммаНДС=Параметры.ДокументОснование.Товары.Итог("СуммаНДСВознаграждения");
			КонецЕсли;
		КонецЕсли;	
			
		//Если ТипЗнч(Параметры.ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		//	Если ЗначениеЗаполнено(Параметры.ДокументОснование.Подвид) Тогда
		//		Если УправлениеДокументамиСервер.ИмяПредопределенногоПодвида(Параметры.ДокументОснование.Подвид)="Корректировка" Тогда
		//			Объект.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный;
		//			Объект.НомерИсправления=1;
		//			Объект.ДокументОснованиеКорректировка=УчетНалоговСервер.НайтиПодчиненныйДокумент(Параметры.ДокументОснование.Сделка, "СчетФактураПолученный");
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;	
	КонецЕсли; 

	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Для Каждого СтрокаКоллекции Из Объект.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаКоллекции.ДокументОснование) Тогда
				Если СтрокаКоллекции.ДокументОснование.Метаданные().Имя = "РеализацияТоваровУслуг" Тогда
					Если СтрокаКоллекции.ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						Отказ = Истина;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При передаче на комиссию выписка счета-фактуры не требуется.");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если не ЗначениеЗаполнено(Объект.ВидСчетаФактуры) Тогда
		Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаРеализацию");
	КонецЕсли; 
	Если Объект.Ссылка.Пустая() Тогда
		////Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		////	Объект.Ответственный = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
		////КонецЕсли; 
		Если Объект.ДокументыОснования.Количество() > 0 Тогда
			НаАвансПриИзменении(Истина, Объект.ДокументыОснования[0]["ДокументОснование"]);
		КонецЕсли;
	КонецЕсли;
	Если Объект.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
		Объект.ДатаНомерДокументовОплаты.Добавить();
		Объект.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = Объект.ДатаПлатежноРасчетногоДокумента;
		Объект.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = Объект.НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	Элементы.ДатаНомерДокументовОплаты.ТекущаяСтрока = Объект.ДатаНомерДокументовОплаты[0];
	//**** СписокПРД = Объект.ДатаНомерДокументовОплаты.Количество()>1;
	//Объект.СписокАванс = Объект.Авансы.Количество()>1;
	Если Объект.Авансы.Количество()>0 Тогда
		Элементы.Авансы.ТекущаяСтрока=Объект.Авансы[0];
	КонецЕсли;
	Если Объект.ДокументыОснования.Количество()=0 Тогда
		Объект.ДокументыОснования.Добавить();
	КонецЕсли;
	Элементы.ДокументыОснования.ТекущаяСтрока=Объект.ДокументыОснования[0];
	УстановитьВидимость();
	Если не ЭтаФорма.ТолькоПросмотр Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;
	УчетНалоговКлиент.СписокКодовВидовОпераций("ВыставленныеСчетаФактуры", Элементы.КодВидаОперации.СписокВыбора, Объект.Дата);
	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
	Если Отказ Тогда Возврат; КонецЕсли; 
	Если Объект.ДокументыОснования.Количество()=0 Тогда Возврат; КонецЕсли;

	СтрокаСообщения=ПроверитьВозможностьЗаписиСФ(Отказ);
	СтрокиКУдалению=Новый массив();
	Для Каждого СтрокаКоллекции Из Объект.ДокументыОснования Цикл
		Если Не ЗначениеЗаполнено(СтрокаКоллекции.ДокументОснование) Тогда
			СтрокиКУдалению.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.ДокументыОснования.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	Если Отказ Тогда ПоказатьПредупреждение(, СтрокаСообщения); КонецЕсли; 
	Если НЕ Отказ И НЕ Объект.СформированПриВводеНачальныхОстатковНДС тогда
		ПроверитьЗаполнениеСчетаФактуры();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
	ПараметрыЗаписи.Вставить("Основание", Объект.ДокументОснование);
	Оповестить("Запись_СчетФактураВыданный", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры