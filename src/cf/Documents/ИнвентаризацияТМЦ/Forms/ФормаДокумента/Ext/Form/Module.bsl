&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УправлениеШапкой" Тогда
		Видимость=НЕ Элементы.ШапкаПанель1.Видимость;		
		Элементы.ШапкаПанель1.Видимость=Видимость;
		Элементы.ШапкаПанель2.Видимость=Видимость;
		Элементы[Команда.Имя].Картинка=?(Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоКрасная);
		Элементы.ШапкаИнфо.Видимость=Не Видимость;

		МассивДанных=Новый Массив;
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" Организация: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Организация));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Склад: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Склад));

		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Отдел: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Подразделение));
		
		МассивДанных.Добавить(Новый ФорматированнаяСтрока(" | Куратор: ", Новый Шрифт(,,Истина), Новый Цвет(0,0,255)));
		МассивДанных.Добавить(СокрЛП(Объект.Ответственный));

		Элементы.ШапкаИнфо.Заголовок=Новый ФорматированнаяСтрока(МассивДанных);		
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовФормы()
	Элементы.ТоварыСчетУчета.Видимость=ВидПараметровЗаполнения="БухгалтерскийУчет";
	Элементы.ТоварыЦенаВРознице.Видимость=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Склад, "ВидСклада")=ПредопределенноеЗначение("Перечисление.ВидыСкладов.Розничный");
	ТипЦены=?(Элементы.ТоварыЦенаВРознице.Видимость, ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли"), Неопределено);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи()
	НадписьСуммаОткл=ОбщегоНазначения.ФорматСумм(Объект["Товары"].Итог("Сумма")-Объект["Товары"].Итог("СуммаУчет"));
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	ОбновитьНадписи();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		
	ИначеЕсли Элемент.Имя="Склад" Тогда
		ВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="ВидПараметровЗаполнения" Тогда
		ПараметрыЗаполнения_Инициализация();
		ВидимостьЭлементовФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Параметры заполнения"

&НаКлиенте
Процедура тпПараметрыЗаполнения_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпПараметрыЗаполнения_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаСервере
Процедура ПараметрыЗаполнения_Инициализация()
	СхемаКомпоновкиДанных=Документы.ИнвентаризацияТМЦ.ПолучитьМакет(ВидПараметровЗаполнения+"СКД");
	АдресСхемыКомпоновкиДанных=ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ПараметрыЗаполнения.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	ПараметрыЗаполнения.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
КонецПроцедуры

&НаСервере
Процедура ПараметрыЗаполнения_Восстановить()
	ВидПараметровЗаполнения="ОперативныйУчет";
	Если НЕ ПустаяСтрока(Объект.ПараметрыЗаполнения) Тогда
		ВидПараметровЗаполнения=СтрПолучитьСтроку(Объект.ПараметрыЗаполнения, 1);
		ПараметрыЗаполнения_Инициализация();

		Попытка Настройки=УниверсальныеМеханизмыСервер.ЗначениеИзСтрокиXML(СтрЗаменить(Объект.ПараметрыЗаполнения, ВидПараметровЗаполнения, ""));
		Исключение Возврат; 
		КонецПопытки; 		
		Если НЕ ТипЗнч(Настройки)=Тип("НастройкиКомпоновкиДанных") Тогда Возврат; КонецЕсли;		
		ПараметрыЗаполнения.ЗагрузитьНастройки(Настройки);
	Иначе
		ПараметрыЗаполнения_Инициализация();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПараметрыЗаполнения_Сохранить(ТекущийОбъект)
	ТекущийОбъект.ПараметрыЗаполнения=ВидПараметровЗаполнения;
	Если НЕ ПараметрыЗаполнения.Настройки.Отбор.Элементы.Количество()=0 Тогда
		ТекущийОбъект.ПараметрыЗаполнения=ТекущийОбъект.ПараметрыЗаполнения+Символы.ПС+УниверсальныеМеханизмыСервер.ЗначениеВСтрокуXML(ПараметрыЗаполнения.ПолучитьНастройки());
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПараметрыЗаполнения_УстановитьЭлементОтбора(стрПоле, Значение)
	ЭлементОтбора=ОтборыСписковКлиентСервер.НайтиЭлементОтбораПоЗначению(ПараметрыЗаполнения, стрПоле); 
	Если ЭлементОтбора=Неопределено Тогда
		ЭлементОтбора=ПараметрыЗаполнения.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение=Новый ПолеКомпоновкиДанных(стрПоле);		
	КонецЕсли;
	ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение=Значение;
	ЭлементОтбора.Использование=Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаКлиенте
Процедура кпТовары_ВыполнитьДействие(Команда)
	стрКоманда=стрЗаменить(Команда.Имя, "кпТовары_", "");
	Если стрКоманда="Сортировать" Тогда
		СортировкаТабличнойЧастиКлиент.Открыть("Товары", ЭтаФорма, Объект);
		
	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("ТипЦен", ТипЦены);
		ПараметрыФормы.Свойство("ПоказыватьЦены", НЕ ТипЦены.Пустая());

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="Заполнить" Или стрКоманда="Перезаполнить" Тогда
		ЕстьОшибки=Ложь;
		Если Объект.Организация.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена организация",,"Объект.Организация");
			ЕстьОшибки=Истина;
		КонецЕсли; 
		Если Объект.Склад.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен склад",,"Объект.Склад");
			ЕстьОшибки=Истина;
		КонецЕсли;
		Если ЕстьОшибки Тогда Возврат; КонецЕсли; 
		кпТовары_Заполнить(стрКоманда);
		Элементы.ТабличныеЧасти.ТекущаяСтраница=Элементы.СтраницаТовары;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура кпТовары_Заполнить(стрКоманда="Заполнить")
	ПараметрыЗаполнения_УстановитьЭлементОтбора("Склад", Объект.Склад);
	ПараметрыЗаполнения_УстановитьЭлементОтбора("Организация", Объект.Организация);

	СхемаКомпоновкиДанных=ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

	ПараметрыЗаполнения.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", Объект.Дата);

	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ПараметрыЗаполнения.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);

	тзДанные=Новый ТаблицаЗначений;
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	ПроцессорВывода.УстановитьОбъект(тзДанные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Если стрКоманда="Перезаполнить" Тогда
		Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
			СтрокаТабличногоПоля=Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтруктураПоиска=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТабличногоПоля);

			МассивСтрок=тзДанные.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество()=0 Тогда Продолжить; КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТабличногоПоля, МассивСтрок[0], "КоличествоУчет,СуммаУчет");
		КонецЦикла;		
	Иначе
		Объект.Товары.Очистить();
		Для каждого СтрокаКоллекции Из тзДанные Цикл
			Если Не ЗначениеЗаполнено(СтрокаКоллекции.Номенклатура) Тогда Продолжить; КонецЕсли;
			ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть="Товары";

	СтруктураПоиска=Новый Структура("Номенклатура");
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;
	
	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Товары" Тогда
		тпТовары_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.ТоварыНоменклатура, Элементы.ТоварыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриАктивизацииСтроки(Элемент)
	//ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные=Элементы.Товары.ТекущиеДанные;
	
	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;
		Если НЕ ТипЦены.Пустая() Тогда
			ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, ТипЦены, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
			ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
		КонецЕсли; 

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Или стрКолонка="СерияНоменклатуры" Тогда
		Если НЕ ТекущиеДанные[стрКолонка].Владелец=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные[стрКолонка], "Владелец");
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			Если стрКолонка="ХарактеристикаНоменклатуры" И НЕ ТипЦены.Пустая() Тогда
				ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, ТипЦены, ТекущаяДата(), ТекущиеДанные.ЕдиницаИзмерения);
				ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		СтароеЗначениеКоэффициента=ТекущиеДанные.Коэффициент;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если НЕ ТекущиеДанные.Коэффициент=СтароеЗначениеКоэффициента Тогда
			Если СтароеЗначениеКоэффициента > 0 Тогда
				ТекущиеДанные.Цена=ТекущиеДанные.Цена*ТекущиеДанные.Коэффициент/СтароеЗначениеКоэффициента;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли стрКолонка="Количество" Тогда
		ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
		ТекущиеДанные.ОтклонениеКоличество=ТекущиеДанные.Количество-ТекущиеДанные.КоличествоУчет;
		ТекущиеДанные.ОтклонениеСумма=ТекущиеДанные.Сумма-ТекущиеДанные.СуммаУчет;
		
	ИначеЕсли стрКолонка="Цена" Тогда
		ТекущиеДанные.Сумма=ТекущиеДанные.Цена*ТекущиеДанные.Количество;
		ТекущиеДанные.ОтклонениеСумма=ТекущиеДанные.Сумма-ТекущиеДанные.СуммаУчет;
		
	ИначеЕсли стрКолонка="Сумма" Тогда
		ТекущиеДанные.Цена=ТекущиеДанные.Сумма/ТекущиеДанные.Количество;
		ТекущиеДанные.ОтклонениеСумма=ТекущиеДанные.Сумма-ТекущиеДанные.СуммаУчет;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_Колонка_НачалоВыбора(Элемент, СтандартнаяОбработка)
	//Сообщить("в");
	//стрКолонка=?(ТипЗнч(Элемент)=Тип("ПолеВвода"), ЭлементыФормы.Товары.ТекущаяКолонка.Имя, Элемент);
	//СтрокаТабличнойЧасти=?(СтрокаТабличнойЧастиПрограмно=Неопределено, ЭлементыФормы.Товары.ТекущиеДанные, СтрокаТабличнойЧастиПрограмно);

	//Если стрКолонка="СерияНоменклатуры" Тогда
	//	СтрокаТабличнойЧасти=ЭлементыФормы.Товары.ТекущиеДанные;
	//	Если НЕ СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям Тогда
	//		Предупреждение("Для номенклатуры """ + СтрокаТабличнойЧасти.Номенклатура+""" не ведется учет по сериям!");
	//		СтандартнаяОбработка = Ложь; Возврат;
	//	КонецЕсли;
	//КонецЕсли;

	//УправлениеСобытиямиТабличногоПоля.НачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Инвентаризационная комиссия"

&НаКлиенте
Процедура тпИнвентаризационнаяКомиссия_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпИнвентаризационнаяКомиссия_ПослеУдаления(Элемент)
	ОбновитьНадписи();
КонецПроцедуры

&НаКлиенте
Процедура тпИнвентаризационнаяКомиссия_Колонка_ПриИзменении(Элемент)
	Если Элемент.Имя="ИнвентаризационнаяКомиссияПредседатель" Тогда
		ТекущаяСтрока=Элемент.Родитель.ТекущаяСтрока;
		ТекущиеДанные=Элемент.Родитель.ТекущиеДанные;
		Если ТекущиеДанные.Председатель Тогда
			Для каждого СтрокаКоллекции Из Объект.ИнвентаризационнаяКомиссия Цикл
				СтрокаКоллекции.Председатель=Ложь;
			КонецЦикла;
			ТекущиеДанные.Председатель=Истина;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПараметрыЗаполнения_Восстановить();

	Элементы.ТоварыЦена.Доступность=УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РедактированиеЦенВДокументах", Ложь);
	Элементы.ТоварыЦена.АвтоОтметкаНезаполненного=УправлениеПользователямиСервер.ПолучитьЗначениеПраваДляТекущегоПользователя("РазрешитьНулевыеЦеныВРознице", Ложь);

	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
	ВидимостьЭлементовФормы();

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьДанныеФормы();
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПараметрыЗаполнения_Сохранить(ТекущийОбъект);
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры