Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мПроводки;

Перем мКУДиР;
Перем мКУДиР_ОС;
Перем мКУДиР_НМА;
Перем мДатаПереходаНаУСН;

Перем мСтавкаНалогаНаПрибыль;

Перем ПорядокПеределов;

//Перем ПорядокПодразделенийСообщался;
Перем ТаблицаНеЗакрытыхПодразделений;

Перем КоэффициентЕНВД;

Перем ВспомогательныеДанныеРасчета, ТаблицаДолейКосвенныхРасходов;

Перем Отказ;

Процедура СообщитьОбОшибкеРегОперации(Знач ТекстСообщения, ДокументСообщения = Неопределено, Отказ = Ложь, РегОперация) Экспорт

	Отказ = Ложь;
		
	Если ТипЗнч(РегОперация)=Тип("ДокументОбъект.РегламентнаяОперация") И ЗначениеЗаполнено(РегОперация.Ссылка) Тогда
		ОшибкиСтрока = РегОперация.Ошибки.Добавить();
		ОшибкиСтрока.Описание = ТекстСообщения;
	Иначе
		Заголовок = ?(РегОперация = Неопределено, "", ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(РегОперация.Ссылка));
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры
Функция ПолучитьМассивСчетовУчетаРасходов()
	СчетаЗатрат=Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	
	Возврат СчетаЗатрат;	
КонецФункции

Функция ПолучитьМассивСчетовЕНВД()
	СчетаЗатрат=Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	
	Возврат СчетаЗатрат;	
КонецФункции

// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагемые разницы.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в каторой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, СтруктураДопПараметров, СтруктураШапкиДокумента, ЭтоОтчет = Ложь) Экспорт
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	Если КоличествоОбъектовАналитики = 0 Тогда Возврат Новый ТаблицаЗначений; КонецЕсли;
	
	МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
	ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
	ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, ФлагОС_НМА);
	ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
	ФлагНЗП = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
	
	Запрос = Новый Запрос;                                           
	Запрос.УстановитьПараметр("НачалоМесяца",   СтруктураДопПараметров.НачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",    СтруктураДопПараметров.КонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("МассивСчетов",   СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидСубконто",    МассивСубконто);
	Запрос.УстановитьПараметр("СчетЕН",         ПолучитьМассивСчетовЕНВД());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт) КАК НачОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт) КАК КонОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокКт) КАК НачОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокКт) КАК КонОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт) КАК ОборотДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаВРОборотКт) КАК ОборотКт,
	|	СУММА(0) КАК ОборотЕН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоМесяца, &КонецМесяца, , , Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ХозрасчетныйОбороты.СуммаВРОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&СчетЕН), ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3
	|";
	
	Если ФлагОС_НМА = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиИОбороты.Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОбороты.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиИОбороты.Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОбороты.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОстаткиИОбороты.Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ХозрасчетныйОбороты.Субконто2", "");
	КонецЕсли;
	
	Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов И Не ЭтоОтчет Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт", "ВЫБОР КОГДА Субконто1.ВидРБП = &УбыткиПрошлыхЛет ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт КОНЕЦ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт", "ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт - ВЫБОР КОГДА Субконто1.ВидРБП = &УбыткиПрошлыхЛет ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт ИНАЧЕ 0 КОНЕЦ");
		
		Запрос.УстановитьПараметр("УбыткиПрошлыхЛет",  Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов = Результат.Выгрузить();
	ТаблицаРезультатов.Свернуть("" + ?(ФлагОС_НМА = 1, "", "Счет,") + "Субконто1" + ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики = 2, ",Субконто2","")) + ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ",Субконто3","")),"НачОстатокКт,КонОстатокКт,НачОстатокДт,КонОстатокДт,ОборотДт,ОборотКт,ОборотЕН");
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		ТаблицаРезультатов.Колонки.Добавить("СуммаДт09");
		ТаблицаРезультатов.Колонки.Добавить("СуммаКт09");
		ТаблицаРезультатов.Колонки.Добавить("СуммаДт77");
		ТаблицаРезультатов.Колонки.Добавить("СуммаКт77");
		ТаблицаРезультатов.Колонки.Добавить("СуммаЕНВД");
		
		
		Запрос = Новый Запрос;                                           
		Запрос.УстановитьПараметр("НачалоМесяца",   СтруктураДопПараметров.НачГраница);
		Запрос.УстановитьПараметр("КонецМесяца",    СтруктураДопПараметров.КонГраница);
		Запрос.УстановитьПараметр("Организация",    СтруктураДопПараметров.Организация);
		НеРаспределяемыеСчета = Новый Массив;
		НеРаспределяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		НеРаспределяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		НеРаспределяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		Запрос.УстановитьПараметр("НеРаспределяемыеСчета",           НеРаспределяемыеСчета);
		
		Запрос.УстановитьПараметр("ВидСубконто",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидСубконто91",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		Запрос.УстановитьПараметр("Распределяемые",    Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
		Запрос.УстановитьПараметр("ЕНВД",              Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
		Запрос.УстановитьПараметр("Счет91",      ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
		Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
		Запрос.УстановитьПараметр("СчетПрочихРасходов", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		Запрос.УстановитьПараметр("КорСчет", СтрокаВидАктиваОбязательства.Счета);
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаЗатрат,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаЗатратЕНВД,
		|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , (НЕ Счет В (&НеРаспределяемыеСчета)), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ХозрасчетныйОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаВРОборотДт, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ХозрасчетныйОбороты.КорСубконто1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетПрочихРасходов), &ВидСубконто91, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ХозрасчетныйОбороты
		|ИТОГИ
		|	СУММА(СуммаЗатрат),
		|	СУММА(СуммаЗатратЕНВД)
		|ПО
		|	КорСубконто1";
		
		Результат = Запрос.Выполнить();
		ТаблицаРаспределяемыхРасхдов = Результат.Выгрузить();
		
		
		Для Каждого Строка Из ТаблицаРезультатов Цикл
			СводноеСальдоКон = ?(Строка.КонОстатокДт = NULL, 0, Строка.КонОстатокДт) - ?(Строка.КонОстатокКт = NULL, 0, Строка.КонОстатокКт);
			СводноеСальдоНач = ?(Строка.НачОстатокДт = NULL, 0, Строка.НачОстатокДт) - ?(Строка.НачОстатокКт = NULL, 0, Строка.НачОстатокКт);
			
			Разница = ?(Строка.ОборотДт = NULL, 0, Строка.ОборотДт) - ?(Строка.ОборотКт = NULL, 0, Строка.ОборотКт);
			
			// Определим сумму временных разниц, приходящуюся на деятельность, облагамую ЕНВД,
			// для распределяемых затрат, связанных с амортизацией и списанием РБП.
			СуммаРаспределяемогоРасхода = 0;
			СуммаЕНВДРасхода     = 0;
			СтрокаРаспределяемогоРасхода = ТаблицаРаспределяемыхРасхдов.Найти(Строка.Субконто1, "КорСубконто1");
			
			Если СтрокаРаспределяемогоРасхода = Неопределено Тогда
				Строка.СуммаЕНВД = Строка.ОборотЕН;
			Иначе
				СуммаРаспределяемогоРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатрат;
				СуммаЕНВДРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатратЕНВД;
				Строка.СуммаЕНВД = СуммаРаспределяемогоРасхода * СтруктураДопПараметров.КоэффициентЕНВД + СуммаЕНВДРасхода;
			КонецЕсли;
			
			Если СводноеСальдоНач > 0 Тогда
				Если  СводноеСальдоКон - СводноеСальдоНач > 0 Тогда
					Строка.СуммаКт77 = Разница;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
					Иначе  Если (СводноеСальдоКон < 0) И (СводноеСальдоНач >= 0) Тогда
						Строка.СуммаДт09 = - СводноеСальдоКон;
						Строка.СуммаДт77 = СводноеСальдоНач;
						Строка.СуммаКт09 = 0;
						Строка.СуммаКт77 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = - Разница;
						Строка.СуммаКт09 = 0;
						Строка.СуммаДт09 = 0;
						
						
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если  СводноеСальдоКон - СводноеСальдоНач < 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = - СводноеСальдоКон + СводноеСальдоНач;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 =  0;
					Иначе  Если (СводноеСальдоКон > 0) И (СводноеСальдоНач <= 0) Тогда
						Строка.СуммаКт77 = СводноеСальдоКон;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = - СводноеСальдоНач;
						Строка.СуммаДт09 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = Разница;
						Строка.СуммаДт09 = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	 	 
	
	Возврат  ТаблицаРезультатов;
КонецФункции

// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагемые разницы,
// числящиеся на остатках текущего периода.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в каторой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, Организация, НачалоГода, КонецГода) Экспорт
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	Если КоличествоОбъектовАналитики = 0 Тогда Возврат Новый ТаблицаЗначений; КонецЕсли;
	
	МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
	ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
	ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, ФлагОС_НМА);
	ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
	ФлагНЗП = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
	
	Запрос=Новый Запрос;  
	Запрос.УстановитьПараметр("НачалоГода",     НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",      КонецГода);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("МассивСчетов",   СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидУчета", 	    Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидСубконто",    МассивСубконто);
	Запрос.УстановитьПараметр("Счет09",         ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Счет77",         ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	Запрос.УстановитьПараметр("Счет84",         ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	Запрос.УстановитьПараметр("ВидАктивовОбязательств",СтрокаВидАктиваОбязательства.ВидАктивовОбязательств);
	Запрос.УстановитьПараметр("АктивыИОбязательства",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ОтстакиВР.Счет КАК Счет,
	|	ОтстакиВР.Субконто1 КАК Субконто1,
	|	ОтстакиВР.Субконто2 КАК Субконто2,
	|	ОтстакиВР.Субконто3 КАК Субконто3,
	|	&Счет09 КАК СчетОНАОНО,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОбороты.СуммаОборот КАК СтараяСумма,
	|	СУММА(ВЫБОР
	|			КОГДА ОтстакиВР.СуммаВРОстатокДт < 0
	|					ИЛИ ОтстакиВР.СуммаВРОстатокКт > 0
	|				ТОГДА -ОтстакиВР.СуммаВРОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецГода, Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация)) КАК ОтстакиВР,
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецГода,
	|			Счет В ИЕРАРХИИ (&Счет09),
	|			&АктивыИОбязательства,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1 = &ВидАктивовОбязательств) КАК ХозрасчетныйОстатки,
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонецГода,
	|			Период,
	|			Счет В ИЕРАРХИИ (&Счет09),
	|			&АктивыИОбязательства,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1 = &ВидАктивовОбязательств,
	|			КорСчет В ИЕРАРХИИ (&Счет84),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтстакиВР.Счет,
	|	ОтстакиВР.Субконто1,
	|	ОтстакиВР.Субконто2,
	|	ОтстакиВР.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОбороты.СуммаОборот
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтстакиВР.Счет,
	|	ОтстакиВР.Субконто1,
	|	ОтстакиВР.Субконто2,
	|	ОтстакиВР.Субконто3,
	|	&Счет77,
	|	ХозрасчетныйОстатки.СуммаОстатокКт + ХозрасчетныйОбороты.СуммаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА ОтстакиВР.СуммаВРОстатокДт > 0
	|					ИЛИ ОтстакиВР.СуммаВРОстатокКт < 0
	|				ТОГДА ОтстакиВР.СуммаВРОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецГода, Счет В ИЕРАРХИИ (&МассивСчетов), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация)) КАК ОтстакиВР,
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецГода,
	|			Счет В ИЕРАРХИИ (&Счет77),
	|			&АктивыИОбязательства,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1 = &ВидАктивовОбязательств) КАК ХозрасчетныйОстатки,
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонецГода,
	|			Период,
	|			Счет В ИЕРАРХИИ (&Счет77),
	|			&АктивыИОбязательства,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1 = &ВидАктивовОбязательств,
	|			КорСчет В ИЕРАРХИИ (&Счет84),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтстакиВР.Счет,
	|	ОтстакиВР.Субконто1,
	|	ОтстакиВР.Субконто2,
	|	ОтстакиВР.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстатокКт + ХозрасчетныйОбороты.СуммаОборот
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|";
	
	Если ФлагОС_НМА = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтстакиВР.Счет КАК Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтстакиВР.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ОтстакиВР.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ОтстакиВР.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ОтстакиВР.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	ОтстакиВР.Субконто2", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов = Результат.Выгрузить();
	ТаблицаРезультатов.Свернуть("СчетОНАОНО,СтараяСумма," + ?(ФлагОС_НМА = 1, "", "Счет,") + "Субконто1" + ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики = 2, ",Субконто2","")) + ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ",Субконто3","")),"Сумма");
	
	Возврат ТаблицаРезультатов;
КонецФункции

// Создает таблицу долей списания косвенных расходов по видам расходов
// на основе записей регистра сведений "Доли списания косвенных расходов"
Функция ПолучитьТаблицуДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.ГоловноеПодразделение);
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(СтруктураШапкиДокумента.Дата));	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.ДоляРасходовНаРекламу,
	|	ИсточникДанных.ДоляПредставительскихРасходов,
	|	ИсточникДанных.ДоляРасходовНаДобровольноеМедицинскоеСтрахование,
	|	ИсточникДанных.ДоляРасходовНаДобровольноеСтрахованиеЖизни,
	|	ИсточникДанных.ДоляРасходовНаВозмещениеПроцентовРаботникам,
	|	ИсточникДанных.ДоляЕНВД,
	|	ИсточникДанных.ДоляТранспортныхРасходов,
	|	ИсточникДанных.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Организация = &Организация
	|	И ИсточникДанных.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон
	|";
	Результат=Запрос.Выполнить();
	Возврат ?(Результат.Пустой(), Неопределено, Результат.Выгрузить());
КонецФункции

// Формирует проводки, отражающие списание косвенных расходов
// (включение косвенных расходов в уменьшение налогооблагаемой прибыли)
Процедура ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма,СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам = Ложь) Экспорт
	
	Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Или СтруктураШапкиДокумента.Предприниматель Тогда
		Сумма.СуммаНУ = 0; Сумма.СуммаПР = 0; Сумма.СуммаВР = 0;
	КонецЕсли;
	Если Сумма.СуммаБУ = 0 И Сумма.СуммаНУ = 0 И Сумма.СуммаПР = 0 И Сумма.СуммаВР = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводка=мПроводки.Добавить();
	Проводка.Период=СтруктураШапкиДокумента.Дата;
	Проводка.Организация=СтруктураШапкиДокумента.Организация;
	Проводка.СчетДт=СчетДт; 
	
	Если АналитикаПоНомГруппам Тогда
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Выборка.НоменклатурнаяГруппа);
	КонецЕсли;
	
	Проводка.СчетКт       = Выборка.Счет;
	БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Выборка.СтатьяЗатрат);
	Если АналитикаПоНомГруппам Тогда
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Выборка.НоменклатурнаяГруппа);
	КонецЕсли;
	
	БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
	
	Проводка.Содержание   = "Закрытие счетов косвенных расходов";
	Проводка.Сумма = Сумма.СуммаБУ;
	
	СуммаНУ = Сумма.СуммаНУ;
	СуммаПР = Сумма.СуммаПР;
	СуммаВР = Сумма.СуммаВР;
	
	НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, СуммаНУ,СуммаПР,СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 	
КонецПроцедуры

// Определяет наличие видов деятельности, облагаемых ЕНВД.
//
// Параметры:
//  Организация  - Справочник.Ссылка - Организация, по которой
//                 определяется наличие видов деятельности, облагаемых ЕНВД
//  Дата         - Дата - Дата, на которую получаются сведения
//
// Возвращаемое значение:
//  Булево.
//
Функция ПрименениеЕНВД(ОрганизацияССылка, Знач Дата) Экспорт
	Если НЕ ЗначениеЗаполнено(ОрганизацияССылка) Тогда Возврат Ложь; КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда Дата=ТекущаяДата(); КонецЕсли;
	
	УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, ОрганизацияССылка,,Ложь);
	Если УчетнаяПолитика.Количество()=0 Тогда Возврат Истина; КонецЕсли;
	
	Возврат УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
КонецФункции

// Формируется таблица строк в которой задано соответствие видов активов
// (обязательства) и счетов налогового учета, на которых отражаются разницы
// по этим видам активов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуВидовАктивовИОбязательств() Экспорт
	
	Если  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто.Количество() = 1 ТОгда
		ЕстьСкладскойУчет = Ложь;
	ИНачеЕсли  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто.Количество() = 2 ТОгда
		ЕстьСкладскойУчет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
	Иначе
		ЕстьСкладскойУчет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств, Строка"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",      Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",   Новый ОписаниеТипов("Массив"));
	
	//Основные средства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	//ДоходныеВложенияВ_МЦ
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	//Нематериальные активы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Оборудование 
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы   08.01
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.02
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.03
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы 08.04
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы 08.05
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Внеоборотные активы 08.08
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	
	// Материалы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	СчетаУчетаМатериалов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.Материалы);
	Пока СчетаУчетаМатериалов.Следующий() Цикл
		СчетУчетаМатериалов = СчетаУчетаМатериалов.Ссылка;
		КодСчета = СчетУчетаМатериалов.Код;
		Если Лев(КодСчета, 5) = "10.МЦ" Или Лев(КодСчета, 5) = "10.11" Или Лев(КодСчета, 5) = "10.07" Тогда
			Продолжить;
		КонецЕсли;		
		НоваяСтрока.Счета.Добавить(СчетУчетаМатериалов);
	КонецЦикла;
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Материалы  в переработке
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Материалы  в эксплутации
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации.Ссылка);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации.Ссылка);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	//	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации);
	
	// Незавершенное производство
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Готовая продукция
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Полуфабрикаты
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Расходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// Товары
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Товары отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Издержки обращения
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	// Финансовые вложения (счета 58.01.1)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Паи);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Финансовые вложения (счета 58.01.2 и Н58.02)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Акции);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	// Финансовые вложения (счета 58.03, 58.04, 58.05)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПредоставленныеЗаймы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВкладыПоДоговоруПростогоТоварищества);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретенныеПрава);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Доходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоходыБудущихПериодов);
	
	// Дебиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Кредиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Резервы сомнительных долгов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РезервыСомнительныхДолгов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в рублях
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в валюте
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	//	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВВалюте;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Убытки текущего периода
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОценочныеОбязательства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы);
	
	Возврат ТаблицаВидовАктивовИОбязательств;	
КонецФункции

// Расчет транспортных расходов, которые необходимо списать.
// 
Процедура РасчетТранспортныхРасходов(НачГраница,КонГраница,ТекОрганизация,ПараметрыСтруктура)  Экспорт
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеИзделия);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
	
	СписокКорСчетов = Новый Массив;
	СписокКорСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	
	// СКД41-СКК42+СКД45.01
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НачГраница",  НачГраница);
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);             
	Запрос.УстановитьПараметр("Счет",        СписокСчетов);
	Запрос.УстановитьПараметр("ПустойСчет",  ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СУММА(РБОстатки.СуммаКонечныйОстаток) КАК ОстатокТовара,
	|	СУММА(РБОстатки.СуммаНачальныйОстаток) КАК ОстатокТовараНач,
	|	0 КАК ПриходТовара,
	|	0 КАК РасходТовара
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачГраница, &КонГраница,,, Счет В ИЕРАРХИИ (&Счет), , Организация В ИЕРАРХИИ (&Организация)) КАК РБОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница, &КонГраница,, Счет В ИЕРАРХИИ (&Счет),,Организация В ИЕРАРХИИ (&Организация),
	|			(НЕ КорСчет В ИЕРАРХИИ (&Счет))
	|				И (НЕ КорСчет = &ПустойСчет),
	|			) КАК ХозрасчетныйОбороты
	|";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	ОстатокТовара    = 0;
	ОстатокТовараНач = 0;
	ПриходТовара     = 0;
	РасходТовара     = 0;
	Пока РезультатЗапроса.Следующий() Цикл
		ОстатокТовара    = ОстатокТовара    + ?(РезультатЗапроса.ОстатокТовара    = Null, 0, РезультатЗапроса.ОстатокТовара);
		ОстатокТовараНач = ОстатокТовараНач + ?(РезультатЗапроса.ОстатокТовараНач = Null, 0, РезультатЗапроса.ОстатокТовараНач);
		ПриходТовара     = ПриходТовара     + ?(РезультатЗапроса.ПриходТовара     = Null, 0, РезультатЗапроса.ПриходТовара);
		РасходТовара     = РасходТовара     + ?(РезультатЗапроса.РасходТовара     = Null, 0, РезультатЗапроса.РасходТовара);
	КонецЦикла;
	ПараметрыСтруктура.НачОстатокТоваров = ОстатокТовараНач;
	ПараметрыСтруктура.КонОстатокТоваров = ОстатокТовара;
	ПараметрыСтруктура.ПриходТовара      = ПриходТовара;
	
	// ДО(90.02,41)-ДО(90.02,42)+ДО(90.02,45.01);
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НачГраница",  НачГраница);
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("Счет",        СписокКорСчетов);
	Запрос.УстановитьПараметр("КорСчет",     СписокСчетов);
	Запрос.Текст = "ВЫБРАТЬ
	|РБОбороты.СуммаОборот КАК СтоимостьРеализаванныхТоваров,
	|0                     КАК СтоимостьРеализаванныхТоваровЕНВД
	|ИЗ	
	|РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница,&КонГраница, ,Счет В ИЕРАРХИИ (&Счет), , (Организация В ИЕРАРХИИ (&Организация)), КорСчет В ИЕРАРХИИ (&КорСчет),) КАК РБОбороты
	|";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	СуммаРеализованныхТоваров     = 0;
	СуммаРеализованныхТоваровЕНДВ = 0;
	
	Пока РезультатЗапроса.Следующий() Цикл
		СуммаРеализованныхТоваров     = СуммаРеализованныхТоваров     + ?(РезультатЗапроса.СтоимостьРеализаванныхТоваров = Null, 0, РезультатЗапроса.СтоимостьРеализаванныхТоваров);
		СуммаРеализованныхТоваровЕНДВ = СуммаРеализованныхТоваровЕНДВ + ?(РезультатЗапроса.СтоимостьРеализаванныхТоваровЕНВД = Null, 0, РезультатЗапроса.СтоимостьРеализаванныхТоваровЕНВД);
	КонецЦикла;
	
	ПараметрыСтруктура.СуммаРеализованныхТоваров     = СуммаРеализованныхТоваров;
	ПараметрыСтруктура.СуммаРеализованныхТоваровЕНДВ = СуммаРеализованныхТоваровЕНДВ; 
	СтоимостьРеализаванныхТоваров                    = СуммаРеализованныхТоваров + СуммаРеализованныхТоваровЕНДВ;
	Списано = РасходТовара - СтоимостьРеализаванныхТоваров;
	
	Если СтоимостьРеализаванныхТоваров + ОстатокТовара = 0 Тогда
		ПараметрыСтруктура.СуммаРасходовКСписанию = 0;
		ПараметрыСтруктура.СреднийПроцент         = 0;
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктура.СреднийПроцент = ОКР(ПараметрыСтруктура.СуммаРасходов     / (СтоимостьРеализаванныхТоваров+ОстатокТовара),8);
	
	Если СтоимостьРеализаванныхТоваров  = 0 Тогда
		ПараметрыСтруктура.СуммаРасходовКСписанию = 0;		
	Иначе
		ПараметрыСтруктура.СуммаРасходовКсписанию = ПараметрыСтруктура.СуммаРасходов - ОКР(ПараметрыСтруктура.СреднийПроцент*ОстатокТовара,2);
	КонецЕсли;
	
	ПараметрыСтруктура.ДоляРасхода = ?(ПараметрыСтруктура.СуммаРасходов = 0, 0, ПараметрыСтруктура.СуммаРасходовКсписанию  / ПараметрыСтруктура.СуммаРасходов);
КонецПроцедуры

// Определеяет доли списания нормируемых расходов, 
// транспортных расходов, расходов, распределяемых по видам деятельности
Функция ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов, ВидРасхода) Экспорт
	
	Если ТаблицаДолейКосвенныхРасходов = Неопределено Или ТаблицаДолейКосвенныхРасходов.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Строка = ТаблицаДолейКосвенныхРасходов[0];
	Если ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеСтрахованиеЖизни;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеМедицинскоеСтрахование;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Тогда
		Возврат Строка.ДоляРасходовНаВозмещениеПроцентовРаботникам;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
		Возврат Строка.ДоляПредставительскихРасходов;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Тогда
		Возврат Строка.ДоляРасходовНаРекламу;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
		Возврат Строка.ДоляТранспортныхРасходов;
		
	ИначеЕсли ВидРасхода = Неопределено Тогда
		
		Возврат Строка.ДоляЕНВД;
	Иначе	
		
		Возврат 1;
	КонецЕсли;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция РазностьДатВДнях(Дата1, Дата2)
	мДлинаСуток = 86400; // в секундах
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);
КонецФункции

Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток, ВспомогательныеДанные, мНачДата, мКонДата) Экспорт
	
	Если Остаток = 0 Тогда Возврат 0; КонецЕсли;
	
	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);
	
	ПоправкаНаВисокосныйГодВНачалеПериода = 0;
	ПоправкаНаВисокосныйГодВКонцеПериода  = 0;
	Если Лев(Строка(КонецМесяца(ДатаНачалаСписания)), 5) = "29.02" И НЕ Лев(Строка(ДатаНачалаСписания), 5) = "01.02" Тогда
		ПоправкаНаВисокосныйГодВНачалеПериода = -1;
	КонецЕсли;
	Если Лев(Строка(КонецМесяца(ДатаОкончанияСписания)), 5) = "29.02" Тогда
		ПоправкаНаВисокосныйГодВКонцеПериода = -1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;
		
	ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
		КоличествоДней = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания) + 1;
		ЦенаДня = Остаток / КоличествоДней;
		Если КонецМесяца(ДатаОкончанияСписания) = КонецМесяца(ДатаНачалаСписания) Тогда 
			КоличествоДнейТекущегоМесяца = День(ДатаОкончанияСписания); 
			КоличествоДней = КоличествоДнейТекущегоМесяца;
			СуммаСписания  = Остаток;
		Иначе	
			КоличествоДнейТекущегоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1; 
			СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоДней;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
	Иначе
		
		ДоляПоследнегоМесяца = День(ДатаОкончанияСписания) / (День(КонецМесяца(ДатаОкончанияСписания)) + ПоправкаНаВисокосныйГодВКонцеПериода);
		Если КонецМесяца(ДатаНачалаСписания) = КонецМесяца(ДатаОкончанияСписания) Тогда
			ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
			КоличествоМесяцев  = ДоляПоследнегоМесяца;
		Иначе
			ДоляТекущегоМесяца   = (РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1 + ПоправкаНаВисокосныйГодВНачалеПериода) / (День(КонецМесяца(ДатаНачалаСписания)) + ПоправкаНаВисокосныйГодВНачалеПериода);
			КоличествоМесяцевСередины = 0;
			ТекущаяДата1 = ДобавитьМесяц(КонецМесяца(ДатаНачалаСписания), 1);
			Пока КонецМесяца(ДатаОкончанияСписания) >= ТекущаяДата1 Цикл
				КоличествоМесяцевСередины = КоличествоМесяцевСередины + 1;
				ТекущаяДата1               = ДобавитьМесяц(ТекущаяДата1, 1);
			КонецЦикла;
			КоличествоМесяцев = КоличествоМесяцевСередины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
		КонецЕсли;
		
		СуммаСписания = ?(КоличествоМесяцев = 0, 0, Остаток * ДоляТекущегоМесяца / КоличествоМесяцев);
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоМесяцев;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ДоляТекущегоМесяца;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остаток > 0 Тогда
		Возврат Мин(СуммаСписания, Остаток);
	Иначе
		Возврат Макс(СуммаСписания, Остаток);
	КонецЕсли;
	
КонецФункции

Процедура ВыявлениеУчетныхОшибок(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	СтруктураШапкиДокумента.Вставить("Ссылка", Ссылка); 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		
		СчетаЗатрат = Новый Массив();
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		
		СчетаПрямыхЗатрат = Новый Массив();
		СчетаПрямыхЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаПрямыхЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		
		СубконтоПрямыхЗатрат = Новый Массив();
		СубконтоПрямыхЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		СубконтоПрямыхЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		
		//На счете 20,23,26,26 не указано подразделение 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("СчетаЗатрат", 	    СчетаЗатрат);
		Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ПустоеПодразделение",Справочники.Подразделения.ПустаяСсылка());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, Регистратор, СчетДт В ИЕРАРХИИ (&СчетаЗатрат),
		|			&СтатьиЗатрат,,,Организация = &Организация И ПодразделениеДт = &ПустоеПодразделение) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор <> &ТекущийДокумент
		|";
		Результат=Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указано подразделение производственных затрат.
				|Обнаружены обороты по дебету счетов 20, 23, 25, 26, для которых не указано подразделение в документе " + ВыборкаОшибок.Регистратор + ".
				|Укажите подразделение затрат в этом документе";
				СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		//На счете 20,23 использована распределяемая статья 
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
		Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("Распределяемые", 	Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, Регистратор, СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат), &СтатьиЗатрат, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
		|	И ХозрасчетныйОборотыДтКт.Регистратор <> &ТекущийДокумент";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Прямые расходы отражены по распределяемым статьям затрат.
				|Обнаружены обороты по дебету счетов 20 и 23 по статьям, предназначенным для учета затрат, связанных с разными видами деятельности " + ВыборкаОшибок.СубконтоДт1 + " в документе " + ВыборкаОшибок.Регистратор + ".
				|Если расходы распределяемые, то укажите счета затрат - 25, 26, 44. Если расходы прямые, то вместо этой статьи затрат укажите статью затрат с признаком ""не ЕНВД"" или ""ЕНВД"".";
				СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		//Использована одна и та же номенклатурная группа для услуг по выручке и для продукции
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа,
		|	ВыпускПродукцииУслугОбороты.Регистратор КАК РегистраторПродукции,
		|	РеализацияУслугОбороты.Регистратор КАК РегистраторУслуг
		|ИЗ
		|	РегистрНакопления.РеализацияУслуг.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РеализацияУслугОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
		|		ПО РеализацияУслугОбороты.НоменклатурнаяГруппа = ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Неверно указана номенклатурная группа для выпуска.
				|Номенклатурная группа " + ВыборкаОшибок.НоменклатурнаяГруппа + " указана при отражении реализации услуг в документе  " + ВыборкаОшибок.РегистраторУслуг + "
				|и при отражении выпуска готовой продукции и услуг " + ВыборкаОшибок.РегистраторПродукции + ".
				|Рекомендуется указать разные номенклатурные группы в этих документах";
				СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.НоменклатурнаяГруппа, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		//Не указана номенклатурная группа при реализации услуг
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("ПустаяСсылка", 		Справочники.НоменклатурныеГруппы.ПустаяСсылка());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияУслугОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.РеализацияУслуг.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РеализацияУслугОбороты
		|ГДЕ
		|	РеализацияУслугОбороты.НоменклатурнаяГруппа = &ПустаяСсылка
		|	И РеализацияУслугОбороты.Регистратор <> &ТекущийДокумент";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указана номенклатурная группа оказанных услуг.
				|Не заполнена колонка ""Субконто"" на закладке ""Услуги"" в документе " + ВыборкаОшибок.Регистратор + ".
				|Рекомендуется заполнить указанную колонку в указанном документе.";
				
				СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		
		//Выручка и производсвтенные затраты содержат незаполненные номенклатурные группы  
		Запрос=Новый Запрос; ВсеНомГруппыЗаполенены=Истина;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("СчетаВыручки",	     ПланыСчетов.Хозрасчетный.Выручка);
		Запрос.УстановитьПараметр("Пустая",              Справочники.НоменклатурныеГруппы.ПустаяСсылка());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКтВыручка.СчетКт КАК СчетКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , , , СчетКт В ИЕРАРХИИ (&СчетаВыручки), &НоменклатурныеГруппы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКтВыручка
		|ГДЕ
		|	(ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 ЕСТЬ NULL ИЛИ ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 = &Пустая)
		|";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Отказ = Ложь;
			ВсеНомГруппыЗаполенены = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указана номенклатурная группа для доходов.
				|Обнаружены обороты по кредиту счета " + ВыборкаОшибок.СчетКт + ", для которых не указана номенклатурная группа.
				|Найдите документы, проводки которых составили этот оборот, и укажите в них номенклатурную группу или заполните колонку ""Субконто""";
				СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
		Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, Регистратор, СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат), &НоменклатурныеГруппы, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	(ХозрасчетныйОборотыДтКт.СубконтоДт1 ЕСТЬ NULL Или ХозрасчетныйОборотыДтКт.СубконтоДт1 = &Пустая)
		|";
		Результат = Запрос.Выполнить();		
		Если НЕ Результат.Пустой() Тогда
			Отказ = Ложь;
			ВсеНомГруппыЗаполенены = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Не указана номенклатурная группа для расходов.
				|Обнаружены обороты по дебету счетов 20, 23, 25, 26, для которых не указана номенклатурная группа в документе " + ВыборкаОшибок.Регистратор + ".
				|Укажите номенклатурную группу в этом документе";
				СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		Если ВсеНомГруппыЗаполенены Тогда
			//Распределение выручки по номенклатурным группам противоречит отнесенным на них затратам 
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
			
			Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
			Запрос.УстановитьПараметр("СубконтоЗатрат", 	СубконтоПрямыхЗатрат);
			Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
			
			Запрос.УстановитьПараметр("СчетаВыручкиЕНВД",	ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
			Запрос.УстановитьПараметр("СчетаВыручкиНеЕНВД",	ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
			Запрос.УстановитьПараметр("ЕНВД", 				Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
			Запрос.УстановитьПараметр("НеЕНВД", 			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 КАК НоменклатурнаяГруппа,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , , , СчетКт В ИЕРАРХИИ (&СчетаВыручкиЕНВД), &НоменклатурныеГруппы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКтВыручка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|				&НачДата,
			|				&КонДата,
			|				,
			|				СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
			|				&СубконтоЗатрат,
			|				,
			|				,
			|				Организация = &Организация
			|					И СубконтоДт2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НЕЕНВД) КАК ХозрасчетныйОборотыДтКт
			|		ПО (ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1)
			|ГДЕ
			|	(НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2 ЕСТЬ NULL )";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Ложь;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Неверно указана номенклатурная группа для доходов и расходов.
					|По номенклатурной группе " + ВыборкаОшибок.НоменклатурнаяГруппа + " обнаружены обороты по кредиту счета 90.01.2 и обороты по дебету счетов 20,23,25,26 по статьям затрат с признаком ""Не ЕНВД"" " + ВыборкаОшибок.СтатьяЗатрат + ". 
					|Если эта номенклатурная группа отражает вид деятельности, облагаемый ЕНВД, то исправьте признак на ""ЕНВД"" в указанной статье.
					|Если эта номенклатурная группа отражает вид деятельности, не облагаемый ЕНВД, то исправьте счет 90.01.2 на 90.01.1.";
					СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1 КАК НоменклатурнаяГруппа,
			|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , , , СчетКт В ИЕРАРХИИ (&СчетаВыручкиНЕЕНВД), &НоменклатурныеГруппы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКтВыручка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|				&НачДата,
			|				&КонДата,
			|				,
			|				СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
			|				&СубконтоЗатрат,
			|				,
			|				,
			|				Организация = &Организация
			|					И СубконтоДт2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД) КАК ХозрасчетныйОборотыДтКт
			|		ПО (ХозрасчетныйОборотыДтКт.СубконтоДт1 = ХозрасчетныйОборотыДтКтВыручка.СубконтоКт1)
			|ГДЕ
			|	(НЕ ХозрасчетныйОборотыДтКт.СубконтоДт2 ЕСТЬ NULL )";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Ложь;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Неверно указана номенклатурная группа для доходов и расходов.
					|По номенклатурной группе " + ВыборкаОшибок.НоменклатурнаяГруппа + " обнаружены обороты по кредиту счета 90.01.1 и обороты по дебету счетов 20,23,25,26 по статьям затрат с признаком ""ЕНВД"" " + ВыборкаОшибок.СтатьяЗатрат + ". 
					|Если эта номенклатурная группа отражает вид деятельности, не облагаемый ЕНВД, то исправьте счет 90.01.2 на 90.01.1.
					|Если эта номенклатурная группа отражает вид деятельности, облагаемый ЕНВД, то исправьте счет 90.01.1 на 90.01.2.";
					СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		//Записи о выпуске по регистру бухгалтерии не совпадают с записями о выпуске в регистре накопления
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", 	СчетаПрямыхЗатрат);
		Запрос.УстановитьПараметр("НоменклатурныеГруппы",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборотКт) КАК СуммаОборот,
		|	СУММА(ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот) КАК ПлановаяСтоимостьОборот,
		|	ХозрасчетныйОборотыДтКт.Субконто1 КАК НоменклатурнаяГруппа
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Регистратор, Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат), &НоменклатурныеГруппы, Организация = &Организация, , ) КАК ХозрасчетныйОборотыДтКт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
		|		ПО ХозрасчетныйОборотыДтКт.Счет = ВыпускПродукцииУслугОбороты.СчетЗатрат
		|			И ХозрасчетныйОборотыДтКт.Субконто1 = ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа
		|			И ХозрасчетныйОборотыДтКт.Подразделение = ВыпускПродукцииУслугОбороты.Подразделение
		|ГДЕ
		|	(НЕ ХозрасчетныйОборотыДтКт.Регистратор = &ТекущийДокумент)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Субконто1
		|
		|ИМЕЮЩИЕ
		|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборотКт) < СУММА(ВыпускПродукцииУслугОбороты.ПлановаяСтоимостьОборот)";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Ложь;
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				ТекстСообщения = "Неверно отражен выпуск продукции или услуг.
				|Отсутствуют записи в  регистре накопления ""Выпуск продукции и услуг"" для выпуска продукции (полуфабрикатов, товаров, услуг) по номенклатурной группе " + ВыборкаОшибок.НоменклатурнаяГруппа + ". 
				|Создайте записи о выпуске в указанном регистре или отражайте выпуск с помощью документов ""Отчет производства за смену"", ""Акт об оказании услуг производственного характера"",  ""Поступление из переработки"".";
				СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.НоменклатурнаяГруппа,  Истина, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		//Не указано применение ЕНВД в учетной политике, но использованы статьи с видом ЕНВД и распределяемые
		Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
			
			ВидыДеятельностиЕНВД = Новый Массив();
			ВидыДеятельностиЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
			
			Запрос.УстановитьПараметр("СчетаЗатрат", 		СчетаЗатрат);
			Запрос.УстановитьПараметр("Счет44", 		    ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
			Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
			Запрос.УстановитьПараметр("ВидыДеятельностиЕНВД",ВидыДеятельностиЕНВД);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СтатьяЗатрат
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаЗатрат) Или СчетДт В ИЕРАРХИИ (&Счет44), &СтатьиЗатрат, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
			|ГДЕ
			|	ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&ВидыДеятельностиЕНВД)";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Отказ = Ложь;
				ВыборкаОшибок = Результат.Выбрать();
				Пока ВыборкаОшибок.Следующий() Цикл
					ТекстСообщения = "Не указано применение ЕНВД.
					|В записях регистра сведений ""Учетная политика"" на " + НачалоГода(СтруктураШапкиДокумента.Дата) + " не установлен флаг ""Организация - плательщик ЕНВД"",
					|но отражено признание расходов по видам деятельности, облагаемым ЕНВД, по статье затрат """ + ВыборкаОшибок.СтатьяЗатрат + """.
					|Установите флаг ""Организация - плательщик ЕНВД"" (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"") 
					|или установите для указанной статьи затрат назначение: ""Предпринимательская деятельность, не облагаемая ЕНВД""";
					СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.СтатьяЗатрат, Истина, ЭтотОбъект);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		
		//Транспортные расходы 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("Счет_44_01", 		ПланыСчетов.Хозрасчетный.ИздержкиОбращения);
		Запрос.УстановитьПараметр("СтатьиЗатрат", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("Транспортные", 		Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
		Запрос.УстановитьПараметр("Распределяемые", 	Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
		Запрос.УстановитьПараметр("ЕНВД", 				Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОборотыДтКт.СчетДт <> &Счет_44_01
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НеВерныйСчет,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Распределяемые,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОборотыДтКт.СубконтоДт1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЕНВД,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачДата,
		|			&КонДата,
		|			Регистратор,
		|			,
		|			&СтатьиЗатрат,
		|			,
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1.ВидРасходовНУ = &Транспортные) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор <> &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Регистратор,
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				Если ВыборкаОшибок.НеВерныйСчет > 0 Тогда
					Отказ = Ложь;
					ТекстСообщения = "Неверно указан счет учета транспортных расходов.
					|Обнаружены обороты по дебету счета " + ВыборкаОшибок.СчетДт + " по статьям " + ВыборкаОшибок.СубконтоДт1 + " с видом расходов ""Транспортные расходы"" в документе " + ВыборкаОшибок.Регистратор + ".
					|Если в указанном документе отражены транспортные расходы, то укажите счет учета затрат - 44.01.
					|Если отражены иные расходы, то укажите статью затрат с видом, отличным от вида ""Транспортные расходы"".";
					СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
				Если ВыборкаОшибок.Распределяемые > 0 Тогда
					Отказ = Ложь;
					ТекстСообщения = "Неверно указан вид статьи учета транспортных расходов.
					|Обнаружены обороты по дебету счета " + ВыборкаОшибок.СчетДт + " по статьям " + ВыборкаОшибок.СубконтоДт1 + " с признаком ""Относятся ко всем видам деятельности"" в документе " + ВыборкаОшибок.Регистратор + ".
					|Если в указанном документе отражены транспортные расходы, то для этой статьи затрат укажите признак ""Предпринимательская деятельность, не облагаемая ЕНВД"".
					|Если отражены иные расходы, то укажите статью затрат с видом, отличным от вида ""Транспортные расходы"".";
					СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
				Если ВыборкаОшибок.ЕНВД > 0 Тогда
					Отказ = Ложь;
					ТекстСообщения = "Неверно указан вид статьи учета транспортных расходов.
					|Обнаружены обороты по дебету счета " + ВыборкаОшибок.СчетДт + " по статьям " + ВыборкаОшибок.СубконтоДт1 + " с признаком ""Предпринимательская деятельность, облагаемая ЕНВД"" в документе " + ВыборкаОшибок.Регистратор + ".
					|Если в указанном документе отражены транспортные расходы, то для этой статьи затрат укажите признак ""Предпринимательская деятельность, не облагаемая ЕНВД"".
					|Если отражены иные расходы, то укажите статью затрат с видом, отличным от вида ""Транспортные расходы"".";
					СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		
		//Закрытие счета 91
		ПрочиеДоходыИрасходы = Новый Массив();
		ПрочиеДоходыИрасходы.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		ПрочиеДоходыИрасходы.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	СтруктураШапкиДокумента.Ссылка);
		
		Запрос.УстановитьПараметр("Счет_91_01", 			ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("Счет_91_02", 			ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		Запрос.УстановитьПараметр("ПрочиеДоходыИрасходы", 	ПрочиеДоходыИрасходы);
		Запрос.УстановитьПараметр("СтатьиДоходовИРасходов",	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		Запрос.УстановитьПараметр("ПустаяСтатья", 		Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка());
		Запрос.УстановитьПараметр("Распределяемые", 	Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.Субконто1 = &ПустаяСтатья
		|				ТОГДА 0
		|			КОГДА ХозрасчетныйОбороты.Счет = &Счет_91_01
		|					И ХозрасчетныйОбороты.СуммаОборотКт > 0
		|					И ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Распределяемые,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.Субконто1 = &ПустаяСтатья
		|					ИЛИ ХозрасчетныйОбороты.Субконто1 ЕСТЬ NULL 
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПустоеСубконто,
		|	ХозрасчетныйОбороты.СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Регистратор, Счет В ИЕРАРХИИ (&ПрочиеДоходыИрасходы), &СтатьиДоходовИРасходов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.СуммаОборот";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаОшибок = Результат.Выбрать();
			Пока ВыборкаОшибок.Следующий() Цикл
				Если ВыборкаОшибок.Распределяемые > 0 Тогда
					Отказ = Ложь;
					ТекстСообщения = "Неверно указан признак статьи прочих доходов
					|Обнаружены обороты по кредиту счета 91.01 по статьям прочих доходов, относящихся к разным видам деятельности в документе " + ВыборкаОшибок.Регистратор + ".
					|Для таких доходов укажите статьи доходов с признаком ""Предпринимательская деятельность, не облагаемая ЕНВД"" или ""Предпринимательская деятельность, облагаемая ЕНВД""";
					СообщитьОбОшибкеРегОперации(ТекстСообщения,ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
				Если ВыборкаОшибок.ПустоеСубконто > 0 Тогда
					Отказ = Ложь;
					ТекстСообщения = "Не указана аналитика для прочих доходов и расходов.
					|Обнаружены обороты по счету 91, по которым в проводках не указаны статьи прочих доходов и расходов в документе " + ВыборкаОшибок.Регистратор + ".
					|Рекомендуется заполнить колонку ""Субконто"" в этом документе"; 
					СообщитьОбОшибкеРегОперации(ТекстСообщения, ВыборкаОшибок.Регистратор, Истина, ЭтотОбъект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		//Нет ставок налога на прибыль
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Дата", КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.Текст="
		|ВЫБРАТЬ
		|	СтавкиНалогаНаПрибыльСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыль.СрезПоследних(&Дата) КАК СтавкиНалогаНаПрибыльСрезПоследних
		|ГДЕ
		|	СтавкиНалогаНаПрибыльСрезПоследних.СтавкаФБ <> 0 И СтавкиНалогаНаПрибыльСрезПоследних.СтавкаСубъектРФ <> 0
		|";
		Если Запрос.Выполнить().Пустой() Тогда
			Отказ = Ложь;
			ТекстСообщения = "Не указана ставка налога на прибыль.                              
			|Отсутствуют записи в регистре сведений ""Ставки налога на прибыль"" на " + Формат(НачалоГода(СтруктураШапкиДокумента.Дата), "ДФ=дд.ММ.гггг") + ".
			|Установите ставку налога на прибыль (меню ""Предприятие"" - ""Ставки налога на прибыль"").";
			СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);			
		КонецЕсли;
		
		//Убыток прошлого года не перенесен на будущее
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Дата", 				НачалоГода(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Счет", 				ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
		Запрос.УстановитьПараметр("ТекущийУбыток", 		Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &Счет,, Организация = &Организация И Субконто1 = &ТекущийУбыток) КАК ХозрасчетныйОстатки
		|";
		Результат=Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Ложь;
			ТекстСообщения = "Не перенесен убыток прошлого года.
			|Обнаружен остаток на начало года на счете 09 по виду ""Убыток текущего периода"".
			|Рекомендуется перед реформацией баланса прошлого года ввести проводки с датой конца прошлого года:
			|С кредита счета 09 по виду ""Убыток текущего периода"" в дебет счета 09 по виду ""Расходы будущих периодов"" с датой конца прошлого года на сумму остатка по виду ""Убыток текущего периода"".
			|С кредита счета 99 в дебет счета 97 по статье РБП с видом ""Убытки прошлых лет"" на положительную сумму налогового учета и отрицательную сумму временных разниц, равную сумме убытка";
			
			СообщитьОбОшибкеРегОперации(ТекстСообщения,, Истина, ЭтотОбъект);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры     

Функция ПроверкаПовторовВидовОпераций(Отказ, Заголовок) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Комментарий",  "#Движения документа");
	Запрос.УстановитьПараметр("ВидОперации",  ВидОперации);
	Запрос.УстановитьПараметр("ЭтаОперация",  Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИсточникДанных.Ссылка КАК РегламентнаяОперация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ВидОперации = &ВидОперации
	|	И ИсточникДанных.Ссылка <> &ЭтаОперация
	|	И ИсточникДанных.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ИсточникДанных.Организация = &Организация
	|";
	Если ЭтоНовый() Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст, "И ИсточникДанных.Ссылка <> &ЭтаОперация", "");
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьОбОшибке("Повтор регламентной операции
	|Регламентная операции с видом """ + ВидОперации + """ была создана ранее
	|Рекомендуется отменить создание этой операции и воспользововаться той, что уже существует", Отказ, Заголовок);
	Возврат Ложь;
Конецфункции

Функция ЗаполнитьСтруктуруШапкиДокумента(Отказ = Ложь, Заголовок) Экспорт
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("УчетнаяПолитика"      , ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, СтруктураШапкиДокумента.Организация));
	СтруктураШапкиДокумента.Вставить("ГоловноеПодразделение", ?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация), Организация.ГоловнаяОрганизация, Организация));
	СтруктураШапкиДокумента.Вставить("Предприниматель"      , (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН);
	СтруктураШапкиДокумента.Вставить("ПрименениеЕНВД"       , ПрименениеЕНВД(СтруктураШапкиДокумента.Организация, мКонДата));
	//	СтруктураШапкиДокумента.Вставить("РазныеСтавкиНалогаНаПрибыль", Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Получить());
	
	СписокОП = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокОП.Добавить(Организация.Ссылка, Организация.Наименование);
	СтруктураШапкиДокумента.Вставить("СписокОП", СписокОП);
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация.ГоловнаяОрганизация) Тогда
		ЕстьОбособленныеПодразделения = Истина;
	Иначе
		ЕстьОбособленныеПодразделения = СписокОП.Количество() > 1;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ЕстьОбособленныеПодразделения", ЕстьОбособленныеПодразделения);
	
	Если СтруктураШапкиДокумента.УчетнаяПолитика = Неопределено Тогда
		ТекстСообщения = "Не установлена учетная политика
		|Отсутствуют записи в регистре сведений ""Учетная политика"" на " + НачалоГода(СтруктураШапкиДокумента.Дата) + "
		|Установите учетную политику (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"" - закладка ""Налог на прибыль"" - кнопка ""Указать ставки налога на прибыль"")";
		СообщитьОбОшибкеРегОперации(ТекстСообщения,СтруктураШапкиДокумента.Организация.Ссылка, Отказ, ЭтотОбъект);
	Конецесли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки,СтрокаСуммирования)
	
	Если ТаблицаДвижений.Количество()=0 Тогда Возврат; КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	
	ВспомогательныйРасчет=ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(Ссылка);
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	ВспомогательныйРасчет.Записать();
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

Процедура РассчитатьРазницуДляСуммыУпр(ТаблицаОстатков, СтруктураШД, стрСуммаРуб, стрСуммаВал, Вал=Истина)
	ВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	//КратностьВалютыУправленческогоУчета=1;
	//КурсВалютыУправленческогоУчета=1;
	//
	//Запрос=Новый Запрос;
	//Запрос.УстановитьПараметр("НаДату", Дата);
	//Запрос.УстановитьПараметр("Валюта", ВалютаУправленческогоУчета);
	//Запрос.Текст="
	//|ВЫБРАТЬ
	//|	КурсыВалютСрезПоследних.Курс,
	//|	КурсыВалютСрезПоследних.Кратность
	//|ИЗ
	//|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
	//|";
	//тзДанные=Запрос.Выполнить().Выгрузить();
	//Если тзДанные.Количество()>0 Тогда
	//	КратностьВалютыУправленческогоУчета=тзДанные[0].Кратность;
	//	КурсВалютыУправленческогоУчета=тзДанные[0].Курс;
	//КонецЕсли; 
	
	СтрокиДляУдаления = Новый Массив;
	
	Для каждого СтрокаТаблицы из ТаблицаОстатков Цикл
		
		//Если Вал Тогда
		//	СтрокаТаблицы.СуммаВал= 
		//	ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[стрСумма], 
		//	СтрокаТаблицы.Валюта, ВалютаУправленческогоУчета, 
		//	СтрокаТаблицы.КурсВалютыДенежныхСредств, КурсВалютыУправленческогоУчета,
		//	СтрокаТаблицы.КратностьВалютыДенежныхСредств, КратностьВалютыУправленческогоУчета) 
		//	- СтрокаТаблицы.СуммаВал;
		//	
		//	Если СтрокаТаблицы.СуммаВал=0 Тогда
		//		СтрокиДляУдаления.Добавить(СтрокаТаблицы);
		//	КонецЕсли;
		//Иначе	
		//СтруктураКурса = МодульВалютногоУчета.КурсВалюты(СтрокаТаблицы.Валюта, Дата);
		СтрокаТаблицы[стрСуммаРуб]= 
		ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[стрСуммаВал], 
		СтрокаТаблицы.Валюта, ВалютаРегламентированногоУчета, 
		СтрокаТаблицы.КурсВалютыДенежныхСредств, 1,
		СтрокаТаблицы.КратностьВалютыДенежныхСредств, 1) 
		- СтрокаТаблицы[стрСуммаРуб];
		
		СтрокаТаблицы[стрСуммаВал]=0;
		Если СтрокаТаблицы[стрСуммаРуб]=0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
		//КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого Элемент Из СтрокиДляУдаления Цикл
		ТаблицаОстатков.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рассчитывает курсовые разницы и формирует проводки БУ, НУ и движения КУДиР для УСН
//
// Параметры
//  СтруктураШапкиДокумента	– <Структура> – структура шапки документа, откуда вызвана процедура
//  ДвиженияДокумента		– <Коллекция> – коллекция движений документа, откуда вызвана процедура
//  Отказ					– <Булево> – при возникновении ошибок процедура возвращает в этот параметр значение Истина
//  Заголовок				– <Строка> – заголовок сообщений об ошибках
//  СтруктураПараметров		– <Структура> – параметры выполнения переоценки. 
//									Используется только при вызове из документа "Закрытие месяца"
//
Процедура ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, ДвиженияДокумента, Отказ, Заголовок, СтруктураПараметров = Неопределено) Экспорт
	
	Дата        = СтруктураШапкиДокумента.Дата;
	Организация = СтруктураШапкиДокумента.Организация;
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	РегламентнаяПереоценка = СтруктураПараметров.Свойство("РегламентнаяПереоценка") И СтруктураПараметров.РегламентнаяПереоценка;
	
	Если РегламентнаяПереоценка Тогда
		ОтражатьВ_НУ        = СтруктураПараметров.ОтражатьВНалоговомУчете;
		ПрименениеПБУ18     = СтруктураПараметров.ПрименениеПБУ18;
		ОтражатьВ_УСН       = СтруктураПараметров.ОтражатьВНалоговомУчетеУСН;
		ОтражатьВ_УСНДоходы = СтруктураПараметров.ОтражатьВНалоговомУчетеУСНДоходы;
		ГраницаОстатков     = СтруктураПараметров.ГраницаОстатков;
		
		//		ТаблицаРасчетаПереоценкиВалюты = СтруктураПараметров.ТаблицаРасчетаПереоценкиВалюты;
	Иначе
		ОтражатьВ_НУ        = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
		ПрименениеПБУ18     = СтруктураШапкиДокумента.Свойство("ПрименениеПБУ18") И СтруктураШапкиДокумента.ПрименениеПБУ18;
		ОтражатьВ_УСН       = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;
		ОтражатьВ_УСНДоходы = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСНДоходы") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы;
		ГраницаОстатков     = Дата;
	КонецЕсли;
	
	ОтражатьВ_УСН       = ОтражатьВ_УСН И Дата >= '20060101';
	ОтражатьВ_УСНДоходы = ОтражатьВ_УСНДоходы И Дата >= '20060101';
	
	// До 2008 года одинаково переоценивались все остатки по балансовым счетам в иностранной валюте
	// С 2008 года в БУ не переоцениваются авансы в валюте, остальные остатки по балансовым счетам переоцениваются
	// В налоговом учете по налогу на прибыль курсовые разницы по переоценке авансов отражаются, 
	// источник данных для курсовых разниц НУ - результат переоценки забалансового счета ВАЛ
	
	Правила2008 = (Дата >= '20080101');
	
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	Запрос.УстановитьПараметр("ИсключаемыеВалютныеСчета", ИсключаемыеВалютныеСчета.ВыгрузитьКолонку("Счет"));
	
	
	Запрос.Текст="ВЫБРАТЬ
	             |	Хозрасчетный.Ссылка КАК Счет
	             |ИЗ
	             |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	             |ГДЕ
	             |	Хозрасчетный.Валютный
	             |	И НЕ Хозрасчетный.Забалансовый
	             |	И НЕ Хозрасчетный.Ссылка В(&ИсключаемыеВалютныеСчета)";
	СчетаПодлежащиеПереоценке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета расчетов с контрагентами
	// Все балансовые счета, подлежащие переоценке, на которых установлены виды субконто Контрагенты, Договоры, Документы расчетов
	
	Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке", СчетаПодлежащиеПереоценке);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаСубконтоКонтрагенты.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДоговоры
	|		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДоговоры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДокументы
	|		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДокументы.Ссылка
	|ГДЕ
	|	СчетаСубконтоКонтрагенты.Ссылка В (&СчетаПодлежащиеПереоценке)
	|	И СчетаСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И СчетаСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
//	|	И СчетаСубконтоДокументы.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|";
	СчетаРасчетовСКонтрагентами=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Если организация - плательщик налога на прибыль, в 2008 году в список переоцениваемых 
	// добавляется забалансовый счет ВАЛ
	
	Если ОтражатьВ_НУ И Правила2008 Тогда
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте);
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте);
	КонецЕсли;
	
	// Получение остатков для проведения переоценки
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются
	Запрос.УстановитьПараметр("СчетаРасчетовСКонтрагентами", СчетаРасчетовСКонтрагентами);
	
	Если РегламентнаяПереоценка Тогда
		// Получение всех остатков по всем счетам, подлежащим переоценке
		// По счетам расчетов в результат не включаются остатки по договорам в у.е.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ХозрасчетныйОстатки.Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидДоговора,
		|	(НЕ ХозрасчетныйОстатки.Счет.Забалансовый) КАК ОтражатьВ_БУ,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&ГраницаОстатков, Счет В (&СчетаПодлежащиеПереоценке), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки";
		
		ВалютныеОстатки = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		// Получение остатков только по счетам и субконто, которые уже содержатся в переданном наборе записей регистра "Хозрасчетный"
		// Оборотные субконто переданного набора записей пропускаются
		// Если до 2008 года учет по документам на счетах расчетов в иностранной валюте не велся (определяем по субконто счета 60) 
		// 		и переоценивается документ с датой до 2008 года - субконто "ДокументыРасчетовСКонтрагентами" в наборе записей очищается
		
		// Формирование таблицы счетов и субконто для переоценки
		// Заполнение полей ИспользоватьСубконтоХ:
		// 		- если субконто с номером Х нет на счете - Ложь
		// 		- если субконто с номером Х есть и оно необоротное - Истина
		// 		- если субконто с номером Х есть и оно оборотное - Ложь
		// 		- если субконто с номером Х - "ДокументыРасчетовСКонтрагентами" 
		//			и до 2008 года учет по документам не велся и дата документа до 2008 года - Ложь
		
		ТаблицаДляПереоценки = Новый ТаблицаЗначений;
		ТаблицаДляПереоценки.Колонки.Добавить("Счет",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаДляПереоценки.Колонки.Добавить("Валюта",                Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто1", Новый ОписаниеТипов("Булево")); 
		ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто2", Новый ОписаниеТипов("Булево"));
		ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто3", Новый ОписаниеТипов("Булево"));
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто1");
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто2");
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто3");
		
		ВидСубконтоДокументыРасчетов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
		ОчищатьДокументРасчетов = НЕ Правила2008 И ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками.ВидыСубконто.Найти(ВидСубконтоДокументыРасчетов) = Неопределено;
		
		Для каждого ПроводкаБУ из ДвиженияДокумента.Хозрасчетный Цикл
			СчетДтПереоценивается = СчетаПодлежащиеПереоценке.Найти(ПроводкаБУ.СчетДт) <> Неопределено;
			Если СчетДтПереоценивается Тогда
				СтрокаДляПереоценки        = ТаблицаДляПереоценки.Добавить();
				СтрокаДляПереоценки.Счет   = ПроводкаБУ.СчетДт;
				СтрокаДляПереоценки.Валюта = ПроводкаБУ.ВалютаДт;
				
				ВидыСубконтоСчета = ВидыСубконтоСчетов[ПроводкаБУ.СчетДт];
				Если ВидыСубконтоСчета = Неопределено Тогда
					ВидыСубконтоСчета = ПроводкаБУ.СчетДт.ВидыСубконто;
					ВидыСубконтоСчетов.Вставить(ПроводкаБУ.СчетДт, ВидыСубконтоСчета);
				КонецЕсли;
				
				Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
					НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
					Если СтрокаВидаСубконто.ВидСубконто = ВидСубконтоДокументыРасчетов
						И ОчищатьДокументРасчетов 
						И НЕ СтрокаВидаСубконто.Предопределенное 
						Тогда
						ПроводкаБУ.СубконтоДт[ВидСубконтоДокументыРасчетов] = Неопределено;
						ИспользоватьСубконто = Ложь;
					Иначе
						ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
					КонецЕсли;
					СтрокаДляПереоценки["ИспользоватьСубконто" + НомерСубконто] = ИспользоватьСубконто;
					Если ИспользоватьСубконто Тогда
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = ПроводкаБУ.СубконтоДт[СтрокаВидаСубконто.ВидСубконто];
					Иначе
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СчетКтПереоценивается = СчетаПодлежащиеПереоценке.Найти(ПроводкаБУ.СчетКт) <> Неопределено;
			Если СчетКтПереоценивается Тогда
				СтрокаДляПереоценки        = ТаблицаДляПереоценки.Добавить();
				СтрокаДляПереоценки.Счет   = ПроводкаБУ.СчетКт;
				СтрокаДляПереоценки.Валюта = ПроводкаБУ.ВалютаКт;
				
				ВидыСубконтоСчета = ВидыСубконтоСчетов[ПроводкаБУ.СчетКт];
				Если ВидыСубконтоСчета = Неопределено Тогда
					ВидыСубконтоСчета = ПроводкаБУ.СчетКт.ВидыСубконто;
					ВидыСубконтоСчетов.Вставить(ПроводкаБУ.СчетКт, ВидыСубконтоСчета);
				КонецЕсли;
				
				Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
					НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
					Если СтрокаВидаСубконто.ВидСубконто = ВидСубконтоДокументыРасчетов
						И ОчищатьДокументРасчетов 
						И НЕ СтрокаВидаСубконто.Предопределенное 
						Тогда
						ПроводкаБУ.СубконтоКт[ВидСубконтоДокументыРасчетов] = Неопределено;
						ИспользоватьСубконто = Ложь;
					Иначе
						ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
					КонецЕсли;
					СтрокаДляПереоценки["ИспользоватьСубконто" + НомерСубконто] = ИспользоватьСубконто;
					Если ИспользоватьСубконто Тогда
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = ПроводкаБУ.СубконтоКт[СтрокаВидаСубконто.ВидСубконто];
					Иначе
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		НетПереоцениваемыхСчетов = (ТаблицаДляПереоценки.Количество() = 0);
		Если НетПереоцениваемыхСчетов Тогда Возврат; КонецЕсли;
		
		ТаблицаДляПереоценки.Свернуть("Счет, Субконто1, Субконто2, Субконто3, ИспользоватьСубконто1, ИспользоватьСубконто2, ИспользоватьСубконто3, Валюта");
		
		// По строкам подготовленной таблицы для переоценки выполняются запросы к остаткам
		// По счетам расчетов в результат не включаются остатки по договорам в у.е.
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.Валюта,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора,
		|	(НЕ ХозрасчетныйОстатки.Счет.Забалансовый) КАК ОтражатьВ_БУ,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОстатков, Счет = &Счет, &ВидыСубконто,
		|				Организация = &Организация
		|				И Валюта = &Валюта
		|				И Субконто1 = &Субконто1
		|				И Субконто2 = &Субконто2
		|				И Субконто3 = &Субконто3) КАК ХозрасчетныйОстатки
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки
		|";
		ВалютныеОстатки = Новый ТаблицаЗначений;
		Для каждого СтрокаДляПереоценки Из ТаблицаДляПереоценки Цикл
			
			Запрос.УстановитьПараметр("Счет",         СтрокаДляПереоценки.Счет);
			Запрос.УстановитьПараметр("Валюта",       СтрокаДляПереоценки.Валюта);
			Запрос.УстановитьПараметр("Субконто1",    СтрокаДляПереоценки.Субконто1);
			Запрос.УстановитьПараметр("Субконто2",    СтрокаДляПереоценки.Субконто2);
			Запрос.УстановитьПараметр("Субконто3",    СтрокаДляПереоценки.Субконто3);
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаДляПереоценки.Счет];
			Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконтоСчета.ВыгрузитьКолонку("ВидСубконто"));
			
			ТекстЗапроса = ШаблонТекстаЗапроса;
			
			ЭтоСчетРасчетов = СчетаРасчетовСКонтрагентами.Найти(СтрокаДляПереоценки.Счет) <> Неопределено;
			Если НЕ ЭтоСчетРасчетов Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора",
				"НЕОПРЕДЕЛЕНО КАК ВидДоговора");
			КонецЕсли;
			
			Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто1 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто1", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
				|				И Субконто1 = &Субконто1", "");
			КонецЕсли;
			Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто2 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто2", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
				|				И Субконто2 = &Субконто2", "");
			КонецЕсли;
			Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто3 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто3", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
				|				И Субконто3 = &Субконто3", "");
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВалютныеОстатки.Количество() = 0 Тогда
				ВалютныеОстатки = Результат.Выгрузить();
			Иначе
				СтрокаОстатка     = ВалютныеОстатки.Добавить();
				ТаблицаРезультата = Результат.Выгрузить();
				ЗаполнитьЗначенияСвойств(СтрокаОстатка, ТаблицаРезультата[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Подготовлены остатки для переоценки
	
	Если ВалютныеОстатки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Если ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы Тогда
		
		// Счета, результат переоценки которых нужно отразить в УСН
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Валютный
		|		И Хозрасчетный.Ссылка В ИЕРАРХИИ 
		|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))";
		
		СчетаПереоценкиУСН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		// Данные по счетам, переоценка которых отражается в УСН
		
		ТаблицаКурсовыхРазницУСН = Новый ТаблицаЗначений;
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Счет",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Сумма",  Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если Правила2008 Тогда
		
		// Счета расчетов с поставщиками - используются для определения авансов по валютным договорам с комиссионерами и комитентами
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Валютный
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
		|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))";
		
		СчетаРасчетовСПоставщиками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		// Счета расчетов с покупателями - используются для определения авансов по валютным договорам с комиссионерами и комитентами
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Валютный
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
		|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))";
		
		СчетаРасчетовСПокупателями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
	КонецЕсли;
	
	// Формирование проводок по курсовым разницам в БУ и НУ
	
	КурсыВалют = Новый Соответствие; // курсы валют кэшируются
	
	СтатьяКурсовыхРазниц = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы;
	
	Для каждого СтрокаОстатка из ВалютныеОстатки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОстатка.Валюта) Тогда
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОстатка.Счет];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = СтрокаОстатка.Счет.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(СтрокаОстатка.Счет, ВидыСубконтоСчета);
			КонецЕсли;
			
			СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты. Переоценка остатка не производится." + Символы.ПС
			+ "	- счет: " + СтрокаОстатка.Счет + " <" + СтрокаОстатка.Счет.Наименование + ">";
			Для НомерСубконто = 1 по ВидыСубконтоСчета.Количество() Цикл
				Если ВидыСубконтоСчета[НомерСубконто-1].ТолькоОбороты Тогда
					Продолжить;
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения + Символы.ПС 
				+ "		- субконто <" + Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + "> : """ + СтрокаОстатка["Субконто" + НомерСубконто] + """";
			КонецЦикла;
			СтрокаСообщения = СтрокаСообщения + Символы.ПС 
			+ "		валютный остаток: " + Формат(СтрокаОстатка.ВалютнаяСуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-") + " , рублевый остаток: " + Формат(СтрокаОстатка.СуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-");
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок);
			Продолжить;
			
		КонецЕсли;  
		
		Если НЕ Правила2008 Тогда
			
			// До 2008 года одинаково переоценивались все остатки по балансовым счетам 
			
			ПереоцениватьОстаток = СтрокаОстатка.ОтражатьВ_БУ;
			
		Иначе
			
			// С 2008 года в БУ не переоцениваются авансы в валюте
			// Аванс или задолженность - определяется по виду остатка на счете (дебиторская/кредиторская)
			// и по виду договора
			// Вид договора в таблице остатков определен только для счетов расчетов
			
			Если НЕ ЗначениеЗаполнено(СтрокаОстатка.ВидДоговора) Тогда
				
				ЭтоАванс = Ложь;
				
			ИначеЕсли СтрокаОстатка.ВалютнаяСуммаОстаток = 0 Тогда
				
				ЭтоАванс = Ложь;
				
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
				ЭтоАванс = СтрокаОстатка.ВалютнаяСуммаОстаток < 0;
				
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				
				ЭтоАванс = СтрокаОстатка.ВалютнаяСуммаОстаток > 0;
				
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
				Если СтрокаОстатка.ВалютнаяСуммаОстаток > 0 Тогда
					ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
				Иначе
					ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
				КонецЕсли;
				
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				
				Если СтрокаОстатка.ВалютнаяСуммаОстаток > 0 Тогда
					ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
				Иначе
					ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
				КонецЕсли;
				
			Иначе //.Прочее
				
				ЭтоАванс = Ложь;
				
			КонецЕсли;
			
			ПереоцениватьОстаток = НЕ ЭтоАванс;
			
		КонецЕсли;
		
		Если НЕ ПереоцениватьОстаток Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКурса = КурсыВалют[СтрокаОстатка.Валюта];
		Если СтруктураКурса = Неопределено Тогда
			СтруктураКурса = МодульВалютногоУчета.КурсВалюты(СтрокаОстатка.Валюта, Дата);
			КурсыВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурса);
		КонецЕсли;
		
		ОстатокРуб = СтрокаОстатка.СуммаОстаток;
		ОстатокВал = СтрокаОстатка.ВалютнаяСуммаОстаток;
		РасчетныйОстатокРуб = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОстатокВал, 
		СтрокаОстатка.Валюта, ВалютаРегламентированногоУчета,
		СтруктураКурса.Курс, 1,
		СтруктураКурса.Кратность, 1);
		
		Если ОстатокРуб = РасчетныйОстатокРуб Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаПереоценки = РасчетныйОстатокРуб - ОстатокРуб;
		
		// Проводка по переоценке счета в БУ
		
		ПроводкаБУ = ?(РегламентнаяПереоценка, ДвиженияДокумента.Хозрасчетный.Добавить(), ДвиженияДокумента.Хозрасчетный.Вставить(0));
		
		ПроводкаБУ.Период      = Дата;
		ПроводкаБУ.Организация = Организация;
		ПроводкаБУ.Содержание  = "Переоценка валюты";
		
		ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОстатка.Счет];
		Если ВидыСубконтоСчета = Неопределено Тогда
			ВидыСубконтоСчета = СтрокаОстатка.Счет.ВидыСубконто;
			ВидыСубконтоСчетов.Вставить(СтрокаОстатка.Счет, ВидыСубконтоСчета);
		КонецЕсли;
		
		Если СуммаПереоценки < 0 Тогда
			Если СтрокаОстатка.ОтражатьВ_БУ Тогда
				ПроводкаБУ.СчетДт = СчетаЗакрытия90_91.Найти("Счет91РасходыДляПереоценки", "ТипСчета").Счет;//ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				ПроводкаБУ.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
				Если ПроводкаБУ.СчетДт.НалоговыйУчет Тогда
					ПроводкаБУ.СуммаНУДт= -СуммаПереоценки;
				КонецЕсли;	
			КонецЕсли;
			
			ПроводкаБУ.СчетКт = СтрокаОстатка.Счет;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоКт, 1, СтрокаОстатка.Субконто1, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоКт, 2, СтрокаОстатка.Субконто2, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоКт, 3, СтрокаОстатка.Субконто3, , , ВидыСубконтоСчета);
			
			ПроводкаБУ.ВалютаКт = СтрокаОстатка.Валюта;
			ПроводкаБУ.Сумма    = -СуммаПереоценки;
			Если ПроводкаБУ.СчетКт.НалоговыйУчет Тогда
				ПроводкаБУ.СуммаНУКт= -СуммаПереоценки;
			КонецЕсли;	
		Иначе
			Если СтрокаОстатка.ОтражатьВ_БУ Тогда
				ПроводкаБУ.СчетКт = СчетаЗакрытия90_91.Найти("Счет91ДоходыДляПереоценки", "ТипСчета").Счет;//ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				ПроводкаБУ.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
				Если ПроводкаБУ.СчетКт.НалоговыйУчет Тогда
					ПроводкаБУ.СуммаНУКт= СуммаПереоценки;
				КонецЕсли;	
			КонецЕсли;
			
			ПроводкаБУ.СчетДт = СтрокаОстатка.Счет;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоДт, 1, СтрокаОстатка.Субконто1, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоДт, 2, СтрокаОстатка.Субконто2, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоДт, 3, СтрокаОстатка.Субконто3, , , ВидыСубконтоСчета);
			
			ПроводкаБУ.ВалютаДт = СтрокаОстатка.Валюта;
			ПроводкаБУ.Сумма    = СуммаПереоценки;
			Если ПроводкаБУ.СчетДт.НалоговыйУчет Тогда
				ПроводкаБУ.СуммаНУДт= СуммаПереоценки;
			КонецЕсли;	
		КонецЕсли;
		
		//Если РегламентнаяПереоценка Тогда
		//	// При регламентной переоценке формируется таблица для записи расчета переоценки в служебный регистр сведений
		//	СтрокаРасчетаПереоценкиВалюты = ТаблицаРасчетаПереоценкиВалюты.Добавить();
		//	СтрокаРасчетаПереоценкиВалюты.Счет           = СтрокаОстатка.Счет;
		//	СтрокаРасчетаПереоценкиВалюты.Субконто1      = СтрокаОстатка.Субконто1;
		//	СтрокаРасчетаПереоценкиВалюты.Субконто2      = СтрокаОстатка.Субконто2;
		//	СтрокаРасчетаПереоценкиВалюты.Субконто3      = СтрокаОстатка.Субконто3;
		//	СтрокаРасчетаПереоценкиВалюты.Валюта         = СтрокаОстатка.Валюта;
		//	СтрокаРасчетаПереоценкиВалюты.СуммаВВалюте   = ОстатокВал;
		//	СтрокаРасчетаПереоценкиВалюты.СуммаВРублях   = ОстатокРуб;
		//	СтрокаРасчетаПереоценкиВалюты.КурсПереоценки = СтруктураКурса.Курс;
		//	СтрокаРасчетаПереоценкиВалюты.Сумма          = СуммаПереоценки;
		//	СтрокаРасчетаПереоценкиВалюты.ВидУчета       = Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка();			
		//КонецЕсли;
	КонецЦикла;
	
	// Формирование движений регистра КнигаУчетаДоходовИРасходов для УСН
	
	Если (ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы) И ТаблицаКурсовыхРазницУСН.Количество() > 0 Тогда
		
		РеквизитыПервичногоДокумента = НалоговыйУчет.ПолучитьОписаниеСодержанияКУДиР(СтруктураШапкиДокумента.Ссылка);
		
		ТаблицаКурсовыхРазницУСН.Свернуть("Валюта, Счет", "Сумма");
		
		Для Каждого СтрокаПереоценки Из ТаблицаКурсовыхРазницУСН Цикл
			Если СтрокаПереоценки.Сумма > 0 Тогда
				ЗаписьКУДиР                = ДвиженияДокумента.КнигаУчетаДоходовИРасходов.Добавить();
				ЗаписьКУДиР.Период         = СтруктураШапкиДокумента.Дата;
				ЗаписьКУДиР.Активность     = Истина;
				ЗаписьКУДиР.Организация    = СтруктураШапкиДокумента.Организация;
				ЗаписьКУДиР.Графа4         = СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа5         = СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа6         = 0;
				ЗаписьКУДиР.Графа7         = 0;
				ЗаписьКУДиР.НДС	           = 0;
				ЗаписьКУДиР.ЭтапПроведения = -1;
				ЗаписьКУДиР.Содержание     = "Доход от переоценки " + СтрокаПереоценки.Валюта 
				+ " на счете "+ СтрокаПереоценки.Счет + " """ + СтрокаПереоценки.Счет.Наименование + """";
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
				
			ИначеЕсли СтрокаПереоценки.Сумма < 0 И НЕ ОтражатьВ_УСНДоходы Тогда
				ЗаписьКУДиР                = ДвиженияДокумента.КнигаУчетаДоходовИРасходов.Добавить();
				ЗаписьКУДиР.Период         = СтруктураШапкиДокумента.Дата;
				ЗаписьКУДиР.Активность     = Истина;
				ЗаписьКУДиР.Организация    = СтруктураШапкиДокумента.Организация;
				ЗаписьКУДиР.Графа4         = 0;
				ЗаписьКУДиР.Графа5         = 0;
				ЗаписьКУДиР.Графа6         = - СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа7         = - СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.НДС	           = 0;
				ЗаписьКУДиР.ЭтапПроведения = -1;
				ЗаписьКУДиР.Содержание     = "Расходы от переоценки " + СтрокаПереоценки.Валюта 
				+ " на счете "+ СтрокаПереоценки.Счет + " """ + СтрокаПереоценки.Счет.Наименование + """";
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
			КонецЕсли;
		КонецЦикла;
		
		ДвиженияДокумента.КнигаУчетаДоходовИРасходов.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переоценку валютных счетов
//
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
	//Движения по регистрам бухгалтерии
	ОтражатьВ_НУ=НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН И НЕ СтруктураШапкиДокумента.Предприниматель;
	ОтражатьВ_УСНДоходы=Ложь;
	ОтражатьВ_УСН=?(СтруктураШапкиДокумента.ОрганизацияПрименяетУСН, НЕ ОтражатьВ_УСНДоходы, Ложь);
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("РегламентнаяПереоценка", Истина);
	СтруктураПараметров.Вставить("РегламентныйДокумент", ЭтотОбъект);
	СтруктураПараметров.Вставить("ГраницаОстатков",  Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));	
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете", ОтражатьВ_НУ);
	СтруктураПараметров.Вставить("ПрименениеПБУ18", СтруктураШапкиДокумента.ПрименениеПБУ18);
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСН", ОтражатьВ_УСН);
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", ОтражатьВ_УСНДоходы);
	
	ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Движения, Отказ, Заголовок, СтруктураПараметров);
	мПроводки.Записать(Ложь);
	
	//Двидения по регистрам накопления (Взаиморасчеты с контрагентами)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Контрагент,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.СуммаБухОстаток КАК СуммаБух,
	|	ИсточникДанных.СуммаВалОстаток КАК СуммаВал,
	|	ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КурсыВалют.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалют.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДокумента, Организация = &Организация) КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента) КАК КурсыВалют
	|		ПО КурсыВалют.Валюта = ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ГДЕ
	|	КурсыВалют.Курс ЕСТЬ НЕ NULL 
	|   И НЕ ИсточникДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов=&Валюта
	|
	|";
	тзДвиженияИсходные=Запрос.Выполнить().Выгрузить();
	
	тзДвижения=тзДвиженияИсходные.СкопироватьКолонки();
	тзДвижения.Колонки.Добавить("Период");
	тзДвижения.Колонки.Добавить("СуммаУпр");
	тзДвижения.Колонки.Добавить("Активность");
	тзДвижения.Колонки.Добавить("Регистратор");
	
	
	Для Каждого СтрокаТз ИЗ тзДвиженияИсходные Цикл	
		Если НЕ ЗначениеЗаполнено(СтрокаТз.ДоговорКонтрагента.ВидДоговора) Тогда
			ЭтоАванс = Ложь;
		ИначеЕсли СтрокаТз.СуммаВал = 0 Тогда
			ЭтоАванс = Ложь;
		ИначеЕсли СтрокаТз.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ЭтоАванс = СтрокаТз.СуммаВал < 0;
		ИначеЕсли СтрокаТз.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ЭтоАванс = СтрокаТз.СуммаВал > 0;
		Иначе //.Прочее
			ЭтоАванс = Ложь;
		КонецЕсли;
		ПереоцениватьОстаток = НЕ ЭтоАванс;
	
		Если ПереоцениватьОстаток Тогда
			ЗаполнитьЗначенияСвойств(тзДвижения.Добавить(),СтрокаТз);
		КонецЕсли;
	КонецЦикла;

	
	РассчитатьРазницуДляСуммыУпр(тзДвижения, СтруктураШапкиДокумента, "СуммаБух","СуммаВал", Ложь);
	
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	
	Движения.ВзаиморасчетыСКонтрагентами.Загрузить(тзДвижения);
	
	//Двидения по регистрам накопления (Денежные средства)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.БанковскийСчетКасса,
	|	ИсточникДанных.ВидДенежныхСредств,
	|	ИсточникДанных.СуммаОстаток КАК Сумма,
	|	ИсточникДанных.СуммаУпрОстаток КАК СуммаУпр,
	|	ИсточникДанных.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
	|	КурсыВалют.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалют.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаДокумента, Организация = &Организация) КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалют
	|		ПО КурсыВалют.Валюта = ИсточникДанных.БанковскийСчетКасса.ВалютаДенежныхСредств
	|ГДЕ
	|	КурсыВалют.Курс ЕСТЬ НЕ NULL И НЕ ИсточникДанных.БанковскийСчетКасса.ВалютаДенежныхСредств=&Валюта
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ДенежныеСредства.Остатки
	|";
	тзДвижения=Запрос.Выполнить().Выгрузить();
	тзДвижения.Колонки.Добавить("Период");
	тзДвижения.Колонки.Добавить("Активность");
	тзДвижения.Колонки.Добавить("Регистратор");
	
	РассчитатьРазницуДляСуммыУпр(тзДвижения, СтруктураШапкиДокумента, "Сумма","СуммаУпр", Ложь);
	
	тзДвижения.ЗаполнитьЗначения(Дата, "Период");
	тзДвижения.ЗаполнитьЗначения(Истина, "Активность");
	тзДвижения.ЗаполнитьЗначения(Ссылка, "Регистратор");
	
	Движения.ДенежныеСредства.Загрузить(тзДвижения);	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО КОРРЕКТИРОВКЕ СТОИМОСТИ НОМЕНКЛАТУРЫ

Процедура КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	СтруктураДопПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период", Дата);
	СтруктураДопПараметров.Вставить("Регистратор", ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", Неопределено);
	СтруктураДопПараметров.Вставить("Учет", "Бух");
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Массив);
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");
	
	КорректировкаСтоимости.КорректировкаСтоимости(Неопределено, мНачДата, мКонДата, СтруктураДопПараметров);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ

Процедура ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ)
	ТаблицаДолейКосвенныхРасходов = ПолучитьТаблицуДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента);
	Если ТаблицаДолейКосвенныхРасходов = Неопределено Тогда
		Отказ = Ложь;
		ТекстСообщения = "Нет данных о долях списания косвенных расходов
		|Не обнаружена регламентная операция ""Расчет долей списания косвенных расходов""
		|Выполните указанную операцию";
		СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОИЗВОДСТВЕННОЙ ЧАСТИ

Функция СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы = Истина)
	
	Счет = Неопределено;
	Если ОбщепроизводственныеРасходы Тогда
		Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы; // счет 25
	Иначе
		Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы; // счет 26
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

// Формируется запрос по косвенным затратам в котором собрана
// информация о косвенных затратах их способе их распределения.
//
Процедура СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы = Истина, РезультатЗапроса, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата",             мНачДата);
	Запрос.УстановитьПараметр("КонДата",             мКонГраница);
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат",  Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЕНВД",                Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	Запрос.Текст = "ВЫБРАТЬ
	|	Затраты.Счет КАК Счет,
	|	Затраты.Подразделение КАК Подразделение,
	|	Затраты.Организация КАК Организация,
	|	Затраты.Субконто1 КАК Субконто1,
	|	Затраты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	СУММА(Затраты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(Затраты.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|				ТОГДА Затраты.СуммаНУОборот
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|						ТОГДА 0
	|					ИНАЧЕ Затраты.СуммаНУОборот
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНуОборот,
	|	СУММА(Затраты.СуммаПРОборот) КАК СуммаПрОборот,
	|	СУММА(Затраты.СуммаВРОборот) КАК СуммаВрОборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты_Затраты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Месяц, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидыСубконто, Организация = &Организация, , ) КАК Затраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|		ПО (Правила.ВидЗатратНУ = Затраты.Субконто1.ВидРасходовНУ)
	|			И (ВЫБОР
	|				КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.Подразделение = Затраты.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СчетЗатрат = Затраты.Счет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.КорСчетЗатрат = Затраты.КорСчет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СтатьяЗатрат = Затраты.Субконто1
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Затраты.Счет,
	|	Затраты.Подразделение,
	|	Затраты.Организация,
	|	Затраты.Субконто1,
	|	Затраты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСпособовРаспределения.НалоговыйРежим КАК НалоговыйРежим,
	|	ВЫБОР
	|		КОГДА ТаблицаСпособовРаспределения.БазаРаспределения ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.БазаРаспределения
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоПодразделению
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСтатьеЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.РаспределениеПоСчету
	|		ИНАЧЕ ТаблицаСпособовРаспределения.РаспределениеПоОрганизации
	|	КОНЕЦ КАК Метод,
	|	ТаблицаСпособовРаспределения.СчетЗатрат,
	|	ТаблицаСпособовРаспределения.Подразделение,
	|	ТаблицаСпособовРаспределения.СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоПодразделению
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСтатьеЗатрат
	|		КОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСпособовРаспределения.СписокСтатейЗатратПоСчету
	|		ИНАЧЕ ТаблицаСпособовРаспределения.СписокСтатейЗатратПоОрганизации
	|	КОНЕЦ КАК СписокСтатейЗатрат,
	|	ТаблицаСпособовРаспределения.Сумма,
	|	ТаблицаСпособовРаспределения.СуммаНУ,
	|	ТаблицаСпособовРаспределения.СуммаПР,
	|	ТаблицаСпособовРаспределения.СУммаВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеЗатраты.НалоговыйРежим КАК НалоговыйРежим,
	|		ТекущиеЗатраты.Счет КАК СчетЗатрат,
	|		ТекущиеЗатраты.Подразделение КАК Подразделение,
	|		ТекущиеЗатраты.Субконто1 КАК СтатьяЗатрат,
	|		СпособыРаспределения.БазаРаспределения КАК БазаРаспределения,
	|		СпособыРаспределенияПоПодразделению.БазаРаспределения КАК РаспределениеПоПодразделению,
	|		СпособыРаспределенияПоСтатьеЗатрат.БазаРаспределения КАК РаспределениеПоСтатьеЗатрат,
	|		СпособыРаспределенияПоСчету.БазаРаспределения КАК РаспределениеПоСчету,
	|		СпособыРаспределенияПоОрганизации.БазаРаспределения КАК РаспределениеПоОрганизации,
	|		СпособыРаспределения.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|		СпособыРаспределенияПоОрганизации.СписокСтатейЗатрат КАК СписокСтатейЗатратПоОрганизации,
	|		СпособыРаспределенияПоПодразделению.СписокСтатейЗатрат КАК СписокСтатейЗатратПоПодразделению,
	|		СпособыРаспределенияПоСтатьеЗатрат.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСтатьеЗатрат,
	|		СпособыРаспределенияПоСчету.СписокСтатейЗатрат КАК СписокСтатейЗатратПоСчету,
	|		ТекущиеЗатраты.Сумма КАК Сумма,
	|		ТекущиеЗатраты.СуммаНУ КАК СуммаНУ,
	|		ТекущиеЗатраты.СуммаПР КАК СуммаПР,
	|		ТекущиеЗатраты.СУммаВР КАК СУммаВР
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ИСТИНА КАК НалоговыйРежим,
	|			ЗатратыЕНВД.Счет КАК Счет,
	|			ЗатратыЕНВД.Организация КАК Организация,
	|			ЗатратыЕНВД.Подразделение КАК Подразделение,
	|			ЗатратыЕНВД.Субконто1 КАК Субконто1,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК Сумма,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаНуОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаНуОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК СуммаНУ,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаПрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаПрОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК СуммаПР,
	|			ВЫБОР
	|				КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаВрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыЕНВД.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыЕНВД.СуммаВрОборот, 0) * &КоэффициентЕНВД
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ КАК СУммаВР
	|		ИЗ
	|			ВТ_ХозрасчетныйОбороты_Затраты КАК ЗатратыЕНВД
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЛОЖЬ,
	|			ЗатратыННП.Счет,
	|			ЗатратыННП.Организация,
	|			ЗатратыННП.Подразделение,
	|			ЗатратыННП.Субконто1,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаНуОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаНуОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаПрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаПрОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ННП
	|					ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаВрОборот, 0)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗатратыННП.ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|							ТОГДА ЕСТЬNULL(ЗатратыННП.СуммаВрОборот, 0) * &КоэффициентННП
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|		ИЗ
	|			ВТ_ХозрасчетныйОбороты_Затраты КАК ЗатратыННП) КАК ТекущиеЗатраты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&КонДата, Организация = &Организация) КАК СпособыРаспределения
	|			ПО ТекущиеЗатраты.Счет = СпособыРаспределения.СчетЗатрат
	|				И ТекущиеЗатраты.Подразделение = СпособыРаспределения.Подразделение
	|				И ТекущиеЗатраты.Субконто1 = СпособыРаспределения.СтатьяЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСтатьеЗатрат
	|			ПО ТекущиеЗатраты.Счет = СпособыРаспределенияПоСтатьеЗатрат.СчетЗатрат
	|				И ТекущиеЗатраты.Субконто1 = СпособыРаспределенияПоСтатьеЗатрат.СтатьяЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И СтатьяЗатрат = &ПустаяСтатьяЗатрат) КАК СпособыРаспределенияПоПодразделению
	|			ПО ТекущиеЗатраты.Подразделение = СпособыРаспределенияПоПодразделению.Подразделение
	|				И ТекущиеЗатраты.Счет = СпособыРаспределенияПоПодразделению.СчетЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	|						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоСчету
	|			ПО ТекущиеЗатраты.Счет = СпособыРаспределенияПоСчету.СчетЗатрат
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(
	|					&КонДата,
	|					Организация = &Организация
	|						И СчетЗатрат = &ПустойСчет
	|						И СтатьяЗатрат = &ПустаяСтатьяЗатрат
	|						И Подразделение = &ПустоеПодразделение) КАК СпособыРаспределенияПоОрганизации
	|			ПО ТекущиеЗатраты.Организация = СпособыРаспределенияПоОрганизации.Организация) КАК ТаблицаСпособовРаспределения
	|ИТОГИ ПО
	|	НалоговыйРежим,
	|	Метод,
	|	СписокСтатейЗатрат";	
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр("Распределяемые",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
	Запрос.УстановитьПараметр("ЕНВД",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("ННП",Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("КоэффициентЕНВД", СтруктураДопПараметров.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("КоэффициентННП", 1- СтруктураДопПараметров.КоэффициентЕНВД);
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы));
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОбороты_Затраты";
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция распределения ОХР и ОПР затрат.
//
//	Параметры:
//		ОбщепроизводственныеРасходы - Булево;
//		БазаКоэффициентов - база коэф-тов распределения
//
Функция РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров)
	
	РаспределениеВыполнено = Ложь;
	мКэшВидовСубконтоСчета=неопределено;
	
	// Формирование запроса по косвенным расходам
	РезультатЗапроса = НЕОПРЕДЕЛЕНО;
	СформироватьЗапросПоКосвеннымЗатратам(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, РезультатЗапроса, СтруктураДопПараметров);
	
	ОбходПоНалоговымРежимам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбходПоНалоговымРежимам.Следующий() Цикл
		
		НалоговыйРежим = ОбходПоНалоговымРежимам.НалоговыйРежим;
		мБазаКоэффициентов = РасчетБазыКоэффициентов(СтруктураШапкиДокумента, НалоговыйРежим, СтруктураДопПараметров, ОбщепроизводственныеРасходы);
		
		ОбходПоМетодамРаспределения = ОбходПоНалоговымРежимам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ОбходПоМетодамРаспределения.Следующий() Цикл
			
			Если ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
				ИмяРеквБазы = "Мат";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
				ИмяРеквБазы = "ЗП";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
				ИмяРеквБазы = "План";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
				ИмяРеквБазы = "Выпуск";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты Тогда
				ИмяРеквБазы = "Прямые";
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
				ИмяРеквБазы = "ПрямыеСписок";  
				
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
				ИмяРеквБазы = "Выручка";
				
			ИначеЕсли ОбходПоМетодамРаспределения.Метод = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда	
				Обход = ОбходПоМетодамРаспределения.Выбрать();
				Пока Обход.Следующий() Цикл
					
					Если ЗначениеЗаполнено(Обход.Метод) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не Обход.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОбщепроизводственныеРасходы Тогда
						Если ЗначениеЗаполнено(Обход.Подразделение) И ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не списаны общепроизводственные расходы, распределяемые вручную.
							|Для расходов по подразделению """ + Обход.Подразделение + """ и статье затрат """ + Обход.СтатьяЗатрат + """ установлен метод  ""Не распределять"" и обнаружены остатки по дебету счета 25.
							|Отразите списание этих расходов до проведения регламентной операции или измените метод распределения косвенных расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов"".";
							СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
						КонецЕсли;
						
					Иначе
						Если ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не списаны общехозяйственные расходы, распределяемые вручную.
							|Для расходов по статье затрат """ + Обход.СтатьяЗатрат + """ установлен метод  ""Не распределять"" и обнаружены остатки по дебету счета 26.
							|Отразите списание этих расходов до проведения регламентной операции или измените метод распределения косвенных расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов"".";
							СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Продолжить;
			Иначе
				
				Обход = ОбходПоМетодамРаспределения.Выбрать();
				Пока Обход.Следующий() Цикл
					Если ОбщепроизводственныеРасходы Тогда
						Если ЗначениеЗаполнено(Обход.Подразделение) И ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не указан способ распределения для общепроизводственных расходов по подразделению """ + Обход.Подразделение + """ и статье затрат """ + Обход.СтатьяЗатрат + """.
							|Рекомендуется воспользоваться меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций"".";
							СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(Обход.СтатьяЗатрат) Тогда
							ТекстСообщения = "Не указан способ распределения для общехозяйственных расходов по статье затрат """ + Обход.СтатьяЗатрат + """.
							|Рекомендуется воспользоваться меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций""";
							СообщитьОбОшибкеРегОперации(ТекстСообщения, Обход.СтатьяЗатрат, Отказ, ЭтотОбъект);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Обход = ОбходПоМетодамРаспределения.Выбрать();
			Пока Обход.Следующий() Цикл
				
				Если ИмяРеквБазы = "ПрямыеСписок" Тогда
					ОбходПоСпискуСтатейЗатрат = ОбходПоМетодамРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СписокСтатейЗатрат");
					
					Пока ОбходПоСпискуСтатейЗатрат.Следующий() Цикл
						ТекущийСписокПрямыхЗатрат = ОбходПоСпискуСтатейЗатрат.СписокСтатейЗатрат;
						СписокПрямыхЗатрат = ТекущийСписокПрямыхЗатрат.СтатьиЗатрат.ВыгрузитьКолонку("СтатьяЗатрат");
						Если СписокПрямыхЗатрат.Количество() = 0 Тогда
							Отказ = Ложь;
							ТекстСообщения = "Не указан список статей базы распределения ""Отдельные статьи прямых затрат"".
							|Для косвенных расходов по статье затрат " + ОбходПоСпискуСтатейЗатрат.СтатьяЗатрат + " указана база распределения ""Отдельные статьи прямых затрат"", но не указан сам список.
							|Укажите список затрат (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов"")";
							
							СообщитьОбОшибкеРегОперации(ТекстСообщения, ОбходПоСпискуСтатейЗатрат.СтатьяЗатрат, Отказ, ЭтотОбъект);
						Иначе
							мБазаКоэффициентов = РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокПрямыхЗатрат, НалоговыйРежим, СтруктураДопПараметров);
							Обход = ОбходПоСпискуСтатейЗатрат.Выбрать();
							Пока Обход.Следующий() Цикл
								
								РаспределитьОПРиОХРПроводки(Обход,мБазаКоэффициентов,ОбщепроизводственныеРасходы,ИмяРеквБазы,СтруктураДопПараметров,СтруктураШапкиДокумента,мКэшВидовСубконтоСчета,РаспределениеВыполнено);
							КонецЦикла;	
						КонецЕсли;
					КонецЦикла;
				Иначе	
					РаспределитьОПРиОХРПроводки(Обход,мБазаКоэффициентов,ОбщепроизводственныеРасходы,ИмяРеквБазы,СтруктураДопПараметров,СтруктураШапкиДокумента,мКэшВидовСубконтоСчета,РаспределениеВыполнено);	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РаспределениеВыполнено;
	
КонецФункции // РаспределитьОПРиОХР()

Процедура РаспределитьОПРиОХРПроводки(Обход,мБазаКоэффициентов,ОбщепроизводственныеРасходы,ИмяРеквБазы,СтруктураДопПараметров,СтруктураШапкиДокумента,мКэшВидовСубконтоСчета,РаспределениеВыполнено)
	
	ЗаписьРасчетаКосвенныхРасходов = СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов;
	
	СтруктПоиска = Новый Структура;
	
	Если (Обход.Сумма = 0 Или Обход.Сумма = NULL) И (Обход.СуммаНУ = 0 Или Обход.СуммаНУ = NULL) И (Обход.СуммаПР = 0 Или Обход.СуммаПР = NULL) И (Обход.СуммаВР = 0 Или Обход.СуммаВР = NULL) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктПоиска.Очистить();
	ФлагПоВсейБазе = НЕ ОбщепроизводственныеРасходы;
	
	ВсегоБазаРаспределения   = 0;
	ВсегоБазаРаспределенияНУ = 0;
	
	Если ФлагПоВсейБазе Тогда
		Для Каждого СтрКоэф Из мБазаКоэффициентов Цикл
			Если ЗначениеЗаполнено(СтрКоэф.ПодразделениеКт) Тогда
				Если Не Обход.Подразделение = СтрКоэф.ПодразделениеКт Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ВсегоБазаРаспределения = ВсегоБазаРаспределения   + СтрКоэф["База" + ИмяРеквБазы];
			ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + СтрКоэф["База" + ИмяРеквБазы + "НУ"];
		КонецЦикла;
		НаборСтрок = мБазаКоэффициентов;
		
	Иначе
		
		СтруктПоиска.Вставить("Подразделение", Обход.Подразделение);
		НаборСтрок = мБазаКоэффициентов.НайтиСтроки(СтруктПоиска);
		Для Каждого СтрКоэф Из НаборСтрок Цикл
			Если ИмяРеквБазы = "Выручка" И Не Обход.Подразделение = СтрКоэф.ПодразделениеКт Тогда    
				Продолжить;
			КонецЕсли;
			ВсегоБазаРаспределения = ВсегоБазаРаспределения   + СтрКоэф["База" + ИмяРеквБазы];
			ВсегоБазаРаспределенияНУ = ВсегоБазаРаспределенияНУ + СтрКоэф["База" + ИмяРеквБазы + "НУ"];
		КонецЦикла;
	КонецЕсли;
	
	ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
	
	СуммаКРаспр = Новый Структура("Сумма,СуммаНУ,СуммаПР,СуммаВР",0,0,0,0);
	СуммаСписанияНаСебестоимость = Новый Структура("Сумма,СуммаНУ,СуммаПР,СуммаВР",0,0,0,0);
	УчтеноБазаРаспределения = Новый Структура("Сумма,СуммаНУ",0,0);
	
	Для Каждого СтрКоэф Из НаборСтрок Цикл
		
		Если ЗначениеЗаполнено(СтрКоэф.ПодразделениеКт) Тогда
			Если ИмяРеквБазы = "Выручка" И Не Обход.Подразделение = СтрКоэф.ПодразделениеКт Тогда   
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		БазаРаспределения   = СтрКоэф["База" + ИмяРеквБазы];
		БазаРаспределенияНУ = СтрКоэф["База" + ИмяРеквБазы + "НУ"];
		БазаРаспределенияНаВыпуск = БазаРаспределения;
		
		
		УчтеноБазаРаспределения.Сумма   = УчтеноБазаРаспределения.Сумма + БазаРаспределения;
		УчтеноБазаРаспределения.СуммаНУ = УчтеноБазаРаспределения.СуммаНУ + БазаРаспределенияНУ;
		ДолжноБытьСписано   = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.Сумма   * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
		ДолжноБытьСписаноНУ = ?(ВсегоБазаРаспределенияНУ = 0, 0, Окр(Обход.СуммаНУ * УчтеноБазаРаспределения.СуммаНУ / ВсегоБазаРаспределенияНУ, 2, 1));
		ДолжноБытьСписаноПР = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.СуммаПР * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
		ДолжноБытьСписаноВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(Обход.СуммаВР * УчтеноБазаРаспределения.Сумма / ВсегоБазаРаспределения, 2, 1));
		СуммаСписания   = ДолжноБытьСписано - СуммаКРаспр.Сумма;
		СуммаСписанияНУ = ДолжноБытьСписаноНУ - СуммаКРаспр.СуммаНУ;
		СуммаСписанияПР = ДолжноБытьСписаноПР - СуммаКРаспр.СуммаПР;
		СуммаСписанияВР = ДолжноБытьСписаноВР - СуммаКРаспр.СуммаВР;
		СуммаКРаспр.Сумма = СуммаКРаспр.Сумма + СуммаСписания;
		СуммаКРаспр.СуммаНУ = СуммаКРаспр.СуммаНУ + СуммаСписанияНУ;
		СуммаКРаспр.СуммаПР = СуммаКРаспр.СуммаПР + СуммаСписанияПР;
		СуммаКРаспр.СуммаВР = СуммаКРаспр.СуммаВР + СуммаСписанияВР;
		
		Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
			Разница = СуммаСписания - СуммаСписанияНУ - СуммаСписанияПР - СуммаСписанияВР;
		Иначе
			Разница = 0;
		КонецЕсли;
		СуммаСписанияПР = СуммаСписанияПР + Разница;
		
		Если СуммаСписания <> 0 Или СуммаСписанияНУ <> 0 Или СуммаСписанияПР <> 0 Или СуммаСписанияВР <> 0  Тогда
			
			НоваяПроводка = мПроводки.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			
			НоваяПроводка.Активность  = Истина;
			НоваяПроводка.Период      = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание  = "Распределение ОПР и ОХР";
			
			НоваяПроводка.Сумма   = СуммаСписания;
			СуммаНУ = СуммаСписанияНУ;
			СуммаПР = СуммаСписанияПР;
			СуммаВР = СуммаСписанияВР;
			
			Если Не ЗначениеЗаполнено(СтрКоэф.СчетЗатрат) Тогда
				ТекстСообщения = "Не указан счета учета прямых расходов для оказания услуг.
				|Не обнаружен счет учета прямых расходов для отражения стоимости оказанных услуг по номенклатурной группе " + СтрКоэф.НоменклатурнаяГруппа + ".
				|Укажите счет учета прямых расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций""), для записи для базы распределения ""Выручка"" заполните колонку ""Счет учета прямых затрат"").";
				СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрКоэф.Подразделение) Тогда
				ТекстСообщения = "Ошибка подразделения учета прямых расходов для оказания услуг.
				|Не обнаружено подразделение прямых расходов для отражения стоимости оказанных услуг по номенклатурной группе " + СтрКоэф.НоменклатурнаяГруппа + ".
				|Укажите подразделение учета прямых расходов (меню ""Предприятие"" - ""Учетная политика"" - ""Методы распределения косвенных расходов организаций""), для записи для базы распределения ""Выручка"", заполните колонку ""Подразделение затрат"").";
				СообщитьОбОшибкеРегОперации(ТекстСообщения, , Отказ, ЭтотОбъект);
			КонецЕсли;
			НоваяПроводка.СчетДт = СтрКоэф.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрКоэф.НоменклатурнаяГруппа,,,ОбщегоНазначения.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетДт,мКэшВидовСубконтоСчета));
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         Обход.СтатьяЗатрат,,,ОбщегоНазначения.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетДт,мКэшВидовСубконтоСчета));
			
			СчетКт = Обход.СчетЗатрат;
			НоваяПроводка.СчетКт = СчетКт;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат",         Обход.СтатьяЗатрат,,,ОбщегоНазначения.ОпределитьВидСубконтоПоСчету(НоваяПроводка.СчетКт,мКэшВидовСубконтоСчета));
			
			БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(НоваяПроводка, СтрКоэф.Подразделение, Обход.Подразделение);
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			
			РаспределениеВыполнено = Истина;
			
			//Записываем порциями(в случае большого количество проводок)
			Если мПроводки.Количество() >= 10000 Тогда
				мПроводки.Записать(Ложь);	
			КонецЕсли;	
			
			СтрокаЗаписьРасчетаКосвенныхРасходов = ЗаписьРасчетаКосвенныхРасходов.Добавить();
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетУчета = СчетКт;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ВидОперации = ?(ОбщепроизводственныеРасходы, 0, 1);
			СтрокаЗаписьРасчетаКосвенныхРасходов.Подразделение = Обход.Подразделение;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СтатьяЗатрат = Обход.СтатьяЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.БазаРаспределения = Обход.Метод;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазы = БазаРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыНУ = БазаРаспределенияНУ;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыПР = БазаРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаБазыВР = БазаРаспределения;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ЕНВД = Обход.НалоговыйРежим;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СчетРаспределения = СтрКоэф.СчетЗатрат;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ПодразделениеРаспределения = СтрКоэф.Подразделение;
			СтрокаЗаписьРасчетаКосвенныхРасходов.НоменклатурнаяГруппаРаспределения = СтрКоэф.НоменклатурнаяГруппа;
			СтрокаЗаписьРасчетаКосвенныхРасходов.Сумма = СуммаСписания;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаНУ = СуммаСписанияНУ;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаПР = СуммаСписанияПР;
			СтрокаЗаписьРасчетаКосвенныхРасходов.СуммаВР = СуммаСписанияВР;
			СтрокаЗаписьРасчетаКосвенныхРасходов.ДокументРаспределения = Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ И РаспределениеВыполнено Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Функция расчета коэф. распределения косвенных затрат по переделам
//
Функция РасчетБазыКоэффициентов(СтруктураШапкиДокумента, ЭтоЕНВД, СтруктураДопПараметров, ОбщепроизводственныеРасходы)  
	
	
	НалоговыйРежим = ?(ЭтоЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	
	Запрос = Новый Запрос;   
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	|	СУММА(ПолнаяБазаРаспределения.БазаМат) КАК БазаМат,
	|	СУММА(ПолнаяБазаРаспределения.БазаЗП) КАК БазаЗП,
	|	СУММА(ПолнаяБазаРаспределения.БазаВыпуск) КАК БазаВыпуск,
	|	СУММА(ПолнаяБазаРаспределения.БазаПлан) КАК БазаПлан,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямые) КАК БазаПрямые,
	|	СУММА(ПолнаяБазаРаспределения.БазаСписокЗатрат) КАК БазаПрямыеСписок,
	|	МИНИМУМ(ПолнаяБазаРаспределения.БазаВыручка) КАК БазаВыручка,
	|	СУММА(ПолнаяБазаРаспределения.БазаМатНУ) КАК БазаМатНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаЗПНУ) КАК БазаЗПНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ) КАК БазаПрямыеНУ,
	|	МИНИМУМ(ПолнаяБазаРаспределения.БазаВыручкаНУ) КАК БазаВыручкаНУ,
	|	ПолнаяБазаРаспределения.БазаВыпуск КАК БазаВыпускНУ,
	|	ПолнаяБазаРаспределения.БазаПлан КАК БазаПланНУ,
	|	ПолнаяБазаРаспределения.ПодразделениеКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет КАК СчетЗатрат,
	|		ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|		ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|		СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	|					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК БазаМат,
	|		СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	|					ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК БазаЗП,
	|		0 КАК БазаВыпуск,
	|		0 КАК БазаПлан,
	|		0 КАК БазаПрямые,
	|		0 КАК БазаСписокЗатрат,
	|		0 КАК БазаВыручка,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК БазаМатНУ,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК БазаЗПНУ,
	|		0 КАК БазаПрямыеНУ,
	|		0 КАК БазаВыручкаНУ,
	|		NULL КАК ПодразделениеКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонГраница,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	|				) КАК ХозрасчетныйОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.Счет,
	|		ХозрасчетныйОбороты.Подразделение,
	|		ХозрасчетныйОбороты.Субконто1,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &МатЗатраты
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ = &ОплатаТруда
	|				ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускПродукцииУслуг.СчетЗатрат,
	|		ВыпускПродукцииУслуг.Подразделение,
	|		ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	|		0,
	|		0,
	|		СУММА(ВыпускПродукцииУслуг.Количество),
	|		СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость),
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет КАК ВыпускПродукцииУслуг
	|	ГДЕ
	|		ВыпускПродукцииУслуг.Период МЕЖДУ &НачДата И &КонДата
	//	                |		И ВыпускПродукцииУслуг.Подразделение.Владелец = &Организация
	|		И ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВыпускПродукцииУслуг.СчетЗатрат,
	|		ВыпускПродукцииУслуг.Подразделение,
	|		ВыпускПродукцииУслуг.НоменклатурнаяГруппа
	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	ПрямыеЗатраты.СчетДт,
	|	ПрямыеЗатраты.ПодразделениеДт,
	|	ПрямыеЗатраты.СубконтоДт1,
	|		0,
	|		0,
	|		0,
	|		0,
	
	|	ВЫБОР
	|		КОГДА ПрямыеЗатраты.СчетДт = &Счет20
	|				И ПрямыеЗатраты.СчетКт = &Счет23
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ПрямыеЗатраты.СуммаОборот, 0)
	|	КОНЕЦ,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		NULL
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонГраница, Месяц, СчетДт В ИЕРАРХИИ (&СчетаПрямыхЗатрат),&ВидыСубконто , НЕ СчетКт В ИЕРАРХИИ (&СчетЗатратКосвенных), , Организация = &Организация И СубконтоДт2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим
	| ) КАК ПрямыеЗатраты
	
	|СГРУППИРОВАТЬ ПО
	|	ПрямыеЗатраты.СчетДт,
	|	ПрямыеЗатраты.СуммаОборот,
	|	ПрямыеЗатраты.ПодразделениеДт,
	|	ПрямыеЗатраты.СубконтоДт1,
	|	ПрямыеЗатраты.СчетКт
	|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		ПрямыеЗатраты.Счет,
	//|		ПрямыеЗатраты.Подразделение,
	//|		ПрямыеЗатраты.Субконто1,
	//|		0,
	//|		0,
	//|		0,
	//|		0,
	//|		ЕСТЬNULL(ПрямыеЗатраты.СуммаОборотДт, 0),
	//|		0,
	//|		0,
	//|		0,
	//|		0,
	//|		0,
	//|		0,
	//|		NULL
	//|	ИЗ
	//|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	//|				&НачДата,
	//|				&КонГраница,
	//|				Месяц,
	//|				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	//|				&ВидыСубконто,
	//|				Организация = &Организация
	//|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	//|				(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	//|				) КАК ПрямыеЗатраты
	//|	
	//|	СГРУППИРОВАТЬ ПО
	//|		ПрямыеЗатраты.Счет,
	//|		ПрямыеЗатраты.СуммаОборотДт,
	//|		ПрямыеЗатраты.Подразделение,
	//|		ПрямыеЗатраты.Субконто1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатратыПроизводства.Счет,
	|		ЗатратыПроизводства.Субконто1,
	|		Выручка.Субконто1,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(Выручка.СуммаОборот, 0),
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(Выручка.СуммаОборот, 0),
	|		ЗатратыПроизводства.Субконто1
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ХозрасчетныйОбороты.Счет КАК Счет,
	|			ХозрасчетныйОбороты.Подразделение КАК Субконто1,
	|			ХозрасчетныйОбороты.Субконто1 КАК Субконто2,
	|			ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(
	|					&НачДата,
	|					&КонГраница,
	|					Месяц,
	|					Счет В ИЕРАРХИИ (&СчетЗатрат),
	|					&ВидыСубконто,
	|					Организация = &Организация
	|						И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|					(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	|					) КАК ХозрасчетныйОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ХозрасчетныйОбороты.Счет,
	|			ХозрасчетныйОбороты.Подразделение,
	|			ХозрасчетныйОбороты.Субконто1,
	|			ХозрасчетныйОбороты.СуммаОборотДт) КАК ЗатратыПроизводства
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонГраница, , Счет В ИЕРАРХИИ (&Счет90), , Организация = &Организация, , ) КАК Выручка
	|			ПО Выручка.Субконто1 = ЗатратыПроизводства.Субконто2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(ПрямыеЗатраты.СуммаНУОборотДт, 0),
	|		0,
	|		NULL
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонГраница,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				(НЕ КорСчет В ИЕРАРХИИ (&СчетЗатратКосвенных)),
	|				) КАК ПрямыеЗатраты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.СуммаОборотДт,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		ЕСТЬNULL(ПрямыеЗатраты.СуммаНУОборотДт, 0)) КАК ПолнаяБазаРаспределения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяБазаРаспределения.СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	|	ПолнаяБазаРаспределения.БазаВыпуск,
	|	ПолнаяБазаРаспределения.БазаПлан,
	|	ПолнаяБазаРаспределения.ПодразделениеКт";
	
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОплатаТруда", Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("МатЗатраты",  Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	Запрос.УстановитьПараметр("Выручка",  Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка);
	Запрос.УстановитьПараметр("НалоговыйРежим", НалоговыйРежим);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетаВсехЗатрат", СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	Запрос.УстановитьПараметр("Счет20",  ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	Запрос.УстановитьПараметр("Счет23",  ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	Запрос.УстановитьПараметр("НоменклатурныеГруппы",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	Запрос.УстановитьПараметр("Счет90",  ?(ЭтоЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, Массив));
	Запрос.УстановитьПараметр("Счет90_2",  ?(ЭтоЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажНЕЕНВД));
	
	Если НЕ ЭтоЕНВД Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)", "Не ВыпускПродукцииУслуг.СчетСписания В ИЕРАРХИИ(&Счет90ЕНВД)");
	КонецЕсли;
	
	СчетаЗатрат = Новый Массив;
	НаборЗаписей=РегистрыСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(Дата,Новый Структура("Организация",Организация));
	Для Каждого СтрокаН ИЗ НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаН.СчетПрямыхЗатрат) Тогда Продолжить; КонецЕсли;
		СчетаЗатрат.Добавить(СтрокаН.СчетПрямыхЗатрат);
	КонецЦикла;	
	
	Если СчетаЗатрат.Количество()=0 Тогда
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетЗатрат", СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетЗатратКосвенных", СчетаЗатрат);
	
	Запрос.УстановитьПараметр("СчетТекущихЗатрат", СчетУчетаПоХарактеруЗатрат(ОбщепроизводственныеРасходы));
	Запрос.УстановитьПараметр("ОбщепроизводственныеРасходы", ОбщепроизводственныеРасходы);
	
	Запрос.УстановитьПараметр("Счет90ЕНВД", ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	Запрос.УстановитьПараметр("Пустой",     ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Результат =  Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
	
КонецФункции

Функция РасчетБазыКоэффициентовСпискаЗатрат(СтруктураШапкиДокумента, СписокЗатрат, ЭтоЕНВД, СтруктураДопПараметров)
	
	НалоговыйРежим = ?(ЭтоЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПолнаяБазаРаспределения.СчетЗатрат КАК СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение КАК Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	0 КАК БазаМат,
	|	0 КАК БазаЗП,
	|	0 КАК БазаВыпуск,
	|	0 КАК БазаПлан,
	|	0 КАК БазаПрямые,
	|	0 КАК БазаВыручка,
	|	0 КАК БазаМатНУ,
	|	0 КАК БазаЗПНУ,
	|	0 КАК БазаВыпускНУ,
	|	0 КАК БазаПланНУ,
	|	0 КАК БазаПрямыеНУ,
	|	0 КАК БазаВыручкаНУ,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямые) КАК БазаПрямыеСписок,
	|	СУММА(ПолнаяБазаРаспределения.БазаПрямыеНУ) КАК БазаПрямыеСписокНУ,
	|	ПолнаяБазаРаспределения.ПодразделениеКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрямыеЗатраты.Счет КАК СчетЗатрат,
	|		ПрямыеЗатраты.Подразделение КАК Подразделение,
	|		ПрямыеЗатраты.Субконто1 КАК НоменклатурнаяГруппа,
	|		ПрямыеЗатраты.СуммаОборотДт КАК БазаПрямые,
	|		0 КАК БазаПрямыеНУ,
	|		ПрямыеЗатраты.ПодразделениеКор КАК ПодразделениеКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2 В (&СписокЗатрат)
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				,
	|				) КАК ПрямыеЗатраты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.СуммаОборотДт,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		ПрямыеЗатраты.ПодразделениеКор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		0,
	|		ПрямыеЗатраты.СуммаНУОборотДт,
	|		ПрямыеЗатраты.ПодразделениеКор
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				Месяц,
	|				Счет В ИЕРАРХИИ (&СчетаПрямыхЗатрат),
	|				&ВидыСубконто,
	|				Организация = &Организация
	|					И Субконто2 В (&СписокЗатрат)
	|					И Субконто2.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НалоговыйРежим,
	|				,
	|				) КАК ПрямыеЗатраты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПрямыеЗатраты.Счет,
	|		ПрямыеЗатраты.СуммаНУОборотДт,
	|		ПрямыеЗатраты.Подразделение,
	|		ПрямыеЗатраты.Субконто1,
	|		ПрямыеЗатраты.ПодразделениеКор) КАК ПолнаяБазаРаспределения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяБазаРаспределения.СчетЗатрат,
	|	ПолнаяБазаРаспределения.Подразделение,
	|	ПолнаяБазаРаспределения.НоменклатурнаяГруппа,
	|	ПолнаяБазаРаспределения.БазаПрямыеНУ,
	|	ПолнаяБазаРаспределения.ПодразделениеКт";
	
	Запрос.УстановитьПараметр("НачДата",      мНачДата);
	Запрос.УстановитьПараметр("КонДата",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокЗатрат", СписокЗатрат);
	Запрос.УстановитьПараметр("НалоговыйРежим",НалоговыйРежим);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетЗатрат", СчетаЗатрат);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("СчетВсехЗатрат", СчетаЗатрат);
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетаПрямыхЗатрат", СчетаЗатрат);
	
	
	Результат =  Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // РасчетБазыКоэффициентовСпискаЗатрат()

// Общепроизводственные и общехозяйственные расходы (не
// используется директ-костинг) списываются на счета учета
// прямых расходов основного и вспомогательного производства.
// При списании расходы распределяются по подразделениям и
// номенклатурным группам.
//
Процедура РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 2;
	ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	РаспределениеВыполнено = Ложь;
	СтруктураДопПараметров.Вставить("КоэффициентЕНВД", 0);
	
	// Списание общехозяйственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
		ОбщепроизводственныеРасходы = Ложь;
		РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров);
	КонецЕсли;
	
	// Списание общепроизводственных расходов на счете учета расходов
	// основного и вспомогательного производств.
	ОбщепроизводственныеРасходы = Истина;
	РаспределениеВыполнено = РаспределитьОПРиОХР(СтруктураШапкиДокумента, ОбщепроизводственныеРасходы, СтруктураДопПараметров);
	
	// Распределение общехозяйственных и общепроизводственных расходов
	// на себестоимость выпущенной продукции (услуг).
	РасчетПрямыхЗатрат(СтруктураШапкиДокумента, Истина, СтруктураДопПараметров);
	
КонецПроцедуры

// Процедура списывает затраты по услугам, реализация которых отражена 
// без отражения выпуска в плановых ценах
Процедура ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК НоменклатурнаяГруппа,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)) КАК ОстатокПрямыхРасходов,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК ОстатокПрямыхРасходовНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК ОстатокПрямыхРасходовПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК ОстатокПрямыхРасходовВР,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
	|	ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0) КАК СуммаНЗПНУ,
	|	ЕСТЬNULL(РеализацияУслуг.СчетРасходов, 0) КАК СчетРасходов,
	|	ЕСТЬNULL(РеализацияУслуг.СуммаОборот, 0) КАК Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
	|			ИнвентаризацияНЗП.Подразделение КАК Подразделение,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			СУММА(ИнвентаризацияНЗПСостав.Сумма) КАК СуммаБУ,
	|			ИнвентаризацияНЗПСостав.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	|		ГДЕ
	|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	|			И ИнвентаризацияНЗП.Организация = &Организация
	|			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИнвентаризацияНЗП.СчетЗатрат,
	|			ИнвентаризацияНЗП.Подразделение,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|			ИнвентаризацияНЗПСостав.СуммаНУ) КАК ОстаткиНЗП
	|		ПО ХозрасчетныйОстатки.Субконто1 = ОстаткиНЗП.НоменклатурнаяГруппа
	|			И ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат
	|			И ХозрасчетныйОстатки.Подразделение = ОстаткиНЗП.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			РеализацияУслугОбороты.СчетРасходов КАК СчетРасходов,
	|			СУММА(ЕСТЬNULL(РеализацияУслугОбороты.СуммаОборот, 0)) КАК СуммаОборот
	|		ИЗ
	|			РегистрНакопления.РеализацияУслуг.Обороты(&НачГраница, &КонГраница, , Организация = &Организация) КАК РеализацияУслугОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа,
	|			РеализацияУслугОбороты.СчетРасходов) КАК РеализацияУслуг
	|		ПО ХозрасчетныйОстатки.Субконто1 = РеализацияУслуг.НоменклатурнаяГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	РеализацияУслуг.СчетРасходов,
	|	РеализацияУслуг.СуммаОборот,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ОстаткиНЗП.СуммаНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0)
	|ИТОГИ
	|	МАКСИМУМ(ОстатокПрямыхРасходов),
	|	МАКСИМУМ(ОстатокПрямыхРасходовНУ),
	|	МАКСИМУМ(ОстатокПрямыхРасходовПР),
	|	МАКСИМУМ(ОстатокПрямыхРасходовВР),
	|	МАКСИМУМ(СуммаНЗП),
	|	МАКСИМУМ(СуммаНЗПНУ),
	|	СУММА(Выручка)
	|ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	СчетРасходов";
	
	Массив = Новый Массив;	
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("Счета"      , Массив);
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	ОбходПоСчетамЗатрат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСчетамЗатрат.Следующий() Цикл
		ОбходПоПодразделениям = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоПодразделениям.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				Если ОбходПоНомГруппам.Выручка = NULL ИЛИ ОбходПоНомГруппам.Выручка = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				ВсегоБазаРаспределения = ОбходПоНомГруппам.Выручка;
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
					
					ВсегоПрямыхРасходов = ОбходПоНомГруппам.ОстатокПрямыхРасходов;
					ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ;
					ВсегоПрямыхРасходовПР = ОбходПоНомГруппам.ОстатокПрямыхРасходовПР;
					ВсегоПрямыхРасходовВР = ОбходПоНомГруппам.ОстатокПрямыхРасходовВР;
					
					СуммаНЗП = ОбходПоНомГруппам.СуммаНЗП;
					СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
					
					СуммаРазницНЗП = НайтиРазницуВНЗП(СтруктураДопПараметров, Обход.Счет, Обход.Подразделение, Обход.НоменклатурнаяГруппа);
					СуммаНЗППР = СуммаРазницНЗП.СуммаПР;
					СуммаНЗПВР = СуммаРазницНЗП.СуммаВР;
					
					СуммаПрямыхРасходовНаВыпуск   = ВсегоПрямыхРасходов - СуммаНЗП;
					СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
					СуммаПрямыхРасходовНаВыпускПР = ВсегоПрямыхРасходовПР - СуммаНЗППР;
					СуммаПрямыхРасходовНаВыпускВР = ВсегоПрямыхРасходовВР - СуммаНЗПВР;
					
					СуммаКорректировкиСписания   = ?(ВсегоБазаРаспределения   = 0, 0, Окр(СуммаПрямыхРасходовНаВыпуск  *Обход.Выручка/ВсегоБазаРаспределения, 2));
					СуммаКорректировкиСписанияНУ = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускНУ*Обход.Выручка/ВсегоБазаРаспределения, 2));
					СуммаКорректировкиСписанияПР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускПР*Обход.Выручка/ВсегоБазаРаспределения, 2));
					СуммаКорректировкиСписанияВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускВР*Обход.Выручка/ВсегоБазаРаспределения, 2));
					
					
					Если СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
						// Проводка Дт 43 Кт 20 на сумму отклонений
						НоваяПроводка = мПроводки.Добавить();
						НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
						НоваяПроводка.Активность  = Истина;
						НоваяПроводка.Период      = Дата;
						НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
						
						НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
						СуммаНУ     = СуммаКорректировкиСписанияНУ;
						СуммаПР     = СуммаКорректировкиСписанияПР;
						СуммаВР     = СуммаКорректировкиСписанияВР;
						
						НоваяПроводка.СчетДт = Обход.СчетРасходов;
						БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
						
						НоваяПроводка.СчетКт = Обход.Счет;
						БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
						
						БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
						
						НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
						
						СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
						СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.Счет;
						СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
						СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = 0;
						СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен;
						СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорректировкиСписания;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП =  СуммаНЗП;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорректировкиСписанияНУ;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПР = СуммаКорректировкиСписанияПР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗППР =  СуммаНЗППР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаВР = СуммаКорректировкиСписанияВР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПВР =  СуммаНЗПВР;
						
					КонецЕсли;
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по подразделениям
	КонецЦикла; // по счетам учета прямых затрат
	
	Если НЕ Отказ Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиРазницуВНЗП(СтруктураДопПараметров, ПеределСчет, ПеределПодразделение, ПеределНоменклатурнаяГруппа)
	
	НЗП = Новый Структура("СуммаПР,СуммаВР",0,0);
	
	Если Не СтруктураДопПараметров.НЗП = Неопределено Тогда
		
		ПеределНЗП = СтруктураДопПараметров.НЗП.НайтиСтроки(Новый Структура("Счет, Подразделение, НоменклатурнаяГруппа", ПеределСчет, ПеределПодразделение, ПеределНоменклатурнаяГруппа));
		
		Если ПеределНЗП = Неопределено Или ПеределНЗП.Количество() = 0 Тогда
			НЗП.СуммаПР = 0;
			НЗП.СуммаВР = 0;
		Иначе
			НЗП.СуммаПР = ПеределНЗП[0].СуммаПР;
			НЗП.СуммаВР = ПеределНЗП[0].СуммаВР;
		КонецЕсли;
	КонецЕсли;
	Возврат НЗП;
	
КонецФункции

// Процедура формирует данные о прямых затратах на переделе по продукции
//
Процедура СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР)
	
	УсловияВстречногоВыпуска1 = "";
	УсловияВстречногоВыпуска2 = "";
	РасчетПрямыхЗатратНомер = СтруктураДопПараметров.РасчетПрямыхЗатратНомер;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	СУММА(ВЫБОР
	|			КОГДА ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
	|				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)
	|			ИНАЧЕ ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)
	|		КОНЕЦ) КАК ПлановаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА ВыпускПродукцииУслуг.ПрямыеРасходыРаспределятьПоКоличеству
	|				ТОГДА ЕСТЬNULL(ВыпускПродукцииУслуг.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлановаяСтоимостьВПроводках,
	|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК ПлановаяСтоимостьОборот
	|ПОМЕСТИТЬ ВТ_ВыпускПродукцииУслуг
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|			&НачГраница,
	|			&КонГраница,
	|			Месяц,
	|			Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииУслуг.СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.Субконто1,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,                                      
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0 И НЕ (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаНУОборотДт
	|		КОНЕЦ) КАК СуммаНуОборотДт,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0 И НЕ (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотДт
	|		КОНЕЦ) КАК СуммаПрОборотДт,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0 И НЕ (ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД)
	|				ТОГДА 0
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаВРОборотДт
	|		КОНЕЦ) КАК СуммаВрОборотДт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачГраница,
	|			&КонГраница,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_ВыпускПродукцииУслуг.СчетЗатрат
	|				ИЗ
	|					ВТ_ВыпускПродукцииУслуг),
	|			&ВидыСубконтоНГиСЗ,
	|			Организация = &Организация
	|				И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)
	|				И Субконто1 = &НоменклатурнаяГруппа,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|		ПО (Правила.ВидЗатратНУ = ХозрасчетныйОбороты.Субконто2.ВидРасходовНУ)
	|			И (ВЫБОР
	|				КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.Подразделение = ХозрасчетныйОбороты.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СчетЗатрат = ХозрасчетныйОбороты.Счет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.КорСчетЗатрат = ХозрасчетныйОбороты.КорСчет
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|					ТОГДА Правила.СтатьяЗатрат = ХозрасчетныйОбороты.Субконто2
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыИОстатки.Счет,
	|	ХозрасчетныйОборотыИОстатки.Подразделение,
	|	ХозрасчетныйОборотыИОстатки.Субконто1 КАК НоменклатурнаяГруппа,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаОборотДт, 0)) КАК СуммаОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаНуОборотДт, 0)) КАК СуммаНуОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаПрОборотДт, 0)) КАК СуммаПрОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаВрОборотДт, 0)) КАК СуммаВрОборотДт,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаОстаток, 0)) КАК СуммаКонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаНуОстаток, 0)) КАК СуммаНуКонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаПрОстаток, 0)) КАК СуммаПрКонечныйОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыИОстатки.СуммаВрОстаток, 0)) КАК СуммаВрКонечныйОстаток
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыИОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет КАК Счет,
	|		ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|		ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|		ХозрасчетныйОбороты.СуммаНуОборотДт КАК СуммаНуОборотДт,
	|		ХозрасчетныйОбороты.СуммаПрОборотДт КАК СуммаПрОборотДт,
	|		ХозрасчетныйОбороты.СуммаВрОборотДт КАК СуммаВрОборотДт,
	|		0 КАК СуммаОстаток,
	|		0 КАК СуммаНуОстаток,
	|		0 КАК СуммаПрОстаток,
	|		0 КАК СуммаВрОстаток
	|	ИЗ
	|		ВТ_ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Счет,
	|		ХозрасчетныйОстатки.Подразделение,
	|		ХозрасчетныйОстатки.Субконто1,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ХозрасчетныйОстатки.СуммаОстаток,
	|		ХозрасчетныйОстатки.СуммаНУОстаток,
	|		ХозрасчетныйОстатки.СуммаПРОстаток,
	|		ХозрасчетныйОстатки.СуммаВРОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&КонГраница,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ВыпускПродукцииУслуг.СчетЗатрат
	|					ИЗ
	|						ВТ_ВыпускПродукцииУслуг),
	|				&ВидыСубконтоНГиСЗ,
	|				Организация = &Организация
	|					И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)
	|					И Субконто1 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОстатки) КАК ХозрасчетныйОборотыИОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОборотыИОстатки.Счет,
	|	ХозрасчетныйОборотыИОстатки.Подразделение,
	|	ХозрасчетныйОборотыИОстатки.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение КАК Подразделение,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеСписания,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимость) КАК ПлановаяСтоимость,
	|	СУММА(ВыпускПродукцииУслуг.ПлановаяСтоимостьВПроводках) КАК ПлановаяСтоимостьВПроводках,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаКонечныйОстаток, 0)) КАК ОстатокПрямыхРасходов,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОборотДт, 0)) КАК ВсегоПрямыхРасходов,
	|	СУММА(ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0)) КАК СписаноРасходов,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0)) КАК СуммаНЗП,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуКонечныйОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаВРОборотКт, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаПРОборотКт, 0) КАК ОстатокПрямыхРасходовНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрКонечныйОстаток, 0) КАК ОстатокПрямыхРасходовПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрКонечныйОстаток, 0) КАК ОстатокПрямыхРасходовВР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуОборотДт, 0) КАК ВсегоПрямыхРасходовНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрОборотДт, 0) КАК ВсегоПрямыхРасходовПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрОборотДт, 0) КАК ВсегоПрямыхРасходовВР,
	//|	ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0) КАК СписаноРасходовНУ,
	|	ВЫБОР КОГДА &Общая=ЛОЖЬ Тогда 0 Иначе ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0) Конец КАК СписаноРасходовНУ,
	|	0 КАК СписаноРасходовПР,
	|	0 КАК СписаноРасходовВР,
	|	ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0) КАК СуммаНЗПНУ
	|ИЗ
	|	ВТ_ВыпускПродукцииУслуг КАК ВыпускПродукцииУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыИОстатки КАК ХозрасчетныйОстатки
	|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОстатки.Счет
	|			И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОстатки.Подразделение
	|			И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОстатки.НоменклатурнаяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИнвентаризацияНЗП.СчетЗатрат КАК СчетЗатрат,
	|			ИнвентаризацияНЗП.Подразделение КАК Подразделение,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			СУММА(ИнвентаризацияНЗПСостав.Сумма) КАК СуммаБУ,
	|			ИнвентаризацияНЗПСостав.СуммаНУ КАК СуммаНУ
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	|		ГДЕ
	|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	|			И ИнвентаризацияНЗП.Организация = &Организация
	|			И ИнвентаризацияНЗП.Подразделение = &Подразделение
	|			И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИнвентаризацияНЗП.СчетЗатрат,
	|			ИнвентаризацияНЗП.Подразделение,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|			ИнвентаризацияНЗПСостав.СуммаНУ) КАК ОстаткиНЗП
	|		ПО (ХозрасчетныйОстатки.Счет = ОстаткиНЗП.СчетЗатрат)
	|			И (ХозрасчетныйОстатки.Подразделение = ОстаткиНЗП.Подразделение)
	|			И (ХозрасчетныйОстатки.НоменклатурнаяГруппа = ОстаткиНЗП.НоменклатурнаяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачДата,
	|				&КонДата,
	|				,
	|				СчетДт В ИЕРАРХИИ (&Счет90),
	|				&ВидыСубконто,
	|				СчетКт В ИЕРАРХИИ (&СчетаЗатрат),
	|				,
	|				Организация = &Организация
	|					И (ПодразделениеКт = &Подразделение ИЛИ ПодразделениеКт ЕСТЬ NULL)
	|					И СубконтоКт1 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОборотыДтКт
	|		ПО ВыпускПродукцииУслуг.СчетЗатрат = ХозрасчетныйОборотыДтКт.СчетКт
	|			И ВыпускПродукцииУслуг.Подразделение = ХозрасчетныйОборотыДтКт.ПодразделениеКт
	|			И ВыпускПродукцииУслуг.НоменклатурнаяГруппа = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииУслуг.СчетЗатрат,
	|	ВыпускПродукцииУслуг.Подразделение,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа,
	|	ВыпускПродукцииУслуг.Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания,
	|	ВыпускПродукцииУслуг.СубконтоСписания1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3,
	|	ЕСТЬNULL(ОстаткиНЗП.СуммаБУ, 0),
	|	ЕСТЬNULL(ОстаткиНЗП.СуммаНУ, 0),
	//|	ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0),
	|	ВЫБОР КОГДА &Общая=ЛОЖЬ Тогда 0 Иначе ЕСТЬNULL(ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот, 0) Конец,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрКонечныйОстаток, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрКонечныйОстаток, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПрОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВрОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНуКонечныйОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаВРОборотКт, 0) + ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаПРОборотКт, 0)
	|ИТОГИ
	|	СУММА(ПлановаяСтоимость),
	|	СУММА(ПлановаяСтоимостьВПроводках),
	|	МАКСИМУМ(ОстатокПрямыхРасходов),
	|	СУММА(ВсегоПрямыхРасходов),
	|	СУММА(СписаноРасходов),
	|	МАКСИМУМ(СуммаНЗП),
	|	МАКСИМУМ(ОстатокПрямыхРасходовНУ),
	|	МАКСИМУМ(ОстатокПрямыхРасходовПР),
	|	МАКСИМУМ(ОстатокПрямыхРасходовВР),
	|	СУММА(ВсегоПрямыхРасходовНУ),
	|	СУММА(ВсегоПрямыхРасходовПР),
	|	СУММА(ВсегоПрямыхРасходовВР),
	|	СУММА(СписаноРасходовНУ),
	|	СУММА(СписаноРасходовПР),
	|	СУММА(СписаноРасходовВР),
	|	МАКСИМУМ(СуммаНЗПНУ)
	|ПО
	|	Подразделение,
	|	СчетЗатрат,
	|	НоменклатурнаяГруппа";
	
	
	Если ПеределНоменклатурнаяГруппа = "Все" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг", ") КАК ВыпускПродукцииУслуг");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Субконто1 = &НоменклатурнаяГруппа", " ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И СубконтоКт1 = &НоменклатурнаяГруппа", " ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И НоменклатурнаяГруппа = &НоменклатурнаяГруппа) КАК ВыпускПродукцииУслуг", "И НоменклатурнаяГруппа = &НоменклатурнаяГруппа" + УсловияВстречногоВыпуска2 + ") КАК ВыпускПродукцииУслуг");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата",               мНачДата);
	Запрос.УстановитьПараметр("КонДата",               мКонДата);
	Запрос.УстановитьПараметр("НачГраница",            мНачГраница);
	Запрос.УстановитьПараметр("КонГраница",            мКонГраница);
	Запрос.УстановитьПараметр("Организация",           СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение",         ПеределПодразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",  ПеределНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ЕНВД",                  Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Истина, СтруктураШапкиДокумента.Организация);
	Если УчетнаяПолитика.СистемаНалогообложения=Перечисления.СистемыНалогообложения.Общая ИЛИ УчетнаяПолитика.СистемаНалогообложения=Перечисления.СистемыНалогообложения.Общая_ЕНВД Тогда
		Запрос.УстановитьПараметр("Общая",Истина);
	Иначе
		Запрос.УстановитьПараметр("Общая",Ложь);
	КонецЕсли;
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("СчетаЗатрат",        СчетаЗатрат);
	Счета90 = Новый Массив;
	Счета90.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	Счета90.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("Счет90",        Счета90);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидыСубконтоНГиСЗ",  ВидыСубконто);
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ВыпускПродукцииУслуг";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОбороты";
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХозрасчетныйОборотыИОстатки";
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьЗапросПоПрямымЗатратам()

// Процедура формирования движений по прямым затратам по переделу
// Производит распределение прямых расходов, учтенных на счетах 20 и 23,
// на стоимость продукции (услуг).
// Распределяются только те прямые расходы, для которых установлен текущий номер передела.
//
//	Параметры:
//		НомерПередела - Число - номер передела;
//		ВыполненоРаспределениеОХРИлиОПР - Булево - определяет на данный момент выполнено ли
//			распределение общепроизводственных и общехозяйственных расходов.
//
Процедура ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение = "", ПеределНоменклатурнаяГруппа = "", ВыполненоРаспределениеОХРИлиОПР = Ложь, МассивНоменклатуры, СтруктураДопПараметров)
	
	Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
		ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР);
	КонецЕсли;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Истина, СтруктураШапкиДокумента.Организация);
	// Формирование запроса по прямым расходам.
	РезультатЗапроса = Неопределено;
	СформироватьЗапросПоПрямымЗатратам(СтруктураШапкиДокумента, ПеределПодразделение, ПеределНоменклатурнаяГруппа, РезультатЗапроса, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР);
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	
	// Выбираются прямые расходы в разрезе счета учета, подразделения, номенклатурной группы.
	ОбходПоподразделениям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоподразделениям.Следующий() Цикл
		ОбходПоСчетамЗатрат = ОбходПоподразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСчетамЗатрат.Следующий() Цикл
			
			ОбходПоНомГруппам = ОбходПоСчетамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				
				
				// Прямые расходы за минусом НЗП подлежат распределению
				// на стоимость готовой продукции, услуг.
				// Т.к. при оприходовании на склад готовой продукции часть прямых
				// расходов (в размере плановой стоимости этой продукции) была
				// списана, то необходимо к общей сумме прямых расходов прибавить
				// списанную ранее сумму прямых расходов.
				
				СписаноРасходов = ОбходПоНомГруппам.СписаноРасходов;
				СписаноРасходовНУ = ОбходПоНомГруппам.СписаноРасходовНУ;
				СписаноРасходовПР = ОбходПоНомГруппам.СписаноРасходовПР;
				СписаноРасходовВР = ОбходПоНомГруппам.СписаноРасходовВР;
				
				ВсегоПрямыхРасходов   = ОбходПоНомГруппам.ОстатокПрямыхРасходов   + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходов);
				ВсегоПрямыхРасходовНУ = ОбходПоНомГруппам.ОстатокПрямыхРасходовНУ + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходовНУ);
				ВсегоПрямыхРасходовПР = ОбходПоНомГруппам.ОстатокПрямыхРасходовПР + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходовПР);
				ВсегоПрямыхРасходовВР = ОбходПоНомГруппам.ОстатокПрямыхРасходовВР + ?(ВыполненоРаспределениеОХРИлиОПР, 0, СписаноРасходовВР);
				
				СуммаНЗП   = ОбходПоНомГруппам.СуммаНЗП;
				СуммаНЗПНУ = ОбходПоНомГруппам.СуммаНЗПНУ;
				РазницыВНЗП = НайтиРазницуВНЗП(СтруктураДопПараметров, ОбходПоСчетамЗатрат.СчетЗатрат, ОбходПоНомГруппам.Подразделение, ОбходПоНомГруппам.НоменклатурнаяГруппа);
				СуммаНЗППР = РазницыВНЗП.СуммаПр;
				СуммаНЗПВР = РазницыВНЗП.СуммаВр;
				
				СуммаПрямыхРасходовНаВыпуск   = ВсегоПрямыхРасходов   - СуммаНЗП;
				СуммаПрямыхРасходовНаВыпускНУ = ВсегоПрямыхРасходовНУ - СуммаНЗПНУ;
				СуммаПрямыхРасходовНаВыпускПР = ВсегоПрямыхРасходовПР - СуммаНЗППР;
				СуммаПрямыхРасходовНаВыпускВР = ВсегоПрямыхРасходовВР - СуммаНЗПВР;
				
				// В качестве базы распределения прямых расходов на выпущенную продукцию
				// используется плановая себестоимость.
				ВсегоБазаРаспределения = ОбходПоНомГруппам.ПлановаяСтоимость;
				РаспределеноБазыРаспределения = 0;
				СписаноПрямыхРасходов   = 0;
				СписаноПрямыхРасходовНУ = 0;
				СписаноПрямыхРасходовПР = 0;
				СписаноПрямыхРасходовВР = 0;
				
				ПоследнийПередел = (Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "1" Или  СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "");
				
				Если ПоследнийПередел И НЕ СуммаНЗП = 0 Тогда
					СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
					СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.СчетЗатрат;
					СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
					СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
					СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗП   =  СуммаНЗП;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПНУ =  СуммаНЗПНУ;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗППР =  СуммаНЗППР;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНЗПВР =  СуммаНЗПВР;
					СтрокаЗаписиРасчетаСебестоимости.Сумма      =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаНУ    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПР    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаВР    =  0;
					СтрокаЗаписиРасчетаСебестоимости.СуммаПлан  =  0;
				КонецЕсли;	
				
				// Обход по операциям выпуска продукции (услуг). Обходя все операции выпуска
				// производим распределение по ним прямых расходов.
				ТаблицаКорректируемыхНаправлений = Новый ТаблицаЗначений;
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Продукция");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("Подразделение");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПодразделениеСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("НоменклатурнаяГруппа");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания1");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания2");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СубконтоСписания3");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СчетЗатрат");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписания");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписанияНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписанияПР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаКорректировкиСписанияВР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходов");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовПР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СписаноРасходовВР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимость");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("ПлановаяСтоимостьВПроводках");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗП");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗПНУ");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗППР");
				ТаблицаКорректируемыхНаправлений.Колонки.Добавить("СуммаНЗПВР");
				
				СуммаНеКорректируемыхНаправлений   = 0;
				СуммаНеКорректируемыхНаправленийНУ = 0;
				СуммаНеКорректируемыхНаправленийПР = 0;
				СуммаНеКорректируемыхНаправленийВР = 0;
				
				
				Обход = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Обход.Следующий() Цикл
					
					РаспределеноБазыРаспределения = РаспределеноБазыРаспределения + Обход.ПлановаяСтоимость;
					
					СуммаСписания   = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпуск/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходов);
					СуммаСписанияНУ = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускНУ/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовНУ);
					СуммаСписанияПр = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускПР/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовПР);
					СуммаСписанияВР = ?(ВсегоБазаРаспределения = 0, 0, Окр(СуммаПрямыхРасходовНаВыпускВР/ВсегоБазаРаспределения*РаспределеноБазыРаспределения, 2) - СписаноПрямыхРасходовВР);
					
					СписаноПрямыхРасходов   = СписаноПрямыхРасходов   + СуммаСписания;
					СписаноПрямыхРасходовНУ = СписаноПрямыхРасходовНУ + СуммаСписанияНУ;
					СписаноПрямыхРасходовПР = СписаноПрямыхРасходовПР + СуммаСписанияПР;
					СписаноПрямыхРасходовВР = СписаноПрямыхРасходовВР + СуммаСписанияВР;
					
					СуммаКорректировкиСписания   = СуммаСписания - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходов);
					СуммаКорректировкиСписанияНУ = СуммаСписанияНУ - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовНУ);
					СуммаКорректировкиСписанияПР = СуммаСписанияПР - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовПР);
					СуммаКорректировкиСписанияВР = СуммаСписанияВР - ?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовВР);
					
					
					Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3"  Тогда
						ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2, Обход.СубконтоСписания3));
						Если ВстречныйВыпуск.Количество() > 0 Тогда
							СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
							СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
							СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорректировкиСписанияПР;
							СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорректировкиСписанияВР;
							Продолжить;
						Иначе
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2", Обход.Подразделение, Обход.НоменклатурнаяГруппа, Обход.СубконтоСписания1, Обход.СубконтоСписания2));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
								СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорректировкиСписанияПР;
								СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорректировкиСписанияВР;
								Продолжить;
							КонецЕсли;
							
							ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппаПересчета, ПодразделениеПересчета", Обход.ПодразделениеСписания, Обход.НоменклатурнаяГруппа, Обход.Подразделение));
							Если ВстречныйВыпуск.Количество() > 0 Тогда
								СуммаНеКорректируемыхНаправлений   = СуммаНеКорректируемыхНаправлений + СуммаКорректировкиСписания;
								СуммаНеКорректируемыхНаправленийНУ = СуммаНеКорректируемыхНаправленийНУ + СуммаКорректировкиСписанияНУ;
								СуммаНеКорректируемыхНаправленийПР = СуммаНеКорректируемыхНаправленийПР + СуммаКорректировкиСписанияПР;
								СуммаНеКорректируемыхНаправленийВР = СуммаНеКорректируемыхНаправленийВР + СуммаКорректировкиСписанияВР;
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаКорректируемыхНаправлений.Добавить();
					НоваяСтрока.Продукция            = Обход.Продукция;
					НоваяСтрока.Подразделение        = Обход.Подразделение;
					НоваяСтрока.ПодразделениеСписания = Обход.ПодразделениеСписания;
					НоваяСтрока.НоменклатурнаяГруппа = Обход.НоменклатурнаяГруппа;
					НоваяСтрока.СубконтоСписания1    = Обход.СубконтоСписания1;
					НоваяСтрока.СубконтоСписания2    = Обход.СубконтоСписания2;
					НоваяСтрока.СубконтоСписания3    = Обход.СубконтоСписания3;
					НоваяСтрока.СчетСписания         = Обход.СчетСписания;
					НоваяСтрока.СчетЗатрат           = Обход.СчетЗатрат;
					НоваяСтрока.СуммаКорректировкиСписания = СуммаКорректировкиСписания;
					НоваяСтрока.СуммаКорректировкиСписанияНУ = СуммаКорректировкиСписанияНУ;
					НоваяСтрока.СуммаКорректировкиСписанияПР = СуммаКорректировкиСписанияПР;
					НоваяСтрока.СуммаКорректировкиСписанияВР = СуммаКорректировкиСписанияВР;
					НоваяСтрока.СписаноРасходов   =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходов);
					НоваяСтрока.СписаноРасходовНУ =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовНУ);
					НоваяСтрока.СписаноРасходовПР =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовПР);
					НоваяСтрока.СписаноРасходовВР =?(ВыполненоРаспределениеОХРИлиОПР, 0, Обход.СписаноРасходовВР);
					НоваяСтрока.ПлановаяСтоимость   = Обход.ПлановаяСтоимость;
					НоваяСтрока.ПлановаяСтоимостьВПроводках   = Обход.ПлановаяСтоимостьВПроводках;
					НоваяСтрока.СуммаНЗП            = Обход.СуммаНЗП;
					НоваяСтрока.СуммаНЗПНУ            = Обход.СуммаНЗПНУ;
				КонецЦикла;
				
				ВсегоКорректировок = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписания");
				ВсегоКорректировокНУ = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписанияНУ");
				ВсегоКорректировокПР = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписанияПР");
				ВсегоКорректировокВР = ТаблицаКорректируемыхНаправлений.Итог("СуммаКорректировкиСписанияВР");
				
				КоэффициентРаспределенияНекорректируемойСуммы   = ?(ВсегоКорректировок = 0, 0,   СуммаНеКорректируемыхНаправлений / ВсегоКорректировок);
				КоэффициентРаспределенияНекорректируемойСуммыНУ = ?(ВсегоКорректировокНУ = 0, 0, СуммаНеКорректируемыхНаправленийНУ / ВсегоКорректировокНУ);
				КоэффициентРаспределенияНекорректируемойСуммыПР = ?(ВсегоКорректировокПР = 0, 0, СуммаНеКорректируемыхНаправленийПР / ВсегоКорректировокПР);
				КоэффициентРаспределенияНекорректируемойСуммыВР = ?(ВсегоКорректировокВР = 0, 0, СуммаНеКорректируемыхНаправленийВР / ВсегоКорректировокВР);
				
				Для Каждого Обход Из ТаблицаКорректируемыхНаправлений Цикл
					СуммаКорректировкиСписания = Обход.СуммаКорректировкиСписания * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СуммаКорректировкиСписанияНУ = Обход.СуммаКорректировкиСписанияНУ * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);	
					СуммаКорректировкиСписанияПР = Обход.СуммаКорректировкиСписанияПР * (1 + КоэффициентРаспределенияНекорректируемойСуммыПР);	
					СуммаКорректировкиСписанияВР = Обход.СуммаКорректировкиСписанияВР * (1 + КоэффициентРаспределенияНекорректируемойСуммыВР);	
					
					СписаноРасходов   = Обход.СписаноРасходов * (1 + КоэффициентРаспределенияНекорректируемойСуммы);	
					СписаноРасходовНУ = Обход.СписаноРасходовНУ * (1 + КоэффициентРаспределенияНекорректируемойСуммыНУ);	
					СписаноРасходовПР = Обход.СписаноРасходовПР * (1 + КоэффициентРаспределенияНекорректируемойСуммыПР);	
					СписаноРасходовВР = Обход.СписаноРасходовВР * (1 + КоэффициентРаспределенияНекорректируемойСуммыВР);	
					
					// Формирование проводок по списанию
					Если СтруктураДопПараметров.Счет40 Тогда
						// Проводки Дт40 Кт20 на сумму фактической стоимости,
						//          Дт43 Кт40 на сумму отклонений
						Если СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма         = СуммаКорректировкиСписания;
							СуммаНУ       = СуммаКорректировкиСписанияНУ;
							СуммаПР       = СуммаКорректировкиСписанияПР;
							СуммаВР       = СуммаКорректировкиСписанияВР;
							
							НоваяПроводка.СчетДт =   ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Фактическая);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(НоваяПроводка, Обход.Подразделение, Обход.Подразделение);
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания - СписаноРасходов;
							СуммаНУ     = СуммаКорректировкиСписанияНУ - СписаноРасходовНУ;
							СуммаПР     = СуммаКорректировкиСписанияПР - СписаноРасходовПР;
							СуммаВР     = СуммаКорректировкиСписанияВР - СписаноРасходовВР;
							
							Если УчетнаяПолитика.СписыватьОтклонения40На90Счет Тогда ///***
								Если (Найти(Обход.СчетСписания,"43")>0) ИЛИ (Найти(Обход.СчетСписания,"10")>0) Тогда  
									НоваяПроводка.СчетДт=ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
									БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
								Иначе
									НоваяПроводка.СчетДт = Обход.СчетСписания;
									БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
									БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
									БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
								КонецЕсли;	
							Иначе	
								НоваяПроводка.СчетДт = Обход.СчетСписания;
								БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
								БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
								БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							КонецЕсли;
							
							НоваяПроводка.СчетКт =  ПланыСчетов.Хозрасчетный.ВыпускПродукции;
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "ВидыСтоимости", Перечисления.ВидыСтоимости.Отклонение);
							
							БухгалтерскийУчетСервер.УстановитьПодразделениеПроводки(НоваяПроводка, Обход.ПодразделениеСписания, "Дт");
							БухгалтерскийУчетСервер.УстановитьПодразделениеПроводки(НоваяПроводка, Обход.Подразделение, "Кт");
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
						КонецЕсли;
					Иначе
						Если СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
							// Проводка Дт 43 Кт 20 на сумму отклонений
							НоваяПроводка = мПроводки.Добавить();
							НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
							
							НоваяПроводка.Активность  = Истина;
							НоваяПроводка.Период      = Дата;
							НоваяПроводка.Содержание  = "Корректировка выпуска продукции (услуг)";
							
							НоваяПроводка.Сумма       = СуммаКорректировкиСписания;
							СуммаНУ     = СуммаКорректировкиСписанияНУ;
							СуммаПР     = СуммаКорректировкиСписанияПР;
							СуммаВР     = СуммаКорректировкиСписанияВР;
							
							НоваяПроводка.СчетДт = Обход.СчетСписания;
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, Обход.СубконтоСписания1);
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, Обход.СубконтоСписания2);
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, Обход.СубконтоСписания3);
							
							НоваяПроводка.СчетКт = Обход.СчетЗатрат;
							БухгалтерскийУчет.УстановитьСубконтоПоСчету( НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", Обход.НоменклатурнаяГруппа);
							
							БухгалтерскийУчетСервер.УстановитьПодразделениеПроводки(НоваяПроводка, Обход.ПодразделениеСписания, "Дт");
							БухгалтерскийУчетСервер.УстановитьПодразделениеПроводки(НоваяПроводка, Обход.Подразделение, "Кт");
							
							НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР,СуммаПР,СуммаВР,СуммаВР,НоваяПроводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
							
						КонецЕсли;	
					КонецЕсли;
					
					// Добавим в таблицу список номенклатуры, у которой изменилась средневзвешенная
					// стоимость и, следовательно, необходимо выполнить корректировку списаний.
					Если (СуммаКорректировкиСписания <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписания - СписаноРасходов <> 0,ложь))
						Или (СуммаКорректировкиСписанияНУ <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписанияНУ - СписаноРасходовНУ <> 0,ложь))
						Или (СуммаКорректировкиСписанияПР <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписанияПР - СписаноРасходовПР <> 0,ложь))
						Или (СуммаКорректировкиСписанияВР <> 0 ИЛИ ?(СтруктураДопПараметров.Счет40,СуммаКорректировкиСписанияВР - СписаноРасходовВР <> 0,ложь)) Тогда
						Для НомерСубконто = 1 По 2 Цикл
							Если ТипЗнч(Обход["СубконтоСписания" + НомерСубконто]) = Тип("СправочникСсылка.Номенклатура") Тогда
								МассивНоменклатуры.Добавить(Обход["СубконтоСписания" + НомерСубконто]);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Обход.ПлановаяСтоимость <> 0 Или СуммаКорректировкиСписания <> 0 Или СуммаКорректировкиСписанияНУ <> 0 Или СуммаКорректировкиСписанияПР <> 0 Или СуммаКорректировкиСписанияВР <> 0 Тогда
						
						СтрокаЗаписиРасчетаСебестоимости = ЗаписьРасчетаСебестоимости.Добавить();
						СтрокаЗаписиРасчетаСебестоимости.СчетУчета = ОбходПоСчетамЗатрат.СчетЗатрат;
						СтрокаЗаписиРасчетаСебестоимости.Подразделение = ОбходПоПодразделениям.Подразделение;
						СтрокаЗаписиРасчетаСебестоимости.НоменклатурнаяГруппа = ОбходПоНомГруппам.НоменклатурнаяГруппа;
						СтрокаЗаписиРасчетаСебестоимости.Продукция = Обход.Продукция;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПлан = Обход.ПлановаяСтоимость;
						СтрокаЗаписиРасчетаСебестоимости.ДокументВыпуска = Строка(Обход.СубконтоСписания2) + " " + Строка(Обход.СубконтоСписания3);
						СтрокаЗаписиРасчетаСебестоимости.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
						СтрокаЗаписиРасчетаСебестоимости.СуммаПР = СуммаКорректировкиСписанияПР;
						СтрокаЗаписиРасчетаСебестоимости.СуммаВР = СуммаКорректировкиСписанияВР;
						СтрокаЗаписиРасчетаСебестоимости.Сумма = СуммаКорректировкиСписания - ?(ПоследнийПередел И СуммаКорректировкиСписания <> 0 ,Обход.ПлановаяСтоимостьВПроводках, 0);
						СтрокаЗаписиРасчетаСебестоимости.СуммаНУ = СуммаКорректировкиСписанияНУ - ?(ПоследнийПередел И СуммаКорректировкиСписанияНУ <> 0,Обход.ПлановаяСтоимостьВПроводках, 0);
					КонецЕсли;	
					
				КонецЦикла; // по направлениям выпуска продукции (услуг)
				
			КонецЦикла; // по номенклатурным группам
		КонецЦикла; // по счетам учета прямых затрат
	КонецЦикла; // по подразделениям
	
	Если НЕ Отказ Тогда
		мПроводки.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит корректировку стоимости списания
// выпущенной в текущем месяце продукции.
Процедура КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРИлиОПР, СтруктураДопПараметров)
	
	// Формирование корректировки стоимости списаний, исходя из средевзвешенной стоимости номенклатуры
	СтруктураДопПараметров.Вставить("Организация",    СтруктураШапкиДокумента.Организация);
	СтруктураДопПараметров.Вставить("Период",         Дата);
	СтруктураДопПараметров.Вставить("Регистратор",    ЭтотОбъект);
	СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивНоменклатуры);
	
	// После закрытия общепроизводственных расходов необходимо,
	// чтобы не корректировалось списание номенклатуры в дебет
	// счетов 25 (26, если этот счет закрывается на счет 20).
	Если ВыполненоРаспределениеОХРИлиОПР Тогда
		
		// Массив счетов по которым не надо делать корректировку операций списания
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		Если Не СтруктураШапкиДокумента.УчетнаяПолитика["ДиректКостинг"] Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
		КонецЕсли; 
		
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", МассивСчетов);
		
	Иначе
		СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	КонецЕсли;
	
	КорректировкаСтоимости.КорректировкаСтоимости(МассивНоменклатуры, мНачДата, мКонДата, СтруктураДопПараметров);
	
КонецПроцедуры

Функция РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СтруктураДопПараметров.Вставить("ТаблицаВстречногоВыпуска", Новый ТаблицаЗначений);
	ПорядокПеределов = ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	Возврат ПорядокПеределов;	
	
КонецФункции 

Функция ПолучитьПорядокПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	ТаблицаПроизводства = АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров);
	ТаблицаПроизводства.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	
	// Для ускорения выгрузим колонку продукция в ТабСписПрод,
	ТабСписПрод = ТаблицаПроизводства.Скопировать();
	ТабСписПрод.Свернуть("ГП");
	
	ТаблицаПроизводства.Сортировать("ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	Индекс = 0;
	МаксИндекс = ТаблицаПроизводства.Количество() - 1;
	ТекПередел = 1;
	ПараметрыПоиска = Новый Структура;
	ПроставленПередел = Истина;
	
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
		
		Пока Индекс <= МаксИндекс Цикл
			ТекСтрока = ТаблицаПроизводства[Индекс];
			
			Если ТабСписПрод.Найти( ТекСтрока.НоменклатураЗатрат, "ГП") = Неопределено Тогда
				ТекСтрока.НомерПередела = ТекПередел;
				ПроставленПередел = Истина;
				Индекс = Индекс + 1;
				Пока Индекс <= МаксИндекс Цикл
					Стр = ТаблицаПроизводства[Индекс];
					Если Стр.НоменклатураЗатрат = ТекСтрока.НоменклатураЗатрат Тогда
						Стр.НомерПередела = ТекПередел;
					Иначе
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
				
			Иначе
				ПараметрыПоиска.Очистить();
				ПараметрыПоиска.Вставить( "ГП", ТекСтрока.НоменклатураЗатрат);
				НаборСтрок = ТаблицаПроизводства.НайтиСтроки(ПараметрыПоиска);
				Если НаборСтрок.Количество() = 0 Тогда
					ТекСтрока.НомерПередела = ТекПередел;
					ПроставленПередел = Истина;
				Иначе
					СледПередел = Ложь;
					Для Каждого СтрокаПрод Из НаборСтрок Цикл
						Если СтрокаПрод.НомерПередела = 0 ИЛИ СтрокаПрод.НомерПередела = ТекПередел Тогда
							СледПередел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не СледПередел Тогда
						ТекСтрока.НомерПередела = ТекПередел;
						ПроставленПередел = Истина;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		
		ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
		ТекСтрока = ТаблицаПроизводства.Найти(0, "НомерПередела");
		
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		Иначе
			Индекс = ТаблицаПроизводства.Индекс(ТекСтрока);
			
		КонецЕсли;
		
		ТекПередел = ТекПередел + 1;
		
	КонецЦикла;
	
	ТаблицаПроизводства.Сортировать("НомерПередела Убыв, ПодразделениеПредставление, НоменклатурнаяГруппаПредставление, НоменклатураЗатратПредставление");
	
	// Продукция выпущенная на переделе.
	ТабТемп = ТаблицаПроизводства.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП, НомерПередела");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, ГП");
	ТабПродукция.Колонки.Добавить("НомерПередела", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(12, 0));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("НоменклатурнаяГруппа", СтрокаТаб.НоменклатурнаяГруппа);
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабТемп = 0;
	
	ТабПродукция.Свернуть("Подразделение, НоменклатурнаяГруппа, НомерПередела");
	ТабПродукция.Сортировать("НомерПередела Возр");
	
	
	ТаблицаВстречногоВыпуска = ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента);
	
	СтруктураДопПараметров.ТаблицаВстречногоВыпуска = ТаблицаВстречногоВыпуска;
	
	// Если в порядке переделов всего один передел, то сообщение не выдается
	//ПорядокПодразделенийСообщался = ПорядокПодразделенийСообщался ИЛИ (ТабПродукция.Количество() < 2);
	//
	//Если Не ПорядокПодразделенийСообщался Тогда
	//	Сообщить("Порядок переделов:");
	//	
	//	НомерПередела = 1;
	//	Для Каждого Передел Из ТабПродукция Цикл
	//		Сообщить("" + НомерПередела + " - " + Передел.Подразделение + " - " + Передел.НоменклатурнаяГруппа);
	//		НомерПередела = НомерПередела + 1;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//ПорядокПодразделенийСообщался = Истина;
	
	Возврат ТабПродукция;
	
КонецФункции

Функция АнализДанныхПроизводства(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	// Модель производства ввиде последовательности цепочек:
	//ГП(готовая продукция),
	//Подразделение,
	//ном.группа,
	//Номенклатура, израсходованная на производство, в этом подразделении и на эту ном.группу, а значит и на эту ГП
	//счет учета затрат производства
	
	СчетаЗатрат = Новый Массив;
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	РазрешитьУчетУслугБезПлановыхЦен = Не ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Ложь, СтруктураШапкиДокумента.Организация).ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам;
	
	
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗатрат.Источник КАК Источник,
	|	ТаблицаЗатрат.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.Подразделение) КАК ПодразделениеПредставление,
	|	ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ТаблицаГП.НоменклатурнаяГруппа, ТаблицаЗатрат.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппаПредставление,
	|	ЕСТЬNULL(ТаблицаГП.ГП, ""NULL"") КАК ГП,
	|	ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаЗатрат.НоменклатураЗатрат КАК НоменклатураЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаЗатрат.НоменклатураЗатрат) КАК НоменклатураЗатратПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК Источник,
	|		ХозрасчетныйОбороты.ПодразделениеДт КАК Подразделение,
	|		ХозрасчетныйОбороты.СубконтоДт1 КАК НоменклатурнаяГруппа,
	|		ХозрасчетныйОбороты.СчетДт КАК СчетЗатрат,
	|		ХозрасчетныйОбороты.СубконтоКт1 КАК НоменклатураЗатрат
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		ВложенныйЗапрос.Субконто1,
	|		ВложенныйЗапрос.Субконто2,
	|		ВложенныйЗапрос.Счет,
	|		ХозрасчетныйОбороты.СубконтоКт1
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ХозрасчетныйОстатки.Подразделение КАК Субконто1,
	|			ХозрасчетныйОстатки.Субконто1 КАК Субконто2,
	|			ХозрасчетныйОстатки.Счет КАК Счет
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(&НачГраница, Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОбороты
	|			ПО (ХозрасчетныйОбороты.СубконтоДт1 = ВложенныйЗапрос.Субконто1)
	|				И (ХозрасчетныйОбороты.СубконтоДт2 = ВложенныйЗапрос.Субконто2)
	|				И (ХозрасчетныйОбороты.СчетДт = ВложенныйЗапрос.Счет)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2,
	|		ХозрасчетныйОборотыДтКт.ПодразделениеДт,
	|		NULL,
	|		ХозрасчетныйОборотыДтКт.СчетДт,
	|		&ПустаяСтатьяЗатрат
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		ВыпускПродукцииУслугОбороты.СубконтоСписания1,
	|		ВыпускПродукцииУслугОбороты.СубконтоСписания2,
	|		ВыпускПродукцииУслугОбороты.СчетСписания,
	|		ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				Месяц,
	|				СчетЗатрат В ИЕРАРХИИ (&Счета)
	|					И ПрямыеРасходыРаспределятьПоКоличеству
	|					И Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		ВыпускПродукцииУслугОбороты.Подразделение,
	|		ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа,
	|		ВыпускПродукцииУслугОбороты.СчетЗатрат,
	|		&ПустаяСтатьяЗатрат
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				Месяц,
	|				СчетЗатрат В ИЕРАРХИИ (&Счета)
	|					И Организация = &Организация) КАК ВыпускПродукцииУслугОбороты) КАК ТаблицаЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыпускПродукцииУслугОбороты.Подразделение КАК Подразделение,
	|			ВыпускПродукцииУслугОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			ВыпускПродукцииУслугОбороты.СчетЗатрат КАК СчетЗатрат,
	|			ВыпускПродукцииУслугОбороты.Продукция КАК ГП
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(
	|					&НачДата,
	|					&КонДата,
	|					,
	|					СчетЗатрат В ИЕРАРХИИ (&Счета)
	|						И Организация = &Организация) КАК ВыпускПродукцииУслугОбороты
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВложенныйЗапрос.СубконтоДт1,
	|			РеализацияУслугОбороты.НоменклатурнаяГруппа,
	|			ВложенныйЗапрос.СчетДт,
	|			&ПустаяНоменклатура
	|		ИЗ
	|			РегистрНакопления.РеализацияУслуг.Обороты КАК РеализацияУслугОбороты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	|					ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|					ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2
	|				ИЗ
	|					РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&Счета), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|				ПО РеализацияУслугОбороты.НоменклатурнаяГруппа = ВложенныйЗапрос.СубконтоДт2
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИнвентаризацияНЗП.Подразделение,
	|			ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|			ИнвентаризацияНЗП.СчетЗатрат,
	|			&ПустаяНоменклатура
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|				ПО ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка
	|		ГДЕ
	|			ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	|			И ИнвентаризацияНЗП.СчетЗатрат В ИЕРАРХИИ(&Счета)
	|			И ИнвентаризацияНЗП.Организация = &Организация
	|			И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)) КАК ТаблицаГП
	|		ПО (ТаблицаГП.Подразделение = ТаблицаЗатрат.Подразделение)
	|			И (ВЫБОР
	|				КОГДА ТаблицаЗатрат.Источник = 1
	|					ТОГДА ВЫБОР
	|								КОГДА ТаблицаГП.СчетЗатрат = ТаблицаЗатрат.СчетЗатрат
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|							И ВЫБОР
	|								КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа ССЫЛКА Справочник.НоменклатурныеГруппы
	|									ТОГДА ВЫБОР
	|											КОГДА ТаблицаЗатрат.НоменклатурнаяГруппа = ТаблицаГП.НоменклатурнаяГруппа
	|												ТОГДА ИСТИНА
	|											ИНАЧЕ ЛОЖЬ
	|										КОНЕЦ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ = ИСТИНА)";
	
	
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("КонДата",     мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	СчетаЗатрат = Новый Массив;
	ПС = ПланыСчетов.Хозрасчетный;
	СчетаЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПС.ВспомогательныеПроизводства);			   
	Запрос.УстановитьПараметр("Счета",       СчетаЗатрат);
	
	Запрос.УстановитьПараметр("НачГраница",       Новый Граница(мНачДата, ВидГраницы.Исключая));
	
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПС.ОбщепроизводственныеРасходы);
	Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
		СчетаОбщихРасх.Добавить(ПС.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = "NULL";
	ПостроительЗапроса.Выполнить();
	ТаблицаПроизводства = ПостроительЗапроса.Результат.Выгрузить();
	ТаблицаПроизводства.Колонки.Удалить("Источник");
	
	ПостроительЗапроса.Отбор.Сбросить();
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ГП");
	ЭлементОтбора.Установить("NULL");
	ПостроительЗапроса.Выполнить();
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Источник = 1 Тогда // прямые затраты			
			Если  СтруктураШапкиДокумента.УчетнаяПолитика.ПрямыеРасходыБезВыпускаВключатьВНЗП
				Или Не СтруктураШапкиДокумента.УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг.ПоПлановымЦенам
				ИЛИ ТаблицаНеЗакрытыхПодразделений.НайтиСтроки(Новый Структура("Подразделение, СчетЗатрат", Выборка.Подразделение, Выборка.СчетЗатрат)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;			
			Если Лев(Выборка.СчетЗатрат.Код, "2") = "26" Тогда
				Продолжить;
			КонецЕсли;	
			ТекстСообщения = "Не отражен выпуск продукции, оказание услуг или остатки НЗП.
			|Не обнаружены обороты по кредиту или остатки НЗП для:
			|Счет учета " + Выборка.СчетЗатрат+ ",
			|Подразделение " + Выборка.Подразделение + ",
			|Номенклатурная группа " + Выборка.НоменклатурнаяГруппа + ".
			|Рекомендуется ввести документы ""Отчет производства за смену"", ""Инвентаризация НЗП"" (меню ""Производство""), ""Акт об оказании производственных услуг"" (меню ""Покупка"") или указать, что при отсутствии выпуска прямые расходы считаются остками НЗП (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"" закладка ""НЗП"")";
			СообщитьОбОшибкеРегОперации(ТекстСообщения, Выборка.НоменклатурнаяГруппа, Отказ, ЭтотОбъект);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
			
			
		ИначеЕсли Выборка.Источник = 2 Тогда // общие затраты		
			Если  Лев(Выборка.СчетЗатрат.Код, "2") = "26" Тогда
				Продолжить;
			КонецЕсли;	
			Если  Лев(Выборка.СчетЗатрат.Код, "2") = "25" И РазрешитьУчетУслугБезПлановыхЦен Тогда
				Продолжить;
			КонецЕсли;	
			
			
			Если СтруктураШапкиДокумента.УчетнаяПолитика.ПрямыеРасходыБезВыпускаВключатьВНЗП
				ИЛИ ТаблицаНеЗакрытыхПодразделений.Найти(Выборка.Подразделение, "Подразделение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			ТекстСообщения = "Не отражено оказание услуг или остатки НЗП.
			|Не обнаружены обороты по кредиту или остатки НЗП для:
			|Счет учета " + Выборка.СчетЗатрат+ ",
			|Подразделение " + Выборка.Подразделение + ",
			|Номенклатурная группа " + Выборка.НоменклатурнаяГруппа + ".
			|Рекомендуется ввести документы ""Отчет производства за смену"", ""Инвентаризация НЗП"" (меню ""Производство""), ""Акт об оказании производственных услуг"" (меню ""Покупка"") или указать, что при отсутствии выпуска прямые расходы считаются остками НЗП (меню ""Предприятие"" - ""Учетная политика"" - ""Учетная политика организаций"" закладка ""НЗП"")";
			
			СообщитьОбОшибкеРегОперации(ТекстСообщения, Выборка.СчетЗатрат, Отказ, ЭтотОбъект);
			
			Строка = ТаблицаНеЗакрытыхПодразделений.Добавить();
			Строка.Подразделение = Выборка.Подразделение;
			Строка.СчетЗатрат = Выборка.СчетЗатрат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПроизводства;
	
КонецФункции

Функция ПолучитьТаблицуВстречногоВыпуска(СтруктураШапкиДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета КАК ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета КАК НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , (НЕ СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат)), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета = ВложенныйЗапрос.СубконтоДт2
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Подразделение,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппа,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета,
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.НоменклатурнаяГруппаПересчета,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, Организация = &Организация) КАК ВстречныйВыпускПродукцииУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|			ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|			ХозрасчетныйОборотыДтКт.ПодразделениеДт КАК СубконтоДт1,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт2,
	|			ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт3,
	|			ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачДата, &КонДата, , СчетДт В ИЕРАРХИИ (&СчетаОбщихЗатрат), , , , &Организация = Организация) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|		ПО ВстречныйВыпускПродукцииУслугСрезПоследних.Продукция = ВложенныйЗапрос.СубконтоКт1
	|			И ВстречныйВыпускПродукцииУслугСрезПоследних.ПодразделениеПересчета = ВложенныйЗапрос.СубконтоДт1
	|ГДЕ
	|	ВстречныйВыпускПродукцииУслугСрезПоследних.Учитывается";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",     мКонГраница);
	Запрос.УстановитьПараметр("НачДата",     мНачДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	СчетаОбщихРасх = Новый Массив;
	СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг Тогда
		СчетаОбщихРасх.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаОбщихЗатрат", СчетаОбщихРасх);
	
	ТаблицаВстречногоВыпуска = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВстречногоВыпуска;
	
КонецФункции

// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(СтруктураШапкиДокумента, ВыполненоРаспределениеОХРИлиОПР = Ложь, СтруктураДопПараметров)
	
	Если ПорядокПеределов = Неопределено Или ПорядокПеределов.Количество() = 0 Тогда
		
		Если Не СтруктураШапкиДокумента.УчетнаяПолитика.ПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.ПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
			
			ДвиженияПоПрямымЗатратамПоУслугам(СтруктураШапкиДокумента, СтруктураДопПараметров, ВыполненоРаспределениеОХРИлиОПР);
		КонецЕсли;  	
		Если НЕ Отказ Тогда
			мПроводки.Записать(Ложь);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Передел Из ПорядокПеределов Цикл
		
		Если Не ВыполненоРаспределениеОХРИлиОПР Тогда
			ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, Передел.Подразделение, Передел.НоменклатурнаяГруппа);
		КонецЕсли;
		
		// Распределение прямых расходов по тем подразделениям, которым присвоен
		// текущий номер передела.
		МассивНоменклатуры = Новый Массив; // массив номенклатуры, у которой, в результате расчета себестоимости, изменилась средневзвешенная стоимость.
		ДвиженияПоПрямымЗатратам(СтруктураШапкиДокумента, Передел.Подразделение, Передел.НоменклатурнаяГруппа, ВыполненоРаспределениеОХРИлиОПР, МассивНоменклатуры, СтруктураДопПараметров);
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Истина, СтруктураШапкиДокумента.Организация);
		Если МассивНоменклатуры.Количество() > 0 Тогда
			Если НЕ УчетнаяПолитика.СписыватьОтклонения40На90Счет Тогда 
				КорректирровкаСтоимостиСписанияВыпущеннойПродукции(СтруктураШапкиДокумента, МассивНоменклатуры, ВыполненоРаспределениеОХРИлиОПР, СтруктураДопПараметров);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура запускает расчет прямых и косвенных расходов
// если используется простой расчет себестоимости и не используется встречный выпуск
// (производственная цепочка не имеет "закольцованных звеньев"),
// тогда расчет прямых затрат запускается один раз
// в противном случае
// первый расчет прямых затрат производится без учета переделов, задействованных в "кольце"
// второй расчет прямых затрат производится только по пределем, задействованным в "кольце"
// третий расчет прямых затрат проводится для всех переделов, но корректирует выпуск только той,
// готовой продукции, которая не была списана на "кольцо"
//
Процедура РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, СпособОценкиМПЗ)
	
	ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	Если СтруктураДопПараметров.ТаблицаВстречногоВыпуска.Количество() > 0 Тогда
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "1";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "2";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		// Списание общепроизводственных и общехозяйственных расходов
		// на себестоимость продукции (услуг).
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "3" + СпособОценкиМПЗ;
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	Иначе
		СтруктураДопПараметров.РасчетПрямыхЗатратНомер = "";
		РасчетПрямыхЗатрат(СтруктураШапкиДокумента, , СтруктураДопПараметров);
		РаспределениеКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеCчетовКосвенныхРасходов(СтруктураШапкиДокумента, СтруктураДопПараметров)
	
	СтруктураШапкиДокумента.Вставить("ПрименяетсяДиректКостинг", СтруктураШапкиДокумента.УчетнаяПолитика.ДиректКостинг);
	
	Если СтруктураШапкиДокумента.ПрименениеЕНВД Тогда 
		ВыручкаНеЕНВД = 0;
		ВыручкаЕНВД = 0;
		Коэффициент = 0;
	Иначе
		Коэффициент = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",      мНачДата);
	Запрос.УстановитьПараметр("ДатаКон",      мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	
	
	СчетаЗатрат1 = Новый Массив;
	ВидыСубконто1 = Новый Массив;
	СчетаЗатрат1.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат1.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат2 = Новый Массив;
	ВидыСубконто2 = Новый Массив;
	СчетаЗатрат2.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат2.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	ВидыСубконто1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ВидыСубконто1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("СчетаЗатрат1",  СчетаЗатрат1);
	Запрос.УстановитьПараметр("ВидыСубконто1",  ВидыСубконто1);
	ВидыСубконто2 = Новый Массив;
	ВидыСубконто2.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("Счет25",  ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто2",  ВидыСубконто2);
	Запрос.УстановитьПараметр("Счет26",  ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("ЕНВД",                Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	Запрос.МенеджерВременныхТаблиц = СтруктураДопПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Счет КАК Счет,
	|	ВложенныйЗапрос.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	СУММА(ВложенныйЗапрос.СуммаДтНУ) КАК СуммаДтНУ,
	|	СУММА(ВложенныйЗапрос.СуммаДтПР) КАК СуммаДтПР,
	|	СУММА(ВложенныйЗапрос.СуммаДтВР) КАК СуммаДтВР,
	|	ВложенныйЗапрос.СуммаДтБУ КАК СуммаДтБУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновноеИВспомогательноеПроизводство.Счет КАК Счет,
	|		ОсновноеИВспомогательноеПроизводство.Субконто1 КАК СтатьяЗатрат,
	|		ОсновноеИВспомогательноеПроизводство.Субконто2 КАК НоменклатурнаяГруппа,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаНУОборот, 0) КАК СуммаДтНУ,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаПРОборот, 0) КАК СуммаДтПР,
	|		ЕСТЬNULL(ОсновноеИВспомогательноеПроизводство.СуммаВРОборот, 0) КАК СуммаДтВР,
	|		ОсновноеИВспомогательноеПроизводство.Подразделение КАК Подразделение,
	|		0 КАК СуммаДтБУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				Счет В ИЕРАРХИИ (&СчетаЗатрат1),
	|				&ВидыСубконто1,
	|				Организация = &Организация
	|					И (НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД),
	|				(НЕ КорСчет В ИЕРАРХИИ (&Счет25))
	|					И (НЕ КорСчет В ИЕРАРХИИ (&Счет26)),
	|				) КАК ОсновноеИВспомогательноеПроизводство
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОсновноеИВспомогательноеПроизводство.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОсновноеИВспомогательноеПроизводство.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОсновноеИВспомогательноеПроизводство.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОсновноеИВспомогательноеПроизводство.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОсновноеИВспомогательноеПроизводство.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОПР.Счет,
	|		ОПР.Субконто1,
	|		NULL,
	|		ЕСТЬNULL(ОПР.СуммаНУОборот, 0),
	|		ЕСТЬNULL(ОПР.СуммаПРОборот, 0),
	|		ЕСТЬNULL(ОПР.СуммаВРОборот, 0),
	|		ОПР.Подразделение,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				Счет В ИЕРАРХИИ (&Счет25),
	|				&ВидыСубконто2,
	|				Организация = &Организация
	|					И (НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД),
	|				,
	|				) КАК ОПР
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОПР.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОПР.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОПР.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОПР.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОПР.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0 И НЕ Счет.Родитель=&Счет26
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОХРБУ.Счет,
	|		ОХРБУ.Субконто1,
	|		NULL,
	|		0,
	|		0,
	|		0,
	|		ОХРБУ.Подразделение,
	|		ЕСТЬNULL(ОХРБУ.СуммаОборот, 0)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&Счет26), &ВидыСубконто2, Организация = &Организация, , ) КАК ОХРБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОХРНУ.Счет,
	|		ОХРНУ.Субконто1,
	|		NULL,
	|		ЕСТЬNULL(ОХРНУ.СуммаНУОборот, 0),
	|		ЕСТЬNULL(ОХРНУ.СуммаПРОборот, 0),
	|		ЕСТЬNULL(ОХРНУ.СуммаВРОборот, 0),
	|		ОХРНУ.Подразделение,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				Счет В ИЕРАРХИИ (&Счет26),
	|				&ВидыСубконто2,
	|				Организация = &Организация
	|					И (НЕ ВЫРАЗИТЬ(Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД),
	|				,
	|				) КАК ОХРНУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокПрямыхРасходовНУ КАК Правила
	|			ПО (Правила.ВидЗатратНУ = ОХРНУ.Субконто1.ВидРасходовНУ)
	|				И (ВЫБОР
	|					КОГДА Правила.Подразделение <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.Подразделение = ОХРНУ.Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СчетЗатрат = ОХРНУ.Счет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.КорСчетЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.КорСчетЗатрат = ОХРНУ.КорСчет
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (ВЫБОР
	|					КОГДА Правила.СтатьяЗатрат <> НЕОПРЕДЕЛЕНО
	|						ТОГДА Правила.СтатьяЗатрат = ОХРНУ.Субконто1
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|	ГДЕ
	|		ЕСТЬNULL(Правила.ВидЗатратНУ, 0) = 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.СтатьяЗатрат,
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.СуммаДтБУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет
	|ИТОГИ
	|	СУММА(СуммаДтНУ),
	|	СУММА(СуммаДтПР),
	|	СУММА(СуммаДтВР),
	|	СУММА(СуммаДтБУ)
	|ПО
	|	Подразделение,
	|	Счет,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа";
	
	
	Результат = Запрос.Выполнить();
	ВыборкаПодразделение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодразделение.Следующий() Цикл
		ВыборкаСчет = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.Следующий() Цикл
			КодСчета = Лев(ВыборкаСчет.Счет.Код, 2);
			ВыборкаСтатьяЗатрат = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтатьяЗатрат.Следующий() Цикл
				ДелатьРасчетПР = Ложь;
				Если КодСчета = "20" Или КодСчета = "23"  Тогда
					ВыборкаНомГруппа = ВыборкаСтатьяЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаНомГруппа.Следующий() Цикл
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",0,ВыборкаНомГруппа.СуммаДтНУ, 0, ВыборкаСтатьяЗатрат.СуммаДтВР);
						СписатьКосвенныеРасходы(мПроводки, ВыборкаНомГруппа, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров, Истина);
					КонецЦикла;
				Иначе
					Если КодСчета = "25" Или (КодСчета = "26" И Не СтруктураШапкиДокумента.ПрименяетсяДиректКостинг)  Тогда
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",0,ВыборкаСтатьяЗатрат.СуммаДтНУ, 0, ВыборкаСтатьяЗатрат.СуммаДтВР);
						ДелатьРасчетПР = Ложь;
					Иначе
						Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",ВыборкаСтатьяЗатрат.СуммаДтБУ,ВыборкаСтатьяЗатрат.СуммаДтНУ, ВыборкаСтатьяЗатрат.СуммаДтПР, ВыборкаСтатьяЗатрат.СуммаДтВР);
						ДелатьРасчетПР = Истина;
					КонецЕсли;
					СписатьКосвенныеРасходы(мПроводки, ВыборкаСтатьяЗатрат, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров,,ДелатьРасчетПР)
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;	
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура СписатьКосвенныеРасходы(мПроводки, Выборка, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам = Ложь, ДелатьРасчетПР = Ложь) 
	
	Если НЕ ЗначениеЗаполнено(Выборка.СтатьяЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1 И 
		(Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Или
		Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Или
		Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам) Тогда
		
		Возврат;
	КонецЕсли;
	
	Это44 = (Лев(Выборка.Счет.Код,2) = "44");
	ВидРасходовНУ = Выборка.СтатьяЗатрат.ВидРасходовНУ;
	ВидДеятельности =  Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
	ВсегоБУ = Сумма.СуммаБУ;
	ВсегоНУ = Сумма.СуммаНУ;
	Если СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1 Тогда
		ВсегоПР = Сумма.СуммаПР;
		ВсегоВР = Сумма.СуммаВР;
	Иначе
		ВсегоПР = 0;
		ВсегоВР = 0;
	КонецЕсли;
	СуммаБУ = Сумма.СуммаБУ;
	СуммаНУ = Сумма.СуммаНУ;
	СуммаПР = Сумма.СуммаПР;
	СуммаВР = Сумма.СуммаВР;
	СуммаЕНВДБУ = 0;
	СуммаЕНВДНУ = 0;
	СуммаЕНВДПР = 0;
	СуммаЕНВДВР = 0;
	
	
	Если ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам Тогда
		
		Коэффициент = ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов, Неопределено);
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
		СуммаЕНВДБУ = Коэффициент * Сумма.СуммаБУ; СуммаБУ = Сумма.СуммаБУ - СуммаЕНВДБУ;
		СуммаЕНВДНУ = Коэффициент * Сумма.СуммаНУ; СуммаНУ = Сумма.СуммаНУ - СуммаЕНВДНУ;
		СуммаЕНВДПР = Коэффициент * Сумма.СуммаПР; СуммаПР = Сумма.СуммаПР - СуммаЕНВДПР;
		СуммаЕНВДВР = Коэффициент * Сумма.СуммаВР; СуммаВР = Сумма.СуммаВР - СуммаЕНВДВР;
		
		Если ДелатьРасчетПР Тогда
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаПР = СуммаПР + Разница;
		Иначе
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаВР = СуммаВР + Разница;
		КонецЕсли;
		
		Сумма.СуммаБУ = СуммаБУ;
		Сумма.СуммаНУ = СуммаНУ;
		Сумма.СуммаПР = СуммаПР;
		Сумма.СуммаВР = СуммаВР;
		ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
		
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
		
		Если ДелатьРасчетПР Тогда
			Разница = СуммаЕНВДБУ - СуммаЕНВДНУ - СуммаЕНВДПР - СуммаЕНВДВР;
			СуммаЕНВДПР = СуммаЕНВДПР + Разница;
		Иначе
			Разница = СуммаЕНВДБУ - СуммаЕНВДНУ - СуммаЕНВДПР - СуммаЕНВДВР;
			СуммаЕНВДВР = СуммаЕНВДВР + Разница;
		КонецЕсли;
		
		Сумма.СуммаБУ = СуммаЕНВДБУ;
		Сумма.СуммаНУ = СуммаЕНВДНУ;
		Сумма.СуммаПР = СуммаЕНВДПР;
		Сумма.СуммаВР = СуммаЕНВДВР;
		
		ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
	ИначеЕсли ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД Тогда
		
		Коэффициент = ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов,ВидРасходовНУ);
		
		Если ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
			СуммаБУ = Коэффициент * Сумма.СуммаБУ;
			СуммаПР = Коэффициент * Сумма.СуммаПР;
			СуммаНУ = Коэффициент * Сумма.СуммаНУ;
			СуммаВР = Коэффициент * Сумма.СуммаВР;
		Иначе
			СуммаБУ = Сумма.СуммаБУ;
			СуммаПР = Сумма.СуммаПР;
			СуммаНУ = Коэффициент * Сумма.СуммаНУ;
			СуммаВР = Сумма.СуммаВР;
		КонецЕсли;
		
		Если ДелатьРасчетПР Тогда
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаПР = СуммаПР + Разница;
		Иначе
			Разница = СуммаБУ - СуммаНУ - СуммаПР - СуммаВР;
			СуммаВР = СуммаВР + Разница;
		КонецЕсли;
		
		Сумма.СуммаБУ = СуммаБУ;
		Сумма.СуммаНУ = СуммаНУ;
		Сумма.СуммаПР = СуммаПР;
		Сумма.СуммаВР = СуммаВР;
		
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
		ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
		
		СуммаБУ = Сумма.СуммаБУ;
		СуммаНУ = Сумма.СуммаНУ;
		СуммаПР = Сумма.СуммаПР;
		СуммаВР = Сумма.СуммаВР;
		
	Иначе  // ЕНВД
		
		СуммаЕНВДБУ = Сумма.СуммаБУ;
		СуммаЕНВДНУ = Сумма.СуммаНУ;
		СуммаЕНВДПР = Сумма.СуммаПР;
		СуммаЕНВДВР = Сумма.СуммаВР;
		
		СуммаБУ = 0;
		СуммаНУ = 0;
		СуммаПР = 0;
		СуммаВР = 0;
		
		Сумма.СуммаБУ = СуммаЕНВДБУ;
		Сумма.СуммаНУ = СуммаЕНВДНУ;
		Сумма.СуммаПР = СуммаЕНВДПР;
		Сумма.СуммаВР = СуммаЕНВДВР;
		
		СчетДт = ?(Это44, ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД, ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
		ПроводкиПоКосвеннымРасходам(мПроводки, Выборка, Сумма, СчетДт, СтруктураШапкиДокумента, СтруктураДопПараметров, АналитикаПоНомГруппам);
	КонецЕсли;
	
	Если Не Выборка.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
		
		Если  СуммаБУ = 0 И СуммаНУ = 0 И СуммаПР = 0 И СуммаВР = 0
			И ВсегоБУ = 0 И ВсегоНУ = 0 И ВсегоПР = 0 И ВсегоВР = 0
			И СуммаЕНВДБУ = 0 И СуммаЕНВДНУ = 0 И СуммаЕНВДПР = 0 И СуммаЕНВДВР = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаЗаписьСписанияКосвенныхРасходов              = СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов.Добавить();
		СтрокаЗаписьСписанияКосвенныхРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат  = Выборка.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат;
		СтрокаЗаписьСписанияКосвенныхРасходов.СчетУчета   = Выборка.Счет;
		СтрокаЗаписьСписанияКосвенныхРасходов.СтатьяЗатрат= Выборка.СтатьяЗатрат;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатрат = ВсегоБУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННП    = СуммаБУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННП  = СуммаЕНВДБУ;
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратНУ = ВсегоНУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННПНУ    = СуммаНУ;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННПНУ  = СуммаЕНВДНУ;	
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратПР = ВсегоПР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННППР    = СуммаПР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННППР  = СуммаЕНВДПР;	
		
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаЗатратВР = ВсегоВР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаННПВР    = СуммаВР;
		СтрокаЗаписьСписанияКосвенныхРасходов.СуммаНеННПВР  = СуммаЕНВДВР;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьЗаписьРасчетаСебестоимости(СтруктураДопПараметров)
	
	Если Не СтруктураДопПараметров.Счет40 Тогда
		Возврат;
	КонецЕсли;
	ЗаписьРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьРасчетаСебестоимости;
	Для Каждого Строка Из ЗаписьРасчетаСебестоимости Цикл
		Строка.СуммаПР = Строка.СуммаПР - ?(СтруктураДопПараметров.Счет40, 0, Строка.СуммаПлан);
		Строка.СуммаВР = Строка.СуммаВР - ?(СтруктураДопПараметров.Счет40, 0, Строка.СуммаПлан);
	КонецЦикла;
	
КонецПроцедуры

// вспомогательная процедура для расчета ПР и ВР НЗП
// т.к. пользователь указывает сумму НЗП по БУ и по НУ,
// то долю ПР и ВР в НЗП высчитываем по пропорции с начальными остатками НЗП
Процедура ОценкаОстатковНЗПпоРазницам(СтруктураШапкиДокумента, СтруктураДопПараметров, Подразделение, НоменклатурнаяГруппа)
	
	НЗП = СтруктураДопПараметров.НЗП;
	
	Если НЗП = Неопределено Тогда
		НЗП = Новый ТаблицаЗначений;
		НЗП.Колонки.Добавить("Счет");
		НЗП.Колонки.Добавить("Подразделение");
		НЗП.Колонки.Добавить("НоменклатурнаяГруппа");
		НЗП.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		НЗП.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.НЗППР) КАК НЗППР,
	|	СУММА(ВложенныйЗапрос.НЗПВР) КАК НЗПВР,
	|	СУММА(ВложенныйЗапрос.Разницы) КАК Разницы,
	|	ВложенныйЗапрос.Счет
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт + ХозрасчетныйОстаткиИОбороты.СуммаПРОборотДт КАК НЗППР,
	|		ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт + ХозрасчетныйОстаткиИОбороты.СуммаВРОборотДт КАК НЗПВР,
	|		0 КАК Разницы,
	|		ХозрасчетныйОстаткиИОбороты.Счет КАК Счет
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|				&НачПериода,
	|				&КонПериода,
	|				,
	|				,
	|				Счет В ИЕРАРХИИ (&Счет),
	|				&НоменклатурныеГруппы,
	|				Организация = &Организация
	|					И Подразделение = &Подразделение
	|					И Субконто1 = &НоменклатурнаяГруппа) КАК ХозрасчетныйОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		ИнвентаризацияНЗПСостав.Сумма - ИнвентаризацияНЗПСостав.СуммаНУ,
	|		ИнвентаризацияНЗП.СчетЗатрат
	|	ИЗ
	|		Документ.ИнвентаризацияНЗП КАК ИнвентаризацияНЗП
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|			ПО (ИнвентаризацияНЗПСостав.Ссылка = ИнвентаризацияНЗП.Ссылка)
	|	ГДЕ
	|		ИнвентаризацияНЗП.Организация = &Организация
	|		И ИнвентаризацияНЗП.Подразделение= &Подразделение
	|		И ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|		И ИнвентаризацияНЗП.Дата МЕЖДУ &НачДата И &КонДата
	|		И (НЕ ИнвентаризацияНЗП.ПометкаУдаления)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Счет";
	
	Запрос.УстановитьПараметр("НачПериода", мНачГраница);
	Запрос.УстановитьПараметр("КонПериода", мКонГраница);
	Запрос.УстановитьПараметр("НачДата", мНачДата);
	Запрос.УстановитьПараметр("КонДата", мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Запрос.УстановитьПараметр("Счет", СписокСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Результат = РезультатЗапроса.Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Выборка Из Результат Цикл
		
		СтрокаНЗП = НЗП.НайтиСтроки(Новый Структура("Счет,Подразделение,НоменклатурнаяГруппа", Выборка.Счет, Подразделение, НоменклатурнаяГруппа));
		
		Если СтрокаНЗП.Количество() = 0 Тогда
			СтрокиНЗП = НЗП.Добавить();
		Иначе
			СтрокиНЗП = СтрокаНЗП[0];
		КонецЕсли;
		
		Разницы = Выборка.Разницы;
		СуммаПР = Выборка.НЗППР;
		СуммаВР = Выборка.НЗПВР;
		
		СтрокиНЗП.Счет = Выборка.Счет;
		СтрокиНЗП.Подразделение = Подразделение;
		СтрокиНЗП.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		
		Если СуммаПр = 0 И НЕ СуммаВр = 0 Тогда
			СтрокиНЗП.СуммаПР = 0;
			СтрокиНЗП.СуммаВР = Разницы;
		ИначеЕсли Не СуммаПр = 0 И СуммаВр = 0 Тогда
			СтрокиНЗП.СуммаПР = Разницы;
			СтрокиНЗП.СуммаВР = 0;
		Иначе
			Если СуммаВР + СуммаПР <> 0 Тогда
				СтрокиНЗП.СуммаПР = Разницы * СуммаПР / (СуммаВР + СуммаПР);
				СтрокиНЗП.СуммаВР = Разницы * СуммаВР / (СуммаВР + СуммаПР);
			Иначе
				СтрокиНЗП.СуммаПР = 0;
				СтрокиНЗП.СуммаВР = Разницы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопПараметров.Вставить("НЗП", НЗП);
	
КонецПроцедуры

// Производит нормирование расходов, для которых норма задана фиксированной суммой на работника
//
Функция НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, ВидЗатрат)
	
	// найдем период для анализа ранее нормированных расходов
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("СчетРБП",        ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидЗатрат",      ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	МИНИМУМ(ЕСТЬNULL(ХозрасчетныйОбороты.СубконтоКт1.ДатаНачалаСписания, &НачалоМесяца)) КАК Субконто1ДатаНачалаСписания
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоМесяца, &КонецМесяца,,,
	|		&ВидКорСубконто,
	|		СчетКт В ИЕРАРХИИ (&СчетРБП),
	|		&ВидСубконто,
	|		Организация В ИЕРАРХИИ (&Организация)
	|		    И СубконтоДт1.ВидРасходовНУ = &ВидЗатрат) КАК ХозрасчетныйОбороты
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат 0; КонецЕсли;
	
	НачалоПериодаСтрахования = Результат.Выбрать();
	Пока НачалоПериодаСтрахования.Следующий() Цикл
		ДатаНачалаПериодаСтрахования = НачалоПериодаСтрахования.Субконто1ДатаНачалаСписания;
	КонецЦикла;
	
	мНачДата    = НачалоМесяца (СтруктураШапкиДокумента.Дата);
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	
	ДатаНачалаПериодаСтрахования = ?(НЕ ЗначениеЗаполнено(ДатаНачалаПериодаСтрахования), мНачДата, ДатаНачалаПериодаСтрахования);
	// Формируем запрос по затратам в разрезе работников
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   ДатаНачалаПериодаСтрахования);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("НачалоТекМесяца",мНачДата);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос.УстановитьПараметр("ВидКорСубконто", Массив);
	Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",  ПолучитьМассивСчетовУчетаРасходов());
	Запрос.УстановитьПараметр("ВидЗатрат",      ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)) КАК ОборотДт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|					И ХозрасчетныйОбороты.Период > &НачалоТекМесяца
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0)
	|		КОНЕЦ) КАК ОборотКт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|					И ХозрасчетныйОбороты.Период > &НачалоТекМесяца
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаПРОборот, 0)
	|		КОНЕЦ) КАК ОборотКтПР,
	|	0 КАК КоличествоЗастрахованных
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, Регистратор,
	|			Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов),
	|			&ВидСубконто,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1.ВидРасходовНУ = &ВидЗатрат,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйОбороты.КорСубконто1)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца,,
	|			Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов),
	|			&ВидСубконто,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1.ВидРасходовНУ = &ВидЗатрат,
	|			,
	|			&ВидКорСубконто) КАК ХозрасчетныйОбороты
	|";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат 0; КонецЕсли;
	
	ТаблицаРасходов = Новый ТаблицаЗначений;
	ТаблицаРасходов = Результат.Выгрузить();
	СуммаБазы = ТаблицаРасходов.Итог("КоличествоЗастрахованных") * 15000;
	
	ЗатратыГод   = ТаблицаРасходов.Итог("ОборотДт");
	РасходыГод = ?(СуммаБазы > ЗатратыГод, ЗатратыГод, СуммаБазы);
	РасходыМесяц = РасходыГод - ТаблицаРасходов.Итог("ОборотКт");
	РазницыГод = ЗатратыГод - РасходыГод;
	РазницыМесяц =  РазницыГод  - ТаблицаРасходов.Итог("ОборотКтПР");
	
	СтрокаЗаписьНормированияРасходов              = СтруктураШапкиДокумента.ЗаписьНормированияРасходов.Добавить();
	СтрокаЗаписьНормированияРасходов.ВидОперации  = ВидЗатрат;
	СтрокаЗаписьНормированияРасходов.ВидРегОперации= "Страхование";
	СтрокаЗаписьНормированияРасходов.СуммаБазы    = СуммаБазы;
	СтрокаЗаписьНормированияРасходов.ЗатратыГод   = ЗатратыГод;
	СтрокаЗаписьНормированияРасходов.РасходыГод = РасходыГод;
	СтрокаЗаписьНормированияРасходов.РасходыМесяц = РасходыМесяц;
	СтрокаЗаписьНормированияРасходов.РазницыМесяц = РазницыМесяц;
	СтрокаЗаписьНормированияРасходов.РазницыГод   = РазницыГод;
	
	Остаток = ТаблицаРасходов.Итог("ОборотДт") - ТаблицаРасходов.Итог("ОборотКт");
	
	Возврат ?(Остаток = 0, 0, РасходыМесяц / Остаток);	
	
КонецФункции

// Возвращает значение нормы, соответствующее проценту от выручки
//
Функция ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, Процент) Экспорт
	
	// Формируем массив счетов учета выручки
	СписокВидовДоходов = Новый Массив;
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОбъектовСтроительства);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг);
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	// Формируем запрос по счетам учета выручки
	ЗапросПоВыручке = Новый Запрос;
	ЗапросПоВыручке.УстановитьПараметр("НачалоМесяца", мНачГода);
	ЗапросПоВыручке.УстановитьПараметр("КонецМесяца",  мКонГраница);
	ЗапросПоВыручке.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	ЗапросПоВыручке.УстановитьПараметр("Выручка90", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	ЗапросПоВыручке.УстановитьПараметр("Выручка91", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	ЗапросПоВыручке.УстановитьПараметр("ПрочиеДоходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ЗапросПоВыручке.УстановитьПараметр("СписокВидовДоходов", СписокВидовДоходов);
	ЗапросПоВыручке.УстановитьПараметр("НеЕНВД" , Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	ЗапросПоВыручке.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК ОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца,, Счет В (&Выручка90), , Организация В ИЕРАРХИИ (&Организация), , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца,, Счет В (&Выручка91),
	|			&ПрочиеДоходы,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&СписокВидовДоходов)
	|				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НеЕНВД,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|";
	ВыборкаВыручки = ЗапросПоВыручке.Выполнить().Выбрать();
	
	// Собирам выручку
	ВыручкаНУ = 0;
	Пока ВыборкаВыручки.Следующий() Цикл
		ВыручкаНУ = ВыручкаНУ + ?(ВыборкаВыручки.ОборотКт = Null, 0, ВыборкаВыручки.ОборотКт);
	КонецЦикла;
	
	// Определяем норму
	Возврат Окр((ВыручкаНУ * Процент / 100), 2, 1);	
КонецФункции

// Возвращает значение нормы, соответствующее проценту от расходов на оплату труда
// с учетом или без учета расходов на добровольное страхование работников
Функция ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, Процент, ВключатьДобровольноеСтрахование = Ложь)
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	
	мСчетаЕНВД = Новый Массив;
	мСчетаЕНВД.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
	мСчетаЕНВД.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	
	// Определяем сумму расходов по виду затрат "Оплата труда"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетЕНВД",     мСчетаЕНВД);
	Запрос.УстановитьПараметр("Счет70",       ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	Запрос.УстановитьПараметр("Счет97",        ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ОплатаТрудаРБП",Справочники.РасходыБудущихПериодов.РБПНаОплатуТруда);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)) КАК СуммаРасходовНаОплатуТруда,
	|	СУММА(ЕСТЬNULL(СписаноНаЕНВД.СуммаНУОборотКт, 0)) КАК СписаноНаЕНВД,
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&Счет70), ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&СчетЕНВД), ) КАК СписаноНаЕНВД
	|		ПО ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(СписаноНаЕНВД.СуммаНУОборотКт, 0)),
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца,,,
	|			&ВидСубконто,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И КорСубконто1 = &ОплатаТрудаРБП,
	|			КорСчет В ИЕРАРХИИ (&Счет97),
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В ИЕРАРХИИ (&СчетЕНВД), ) КАК СписаноНаЕНВД
	|		ПО ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ
	|";
	ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();
	
	НаОплатуТруда = 0;
	Пока ВыборкаНаОплатуТруда.Следующий() Цикл
		НаОплатуТруда = НаОплатуТруда + ВыборкаНаОплатуТруда.СуммаРасходовНаОплатуТруда - ВыборкаНаОплатуТруда.СписаноНаЕНВД;
	КонецЦикла;
	
	Если ВключатьДобровольноеСтрахование Тогда
		
		// Определяем сумму расходов по виду затрат добровольное страхование работников
		СписокКоррСчетов = Новый Массив;
		СписокКоррСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
		СписокКоррСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
		
		СписокВидовЗатрат = Новый Массив;
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",     мНачГода);
		Запрос.УстановитьПараметр("КонецМесяца",      мКонДата);
		Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидЗатрат",        СписокВидовЗатрат);
		Запрос.УстановитьПараметр("СписокКоррСчетов", СписокКоррСчетов);
		Запрос.УстановитьПараметр("Организация",      СтруктураШапкиДокумента.СписокОрганизаций);
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК ОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), КорСчет В (&СписокКоррСчетов), ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ В(&ВидЗатрат)
		|";
		ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();
		Пока ВыборкаНаОплатуТруда.Следующий() Цикл
			НаОплатуТруда = НаОплатуТруда + ?(ВыборкаНаОплатуТруда.ОборотКт = Null, 0, ВыборкаНаОплатуТруда.ОборотКт);
		КонецЦикла;
	КонецЕсли;
	
	// Определяем норму
	Возврат Окр((НаОплатуТруда * Процент / 100), 2, 1);	
КонецФункции

Функция  РасчетПризнанныхТранспортныхРасходов(СтруктураШапкиДокумента)
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетЗатрат",  ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Запрос.УстановитьПараметр("ВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы",  Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет В ИЕРАРХИИ (&СчетЗатрат),
	|			&ВидыСубконто,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1.ВидРасходовНУ = &ТранспортныеРасходы) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|";
	Результат=Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Итог("Сумма");		
КонецФункции

Функция СписаниеТранспортныхРасходов(СтруктураШапкиДокумента)
	мНачДата=НачалоМесяца(СтруктураШапкиДокумента.Дата);
	мКонДата=КонецМесяца (СтруктураШапкиДокумента.Дата);
	
	СуммаРасходовВсего = РасчетПризнанныхТранспортныхРасходов(СтруктураШапкиДокумента);
	
	ПараметрыТР=Новый Структура("СуммаРасходовКсписанию, НачОстатокТоваров, ПриходТовара, СуммаРеализованныхТоваров, СуммаРеализованныхТоваровЕНДВ, Списано, КонОстатокТоваров, СреднийПроцент, СуммаРасходов,ДоляРасхода", 0, 0, 0, 0, 0, 0, 0, 0, СуммаРасходовВсего,0);
	РасчетТранспортныхРасходов(мНачДата, мКонДата, СтруктураШапкиДокумента.СписокОрганизаций, ПараметрыТР);
	
	Возврат ПараметрыТР.ДоляРасхода;
КонецФункции

// Производит нормирование расходов, для которых норма задается процентом от суммового показателя
//
Функция НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, ВидЗатрат, Норма, Процент)
	
	мКонДата  = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода = НачалоГода(СтруктураШапкиДокумента.Дата);
	мНачДата = НачалоМесяца (СтруктураШапкиДокумента.Дата);
	
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	ТекущаяНорма = Норма;
	СуммаБазы = 100 * Норма / Процент;
	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("НачалоТекМесяца",мНачДата);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",    ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОрганизаций);
	Запрос.УстановитьПараметр("СчетаЗатрат",  ПолучитьМассивСчетовУчетаРасходов());
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяЗатрат,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0)) КАК ОборотДт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|					И ХозрасчетныйОбороты.Период > &НачалоТекМесяца
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0)
	|		КОНЕЦ) КАК ОборотКт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|					И ХозрасчетныйОбороты.Период > &НачалоТекМесяца
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаПРОборот, 0)
	|		КОНЕЦ) КАК ОборотПР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, Регистратор, Счет В ИЕРАРХИИ (&СчетаЗатрат), &ВидСубконто, Организация В ИЕРАРХИИ (&Организация), , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Счет
	|";
	Результат=Запрос.Выполнить();
	
	ТаблицаРасходов = Новый ТаблицаЗначений;
	ТаблицаРасходов = Результат.Выгрузить();
	ТаблицаРасходов.Колонки.Добавить("НеСписано");
	ТаблицаРасходов.Колонки.Добавить("МожноСписать");
	ТаблицаРасходов.Колонки.Добавить("СписатьПостоянныеРазницы");
	
	// Определяем не принятые расходы и учитываем ранее принятые
	Для каждого Расход из ТаблицаРасходов Цикл
		Расход.НеСписано = Расход.ОборотДт - Расход.ОборотКт;
		Норма            = Норма - Расход.ОборотКт;
	КонецЦикла;
	
	Норма = Макс(Норма, 0);
	
	// Определяем сумму расхода по нормам
	ТаблицаРасходов.Сортировать("НеСписано Возр");
	Для каждого Расход из ТаблицаРасходов Цикл
		Если Норма > Расход.НеСписано Тогда
			Расход.МожноСписать = Расход.НеСписано;
			Норма = Норма - Расход.МожноСписать;
		Иначе
			Расход.МожноСписать = Норма;
			Норма = 0;
		КонецЕсли;
		
		Расход.СписатьПостоянныеРазницы = Расход.ОборотПР + (Расход.НеСписано - Расход.МожноСписать);
		
		СтрокаЗаписьНормированияРасходов              = СтруктураШапкиДокумента.ЗаписьНормированияРасходов.Добавить();
		СтрокаЗаписьНормированияРасходов.ВидОперации  = ВидЗатрат;
		СтрокаЗаписьНормированияРасходов.ВидРегОперации= "Закрытие " + Расход.Счет.Код;
		СтрокаЗаписьНормированияРасходов.ЗатратыГод   = Расход.ОборотДт;
		СтрокаЗаписьНормированияРасходов.РасходыГод   = Расход.ОборотКт;
		СтрокаЗаписьНормированияРасходов.СуммаБазы    = СуммаБазы;
		СтрокаЗаписьНормированияРасходов.РасходыМесяц = Расход.МожноСписать;
		СтрокаЗаписьНормированияРасходов.РасходыГод = СтрокаЗаписьНормированияРасходов.РасходыГод + Расход.МожноСписать;
		СтрокаЗаписьНормированияРасходов.РазницыМесяц = Расход.СписатьПостоянныеРазницы;
		СтрокаЗаписьНормированияРасходов.РазницыГод   = - Расход.ОборотПР + Расход.СписатьПостоянныеРазницы;
	КонецЦикла;
	
	Остаток = ТаблицаРасходов.Итог("ОборотДт") - ТаблицаРасходов.Итог("ОборотКт");
	Возврат ?( Остаток = 0, 0, ТаблицаРасходов.Итог("МожноСписать") /  Остаток);	
Конецфункции

Функция КоэффициентРаспределенияРасходовПоВидамДеятельности(Организация, Знач Дата, Знач НачДата = Неопределено, ПоВсемСчетам = Истина, ВыручкаНеЕНВД = 0, ВыручкаЕНВД = 0, СписокОрганизаций = Неопределено) Экспорт
	
	Если СписокОрганизаций = Неопределено Тогда
		СписокОрганизаций = Организация;
	КонецЕсли;
	
	УчитыватьВсеДоходы=Истина;
	
	Если НачДата = Неопределено Тогда
		НачДата = НачалоМесяца(Дата);
	КонецЕсли;
	КонДата = КонецМесяца(Дата);      // Доходы от реализации
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД)
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД))
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаНеЕНВД,
	|	СУММА(0) КАК РасходыЕНВДПрошлыхПериодов,
	|	СУММА(0) КАК РасходыСНачалаГода,
	|	СУММА(0) КАК РасходыМесяца,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			Период,
	|			Счет В ИЕРАРХИИ (&МассивСчетов),
	|			,
	|			Организация В ИЕРАРХИИ (&Организация),
	|			(НЕ КорСчет В ИЕРАРХИИ (&МассивСчетов))
	|				И (НЕ КорСчет В ИЕРАРХИИ (&Счет9009)),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет";
	
	Если УчитыватьВсеДоходы Тогда   // Внереализационные доходы
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ПрочиеДоходыЕНВД
		|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ХозрасчетныйОбороты.Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ПрочиеДоходыЕНВД
		|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	ХозрасчетныйОбороты.Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&ПрочиеДоходы), , Организация В ИЕРАРХИИ (&Организация), Не КорСчет В ИЕРАРХИИ (&ПрочиеДоходы), ) КАК ХозрасчетныйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Счет";
	КонецЕсли;
	
	//Массив счетов, по которым рассчитывается доход организации
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",              НачДата);
	Запрос.УстановитьПараметр("КонДата",              КонДата);
	Запрос.УстановитьПараметр("Организация",          СписокОрганизаций);
	СчетВыручкаЕНВД=Новый Массив;
	СчетВыручкаЕНВД.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД",      СчетВыручкаЕНВД);
	Запрос.УстановитьПараметр("Счет9009",             ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж);
	Запрос.УстановитьПараметр("МассивСчетов",         МассивСчетов);
	Запрос.УстановитьПараметр("ПрочиеДоходы",         ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ПрочиеДоходыЕНВД",     Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой, то считаем, что все
	// расходы относятся к деятельности не облагаемой ЕНВД.
	Если РезультатЗапроса.Пустой() Тогда
		Коэффициент = 0;
		
	Иначе
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		ВыручкаЕНВД      = Макс(ТаблицаРезультат.Итог("ВыручкаЕНВД"),   0);
		ВыручкаНеЕНВД    = Макс(ТаблицаРезультат.Итог("ВыручкаНеЕНВД"), 0);
		
		Если ВыручкаНеЕНВД + ВыручкаЕНВД = 0 Тогда // нет дохода ни по одному из видов деятельности
			Коэффициент = 0;
			Возврат Коэффициент;
		КонецЕсли;
		
		
		
		
		Если ВыручкаНеЕНВД = 0 Тогда  // нет дохода виду деятельности не подпадающему под обложение ЕНВД
			Коэффициент = 1;
			
		Иначе
			Коэффициент = ВыручкаЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Коэффициент;
	
КонецФункции // КоэффициентРаспределенияРасходовПоВидамДеятельности()

/// Процедура расчета сумм списания расходов, по которым предусмотрены ограничения
// Нормируемые, транспортные, распределяемые
Процедура ПровестиРасчетСуммРасходовПоКоторымПредусмотреныОграничения(СтруктураШапкиДокумента)
	ЗаписьДолей=СтруктураШапкиДокумента.ЗаписиДолей.Добавить();
	ЗаписьДолей.ДоляРасходовНаРекламу = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые, ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, 1),1);
	ЗаписьДолей.ДоляРасходовНаДобровольноеМедицинскоеСтрахование = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 12, Ложь),12);
	ЗаписьДолей.ДоляРасходовНаДобровольноеСтрахованиеЖизни = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 6, Ложь),6);
	ЗаписьДолей.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев = НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
	ЗаписьДолей.ДоляПредставительскихРасходов = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 4, Истина),4);
	Если СтруктураШапкиДокумента.Дата < Дата("20120101") Тогда
		ЗаписьДолей.ДоляРасходовНаВозмещениеПроцентовРаботникам = НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 3, Ложь),3);
	КонецЕсли;
	ЗаписьДолей.ДоляЕНВД=КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата,,,,, СтруктураШапкиДокумента.СписокОрганизаций);
	ЗаписьДолей.ДоляТранспортныхРасходов=СписаниеТранспортныхРасходов(СтруктураШапкиДокумента);
КонецПроцедуры

Процедура РасчетДолейСписанияКосвенныхРасходов()
	СписокОП=ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокОП.Добавить(Организация.Ссылка, Организация.Наименование);
	
	ЗаписьНормированияРасходов=Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
	ЗаписиДолей=Движения.ДолиСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	
	СтруктураШапкиДокумента=Новый Структура("Дата", Дата);
	СтруктураШапкиДокумента.Вставить("Организация", Организация);
	СтруктураШапкиДокумента.Вставить("СписокОрганизаций", СписокОП);
	СтруктураШапкиДокумента.Вставить("ЗаписьНормированияРасходов", ЗаписьНормированияРасходов);
	СтруктураШапкиДокумента.Вставить("ЗаписиДолей", ЗаписиДолей);
	
	ПровестиРасчетСуммРасходовПоКоторымПредусмотреныОграничения(СтруктураШапкиДокумента);
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	СтруктураШапкиДокумента.ЗаписьНормированияРасходов, 
	РегистрыСведений.РасчетНормированияРасходов,
	"Организация,ПериодРасчета,Активность,Регистратор,ВидОперации,ВидРегОперации,СуммаБазы",
	"РасходыМесяц,РазницыМесяц,ЗатратыГод,РасходыГод,РазницыГод");
	
	ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	СтруктураШапкиДокумента.ЗаписиДолей, 
	РегистрыСведений.ДолиСписанияКосвенныхРасходов,
	"Организация,ПериодРасчета,Активность,Регистратор",
	"ДоляРасходовНаРекламу,ДоляРасходовНаДобровольноеСтрахованиеЖизни,ДоляРасходовНаДобровольноеМедицинскоеСтрахование,ДоляПредставительскихРасходов,ДоляЕНВД,ДоляТранспортныхРасходов,ДоляРасходовНаВозмещениеПроцентовРаботникам,ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев");
КонецПроцедуры

Процедура ЗакрытиеСчетов20_23_25_26(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок)
	
	Счет40 = (СтруктураШапкиДокумента.УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродуции.СИспользованиемСчета40);
	СтруктураДопПараметров.Вставить("Счет40", Счет40);
	СтруктураДопПараметров.Вставить("НЗП", Неопределено);
	
	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер", "");
	
	ЗаписьРасчетаСебестоимости = Движения.РасчетСебестоимостиПродукции.ВыгрузитьКолонки();
	ЗаписьРасчетаСебестоимости.Колонки.Добавить("ДокументВыпуска"); 
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаСебестоимости", ЗаписьРасчетаСебестоимости);
	
	ЗаписьРасчетаРаспределенияКосвенныхРасходов = Движения.РасчетРаспределенияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураДопПараметров.Вставить("ЗаписьРасчетаКосвенныхРасходов", ЗаписьРасчетаРаспределенияКосвенныхРасходов);
	ЗаписьСписанияКосвенныхРасходов = Движения.РасчетСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураДопПараметров.Вставить("ЗаписьСписанияКосвенныхРасходов", ЗаписьСписанияКосвенныхРасходов);
	СтруктураДопПараметров.Вставить("МенеджерВременныхТаблиц", НалоговыйУчет.СписокПрямыхРасходовНУ(Организация, Дата));
	СтруктураДопПараметров.Вставить("ЭтапСписанияКосвенныхРасходов", 1);
	
	РасчетПорядкаПеределов(СтруктураШапкиДокумента, СтруктураДопПараметров);
	
	РасчетПрямыхИКосвенныхРасходов(СтруктураШапкиДокумента,СтруктураДопПараметров, СтруктураШапкиДокумента.УчетнаяПолитика.СпособОценкиМПЗ);
	
	Если НЕ СтруктураШапкиДокумента.Предприниматель Тогда
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости.Свернуть("Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации,СуммаПлан,СуммаНЗП,СуммаНЗПНУ,СуммаНЗППР,СуммаНЗПВР,ДокументВыпуска", "Сумма,СуммаНУ,СуммаПР,СуммаВР");
		ПодготовитьЗаписьРасчетаСебестоимости(СтруктураДопПараметров);
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, 
		СтруктураДопПараметров.ЗаписьРасчетаСебестоимости,
		РегистрыСведений.РасчетСебестоимостиПродукции,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,НоменклатурнаяГруппа,Продукция,ВидОперации",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР,СуммаНЗП,СуммаНЗПНУ,СуммаНЗППР,СуммаНЗПВР,СуммаПлан");
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		СтруктураДопПараметров.ЗаписьРасчетаКосвенныхРасходов,
		РегистрыСведений.РасчетРаспределенияКосвенныхРасходов,
		"ДокументРаспределения,ВидОперации,Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,Подразделение,СтатьяЗатрат,ПодразделениеРаспределения,НоменклатурнаяГруппаРаспределения,БазаРаспределения,СчетРаспределения,ЕНВД",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР,СуммаБазы,СуммаБазыНУ,СуммаБазыПР,СуммаБазыВР");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоррректировкаСтоимостиПОУУ()
	НаборЗаписейХозрасчетный=РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение=Ссылка;
	НаборЗаписейХозрасчетный.Отбор.Регистратор.Использование=Истина;
	НаборЗаписейХозрасчетный.Прочитать();
	
	НаборЗаписейПартииТоваров=РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
	НаборЗаписейПартииТоваров.Отбор.Регистратор.Значение=Ссылка;
	
	Для Каждого СтрокаНабора ИЗ НаборЗаписейХозрасчетный Цикл
		Если СтрокаНабора.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы) ИЛИ СтрокаНабора.СчетДт=ПланыСчетов.Хозрасчетный.ГотоваяПродукция
			ИЛИ СтрокаНабора.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары) Тогда
			НоваяЗапись=НаборЗаписейПартииТоваров.Добавить();
			НоваяЗапись.Активность=Истина;
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗапись.Качество=Справочники.Качество.Новый;
			НоваяЗапись.Номенклатура=СтрокаНабора.СубконтоДт.Номенклатура;
			НоваяЗапись.Организация=Организация;
			НоваяЗапись.Период=Дата;
			НоваяЗапись.Регистратор=Ссылка;
			НоваяЗапись.Склад=СтрокаНабора.СубконтоДт.Склады;
			НоваяЗапись.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный;
			НоваяЗапись.Стоимость=СтрокаНабора.Сумма;
			НоваяЗапись.СтоимостьНУ=СтрокаНабора.СуммаНУДт;
		КонецЕсли;	
		Если СтрокаНабора.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы) ИЛИ СтрокаНабора.СчетКт=ПланыСчетов.Хозрасчетный.ГотоваяПродукция
			ИЛИ СтрокаНабора.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары) Тогда
			НоваяЗапись=НаборЗаписейПартииТоваров.Добавить();
			НоваяЗапись.Активность=Истина;
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
			НоваяЗапись.Качество=Справочники.Качество.Новый;
			НоваяЗапись.Номенклатура=СтрокаНабора.СубконтоКт.Номенклатура;
			НоваяЗапись.Организация=Организация;
			НоваяЗапись.Период=Дата;
			НоваяЗапись.Регистратор=Ссылка;
			НоваяЗапись.Склад=СтрокаНабора.СубконтоКт.Склады;
			НоваяЗапись.СтатусПартии=Перечисления.СтатусыПартийТоваров.Купленный;
			НоваяЗапись.Стоимость=СтрокаНабора.Сумма;
			НоваяЗапись.СтоимостьНУ=СтрокаНабора.СуммаНУКт;
		КонецЕсли;	
	КонецЦикла;	
	НаборЗаписейПартииТоваров.Записать();
КонецПроцедуры	

//ТОРГОВЛЯ
Функция РасчетРеализованногоНаложения() Экспорт
	МассивСчетов41=Новый Массив; МассивВидовСубконто41=Новый Массив;
	МассивСчетов42=Новый Массив; МассивВидовСубконто42=Новый Массив;
	МассивСчетов90=Новый Массив; МассивВидовСубконто90=Новый массив;
	
	Для каждого СтрокаКоллекции Из СчетаРасчетаРеализованногоНаложения Цикл
		Счет41=СтрокаКоллекции.Счет41;
		Если ЗначениеЗаполнено(Счет41) Тогда
			МассивСчетов41.Добавить(Счет41);
			Для каждого СтрокаСубконто Из Счет41.ВидыСубконто Цикл
				ВидСубконто=СтрокаСубконто.ВидСубконто;
				Если МассивВидовСубконто41.Найти(ВидСубконто)=Неопределено Тогда
					МассивВидовСубконто41.Добавить(ВидСубконто);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Счет42=СтрокаКоллекции.Счет42;
		Если ЗначениеЗаполнено(Счет42) Тогда
			МассивСчетов42.Добавить(Счет42);
			Для каждого СтрокаСубконто Из Счет42.ВидыСубконто Цикл
				ВидСубконто=СтрокаСубконто.ВидСубконто;
				Если МассивВидовСубконто42.Найти(ВидСубконто)=Неопределено Тогда
					МассивВидовСубконто42.Добавить(ВидСубконто);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Счет90=СтрокаКоллекции.Счет90;
		Если ЗначениеЗаполнено(Счет90) Тогда
			МассивСчетов90.Добавить(Счет90);
			Для каждого СтрокаСубконто Из Счет90.ВидыСубконто Цикл
				ВидСубконто=СтрокаСубконто.ВидСубконто;
				Если МассивВидовСубконто90.Найти(ВидСубконто)=Неопределено Тогда
					МассивВидовСубконто90.Добавить(ВидСубконто);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала",	НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКонца",	Новый Граница(КонецМесяца(Дата), Видграницы.Включая));
	Запрос.УстановитьПараметр("Счет41",	МассивСчетов41);
	Запрос.УстановитьПараметр("Счет42",	МассивСчетов42);
	Запрос.УстановитьПараметр("Счет90",	МассивСчетов90);
	Запрос.УстановитьПараметр("Организация", Организация);
	стрУсловияОбороты42="";
	стрУсловияТовароОборот90="";
	МассивСкладов=СкладыРеализованногоНаложения.ВыгрузитьКолонку("Склад");
	МассивНоменклатуры=НоменклатураРеализованногоНаложения.ВыгрузитьКолонку("Товар");
	Если МассивСкладов.Количество()<>0 Тогда
		Запрос.УстановитьПараметр("Склад",	МассивСкладов);
		стрУсловияОбороты42=стрУсловияОбороты42+" И Субконто2 В ИЕРАРХИИ (&Склад)";
		стрУсловияТовароОборот90=стрУсловияТовароОборот90+" И СубконтоКт2 В ИЕРАРХИИ (&Склад)";
	КонецЕсли;	
	
	Если МассивНоменклатуры.Количество()<>0 Тогда
		Запрос.УстановитьПараметр("Номенклатура",	МассивНоменклатуры);
		стрУсловияОбороты42=стрУсловияОбороты42+" И Субконто1 В ИЕРАРХИИ (&Номенклатура)";
		стрУсловияТовароОборот90=стрУсловияТовароОборот90+" И СубконтоКт1 В ИЕРАРХИИ (&Номенклатура)";
	КонецЕсли;	
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Обороты42.Субконто1 КАК Номенклатура,
	|	Обороты42.Субконто2 КАК Склад,
	|	-Обороты42.СуммаНачальныйОстаток КАК СальдоНаНачалоПериода,
	|	Обороты42.СуммаОборотДт КАК ОборотПоДебету,
	|	Обороты42.СуммаОборотКт КАК ОборотПоКредиту,
	|	-Обороты42.СуммаКонечныйОстаток КАК СальдоПредварительное,
	|	0 КАК ТовароОборот,
	|	0 КАК ОстатокТОваровНаКонецПериода
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , Счет В(&Счет42), , Организация = &Организация "+стрУсловияОбороты42+") КАК Обороты42
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТовароОборот90.СубконтоКт1,
	|	ТовароОборот90.СубконтоКт2,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ТовароОборот90.СуммаОборот,
	|	0
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНачала, &ДатаКонца, , СчетДт В(&Счет90), , СчетКт  В(&Счет41), , Организация = &Организация "+стрУсловияТовароОборот90+") КАК ТовароОборот90
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОстатокТовара41.Субконто1,
	|	ОстатокТовара41.Субконто2,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ОстатокТовара41.СуммаОстаток
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКонца, Счет  В(&Счет41), , Организация = &Организация"+стрУсловияОбороты42+") КАК ОстатокТовара41";
	
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзДанные.Свернуть("Номенклатура,Склад","СальдоНаНачалоПериода,ОборотПоДебету,ОборотПоКредиту,СальдоПредварительное,ТовароОборот,ОстатокТОваровНаКонецПериода");
	тзДанные.Сортировать("Склад Возр,Номенклатура Возр");
	Возврат тзДанные;
КонецФункции

// ПРОЦЕДУРЫ РАСЧЕТА РЕЗРВОВ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ

Функция ВыручкаОтРеализации(Период, Организация)
	
	// Включаем в выручку часть расходов на счете 91
	ВидыПрочихДоходов = Новый Массив;
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОбъектовСтроительства);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоГода(Период));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ВидыПрочихДоходов", ВидыПрочихДоходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаВыручки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрочихДоходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка
	|ПОМЕСТИТЬ ВидыПрочихДоходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В(&ВидыПрочихДоходов)
	|	И ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Выручка.Сумма), 0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Выручка.СуммаНУОборотКт КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаВыручки.Счет
	|					ИЗ
	|						СчетаВыручки),
	|				,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации),
	|				,
	|				) КАК Выручка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрочиеДоходы.СуммаНУОборотКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаПрочихДоходов.Счет
	|					ИЗ
	|						СчетаПрочихДоходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВидыПрочихДоходов.Ссылка
	|						ИЗ
	|							ВидыПрочихДоходов),
	|				,
	|				) КАК ПрочиеДоходы) КАК Выручка";
	
	Выборка = Запрос.Выполнить().Выбрать(); // В выборке всегда 1 запись
	Выборка.Следующий();
	Возврат Выборка.Сумма;
	
КонецФункции

// Функция рассчитывает суммы начисления и списания резервов и коэффициент нормирования для НУ
// Предусмотрено два режима работы:
// для формирования проводок - формируются все суммы резервов, а коэффициент нормирования для НУ берется в готовом виде
//                             вызывается из регламентной операции "Расчет резервов по сомнительным долгам"
// для расчета коэффициента нормирования - определяются суммы для начисления резервов по НУ за месяц и с начала года и рассчитывается коэффициент нормирования
//                             вызывается из регламентной операции "Расчет долей списания косвенных расходов"
//
Функция ПровестиРасчетРезервовПоСомнительнымДолгам(СтруктураПараметров) Экспорт
	
	ДатаКонцаМесяца        = КонецМесяца(СтруктураПараметров.Дата);
	ДатаКонцаМесяцаГраница = Новый Граница(ДатаКонцаМесяца, ВидГраницы.Включая);
	ДатаНачалаГода = НачалоГода(СтруктураПараметров.Дата);
	ДатаКонцаПрошлогоМесяца = ?(Месяц(СтруктураПараметров.Дата) = 1, ДатаНачалаГода, КонецМесяца(НачалоМесяца(СтруктураПараметров.Дата) -1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецМесяца",       ДатаКонцаМесяца);
	Запрос.УстановитьПараметр("ДатаКонцаМесяцаГраница",ДатаКонцаМесяцаГраница);
	Запрос.УстановитьПараметр("Счет63",   ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконто",МассивВидовСубконто);
	Запрос.УстановитьПараметр("ВидРасчетов",     Перечисления.ВидыДвиженийПлатежногоКалендаря.ОжидаемыйПриход);
	
	// Получение списка дебиторской задолжнности
	Запрос.Текст =" 
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетов.ДоговорКонтрагента КАК Договор,
	|	ТаблицаВсехРасчетов.Документ КАК ДокументДолга,
	|	ЕСТЬNULL(ТаблицаВсехРасчетов.СуммаБухОстаток, 0) КАК ДолгБУ,
	|	ЕСТЬNULL(ТаблицаВсехРасчетов.СуммаБухОстаток, 0) КАК ДолгНУ
	|ПОМЕСТИТЬ ТаблицаВсехРасчетов
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Остатки(
	|			&ДатаКонцаМесяцаГраница,
	|			Организация = &Организация И ВидРасчетов=&ВидРасчетов) КАК ТаблицаВсехРасчетов
	|ГДЕ
	|	ТаблицаВсехРасчетов.СуммаБухОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетов.Договор КАК Договор,
	|	ТаблицаВсехРасчетов.ДокументДолга КАК ДокументДолга
	|ПОМЕСТИТЬ ТаблицаВсехРасчетовИДолгов
	|ИЗ
	|	ТаблицаВсехРасчетов КАК ТаблицаВсехРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныхРасчетов.Субконто1,
	|	ТаблицаДанныхРасчетов.Субконто2,
	|	ТаблицаДанныхРасчетов.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКонцаМесяцаГраница, Счет = &Счет63, &ВидыСубконто, Организация = &Организация) КАК ТаблицаДанныхРасчетов
	|ГДЕ
	|	НЕ ТаблицаДанныхРасчетов.Субконто3 = НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетовИДолгов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетовИДолгов.Договор КАК Договор,
	|	ТаблицаВсехРасчетовИДолгов.ДокументДолга КАК ДокументДолга,
	|	ТаблицаВсехРасчетов.ДолгБУ КАК ДолгБу,
	|	ТаблицаВсехРасчетов.ДолгНУ КАК ДолгНУ,
	|	ВЫРАЗИТЬ(ТаблицаВсехРасчетовИДолгов.Договор КАК Справочник.ДоговорыКонтрагентов).ПлатежныйКалендарь_ЗадержкаОплаты КАК СрокОплаты
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаВсехРасчетовИДолгов КАК ТаблицаВсехРасчетовИДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВсехРасчетов КАК ТаблицаВсехРасчетов
	|		ПО ТаблицаВсехРасчетовИДолгов.Контрагент = ТаблицаВсехРасчетов.Контрагент
	|			И ТаблицаВсехРасчетовИДолгов.Договор = ТаблицаВсехРасчетов.Договор
	|			И ТаблицаВсехРасчетовИДолгов.ДокументДолга = ТаблицаВсехРасчетов.ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга,
	|	СУММА(Таблица.ДолгБу) КАК ДолгБУ,
	|	СУММА(Таблица.ДолгНУ) КАК ДолгНУ,
	|	МИНИМУМ(Таблица.СрокОплаты) КАК СрокОплаты
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга
	|";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаДолгов = Результат.Выгрузить();
	
	ТаблицаДолгов.Колонки.Добавить("ДатаДолга", Новый ОписаниеТипов("Дата"));
	ТаблицаДолгов.Колонки.Добавить("СрокДолга", Новый ОписаниеТипов("Число"));
	ТаблицаДолгов.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	ТекущийМесяц = СтруктураПараметров.Дата;
	
	// Добавление к списку дебиторской задолженности дат возникновения сомнительной задолженности и корректировка сумм БУ и НУ по установкам в учетной политике
	Для Каждого СтрокаТз ИЗ ТаблицаДолгов Цикл
		СтрокаТз.ДатаДолга=СтрокаТз.ДокументДолга.Дата;
	КонецЦикла;	
	
	Для Каждого Строка Из ТаблицаДолгов Цикл
		Строка.ДатаДолга = Строка.ДатаДолга + Строка.СрокОплаты * 86400;
		Строка.СрокДолга = Цел((ТекущийМесяц - Строка.ДатаДолга ) / 86400);
		Если Строка.СрокДолга > 90 Тогда
			Строка.Коэффициент = 1;
		ИначеЕсли Строка.СрокДолга >= 45 Тогда
			Строка.Коэффициент = 0.5;
		Иначе
			Строка.Коэффициент = 0;	
		КонецЕсли;
	КонецЦикла;
	
	ЗапросВр = Новый Запрос;
	ЗапросВр.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросВр.УстановитьПараметр("ТаблицаДолгов",  ТаблицаДолгов);
	
	ЗапросВр.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДолгов.Контрагент КАК Контрагент,
	|	ТаблицаДолгов.Договор КАК Договор,
	|	ТаблицаДолгов.ДокументДолга КАК ДокументДолга,
	|	ТаблицаДолгов.ДатаДолга КАК ДатаДолга,
	|	ТаблицаДолгов.СрокДолга КАК СрокДолга,
	|	ТаблицаДолгов.ДолгБУ КАК ДолгБУ,
	|	ТаблицаДолгов.ДолгНУ КАК ДолгНУ,
	|	ТаблицаДолгов.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ТаблицаДолгов
	|ИЗ
	|	&ТаблицаДолгов КАК ТаблицаДолгов
	|ГДЕ
	|	ТаблицаДолгов.СрокДолга >= 45";
	
	ЗапросВр.Выполнить();
	
	// Определение сомнительной задолженности и расчет резервов
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецМесяца",       ДатаКонцаМесяца);
	Запрос.УстановитьПараметр("ДатаКонцаМесяцаГраница",ДатаКонцаМесяцаГраница);
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца",ДатаКонцаПрошлогоМесяца);
	Запрос.УстановитьПараметр("ДатаНачалаГода",    ДатаНачалаГода);
	Запрос.УстановитьПараметр("ВидыСубконто",      МассивВидовСубконто);
	Запрос.УстановитьПараметр("Счет63",            ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	Запрос.УстановитьПараметр("ДатаОстатков",      ДатаКонцаМесяца);
	
	Запрос.МенеджерВременныхТаблиц = ЗапросВр.МенеджерВременныхТаблиц;
	
	Запрос.Текст =  "ВЫБРАТЬ
	|	ТаблицаДолгов.Контрагент КАК Контрагент,
	|	ТаблицаДолгов.Договор КАК Договор,
	|	ТаблицаДолгов.ДокументДолга КАК ДокументДолга,
	|	ТаблицаДолгов.ДатаДолга,
	|	ТаблицаДолгов.СрокДолга,
	|	ТаблицаДолгов.ДолгБУ КАК НачисленоБУ,
	|	ТаблицаДолгов.ДолгНУ КАК НачисленоНУ,
	|	ТаблицаДолгов.ДолгБУ КАК СуммаЗадолженности,
	|	ТаблицаДолгов.Коэффициент
	|ПОМЕСТИТЬ ТаблицаСомнительныхДолгов
	|ИЗ
	|	ТаблицаДолгов КАК ТаблицаДолгов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ДокументДолга,
	|	ВЫБОР
	|		КОГДА &ДатаНачалаГода = &КонецПрошлогоМесяца
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	|	КОНЕЦ КАК НачисленоРанееБУ,
	|	ВЫБОР
	|		КОГДА &ДатаНачалаГода = &КонецПрошлогоМесяца
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокКт
	|	КОНЕЦ КАК НачисленоРанееНУ,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстатокРезерваБУНаНачалоГода
	|ПОМЕСТИТЬ ОстаткиРезервов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачалаГода, &ДатаОстатков, , , Счет = &Счет63, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхРасчетов.Субконто1 КАК Контрагент,
	|	ТаблицаДанныхРасчетов.Субконто2 КАК Договор,
	|	ТаблицаДанныхРасчетов.Субконто3 КАК ДокументДолга,
	|	ТаблицаДанныхРасчетов.СуммаОстатокКт КАК ОстатокРезерваБУ,
	|	ТаблицаДанныхРасчетов.СуммаНУОстатокКт КАК ОстатокРезерваНУ
	|ПОМЕСТИТЬ ТаблицаТекущихРезервов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКонцаМесяцаГраница, Счет = &Счет63, &ВидыСубконто, Организация = &Организация) КАК ТаблицаДанныхРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСомнительныхДолгов.Контрагент,
	|	ТаблицаСомнительныхДолгов.Договор,
	|	ТаблицаСомнительныхДолгов.ДокументДолга,
	|	ТаблицаСомнительныхДолгов.ДатаДолга,
	|	ТаблицаСомнительныхДолгов.СрокДолга,
	|	ТаблицаСомнительныхДолгов.СуммаЗадолженности,
	|	ЕСТЬNULL(ОстаткиРезервов.НачисленоРанееБУ, 0) КАК НачисленоРанееБУ,
	|	ЕСТЬNULL(ОстаткиРезервов.НачисленоРанееНУ, 0) КАК НачисленоРанееНУ,
	|	ЕСТЬNULL(ОстаткиРезервов.ОстатокРезерваБУНаНачалоГода, 0) КАК ОстатокРезерваБУНаНачалоГода,
	|	ЕСТЬNULL(ТаблицаСомнительныхДолгов.НачисленоБУ, 0) КАК НачисленоБУ,
	|	ЕСТЬNULL(ТаблицаСомнительныхДолгов.НачисленоНУ, 0) КАК НачисленоНУ,
	|	ЕСТЬNULL(ТаблицаТекущихРезервов.ОстатокРезерваБУ, 0) КАК ОстатокРезерваБУ,
	|	ЕСТЬNULL(ТаблицаТекущихРезервов.ОстатокРезерваНУ, 0) КАК ОстатокРезерваНУ,
	|	ТаблицаСомнительныхДолгов.Коэффициент
	|ПОМЕСТИТЬ ТаблицаСомнительныхДолговИОстатковРезервов
	|ИЗ
	|	ТаблицаСомнительныхДолгов КАК ТаблицаСомнительныхДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервов КАК ОстаткиРезервов
	|		ПО ТаблицаСомнительныхДолгов.Контрагент = ОстаткиРезервов.Контрагент
	|			И ТаблицаСомнительныхДолгов.Договор = ОстаткиРезервов.Договор
	|			И ТаблицаСомнительныхДолгов.ДокументДолга = ОстаткиРезервов.ДокументДолга
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТекущихРезервов КАК ТаблицаТекущихРезервов
	|		ПО ТаблицаСомнительныхДолгов.Контрагент = ТаблицаТекущихРезервов.Контрагент
	|			И ТаблицаСомнительныхДолгов.Договор = ТаблицаТекущихРезервов.Договор
	|			И ТаблицаСомнительныхДолгов.ДокументДолга = ТаблицаТекущихРезервов.ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСомнительныхДолговИОстатковРезервов.Контрагент,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.Договор,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.ДокументДолга,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.ДатаДолга,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.СрокДолга,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.СуммаЗадолженности,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент > ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ
	|			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент - ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоБУ,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоНУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК НачисленоСНачалаГодаНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ > (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2)))
	|			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ - (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВосстановленоБУ,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(&КонецМесяца) = 12
	|				И ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУНаНачалоГода > 0
	|				И ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУ > 0
	|			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрисоединеноБУ
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаСомнительныхДолговИОстатковРезервов КАК ТаблицаСомнительныхДолговИОстатковРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.Договор КАК Договор,
	|	Таблица.ДокументДолга КАК ДокументДолга,
	|	МИНИМУМ(Таблица.ДатаДолга) КАК ДатаДолга,
	|	МИНИМУМ(Таблица.СрокДолга) КАК СрокДолга,
	|	СУММА(Таблица.СуммаЗадолженности) КАК СуммаЗадолженности,
	|	СУММА(Таблица.НачисленоРанееБУ) КАК НачисленоРанееБУ,
	|	СУММА(Таблица.НачисленоРанееНУ) КАК НачисленоРанееНУ,
	|	СУММА(Таблица.НачисленоБУ) КАК НачисленоБУ,
	|	СУММА(Таблица.ВосстановленоБУ) КАК ВосстановленоБУ,
	|	СУММА(Таблица.ПрисоединеноБУ) КАК ПрисоединеноБУ,
	|	СУММА(Таблица.НачисленоСНачалаГодаНУ) КАК НачисленоСНачалаГодаНУ
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаРезервов = Результат.Выгрузить();
	ТаблицаРезервов.Колонки.Добавить("НачисленоНУ");
	ТаблицаРезервов.Колонки.Добавить("ВосстановленоНУ");
	
	МожноНачислить = ОпределитьНормуРасходовПоВыручке(СтруктураПараметров, 10);
	Коэффициент =0;
	
	Если НЕ ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ") = 0 Тогда
		Коэффициент = МожноНачислить / ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ");
		Если Коэффициент > 1 Тогда Коэффициент=1; КонецЕсли;
	КонецЕсли;
	
	ИтогНачисленоНУ = Окр(ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ") * Коэффициент, 2);
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТаблицаРезервов.ВыгрузитьКолонку("НачисленоСНачалаГодаНУ"), ИтогНачисленоНУ, ТаблицаРезервов, "НачисленоСНачалаГодаНУ");
	
	
	Для Каждого СтрокаРезерва Из ТаблицаРезервов Цикл
		Разница = СтрокаРезерва.НачисленоСНачалаГодаНУ - СтрокаРезерва.НачисленоРанееНУ;
		Если Разница >= 0 Тогда
			СтрокаРезерва.НачисленоНУ     = Разница;
			СтрокаРезерва.ВосстановленоНУ = 0;
		Иначе	
			СтрокаРезерва.НачисленоНУ     = 0;
			СтрокаРезерва.ВосстановленоНУ = - Разница;
		КонецЕсли;
		
	КонецЦикла;
	Возврат ТаблицаРезервов;
КонецФункции

Процедура РасчетРезервовПоСомнительнымДолгам(СтруктураШапкиДокумента)
	
	//ЗаписиСведенийРезервов = Движения.РасчетРезервовПоСомнительнымДолгам.ВыгрузитьКолонки();
	//СтруктураШапкиДокумента.Вставить("ЗаписиСведенийРезервов", ЗаписиСведенийРезервов);	
	
	
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	//ТаблицаДолгов = ПровестиРасчетРезервовПоСомнительнымДолгам(СтруктураШапкиДокумента);
	
	//Если ТаблицаДолгов.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	Счет63  = ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	//Счет62  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками;
	//Счет76  = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Счет91_1 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Счет91_2 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	ПредставлениеПериода = ПредставлениеПериода(НачалоМесяца(СтруктураШапкиДокумента.Дата), КонецМесяца(СтруктураШапкиДокумента.Дата), "ФП=Истина");
	//Статья = СтруктураШапкиДокумента.УчетнаяПолитика.СтатьяУчетаПрочихДоходовИРасходовПоСомнительнымДолгам;
	
	//Для Каждого СтрокаТаблицыДолгов Из ТаблицаДолгов Цикл
	//	
	//	Если СтрокаТаблицыДолгов.НачисленоРанееБУ = 0 И СтрокаТаблицыДолгов.НачисленоРанееНУ = 0 
	//	   И СтрокаТаблицыДолгов.НачисленоБУ = 0      И СтрокаТаблицыДолгов.НачисленоНУ = 0 
	//	   И СтрокаТаблицыДолгов.ВосстановленоБУ = 0  И СтрокаТаблицыДолгов.ВосстановленоНУ = 0 
	//	   И СтрокаТаблицыДолгов.ПрисоединеноБУ = 0   Тогда
	//	   		Продолжить;
	//	КонецЕсли;
	//	
	//	СтрокаЗаписи 					= СтруктураШапкиДокумента.ЗаписиСведенийРезервов.Добавить();
	//	СтрокаЗаписи.Контрагент 		= СтрокаТаблицыДолгов.Контрагент;
	//	СтрокаЗаписи.ДоговорКонтрагента = СтрокаТаблицыДолгов.Договор;
	//	СтрокаЗаписи.ДокументРасчетовСКонтрагентом 	= СтрокаТаблицыДолгов.ДокументДолга;
	//	СтрокаЗаписи.ДатаВозникновенияЗадолженности = СтрокаТаблицыДолгов.ДатаДолга;
	//	СтрокаЗаписи.СрокЗадолженности 	= СтрокаТаблицыДолгов.СрокДолга;
	//	СтрокаЗаписи.СуммаЗадолженности = СтрокаТаблицыДолгов.СуммаЗадолженности;
	//	СтрокаЗаписи.НачисленоРанееБУ 	= СтрокаТаблицыДолгов.НачисленоРанееБУ;
	//	СтрокаЗаписи.НачисленоРанееНУ 	= СтрокаТаблицыДолгов.НачисленоРанееНУ;
	//	СтрокаЗаписи.НачисленоБУ 		= СтрокаТаблицыДолгов.НачисленоБУ;
	//	СтрокаЗаписи.НачисленоНУ 		= СтрокаТаблицыДолгов.НачисленоНУ;
	//	СтрокаЗаписи.ВосстановленоБУ 	= СтрокаТаблицыДолгов.ВосстановленоБУ;
	//	СтрокаЗаписи.ВосстановленоНУ 	= СтрокаТаблицыДолгов.ВосстановленоНУ;
	//	СтрокаЗаписи.ПрисоединеноБУ 	= СтрокаТаблицыДолгов.ПрисоединеноБУ;
	//	СтрокаЗаписи.НачисленоСНачалаГодаНУ = СтрокаТаблицыДолгов.НачисленоСНачалаГодаНУ;
	//	
	//КонецЦикла;
	//
	ТаблицаДолгов=РасчетРезервовПоСомнительнымДолгам.Выгрузить();
	ТаблицаДолгов.Свернуть("Контрагент,ДоговорКонтрагента,ДокументРасчетовСКонтрагентом","НачисленоБУ,НачисленоНУ,ВосстановленоБУ,ВосстановленоНУ,ПрисоединеноБУ");
	
	Для Каждого Выборка Из ТаблицаДолгов Цикл
		
		Если Выборка.НачисленоБУ <> 0 Или Выборка.НачисленоНУ <> 0 Тогда
			
			Проводка                = мПроводки.Добавить();
			Проводка.Период         = СтруктураШапкиДокумента.Дата;
			Проводка.Организация    = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт         = Счет91_2;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтатьяУчетаРасходовПоСомнительнымДолгам);
			
			Проводка.СчетКт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Выборка.НачисленоБУ;
			
			НачисленоНУ = Выборка.НачисленоНУ;
			НачисленоПР = Выборка.НачисленоБУ - Выборка.НачисленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			
			Проводка.Содержание   = "Начислены резервы по сомнительным долгам за " + ПредставлениеПериода;
		КонецЕсли;
		
		Если Выборка.ВосстановленоБУ <> 0 Или Выборка.ВосстановленоНУ <> 0 Тогда
			
			Проводка                = мПроводки.Добавить();
			Проводка.Период         = СтруктураШапкиДокумента.Дата;
			Проводка.Организация    = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетКт         = Счет91_1;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяУчетаРасходовПоСомнительнымДолгам);
			
			Проводка.СчетДт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Контрагент);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Выборка.ВосстановленоБУ;
			
			НачисленоНУ = Выборка.ВосстановленоНУ;
			НачисленоПР = Выборка.ВосстановленоБУ - Выборка.ВосстановленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			
			Проводка.Содержание   = "Восстановлены резервы по сомнительным долгам за " + ПредставлениеПериода;
		КонецЕсли;
		
		Если Выборка.ПрисоединеноБУ <> 0 Тогда
			
			ПрисоединеноБУ = Выборка.ПрисоединеноБУ;
			Если ПрисоединеноБУ <> 0 Тогда
				Проводка                = мПроводки.Добавить();
				Проводка.Период         = СтруктураШапкиДокумента.Дата;
				Проводка.Организация    = СтруктураШапкиДокумента.Организация;
				
				Проводка.СчетКт         = Счет91_1;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяУчетаРасходовПоСомнительнымДолгам);
				
				Проводка.СчетДт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
				Проводка.Содержание   = "Присоединение резерва к доходам " + ПредставлениеПериода;
				
				Проводка                = мПроводки.Добавить();
				Проводка.Период         = СтруктураШапкиДокумента.Дата;
				Проводка.Организация    = СтруктураШапкиДокумента.Организация;
				
				Проводка.СчетДт         = Счет91_2;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтатьяУчетаРасходовПоСомнительнымДолгам);
				
				Проводка.СчетКт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
				Проводка.Содержание   = "Присоединение резерва к расходам " + ПредставлениеПериода;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	//
	//ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
	//СтруктураШапкиДокумента.ЗаписиСведенийРезервов, 
	//РегистрыСведений.РасчетРезервовПоСомнительнымДолгам,
	//"Организация,ПериодРасчета,Активность,Регистратор,Контрагент,ДоговорКонтрагента,ДокументРасчетовСКонтрагентом,СуммаЗадолженности,ДатаВозникновенияЗадолженности,СрокЗадолженности",
	//"НачисленоРанееБУ,НачисленоРанееНУ,НачисленоБУ,НачисленоНУ,ВосстановленоБУ,ВосстановленоНУ,ПрисоединеноБУ,НачисленоСНачалаГодаНУ");
	
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАКРЫТИЮ СЧЕТОВ БУ

Процедура ЗакрытиеСчета44(СтруктураШапкиДокумента, СтруктураДопПараметров, Отказ, Заголовок, ТранспортныеРасходы)
	
	ЗаписьСписанияКосвенныхРасходов = Движения.РасчетСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	СтруктураДопПараметров.Вставить("ЗаписьСписанияКосвенныхРасходов", ЗаписьСписанияКосвенныхРасходов);
	СтруктураДопПараметров.Вставить("ЭтапСписанияКосвенныхРасходов", 1);
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",  мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетЗатрат",  ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	Запрос.УстановитьПараметр("ВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы",  Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК СтатьяЗатрат,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетЗатрат),	&ВидыСубконто,
	|			Организация = &Организация И Субконто1.ВидРасходовНУ = &ТранспортныеРасходы) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|";
	
	Если НЕ ТранспортныеРасходы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Субконто1.ВидРасходовНУ","НЕ Субконто1.ВидРасходовНУ");
	КонецЕсли;
	
	ВсегоРасходов = 0;
	СтруктураДопПараметров.ЭтапСписанияКосвенныхРасходов = 1;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Выборка Из РезультатЗапроса Цикл
		Сумма = Новый Структура("СуммаБУ,СуммаНУ,СуммаПР,СуммаВР",Выборка.СуммаБУ,Выборка.СуммаНУ, Выборка.СуммаПР, Выборка.СуммаВР);
		СписатьКосвенныеРасходы(мПроводки, Выборка, Сумма, СтруктураШапкиДокумента, СтруктураДопПараметров,,Истина);		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);	
КонецПроцедуры

Процедура ЗакрытиеСчета90(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	МассивСчета90=Новый Массив;
	МассивСчета90Сальдо=Новый Массив;
	МассивСчета91=Новый Массив;
	МассивСчета91Сальдо=Новый Массив;
	МассивСчета99=Новый Массив;
	Для Каждого СтрокаДок ИЗ СчетаЗакрытия90_91 Цикл
		Если СокрЛП(СтрокаДок.ТипСчета)="Счета90" Тогда
			МассивСчета90.Добавить(СтрокаДок.Счет);
		ИначеЕсли СокрЛП(СтрокаДок.ТипСчета)="Счет90Сальдо" Тогда
			МассивСчета90Сальдо.Добавить(СтрокаДок.Счет);
			МассивСчета90.Добавить(СтрокаДок.Счет);
		ИначеЕсли СокрЛП(СтрокаДок.ТипСчета)="Счета91" Тогда
			МассивСчета91.Добавить(СтрокаДок.Счет);
		ИначеЕсли СокрЛП(СтрокаДок.ТипСчета)="Счет91Сальдо" Тогда
			МассивСчета91Сальдо.Добавить(СтрокаДок.Счет);
			МассивСчета91.Добавить(СтрокаДок.Счет);
		ИначеЕсли СокрЛП(СтрокаДок.ТипСчета)="Счет99" Тогда
			МассивСчета99.Добавить(СтрокаДок.Счет);
		КонецЕсли;
	КонецЦикла;	
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мНачДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет90", МассивСчета90);
	
	СальдовыйСчет=МассивСчета90Сальдо[0];
	стрТелоЗапроса="";
	СтрокаСвертки="";
	Для ъ=1 ПО СальдовыйСчет.ВидыСубконто.Количество() Цикл
		стрТелоЗапроса=стрТелоЗапроса+"ИсточникДанных.Субконто"+ъ+", ";
		СтрокаСвертки=СтрокаСвертки+"Субконто"+ъ+",";
	КонецЦикла;	
	
	Если ЗакрытьСУчетомАналитики Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Счет,
		|"+?(НЕ ГодовоеЗакрытие90, стрТелоЗапроса,"
		|	ИсточникДанных.Субконто1,
		|	ИсточникДанных.Субконто2,
		|	ИсточникДанных.Субконто3,")+"
		|	-1*ИсточникДанных.СуммаОборот КАК Прибыль,
		|	-1*ИсточникДанных.СуммаНУОборот КАК ПрибыльНУ,
		|	-1*ИсточникДанных.СуммаВРОборот КАК ПрибыльВР,
		|	-1*ИсточникДанных.СуммаПРОборот КАК ПрибыльПР,
		|	ИсточникДанных.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач,&ДатаКон, , Счет В (&Счет90), , Организация В (&Организация), , ) КАК ИсточникДанных
		|";
	Иначе
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Счет,
		|"+?(НЕ ГодовоеЗакрытие90, стрТелоЗапроса,"
		|	ИсточникДанных.Субконто1,
		|	ИсточникДанных.Субконто2,
		|	ИсточникДанных.Субконто3,")+"
		|	-1*ИсточникДанных.СуммаОстаток КАК Прибыль,
		|	-1*ИсточникДанных.СуммаНУОстаток КАК ПрибыльНУ,
		|	-1*ИсточникДанных.СуммаВРОстаток КАК ПрибыльВР,
		|	-1*ИсточникДанных.СуммаПРОстаток КАК ПрибыльПР,
		|	ИсточникДанных.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&Счет90), , Организация В (&Организация)) КАК ИсточникДанных
		|";
	КонецЕсли;
	тзДанные=Запрос.Выполнить().Выгрузить();
	
	тзЗакрытие90=тзДанные.Скопировать();
	тзЗакрытие90.Свернуть(СтрокаСвертки+"Подразделение","Прибыль,ПрибыльНУ,ПрибыльВР,ПрибыльПР");
	//	тзЗакрытие90.Свернуть("Субконто1,Субконто2,Субконто3,Подразделение","Прибыль,ПрибыльНУ,ПрибыльВР,ПрибыльПР");
	
	Для Каждого Выборка ИЗ тзЗакрытие90 Цикл	
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			Проводка=мПроводки.Добавить();
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = Организация;
				Проводка.СчетДт                    = МассивСчета90Сальдо[0]; //90
				Для ъ=1 ПО СальдовыйСчет.ВидыСубконто.Количество() Цикл
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, ъ, Выборка["Субконто"+ъ]);
				КонецЦикла;
				Проводка.СчетКт                    = МассивСчета99[0];  //99
				Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = Организация;
				Проводка.СчетКт                    = МассивСчета90Сальдо[0]; //90
				Для ъ=1 ПО СальдовыйСчет.ВидыСубконто.Количество() Цикл
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, ъ, Выборка["Субконто"+ъ]);
				КонецЦикла;
				Проводка.СчетДт                    = МассивСчета99[0];  //99
				Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	/// годовое закрытие
	Если ГодовоеЗакрытие90 Тогда
		Для Каждого Выборка ИЗ тзДанные Цикл	
			Если Выборка.Прибыль = 0 И Выборка.ПрибыльНУ = 0 И Выборка.ПрибыльПР = 0 И Выборка.ПрибыльВР = 0 Тогда Продолжить; КонецЕсли;
			Если Выборка.Счет=МассивСчета90Сальдо[0] Тогда Продолжить; КонецЕсли;	
			Если Выборка.Прибыль >= 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет; //90
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
				
				Проводка.СчетКт                    = МассивСчета90Сальдо[0]; //90-09
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
				
				Проводка.Сумма                     = Выборка.Прибыль;
				Проводка.Содержание         = "Закрытие года";
				
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ                     = Выборка.ПрибыльНУ;
				СуммаПР                     = Выборка.ПрибыльПР;
				СуммаВР                     = Выборка.ПрибыльВР;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
			ИначеЕсли Выборка.Прибыль < 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = МассивСчета90Сальдо[0];
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
				
				Проводка.СчетКт                    = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
				
				Проводка.Сумма                     = - Выборка.Прибыль;
				Проводка.Содержание         	   = "Закрытие года";
				
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ = - Выборка.ПрибыльНУ;
				СуммаПР = - Выборка.ПрибыльПР;
				СуммаВР = - Выборка.ПрибыльВР;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;		
	
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мНачДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет91", МассивСчета91);
	
	СальдовыйСчет=МассивСчета91Сальдо[0];
	стрТелоЗапроса="";
	СтрокаСвертки="";
	Для ъ=1 ПО СальдовыйСчет.ВидыСубконто.Количество() Цикл
		стрТелоЗапроса=стрТелоЗапроса+"ИсточникДанных.Субконто"+ъ+", ";
		СтрокаСвертки=СтрокаСвертки+"Субконто"+ъ+",";
	КонецЦикла;	
	Если ЗакрытьСУчетомАналитики Тогда
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Счет,
		|"+?(НЕ ГодовоеЗакрытие90, стрТелоЗапроса,"
		|	ИсточникДанных.Субконто1,
		|	ИсточникДанных.Субконто2,
		|	ИсточникДанных.Субконто3,")+"
		|	-1*ИсточникДанных.СуммаОборот КАК Прибыль,
		|	-1*ИсточникДанных.СуммаНУОборот КАК ПрибыльНУ,
		|	-1*ИсточникДанных.СуммаВРОборот КАК ПрибыльВР,
		|	-1*ИсточникДанных.СуммаПРОборот КАК ПрибыльПР,
		|	ИсточникДанных.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач,&ДатаКон, , Счет В (&Счет91), , Организация В (&Организация), , ) КАК ИсточникДанных
		|";
	Иначе
		Запрос.Текст="
		|ВЫБРАТЬ
		|	ИсточникДанных.Счет,
		|"+?(НЕ ГодовоеЗакрытие90, стрТелоЗапроса,"
		|	ИсточникДанных.Субконто1,
		|	ИсточникДанных.Субконто2,
		|	ИсточникДанных.Субконто3,")+"
		|	-1*ИсточникДанных.СуммаОстаток КАК Прибыль,
		|	-1*ИсточникДанных.СуммаНУОстаток КАК ПрибыльНУ,
		|	-1*ИсточникДанных.СуммаВРОстаток КАК ПрибыльВР,
		|	-1*ИсточникДанных.СуммаПРОстаток КАК ПрибыльПР,
		|	ИсточникДанных.Подразделение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&Счет91), , Организация В (&Организация)) КАК ИсточникДанных
		|";
	КонецЕсли;
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзЗакрытие91=тзДанные.Скопировать();
	//	тзЗакрытие91.Свернуть("Субконто1,Субконто2,Субконто3,Подразделение","Прибыль,ПрибыльНУ,ПрибыльВР,ПрибыльПР");
	тзЗакрытие91.Свернуть(СтрокаСвертки+"Подразделение","Прибыль,ПрибыльНУ,ПрибыльВР,ПрибыльПР");
	
	Для Каждого Выборка ИЗ тзЗакрытие91 Цикл	
		Если Не Выборка.Прибыль = 0 Или Не Выборка.ПрибыльНУ = 0 Или Не Выборка.ПрибыльПР = 0 Или Не Выборка.ПрибыльВР = 0 Тогда
			Проводка=мПроводки.Добавить();
			Если Выборка.Прибыль >= 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = Организация;
				Проводка.СчетДт                    = МассивСчета91Сальдо[0]; //91
				Для ъ=1 ПО СальдовыйСчет.ВидыСубконто.Количество() Цикл
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, ъ, Выборка["Субконто"+ъ]);
				КонецЦикла;
				
				//БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
				//  БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
				//  БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
				Проводка.СчетКт                    = МассивСчета99[0];  //99
				Проводка.СубконтоКт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				
				Проводка.Сумма = Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Выборка.ПрибыльНУ,Выборка.ПрибыльНУ,Выборка.ПрибыльПР,Выборка.ПрибыльПР,Выборка.ПрибыльВР,Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Проводка.Период                    = Дата;
				Проводка.Организация               = Организация;
				Проводка.СчетКт                    = МассивСчета91Сальдо[0]; //91
				Для ъ=1 ПО СальдовыйСчет.ВидыСубконто.Количество() Цикл
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, ъ, Выборка["Субконто"+ъ]);
				КонецЦикла;
				
				Проводка.СчетДт                    = МассивСчета99[0];  //99
				Проводка.СубконтоДт.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				
				Проводка.Сумма = - Выборка.Прибыль;
				Проводка.Содержание                = "Определение финансовых результатов";
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-Выборка.ПрибыльНУ,-Выборка.ПрибыльНУ,-Выборка.ПрибыльПР,-Выборка.ПрибыльПР,-Выборка.ПрибыльВР,-Выборка.ПрибыльВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если ГодовоеЗакрытие90 Тогда
		Для Каждого Выборка ИЗ тзДанные Цикл	
			Если Выборка.Счет = МассивСчета91Сальдо[0] Тогда Продолжить; КонецЕсли;
			
			
			СуммаСписания =  ?(ЗначениеЗаполнено(Выборка.Прибыль), Выборка.Прибыль, 0);
			СуммаСписанияНУ =  ?(ЗначениеЗаполнено(Выборка.ПрибыльНУ), Выборка.ПрибыльНУ, 0);
			СуммаСписанияПР =  ?(ЗначениеЗаполнено(Выборка.ПрибыльПР), Выборка.ПрибыльПР, 0);
			СуммаСписанияВР =  ?(ЗначениеЗаполнено(Выборка.ПрибыльВР), Выборка.ПрибыльВР, 0);
			
			Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0  Тогда	Продолжить; КонецЕсли;
			
			Если СуммаСписания >= 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
				
				Проводка.СчетКт                    = МассивСчета91Сальдо[0];
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
				
				Проводка.Сумма                     = СуммаСписания;
				Проводка.Содержание                = "Закрытие года";
				
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ                     = СуммаСписанияНУ;
				СуммаПР                     = СуммаСписанияПР;
				СуммаВР                     = СуммаСписанияВР;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение,Выборка.Подразделение );
				
			ИначеЕсли СуммаСписания < 0 Тогда
				
				Проводка = мПроводки.Добавить();
				Проводка.Период                    = Дата;
				Проводка.Организация               = СтруктураШапкиДокумента.Организация;
				Проводка.СчетДт                    = МассивСчета91Сальдо[0];
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Выборка.Субконто3);
				
				Проводка.СчетКт                    = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
				
				Проводка.Сумма                     = - СуммаСписания;
				Проводка.Содержание                = "Закрытие года";
				
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
				
				СуммаНУ = - СуммаСписанияНУ;
				СуммаПР = - СуммаСписанияПР;
				СуммаВР = - СуммаСписанияВР;
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
				БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ОкруглениеНДС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",		НачалоКвартала(мНачДата));
	Запрос.УстановитьПараметр("КонДата",        мКонГраница);
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.СписокОП);
	МассивСчета68=Новый Массив;
	Для Каждого СтрокаДок ИЗ СчетаЗакрытия90_91 Цикл
		Если СокрЛП(СтрокаДок.ТипСчета)="Счет68НДС" ИЛИ СокрЛП(СтрокаДок.ТипСчета)="Счет68НДСНалоговыйАгент" Тогда
			МассивСчета68.Добавить(СтрокаДок.Счет);
		КонецЕсли;
	КонецЦикла;	
	Запрос.УстановитьПараметр("СчетУчетаНДС",МассивСчета68);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт,
	|	Хозрасчетный.Субконто1,
	|	Хозрасчетный.Субконто2,
	|	Хозрасчетный.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В (&СчетУчетаНДС),
	|			,
	|			Организация В ИЕРАРХИИ (&Организация),
	|			(НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса)))
	|				И (НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))),
	|			) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Счет,
	|	Хозрасчетный.Субконто1,
	|	Хозрасчетный.Субконто2,
	|	Хозрасчетный.Субконто3";
	
	Результат    = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		
		Выборка= Результат.Выбрать();
		Выборка.Следующий();
		ОстатокОкругления = 0;
		НДСКВозмещению = Ложь;
		
		НДСПо68_02 = Выборка.СуммаОборотКт - Выборка.СуммаОборотДт;
		ОстатокОкругления = НДСПо68_02 - Окр(НДСПо68_02);
		Если НДСПо68_02>0 Тогда
			НДСКВозмещению = Истина;
		КонецЕсли;	
		
		Если ОстатокОкругления = 0 Тогда 
			Возврат;
		Иначе			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = СчетаЗакрытия90_91.Найти("Счет68СписанияОкруглений", "ТипСчета").Счет;
			Проводка.СчетКт      = Выборка.Счет;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Субконто1);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.Субконто2);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Выборка.Субконто3);
			Если Не НДСКВозмещению Тогда
				Проводка.Сумма		= - ОстатокОкругления;
			Иначе
				Проводка.Сумма		= ОстатокОкругления;
			КонецЕсли;
			
			Проводка.Содержание = "Отклонение при округлениии до рублей";
		КонецЕсли;
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Функция МаксимальнаяДоляУменьшенияПрибылиЗаСчетУбытковПрошлыхЛет(Период) Экспорт
	
	// Ст. 283 НК РФ в редакции 401-ФЗ от 30.11.2016
	// В отчетные (налоговые) периоды с 1 января 2017 года по 31 декабря 2020 года
	// налоговая база по налогу за текущий отчетный (налоговый) период... 
	// не может быть уменьшена на сумму убытков, полученных в предыдущих налоговых периодах,
	// более чем на 50 процентов.
	Если  (НачалоГода(Период) >= '2017-01-01' 
		И НачалоГода(Период) <= '2020-01-01') Тогда
		Возврат 0.5;
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции

Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет99",      ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) - СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК ПрибыльНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет99),
	|			,
	|			Организация = &Организация,
	|			) КАК ХозрасчетныйОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	ПрибыльНУ = Результат.Итог("ПрибыльНУ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("ДатаКон",     мКонДата);  
	Запрос.УстановитьПараметр("ДатаОкончанияСписания", НачалоДня(мКонДата));  
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет97",      ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидРБП",      Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// До налогового периода 2017 года можно было списывать убытки за 10 предыдущих лет
	// С 2017 года этот период зафиксирован "снизу" (401-ФЗ): 
	// можно списывать убытки прошлых лет, начиная с 2007 года, бессрочно
	Если мКонДата < '2017-01-01' Тогда
		// Здесь проверяем только, что срок списания убытка не истек 
		Запрос.УстановитьПараметр("ДатаНачалаСписания", '0001-01-01');
		Запрос.УстановитьПараметр("ПродолжительностьСписанияУбытковОграничена", Истина);
	Иначе
		// Убытки 2007 года списываются начиная с 01.01.2008
		Запрос.УстановитьПараметр("ДатаНачалаСписания", '2008-01-01');
		Запрос.УстановитьПараметр("ПродолжительностьСписанияУбытковОграничена", Ложь);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания КАК ГОД,
	|	ХозрасчетныйОбороты.Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК УбыткаСписано,
	|	ХозрасчетныйОбороты.Субконто1 КАК РБП,
	|	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток КАК ОстатокУбытка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет97),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1.ВидРБП = &ВидРБП) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания МЕЖДУ &ДатаНачалаСписания И &ДатаНач
	|	И (НЕ &ПродолжительностьСписанияУбытковОграничена
	|			ИЛИ ХозрасчетныйОбороты.Субконто1.ДатаОкончанияСписания >= &ДатаОкончанияСписания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток,
	|	ХозрасчетныйОбороты.Субконто1.ДатаНачалаСписания,
	|	ХозрасчетныйОбороты.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГОД";
	
	ТаблицаУбытков      	= Запрос.Выполнить().Выгрузить();
	СписанныйРанееУбыток 	= ТаблицаУбытков.Итог("УбыткаСписано");
	ВсегоОстатокУбытков 	= ТаблицаУбытков.Итог("ОстатокУбытка");
	
	Если ПрибыльНУ <= 0 И СписанныйРанееУбыток = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ПрибыльНУ может включать убытки, которые в прошлых отчетных периодах уменьшили налогооблагаемую базу текущего налогового периода
	// Для расчета ограничения списания убытков 
	// рассчитаем прибыль текущего периода (с начала года по конец отчетного месяца) без учета признанных убытков прошлых лет
	ПрибыльНУТекущегоПериода = ПрибыльНУ + СписанныйРанееУбыток;
		
	// Если есть прибыль без учета списанных ранее убытков прошлых лет, то считаем ограничение на сумму переноса убытков в текущем периоде
	// Если в текущем периоде получен убыток (или прибыль = 0), то убытки прошлых лет списывать нельзя - 
	// нужно сторнировать перенесенные ранее суммы убытков
	СписаниеУбытка = 0;
	Если ПрибыльНУТекущегоПериода > 0 Тогда
		ЛимитСписанияУбытка = Окр(
			ПрибыльНУТекущегоПериода * МаксимальнаяДоляУменьшенияПрибылиЗаСчетУбытковПрошлыхЛет(мКонДата),
			0,
			0);
		СписаниеУбытка = Мин(ВсегоОстатокУбытков + СписанныйРанееУбыток, ЛимитСписанияУбытка);		
	КонецЕсли;
	
	СуммаСписания = СписаниеУбытка - СписанныйРанееУбыток;
	
	Если СуммаСписания < 0 Тогда
		// В первую очередь сторнируем убытки наиболее поздних периодов
		ТаблицаУбытков.Сортировать("Год Убыв");
	КонецЕсли;
	
	Для Каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Если СуммаСписания = 0 Тогда
			Прервать;
		КонецЕсли;
				
		Если СуммаСписания > 0 Тогда 
			СуммаУбыткаМожноСписать = Мин(СуммаСписания, УбытокПрошлогоПериода.ОстатокУбытка);
		Иначе
			СуммаУбыткаМожноСписать = Макс(СуммаСписания, -УбытокПрошлогоПериода.УбыткаСписано);
		КонецЕсли;		
		
		СуммаСписания  = СуммаСписания - СуммаУбыткаМожноСписать;
		
		Если СуммаУбыткаМожноСписать <> 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период                            = Дата;
			Проводка.Организация                       = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт                            = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
			Проводка.СчетКт                            = УбытокПрошлогоПериода.Счет;
			Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.РБП;
			Проводка.Содержание                        = "Убытки прошлых лет";
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаУбыткаМожноСписать,СуммаУбыткаМожноСписать,0,0,-СуммаУбыткаМожноСписать,-СуммаУбыткаМожноСписать,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

// ПБУ 18
Процедура СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога, КоррСчет, Субконто = Неопределено, ПоДебету, СодержаниеПроводки, СуммаЕНВД = 0, Субконто68_4 = Неопределено, Субконто68_4_2 = Неопределено)
	
	Счет99 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	
	Если Субконто68_4 <> Неопределено Тогда
		
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	Иначе
		Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	КонецЕсли;
	
	Счет68_04Дебет  = Счет68_04;
	Счет68_04Кредит = Счет68_04;
	
	Если Не СуммаЕНВД = 0 Тогда
		Если ОдногоЗнака(СуммаНалога, СуммаЕНВД) Тогда
			Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
				СуммаНалога = СуммаНалога - СуммаЕНВД;
				Сумма99 = СуммаЕНВД;
				СуммаЕНВД = 0;
			Иначе
				Сумма99 = СуммаНалога;
				СуммаНалога = 0;
				СуммаЕНВД = СуммаЕНВД - Сумма99;
			КонецЕсли;
		Иначе
			Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
				СуммаНалога = СуммаНалога + СуммаЕНВД;
				Сумма99 = - СуммаЕНВД;
				СуммаЕНВД = 0;
			Иначе
				Сумма99 = - СуммаНалога;
				СуммаНалога = 0;
				СуммаЕНВД = СуммаЕНВД + Сумма99;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сумма99 = 0;
	КонецЕсли;
	
	
	Если СуммаНалога <> 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаНалога;
		Проводка.Содержание   = СодержаниеПроводки;
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			Проводка.СчетКт = Счет68_04Кредит;
			Если Субконто68_4 <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто68_4);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто68_4_2);
			КонецЕсли;
		Иначе
			Проводка.СчетДт = Счет68_04Дебет;
			Если Субконто68_4 <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.Счетдт, Проводка.СубконтоДт, 2, Субконто68_4);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто68_4_2);
			КонецЕсли;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
		КонецЕсли
	КонецЕсли;
	
	Если Сумма99 <> 0 Тогда
		
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = Сумма99;
		Проводка.Содержание   = СодержаниеПроводки;
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 3, Субконто68_4_2);
			Проводка.СчетКт = Счет99;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		Иначе
			Проводка.СчетДт = Счет99;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Субконто68_4_2);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Распределение налога на прибыль по бюджетам
//
Процедура СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШапкиДокумента,СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",      мНачГода);
	Запрос.УстановитьПараметр("НачалоМесяца",    мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",     мКонГраница);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ПрименениеПБУ18", СтруктураШапкиДокумента.ПрименениеПБУ18);
	
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт КАК БазаНалогаЗаГод,
	|	0 КАК Сумма68_04_2,
	|	0 КАК БазаНалогаЗаМесяц,
	|	0 КАК ОНАпоУбыткамПрошлыхМесяцев
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонецМесяца,
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация = &Организация
	|				И Субконто1 В (&ПрибылиИУбытки),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецМесяца, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетНалогаНаПрибыль), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки),
	|			Организация = &Организация
	|				И Субконто1 В (&ПрибылиИУбытки),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоМесяца,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			&ПрименениеПБУ18
	|				И Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультат = Результат.Выгрузить();
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Налог
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецМесяца, , Счет = &Счет, &ВидСубконто, Организация = &Организация И Субконто2 = &ВидПлатежа, КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетНалогаНаПрибыль), ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1,
	|	СУММА(-ХозрасчетныйОбороты.СуммаОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, &ВидСубконто, Организация = &Организация И Субконто2 = &ВидПлатежа, КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетНалогаНаПрибыль), ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1";
	
	СписокСубконто = Новый Массив;
	СписокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	СписокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Запрос.УстановитьПараметр("ВидСубконто",   СписокСубконто);
	Запрос.УстановитьПараметр("ВидПлатежа",    Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	
	Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ", КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетНалогаНаПрибыль),"," И КорСубконто1 = ЗНАЧЕНИЕ(Перечисление.ПрибылиИУбытки.НалогНаПрибыль), КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаСубъектов = Результат.Выгрузить();
	
	БазаНалогаЗаГод = ТаблицаРезультат.Итог("БазаНалогаЗаГод");
	Сумма68_04_2    = ТаблицаРезультат.Итог("Сумма68_04_2");
	
	СтавкаФБ      = СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаФБ;
	СтавкаРФ      = СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаРФ;
	
	Счет68_04Дебет  = ?(СтруктураШапкиДокумента.ПрименениеПБУ18, ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Счет68_04Кредит = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
	СуммаРасчетногоНалога = 0;
	
	// Формирование проводок по расчетам с бюджетом
	// Ситуация, когда БазаНалогаЗаГод = 0 также рассматривается, т.к. в этом случае надо делать сторнирующие проводки
	
	СтрокаТаблицаСубъектов    = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто1", Перечисления.УровниБюджетов.ФедеральныйБюджет));
	СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
	
	ТочностьРасчета = ?(Дата < Дата(2014,01,01), 2, 0); // после 01.01.2014 налог на прибыль округляется до полных рублей
	
	СуммаНалогаТекМесяца    = Окр(БазаНалогаЗаГод * СтавкаФБ, ТочностьРасчета) - СуммаНалогаПрошлыхМесяцев;
	СуммаФедеральногоНалога = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
	СуммаРасчетногоНалога   = СуммаРасчетногоНалога + ?(БазаНалогаЗаГод > 0, СуммаФедеральногоНалога, 0);
	
	Если СуммаФедеральногоНалога <> 0  Тогда
		Проводка = мПроводки.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаФедеральногоНалога;
		Проводка.Содержание   = "Налог на прибыль";
		Проводка.СчетДт = Счет68_04Дебет;
		Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		КонецЕсли;
		Проводка.СчетКт = Счет68_04Кредит;
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
		БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.ФедеральныйБюджет);
	КонецЕсли;
	
	Если СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ <> Неопределено Тогда
		
		Если СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ.Количество() = 1 Тогда  
			СтрокаТаблицаСубъектов = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто1", Перечисления.УровниБюджетов.РегиональныйБюджет));
			СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
			
			СуммаНалогаТекМесяца   = Окр(БазаНалогаЗаГод * СтавкаРФ, ТочностьРасчета) - СуммаНалогаПрошлыхМесяцев;
			СуммаНалогаДляСубъекта = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
			СуммаРасчетногоНалога  = СуммаРасчетногоНалога + ?(БазаНалогаЗаГод > 0, СуммаНалогаДляСубъекта,0);
			
			Если СуммаНалогаДляСубъекта <> 0 Тогда
				Проводка = мПроводки.Добавить();
				Проводка.Период       = Дата;
				Проводка.Организация  = Организация;
				Проводка.Сумма        = СуммаНалогаДляСубъекта;
				Проводка.Содержание   = "Налог на прибыль";
				Проводка.СчетДт = Счет68_04Дебет;
				Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
				КонецЕсли;
				Проводка.СчетКт = Счет68_04Кредит;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
			КонецЕсли;	
			
		Иначе
			
			Для каждого Строка Из СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ Цикл
				Если  Строка.ПриведеннаяСтавка = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицаСубъектов = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто3,Субконто1", Строка.РегистрацияИФНС,Перечисления.УровниБюджетов.РегиональныйБюджет));
				СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
				
				СуммаНалогаТекМесяца   = Окр(БазаНалогаЗаГод * СтавкаРФ, ТочностьРасчета) - СуммаНалогаПрошлыхМесяцев;
				СуммаНалогаДляСубъекта = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
				СуммаРасчетногоНалога  = СуммаРасчетногоНалога + ?(БазаНалогаЗаГод > 0, СуммаНалогаДляСубъекта,0);
				
				Если СуммаНалогаДляСубъекта <> 0 Тогда
					Проводка = мПроводки.Добавить();
					Проводка.Период       = Дата;
					Проводка.Организация  = Организация;
					Проводка.Сумма        = СуммаНалогаДляСубъекта;
					Проводка.Содержание   = "Налог на прибыль";
					Проводка.СчетДт = Счет68_04Дебет;
					Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
						БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
					КонецЕсли;
					Проводка.СчетКт = Счет68_04Кредит;
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
					БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.РегистрацияИФНС);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТаблицаСубъектов = ТаблицаСубъектов.НайтиСтроки(Новый Структура("Субконто1", Перечисления.УровниБюджетов.РегиональныйБюджет));
		СуммаНалогаПрошлыхМесяцев = ?(СтрокаТаблицаСубъектов = Неопределено ИЛИ СтрокаТаблицаСубъектов.Количество() = 0, 0, СтрокаТаблицаСубъектов[0].Налог);
		
		СуммаНалогаТекМесяца   = Окр(БазаНалогаЗаГод * СтавкаРФ, ТочностьРасчета) - СуммаНалогаПрошлыхМесяцев;
		СуммаНалогаДляСубъекта = ?(БазаНалогаЗаГод > 0, СуммаНалогаТекМесяца, -СуммаНалогаПрошлыхМесяцев);
		СуммаРасчетногоНалога  = СуммаРасчетногоНалога + ?(БазаНалогаЗаГод > 0, СуммаНалогаДляСубъекта,0);
		
		Если СуммаНалогаДляСубъекта <> 0 Тогда
			Проводка = мПроводки.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Сумма        = СуммаНалогаДляСубъекта;
			Проводка.Содержание   = "Налог на прибыль";
			Проводка.СчетДт = Счет68_04Дебет;
			Если НЕ СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
			КонецЕсли;
			Проводка.СчетКт = Счет68_04Кредит;
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
			БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
		КонецЕсли;
		
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

// Рассчитываются постоянные налоговые обязательства (активы) и отражаются на
// счетах бухгалтерского учета.
//
Процедура РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Отложенный налоговый актив (обязательство) рассчитывается следующим образом:
	// Определяется сумма постоянных разниц, отраженных на счете Н99.01, и
	// умножается на ставку налога на прибыль.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.СписокОП);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет",         Массив);
	Запрос.УстановитьПараметр("КорСчет",      ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Счет), , Организация В ИЕРАРХИИ (&Организация), Не КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ХозрасчетныйОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты
	|";
	
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	СуммаПостоянныхРазниц = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");
	
	СуммаПНА = Окр(ТаблицаРезультат.Итог("СуммаОборотКт") * мСтавкаНалогаНаПрибыль, 2);
	СуммаПНО = Окр(ТаблицаРезультат.Итог("СуммаОборотДт") * мСтавкаНалогаНаПрибыль, 2);
	Счет99_02_3  = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
	
	Если СуммаПНО <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНО, Счет99_02_3,, "Д", "Постоянное налоговое обязательство");
	КонецЕсли;
	
	Если СуммаПНА <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаПНА, Счет99_02_3,, "К", "Постоянный налоговый актив");
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

// Упорядочиваются данный для передачи их в процедуру,
// которая формирует записи по счету 68.4.
//
Процедура ОтражениеОНАиОНО(ВидАктивовОбязательств,  ВременныеРазницы)
	
	Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	СуммаДт09 = ВременныеРазницы.СуммаДт09;
	СуммаКт09 = ВременныеРазницы.СуммаКт09;
	СуммаДт77 = ВременныеРазницы.СуммаДт77;
	СуммаКт77 = ВременныеРазницы.СуммаКт77;
	СуммаЕНВД = ВременныеРазницы.СуммаЕНВД;
	
	// Образование отложенного налогового обязательства
	Если СуммаДт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт09, Счет09, ВидАктивовОбязательств, "Д", "Признание отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаКт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт09, Счет09, ВидАктивовОбязательств, "К", "Погашение отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;
	
	// Образование отложенного налогового обязательства
	Если СуммаКт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт77, Счет77, ВидАктивовОбязательств, "К", "Признание отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;
	
	// Погашение отложенного налогового обязательства
	Если СуммаДт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт77, Счет77, ВидАктивовОбязательств, "Д", "Погашение отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;
	
КонецПроцедуры

Функция ОдногоЗнака(Число1, Число2) 
	Возврат (Число1 * Число2 >= 0);
КонецФункции

Функция  БольшеПоМодулюИлиРавно(Число1, Число2)
	МодульЧисло1 = ?(Число1 > 0, Число1, - Число1);
	МодульЧисло2 = ?(Число2 > 0, Число2, - Число2);
	
	Возврат (МодульЧисло1 - МодульЧисло2 >= 0);
КонецФункции

// Рассчитывается отложенные налоговый актив по убыткам текущего
// периода и отражается на счете 09.
//
Процедура РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства, СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет99_01",   ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет09",      ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Субконто1",   Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
	Запрос.УстановитьПараметр("Субконто2",   Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК УбытокНУ,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК УбытокБУ,
	|	0 КАК СуммаОстаток09
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет99_01), , Организация В ИЕРАРХИИ (&Организация)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет09), , Организация В ИЕРАРХИИ ( &Организация)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.Субконто1 = &Субконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Месяц,
	|			СчетДт В ИЕРАРХИИ (&Счет09),
	|			,
	|			СчетКт В ИЕРАРХИИ (&Счет09),
	|			,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И СубконтоДт1 = &Субконто2
	|				И СубконтоКт1 = &Субконто1) КАК ХозрасчетныйОборотыДтКт";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат     = Результат.Выгрузить();
	Сумма    = ТаблицаРезультат.Итог("УбытокНУ") * мСтавкаНалогаНаПрибыль - ТаблицаРезультат.Итог("СуммаОстаток09");
	УбытокБУ = ТаблицаРезультат.Итог("УбытокБУ");
	
	СуммаДт77 = 0;
	СуммаКт77 = 0;
	СуммаДт09 = 0;
	СуммаКт09 = 0;
	
	Если Сумма > 0 Тогда
		СуммаДт09 = Сумма;
	Иначе
		СуммаКт09 =- Сумма;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, 0));
	КонецЕсли;
	
КонецПроцедуры // ВременныеРазницыПоУбыткамТекущегоПериода()

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы по конкретному виду активов
// (обязательств).
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы, в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Процедура РассчитатьОНО_ОНА(СтрокаВидАктиваОбязательства, СтруктураШапкиДокумента)
	
	// Порядок расчета:
	// 1. Определяется остаток налогооблагаемых и вычитаемых разниц по виду активов в целом.
	// 2. Исходя из остатка разниц рассчитывается остаток отложенных налоговых активов
	//    и обязательств, который должен быть отражен на счетах 09 и 77 на конец месяца.
	// 3. Определяется сумма отложенных налоговых активов и обязательств, которая отражена
	//    на счетах 09 и 77 на конец месяца.
	// 4. Счета 09 и 77 корректируются на сумму разниц того что отражено на счете и того,
	//    что должно быть по результатам расчета.
	
	// Получить временные разницы, отраженные на плане счетов
	// по данному виду ОНА (ОНО), распределив их на вычитаемые и налогооблагаемые разницы.
	ВедетсяУчетПоПодразделениям = СтрокаВидАктиваОбязательства.Счета[0].УчетПоПодразделениям;
	ОборотыВременныхРазниц = ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, Новый Структура("НачГраница,КонГраница,Организация, КоэффициентЕНВД",мНачГраница,мКонГраница,Организация, КоэффициентЕНВД),СтруктураШапкиДокумента, ВедетсяУчетПоПодразделениям);
	Если  ОборотыВременныхРазниц.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	
	СуммаДт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт09 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаДт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт77 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаЕНВД = Окр(ОборотыВременныхРазниц.ИТог("СуммаЕНВД") * мСтавкаНалогаНаПрибыль, 2);
	
	ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД));
	
КонецПроцедуры

// Рассчитываются отложенные налоговые обязательства и отложенные налоговые активы.
// 
//
Процедура РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Формируется таблица в которой задано соответствие видов 
	// активов (обязательств) счетам налогового учета.
	
	ТаблицаВидовАктивовИОбязательств = ПолучитьТаблицуВидовАктивовИОбязательств();
	КоэффициентЕНВД = 0;
	
	// Рассчитываем отложенные налоговые обязательства и активы и отражаем их.
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода Тогда
			РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента);
		Иначе
			РассчитатьОНО_ОНА(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура РасчетНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров, Отказ, Заголовок) 
	
	// Условный расход (условный доход) по налогу на прибыль
	// рассчитывается следующим образом: определяется сумма
	// бухгалтерской прибыли (убытка) и умножается на ставку
	// налога на прибыль.
	
	// Виды прибылей и убытков, которые учитываются при расчете
	// условного расхода (условного дохода) по налогу на прибыль.
	
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.СписокОП);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	Запрос.УстановитьПараметр("Счет68",         ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт,
	|	Оборотыпо68.СуммаОборот КАК Сумма68
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, , Организация В ИЕРАРХИИ (&Организация), , ) КАК ХозрасчетныйОбороты,
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет68, , Организация В ИЕРАРХИИ (&Организация), , ) КАК Оборотыпо68
	|
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1 В(&ПрибылиИУбытки)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты	
	|";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");
	Сумма68   = ТаблицаРезультат.Итог("Сумма68");
	
	СуммаУсловногоНалога = Окр(СуммаДоходаРасхода * мСтавкаНалогаНаПрибыль,2);
	
	Если Дата < Дата(2014,01,01) Тогда
		Если Не СуммаУсловногоНалога = Сумма68 И СуммаУсловногоНалога - Сумма68 < 0.05 И СуммаУсловногоНалога - Сумма68 > -0.05 Тогда
			СуммаУсловногоНалога = Сумма68;
		КонецЕсли;
		Остаток68 = 0;
	Иначе
		Остаток68   = Сумма68 - СуммаУсловногоНалога;
	КонецЕсли;
	
	Если СуммаУсловногоНалога > 0 Тогда
		Сч99_02_1 = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаУсловногоНалога, Сч99_02_1,, "Д", "Условный расход по налогу на прибыль");
		
	Иначе
		Сч99_02_2 = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаУсловногоНалога, Сч99_02_2,, "К", "Условный доход по налогу на прибыль");
	КонецЕсли;
	
	Если Остаток68 > 0 Тогда
		Сч99_9 = СчетаЗакрытия90_91.Найти("Счет68СписанияОкруглений", "ТипСчета").Счет;
		СформироватьПроводкиПоНалогуНаПрибыль(Остаток68, Сч99_9,, "Д", "Перенос сальдо счета 68.04.2");
	КонецЕсли;
	Если Остаток68 < 0 Тогда
		Сч99_9 = СчетаЗакрытия90_91.Найти("Счет68СписанияОкруглений", "ТипСчета").Счет;
		СформироватьПроводкиПоНалогуНаПрибыль(-Остаток68, Сч99_9,, "К", "Перенос сальдо счета 68.04.2");
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ, Заголовок)  
	
	// Закрытие 99 счетов в БУ и реформация баланса
	
	МассивСчета84_Прибыль=Новый Массив;
	МассивСчета84_Убыток=Новый Массив;
	МассивСчета99=Новый Массив;
	Для Каждого СтрокаДок ИЗ СчетаЗакрытия90_91 Цикл
		Если СокрЛП(СтрокаДок.ТипСчета)="Счет84_Прибыль" Тогда
			МассивСчета84_Прибыль.Добавить(СтрокаДок.Счет);
			
		ИначеЕсли СокрЛП(СтрокаДок.ТипСчета)="Счет84_Убыток" Тогда
			МассивСчета84_Убыток.Добавить(СтрокаДок.Счет);
			
		ИначеЕсли СокрЛП(СтрокаДок.ТипСчета)="Счет99" Тогда
			МассивСчета99.Добавить(СтрокаДок.Счет);
		КонецЕсли;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",     мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",        МассивСчета99);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаДтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) КАК СуммаКтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаДтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) КАК СуммаКтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаДтВР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) КАК СуммаКтВР,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки";
	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Прибыль = 0;
	ПрибыльНУ = 0;
	ПрибыльПР = 0;
	ПрибыльВР = 0;
	СуммаСписанияНУ = 0;
	СуммаСписанияПР = 0;
	СуммаСписанияВР = 0;
	
	Пока Выборка.Следующий() Цикл
		СуммаСписания =  ?(Выборка.СуммаКт = Null, 0, Выборка.СуммаКт) - ?(Выборка.СуммаДт = Null, 0, Выборка.СуммаДт);
		СуммаСписанияНУ = 0;
		СуммаСписанияПР = 0;
		СуммаСписанияВР = 0;
		
		Прибыль = Прибыль + СуммаСписания;
		Если НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН И НЕ СтруктураШапкиДокумента.Предприниматель Тогда
			СуммаСписанияНУ =  ?(Выборка.СуммаКтНУ = Null, 0, Выборка.СуммаКтНУ) - ?(Выборка.СуммаДтНУ = Null, 0, Выборка.СуммаДтНУ);
			ПрибыльНУ = ПрибыльНУ + СуммаСписанияНУ;
			СуммаСписанияПР =  ?(Выборка.СуммаКтПР = Null, 0, Выборка.СуммаКтПР) - ?(Выборка.СуммаДтПР = Null, 0, Выборка.СуммаДтПР);
			СуммаСписанияВР =  ?(Выборка.СуммаКтВр = Null, 0, Выборка.СуммаКтВР) - ?(Выборка.СуммаДтВР = Null, 0, Выборка.СуммаДтВР);
			ПрибыльПР = ПрибыльПР + СуммаСписанияПР;
			ПрибыльВР = ПрибыльВР + СуммаСписанияВР;
		КонецЕсли;
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда Продолжить; КонецЕсли;
		
		Если СуммаСписания = 0 Тогда
			Проводка=мПроводки.Добавить();
			Проводка.Организация=СтруктураШапкиДокумента.Организация;
			Проводка.Период=Дата;
			
			Если СуммаСписанияНУ > 0 Тогда
				Проводка.СчетДт = Выборка.Счет.Ссылка;
				Проводка.СчетКт = МассивСчета84_Прибыль[0];
				
			ИначеЕсли СуммаСписанияНУ < 0 Тогда
				Проводка.СчетДт = МассивСчета84_Убыток[0];
				Проводка.СчетКт = Выборка.Счет.Ссылка;
				СуммаНУ = -СуммаСписанияНУ;
				СуммаПР = -СуммаСписанияПР;
				СуммаВР = -СуммаСписанияВР;
				
			КонецЕсли;
			Проводка.Сумма       = СуммаСписания;
			Проводка.Содержание  = "Реформация баланса";
			
			Для ъ=1 ПО Проводка.СчетДт.ВидыСубконто.Количество() Цикл
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, ъ, Выборка["Субконто"+ъ]);
			КонецЦикла;
			БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение,Выборка.Подразделение );
		КонецЕсли;
		
		Если СуммаСписания > 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = Выборка.Счет.Ссылка;
			Проводка.СчетКт      = МассивСчета84_Прибыль[0];
			Проводка.Сумма       = СуммаСписания;
			Проводка.Содержание  = "Реформация баланса";
			
			Для ъ=1 ПО Проводка.СчетДт.ВидыСубконто.Количество() Цикл
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, ъ, Выборка["Субконто"+ъ]);
			КонецЦикла;
			БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ = СуммаСписанияНУ;
			СуммаПР = СуммаСписанияПР;
			СуммаВР = СуммаСписанияВР;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение,Выборка.Подразделение);
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			
			Проводка = мПроводки.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = МассивСчета84_Убыток[0];
			Проводка.СчетКт      = Выборка.Счет.Ссылка;
			Проводка.Сумма       = - СуммаСписания;
			Проводка.Содержание   = "Реформация баланса";
			
			Для ъ=1 ПО Проводка.СчетКт.ВидыСубконто.Количество() Цикл
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, ъ, Выборка["Субконто"+ъ]);
			КонецЦикла;
			БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка, Выборка.Подразделение, Выборка.Подразделение);
			
			СуммаНУ = - СуммаСписанияНУ;
			СуммаПР = - СуммаСписанияПР;
			СуммаВР = - СуммаСписанияВР;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ,СуммаНУ,СуммаПР, СуммаПр,СуммаВР,СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 
			БухгалтерскийУчетСервер.УстановитьПодразделенияПроводки(Проводка,Выборка.Подразделение , Выборка.Подразделение);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ПрименениеПБУ18 Тогда
		ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводки,СтруктураШапкиДокумента.Дата,КонецМесяца(КонецДня(СтруктураШапкиДокумента.Дата)) + 1, Истина);  
	КонецЕсли;
	
	мПроводки.Записать(Ложь);
	
КонецПроцедуры

Процедура ПересчетОНАиОНО(СтруктураШапкиДокумента, мПроводкиБУ, СтараяДата, НоваяДата, Реформация) 
	
	СтруктураШапкиДокумента.Дата = КонецМесяца(КонецДня(СтруктураШапкиДокумента.Дата)) + 1;
	НоваяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
	
	СтруктураШапкиДокумента.Дата = Дата;
	СтараяСтавка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = ПолучитьТаблицуВидовАктивовИОбязательств();
	ТаблицаОНАОНО =  Новый ТаблицаЗначений;
	ТаблицаОНАОНО.Колонки.Добавить("Счет");
	ТаблицаОНАОНО.Колонки.Добавить("Вид");
	ТаблицаОНАОНО.Колонки.Добавить("Разница");
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма");
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма");
	
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		
		ТаблицаВидаАктивовИОбязательств = ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента.СписокОП, ?(Реформация,НачалоГода(СтруктураШапкиДокумента.ДАта),НачалоМесяца(НоваяДата)), ?(Реформация,мКонГраница,НачалоМесяца(НоваяДата)));  
		Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО,СтараяСумма","Сумма");
		
		Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
			СтрокаТаблицаОНАОНО = ТаблицаОНАОНО.Добавить();
			СтрокаТаблицаОНАОНО.Счет = Строка.СчетОНАОНО;
			СтрокаТаблицаОНАОНО.Вид = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
			СтрокаТаблицаОНАОНО.НоваяСумма = Окр(Строка.Сумма * НоваяСтавка / 100, 2);
			СтрокаТаблицаОНАОНО.СтараяСумма = Строка.СтараяСумма;
			СтрокаТаблицаОНАОНО.Разница = 0;
		КОнецЦикла;
	КонецЦикла;
	
	ТаблицаОНАОНО.Свернуть("Счет,Вид,СтараяСумма","НоваяСумма,Разница");
	
	
	Для каждого Строка Из ТаблицаОНАОНО Цикл
		Строка.Разница = Строка.НоваяСумма - Строка.СтараяСумма;
	КОнецЦикла;
	
	Для Каждого Выборка Из ТаблицаОНАОНО Цикл
		
		Если Выборка.Счет.Код = "09" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ?(Реформация, ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
			Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ?(Реформация, ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию,ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Счет.Код = "77" И Не Выборка.Разница = 0 Тогда
			
			Проводка = мПроводкиБУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Пересчет по ставке " + НоваяСтавка + "%";
			
			Если  Выборка.Разница > 0  Тогда
				Проводка.Сумма        = Выборка.Разница;
				Проводка.СчетКт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетКт, Проводка.СубконтоКт, 1, Выборка.Вид);
				Проводка.СчетДт       = ?(Реформация, ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию,ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
			Иначе
				Проводка.Сумма        = - Выборка.Разница;
				Проводка.СчетДт       = Выборка.Счет;
				БухгалтерскийУчет.УстановитьСубконтоПоСчету(Проводка.СчетДт, Проводка.СубконтоДт, 1, Выборка.Вид);
				Проводка.СчетКт       = ?(Реформация, ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,СтруктураДопПараметров) 
	
	СтавкиНалога = РегистрыСведений.СтавкиНалогаНаПрибыль.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата);
	
	СтавкаФБ=СтавкиНалога.СтавкаФБ;
	СтавкаРФ=СтавкиНалога.СтавкаСубъектРФ;
	
	СтавкиНалогаРФ=Новый ТаблицаЗначений;
	СтавкиНалогаРФ.Колонки.Добавить("РегистрацияИФНС");
	СтавкиНалогаРФ.Колонки.Добавить("Ставка");
	СтавкиНалогаРФ.Колонки.Добавить("ДоляНалоговойБазы");
	
	Строка=СтавкиНалогаРФ.Добавить();
	Строка.РегистрацияИФНС = СтруктураШапкиДокумента.Организация.КодИМНС;                   
	Строка.Ставка = СтавкаРФ*100;
	Строка.ДоляНалоговойБазы = 1;
	
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.Ставка = (СтавкаФБ + СтавкаРФ ) / 100;
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаФБ = СтавкаФБ / 100;
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкаРФ = СтавкаРФ / 100;
	СтруктураДопПараметров.СтавкиНалогаНаПрибыль.СтавкиНалогаРФ = СтавкиНалогаРФ;
	
КонецПроцедуры

Функция СформироватьЗаписи()
	
	Отказ = Ложь;
	Ошибки.Очистить();
	
	Заголовок = ЗаполнениеДокументов.ПредставлениеДокументаПриПроведении(Ссылка);
	
	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецМесяца (Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок);
	
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли; 
	
	Параметр = Ссылка;
	
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	ВыявлениеУчетныхОшибок(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	Если ЭтоНовый() Тогда
		Если Модифицированность() Тогда
			Записать();
		КонецЕсли; 
	КонецЕсли;
	
	мПроводки = Движения.Хозрасчетный;
	
	//ПорядокПодразделенийСообщался = Ложь;
	
	ТаблицаНеЗакрытыхПодразделений=Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
	
	ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Возврат Отказ;	
КонецФункции

Функция ВыполнитьОперацию() Экспорт
	
	ПометкаУдаления= Ложь;
	
	Отказ = СформироватьЗаписи();
	
	Если Отказ Тогда
		ТаблицаОшибок=Ошибки.Выгрузить();
		ТаблицаОшибок.Свернуть("Описание");
		Ошибки.Загрузить(ТаблицаОшибок);
		//		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		СписокОП = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
		Если СписокОП.Количество() = 0 Тогда СписокОП = ""; КонецЕсли;
	Иначе
		СписокОП = "";
	КонецЕсли;
	
	Возврат Ложь;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Движения по регистрам 

Процедура ДвиженияПоРегистрам(СтруктураШД, Отказ, Заголовок)
	СтруктураДопПараметров = Новый Структура;

	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда 
		// ПЕРЕОЦЕНКА
		ПереоценкаВалютныхСредств(СтруктураШД, Отказ, Заголовок);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры Тогда 
		// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
		КорректировкаСтоимостиНоменклатуры(СтруктураШД, СтруктураДопПараметров, Отказ, Заголовок);
		КоррректировкаСтоимостиПОУУ();
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97 Тогда 
		// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда 
		// Расчет долей списания косвенных расходов налогового учета, транспортных расходов и распределения 
		// расходов по видам деятельности
		РасчетДолейСписанияКосвенныхРасходов();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда 
		// РАСЧЕТ СТОИМОСТИ ВЫПУЩЕННОЙ ПРОДУКЦИИ И ОКАЗАННЫХ УСЛУГ
		ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШД, Отказ);
		ЗакрытиеСчетов20_23_25_26(СтруктураШД, СтруктураДопПараметров, Отказ, Заголовок);
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШД,
		СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов, 
		РегистрыСведений.РасчетСписанияКосвенныхРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,СтатьяЗатрат,ВидДеятельностиДляНалоговогоУчетаЗатрат",
		"СуммаЗатрат,СуммаЗатратНУ,СуммаЗатратПР,СуммаЗатратВР,СуммаННП,СуммаННП,СуммаННПНУ,СуммаННППР,СуммаННПВР,СуммаНеННП,СуммаНеННПНУ,СуммаНеННППР,СуммаНеННПВР");
		
		КоррректировкаСтоимостиПОУУ();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда 
		ПолучитьДолиСписанияКосвенныхРасходов(СтруктураШД, Отказ);
		//Закрытие транспортных расходов
		ЗакрытиеСчета44(СтруктураШД, СтруктураДопПараметров, Отказ, Заголовок, Истина);
		
		//Закрытие иных расходов (не транспортных)
		ЗакрытиеСчета44(СтруктураШД, СтруктураДопПараметров, Отказ, Заголовок, Ложь);
		
		ЗаписьВВспомогательныеРегистрыСведений(СтруктураШД, 
		СтруктураДопПараметров.ЗаписьСписанияКосвенныхРасходов, 
		РегистрыСведений.РасчетСписанияКосвенныхРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,СчетУчета,СтатьяЗатрат,ВидДеятельностиДляНалоговогоУчетаЗатрат",
		"СуммаЗатрат,СуммаЗатратНУ,СуммаЗатратПР,СуммаЗатратВР,СуммаННП,СуммаННП,СуммаННПНУ,СуммаННППР,СуммаННПВР,СуммаНеННП,СуммаНеННПНУ,СуммаНеННППР,СуммаНеННПВР");
		
	ИначеЕсли ВидОперации=Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда 
		ЗакрытиеСчета90(СтруктураШД, Отказ, Заголовок);
		Если Месяц(СтруктураШД.Дата)=Месяц(КонецКвартала(СтруктураШД.Дата)) И Дата>='20140101' Тогда
			ОкруглениеНДС(СтруктураШД, Отказ, Заголовок);
		КонецЕсли;
		//		ЗакрытиеСчета91(СтруктураШД, Отказ, Заголовок);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда 
		СписаниеУбытковПрошлыхЛет(СтруктураШД, Отказ, Заголовок);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда 
		СтруктураДопПараметров.Вставить("СтавкиНалогаНаПрибыль", Новый Структура("Ставка, СтавкаФБ, СтавкаРФ, СтавкаМестный,СтавкиНалогаРФ",0,0,0,0,Неопределено));
		ПолучитьСтавкуНалогаНаПрибыль(СтруктураШД,СтруктураДопПараметров);
		мСтавкаНалогаНаПрибыль = СтруктураДопПараметров.СтавкиНалогаНаПрибыль.Ставка;
		СтруктураДопПараметров.Вставить("СтавкаПрибылиТекущегоМесяца", мСтавкаНалогаНаПрибыль);
		СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШД,СтруктураДопПараметров);
		
		Если СтруктураШД.ПрименениеПБУ18 Тогда
			РасчетПостоянныхРазниц(СтруктураШД, Отказ, Заголовок);
			РасчетВременныхРазниц(СтруктураШД, Отказ, Заголовок);
			РасчетНалогаНаПрибыль(СтруктураШД,СтруктураДопПараметров, Отказ, Заголовок);
		КонецЕсли;		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда 
		ПроведениеРеформацииБаланса(СтруктураШД, Отказ, Заголовок);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам Тогда 
		РасчетРезервовПоСомнительнымДолгам(СтруктураШД);		
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ПроверкаПовторовВидовОпераций(Ложь, "Регламентная операция (" + ВидОперации + ")");
	ВыполнитьОперацию();
КонецПроцедуры	

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.РегламентнаяОперация") Тогда
		Возврат;
	КонецЕсли;
	
	Организация   = ОбъектКопирования.Организация;
	Комментарий   = ОбъектКопирования.Комментарий;
	Ответственный = ОбъектКопирования.Ответственный;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

УправлениеДокументамиСервер.ИнициализацияМодуля(ДополнительныеСвойства);