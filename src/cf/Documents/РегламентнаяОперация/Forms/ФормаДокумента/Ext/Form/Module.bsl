&НаКлиенте
Процедура УстановитьВидимость(Открытие=Ложь)
	Элементы.СтраницаОС.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС");
	Элементы.СтраницаНМА.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР");
	Элементы.СтраницаСтатьиЗатрат.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчета97");
	Элементы.СтраницаРасчетРеализованногоНаложения.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетРеализованногоНаложения");
	Элементы.СтраницаСчетаЗакрытия90_91.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91");
	Элементы.СтраницаРеформацияБаланса.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РеформацияБаланса");
	Элементы.СтраницаРасчетПрибыли.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль");
	Элементы.СтраницаПереоценкаВалютныхСредств.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств");
	Элементы.СтраницаРасчетРезервовПоСомнительнымДолгам.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам");
	Элементы.СтраницаОшибки.Видимость=Объект.Ошибки.Количество()>0;
	
	Если Не Открытие Тогда
		Если Объект.ОС.Количество()>0 Тогда Объект.ОС.Очистить(); КонецЕсли; 
		Если Объект.НМА.Количество()>0 Тогда Объект.НМА.Очистить(); КонецЕсли;
		Если Объект.СтатьиЗатрат.Количество()>0 Тогда Объект.СтатьиЗатрат.Очистить(); КонецЕсли;
	КонецЕсли;
Конецпроцедуры

&НаКлиенте
Процедура ЗакрытиеСчетов_90_91_ПриИзменении(Значение, стрТипСчета)
	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", стрТипСчета));
	Если МассивСтрок.Количество()=0 Тогда
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.ТипСчета=стрТипСчета;
	Иначе
		СтрокаТабличнойЧасти=МассивСтрок[0];
	КонецЕсли;
	СтрокаТабличнойЧасти.Счет=Значение;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСчетов_90_91_Инициализация()
	Если Объект.СчетаЗакрытия90_91.Количество()=0 Тогда // счета по умолчанию
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВыручкаЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи_НДС");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи_Акцизы");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счета90";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж");
		СтрокаТабличнойЧасти.ТипСчета="Счет90Сальдо";
		
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходы");
		СтрокаТабличнойЧасти.ТипСчета="Счета91";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы");
		СтрокаТабличнойЧасти.ТипСчета="Счета91";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов");
		СтрокаТабличнойЧасти.ТипСчета="Счет91Сальдо";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД");
		СтрокаТабличнойЧасти.ТипСчета="Счет99";
		
		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению");
		СтрокаТабличнойЧасти.ТипСчета="Счет84_Прибыль";

		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.УбытокПодлежащийПокрытию");
		СтрокаТабличнойЧасти.ТипСчета="Счет84_Убыток";

		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходы");
		СтрокаТабличнойЧасти.ТипСчета="Счет91ДоходыДляПереоценки";

		СтрокаТабличнойЧасти=Объект.СчетаЗакрытия90_91.Добавить();
		СтрокаТабличнойЧасти.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы");
		СтрокаТабличнойЧасти.ТипСчета="Счет91РасходыДляПереоценки";

	КонецЕсли;
	
	Элементы.СчетаЗакрытия90.ОтборСтрок.ТипСчета.Установить("Счета90");
	Элементы.СчетаЗакрытия91.ОтборСтрок.ТипСчета.Установить("Счета91");
	
	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет99"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет99=МассивСтрок[0].Счет;
		Счет99_1=МассивСтрок[0].Счет;
	КонецЕсли;
	
	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет90Сальдо"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет90Сальдо=МассивСтрок[0].Счет;
	КонецЕсли;
	
	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет91Сальдо"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет91Сальдо=МассивСтрок[0].Счет;
	КонецЕсли;
	
	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет84_Прибыль"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет84_Прибыль=МассивСтрок[0].Счет;
	КонецЕсли;

	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет84_Убыток"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет84_Убыток=МассивСтрок[0].Счет;
	КонецЕсли;

	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет68НДС"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет68НДС=МассивСтрок[0].Счет;
	КонецЕсли;
	
	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет68НДСНалоговыйАгент"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет68НДСНалоговыйАгент=МассивСтрок[0].Счет;
	КонецЕсли;

	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет68СписанияОкруглений"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет68СписанияОкруглений=МассивСтрок[0].Счет;
	КонецЕсли;

	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет91ДоходыДляПереоценки"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет91ДоходыДляПереоценки=МассивСтрок[0].Счет;
	КонецЕсли;

	МассивСтрок=Объект.СчетаЗакрытия90_91.НайтиСтроки(Новый Структура("ТипСчета", "Счет91РасходыДляПереоценки"));
	Если МассивСтрок.Количество()>0 Тогда
		Счет91РасходыДляПереоценки=МассивСтрок[0].Счет;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСообщениеОбОшибке(ТекстОшибки)
	Объект.Ошибки.Добавить().Описание = ТекстОшибки;
КонецПроцедуры

&НаСервере
Функция РазностьДатВДнях(Дата1, Дата2)
	мДлинаСуток = 86400; // в секундах
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);
КонецФункции

&НаСервере
Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток, ВспомогательныеДанные, мНачДата, мКонДата)
	
	Если Остаток = 0 Тогда Возврат 0; КонецЕсли;
	
	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);
	
	ПоправкаНаВисокосныйГодВНачалеПериода = 0;
	ПоправкаНаВисокосныйГодВКонцеПериода  = 0;
	Если Лев(Строка(КонецМесяца(ДатаНачалаСписания)), 5) = "29.02" И НЕ Лев(Строка(ДатаНачалаСписания), 5) = "01.02" Тогда
		ПоправкаНаВисокосныйГодВНачалеПериода = -1;
	КонецЕсли;
	Если Лев(Строка(КонецМесяца(ДатаОкончанияСписания)), 5) = "29.02" Тогда
		ПоправкаНаВисокосныйГодВКонцеПериода = -1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;
		
	ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
		КоличествоДней = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания) + 1;
		ЦенаДня = Остаток / КоличествоДней;
		Если КонецМесяца(ДатаОкончанияСписания) = КонецМесяца(ДатаНачалаСписания) Тогда 
			КоличествоДнейТекущегоМесяца = День(ДатаОкончанияСписания); 
			КоличествоДней = КоличествоДнейТекущегоМесяца;
			СуммаСписания  = Остаток;
		Иначе	
			КоличествоДнейТекущегоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1; 
			СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоДней;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
	Иначе
		
		ДоляПоследнегоМесяца = День(ДатаОкончанияСписания) / (День(КонецМесяца(ДатаОкончанияСписания)) + ПоправкаНаВисокосныйГодВКонцеПериода);
		Если КонецМесяца(ДатаНачалаСписания) = КонецМесяца(ДатаОкончанияСписания) Тогда
			ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
			КоличествоМесяцев  = ДоляПоследнегоМесяца;
		Иначе
			ДоляТекущегоМесяца   = (РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1 + ПоправкаНаВисокосныйГодВНачалеПериода) / (День(КонецМесяца(ДатаНачалаСписания)) + ПоправкаНаВисокосныйГодВНачалеПериода);
			КоличествоМесяцевСередины = 0;
			ТекущаяДата1 = ДобавитьМесяц(КонецМесяца(ДатаНачалаСписания), 1);
			Пока КонецМесяца(ДатаОкончанияСписания) >= ТекущаяДата1 Цикл
				КоличествоМесяцевСередины = КоличествоМесяцевСередины + 1;
				ТекущаяДата1               = ДобавитьМесяц(ТекущаяДата1, 1);
			КонецЦикла;
			КоличествоМесяцев = КоличествоМесяцевСередины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
		КонецЕсли;
		
		СуммаСписания = ?(КоличествоМесяцев = 0, 0, Остаток * ДоляТекущегоМесяца / КоличествоМесяцев);
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоМесяцев;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ДоляТекущегоМесяца;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остаток > 0 Тогда
		Возврат Мин(СуммаСписания, Остаток);
	Иначе
		Возврат Макс(СуммаСписания, Остаток);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РасчетРеализованногоНаложения()
	МассивСчетов41=Новый Массив; МассивВидовСубконто41=Новый Массив;
	МассивСчетов42=Новый Массив; МассивВидовСубконто42=Новый Массив;
	МассивСчетов90=Новый Массив; МассивВидовСубконто90=Новый массив;
	
	Для каждого СтрокаКоллекции Из Объект.СчетаРасчетаРеализованногоНаложения Цикл
		Счет41=СтрокаКоллекции.Счет41;
		Если ЗначениеЗаполнено(Счет41) Тогда
			МассивСчетов41.Добавить(Счет41);
			Для каждого СтрокаСубконто Из Счет41.ВидыСубконто Цикл
				ВидСубконто=СтрокаСубконто.ВидСубконто;
				Если МассивВидовСубконто41.Найти(ВидСубконто)=Неопределено Тогда
					МассивВидовСубконто41.Добавить(ВидСубконто);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Счет42=СтрокаКоллекции.Счет42;
		Если ЗначениеЗаполнено(Счет42) Тогда
			МассивСчетов42.Добавить(Счет42);
			Для каждого СтрокаСубконто Из Счет42.ВидыСубконто Цикл
				ВидСубконто=СтрокаСубконто.ВидСубконто;
				Если МассивВидовСубконто42.Найти(ВидСубконто)=Неопределено Тогда
					МассивВидовСубконто42.Добавить(ВидСубконто);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Счет90=СтрокаКоллекции.Счет90;
		Если ЗначениеЗаполнено(Счет90) Тогда
			МассивСчетов90.Добавить(Счет90);
			Для каждого СтрокаСубконто Из Счет90.ВидыСубконто Цикл
				ВидСубконто=СтрокаСубконто.ВидСубконто;
				Если МассивВидовСубконто90.Найти(ВидСубконто)=Неопределено Тогда
					МассивВидовСубконто90.Добавить(ВидСубконто);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("ДатаНачала",	НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКонца",	Новый Граница(КонецМесяца(Объект.Дата), Видграницы.Включая));
	Запрос.УстановитьПараметр("Счет41",	МассивСчетов41);
	Запрос.УстановитьПараметр("Счет42",	МассивСчетов42);
	Запрос.УстановитьПараметр("Счет90",	МассивСчетов90);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	стрУсловияОбороты42="";
	стрУсловияТовароОборот90="";
	МассивСкладов=Объект.СкладыРеализованногоНаложения.Выгрузить("Склад").ВыгрузитьКолонку("Склад");
	МассивНоменклатуры=Объект.НоменклатураРеализованногоНаложения.Выгрузить("Товар").ВыгрузитьКолонку("Товар");
	Если МассивСкладов.Количество()<>0 Тогда
		Запрос.УстановитьПараметр("Склад",	МассивСкладов);
		стрУсловияОбороты42=стрУсловияОбороты42+" И Субконто2 В ИЕРАРХИИ (&Склад)";
		стрУсловияТовароОборот90=стрУсловияТовароОборот90+" И СубконтоКт2 В ИЕРАРХИИ (&Склад)";
	КонецЕсли;	
	
	Если МассивНоменклатуры.Количество()<>0 Тогда
		Запрос.УстановитьПараметр("Номенклатура",	МассивНоменклатуры);
		стрУсловияОбороты42=стрУсловияОбороты42+" И Субконто1 В ИЕРАРХИИ (&Номенклатура)";
		стрУсловияТовароОборот90=стрУсловияТовароОборот90+" И СубконтоКт1 В ИЕРАРХИИ (&Номенклатура)";
	КонецЕсли;	
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Обороты42.Субконто1 КАК Номенклатура,
	|	Обороты42.Субконто2 КАК Склад,
	|	-Обороты42.СуммаНачальныйОстаток КАК СальдоНаНачалоПериода,
	|	Обороты42.СуммаОборотДт КАК ОборотПоДебету,
	|	Обороты42.СуммаОборотКт КАК ОборотПоКредиту,
	|	-Обороты42.СуммаКонечныйОстаток КАК СальдоПредварительное,
	|	0 КАК ТовароОборот,
	|	0 КАК ОстатокТОваровНаКонецПериода
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , Счет В(&Счет42), , Организация = &Организация "+стрУсловияОбороты42+") КАК Обороты42
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТовароОборот90.СубконтоКт1,
	|	ТовароОборот90.СубконтоКт2,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ТовароОборот90.СуммаОборот,
	|	0
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНачала, &ДатаКонца, , СчетДт В(&Счет90), , СчетКт  В(&Счет41), , Организация = &Организация "+стрУсловияТовароОборот90+") КАК ТовароОборот90
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОстатокТовара41.Субконто1,
	|	ОстатокТовара41.Субконто2,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ОстатокТовара41.СуммаОстаток
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКонца, Счет  В(&Счет41), , Организация = &Организация"+стрУсловияОбороты42+") КАК ОстатокТовара41
	|";	
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзДанные.Свернуть("Номенклатура,Склад","СальдоНаНачалоПериода,ОборотПоДебету,ОборотПоКредиту,СальдоПредварительное,ТовароОборот,ОстатокТОваровНаКонецПериода");
	тзДанные.Сортировать("Склад Возр,Номенклатура Возр");
	Возврат тзДанные;
КонецФункции

&НаСервере
Функция ОпределитьНормуРасходовПоВыручке(СтруктураШапкиДокумента, Процент) Экспорт
	
	// Формируем массив счетов учета выручки
	СписокВидовДоходов = Новый Массив;
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОбъектовСтроительства);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравКромеПраваТребования);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейИмущественныхПравПоОбъектамОбслуживающихПроизводств);
	СписокВидовДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейЦенныхБумаг);
	
	мКонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	мНачГода    = НачалоГода(СтруктураШапкиДокумента.Дата);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	// Формируем запрос по счетам учета выручки
	ЗапросПоВыручке = Новый Запрос;
	ЗапросПоВыручке.УстановитьПараметр("НачалоМесяца", мНачГода);
	ЗапросПоВыручке.УстановитьПараметр("КонецМесяца",  мКонГраница);
	ЗапросПоВыручке.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	ЗапросПоВыручке.УстановитьПараметр("Выручка90", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	ЗапросПоВыручке.УстановитьПараметр("Выручка91", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	ЗапросПоВыручке.УстановитьПараметр("ПрочиеДоходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ЗапросПоВыручке.УстановитьПараметр("СписокВидовДоходов", СписокВидовДоходов);
	ЗапросПоВыручке.УстановитьПараметр("НеЕНВД" , Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
	ЗапросПоВыручке.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК ОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца,, Счет В (&Выручка90), , Организация В ИЕРАРХИИ (&Организация), , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца,, Счет В (&Выручка91),
	|			&ПрочиеДоходы,
	|			Организация В ИЕРАРХИИ (&Организация)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&СписокВидовДоходов)
	|				И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат = &НеЕНВД,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|";
	ВыборкаВыручки = ЗапросПоВыручке.Выполнить().Выбрать();
	
	// Собирам выручку
	ВыручкаНУ = 0;
	Пока ВыборкаВыручки.Следующий() Цикл
		ВыручкаНУ = ВыручкаНУ + ?(ВыборкаВыручки.ОборотКт = Null, 0, ВыборкаВыручки.ОборотКт);
	КонецЦикла;
	
	// Определяем норму
	Возврат Окр((ВыручкаНУ * Процент / 100), 2, 1);	
КонецФункции

&НаСервере
Функция ПровестиРасчетРезервовПоСомнительнымДолгам(СтруктураПараметров)
	ДатаКонцаМесяца        = КонецМесяца(СтруктураПараметров.Дата);
	ДатаКонцаМесяцаГраница = Новый Граница(ДатаКонцаМесяца, ВидГраницы.Включая);
	ДатаНачалаГода = НачалоГода(СтруктураПараметров.Дата);
	ДатаКонцаПрошлогоМесяца = ?(Месяц(СтруктураПараметров.Дата) = 1, ДатаНачалаГода, КонецМесяца(НачалоМесяца(СтруктураПараметров.Дата) -1));
	
	МассивВидовСубконто=Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", ДатаКонцаМесяца);
	Запрос.УстановитьПараметр("ДатаКонцаМесяцаГраница", ДатаКонцаМесяцаГраница);
	Запрос.УстановитьПараметр("Счет63",ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);	
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидовСубконто);
	Запрос.УстановитьПараметр("ВидРасчетов", Перечисления.ВидыДвиженийПлатежногоКалендаря.ОжидаемыйПриход);

	// Получение списка дебиторской задолжнности
	Запрос.Текст =" 
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетов.ДоговорКонтрагента КАК Договор,
	|	ТаблицаВсехРасчетов.Документ КАК ДокументДолга,
	|	ЕСТЬNULL(ТаблицаВсехРасчетов.СуммаБухОстаток, 0) КАК ДолгБУ,
	|	ЕСТЬNULL(ТаблицаВсехРасчетов.СуммаБухОстаток, 0) КАК ДолгНУ
	|ПОМЕСТИТЬ ТаблицаВсехРасчетов
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Остатки(&ДатаКонцаМесяцаГраница, Организация = &Организация И ВидРасчетов=&ВидРасчетов) КАК ТаблицаВсехРасчетов
	|ГДЕ
	|	ТаблицаВсехРасчетов.СуммаБухОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетов.Договор КАК Договор,
	|	ТаблицаВсехРасчетов.ДокументДолга КАК ДокументДолга
	|ПОМЕСТИТЬ ТаблицаВсехРасчетовИДолгов
	|ИЗ
	|	ТаблицаВсехРасчетов КАК ТаблицаВсехРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныхРасчетов.Субконто1,
	|	ТаблицаДанныхРасчетов.Субконто2,
	|	ТаблицаДанныхРасчетов.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКонцаМесяцаГраница, Счет = &Счет63, &ВидыСубконто, Организация = &Организация) КАК ТаблицаДанныхРасчетов
	|ГДЕ
	|	НЕ ТаблицаДанныхРасчетов.Субконто3 = НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехРасчетовИДолгов.Контрагент КАК Контрагент,
	|	ТаблицаВсехРасчетовИДолгов.Договор КАК Договор,
	|	ТаблицаВсехРасчетовИДолгов.ДокументДолга КАК ДокументДолга,
	|	ТаблицаВсехРасчетов.ДолгБУ КАК ДолгБу,
	|	ТаблицаВсехРасчетов.ДолгНУ КАК ДолгНУ,
	|	ВЫРАЗИТЬ(ТаблицаВсехРасчетовИДолгов.Договор КАК Справочник.ДоговорыКонтрагентов).ПлатежныйКалендарь_ЗадержкаОплаты КАК СрокОплаты
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаВсехРасчетовИДолгов КАК ТаблицаВсехРасчетовИДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВсехРасчетов КАК ТаблицаВсехРасчетов
	|		ПО ТаблицаВсехРасчетовИДолгов.Контрагент = ТаблицаВсехРасчетов.Контрагент
	|			И ТаблицаВсехРасчетовИДолгов.Договор = ТаблицаВсехРасчетов.Договор
	|			И ТаблицаВсехРасчетовИДолгов.ДокументДолга = ТаблицаВсехРасчетов.ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга,
	|	СУММА(Таблица.ДолгБу) КАК ДолгБУ,
	|	СУММА(Таблица.ДолгНУ) КАК ДолгНУ,
	|	МИНИМУМ(Таблица.СрокОплаты) КАК СрокОплаты
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга
	|";
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат Новый ТаблицаЗначений; КонецЕсли;
	
	ТаблицаДолгов=Результат.Выгрузить();	
	ТаблицаДолгов.Колонки.Добавить("ДатаДолга", Новый ОписаниеТипов("Дата"));
	ТаблицаДолгов.Колонки.Добавить("СрокДолга", Новый ОписаниеТипов("Число"));
	ТаблицаДолгов.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	ТекущийМесяц=СтруктураПараметров.Дата;
	// Добавление к списку дебиторской задолженности дат возникновения сомнительной задолженности и корректировка сумм БУ и НУ по установкам в учетной политике
	Для Каждого СтрокаТз ИЗ ТаблицаДолгов Цикл
		СтрокаТз.ДатаДолга=СтрокаТз.ДокументДолга.Дата;
	КонецЦикла;	
	
	Для Каждого Строка Из ТаблицаДолгов Цикл
		Строка.ДатаДолга = Строка.ДатаДолга + Строка.СрокОплаты * 86400;
		Строка.СрокДолга = Цел((ТекущийМесяц - Строка.ДатаДолга ) / 86400);
		Если Строка.СрокДолга > 90 Тогда
			Строка.Коэффициент = 1;
		ИначеЕсли Строка.СрокДолга >= 45 Тогда
			Строка.Коэффициент = 0.5;
		Иначе
			Строка.Коэффициент = 0;	
		КонецЕсли;
	КонецЦикла;
	
	ЗапросВр=Новый Запрос;
	ЗапросВр.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросВр.УстановитьПараметр("ТаблицаДолгов",  ТаблицаДолгов);
	ЗапросВр.Текст="
	|ВЫБРАТЬ
	|	ТаблицаДолгов.Контрагент КАК Контрагент,
	|	ТаблицаДолгов.Договор КАК Договор,
	|	ТаблицаДолгов.ДокументДолга КАК ДокументДолга,
	|	ТаблицаДолгов.ДатаДолга КАК ДатаДолга,
	|	ТаблицаДолгов.СрокДолга КАК СрокДолга,
	|	ТаблицаДолгов.ДолгБУ КАК ДолгБУ,
	|	ТаблицаДолгов.ДолгНУ КАК ДолгНУ,
	|	ТаблицаДолгов.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ТаблицаДолгов
	|ИЗ
	|	&ТаблицаДолгов КАК ТаблицаДолгов
	|ГДЕ
	|	ТаблицаДолгов.СрокДолга >= 45
	|";	
	ЗапросВр.Выполнить();
	
	// Определение сомнительной задолженности и расчет резервов
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ЗапросВр.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",       СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецМесяца",       ДатаКонцаМесяца);
	Запрос.УстановитьПараметр("ДатаКонцаМесяцаГраница",ДатаКонцаМесяцаГраница);
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца",ДатаКонцаПрошлогоМесяца);
	Запрос.УстановитьПараметр("ДатаНачалаГода",    ДатаНачалаГода);
	Запрос.УстановитьПараметр("ВидыСубконто",      МассивВидовСубконто);
	Запрос.УстановитьПараметр("Счет63",            ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	Запрос.УстановитьПараметр("ДатаОстатков",      ДатаКонцаМесяца);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ТаблицаДолгов.Контрагент КАК Контрагент,
	|	ТаблицаДолгов.Договор КАК Договор,
	|	ТаблицаДолгов.ДокументДолга КАК ДокументДолга,
	|	ТаблицаДолгов.ДатаДолга,
	|	ТаблицаДолгов.СрокДолга,
	|	ТаблицаДолгов.ДолгБУ КАК НачисленоБУ,
	|	ТаблицаДолгов.ДолгНУ КАК НачисленоНУ,
	|	ТаблицаДолгов.ДолгБУ КАК СуммаЗадолженности,
	|	ТаблицаДолгов.Коэффициент
	|ПОМЕСТИТЬ ТаблицаСомнительныхДолгов
	|ИЗ
	|	ТаблицаДолгов КАК ТаблицаДолгов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Договор,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ДокументДолга,
	|	ВЫБОР
	|		КОГДА &ДатаНачалаГода = &КонецПрошлогоМесяца
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	|	КОНЕЦ КАК НачисленоРанееБУ,
	|	ВЫБОР
	|		КОГДА &ДатаНачалаГода = &КонецПрошлогоМесяца
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокКт
	|	КОНЕЦ КАК НачисленоРанееНУ,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК ОстатокРезерваБУНаНачалоГода
	|ПОМЕСТИТЬ ОстаткиРезервов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачалаГода, &ДатаОстатков, , , Счет = &Счет63, &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхРасчетов.Субконто1 КАК Контрагент,
	|	ТаблицаДанныхРасчетов.Субконто2 КАК Договор,
	|	ТаблицаДанныхРасчетов.Субконто3 КАК ДокументДолга,
	|	ТаблицаДанныхРасчетов.СуммаОстатокКт КАК ОстатокРезерваБУ,
	|	ТаблицаДанныхРасчетов.СуммаНУОстатокКт КАК ОстатокРезерваНУ
	|ПОМЕСТИТЬ ТаблицаТекущихРезервов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКонцаМесяцаГраница, Счет = &Счет63, &ВидыСубконто, Организация = &Организация) КАК ТаблицаДанныхРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСомнительныхДолгов.Контрагент,
	|	ТаблицаСомнительныхДолгов.Договор,
	|	ТаблицаСомнительныхДолгов.ДокументДолга,
	|	ТаблицаСомнительныхДолгов.ДатаДолга,
	|	ТаблицаСомнительныхДолгов.СрокДолга,
	|	ТаблицаСомнительныхДолгов.СуммаЗадолженности,
	|	ЕСТЬNULL(ОстаткиРезервов.НачисленоРанееБУ, 0) КАК НачисленоРанееБУ,
	|	ЕСТЬNULL(ОстаткиРезервов.НачисленоРанееНУ, 0) КАК НачисленоРанееНУ,
	|	ЕСТЬNULL(ОстаткиРезервов.ОстатокРезерваБУНаНачалоГода, 0) КАК ОстатокРезерваБУНаНачалоГода,
	|	ЕСТЬNULL(ТаблицаСомнительныхДолгов.НачисленоБУ, 0) КАК НачисленоБУ,
	|	ЕСТЬNULL(ТаблицаСомнительныхДолгов.НачисленоНУ, 0) КАК НачисленоНУ,
	|	ЕСТЬNULL(ТаблицаТекущихРезервов.ОстатокРезерваБУ, 0) КАК ОстатокРезерваБУ,
	|	ЕСТЬNULL(ТаблицаТекущихРезервов.ОстатокРезерваНУ, 0) КАК ОстатокРезерваНУ,
	|	ТаблицаСомнительныхДолгов.Коэффициент
	|ПОМЕСТИТЬ ТаблицаСомнительныхДолговИОстатковРезервов
	|ИЗ
	|	ТаблицаСомнительныхДолгов КАК ТаблицаСомнительныхДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервов КАК ОстаткиРезервов
	|		ПО ТаблицаСомнительныхДолгов.Контрагент = ОстаткиРезервов.Контрагент
	|			И ТаблицаСомнительныхДолгов.Договор = ОстаткиРезервов.Договор
	|			И ТаблицаСомнительныхДолгов.ДокументДолга = ОстаткиРезервов.ДокументДолга
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТекущихРезервов КАК ТаблицаТекущихРезервов
	|		ПО ТаблицаСомнительныхДолгов.Контрагент = ТаблицаТекущихРезервов.Контрагент
	|			И ТаблицаСомнительныхДолгов.Договор = ТаблицаТекущихРезервов.Договор
	|			И ТаблицаСомнительныхДолгов.ДокументДолга = ТаблицаТекущихРезервов.ДокументДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСомнительныхДолговИОстатковРезервов.Контрагент,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.Договор,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.ДокументДолга,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.ДатаДолга,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.СрокДолга,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.СуммаЗадолженности,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент > ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ
	|			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент - ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоБУ,
	|	ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоНУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК НачисленоСНачалаГодаНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ > (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2)))
	|			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоРанееБУ - (ВЫРАЗИТЬ(ТаблицаСомнительныхДолговИОстатковРезервов.НачисленоБУ * ТаблицаСомнительныхДолговИОстатковРезервов.Коэффициент КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВосстановленоБУ,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(&КонецМесяца) = 12
	|				И ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУНаНачалоГода > 0
	|				И ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУ > 0
	|			ТОГДА ТаблицаСомнительныхДолговИОстатковРезервов.ОстатокРезерваБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрисоединеноБУ
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаСомнительныхДолговИОстатковРезервов КАК ТаблицаСомнительныхДолговИОстатковРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.Договор КАК Договор,
	|	Таблица.ДокументДолга КАК ДокументДолга,
	|	МИНИМУМ(Таблица.ДатаДолга) КАК ДатаДолга,
	|	МИНИМУМ(Таблица.СрокДолга) КАК СрокДолга,
	|	СУММА(Таблица.СуммаЗадолженности) КАК СуммаЗадолженности,
	|	СУММА(Таблица.НачисленоРанееБУ) КАК НачисленоРанееБУ,
	|	СУММА(Таблица.НачисленоРанееНУ) КАК НачисленоРанееНУ,
	|	СУММА(Таблица.НачисленоБУ) КАК НачисленоБУ,
	|	СУММА(Таблица.ВосстановленоБУ) КАК ВосстановленоБУ,
	|	СУММА(Таблица.ПрисоединеноБУ) КАК ПрисоединеноБУ,
	|	СУММА(Таблица.НачисленоСНачалаГодаНУ) КАК НачисленоСНачалаГодаНУ
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Контрагент,
	|	Таблица.Договор,
	|	Таблица.ДокументДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ДокументДолга
	|";	
	Результат=Запрос.Выполнить();	
	Если Результат.Пустой() Тогда Возврат Новый ТаблицаЗначений; КонецЕсли;

	ТаблицаРезервов=Результат.Выгрузить();
	ТаблицаРезервов.Колонки.Добавить("НачисленоНУ");
	ТаблицаРезервов.Колонки.Добавить("ВосстановленоНУ");
	
	МожноНачислить=ОпределитьНормуРасходовПоВыручке(СтруктураПараметров, 10);
	Коэффициент=0;
	
	Если НЕ ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ") = 0 Тогда
		Коэффициент = МожноНачислить / ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ");
		Если Коэффициент > 1 Тогда Коэффициент=1; КонецЕсли;
	КонецЕсли;
	
	ИтогНачисленоНУ = Окр(ТаблицаРезервов.Итог("НачисленоСНачалаГодаНУ") * Коэффициент, 2);
	УчетНДС.РаспределитьСуммуПоСтолбцу(ТаблицаРезервов.ВыгрузитьКолонку("НачисленоСНачалаГодаНУ"), ИтогНачисленоНУ, ТаблицаРезервов, "НачисленоСНачалаГодаНУ");

	Для Каждого СтрокаРезерва Из ТаблицаРезервов Цикл
		Разница = СтрокаРезерва.НачисленоСНачалаГодаНУ - СтрокаРезерва.НачисленоРанееНУ;
		Если Разница >= 0 Тогда
			СтрокаРезерва.НачисленоНУ     = Разница;
			СтрокаРезерва.ВосстановленоНУ = 0;
		Иначе	
			СтрокаРезерва.НачисленоНУ     = 0;
			СтрокаРезерва.ВосстановленоНУ = - Разница;
		КонецЕсли;		
	КонецЦикла;
	Возврат ТаблицаРезервов;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ПослеЗаполненияПараметровРасчетаТорговойНаценки(Параметр1, Параметр2) Экспорт
	РасчетТорговойНаценки();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаСервере
Процедура Атрибут_ПриИзменении_Сервер(стрИмя)
	Если стрИмя="ДоговорКонтрагента" Тогда
		//РеквизитФормыВЗначение("Объект")
		
		//ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента
		//Объект.ДоговорКонтрагента
		//СтруктураРеквизитовДокумента=ЦенообразованиеСервер.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Объект);
		//ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, ПредыдущиеЗначенияАтрибутов.ВалютаВзаиморасчетов, ДополнительныеСвойства.ВалютаБухУчета, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, СтруктураРеквизитовДокумента, "Продажа", "Товары", ПредыдущиеЗначенияАтрибутов.ДоговорКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	стрИмя=Элемент.Имя;
	Если стрИмя="ВидОперации" Тогда
		УстановитьВидимость();
	ИначеЕсли стрИмя="Счет90Сальдо" Или  стрИмя="Счет91Сальдо" Или стрИмя="Счет99" Или стрИмя="Счет84_Прибыль" Или стрИмя="Счет84_Убыток" Тогда
		ЗакрытиеСчетов_90_91_ПриИзменении(ЭтотОбъект[стрИмя], стрИмя);
	ИначеЕсли стрИмя="Счет99_1" Тогда
		ЗакрытиеСчетов_90_91_ПриИзменении(ЭтотОбъект[стрИмя], "Счет99");
	ИначеЕсли стрИмя="Счет68НДС" Тогда
		ЗакрытиеСчетов_90_91_ПриИзменении(ЭтотОбъект[стрИмя], "Счет68НДС");
	ИначеЕсли стрИмя="Счет68НДСНалоговыйАгент" Тогда
		ЗакрытиеСчетов_90_91_ПриИзменении(ЭтотОбъект[стрИмя], "Счет68НДСНалоговыйАгент");
	ИначеЕсли стрИмя="Счет68СписанияОкруглений" Тогда
		ЗакрытиеСчетов_90_91_ПриИзменении(ЭтотОбъект[стрИмя], "Счет68СписанияОкруглений");
	ИначеЕсли стрИмя="Счет91ДоходыДляПереоценки" Тогда
		ЗакрытиеСчетов_90_91_ПриИзменении(ЭтотОбъект[стрИмя], "Счет91ДоходыДляПереоценки");
	ИначеЕсли стрИмя="Счет91РасходыДляПереоценки" Тогда
		ЗакрытиеСчетов_90_91_ПриИзменении(ЭтотОбъект[стрИмя], "Счет91РасходыДляПереоценки");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура АтрибутФормы_Регулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.Имя="ПредставлениеПериодаРегистрации" Тогда
		ТекущаяДата=?(Направление > 0, Объект.Дата, НачалоМесяца(Объект.Дата));
		Если Направление = 1 Тогда
			ТекущаяДата = КонецМесяца(ТекущаяДата) + 1;
		ИначеЕсли Направление = -1 Тогда
			ТекущаяДата = НачалоМесяца(ТекущаяДата - 1);
		КонецЕсли;
		ПредставлениеПериодаРегистрации=Формат(Объект.Дата, "ДФ='MMMM yyyy'");
		Объект.Дата=КонецМесяца(ТекущаяДата);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ОС"

&НаКлиенте
Процедура кпОС_ВыполнитьДействие(Команда)
	Если Команда.Имя="кпОС_ЗаполнитьТОП" Тогда
		ЗаполнитьТиповыеОперации("ОС");

	ИначеЕсли Команда.Имя="кпОС_НачислениеАмортизации" И НЕ Объект.Проведен Тогда
		НачислениеАмортизацииОС();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпОС_ПриИзменении(Элемент)
	Если Элемент.Имя="ОСОсновноеСредство" Тогда
		ПолучитьДанныеОС(Элементы.ОС.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеОС(ИдентификаторСтрокиОС)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("УчетВнеоборотныхАктивовСервер");
	Если Модуль=Неопределено Тогда Возврат; КонецЕсли;	 
	
	СтрокаТабличнойЧасти=Объект.ОС.НайтиПоИдентификатору(ИдентификаторСтрокиОС);	
	тзДанные=Модуль.ПолучитьДанныеОС(Объект.Дата,СтрокаТабличнойЧасти.ОсновноеСредство, Объект.Организация);
	ТекущиеПараметры=тзДанные.Найти(СтрокаТабличнойЧасти.ОсновноеСредство, "ОсновноеСредство");
	Если ТекущиеПараметры= Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ТекущиеПараметры);
	СтрокаТабличнойЧасти.ТОП=СтрокаТабличнойЧасти.ПараметрыОтраженияРасходов.ТОП;	
КонецПроцедуры

&НаСервере
Процедура НачислениеАмортизацииОС()
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("УчетВнеоборотныхАктивовСервер");
	Если Модуль=Неопределено Тогда Возврат; КонецЕсли;	 

	ПоддержкаПБУ18=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, ?(Объект.Ссылка.Пустая(), ТекущаяДата(), Объект.Дата)).ПоддержкаПБУ18;

	ТабЗатрат=Модуль.РасчетАмортизации(Объект.Дата, Объект.Организация, , Истина);
	ТабЛизинговыхПлатежей=ПолучитьЛизинговыеПлатежи(ТабЗатрат.ВыгрузитьКолонку("СчетУчетаЛизинговыхПлатежей"), ТабЗатрат.ВыгрузитьКолонку("Лизингодатель"), ТабЗатрат.ВыгрузитьКолонку("ДоговорЛизингодателя"));
	Объект.ОС.Очистить();
	Объект.НМА.Очистить();
	Объект.СтатьиЗатрат.Очистить();
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Контрагент",Неопределено);
	СтруктураПоиска.Вставить("Договор",Неопределено);
	СтруктураПоиска.Вставить("Счет",Неопределено);
	Для Каждого СтрокаКоллекции ИЗ ТабЗатрат  Цикл
		НоваяСтрока=Объект.ОС.Добавить();
		НоваяСтрока.ОсновноеСредство=СтрокаКоллекции.ОсновноеСредство;
		НоваяСтрока.СуммаАмортизации_БУ=СтрокаКоллекции.СуммаАмортизацииБУ;
		НоваяСтрока.СуммаАмортизации_НУ=СтрокаКоллекции.СуммаАмортизацииНУ;
		НоваяСтрока.СуммаАмортизации_ВР=СтрокаКоллекции.СуммаАмортизацииВР;
		НоваяСтрока.СуммаАмортизации_ПР=СтрокаКоллекции.СуммаАмортизацииПР;
		НоваяСтрока.ТОП=СтрокаКоллекции.ПараметрыОтраженияРасходов.ТОП;
		НоваяСтрока.ПараметрыОтраженияРасходов=СтрокаКоллекции.ПараметрыОтраженияРасходов;
		НоваяСтрока.Подразделение=СтрокаКоллекции.Подразделение;
		НоваяСтрока.АмортизационнаяПремияНУ=СтрокаКоллекции.АмортизационнаяПремияНУ;
		Если НЕ ТабЛизинговыхПлатежей=Неопределено Тогда
			СтруктураПоиска.Контрагент=СтрокаКоллекции.Лизингодатель;
			СтруктураПоиска.Договор=СтрокаКоллекции.ДоговорЛизингодателя;
			СтруктураПоиска.Счет=СтрокаКоллекции.СчетУчетаЛизинговыхПлатежей;
			МассвиСтрок=ТабЛизинговыхПлатежей.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаМассива ИЗ МассвиСтрок Цикл
				НоваяСтрока.СуммаЛизинговыхПлатежей_НУ=СтрокаМассива.Сумма-НоваяСтрока.СуммаАмортизации_НУ;
				Если ПоддержкаПБУ18 Тогда
					НоваяСтрока.СуммаЛизинговыхПлатежей_ВР=-НоваяСтрока.СуммаЛизинговыхПлатежей_НУ;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЛизинговыеПлатежи(МассивСчетов, МассивКонтрагентов, МассивДоговоров)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	             |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Договор,
	             |	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
	             |	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
	             |	ХозрасчетныйОборотыДтКт.Регистратор
	             |ИЗ
	             |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	             |			&ДатаНачала,
	             |			&ДатаКонца,
	             |			Регистратор,
	             |			СчетДт В (&СчетДт),
	             |			,
	             |			СчетКт В ИЕРАРХИИ (&СчетКт),
	             |			,
	             |			Организация = &Организация
	             |				И СубконтоДт1 В (&СубконтоДт1)
	             |				И СубконтоДт2 В (&СубконтоДт2)) КАК ХозрасчетныйОборотыДтКт";
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("СчетДт", МассивСчетов);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СубконтоДт1", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СубконтоДт2", МассивДоговоров);
	МассивСчетовДС=Новый Массив;
	МассивСчетовДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	МассивСчетовДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	Запрос.УстановитьПараметр("СчетКт", МассивСчетовДС);
	тзДанные=Запрос.Выполнить().Выгрузить();
	Если тзДанные.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Для Каждого СтрокаТз ИЗ тзДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТз.Регистратор) Тогда Продолжить; КонецЕсли;
			Если ТипЗнч(СтрокаТз.Регистратор)=Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") ИЛИ ТипЗнч(СтрокаТз.Регистратор)=Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
				ИЛИ ТипЗнч(СтрокаТз.Регистратор)=Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") ИЛИ ТипЗнч(СтрокаТз.Регистратор)=Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
				ИЛИ ТипЗнч(СтрокаТз.Регистратор)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") ИЛИ ТипЗнч(СтрокаТз.Регистратор)=Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				Для Каждого СтрокаДок ИЗ СтрокаТз.Регистратор.РасшифровкаПлатежа Цикл
					Если НЕ СтрокаДок.ДоговорКонтрагента=СтрокаТз.Договор Тогда Продолжить; КонецЕсли;
					Если СтрокаДок.СуммаНДС>СтрокаТз.Сумма Тогда Продолжить; КонецЕсли;
					СтрокаТз.Сумма=СтрокаТз.Сумма-СтрокаДок.СуммаНДС;
				КонецЦикла;
			Конецесли;	
		КонецЦикла;	
	Исключение
	КонецПопытки;
	тзДанные.Свернуть("Контрагент,Договор,Счет","Сумма");
	
	Возврат тзДанные;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "НМА"

&НаКлиенте
Процедура кпНМА_ВыполнитьДействие(Команда)
	Если Команда.Имя="кпНМА_ЗаполнитьТОП" Тогда
		ЗаполнитьТиповыеОперации("НМА");
	ИначеЕсли Команда.Имя="кпНМА_НачислениеАмортизации" И НЕ Объект.Проведен Тогда
		НачислениеАмортизацииНМА();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачислениеАмортизацииНМА()
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("УчетВнеоборотныхАктивовСервер");
	Если Модуль=Неопределено Тогда Возврат; КонецЕсли;	 

	СтруктураНаобязательныхПараметров=Новый Структура("МассивСообщений", Новый Массив);
	ТабЗатрат = Модуль.РасчетАмортизацииНМА_НИОКР(Объект.Дата, Объект.Организация, Объект.Ссылка, СтруктураНаобязательныхПараметров);
	Объект.ОС.Очистить();
	Объект.НМА.Очистить();
	Объект.СтатьиЗатрат.Очистить();
	Для Каждого СтрокаКоллекции ИЗ ТабЗатрат Цикл
		НоваяСтрока=Объект.НМА.Добавить();
		НоваяСтрока.НМА=СтрокаКоллекции.НематериальныйАктив;
		НоваяСтрока.СуммаАмортизации_БУ=СтрокаКоллекции.СуммаАмортизации;
		НоваяСтрока.СуммаАмортизации_НУ=СтрокаКоллекции.СуммаАмортизацииНУ;
		НоваяСтрока.СуммаАмортизации_ВР=СтрокаКоллекции.СуммаАмортизацииВР;
		НоваяСтрока.СуммаАмортизации_ПР=СтрокаКоллекции.СуммаАмортизацииПР;
		НоваяСтрока.ТОП=СтрокаКоллекции.ПараметрыОтраженияРасходов.ТОП;
		НоваяСтрока.ПараметрыОтраженияРасходов=СтрокаКоллекции.ПараметрыОтраженияРасходов;
		НоваяСтрока.Подразделение=СтрокаКоллекции.ПодразделениеОрганизации;
	КонецЦикла;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "РБП"

&НаКлиенте
Процедура кпСтатьиЗатрат_ВыполнитьДействие(Команда)
	Если Команда.Имя="кпСтатьиЗатрат_НачислениеАмортизации" И НЕ Объект.Проведен Тогда
		НачислениеАмортизацииРБП();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачислениеАмортизацииРБП()
	мНачДата    = НачалоМесяца(Объект.Дата);
	мКонДата    = КонецМесяца (Объект.Дата);
	мНачГода    = НачалоГода(Объект.Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);

	Объект.ОС.Очистить();
	Объект.НМА.Очистить();
	Объект.СтатьиЗатрат.Очистить();

	ПоддержкаПБУ18=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, ?(Объект.Ссылка.Пустая(), ТекущаяДата(), Объект.Дата)).ПоддержкаПБУ18;

	ВидРБП=Новый Массив;
	ВидРБП.Добавить(Перечисления.ВидыРБП.Прочие);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ОсвоениеПриродныхРесурсов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);

	//Массив=Новый Массив;
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	//Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	
	Массив=Объект.СчетаУчетаРБП.Выгрузить("Счет").ВыгрузитьКолонку("Счет");

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("ВидРБП", ВидРБП);
	Запрос.УстановитьПараметр("Счет", Массив);
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.Субконто1 КАК Субконто1,
	|	ИсточникДанных.Субконто2 КАК Субконто2,
	|	ИсточникДанных.Субконто3 КАК Субконто3,
	|	СУММА(ИсточникДанных.СуммаОстатокДт) КАК Остаток,
	|	СУММА(ИсточникДанных.СуммаНУОстатокДт) КАК ОстатокНУ,
	|	СУММА(ИсточникДанных.СуммаПРОстатокДт) КАК ОстатокПР,
	|	СУММА(ИсточникДанных.СуммаВРОстатокДт) КАК ОстатокВР,
	|	ИсточникДанных.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет),,
	|				Организация = &Организация
	|				И (Субконто1.ВидРБП В (&ВидРБП)
	|				ИЛИ Субконто2.ВидРБП В (&ВидРБП)
	|				ИЛИ Субконто3.ВидРБП В (&ВидРБП))) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Субконто1,
	|	ИсточникДанных.Субконто2,
	|	ИсточникДанных.Субконто3,
	|	ИсточникДанных.Счет,
	|	ИсточникДанных.Подразделение
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РБП=Неопределено;
		Если ТипЗнч(Выборка.Субконто1)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			РБП=Выборка.Субконто1;
		ИначеЕсли ТипЗнч(Выборка.Субконто2)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			РБП=Выборка.Субконто2;
		ИначеЕсли ТипЗнч(Выборка.Субконто3)=Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
			РБП=Выборка.Субконто3;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РБП) Тогда Продолжить; КонецЕсли;

		Если РБП.СпособПризнанияРасходов=Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
			Продолжить;
		КонецЕсли;      
		ПараметрыОтраженияРасходов=РБП.ПараметрыОтраженияРасходов;
		Если Не ЗначениеЗаполнено(РБП) Тогда Продолжить; КонецЕсли;

		Отказ=Ложь; //Счет=Выборка.Счет;
		Если Не ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
			Отказ = Истина;
			ДобавитьСообщениеОбОшибке("Не заполнена дата начала списания для статьи расходов будущих периодов """+ РБП + """. 
			|Укажите дату начала списания (меню - ""Предприятие"" - ""Доходы и расходы"" - ""Расходы будущих перидодов"").");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
			Отказ = Истина;
			ДобавитьСообщениеОбОшибке("Не заполнена дата окончания списания для статьи расходов будущих периодов """+ РБП + """. 
			|Укажите дату окончания списания (меню - ""Предприятие"" - ""Доходы и расходы"" - ""Расходы будущих перидодов"").");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыОтраженияРасходов) Тогда
			Отказ = Истина;
			ДобавитьСообщениеОбОшибке("Не заполнен ""Параметры отражения расходов"" для статьи расходов будущих периодов """+ РБП + "");
		КонецЕсли;
		
		Если Отказ Тогда Продолжить; КонецЕсли;
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(РБП.ДатаНачалаСписания > мНачДата, РБП.ДатаНачалаСписания, мНачДата);
		
		Если ЗначениеЗаполнено(РБП.ДатаНачалаСписанияНУ) Тогда
			ДатаНачалаНУ 	= ?(РБП.ДатаНачалаСписанияНУ > мНачДата, РБП.ДатаНачалаСписанияНУ, мНачДата);
			СуммаСписания   = СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.Остаток,   ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
			СуммаСписанияНУ = СуммаСписанияЗаМесяц(РБП, ДатаНачалаНУ, РБП.ДатаОкончанияСписанияНУ, Выборка.ОстатокНУ, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
			Если ПоддержкаПБУ18 Тогда
				СуммаСписанияПР = СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокПР, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
				СуммаСписанияВР = СуммаСписания-СуммаСписанияНУ;
			КонецЕсли;
		Иначе
			СуммаСписания   = СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.Остаток,   ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
			СуммаСписанияНУ = СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокНУ, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
			СуммаСписанияПР = СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокПР, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
			СуммаСписанияВР = СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Выборка.ОстатокВР, ВспомогательныеДанныеРасчета, мНачДата, мКонДата );
		КонецЕсли;
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=Объект.СтатьиЗатрат.Добавить();
		НоваяСтрока.РБП=РБП;
		НоваяСтрока.Подразделение=Выборка.Подразделение;
		НоваяСтрока.Субконто1=Выборка.Субконто1;
		НоваяСтрока.Субконто2=Выборка.Субконто2;
		НоваяСтрока.Субконто3=Выборка.Субконто3;
		НоваяСтрока.СуммаАмортизации_БУ=СуммаСписания;
		НоваяСтрока.СуммаАмортизации_НУ=СуммаСписанияНУ;
		НоваяСтрока.СуммаАмортизации_ВР=СуммаСписанияВР;
		НоваяСтрока.СуммаАмортизации_ПР=СуммаСписанияПР;
		НоваяСтрока.ПараметрыОтраженияРасходов=ПараметрыОтраженияРасходов;
		НоваяСтрока.ТОП=ПараметрыОтраженияРасходов.ТОП;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Расчет реализованного наложения"

&НаКлиенте
Процедура кпРасчетРеализованногоНаложения_ВыполнитьДействие(Команда)
	Если Команда.Имя="кпРасчетРеализованногоНаложения_ЗаполнитьТОП" Тогда
		ЗаполнитьТиповыеОперации("НМА");
	ИначеЕсли Команда.Имя="кпРасчетРеализованногоНаложения_РасчетНаценки" И НЕ Объект.Проведен Тогда
		ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаПараметровРасчетаТорговойНаценки",, ЭтотОбъект,,,, Новый ОписаниеОповещения("ОбработчикОповещения_ПослеЗаполненияПараметровРасчетаТорговойНаценки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры	
	
&НаСервере
Процедура РасчетТорговойНаценки()
	тзДанные=РасчетРеализованногоНаложения();
	Объект.РасчетРеализованногоНаложения.Очистить();
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		НоваяСтрока=Объект.РасчетРеализованногоНаложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		текИтог=НоваяСтрока.ТовароОборот+НоваяСтрока.ОстатокТоваровНаКонецПериода;
		НоваяСтрока.Итого=текИтог; текИтог=?(текИтог=0, 1, текИтог);
		НоваяСтрока.СреднийПроцентНаценки=НоваяСтрока.СальдоПредварительное/текИтог*100;
		Если НоваяСтрока.ОстатокТоваровНаКонецПериода=0 Тогда 
			НоваяСтрока.РеализованноеНаложение=НоваяСтрока.СальдоПредварительное;
		Иначе	
			НоваяСтрока.РеализованноеНаложение=НоваяСтрока.СреднийПроцентНаценки*НоваяСтрока.ТовароОборот/100;
		КонецЕсли;
		НоваяСтрока.СуммаНаценкиНаОстаткеТовара=НоваяСтрока.СальдоПредварительное-НоваяСтрока.РеализованноеНаложение;
	КонецЦикла;
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Расчет резервов по сомнительным долгам"

&НаКлиенте
Процедура кпРасчетРезервовПоСомнительнымДолгам_ВыполнитьДействие(Команда)
	Если Команда.Имя="кпРасчетРезервовПоСомнительнымДолгам_Рассчитать" Тогда
		РассчитатьРезервыПоСомнительнымДолгам();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьРезервыПоСомнительнымДолгам()
	Объект.РасчетРезервовПоСомнительнымДолгам.Очистить();
	СтруктураДляРасчета=Новый Структура;
	СтруктураДляРасчета.Вставить("Дата", Объект.Дата);
	СтруктураДляРасчета.Вставить("Организация", Объект.Организация);
	ТаблицаДолгов=ПровестиРасчетРезервовПоСомнительнымДолгам(СтруктураДляРасчета);
	Для Каждого СтрокаТаблицыДолгов Из ТаблицаДолгов Цикл
		Если СтрокаТаблицыДолгов.НачисленоРанееБУ = 0 И СтрокаТаблицыДолгов.НачисленоРанееНУ = 0 
		   И СтрокаТаблицыДолгов.НачисленоБУ = 0      И СтрокаТаблицыДолгов.НачисленоНУ = 0 
		   И СтрокаТаблицыДолгов.ВосстановленоБУ = 0  И СтрокаТаблицыДолгов.ВосстановленоНУ = 0 
		   И СтрокаТаблицыДолгов.ПрисоединеноБУ = 0   Тогда
		   		Продолжить;
		КонецЕсли;		
		СтрокаЗаписи=Объект.РасчетРезервовПоСомнительнымДолгам.Добавить();
		СтрокаЗаписи.Контрагент 		= СтрокаТаблицыДолгов.Контрагент;
		СтрокаЗаписи.ДоговорКонтрагента = СтрокаТаблицыДолгов.Договор;
		СтрокаЗаписи.ДокументРасчетовСКонтрагентом 	= СтрокаТаблицыДолгов.ДокументДолга;
		СтрокаЗаписи.ДатаВозникновенияЗадолженности = СтрокаТаблицыДолгов.ДатаДолга;
		СтрокаЗаписи.СрокЗадолженности 	= СтрокаТаблицыДолгов.СрокДолга;
		СтрокаЗаписи.СуммаЗадолженности = СтрокаТаблицыДолгов.СуммаЗадолженности;
		СтрокаЗаписи.НачисленоРанееБУ 	= СтрокаТаблицыДолгов.НачисленоРанееБУ;
		СтрокаЗаписи.НачисленоРанееНУ 	= СтрокаТаблицыДолгов.НачисленоРанееНУ;
		СтрокаЗаписи.НачисленоБУ 		= СтрокаТаблицыДолгов.НачисленоБУ;
		СтрокаЗаписи.НачисленоНУ 		= СтрокаТаблицыДолгов.НачисленоНУ;
		СтрокаЗаписи.ВосстановленоБУ 	= СтрокаТаблицыДолгов.ВосстановленоБУ;
		СтрокаЗаписи.ВосстановленоНУ 	= СтрокаТаблицыДолгов.ВосстановленоНУ;
		СтрокаЗаписи.ПрисоединеноБУ 	= СтрокаТаблицыДолгов.ПрисоединеноБУ;
		СтрокаЗаписи.НачисленоСНачалаГодаНУ = СтрокаТаблицыДолгов.НачисленоСНачалаГодаНУ;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ОбщегоНазначенияСервер.ПроверкаРасширения("lab33_УчетВнеоборотныхАктивов") Тогда
		Элементы.СтраницаОС.Видимость=Ложь;
		Элементы.СтраницаНМА.Видимость=Ложь;
	КонецЕсли;
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата=?(ЗначениеЗаполнено(Объект.Дата), КонецМесяца(Объект.Дата), КонецМесяца(ТекущаяДата()));
		Объект.Ошибки.Очистить();
	КонецЕсли;

	ПредставлениеПериодаРегистрации=Формат(Объект.Дата, "ДФ='MMMM yyyy'");
	УстановитьВидимость(Истина);

	Если Объект.СчетаУчетаРБП.Количество()=0 Тогда
		НоваяСтрока=Объект.СчетаУчетаРБП.Добавить();
		НоваяСтрока.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников");
		НоваяСтрока=Объект.СчетаУчетаРБП.Добавить();
		НоваяСтрока.Счет=ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасходыБудущихПериодов");
	КонецЕсли;	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры