&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="ПроверкаКоличестваТоваров" Тогда
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Товары", Объект.Материалы);
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ОткрытьФорму("ОбщаяФорма.ОстаткиТМЦ", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		УправлениеДиалогамиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма, Объект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовФормы()
	Элементы.НДСвСтоимостиТоваров.Видимость=УчетнаяПолитика.СложныйУчетНДС;
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Вложения"

&НаКлиенте
Процедура тпВложение_ВыполнитьДействие(Команда)
	Если Команда.Имя="ВложенияПредпросмотр" Тогда
		Элементы.ВложенияПредпросмотр.Пометка=НЕ Элементы.ВложенияПредпросмотр.Пометка;
		Элементы.ВложенияГруппаПросмотр.Видимость=Элементы.ВложенияПредпросмотр.Пометка;
		Если Элементы.ВложенияПредпросмотр.Пометка Тогда
			тпВложения_ОбработчикОжидания();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура тпВложения_ПриАктивизацииСтроки(Элемент)
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ Элементы.ВложенияПредпросмотр.Пометка Тогда Возврат; КонецЕсли;
	
	тпВложения_ОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ПредпросмотПоказать(СтруктураДанных)
	Модуль=ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияКлиент");
	Модуль.ПредпросмотрПоказать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаСервере
Процедура тпВложения_ПредпросмотСоздать(СтруктураДанных)
	Модуль=ОбщегоНазначенияСервер.ОбщийМодуль("ВложенияСервер");
	Модуль.ПредпросмотрСоздать(ЭтаФорма, СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура тпВложения_ОбработчикОжидания()
	Если Элементы.тпВложения.ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура("ИмяФайла,Каталог,ТипID,ID,ВариантХранения,ИндексПиктограммы");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Элементы.тпВложения.ТекущиеДанные);
	СтруктураДанных.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДанных.Вставить("ИмяРеквизита", ОбщегоНазначенияКлиент.ОбщийМодуль("ВложенияОбщий").ИмяРеквизитаПоИндексуПиктограммы(СтруктураДанных.ИндексПиктограммы));

	Если Элементы.Найти("ВложениеПросмотр"+СтруктураДанных.ИмяРеквизита)=Неопределено Тогда	
		тпВложения_ПредпросмотСоздать(СтруктураДанных);
	КонецЕсли;

	тпВложения_ПредпросмотПоказать(СтруктураДанных);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ОбработчикОповещения_ОбработкаПодбора(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	тпТабличноеПоле_Изменить(Параметр1);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВводШтрихкода(Штрихкод, ПараметрыДоп) Экспорт
	Если Не ПустаяСтрока(Штрихкод) Тогда 
		СтруктураВозврата=ПодключаемоеОборудованиеСервер.ОбработатьВведенныйШтрихкод(Штрихкод);
		Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
			тпМатериалы_Добавить(СтруктураВозврата.Номенклатура, СтруктураВозврата.ХарактеристикаНоменклатуры, СтруктураВозврата.СерияНоменклатуры, СтруктураВозврата.Качество, СтруктураВозврата.ЕдиницаИзмерения, СтруктураВозврата.Количество);
		Иначе
			ПоказатьПредупреждение(,"штрих код не найден!", 10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Материалы_Заполнить(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли; 
	
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		Объект.Материалы.Очистить();
	КонецЕсли;

	тпМатериалы_Заполнить(Параметр2.Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоОстаткам(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ОбработчикОповещения_ЗаполнитьПоОстаткам_Севвер(Параметр1);
КонецПроцедуры

&НаСервере
Процедура ОбработчикОповещения_ЗаполнитьПоОстаткам_Севвер(стрДанные)
	Если ПустаяСтрока(стрДанные) Тогда Возврат; КонецЕсли;
	тзДанные=УниверсальныеМеханизмыСервер.ЗначениеИзСтрокиXML(стрДанные);
	тзДанные.Колонки.КоличествоУчет.Имя="Количество";

	Если тзДанные.Количество()=0 Тогда
		Сообщить( "Нет остатков для заполнения!");
		Возврат; 
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	Для каждого СтрокаКоллекции Из тзДанные Цикл
		Если Не ЗначениеЗаполнено(СтрокаКоллекции.Номенклатура) Тогда Продолжить; КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект.Материалы.Добавить(), СтрокаКоллекции);
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Стандартные (универсальные) процедуры\функции

&НаСервере
Процедура ВыполнитьСортировкуТабличнойЧасти(ИмяТабличнойЧасти, стрСортировка) Экспорт
	СортировкаТабличнойЧастиСервер.Сортировать(ИмяТабличнойЧасти, стрСортировка, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТиповыеОперации(стрТабличнаяЧасть)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[стрТабличнаяЧасть] Цикл
		УправлениеТиповымиОперациямиСервер.УстановитьТиповуюОперацию(СтрокаТабличнойЧасти, ДокументОбъект, ЭтаФорма, стрТабличнаяЧасть);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Произвольные алгоритмы

&НаКлиенте
Процедура ВыполнитьАлгоритмКлиент(Команда)
	ВыполнитьАлгоритм(Команда.Имя, "АлгоритмВыполнения");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмСервер(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьАлгоритмСерверБезКонтекста(Алгоритм, СтруктураКоманды)
	Выполнить(Алгоритм);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм_ОбработчикОповещения(Параметр1, Параметр2=Неопределено) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ВыполнитьАлгоритм(ЭтаФорма.ТекущийЭлемент.Имя, "АлгоритмОповещения", Параметр1, Параметр2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(стрКоманда, стрИмяАлгоритма, Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	Если НЕ ТипЗнч(ПроизвольныеАлгоритмы)=Тип("Структура") Тогда Возврат; КонецЕсли;

	СтруктураКоманды=Неопределено; ПроизвольныеАлгоритмы.Свойство(стрКоманда, СтруктураКоманды);
	Если НЕ ТипЗнч(СтруктураКоманды)=Тип("Структура") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураКоманды[стрИмяАлгоритма] Цикл
		Если СтрокаКоллекции.Ключ="НаКлиенте" Тогда
			Выполнить(СтрокаКоллекции.Значение);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервере" Тогда
			ВыполнитьАлгоритмСервер(СтрокаКоллекции.Значение, СтруктураКоманды);
		ИначеЕсли СтрокаКоллекции.Ключ="НаСервереБезКонтекста" Тогда
			ВыполнитьАлгоритмСерверБезКонтекста(СтрокаКоллекции.Значение, СтруктураКоманды);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаСервере
Процедура Атрибут_ПриИзменении_Сервер(стрИмя)
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Дата" Тогда
		УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
		ВидимостьЭлементовФормы();		

	ИначеЕсли Элемент.Имя="Организация" Тогда
		УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);

	ИначеЕсли Элемент.Имя="Склад" Тогда
		ВидимостьЭлементовФормы();

	ИначеЕсли Элемент.Имя="ИнвентаризацияТМЦ" Тогда
		Если ЗначениеЗаполнено(Объект.ИнвентаризацияТМЦ) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация=Объект.ИнвентаризацияТМЦ.Организация;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад=Объект.ИнвентаризацияТМЦ.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.НачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	Если Элемент.Имя="ИнвентаризацияТМЦ" Тогда
		Если Не ЗначениеЗаполнено(Объект.Склад) Тогда Возврат; КонецЕсли;
		СтандартнаяОбработка=Ложь;

		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Склад", Объект.Склад));
		ОткрытьФорму("Документ.ИнвентаризацияТМЦ.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	СобытияЭлементовФормыКлиент.Нажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Материалы"

&НаКлиенте
Процедура кпМатериалы_ВыполнитьДействие(Команда)
	стрТабличнаяЧасть="Материалы"; стрКоманда=стрЗаменить(Команда.Имя, "кп"+стрТабличнаяЧасть+"_", "");
		
	Если стрКоманда="Сортировать" Тогда
		СортировкаТабличнойЧастиКлиент.Открыть(стрТабличнаяЧасть, ЭтаФорма, Объект);

	ИначеЕсли стрКоманда="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ВводШтрихкода", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод товара");

	ИначеЕсли стрКоманда="Подбор" Тогда
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		//ПараметрыФормы.Вставить("ТипЦен", ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли"));
		ПараметрыФормы.Свойство("ПоказыватьЦены", Ложь);

		УправлениеДокументамиКлиент.ПодборТоваров(ЭтаФорма, ПараметрыФормы);

	ИначеЕсли стрКоманда="ЗаполнитьПоОстаткам" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоОстаткам", ЭтотОбъект);
		
		ПараметрыФормы=УправлениеДиалогамиСервер.СтруктураПодбора();
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);

		ОткрытьФорму("Документ.ИнвентаризацияТМЦ.Форма.ПараметрыЗаполнения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли стрКоманда="кпМатериалы_ЗаполнитьПоДокументуОснованию" Тогда
		Если НЕ Объект.Материалы.Количество()=0 Тогда
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_Материалы_Заполнить", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена, 20, КодВозвратаДиалога.Отмена, "Внимание", КодВозвратаДиалога.Отмена);
		Иначе
			тпМатериалы_Заполнить(стрКоманда);
		КонецЕсли;

	ИначеЕсли стрКоманда="ЗаполнитьПоСериям" Тогда
		тпМатериалы_Заполнить(стрКоманда);

	ИначеЕсли стрКоманда="ЗаполнитьТОП" Тогда
		ЗаполнитьТиповыеОперации(стрТабличнаяЧасть);		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Ошибка"); Возврат; КонецЕсли; 

	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "СерииНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "Качество", ПредопределенноеЗначение("Справочник.Качество.Новый"));

	стрТабличнаяЧасть=СтрЗаменить(Элементы.ТабличныеЧасти.ТекущаяСтраница.Имя, "Страница", "");

	СтруктураПоиска=Новый Структура("Номенклатура");
	Если стрТабличнаяЧасть="Материалы" Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураПоиска.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров);

	РезультатПоиска=Объект[стрТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		УправлениеКоллекциямиЗначенийСервер.СвойствоСтруктуры(СтруктураПараметров, "ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Если ЗначениеЗаполнено(СтруктураПараметров.ЕдиницаИзмерения) Тогда
			СтруктураПараметров.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные=Объект[стрТабличнаяЧасть].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
		ТекущиеДанные.Количество=ТекущиеДанные.Количество+СтруктураПараметров.Количество;
	КонецЕсли;
	
	//Установим добавленную\найденную строку текущей
	Элементы[стрТабличнаяЧасть].ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним модуль при изменении номенклатуры(если новая строка) или количества(если строка найдена)
	Если стрТабличнаяЧасть="Материалы" Тогда
		тпМатериалы_Колонка_ПриИзменении(?(РезультатПоиска.Количество()=0, Элементы.МатериалыНоменклатура, Элементы.МатериалыКоличество));
	КонецЕсли;

	Элементы[стрТабличнаяЧасть].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура тпМатериалы_Добавить(Номенклатура, Характеристика=Неопределено, Серия=Неопределено, Качество=Неопределено, Единица=Неопределено, Количество=1)
	Если Характеристика=Неопределено Тогда
		Характеристика=ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	Если Серия=Неопределено Тогда
		Серия=ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;	
	Если Качество=Неопределено Тогда
		Качество=ПредопределенноеЗначение("Справочник.Качество.Новый");
	КонецЕсли;
	Если Единица=Неопределено Тогда
		Единица=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
	КонецЕсли; 
	ТипЦен=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли");

	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("СерияНоменклатуры", Серия);
	
	РезультатПоиска=Объект.Материалы.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество()=0 Тогда
		ТекущиеДанные=Объект.Материалы.Добавить();
		ТекущиеДанные.Номенклатура=Номенклатура;
		ТекущиеДанные.ЕдиницаИзмерения=Единица;
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Единица, "Коэффициент");
	Иначе
		ТекущиеДанные=РезультатПоиска[0];
	КонецЕсли;
	ТекущиеДанные.Количество=ТекущиеДанные.Количество+Количество;

	Элементы.Материалы.Обновить();
	Элементы.Материалы.ТекущаяСтрока=ТекущиеДанные.ПолучитьИдентификатор();

	//Выполним действия "при изменении"
	СтруктураПараметров=Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Количество");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	тпТабличноеПоле_Изменить(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура тпМатериалы_ПриАктивизацииСтроки(Элемент)
	//ТекущиеДанные=Элементы.Материалы.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура тпМатериалы_ПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпМатериалы_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ID=Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпМатериалы_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура тпМатериалы_ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
КонецПроцедуры

&НаКлиенте
Процедура тпМатериалы_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "Материалы", "");
	ТекущиеДанные=Элементы.Материалы.ТекущиеДанные;

	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		Если ТекущиеДанные.Количество=0 Тогда ТекущиеДанные.Количество=1; КонецЕсли;

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Или стрКолонка="СерияНоменклатуры" Тогда
		Если НЕ ТекущиеДанные[стрКолонка].Владелец=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные[стрКолонка], "Владелец");
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
			ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		ТекущиеДанные.Коэффициент=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура тпМатериалы_Заполнить(стрКоманда)
	ДокументОбъект=РеквизитФормыВЗначение("Объект");
	
	Если стрКоманда="ЗаполнитьПоСериям" Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСерии(ДокументОбъект, "Материалы");

	ИначеЕсли стрКоманда="ЗаполнитьПоДокументуОснованию" Тогда
		Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			ДокументОбъект.ЗаполнитьПоВнутреннемуЗаказу(Объект.ДокументОснование, ?(Объект.Ссылка.Пустая(), КонецДня(Объект.Дата), Объект.Дата));

		ИначеЕсли ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СтруктПараметры=Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", Новый Структура("Товары", "Склад"));
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "Склад");
			//СтруктПараметры.Вставить("ВсеСклады", Истина);
			
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
			//Запрос.УстановитьПараметр("ВыбСклад", Объект.Склад);
			Запрос.Текст="
			|ВЫБРАТЬ
			|	Номенклатура 				КАК Номенклатура,
			|	ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СерияНоменклатуры 			КАК СерияНоменклатуры,
			|	ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
			|	Сумма(Количество)			КАК Количество,
			|	Сумма(КоличествоМест)		КАК КоличествоМест,
			|	ЕдиницаИзмеренияМест 		КАК ЕдиницаИзмеренияМест,
			|	Коэффициент 				КАК Коэффициент,
			|	Склад 						КАК Склад
			|ИЗ 
			|	Документ.ПоступлениеТоваровУслуг.Товары
			|ГДЕ 
			|	Ссылка = &Ссылка 
			//"+?(ВыбСклад <> "ВсеСклады"," И Склад = &ВыбСклад", "")+"
			|СГРУППИРОВАТЬ ПО Номенклатура,
			|	ХарактеристикаНоменклатуры,
			|	СерияНоменклатуры,
			|	ЕдиницаИзмерения,
			|	ЕдиницаИзмеренияМест,
			|	Коэффициент,
			|	Склад
			|";
			Выборка=Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() цикл
				НоваяСтрока=ДокументОбъект.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Качество=Справочники.Качество.Новый;
				//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Сделки"

&НаКлиенте
Процедура кпСделки_ВыполнитьДействие(Команда)
	тпСделки_Подбор("Заполнить", ЭтаФорма);
КонецПроцедуры
 
&НаКлиенте
Процедура тпСделки_Колонка_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь; тпСделки_Подбор("Изменить", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура тпСделки_Подбор(стрКоманда, Владелец)
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Склад", Объект.Склад);
	СтруктураПараметров.Вставить("МножественныйВыбор", стрКоманда="Заполнить");

	УправлениеЗаказамиКлиент.ВыполнитьДействие(СтруктураПараметров, Владелец, стрКоманда);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий дополнительных реквизитов табличных частей

&НаКлиенте
Процедура тзРеквизитыТЧ_ПриИзменении_Клиент(Элемент)
	тзРеквизитыТЧ_ПриИзменении_Сервер(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура тзРеквизитыТЧ_ПриИзменении_Сервер(стрИмя)
	МетаконфигураторСервер.ДопРеквизиты_ПриИзменении(стрИмя, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УчетнаяПолитика=ОбщегоНазначенияСервер.ПараметрыУчетнойПолитики(Объект.Организация, Объект.Дата);
	ВидимостьЭлементовФормы();

	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры