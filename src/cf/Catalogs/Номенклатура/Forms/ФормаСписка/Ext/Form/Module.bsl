&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	стрИмя=?(ТипЗнч(Команда)=Тип("Строка"), Команда, Команда.Имя);

	Если стрИмя="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработкаОповещения_ВвестиШтрихкод", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод");

	ИначеЕсли стрИмя="Остатки_Обновить" Тогда
		дзОстатки_Сформировать(Элементы.ДинамическийСписок.ТекущаяСтрока);

		ЭлементыКоллекции=дзОстатки.ПолучитьЭлементы();
		Для каждого СтрокаКоллекции Из ЭлементыКоллекции Цикл
			Элементы.дзОстатки.Развернуть(СтрокаКоллекции.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	ИначеЕсли стрИмя="Остатки_НастройкаРазворотов" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработкаОповещения_НастройкаГруппировок", ЭтотОбъект);
		
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Группировки разворота");
		ПараметрыФормы.Вставить("Пометка", Истина);
		ПараметрыФормы.Вставить("Картинка", Ложь);
		ПараметрыФормы.Вставить("ИзменятьСоставСтрок", Ложь);
		ПараметрыФормы.Вставить("СписокЗначений", спОстаткиГруппировки.Скопировать());
		
		ОткрытьФорму("ОбщаяФорма.СписокЗначений", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ДинамическиеСпискиКлиент.ВыполнитьДействие(Команда.Имя, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработатьВведенныйШтрихкод(Штрихкод)
	мПрефиксВесовогоТовара=Константы.ПрефиксВесовогоТовара.Получить();
	мДлинаКодаВесовогоТовара=Константы.ДлинаКодаВесовогоТовара.Получить();

	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("Номенклатура");
	СтруктураВозврата.Вставить("ХарактеристикаНоменклатуры");
	СтруктураВозврата.Вставить("СерияНоменклатуры");
	СтруктураВозврата.Вставить("Качество");
	СтруктураВозврата.Вставить("ЕдиницаИзмерения");
	СтруктураВозврата.Вставить("Количество");	

	стрТипШК="EAN13";
	МодульМенеджерОборудованияВызовСервера=ОбщегоНазначенияСервер.ОбщийМодуль("МенеджерОборудованияВызовСервера");
	Если НЕ МодульМенеджерОборудованияВызовСервера=Неопределено Тогда
		стрТипШК=МодульМенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	КонецЕсли;	

	Если ЗначениеЗаполнено(мПрефиксВесовогоТовара) И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара) И стрТипШК="EAN13" Тогда
		 //*** И Лев(Штрихкод, 2) = "2" + мПрефиксВесовогоТовара Тогда
		КодТовара        = Сред(Штрихкод, 3, мДлинаКодаВесовогоТовара);
		КоличествоТовара = Сред(Штрихкод, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", Справочники.Качество.ПустаяСсылка());
		Запрос.УстановитьПараметр("КачествоНовый",        Справочники.Качество.Новый);
		Запрос.УстановитьПараметр("Код",                  Число(КодТовара));
		Запрос.УстановитьПараметр("Коэф", ?(Лев(Штрихкод, 2) = "2" + мПрефиксВесовогоТовара, 1000, 1));
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегКВТ.Номенклатура                         КАК Номенклатура,
		|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|    " + КоличествоТовара + " / &Коэф            КАК Количество,
		|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегКВТ.Качество
		|    КОНЕЦ                                       КАК Качество
		|ИЗ
		|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		|ГДЕ
		|    РегКВТ.Код = &Код
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Номенклатура,
	|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    РегШК.Качество                   КАК Качество
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Штрихкод = &Штрихкод
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		Иначе // Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура")
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураВозврата;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля УНИВЕРСАЛЬНЫЕ

&НаКлиенте
Процедура тпТабличноеПоле_Изменить(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("Ошибка") Тогда ПоказатьПредупреждение(, СтруктураПараметров.Ошибка, 10, "Внимание"); Возврат; КонецЕсли; 
	Если СтруктураПараметров.Свойство("Номенклатура") Тогда Элементы.ДинамическийСписок.ТекущаяСтрока=СтруктураПараметров.Номенклатура; КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработкаОповещения_ВвестиШтрихкод(Штрихкод, ПараметрыДоп) Экспорт
	Если ПустаяСтрока(Штрихкод) Тогда Возврат; КонецЕсли;

	СтруктураВозврата=ОбработатьВведенныйШтрихкод(Штрихкод);
	Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
		//*** ОповеститьОВыборе(СтруктураВозврата);
	Иначе
		ПоказатьПредупреждение(,"штрих код не найден!", 10);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения_НастройкаГруппировок(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	спОстаткиГруппировки.Очистить();
	стрПредставление="Организация\Склад";
	Если ТипЗнч(Параметр1)=Тип("СписокЗначений") Тогда
		стрПредставление="";
		Для каждого СтрокаКоллекции Из Параметр1 Цикл
			спОстаткиГруппировки.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление, СтрокаКоллекции.Пометка, СтрокаКоллекции.Картинка);
			Если СтрокаКоллекции.Пометка Тогда
				стрПредставление=стрПредставление+?(ПустаяСтрока(стрПредставление), "", "\")+СтрокаКоллекции.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы.дзОстаткиПредставление.Заголовок=стрПредставление;

	ВыполнитьДействие(Команды.Остатки_Обновить);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Остатки"

&НаСервере
Процедура дзОстатки_Сформировать(Номенклатура)
	дзДанные=Новый ДеревоЗначений;
	дзОстатки.ПолучитьЭлементы().Очистить();

	СхемаКомпоновкиДанных=Обработки.ПодборТовара.ПолучитьМакет("РасшифровкаОстатков");

	МассивГруппировок=Новый Массив;
	Для каждого СтрокаКоллекции Из спОстаткиГруппировки Цикл
		Если НЕ СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли; 
		МассивГруппировок.Добавить(СтрокаКоллекции.Значение);
	КонецЦикла;

	Если НЕ МассивГруппировок.Количество()=0 Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ЭлементСтруктуры=КомпоновщикНастроек.Настройки;
		Для каждого СтрокаКоллекции Из МассивГруппировок Цикл
			ЭлементСтруктуры=ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

			ПолеГруппировки=ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование=Истина;
			ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных(СтрокаКоллекции);			
		КонецЦикла; 
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);

	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(дзДанные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Если дзДанные.Строки.Количество()=0 Тогда Возврат; КонецЕсли;
	
	дзОстатки_Заполнить(дзДанные.Строки, дзОстатки.ПолучитьЭлементы(), МассивГруппировок, 0);
	
	МассивСтрок=дзОстатки.ПолучитьЭлементы();
	Если МассивСтрок.Количество()=1 Тогда Возврат; КонецЕсли;
	МассивСтрок[МассивСтрок.Количество()-1].Представление="Итого:";
КонецПроцедуры

&НаКлиенте
Процедура дзОстатки_Обновить()
	ОтключитьОбработчикОжидания("дзОстатки_Обновить");
	дзОстатки_Сформировать(Элементы.ДинамическийСписок.ТекущаяСтрока);

	//Развернуть все уровни дерева
	МассивСтрок=дзОстатки.ПолучитьЭлементы();
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Элементы.дзОстатки.Развернуть(СтрокаКоллекции.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	
КонецПроцедуры
 
&НаСервере
Процедура дзОстатки_Заполнить(Источник, Приемник, МассивГруппировок, ИндексМассиваИзмерений)
	Для каждого СтрокаКоллекции Из Источник Цикл
		НоваяСтрока=Приемник.Добавить();
		НоваяСтрока.Представление=СтрокаКоллекции[МассивГруппировок[ИндексМассиваИзмерений]];
		НоваяСтрока.Количество=СтрокаКоллекции.Количество;

		дзОстатки_Заполнить(СтрокаКоллекции.Строки, Приемник[Источник.Индекс(СтрокаКоллекции)].ПолучитьЭлементы(), МассивГруппировок, ИндексМассиваИзмерений+1);		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура дзОстатки_Инициализация()
	СхемаКомпоновкиДанных=Обработки.ПодборТовара.ПолучитьМакет("РасшифровкаОстатков");
	URLСхемы=ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	спОстаткиГруппировки.Добавить("Организация", "Организация", Истина);
	спОстаткиГруппировки.Добавить("Склад", "Склад", Истина);
	спОстаткиГруппировки.Добавить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры", Ложь);
	спОстаткиГруппировки.Добавить("СерияНоменклатуры", "Серия номенклатуры", Ложь);
	спОстаткиГруппировки.Добавить("Качество", "Качество");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Динамический список"

&НаКлиенте
Процедура ДинамическийСписок_ПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("дзОстатки_Обновить", 0.1, Истина);
	Если НЕ Элементы.ДинамическийСписок.ТекущаяСтрока=Неопределено Тогда
		КартинкаТовара=ПолучитьНавигационнуюСсылку(Элементы.ДинамическийСписок.ТекущаяСтрока, "ОсновноеИзображение");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписок_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДинамическиеСпискиКлиент.Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписок_ВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Если ТипЗнч(Значение)=Тип("Массив") Тогда
		ОповеститьОВыборе(Значение[0]);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДинамическиеСпискиСервер.НастройкаПоПравилам(ДинамическийСписок, ЭтаФорма);
	Элементы.ДинамическийСписок.РежимВыбора=Параметры.РежимВыбора;
	дзОстатки_Инициализация();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДинамическиеСпискиКлиент.ПриОткрытии(Отказ, ДинамическийСписок, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
КонецПроцедуры
