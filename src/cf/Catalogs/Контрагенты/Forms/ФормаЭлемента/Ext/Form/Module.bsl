&НаКлиенте
Перем мФормироватьНаименованиеПолноеАвтоматически;

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="УстановитьОсновнойДоговор" Тогда
		дзДоговоры_УстановитьОсновнойДоговор();

	ИначеЕсли Команда.Имя="ГенарацииКПП" Тогда
		ЗаполнитьКППпоИНН();
		
	ИначеЕсли Команда.Имя="ЗаполнитьПоИНН" Тогда
		УправлениеДиалогамиКлиент.ПроверкаИНН(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКППпоИНН()
	// Если КПП формируется стандартным образом по ИНН, то для КПП берутся первые 4 цифры ИНН + 01001, например:
	// ИНН 7712563009 КПП 771201001
		
	// если не указано ИНН или заполнено КПП то прерываем выполнение операции
	Если СтрДлина(Объект.ИНН) < 4 Тогда Возврат; КонецЕсли;
	
	ПревыеСимволыИНН = Лев(Объект.ИНН, 4);
	НовоеЗначениеКПП = ПревыеСимволыИНН + "01001";
	
	// если новое значение КПП и старое значение КПП совпадают, то прерываем выполнение операции
	Если (НовоеЗначениеКПП = Объект.КПП) Тогда Возврат; КонецЕсли;
	
	// если безусловно нужно поменять - меняем
	Если НЕ ЗначениеЗаполнено(Объект.КПП) Тогда
		Объект.КПП = НовоеЗначениеКПП;	Возврат;
	КонецЕсли;

	Оповещение=Новый ОписаниеОповещения("ПодтвердитьИзменениеКПП", ЭтотОбъект, НовоеЗначениеКПП);
	ПоказатьВопрос(Оповещение, "Изменить КПП автоматически на """ + НовоеЗначениеКПП + """?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИзменениеКПП(Ответ, Параметр) Экспорт
	Если Ответ=КодВозвратаДиалога.Да Тогда
		Объект.КПП=Параметр;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИНН()
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда Возврат; КонецЕсли;

	ДлинаИНН=СтрДлина(Объект.ИНН); ТекстСообщения="";

	Если Объект.ЮрФизЛицо=ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Если НЕ ДлинаИНН=12 Тогда
			ТекстСообщения="""ИНН"" физического лица 12 символов!";
		КонецЕсли;
	Иначе
		Если НЕ ДлинаИНН=10 Тогда
			ТекстСообщения="""ИНН"" юридического лица 10 символов!";
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Длина ""ИНН"" не соответствует требованиям: " + ТекстСообщения,,"Объект.ИНН");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()
	Если ПустаяСтрока(Объект.НаименованиеПолное) ИЛИ Объект.НаименованиеПолное=ПолучитьПолноеНаименованиеСОКОПФ() Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолноеНаименованиеСОКОПФ()
	КовычкаОткрывающая=?(Лев (Объект.Наименование, 1)="""", "", """");
	КовычкаЗакрывающая=?(Прав(Объект.Наименование, 1)="""", "", """");
	Возврат СокрЛП(Объект.ОКОПФ)+" "+КовычкаОткрывающая+Объект.Наименование+КовычкаЗакрывающая;
КонецФункции

&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()
	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное=?(ЗначениеЗаполнено(Объект.ОКОПФ), ПолучитьПолноеНаименованиеСОКОПФ(), Объект.Наименование);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНадежность()
	НадежностьПоставщика="Надежность не указана";
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.НадежностьПоставщиков.СрезПоследних(, Контрагент = &Ссылка) КАК ИсточникДанных
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Надежность) Тогда
			НадежностьПоставщика=Выборка.Надежность;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыДинамическихСписков()
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(дсДоговоры, "Владелец", Объект.Ссылка);
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(дсКонтактнаяИнформация, "Объект", Объект.Ссылка);
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(дсБанковскиеСчета, "Владелец", Объект.Ссылка);
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(дсКонтактныеЛица, "Владелец", Объект.Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Наименование" Тогда
		Если ПустаяСтрока(Объект.Наименование) Тогда
			СформироватьНаименованиеПолноеАвтоматически();
		КонецЕсли;

	ИначеЕсли Элемент.Имя="НаименованиеПолное" Тогда
		УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();		
		
	ИначеЕсли Элемент.Имя="ИНН" Тогда
		ПроверитьИНН(); ЗаполнитьКППпоИНН();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="НадежностьПоставщика" Тогда
		ПараметрыФормы=Новый Структура("Отбор", Новый Структура("Контрагент", Объект.Ссылка)); СтандартнаяОбработка=Ложь;
		ОткрытьФорму("РегистрСведений.НадежностьПоставщиков.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Контактная информация"

&НаСервере
Процедура дсКонтактныеЛица_УстановитьОтбор()
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(дсКонтактныеЛица, "Владелец", Объект.Ссылка);
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Договоры"

&НаКлиенте
Процедура дзДоговоры_УстановитьОсновнойДоговор()
	ТекущиеДанные=Элементы.дсДогвооры.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда Возврат; КонецЕсли;
	Если ТекущиеДанные.ЭтоГруппа Тогда Возврат; КонецЕсли;
	Объект.ОсновнойДоговорКонтрагента=ТекущиеДанные.Ссылка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий днамического списка "Контактная информация"

&НаКлиенте
Процедура дсКонтактнаяИнформация_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	КонтактнаяИнформацияКлиент.ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр, ЭтаФорма, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура дсКонтактнаяИнформация_ПередНачаломИзменения(Элемент, Отказ)
	КонтактнаяИнформацияКлиент.ПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПрочитатьНадежность();
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборыДинамическихСписков();
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	Если НЕ ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		ТекущийОбъект.ГоловнойКонтрагент=ТекущийОбъект.Ссылка;
	КонецЕсли;
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьОтборыДинамическихСписков();
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
