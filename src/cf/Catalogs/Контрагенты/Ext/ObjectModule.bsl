Перем мОснование;

Процедура ИнициализацияПечатныхФормКонтрагента(дзСсылка) Экспорт
	дзСсылка.Строки.Очистить();	
	Для Каждого Строка Из ПараметрыГрупповойПечати Цикл
		Если Строка.ПечатнаяФорма.Ссылка.Пустая() Тогда Продолжить; КонецЕсли; 
		ОбъектТипДанных=Строка.ПечатнаяФорма.Родитель.Родитель;

		НайденнаяСтрока=дзСсылка.Строки.Найти(ОбъектТипДанных, "Объект");
		Если НайденнаяСтрока=Неопределено Тогда
			НайденнаяСтрока=дзСсылка.Строки.Добавить();
			НайденнаяСтрока.Объект=ОбъектТипДанных;
		КонецЕсли;
		НоваяСтрока=НайденнаяСтрока.Строки.Добавить();
		НоваяСтрока.Объект=Строка.ПечатнаяФорма;
		НоваяСтрока.КоличествоКопий=Строка.КоличествоКопий;
	КонецЦикла; 
КонецПроцедуры

Функция ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(ГоловнойКонтрагент) Экспорт	
	Запрос=Новый Запрос;	
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент
	|";	
	Возврат Запрос.Выполнить();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модуля

Процедура ПриКопировании(ОбъектКопирования)
	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		ЭтотОбъект.ОсновнойДоговорКонтрагента = Неопределено;
		ЭтотОбъект.ОсновнойБанковскийСчет     = Неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Организации") Тогда
		Наименование           = Основание.Наименование;
		ЮрФизЛицо              = Основание.ЮрФизЛицо;
		НаименованиеПолное     = Основание.НаименованиеПолное;
		ОсновнойБанковскийСчет = Основание.ОсновнойБанковскийСчет;
		ИНН                    = Основание.ИНН;
		КПП                    = Основание.КПП;
		КодПоОКПО              = Основание.КодПоОКПО;
		мОснование             = Основание;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(ОсновнойВидДеятельности) И ВидыДеятельности.Найти(ОсновнойВидДеятельности, "ВидДеятельности") = Неопределено Тогда
		ОсновнойВидДеятельности=Справочники.ВидыДеятельностиКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда Возврат; КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) И ГоловнойКонтрагент <> Ссылка Тогда
		Если ЗначениеЗаполнено(ГоловнойКонтрагент.ГоловнойКонтрагент) И ГоловнойКонтрагент.ГоловнойКонтрагент <> ГоловнойКонтрагент Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Контрагент "+СокрЛП(ГоловнойКонтрагент)+" не может быть выбран головным, 
			|так как для него уже был назначен головной контрагент "+СокрЛП(ГоловнойКонтрагент.ГоловнойКонтрагент)+"!");
			Отказ = Истина; Возврат;
		Иначе
			// надо проверить, что если указываем головного контрагента, то этот элемент уже не был установлен
			// в качестве головного у другого контрагента.
			ВыборкаПоГоловномуКонтрагенту = ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(Ссылка).Выбрать();
			Если ВыборкаПоГоловномуКонтрагенту.Количество() <> 0 Тогда
				СообщениеОНевозможностиЗаписи = "Контрагент "+СокрЛП(ЭтотОбъект)+" не может иметь головного контрагента!
				|Этот контрагент уже установлен головным для: ";
				Пока ВыборкаПоГоловномуКонтрагенту.Следующий() Цикл
					СообщениеОНевозможностиЗаписи = СообщениеОНевозможностиЗаписи + Символы.ПС + СокрЛП(ВыборкаПоГоловномуКонтрагенту.Контрагент);
				КонецЦикла;
				
				ОбщегоНазначения.СообщитьОбОшибке(СообщениеОНевозможностиЗаписи);
				Отказ = Истина; Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мОснование) Тогда
		НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Контрагент = Ссылка;
		ЗаписьРегистра.ВидСвязи   = Перечисления.ВидыСобственныхКонтрагентов.Организация;
		ЗаписьРегистра.Объект     = мОснование;
		НаборЗаписей.Записать(Ложь);
		мОснование = "";
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операторы основной программы

