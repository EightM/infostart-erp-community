&НаКлиенте
Процедура УстановитьДоступностьВидимостьЭлементовФормы()
	Если ВидТипаЦен="Базовый" Тогда
		Элементы.БазовыйТипЦен.Видимость = Ложь;
		Элементы.БазовыйТипЦен.АвтоОтметкаНезаполненного = Ложь;
		Элементы.БазовыйТипЦен.ОтметкаНезаполненного = Ложь;
		Элементы.ПроцентСкидкиНаценки.Видимость = Ложь;
		Элементы.СпособРасчетаЦены.Видимость = Ложь;
		Элементы.СпособРасчетаЦены.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СпособРасчетаЦены.ОтметкаНезаполненного = Ложь;

	ИначеЕсли ВидТипаЦен = "Расчетный" ИЛИ ВидТипаЦен = "Динамический" Тогда
		Элементы.БазовыйТипЦен.Видимость = Истина;
		Элементы.БазовыйТипЦен.АвтоОтметкаНезаполненного = Истина;
		Элементы.СпособРасчетаЦены.Видимость = Истина;
		Элементы.СпособРасчетаЦены.АвтоОтметкаНезаполненного = Истина;

		Если Объект.СпособРасчетаЦены=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон") Тогда
			Элементы.ПроцентСкидкиНаценки.Видимость=Ложь;
		ИначеЕсли Объект.СпособРасчетаЦены=ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип") Тогда
			Элементы.ПроцентСкидкиНаценки.Видимость=Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписи()
	Если ВидТипаЦен="Базовый" Тогда
		Элементы.ИнфРассчитывается.Заголовок="Цены назначаются и хранятся для каждой позиции номенклатуры."+Символы.ПС+"На основании цен этого типа могут рассчитываться цены других типов";
	ИначеЕсли ВидТипаЦен="Динамический" Тогда
		Элементы.ИнфРассчитывается.Заголовок="Цены рассчитываются автоматически от цен базового типа";
	ИначеЕсли ВидТипаЦен="Расчетный" Тогда
		Элементы.ИнфРассчитывается.Заголовок="Цены назначаются и хранятся для каждой позиции номенклатуры";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидТипаЦенПоПризнакам()
	Если Объект.Рассчитывается Тогда
		ВидТипаЦен="Динамический";
	Иначе
		ВидТипаЦен=?(ЗначениеЗаполнено(Объект.БазовыйТипЦен), "Расчетный", "Базовый");
	КонецЕсли;
	УстановитьНадписи();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="ВидТипаЦен" Тогда
		УстановитьДоступностьВидимостьЭлементовФормы();
		УстановитьНадписи();

	ИначеЕсли Элемент.Имя="СпособРасчетаЦены" Тогда	
		Если Объект.СпособРасчетаЦены = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон") Тогда
			ПроцентСкидкиНаценки=0;
		КонецЕсли;
		УстановитьДоступностьВидимостьЭлементовФормы();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВалютаЦены=МодульВалютногоУчета.ПолучитьВалюту("Упр");
	КонецЕсли; 
	ЗаполнитьВидТипаЦенПоПризнакам();
	УстановитьДоступностьВидимостьЭлементовФормы();	
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СобытияФормыСервер.ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);	
КонецПроцедуры
 
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры