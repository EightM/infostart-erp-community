&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="ОчиститьКартинку" Тогда
		АдресКартинки="";		
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокКлавиш()
	Элементы.Клавиша.СписокВыбора.Добавить("", "");
	Для ъ=65 По 90 Цикл
		Элементы.Клавиша.СписокВыбора.Добавить(Символ(ъ));	 
	КонецЦикла;
	Для ъ=1 По 10 Цикл
		Элементы.Клавиша.СписокВыбора.Добавить("F"+СокрЛП(ъ));	 
	КонецЦикла;
	Для ъ=0 По 9 Цикл
		Элементы.Клавиша.СписокВыбора.Добавить("_"+СокрЛП(ъ));	 
	КонецЦикла;
	Для ъ=0 По 9 Цикл
		Элементы.Клавиша.СписокВыбора.Добавить("Num"+СокрЛП(ъ));	 
	КонецЦикла;
	Элементы.Клавиша.СписокВыбора.Добавить("NumDecimal", Клавиша.NumDecimal);
	Элементы.Клавиша.СписокВыбора.Добавить("NumAdd", Клавиша.NumAdd);
	Элементы.Клавиша.СписокВыбора.Добавить("NumDivide", Клавиша.NumDivide);
	Элементы.Клавиша.СписокВыбора.Добавить("NumMultiply", Клавиша.NumMultiply);
	Элементы.Клавиша.СписокВыбора.Добавить("NumSubtract", Клавиша.NumSubtract);
	
	Элементы.Клавиша.СписокВыбора.Добавить("Break", Клавиша.Break);
	Элементы.Клавиша.СписокВыбора.Добавить("BackSpace", Клавиша.BackSpace);
	Элементы.Клавиша.СписокВыбора.Добавить("Space", Клавиша.Space);	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Свойства"

&НаСервереБезКонтекста
Функция СписокЗначенийИзСтроки(ИсходнаяСтрока)
	ИсходнаяСтрока=стрЗаменить(ИсходнаяСтрока, ":", Символы.ПС);

	спДанные=Новый СписокЗначений;
	Для ъ=1 По СтрЧислоСтрок(ИсходнаяСтрока) Цикл	
		СтрокаШаблон=СтрПолучитьСтроку(ИсходнаяСтрока, ъ);		
		МассивДанных=СтрРазделить(СтрокаШаблон, ",");
		спДанные.Добавить(МассивДанных[0], ?(МассивДанных.Количество()=1, МассивДанных[0], МассивДанных[1]));	
	КонецЦикла; 

	Возврат спДанные;
КонецФункции

&НаСервере
Функция дзСвоства_Добавить(ТекущийОбъект, Ветка, Идентификатор, Представление, Значение, СписокВыбора=Неопределено)
	НоваяСтрока=Ветка.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Идентификатор=Идентификатор;
	НоваяСтрока.Представление=Представление;
	НоваяСтрока.Значение=Значение;
	НоваяСтрока.СписокВыбора=СписокВыбора;
	
	Если НЕ ТекущийОбъект=Неопределено И НЕ ПустаяСтрока(Идентификатор) Тогда
		СтрокаТабичнойЧасти=ТекущийОбъект.Свойства.Найти(Идентификатор, "Идентификатор");
		Если НЕ СтрокаТабичнойЧасти=Неопределено Тогда
			Если НЕ СтрокаТабичнойЧасти.Значение=Неопределено Тогда
				НоваяСтрока.Значение=СтрокаТабичнойЧасти.Значение;
			Иначе
				НоваяСтрока.Значение=СтрокаТабичнойЧасти.Хранилище.Получить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат НоваяСтрока;
КонецФункции

&НаСервере
Процедура дзСвоства_Инициализация(ТекущийОбъект=Неопределено)
	Если НЕ дзСвойства.ПолучитьЭлементы().Количество()=0 Тогда Возврат; КонецЕсли;

	Ветка=дзСвоства_Добавить(ТекущийОбъект, дзСвойства, "", "Основные", "");	
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ТолькоВоВсехДействиях", "Только во всех действиях", Ложь);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "КнопкаПоУмолчанию", "Кнопка по умолчанию", Ложь);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ПропускатьПриВводе", "Пропускать при вводе", "Авто", СписокЗначенийИзСтроки("Авто,Авто:Да,Да:Нет,Нет"));
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "АктивизироватьПоУмолчанию", "Активизировать по умолчанию", Ложь);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "Пометка", "Пометка", Ложь);

	Ветка=дзСвоства_Добавить(ТекущийОбъект, дзСвойства, "", "Использование", "");
	спДанные=Новый СписокЗначений;
	спДанные.Добавить("Авто", СокрЛП(ОтображениеПодсказки.Авто));
	спДанные.Добавить("Всплывающая", СокрЛП(ОтображениеПодсказки.Всплывающая));
	спДанные.Добавить("Кнопка", СокрЛП(ОтображениеПодсказки.Кнопка));
	спДанные.Добавить("Нет", СокрЛП(ОтображениеПодсказки.Нет));
	спДанные.Добавить("ОтображатьСверху", СокрЛП(ОтображениеПодсказки.ОтображатьСверху));
	спДанные.Добавить("ОтображатьСлева", СокрЛП(ОтображениеПодсказки.ОтображатьСлева));
	спДанные.Добавить("ОтображатьСнизу", СокрЛП(ОтображениеПодсказки.ОтображатьСнизу));
	спДанные.Добавить("ОтображатьСправа", СокрЛП(ОтображениеПодсказки.ОтображатьСправа));
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ОтображениеПодсказки", "Отображение подсказки", "Авто", спДанные);

	Ветка=дзСвоства_Добавить(ТекущийОбъект, дзСвойства, "", "Оформление", "");
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ЦветФона", "Цвет фона", Новый Цвет(255,255,255));
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ЦветТекста", "Цвет текста", Новый Цвет(77,77,77));
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ЦветРамки", "Цвет рамки", Новый Цвет(178,178,178));
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "Шрифт", "Шрифт", Новый Шрифт);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "Фигура", "Фигура", "Авто", СписокЗначенийИзСтроки("Авто:Обычная:Овал")); //ФигураКнопки.Овал	
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ОтображениеФигуры", "Отображение фигуры", "Авто", СписокЗначенийИзСтроки("Авто:Всегда:Нет:ПриАктивности,При активности")); //ОтображениеФигурыКнопки.ПриАктивности
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ПоложениеКартинки", "Положение картинки", "Авто", СписокЗначенийИзСтроки("Авто:Лево:Право")); //ПоложениеКартинкиКнопки.Лево
	
	Ветка=дзСвоства_Добавить(ТекущийОбъект, дзСвойства, "", "Расположение", "");
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "Ширина", "Ширина", 0);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "Высота", "Высота", 0);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ВысотаЗаголовка", "Высота заголовка", 0);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ГоризонтальноеПоложениеВГруппе", "Горизонтальное положение в группе", "Авто", СписокЗначенийИзСтроки("Авто:Левое:Центр:Право"));
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "ВертикальноеПоложениеВГруппе", "Вертикальное положение в группе", "Авто", СписокЗначенийИзСтроки("Авто:Верх:Центр:Низ"));	
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "РастягиватьПоГоризонтали", "Растягивать по горизонтали", Ложь);
	дзСвоства_Добавить(ТекущийОбъект, Ветка, "РастягиватьПоВертикали", "Растягивать по вертикали", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура дзСвойства_ПередНачаломИзменения(Элемент, Отказ)
	Отказ=НЕ ТипЗнч(Элемент.ТекущиеДанные.Значение)=Тип("Число");
КонецПроцедуры

&НаКлиенте
Процедура дзСвойства_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные=Элемент.ТекущиеДанные; СтандартнаяОбработка=Ложь;
	Если ПустаяСтрока(ТекущиеДанные.Идентификатор) Тогда Возврат; КонецЕсли;
	Если ТипЗнч(ТекущиеДанные.Значение)=Тип("Булево") Тогда
		ТекущиеДанные.Значение=НЕ ТекущиеДанные.Значение;

	ИначеЕсли ТипЗнч(ТекущиеДанные.Значение)=Тип("Цвет") Тогда
		ДиалогВыбора=Новый ДиалогВыбораЦвета;
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборЦвета", ЭтотОбъект));

	ИначеЕсли ТипЗнч(ТекущиеДанные.Значение)=Тип("Шрифт") Тогда
		ДиалогВыбора=Новый ДиалогВыбораШрифта;
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборШрифта", ЭтотОбъект));

	ИначеЕсли ТипЗнч(ТекущиеДанные.Значение)=Тип("Число") Тогда
		СтандартнаяОбработка=Истина;
		
	ИначеЕсли НЕ ТекущиеДанные.СписокВыбора.Количество()=0 Тогда
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборИзСписка", ЭтотОбъект), ТекущиеДанные.СписокВыбора, Элементы.дзСвойстваЗначение);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура дзСвойства_Записать(ТекущийОбъект)
	ТекущийОбъект.Свойства.Очистить();
	
	дзБуфер=РеквизитФормыВЗначение("дзСвойства");
	дзБуфер.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	МассивСтрок=дзБуфер.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь), Истина);
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Если ПустаяСтрока(СтрокаКоллекции.Идентификатор) Тогда Продолжить; КонецЕсли;		
		Если СтрокаКоллекции.Значение="Авто" Тогда Продолжить; КонецЕсли;
		Если СтрокаКоллекции.Значение=0 Тогда Продолжить; КонецЕсли;
		НоваяСтрока=ТекущийОбъект.Свойства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если ТипЗнч(СтрокаКоллекции.Значение)=Тип("Цвет") ИЛИ ТипЗнч(СтрокаКоллекции.Значение)=Тип("Шрифт") Тогда
			НоваяСтрока.Значение=Неопределено;
			НоваяСтрока.Хранилище=Новый ХранилищеЗначения(СтрокаКоллекции.Значение, Новый СжатиеДанных(9));
		Иначе
			НоваяСтрока.Значение=СтрокаКоллекции.Значение;
			НоваяСтрока.Хранилище=Неопределено;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ОбработчикОповещения_ВыборИзСписка(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	Элементы.дзСвойства.ТекущиеДанные.Значение=Параметр1.Значение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВыборЦвета(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	Элементы.дзСвойства.ТекущиеДанные.Значение=Параметр1;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ВыборШрифта(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	Элементы.дзСвойства.ТекущиеДанные.Значение=Параметр1;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		дзСвоства_Инициализация();
	КонецЕсли;	
	СформироватьСписокКлавиш();
	
	Элементы.Картинка.СписокВыбора.Очистить();
	Элементы.Картинка.СписокВыбора.Добавить("", "");
	Для каждого мдКартинки Из Метаданные.ОбщиеКартинки Цикл
		Элементы.Картинка.СписокВыбора.Добавить(мдКартинки.Имя, мдКартинки.Представление(),,БиблиотекаКартинок[мдКартинки.Имя]);
	КонецЦикла;
	
	//Элементы.СтраницаГруппыПользователей.Видимость=ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	
	СобытияФормыСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СобытияФормыКлиент.ПриОткрытии(Отказ, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СобытияФормыКлиент.ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СобытияФормыКлиент.ПриЗакрытии(ЗавершениеРаботы, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СобытияФормыКлиент.ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СобытияФормыКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	СобытияФормыКлиент.ОбработкаАктивизации(АктивныйОбъект, Источник, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СобытияФормыКлиент.ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	дзСвоства_Инициализация(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СобытияФормыКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	дзСвойства_Записать(ТекущийОбъект);
	СобытияФормыСервер.ПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	СобытияФормыСервер.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СобытияФормыКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СобытияФормыКлиент.ВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	СобытияФормыКлиент.ВыборЗначения(СтандартнаяОбработка, ЭтаФорма, Объект);
КонецПроцедуры
