

////////////////////////////////////////////////////////////////
// Процедуры формирования отчета

&НаСервере
Функция СформироватьОтчет()
	//ПанельРазделовКниги = ЭлементыФормы.ПанельРазделовКниги;
	//ОсновнойРаздел = ПанельРазделовКниги.Страницы.ОсновнойРаздел;
	//КоличествоОтображаемыхРазделов = Элементы.Страницы.ПодчиненныеЭлементы.Количество()-1;
	//
	//Для НомерСтраницы = 1 по КоличествоОтображаемыхРазделов Цикл
	//	Если ПанельРазделовКниги.Страницы[КоличествоОтображаемыхРазделов - НомерСтраницы] = ОсновнойРаздел Тогда
	//		Продолжить;
	//	КонецЕсли; 
	//	ПанельРазделовКниги.Страницы.Удалить(КоличествоОтображаемыхРазделов - НомерСтраницы);
	//КонецЦикла;
	
	Элементы.Страницы.ПодчиненныеЭлементы["ОсновнойРаздел"].Видимость = НЕ (Отчет.ФормироватьДополнительныеЛисты И Отчет.ВыводитьТолькоДопЛисты);
		
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",                        Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода",                      Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",                       Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ФормироватьДополнительныеЛисты",     Отчет.ФормироватьДополнительныеЛисты);
	ПараметрыОтчета.Вставить("ДополнительныеЛистыЗаТекущийПериод", Отчет.ДополнительныеЛистыЗаТекущийПериод);
	ПараметрыОтчета.Вставить("ГруппироватьПоКонтрагентам",         Отчет.ГруппироватьПоКонтрагентам);
	ПараметрыОтчета.Вставить("КонтрагентДляОтбора",                Отчет.КонтрагентДляОтбора);
	ПараметрыОтчета.Вставить("ВыводитьТолькоДопЛисты",             Отчет.ВыводитьТолькоДопЛисты);
	ПараметрыОтчета.Вставить("ВыводитьПродавцовПоАвансам",         Отчет.ВыводитьПродавцовПоАвансам);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения",  Отчет.ВключаяОбособленныеПодразделения);
	//ПараметрыОтчета.Вставить("СписокСформированныхЛистов",         СписокСформированныхЛистов);
	ПараметрыОтчета.Вставить("ЗаполнениеДокумента",                Ложь);
	ПараметрыОтчета.Вставить("ЗаполнениеДекларации",               Ложь);
	ПараметрыОтчета.Вставить("ЕстьЗаписиПоКолонке20",              Ложь);
	ПараметрыОтчета.Вставить("ОтбиратьПоКонтрагенту",              ЗначениеЗаполнено(Отчет.КонтрагентДляОтбора));
	ПараметрыОтчета.Вставить("СформироватьОтчетПоСтандартнойФорме");
	ПараметрыОтчета.Вставить("СписокОрганизаций");
	ПараметрыОтчета.Вставить("ДатаФормированияДопЛиста");
	
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	//Отчеты.КнигаПокупок1137.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	ПолучитьДанные(ПараметрыОтчета);
	Возврат ЗагрузитьПодготовленныеДанные(ПараметрыОтчета);
КонецФункции

&НаСервере
Процедура ПолучитьДанные(СтруктураПараметров);
		ПроверитьСчетФактурыНаДубли(СтруктураПараметров);
		Если ЗначениеЗаполнено(СтруктураПараметров.КонтрагентДляОтбора)
			ИЛИ СтруктураПараметров.ВыводитьПродавцовПоАвансам
			ИЛИ СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
			СтандартнаяФорма = Ложь;
		Иначе
			СтандартнаяФорма = Истина;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("СформироватьОтчетПоСтандартнойФорме", СтандартнаяФорма);
		
		Если НЕ СтруктураПараметров.ВключатьОбособленныеПодразделения Тогда
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.Добавить(СтруктураПараметров.Организация);
		Иначе
			СписокОрганизаций = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(
			СтруктураПараметров.Организация);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("СписокОрганизаций", СписокОрганизаций);
		СтруктураПараметров.Вставить("ЗаписьДополнительногоЛиста", Ложь);
		СтруктураПараметров.Вставить("СоответствиеСтрокиДопИнформацииПоСчетуФактуре");
		ПрефиксыРИБиОрганизации = ОбщегоНазначения.ПолучитьМассивПрефиксовРИБ();
		Если НЕ ПрефиксыРИБиОрганизации.Количество()=0 Тогда
			#Если Клиент Тогда
				Ответ=Вопрос("Выводить префиксы в номерах?", РежимДиалогаВопрос.ДаНет);
				Если Ответ=КодВозвратаДиалога.Да Тогда
					СтруктураПараметров.Вставить("ВыводитьПрефиксы");
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		ИнициализироватьТаблицыДляДекларацииПоНДС(СтруктураПараметров);
		
		СписокСформированныхЛистов.Очистить();
		СписокСообщений = Новый СписокЗначений();
		
		СтруктураПараметров.Вставить("ВерсияПостановленияНДС1137", ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериода));
		Если НЕ (СтруктураПараметров.ВыводитьТолькоДопЛисты И СтруктураПараметров.ФормироватьДополнительныеЛисты) Тогда
			
			СписокСчетовФактур = Неопределено;
			
			Результат = ПолучитьЗаписиКнигиПродаж(СписокСчетовФактур, СтруктураПараметров);
			СформироватьОсновнойРаздел(СтруктураПараметров, Результат, СписокСчетовФактур);
			
		КонецЕсли;
		
		// Проверка наличия дополнительных листов за текущий период
		СтруктураПараметров = ПроверитьНаличиеДопЛистовКнигиПродаж(СтруктураПараметров);
		
		Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Или Не СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
			Если СтруктураПараметров.КорректируемыйПериод Тогда
				СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
				|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
				|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период""'"));
			КонецЕсли;
			Если СтруктураПараметров.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.ТекущийПериод Тогда
				СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
				|Построение дополнительных листов за текущий налоговый период не требуется'"));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Или Не СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
			Если СтруктураПараметров.ТекущийПериод Тогда
				СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
				|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
				|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за текущий период""!'"));
			КонецЕсли;
			Если СтруктураПараметров.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.КорректируемыйПериод Тогда
				СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
				|Построение дополнительных листов за корректируемый налоговый период не требуется'"));
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
			
			СписокСчетовФактур = Неопределено;
			СтруктураПараметров.ЗаписьДополнительногоЛиста = Истина;
			
			// Получение записей дополнительных листов
			Результат = ПолучитьЗаписиДополнительныхЛистовКнигиПродаж(СписокСчетовФактур, СтруктураПараметров);
			
			СформироватьДополнительныеЛисты(СтруктураПараметров, Результат, СписокСчетовФактур);
			
		КонецЕсли;	
	СтруктураПараметров.Вставить("СписокСообщений", СписокСообщений);
КонецПроцедуры

&НаСервере
Процедура СформироватьОсновнойРаздел(СтруктураПараметров, Результат, СписокСчетовФактур);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.Очистить();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПродаж";
	ТабДокумент.ЧерноБелаяПечать = Истина;
	
	Если СтруктураПараметров.КонецПериода >= '20190101' Тогда
		Макет = Отчеты.КнигаПродаж1137.ПолучитьМакет("КнигаПродаж2019");
	ИначеЕсли СтруктураПараметров.ВерсияПостановленияНДС1137 = 4 Тогда
		Макет = Отчеты.КнигаПродаж1137.ПолучитьМакет("КнигаПродаж981");
	Иначе
		Макет = Отчеты.КнигаПродаж1137.ПолучитьМакет("КнигаПродаж735");
	КонецЕсли; 
	
	СтруктураСекций = Новый Структура();
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		СтруктураСекций.Вставить("ШапкаРаздел9", Макет.ПолучитьОбласть("ШапкаРаздел9"));
		СтруктураСекций.Вставить("СтрокиДляПовтора", Макет.ПолучитьОбласть("СтрокиДляПовтора"));
		ТабДокумент.Вывести(СтруктураСекций.ШапкаРаздел9);
		ТабДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
	Иначе
		Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
			ТабДокумент.Вывести(Секция);
		КонецЕсли;
		
		СведенияОбОрганизации = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(СтруктураПараметров.Организация);
		НазваниеОрганизации = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");;
		
		Секция = Макет.ПолучитьОбласть("Шапка");
		Секция.Параметры.УстановленныйОтбор = "";
		Секция.Параметры.НачалоПериода = Формат(СтруктураПараметров.НачалоПериода, "ДФ=dd.MM.yyyy");
		Секция.Параметры.КонецПериода = Формат(СтруктураПараметров.КонецПериода, "ДФ=dd.MM.yyyy");
		Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		Секция.Параметры.ИННКППОрганизации = "" + СтруктураПараметров.Организация.ИНН 
		+ ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация.КПП), "", ("/" + СтруктураПараметров.Организация.КПП));
		
		Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
			
			Если СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа Тогда
				НадписьОтбор = НСтр("ru='Отбор: Контрагент в группе %1'");
			Иначе
				НадписьОтбор = НСтр("ru='Отбор: Контрагент = %1'");
			КонецЕсли;
			Секция.Параметры.УстановленныйОтбор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НадписьОтбор, СтруктураПараметров.КонтрагентДляОтбора);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Секция);
		
	КонецЕсли;
	
	Если Результат.Пустой() Тогда
		
		Секция = Макет.ПолучитьОбласть("Всего");
		ТабДокумент.Вывести(Секция);
		
		ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет);
		
		СписокСформированныхЛистов.Добавить(ТабДокумент, Нстр("ru='Основной раздел'"));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураСекций.Вставить("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
	//		СтруктураСекций = Новый Структура("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
	ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
		СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
	КонецЕсли;
	
	ИтогПоОрганизации = 0;
	
	ПреобразоватьЗаписиКнигиПродаж(
	СтруктураПараметров, Результат, ТабДокумент, 
	СписокСчетовФактур, ИтогПоОрганизации, ПараметрыСтроки,
	СтруктураПараметров.ТаблицаРаздел9, СтруктураСекций);
	
	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(ИтогПоОрганизации);
	
	ТабДокумент.Вывести(Секция);
	
	Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
		ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет);
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		Если СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> 0
			И СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
			
			ПерваяСтрокаСегмента = СтруктураПараметров.Счетчик - СтруктураПараметров.СчетчикСтрокТекущегоСегмента + 1;
			
			РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел9",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел9);
			
			РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел9",
			ПерваяСтрокаСегмента,
			ТабДокумент);
			
		КонецЕсли;
		
		//ИтогиРаздел9 = Новый Структура("СтПродБезНДС18,СтПродБезНДС10,СтПродБезНДС0,СумНДСВсКПр18,СумНДСВсКПр10,СтПродОсвВсКПр");
		//ИтогиРаздел9.СтПродБезНДС18 = ИтогПоОрганизации.СуммаБезНДС18;
		//ИтогиРаздел9.СтПродБезНДС10 = ИтогПоОрганизации.СуммаБезНДС10;
		//ИтогиРаздел9.СтПродБезНДС0  = ИтогПоОрганизации.НДС0;
		//ИтогиРаздел9.СумНДСВсКПр18  = ИтогПоОрганизации.НДС18;
		//ИтогиРаздел9.СумНДСВсКПр10  = ИтогПоОрганизации.НДС10;
		//ИтогиРаздел9.СтПродОсвВсКПр = ИтогПоОрганизации.СуммаСовсемБезНДС;
		ИтогиРаздел9 = Новый Структура("СтПродБезНДС20,СтПродБезНДС18,СтПродБезНДС10,СтПродБезНДС0,СумНДСВсКПр20,СумНДСВсКПр18,СумНДСВсКПр10,СтПродОсвВсКПр");
		ИтогиРаздел9.СтПродБезНДС20 = ИтогПоОрганизации.СуммаБезНДС20;
		ИтогиРаздел9.СтПродБезНДС18 = ИтогПоОрганизации.СуммаБезНДС18;
		ИтогиРаздел9.СтПродБезНДС10 = ИтогПоОрганизации.СуммаБезНДС10;
		ИтогиРаздел9.СтПродБезНДС0  = ИтогПоОрганизации.НДС0;
		ИтогиРаздел9.СумНДСВсКПр20  = ИтогПоОрганизации.НДС20;
		ИтогиРаздел9.СумНДСВсКПр18  = ИтогПоОрганизации.НДС18;
		ИтогиРаздел9.СумНДСВсКПр10  = ИтогПоОрганизации.НДС10;
		ИтогиРаздел9.СтПродОсвВсКПр = ИтогПоОрганизации.СуммаСовсемБезНДС;
		
		
		РО.ЗаписатьИтогиРазделаДекларацииНДС(
		СтруктураПараметров.СсылкаНаДекларацию,
		"Раздел9",
		ИтогиРаздел9);
	КонецЕсли;
	
	
	
	//ИтогиРаздел9 = Новый Структура("СтПродБезНДС18,СтПродБезНДС10,СтПродБезНДС0,СумНДСВсКПр18,СумНДСВсКПр10,СтПродОсвВсКПр");
	//ИтогиРаздел9.СтПродБезНДС18 = ИтогПоОрганизации.СуммаБезНДС18;
	//ИтогиРаздел9.СтПродБезНДС10 = ИтогПоОрганизации.СуммаБезНДС10;
	//ИтогиРаздел9.СтПродБезНДС0 = ИтогПоОрганизации.НДС0;
	//ИтогиРаздел9.СумНДСВсКПр18 = ИтогПоОрганизации.НДС18;
	//ИтогиРаздел9.СумНДСВсКПр10 = ИтогПоОрганизации.НДС10;
	//ИтогиРаздел9.СтПродОсвВсКПр = ИтогПоОрганизации.СуммаСовсемБезНДС;
	//
	//СтруктураПараметров.ИтогиРаздел9 = ИтогиРаздел9;
	
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("СтрокиДляПовтора");
	
	СписокСформированныхЛистов.Добавить(ТабДокумент, Нстр("ru='Основной раздел'"));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДополнительныеЛисты(СтруктураПараметров, Результат, СписокСчетовФактур)
	
	Перем ТабДокумент;
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НомерОтображаемогоПериода = 0;
	
	ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СчетчикСтрокДопЛиста", 0);
	СтруктураПараметров.Вставить("СчетчикСтрокТекущегоСегмента", 0);
	
	//ИтогиРаздел91 = Новый Структура(
	//"ИтСтПродКПр18,ИтСтПродКПр10,ИтСтПродКПр0,СумНДСИтКПр18,СумНДСИтКПр10,ИтСтПродОсвКПр,
	//|СтПродВсП1Р9_18,СтПродВсП1Р9_10,СтПродВсП1Р9_0,СумНДСВсП1Р9_18,СумНДСВсП1Р9_10,СтПродОсвП1Р9Вс");
	ИтогиРаздел91 = Новый Структура(
	"ИтСтПродКПр20,ИтСтПродКПр18,ИтСтПродКПр10,ИтСтПродКПр0,
	|СумНДСИтКПр20,СумНДСИтКПр18,СумНДСИтКПр10,ИтСтПродОсвКПр,
	|СтПродВсП1Р9_20,СтПродВсП1Р9_18,СтПродВсП1Р9_10,СтПродВсП1Р9_0,
	|СумНДСВсП1Р9_20,СумНДСВсП1Р9_18,СумНДСВсП1Р9_10,СтПродОсвП1Р9Вс");
	
	
	ПараметрыПолученияИтогов = Новый Структура;
	ПараметрыПолученияИтогов.Вставить("НалоговыйПериод", НачалоКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("КонецНалоговогоПериода", КонецКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("ДатаФормированияДопЛиста", КонецКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("СписокОрганизаций", СтруктураПараметров.СписокОрганизаций);
	
	ИтогПоКнигеПродаж = ПолучитьИтогиЗаПериодКнигаПродаж(ПараметрыПолученияИтогов);
	
	//ИтогиРаздел91.ИтСтПродКПр18  = ИтогПоКнигеПродаж.СуммаБезНДС18;
	//ИтогиРаздел91.ИтСтПродКПр10  = ИтогПоКнигеПродаж.СуммаБезНДС10;
	//ИтогиРаздел91.ИтСтПродКПр0   = ИтогПоКнигеПродаж.НДС0;
	//ИтогиРаздел91.СумНДСИтКПр18  = ИтогПоКнигеПродаж.НДС18;
	//ИтогиРаздел91.СумНДСИтКПр10  = ИтогПоКнигеПродаж.НДС10;
	//ИтогиРаздел91.ИтСтПродОсвКПр = ИтогПоКнигеПродаж.СуммаСовсемБезНДС;
	
	ИтогиРаздел91.ИтСтПродКПр20  = ИтогПоКнигеПродаж.СуммаБезНДС20;
	ИтогиРаздел91.ИтСтПродКПр18  = ИтогПоКнигеПродаж.СуммаБезНДС18;
	ИтогиРаздел91.ИтСтПродКПр10  = ИтогПоКнигеПродаж.СуммаБезНДС10;
	ИтогиРаздел91.ИтСтПродКПр0   = ИтогПоКнигеПродаж.НДС0;
	ИтогиРаздел91.СумНДСИтКПр20  = ИтогПоКнигеПродаж.НДС20;
	ИтогиРаздел91.СумНДСИтКПр18  = ИтогПоКнигеПродаж.НДС18;
	ИтогиРаздел91.СумНДСИтКПр10  = ИтогПоКнигеПродаж.НДС10;
	ИтогиРаздел91.ИтСтПродОсвКПр = ИтогПоКнигеПродаж.СуммаСовсемБезНДС;
	
	Для Каждого ИтогПоПериодам ИЗ ДеревоЗаписей.Строки Цикл
		
		НомерЛиста = 0;
		
		НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
		НалоговыйПериод = ПредставлениеПериода(
		ИтогПоПериодам.НалоговыйПериод, КонецДня(ИтогПоПериодам.КонецНалоговогоПериода), "ФП = Истина");
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.АвтоМасштаб = Истина;
		
		Для Каждого ИтогПоПериодамКорректировки ИЗ ИтогПоПериодам.Строки Цикл;
			//Для Каждого ИтогПоПериодамКорректировки ИЗ ИтогПоПериодамКорректировки1.Строки Цикл;
			Если ИтогПоПериодамКорректировки.КонецНалоговогоПериода >= '20190101' Тогда
				Макет = Отчеты.КнигаПродаж1137.ПолучитьМакет("ДополнительныйЛистКнигиПродаж2019");
			ИначеЕсли СтруктураПараметров.ВерсияПостановленияНДС1137 = 4 Тогда
				Макет = Отчеты.КнигаПродаж1137.ПолучитьМакет("ДополнительныйЛистКнигиПродаж981");
			Иначе
				Макет = Отчеты.КнигаПродаж1137.ПолучитьМакет("ДополнительныйЛистКнигиПродаж735");
			КонецЕсли; 
			
			Секция = Макет.ПолучитьОбласть("Строка");
			СтрокаИтого = Макет.ПолучитьОбласть("Итого");
			СтрокаВсего = Макет.ПолучитьОбласть("Всего");
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
				СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
			КонецЕсли;
			
			// Формирование шапки доп. листа
			ОкончаниеПредыдущегоРаздела = ТабДокумент.ВысотаТаблицы;
			НомерЛиста = НомерЛиста + 1;
			
			СтруктураПараметров.Вставить("НалоговыйПериод", ИтогПоПериодамКорректировки.НалоговыйПериод);
			СтруктураПараметров.Вставить("КонецНалоговогоПериода", КонецКвартала(ИтогПоПериодамКорректировки.КонецНалоговогоПериода));
			СтруктураПараметров.Вставить("ДатаОформления", ИтогПоПериодамКорректировки.ДатаОформления);
			
			Если СтруктураПараметров.ЗаполнениеДекларации Тогда
				ВывестиШапкуРаздела91Декларации(ТабДокумент, Макет, СтруктураПараметров, НомерЛиста);
			Иначе
				ВывестиШапкуДопЛиста(ТабДокумент, Макет, СтруктураПараметров, НомерЛиста);
			КонецЕсли;
			
			СтруктураПараметров.ДатаФормированияДопЛиста = ИтогПоПериодамКорректировки.ДатаОформления;
			
			ИтогЗаПериод = ПолучитьИтогиЗаПериодКнигаПродаж(СтруктураПараметров);
			СтрокаИтого.Параметры.Заполнить(ИтогЗаПериод);
			
			ТабДокумент.Вывести(СтрокаИтого);
			
			СтруктураСекций = Новый Структура("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
			ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
				СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
			КонецЕсли;
			
			ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
			СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, 
			ТабДокумент, СписокСчетовФактур, ПараметрыСтроки,
			СтруктураПараметров.ТаблицаРаздел91, СтруктураСекций);
			
			СтрокаВсего.Параметры.Заполнить(ИтогЗаПериод);
			ТабДокумент.Вывести(СтрокаВсего);
			
			Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
				И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
				ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет);
			КонецЕсли;
			//КонецЦикла;
		КонецЦикла;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		СписокСформированныхЛистов.Добавить(ТабДокумент, Нстр("ru='Доп.листы за'") + " " + НалоговыйПериод);
		
	КонецЦикла;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		// Запишем последний сегмент
		
		Если СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> 0
			И СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
			
			// Записать сегменты
			ПерваяСтрокаСегмента = СтруктураПараметров.СчетчикСтрокДопЛиста - СтруктураПараметров.СчетчикСтрокТекущегоСегмента + 1;
			
			РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел9_Прил1",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел91);
			
			РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел9_Прил1",
			ПерваяСтрокаСегмента,
			ТабДокумент);
			
		КонецЕсли;
		
		ИтогиРаздел91.СтПродВсП1Р9_20 = ИтогЗаПериод.СуммаБезНДС20;
		ИтогиРаздел91.СтПродВсП1Р9_18 = ИтогЗаПериод.СуммаБезНДС18;
		ИтогиРаздел91.СтПродВсП1Р9_10 = ИтогЗаПериод.СуммаБезНДС10;
		ИтогиРаздел91.СтПродВсП1Р9_0  = ИтогЗаПериод.НДС0;
		ИтогиРаздел91.СумНДСВсП1Р9_20 = ИтогЗаПериод.НДС20;
		ИтогиРаздел91.СумНДСВсП1Р9_18 = ИтогЗаПериод.НДС18;
		ИтогиРаздел91.СумНДСВсП1Р9_10 = ИтогЗаПериод.НДС10;
		ИтогиРаздел91.СтПродОсвП1Р9Вс = ИтогЗаПериод.СуммаСовсемБезНДС;
		
		//ИтогиРаздел91.СтПродВсП1Р9_18 = ИтогЗаПериод.СуммаБезНДС18;
		//ИтогиРаздел91.СтПродВсП1Р9_10 = ИтогЗаПериод.СуммаБезНДС10;
		//ИтогиРаздел91.СтПродВсП1Р9_0  = ИтогЗаПериод.НДС0;
		//ИтогиРаздел91.СумНДСВсП1Р9_18 = ИтогЗаПериод.НДС18;
		//ИтогиРаздел91.СумНДСВсП1Р9_10 = ИтогЗаПериод.НДС10;
		//ИтогиРаздел91.СтПродОсвП1Р9Вс = ИтогЗаПериод.СуммаСовсемБезНДС;
		
		РО.ЗаписатьИтогиРазделаДекларацииНДС(
		СтруктураПараметров.СсылкаНаДекларацию,
		"Раздел9_Прил1",
		ИтогиРаздел91);
	КонецЕсли;
	
	//СтруктураПараметров.ТабличныйДокументРаздел91 = ТабличныйДокумент;
	//
	//ИтогиРаздел91.СтПродВсП1Р9_18 = ИтогЗаПериод.СуммаБезНДС18;
	//ИтогиРаздел91.СтПродВсП1Р9_10 = ИтогЗаПериод.СуммаБезНДС10;
	//ИтогиРаздел91.СтПродВсП1Р9_0  = ИтогЗаПериод.НДС0;
	//ИтогиРаздел91.СумНДСВсП1Р9_18 = ИтогЗаПериод.НДС18;
	//ИтогиРаздел91.СумНДСВсП1Р9_10 = ИтогЗаПериод.НДС10;
	//ИтогиРаздел91.СтПродОсвП1Р9Вс = ИтогЗаПериод.СуммаСовсемБезНДС;
	//
	//СтруктураПараметров.ИтогиРаздел91 = ИтогиРаздел91;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиШапкуРаздела91Декларации(ТабДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста)
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Если НомерДополнительногоЛиста = 1 Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаРаздел91");
		ТабДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("ШапкаРаздел91НомерЛиста");
	Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("СтрокиДляПовтора");
	ТабДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет)
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("ФИОРук");
	СписокПоказателей.Добавить("ФИО");
	
	СведенияОбОрганизации = РО.ПолучитьСведенияОбОрганизации(
	СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода, СписокПоказателей);
	СведенияОЮрФизЛице  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(
	СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
	
	Если РО.ЭтоПБОЮЛ(СтруктураПараметров.Организация) Тогда
		ИмяРук = "";
		ИмяОрг = СведенияОбОрганизации.ФИО;
		Свидетельство = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство,");
	Иначе
		ИмяРук = СведенияОбОрганизации.ФИОРук;
		ИмяОрг = "";
		Свидетельство = "";
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяРук        = ИмяРук;
	Секция.Параметры.ИмяОрг        = ИмяОрг;
	Секция.Параметры.Свидетельство = Свидетельство;
	
	ТабДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицыДляДекларацииПоНДС(СтруктураПараметров)
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		И СтруктураПараметров.ФорматПоПостановлению735 Тогда
		
		Записи = Новый ТаблицаЗначений;
		
		Записи.Колонки.Добавить("НомПП", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0)));
		Записи.Колонки.Добавить("НомерСчФ", 			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
		Записи.Колонки.Добавить("ДатаСчФ", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		Записи.Колонки.Добавить("НомИспрСчФ", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
		Записи.Колонки.Добавить("ДатаИспрСчФ", 			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		Записи.Колонки.Добавить("НомерКСчФ", 			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
		Записи.Колонки.Добавить("ДатаКСчФ", 			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		Записи.Колонки.Добавить("НомИспрКСчФ", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
		Записи.Колонки.Добавить("ДатаИспрКСчФ",			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		Записи.Колонки.Добавить("НаимПок", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
		Записи.Колонки.Добавить("ИННЮЛ", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		Записи.Колонки.Добавить("КПП", 					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9)));
		Записи.Колонки.Добавить("ИННФЛ", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12)));
		Записи.Колонки.Добавить("КодОКВ", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Записи.Колонки.Добавить("СтТовУчНалВсего", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Записи.Колонки.Добавить("СтТовУчНалРубКоп", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Записи.Колонки.Добавить("СтТовРубКоп18", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Записи.Колонки.Добавить("СтТовРубКоп10", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Записи.Колонки.Добавить("СтТовРубКоп0", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Записи.Колонки.Добавить("СумНДСРубКоп18", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Записи.Колонки.Добавить("СумНДСРубКоп10", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Записи.Колонки.Добавить("СтПродОсвНДСРубКоп", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		
		Записи.Колонки.Добавить("КодВидОпер",	Новый ОписаниеТипов("Массив"));
		Записи.Колонки.Добавить("СвПосредн");
		Записи.Колонки.Добавить("СвДокПдтвОпл", Новый ОписаниеТипов("Массив"));
		
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда 
			ОбщиеСведения = Новый Структура("НомерДопЛКнПрод,Период,ОтчетГод,ДатаДопЛКнПрод,Итого,Всего");
			СтруктураПараметров.Вставить("ДанныеОтчета");
		Иначе
			ОбщиеСведения = Новый Структура("СтТовРубКоп18,СтТовРубКоп10,СтТовРубКоп0,СумНДСРубКоп18,СумНДСРубКоп10,СтПродОсвНДСРубКоп");
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Записи", 			Записи);
		СтруктураПараметров.Вставить("ОбщиеСведения", 	ОбщиеСведения);
		
	Иначе
		Раздел9 = Новый ТаблицаЗначений;
		
		Раздел9.Колонки.Добавить("НомерПор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0)));
		
		Раздел9.Колонки.Добавить("НомСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
		Раздел9.Колонки.Добавить("ДатаСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		
		Раздел9.Колонки.Добавить("НомИспрСчФ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
		Раздел9.Колонки.Добавить("ДатаИспрСчФ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		
		Раздел9.Колонки.Добавить("НомКСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
		Раздел9.Колонки.Добавить("ДатаКСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		
		Раздел9.Колонки.Добавить("НомИспрКСчФ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
		Раздел9.Колонки.Добавить("ДатаИспрКСчФ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
		
		Раздел9.Колонки.Добавить("ОКВ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		
		Если СтруктураПараметров.ЗаполнениеДекларации Тогда
			Если СтруктураПараметров.ПравилаЗаполнения = "2017Кв1" Тогда
				Раздел9.Колонки.Добавить("РегНомТД", Новый ОписаниеТипов("Массив"));
				
			ИначеЕсли СтруктураПараметров.ПравилаЗаполнения = "2019Кв1" Тогда
				
				Раздел9.Колонки.Добавить("РегНомТД",    Новый ОписаниеТипов("Массив"));
				Раздел9.Колонки.Добавить("КодВидТовар", Новый ОписаниеТипов("Массив"));
			КонецЕсли;
		КонецЕсли;
		
		Раздел9.Колонки.Добавить("СтоимПродСФВ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СтоимПродСФ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		
		Раздел9.Колонки.Добавить("СтоимПродСФ20", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СтоимПродСФ18", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СтоимПродСФ10", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СтоимПродСФ0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СумНДССФ20", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СумНДССФ18", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СумНДССФ10", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		Раздел9.Колонки.Добавить("СтоимПродОсв", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
		
		Раздел9.Колонки.Добавить("КодВидОпер", Новый ОписаниеТипов("Массив"));
		Раздел9.Колонки.Добавить("ДокПдтвОпл", Новый ОписаниеТипов("Массив"));
		
		Раздел9.Колонки.Добавить("СвПокуп", Новый ОписаниеТипов("Массив"));
		Раздел9.Колонки.Добавить("СвПос"); // Тип не задается
		
		Раздел91 = Раздел9.СкопироватьКолонки();
		
		СтруктураПараметров.Вставить("ТаблицаРаздел9", Раздел9);
		СтруктураПараметров.Вставить("ТаблицаРаздел91", Раздел91);
		СтруктураПараметров.Вставить("ТабличныйДокументРаздел91");
		
		//ИтогиРаздел9 = Новый Структура("СтПродБезНДС18,СтПродБезНДС10,СтПродБезНДС0,СумНДСВсКПр18,СумНДСВсКПр10,СтПродОсвВсКПр");
		//ИтогиРаздел91 = Новый Структура(
		//"ИтСтПродКПр18,ИтСтПродКПр10,ИтСтПродКПр0,СумНДСИтКПр18,СумНДСИтКПр10,ИтСтПродОсвКПр,
		//|СтПродВсП1Р9_18,СтПродВсП1Р9_10,СтПродВсП1Р9_0,СумНДСВсП1Р9_18,СумНДСВсП1Р9_10,СтПродОсвП1Р9Вс");
		ИтогиРаздел9 = Новый Структура(
		"СтПродБезНДС20,СтПродБезНДС18,СтПродБезНДС10,СтПродБезНДС0,
		|СумНДСВсКПр20,СумНДСВсКПр18,СумНДСВсКПр10,СтПродОсвВсКПр");
		ИтогиРаздел91 = Новый Структура(
		"ИтСтПродКПр20,ИтСтПродКПр18,ИтСтПродКПр10,ИтСтПродКПр0,
		|СумНДСИтКПр20,СумНДСИтКПр18,СумНДСИтКПр10,ИтСтПродОсвКПр,
		|СтПродВсП1Р9_20,СтПродВсП1Р9_18,СтПродВсП1Р9_10,СтПродВсП1Р9_0,
		|СумНДСВсП1Р9_20,СумНДСВсП1Р9_18,СумНДСВсП1Р9_10,СтПродОсвП1Р9Вс");
		
		СтруктураПараметров.Вставить("ИтогиРаздел9", ИтогиРаздел9);
		СтруктураПараметров.Вставить("ИтогиРаздел91", ИтогиРаздел91);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные(РезультатВыполнения)
	Перем ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента;
	
	ОпределитьИндексОсновногоРаздела();
	Если ЕстьОсновнойРаздел Тогда
		Элементы.Страницы.ТекущаяСтраница=Элементы.ОсновнойРаздел;
		СформированныйЛист = СписокСформированныхЛистов.Получить(ИндексОсновногоРаздела).Значение;
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.АвтоМасштаб=Истина;
		ТабличныйДокумент.Вывести(СформированныйЛист);
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
	КонецЕсли;
	
	Если СписокСформированныхЛистов.Количество() <> 0 Тогда
		НомерОтображаемогоПериода = 0;
		Для Каждого Лист Из СписокСформированныхЛистов Цикл
			Если Лист.Представление <> "Основной раздел" Тогда
				НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
				// Вывод дополнительных листов
				НоваяСтраница = Элементы.Добавить("ДопЛист" + НомерОтображаемогоПериода, Тип("ГруппаФормы"), Элементы.Страницы);
				НоваяСтраница.Заголовок=Лист.Представление;
				Элементы.Страницы.ТекущаяСтраница=НоваяСтраница;
				ТабличныйДокументДопЛист = Элементы.Добавить("ТД_ДопЛист" + НомерОтображаемогоПериода, Тип("ПолеТабличногоДокумента"), НоваяСтраница);
				ТабличныйДокументДопЛист.Вывести(Лист.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("СписокСообщений") Тогда
		Возврат РезультатВыполнения.СписокСообщений;
	КонецЕсли;
	Возврат Новый СписокЗначений();
КонецФункции

&НаСервере
Процедура ОпределитьИндексОсновногоРаздела()

	Индекс = ПолучитьИндексСформированногоЛиста("Основной раздел");
	
	Если Индекс = Неопределено Тогда
		ИндексОсновногоРаздела = 0;
		ЕстьОсновнойРаздел     = Ложь;
	Иначе
		ИндексОсновногоРаздела = Индекс;
		ЕстьОсновнойРаздел     = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексСформированногоЛиста(ИмяЛиста)

	Если ИмяЛиста = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Для Каждого Лист Из СписокСформированныхЛистов Цикл
		Если Лист.Представление = ИмяЛиста Тогда
			Возврат СписокСформированныхЛистов.Индекс(Лист);
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

////////////////////////////////////////////////////////////////
// Вспомогательные процедуры формирования отчета

&НаСервере
Функция ВерсияПостановленияНДС1137(Период)
	
	Если Период >= '20171001' Тогда      // Постановление № 981 вступает в силу с 1 октября 2017 года.
		Возврат 4;
	ИначеЕсли Период >= '20141001' Тогда // Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат 3;
	ИначеЕсли Период >= '20131106' Тогда // Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат 2;
	Иначе
		Возврат 1;                       // Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, 
	ТабДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено, 
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено)
	
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(
	СтруктураПараметров, СписокСчетовФактур, Истина);
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		Счетчик = СтруктураПараметров.СчетчикСтрокДопЛиста;
		СчетчикСтрокТекущегоСегмента = СтруктураПараметров.СчетчикСтрокТекущегоСегмента;
	Иначе
		Счетчик = 0;
		СчетчикСтрокТекущегоСегмента = 0;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабДокумент.НачатьГруппуСтрок();
			Для каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
					Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
						
						Счетчик = Счетчик + 1;
						
						ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
						
						ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
						ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе	
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
				Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
					СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
					
					ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
					
					Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
					
					Если СтруктураПараметров.ЗаполнениеДекларации 
						И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
						
						// Запишем сегмент
						ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
						
						РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
						СтруктураПараметров.СсылкаНаДекларацию,
						"Раздел9_Прил1",
						ПерваяСтрокаСегмента,
						СтруктураПараметров.ТаблицаРаздел91);
						
						РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
						СтруктураПараметров.СсылкаНаДекларацию,
						"Раздел9_Прил1",
						ПерваяСтрокаСегмента,
						ТабДокумент);
						
						// Очистим табличный документ и таблицу
						ТабДокумент.Очистить();
						ТабДокумент.Вывести(СтруктураСекций.ШапкаРаздел91);
						ТабДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
						
						СтруктураПараметров.ТаблицаРаздел91.Очистить();
						
						// Обнулим счетчик текущего сегмента
						СчетчикСтрокТекущегоСегмента = 0;
						
					КонецЕсли;
					
					ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
					ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		СтруктураПараметров.СчетчикСтрокДопЛиста = Счетчик;
		СтруктураПараметров.СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРеквизитовКонтрагента(текКонтрагент, ИНН, КПП)
	
	СтруктураРеквизитовКонтрагента = Новый Структура();
	СтруктураРеквизитовКонтрагента.Вставить("Контрагент", текКонтрагент);
	
	Если СтрДлина(ИНН) > 10 Тогда
		СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", ИНН);
	Иначе
		СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", ИНН);
		СтруктураРеквизитовКонтрагента.Вставить("КПП", КПП);
	КонецЕсли;
	
	Возврат СтруктураРеквизитовКонтрагента;
	
КонецФункции

&НаСервере
Функция ПолучитьОригиналСчетаФактуры(ИсправительныйСчетФактура)
	Если ИсправительныйСчетФактура=ИсправительныйСчетФактура.ДокументОснованиеКорректировка Тогда
		Сообщить("В корректировочном счет-фактуре "+СокрЛП(ИсправительныйСчетФактура)+" неверно выбран документ основание.");
		Возврат ИсправительныйСчетФактура;
	КонецЕсли;	
	Если ИсправительныйСчетФактура.ДокументОснованиеКорректировка.Исправление ИЛИ ИсправительныйСчетФактура.ДокументОснованиеКорректировка.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
		ПолучитьОригиналСчетаФактуры(ИсправительныйСчетФактура.ДокументОснованиеКорректировка);
	КонецЕсли;	
	Возврат ИсправительныйСчетФактура.ДокументОснованиеКорректировка;
КонецФункции	

&НаСервере
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, СтруктураПараметров)
	
	ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(СтруктураПараметров.Организация);
	
	ВариантыПредставленияСчетаФактуры = Новый Структура("НомерОтДата,ДатаНомер,НомерДата,Дата,Номер", "", "", "", "");
	
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактура) Тогда
		Возврат ВариантыПредставленияСчетаФактуры;
	КонецЕсли;
	
	ДатаНомер = "";
	
	Если ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ЗаписьКниги.СчетФактура.Исправление ИЛИ ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактура);
			ДатаСФ 	= Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
		Иначе	
			ДатаСФ 	= Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ЗаписьКниги.СчетФактураДокумент.Исправление ИЛИ ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактураДокумент);
			ДатаСФ 	= Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
		Иначе
			ДатаСФ 	= Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
			//НомерСФ = ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации);
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактураДокумент);
			//Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
			ДатаСФ 	= Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(Оригинал.Номер);
		Иначе
			ДатаСФ 	= Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
		КонецЕсли;
	Иначе
		ДатаСФ	= Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
		НомерСФ = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
		
	КонецЕсли;
	
	//КонецЕсли;
	
	ВариантыПредставленияСчетаФактуры.ДатаНомер = "" + ДатаСФ + ?(ЗначениеЗаполнено(ДатаСФ), ";", "") + НомерСФ;
	ВариантыПредставленияСчетаФактуры.НомерДата = "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), ";", "") + ДатаСФ;
	ВариантыПредставленияСчетаФактуры.НомерОтДата = "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), " от ", "") + ДатаСФ;
	
	ВариантыПредставленияСчетаФактуры.Номер = НомерСФ;
	ВариантыПредставленияСчетаФактуры.Дата = ДатаСФ;
	
	Возврат ВариантыПредставленияСчетаФактуры;
	
КонецФункции

&НаСервере
Функция ОпределитьДатуИНомерСФКорректировки(ЗаписьКниги, СтруктураПараметров)
	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("НомерДатаИсправления", "");	
	СтруктураВозврата.Вставить("НомерОтДатаИсправленный", "");	
	
	СтруктураВозврата.Вставить("НомерДатаКорректировки", "");
	СтруктураВозврата.Вставить("НомерОтДатаКорректировочный", "");
	СтруктураВозврата.Вставить("НомерДатаИсправленияКорректировки", "");
	СтруктураВозврата.Вставить("НомерОтДатаИсправленныйКорректировочный", "");
	
	СтруктураВозврата.Вставить("НомерИсправления", "");	
	СтруктураВозврата.Вставить("НомерКорректировки", "");
	СтруктураВозврата.Вставить("НомерИсправленияКорректировки", "");	
	
	СтруктураВозврата.Вставить("ДатаИсправления", "");	
	СтруктураВозврата.Вставить("ДатаКорректировки", "");
	СтруктураВозврата.Вставить("ДатаИсправленияКорректировки", "");	
	
	НомерДатаИсправления="";
	НомерОтДатаИсправленный="";
	НомерДатаКорректировки="";
	НомерОтДатаКорректировочный="";
	НомерДатаИсправленияКорректировки="";
	НомерОтДатаИсправленныйКорректировочный="";
	
	НомерИсправления="";	
	НомерКорректировки="";
	НомерИсправленияКорректировки="";
	
	ДатаИсправления="";	
	ДатаКорректировки="";
	ДатаИсправленияКорректировки="";
	
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(СтруктураПараметров.Организация);
		Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Если ЗаписьКниги.СчетФактураДокумент.Исправление Тогда
				Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактураДокумент);
				//Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
					Оригинал2=Оригинал.ДокументОснованиеКорректировка;
					ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал2.Номер);
					НомерДатаИсправления = "";
					НомерОтДатаИсправленный = "";
					НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
					НомерОтДатаКорректировочный="" + СокрЛП(Оригинал.Номер) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
					НомерОтДатаИсправленныйКорректировочный=""+СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер+ " от "+Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy"));
					НомерКорректировки = СокрЛП(Оригинал.Номер);
					НомерИсправленияКорректировки = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
					ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					ДатаИсправленияКорректировки = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				Иначе
					ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
					НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					НомерОтДатаИсправленный= "" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления) + " от " +Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					ДатаИсправления = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерДатаКорректировки = "";
					НомерОтДатаКорректировочный="";
					НомерДатаИсправленияКорректировки ="";
					НомерОтДатаИсправленныйКорректировочный="";
				КонецЕсли;
			ИначеЕсли ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный = "";
				НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
				НомерОтДатаКорректировочный="" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерКорректировки = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
				ДатаКорректировки = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
			КонецЕсли;	
		КонецЕсли; 
		
		Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если ЗаписьКниги.СчетФактураДокумент.Исправление И НЕ ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
					Оригинал2=Оригинал.ДокументОснованиеКорректировка;
					//ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал2, ПрефиксыРИБиОрганизации);
					ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал2.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал2, ПрефиксыРИБиОрганизации));
					НомерДатаИсправления = "";
					НомерОтДатаИсправленный = "";
					//НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
					НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал2.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
					НомерОтДатаКорректировочный="" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал2.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации)) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					//НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации);
					НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
					НомерОтДатаИсправленныйКорректировочный="" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации))+ " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					//НомерКорректировки =ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
					НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
					//НомерИсправленияКорректировки =ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации);
					НомерИсправленияКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
					ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					ДатаИсправленияКорректировки =Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				Иначе
					//ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
					ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
					НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					НомерОтДатаИсправленный = "" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					ДатаИсправления = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерДатаКорректировки = "";
					НомерОтДатаКорректировочный="";
					НомерДатаИсправленияКорректировки ="";
					НомерОтДатаИсправленныйКорректировочный="";
				КонецЕсли;
			ИначеЕсли ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				//ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный= "";
				//НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации);
				НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
				НомерОтДатаКорректировочный= "" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				//НомерКорректировки = ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации);
				НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
				ДатаКорректировки = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
				
			ИначеЕсли ЗаписьКниги.СчетФактураДокумент.Исправление И ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный= "";
				НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
				НомерОтДатаКорректировочный= "" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
				ДатаКорректировки = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
	
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если ЗаписьКниги.СчетФактура.Исправление Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал2=Оригинал.ДокументОснованиеКорректировка;
				ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал2.Номер);
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный="";
				НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
				НомерОтДатаКорректировочный= "" + СокрЛП(Оригинал.Номер) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.Номер);
				НомерОтДатаИсправленныйКорректировочный="" + СокрЛП(ЗаписьКниги.СчетФактура.Номер) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерКорректировки = СокрЛП(Оригинал.Номер);
				НомерИсправленияКорректировки = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
				ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				ДатаИсправленияКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				
			Иначе
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
				НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				НомерОтДатаИсправленный="" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				ДатаИсправления = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаКорректировки = "";
				НомерОтДатаКорректировочный="";
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
			КонецЕсли;
		ИначеЕсли ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
			НомерДатаИсправления = "";
			НомерОтДатаИсправленный="";
			НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.Номер);
			НомерОтДатаКорректировочный="" + СокрЛП(ЗаписьКниги.СчетФактура.Номер) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерКорректировки = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
			ДатаКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерДатаИсправленияКорректировки ="";
			НомерОтДатаИсправленныйКорректировочный="";
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ЗаписьКниги.СчетФактура.Исправление И НЕ ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал2=Оригинал.ДокументОснованиеКорректировка;
				//ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал2,ПрефиксыРИБиОрганизации);
				ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал2.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал2, ПрефиксыРИБиОрганизации));
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный="";
				//НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
				НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
				НомерОтДатаКорректировочный="" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации)) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				//НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации);
				НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
				НомерОтДатаИсправленныйКорректировочный="" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				//НомерКорректировки = ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
				НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
				//НомерИсправленияКорректировки = ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации);
				НомерИсправленияКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
				ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				ДатаИсправленияКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			Иначе
				//ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
				НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				НомерОтДатаИсправленный="" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				ДатаИсправления = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаКорректировки = "";
				НомерОтДатаКорректировочный="";
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
			КонецЕсли;
		ИначеЕсли ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			//ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации);
			ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
			НомерДатаИсправления = "";
			НомерОтДатаИсправленный="";
			//НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации);
			НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
			НомерОтДатаКорректировочный="" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			//НомерКорректировки = ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации);
			НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
			ДатаКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерДатаИсправленияКорректировки ="";
			НомерОтДатаИсправленныйКорректировочный="";
		ИначеЕсли ЗаписьКниги.СчетФактура.Исправление И ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.НаАванс Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер), ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
			НомерДатаИсправления = "";
			НомерОтДатаИсправленный="";
			НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
			НомерОтДатаКорректировочный="" + ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер), ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
			ДатаКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерДатаИсправленияКорректировки ="";
			НомерОтДатаИсправленныйКорректировочный="";
		КонецЕсли;
		
	КонецЕсли;	
	СтруктураВозврата.НомерДатаИсправления=НомерДатаИсправления;
	СтруктураВозврата.НомерОтДатаИсправленный=НомерОтДатаИсправленный;
	СтруктураВозврата.НомерДатаКорректировки=НомерДатаКорректировки;
	СтруктураВозврата.НомерОтДатаКорректировочный=НомерОтДатаКорректировочный;
	СтруктураВозврата.НомерДатаИсправленияКорректировки=НомерДатаИсправленияКорректировки;
	СтруктураВозврата.НомерОтДатаИсправленныйКорректировочный=НомерОтДатаИсправленныйКорректировочный;
	
	СтруктураВозврата.НомерИсправления=НомерИсправления;	
	СтруктураВозврата.НомерКорректировки=НомерКорректировки;
	СтруктураВозврата.НомерИсправленияКорректировки=НомерИсправленияКорректировки;
	
	СтруктураВозврата.ДатаИсправления=ДатаИсправления;	
	СтруктураВозврата.ДатаКорректировки=ДатаКорректировки;
	СтруктураВозврата.ДатаИсправленияКорректировки=ДатаИсправленияКорректировки;
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Функция ПолучитьДополнительнуюИнформациюПоСчетуФактуреТНВЭД(СчетаФактура)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ПО СчетФактураВыданный.ДокументОснование = ВозвратТоваровПоставщикуТовары.Ссылка
	|			И (ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0))
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	РеализацияТоваровУслугТовары.Номенклатура.КодТНВЭД
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслугТовары.Ссылка
	|			И (РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0))
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",СчетаФактура);
	тзДанные=Запрос.Выполнить().Выгрузить();
	
	ДополнительнаяИнформация = Новый ТаблицаЗначений;
	ДополнительнаяИнформация.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ДополнительнаяИнформация.Колонки.Добавить("ТНВЭД",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	ДополнительнаяИнформация.Индексы.Добавить("Ссылка");
	
	// Дополнение по ТН ВЭД. Получим ТН ВЭД из документам по реализациям под 0%.
	Для Каждого СтрокаТз ИЗ тзДанные Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТз.СчетФактура) Тогда Продолжить; КонецЕсли;
		СтрокаДопИнформации = ДополнительнаяИнформация.Найти(СтрокаТз.СчетФактура, "Ссылка");
		Если СтрокаДопИнформации = Неопределено Тогда
			СтрокаДопИнформации        = ДополнительнаяИнформация.Добавить();
			СтрокаДопИнформации.Ссылка = СтрокаТз.СчетФактура;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТз.КодТНВЭД)
			И Найти(СтрокаДопИнформации.ТНВЭД, СокрЛП(СтрокаТз.КодТНВЭД)) = 0 Тогда // Исключаем дубли ТНВЭД
			СтрокаДопИнформации.ТНВЭД = СтрокаДопИнформации.ТНВЭД 
			+ ?(ПустаяСтрока(СтрокаДопИнформации.ТНВЭД ), "", ";") + СокрЛП(СтрокаТз.КодТНВЭД);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДополнительнаяИнформация;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, Секция, ЗаписьКниги, НомерСтроки)
	
	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество() > 0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Секция, ПараметрыЗаполнения);
	
	// Универсальная структура для заполнения книги по разным версиям постановления
	СоставСтроки = Новый Структура;
	СчетаФактуры = Новый Массив();
	
	СоставСтроки.Вставить("ВсегоПродаж",       ЗаписьКниги.ВсегоПродаж);
	СоставСтроки.Вставить("СуммаБезНДС18",     ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("СуммаБезНДС20",     ЗаписьКниги.СуммаБезНДС20);
	СоставСтроки.Вставить("НДС18",             ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("НДС20",             ЗаписьКниги.НДС20);
	СоставСтроки.Вставить("СуммаБезНДС10",     ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",             ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0",              ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", ЗаписьКниги.СуммаСовсемБезНДС);
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.СчетФактураДокумент);
		СчетаФактуры.Добавить(ЗаписьКниги.СчетФактураДокумент);
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.Строки[0].СчетФактура);
		СчетаФактуры.Добавить(ЗаписьКниги.ЗаписьКниги.Строки[0].СчетФактура);
	КонецЕсли;
	
	Если ЭтоДетальнаяЗапись И ЗаписьКниги.Строки.Количество() = 0 Тогда
		РасшифровкаДанныхПокупателя = ЗаписьКниги;
	Иначе
		РасшифровкаДанныхПокупателя = ПараметрыЗаполнения;
	КонецЕсли;
	
	ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(РасшифровкаДанныхПокупателя, СтруктураПараметров);
	
	СоставСтроки.Вставить("Ном", НомерСтроки);
	Если НЕ ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.КодВидаОперации) Тогда
		КодОперации="01";
		Если РасшифровкаДанныхПокупателя.Событие=Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС Тогда
			КодОперации="21";	
		ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			КодОперации="01";
		ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			КодОперации="23";	
		ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.РеализацияТоваровУслуг") И РасшифровкаДанныхПокупателя.СчетФактураДокумент=РасшифровкаДанныхПокупателя.СчетФактура Тогда
			КодОперации="26";
		ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ОтчетОРозничныхПродажах") И РасшифровкаДанныхПокупателя.СчетФактураДокумент=РасшифровкаДанныхПокупателя.СчетФактура Тогда
			КодОперации="26";
		ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ВосстановлениеНДС") Тогда
			КодОперации="21";	
		КонецЕсли;	
		СоставСтроки.Вставить("КодОперации", КодОперации);
	Иначе
		КодОперации=РасшифровкаДанныхПокупателя.КодВидаОперации;
		Если НЕ ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если РасшифровкаДанныхПокупателя.Событие=Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС Тогда
				КодОперации="21";	
			КонецЕсли;	
		КонецЕсли;
		СоставСтроки.Вставить("КодОперации", КодОперации);
	КонецЕсли;
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Покупатель) Тогда
		СоставСтроки.Вставить("Покупатель",    РасшифровкаДанныхПокупателя.Покупатель);
		СоставСтроки.Вставить("ПокупательИНН", РасшифровкаДанныхПокупателя.ПокупательИНН);
		СоставСтроки.Вставить("ПокупательКПП", РасшифровкаДанныхПокупателя.ПокупательКПП);
		СоставСтроки.Вставить("Графа8", Строка(РасшифровкаДанныхПокупателя.ПокупательИНН)+?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПокупательКПП), "/" + Строка(РасшифровкаДанныхПокупателя.ПокупательКПП), ""));
		СоставСтроки.Вставить("Посредник", РасшифровкаДанныхПокупателя.Посредник);
		СоставСтроки.Вставить("ПосредникИНН_КПП", ""+Строка(РасшифровкаДанныхПокупателя.ПосредникИНН)+?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПосредникКПП), "/" + Строка(РасшифровкаДанныхПокупателя.ПосредникКПП), ""));
	КонецЕсли;
	
	СоставСтроки.Вставить("Валюта", ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта), "" + РасшифровкаДанныхПокупателя.Валюта + ", " + РасшифровкаДанныхПокупателя.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте", ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта), РасшифровкаДанныхПокупателя.ВсегоПродажВВалюте, ""));
	СоставСтроки.Вставить("ДатаНомер", ВариантыПредставленияСФ.ДатаНомер);
	СоставСтроки.Вставить("НомерДата", ВариантыПредставленияСФ.НомерДата);
	СоставСтроки.Вставить("НомерОтДата",ВариантыПредставленияСФ.НомерОтДата);
	
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.СчетФактура) Тогда
		ИдентификаторСтроки = Строка(РасшифровкаДанныхПокупателя.СчетФактура.УникальныйИдентификатор());
		СтрокаДополнительнойИнформации = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[ИдентификаторСтроки];
		Если СтрокаДополнительнойИнформации <> Неопределено И СтрокаДополнительнойИнформации.Строки.Количество() <> 0 Тогда
			СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли; 
	Иначе
		СтрокаДополнительнойИнформации = Неопределено;
	КонецЕсли;
	
	
	СтруктураВозврата=ОпределитьДатуИНомерСФКорректировки(ЗаписьКниги, СтруктураПараметров);
	
	СоставСтроки.Вставить("НомерДатаИсправления", СтруктураВозврата.НомерДатаИсправления);
	СоставСтроки.Вставить("НомерДатаКорректировки", СтруктураВозврата.НомерДатаКорректировки);
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", СтруктураВозврата.НомерДатаИсправленияКорректировки);
	
	СоставСтроки.Вставить("НомерОтДатаИсправленный", СтруктураВозврата.НомерОтДатаИсправленный);
	СоставСтроки.Вставить("НомерОтДатаКорректировочный", СтруктураВозврата.НомерОтДатаКорректировочный);
	СоставСтроки.Вставить("НомерОтДатаИсправленныйКорректировочный", СтруктураВозврата.НомерОтДатаИсправленныйКорректировочный);
	
	МассивДокПдтвОпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	ТекстНомерОтДатаОплаты = "";
	
	СписокНомеровИДатОплат = Новый СписокЗначений();
	
	Если ЭтоДетальнаяЗапись Тогда 
		
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
				+ Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			НомерОтДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + " от " + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
				
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС)+ НомерДатаОплаты;
				ТекстНомерОтДатаОплаты = ТекстНомерОтДатаОплаты + ?(НЕ ЗначениеЗаполнено(ТекстНомерОтДатаОплаты), "", ";" + Символы.ПС) + НомерОтДатаОплаты;
				
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				
				СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
				СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКниги.НомерДокументаОплаты;
				СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				
			КонецЕсли;
		КонецЕсли;  // Коля
		
	Иначе
		
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
					+ Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				НомерОтДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + " от " + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС)+НомерДатаОплаты;
					ТекстНомерОтДатаОплаты = ТекстНомерОтДатаОплаты + ?(НЕ ЗначениеЗаполнено(ТекстНомерОтДатаОплаты), "", ";" + Символы.ПС) + НомерОтДатаОплаты;
					
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
					
					СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
					СтруктураДокПдтвОпл.НомДокПдтвОпл = СтрокаЗаписи.НомерДокументаОплаты;
					СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
					МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				КонецЕсли;
			КонецЕсли; //Коля
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверим наличие дополнительных дат оплат	
	Если НЕ СтрокаДополнительнойИнформации = Неопределено И ТипЗнч(СтрокаДополнительнойИнформации.ДатыОплаты) = Тип("Массив") Тогда
		Для Каждого ТекущаяДатаОплаты Из СтрокаДополнительнойИнформации.ДатыОплаты Цикл
			Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("НомерОтДатаОплаты", ТекстНомерОтДатаОплаты);
	СоставСтроки.Вставить("ДатаОплаты",      ТекстОплаты);
	
	// ТНВЭД
	СтрокаКодВидаТовара = "";
	ДополнительнаяИнформацияТНВЭД=ПолучитьДополнительнуюИнформациюПоСчетуФактуреТНВЭД(СоставСтроки.СчетФактура);
	Если НЕ ДополнительнаяИнформацияТНВЭД.Количество()=0 Тогда
		СоставСтроки.Вставить("КодВидаТовара", ДополнительнаяИнформацияТНВЭД[0].ТНВЭД);
		СтрокаКодВидаТовара = ДополнительнаяИнформацияТНВЭД[0].ТНВЭД;
	Иначе
		СоставСтроки.Вставить("КодВидаТовара", "");
	КонецЕсли;
	
	МассивКодВидаТовара = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКодВидаТовара, ";");

	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", НомерСтроки);
		
		СоставСтроки.Вставить("НомСчФПрод",  ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ",  СтруктураВозврата.НомерИсправления);
		СоставСтроки.Вставить("ДатаИспрСчФ", СтруктураВозврата.ДатаИсправления);
		
		СоставСтроки.Вставить("НомКСчФПрод",  СтруктураВозврата.НомерКорректировки);
		СоставСтроки.Вставить("ДатаКСчФПрод", СтруктураВозврата.ДатаКорректировки);
		
		СоставСтроки.Вставить("НомИспрКСчФ",  СтруктураВозврата.НомерИсправленияКорректировки);
		СоставСтроки.Вставить("ДатаИспрКСчФ", СтруктураВозврата.ДатаИсправленияКорректировки);
		
		СоставСтроки.Вставить("ОКВ", Строка(ПараметрыЗаполнения.ВалютаКод));
		
		Если НЕ ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.КодВидаОперации) Тогда
			КодОперации="01";
			Если ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				КодОперации="01";
			ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				КодОперации="23";
			ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.РеализацияТоваровУслуг") И РасшифровкаДанныхПокупателя.СчетФактураДокумент=РасшифровкаДанныхПокупателя.СчетФактура Тогда
				КодОперации="26";	
			ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ОтчетОРозничныхПродажах") И РасшифровкаДанныхПокупателя.СчетФактураДокумент=РасшифровкаДанныхПокупателя.СчетФактура Тогда
				КодОперации="26";	
			ИначеЕсли ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ВосстановлениеНДС") Тогда
				КодОперации="21";	
			КонецЕсли;	
			МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодОперации, ";");
		Иначе
			КодОперации=РасшифровкаДанныхПокупателя.КодВидаОперации;
			Если НЕ ТипЗнч(РасшифровкаДанныхПокупателя.СчетФактура)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				Если РасшифровкаДанныхПокупателя.Событие=Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС Тогда
					КодОперации="21";	
				КонецЕсли;	
			КонецЕсли;
			МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодОперации, ";");
		КонецЕсли;
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		СоставСтроки.Вставить("ДокПдтвОпл", МассивДокПдтвОпл);
		
		// Сведения о покупателе
		
		МассивСвПок = Новый Массив();
		
		Если СоставСтроки.Свойство("ПокупательИНН") И НЕ ПустаяСтрока(СоставСтроки.ПокупательИНН) Тогда
			МассивСвПок.Добавить(ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.Контрагент, ПараметрыЗаполнения.ПокупательИНН, ПараметрыЗаполнения.ПокупательКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СвПокуп", МассивСвПок);
		
		// Сведения о посреднике
		
		Если СоставСтроки.Свойство("Посредник")	И НЕ ПустаяСтрока(РасшифровкаДанныхПокупателя.ПосредникИНН) Тогда
			СоставСтроки.Вставить("СвПос", ПолучитьСтруктуруРеквизитовКонтрагента(РасшифровкаДанныхПокупателя.Посредник, РасшифровкаДанныхПокупателя.ПосредникИНН, РасшифровкаДанныхПокупателя.ПосредникКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СтоимПродСФВ",  ЗаписьКниги.ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтоимПродСФ",   ЗаписьКниги.ВсегоПродаж);
		СоставСтроки.Вставить("СтоимПродСФ18", ЗаписьКниги.СуммаБезНДС18);
		СоставСтроки.Вставить("СтоимПродСФ20", ЗаписьКниги.СуммаБезНДС20);
		СоставСтроки.Вставить("СтоимПродСФ10", ЗаписьКниги.СуммаБезНДС10);
		СоставСтроки.Вставить("СтоимПродСФ0",  ЗаписьКниги.НДС0);
		СоставСтроки.Вставить("СумНДССФ18",    ЗаписьКниги.НДС18);
		СоставСтроки.Вставить("СумНДССФ10",    ЗаписьКниги.НДС10);
		СоставСтроки.Вставить("СумНДССФ20",    ЗаписьКниги.НДС20);
		СоставСтроки.Вставить("СтоимПродОсв",  ЗаписьКниги.СуммаСовсемБезНДС);
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел91.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел9.Добавить();
		КонецЕсли;
		
		Если СтруктураПараметров.ПравилаЗаполнения = "2019Кв1" Тогда
			СоставСтроки.Вставить("КодВидТовар", МассивКодВидаТовара);
		КонецЕсли;

		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур, ЗаписьДополнительногоЛиста = Ложь)
	
	// Определить частичные оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДСОборот + НДСЗаписиКнигиПродаж.НДСОборот) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты))) КАК НДСЗаписиКнигиПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СписокСчетовФактур",  СписокСчетовФактур);
	
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//*** ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;
	
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор()), СтрокаИнформации);
		КонецЕсли; 
	КонецЦикла; 
	
	// дополняем информацию датами оплаты,
	// отраженными в регистре записей книг отдельно от сумм
	
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И ВЫБОР
	|			КОГДА &ЗаписьДополнительногоЛиста
	|					И &ДополнительныеЛистыЗаТекущийПериод
	|				ТОГДА НДСЗаписиКнигиПродаж.Период >= &НачалоПериода
	|						И (НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И НДСЗаписиКнигиПродаж.СчетФактура В(&СписокСчетовФактур)
	|	И НДСЗаписиКнигиПродаж.СуммаБезНДС = 0
	|	И НДСЗаписиКнигиПродаж.НДС = 0
	|	И НЕ ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", ЗаписьДополнительногоЛиста);
	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиИнформацииСФ = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
		Если СтрокиИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
		Иначе
			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
		КонецЕсли; 
		
		Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
			СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ДополнительнаяИнформацияПоСФ;
	
КонецФункции // ПолучитьДополнительнуюИнформациюПоСФ()

&НаСервере
Процедура ПреобразоватьЗаписиКнигиПродаж(
	СтруктураПараметров, НаборЗаписей, ТабДокумент = Неопределено,
	СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено,
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено)
	
	ЕстьЗаписиПоКолонке20 = Ложь;
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
	
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур);
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = СтруктураСекций.СекцияКонтрагент;
		СекцияВсегоКонтрагент = СтруктураСекций.СекцияВсегоКонтрагент;
	КонецЕсли;
	
	Счетчик = 0; // Счетчик строк книги продаж
	СчетчикСтрокТекущегоСегмента = 0; // Используется для сегментирования разделов декларации по НДС
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл 
			СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабДокумент.Вывести(СекцияКонтрагент);
			ТабДокумент.НачатьГруппуСтрок();
			Для Каждого НалоговыеПериоды Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
					Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
						Для Каждого ЗаписьКниги  Из ИтогПоДокументу.Строки Цикл
							
							//Если ЗаписьКниги.СводныйКорректировочный Тогда
							//	Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
							//		Счетчик = Счетчик + 1;
							//		ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик);
							//		ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							//	КонецЦикла;
							//	
							//ИначеЕсли ЗаписьКниги.СводныйКомиссионный Тогда
							//	
							//	Счетчик = Счетчик + 1;
							//	ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги.Строки, СтруктураПараметров, ПараметрыСтроки, Счетчик);
							//	ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							//	
							//Иначе
							Счетчик = Счетчик + 1;
							ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
							ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							//КонецЕсли;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
			СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабДокумент.Вывести(СекцияВсегоКонтрагент);
		КонецЦикла;
		
	Иначе
		
		Для Каждого НалоговыеПериоды Из ИтогПоОрганизации.Строки Цикл
			Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
				Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
					Для Каждого ЗаписьКниги Из ИтогПоДокументу.Строки Цикл
						
						Если ЗаписьКниги.Строки.Количество() > 1 И ЗаписьКниги.Покупатель = "Розничная продажа" Тогда
							//Если ЗаписьКниги.Строки.Количество() > 1 И ЗаписьКниги.Покупатель = "Розничная продажа" ИЛИ ЗаписьКниги.СводныйКорректировочный Тогда Коля
							ЭтоДетальнаяЗапись = Ложь;
							Если ЗаписьКниги.Покупатель = "Розничная продажа" Тогда
								ЭтоДетальнаяЗапись = Истина;
							Иначе
								ЭтоДетальнаяЗапись = ЕстьЗаписиПоКолонке20;
							КонецЕсли;
							
							Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
								Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								Счетчик = Счетчик + 1;
								СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1; 
								
								ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик);
								
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
									СтруктураСекций.СекцияСтрока.Область(1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + ПараметрыСтроки.Ном;
									ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								КонецЕсли;
								
								Если СтруктураПараметров.ЗаполнениеДекларации 
									И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
									
									// Запишем сегмент
									ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
									
									РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
									СтруктураПараметров.СсылкаНаДекларацию,
									"Раздел9",
									ПерваяСтрокаСегмента,
									СтруктураПараметров.ТаблицаРаздел9);
									
									РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
									СтруктураПараметров.СсылкаНаДекларацию,
									"Раздел9",
									ПерваяСтрокаСегмента,
									ТабДокумент);
									
									// Очистим табличный документ и таблицу
									ТабДокумент.Очистить();
									ТабДокумент.Вывести(СтруктураСекций.ШапкаРаздел9);
									ТабДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
									
									СтруктураПараметров.ТаблицаРаздел9.Очистить();
									
									// Обнулим счетчик текущего сегмента
									СчетчикСтрокТекущегоСегмента = 0;
									
								КонецЕсли;
								
								
							КонецЦикла;
							
							//ИначеЕсли ЗаписьКниги.СводныйКомиссионный Тогда Коля
							//	
							//	Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
							//		ПараметрыСтроки = ТаблицаДокумента.Добавить();
							//	КонецЕсли;
							//	
							//	Счетчик = Счетчик + 1;
							//	ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги.Строки, СтруктураПараметров, ПараметрыСтроки, Счетчик);
							//	
							//	Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
							//		СтруктураСекций.СекцияСтрока.Область(1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + ПараметрыСтроки.Ном;
							//		ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							//	КонецЕсли;
							
						Иначе
							
							Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;
							
							Счетчик = Счетчик + 1;
							СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1; 
							
							ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
								СтруктураСекций.СекцияСтрока.Область(1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + ПараметрыСтроки.Ном;
								ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
							Если СтруктураПараметров.ЗаполнениеДекларации 
								И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
								
								// Запишем сегмент
								ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
								
								РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
								СтруктураПараметров.СсылкаНаДекларацию,
								"Раздел9",
								ПерваяСтрокаСегмента,
								СтруктураПараметров.ТаблицаРаздел9);
								
								РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
								СтруктураПараметров.СсылкаНаДекларацию,
								"Раздел9",
								ПерваяСтрокаСегмента,
								ТабДокумент);
								
								// Очистим табличный документ и таблицу
								ТабДокумент.Очистить();
								ТабДокумент.Вывести(СтруктураСекций.ШапкаРаздел9);
								ТабДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
								
								СтруктураПараметров.ТаблицаРаздел9.Очистить();
								
								// Обнулим счетчик текущего сегмента
								СчетчикСтрокТекущегоСегмента = 0;
								
							КонецЕсли;
							
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		Если СтруктураПараметров.ЗаполнениеДекларации Тогда
			СтруктураПараметров.Вставить("СчетчикСтрокТекущегоСегмента", СчетчикСтрокТекущегоСегмента);
			СтруктураПараметров.Вставить("Счетчик", Счетчик);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаписиДополнительныхЛистовКнигиПродаж(СписокСчетовФактур, СтруктураПараметров)
	
	// Создаем общий запрос
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ) ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|			ИЛИ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
	//|			ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда) ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
	|			ИЛИ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,	
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	//	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР 
	|			КОГДА НДСЗаписиКнигиПродаж.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродаж.КодВидаОперации=""34"" 
	|				ТОГДА 0 
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС 
	|		КОНЕЦ) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			КОГДА (НДСЗаписиКнигиПродаж.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродаж.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродаж.Период)>2018
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	//|	СУММА(ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	//|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			КОГДА (НДСЗаписиКнигиПродаж.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродаж.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродаж.Период)<2019
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС И НЕ НДСЗаписиКнигиПродаж.КодВидаОперации=""33"" И НЕ НДСЗаписиКнигиПродаж.КодВидаОперации=""34"" 
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровУслугНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровУслугНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровУслугНДС
	//|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровУслугНДС
	//|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	//|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК Период,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации КАК КодВидаОперации,
	
	
	//*********************************
	//*********************************
	//*********************************
	|	ВЫБОР КОГДА НДСЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ПлатежноеПоручениеВходящее ИЛИ НДСЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ДокументРасчетовСКонтрагентом ТОГДА
	|		ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДокументОплаты.НомерВходящегоДокумента,"""")
	|	ИНАЧЕ 
	|		ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДокументОплаты.Номер,"""") КОНЕЦ КАК НомерДокументаОплаты, 
	|	ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДокументОплаты.Дата,"""") КАК ДатаДокументаОплаты
	//*********************************
	//*********************************
	//*********************************
	
	//|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация =&Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = ИСТИНА
	|	И НДСЗаписиКнигиПродаж.Активность
	//	|	И (НДСЗаписиКнигиПродаж.СтавкаНДС <> &СтавкаБезНДС
	//|	И (&ОтражатьРеализацииБезНДС
	//|			ИЛИ НДСЗаписиКнигиПродаж.КорректируемыйПериод <= ДАТАВРЕМЯ(2014, 10, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	//|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	//***|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровУслугНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровУслугНДС
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|			ТОГДА НЕОПРЕДЕЛЕНО
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровУслугНДС
	//|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровУслугНДС
	//|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	//|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	//|			КОНЕЦ
	//|	КОНЕЦ,
	
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ) ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|			ИЛИ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
	//|			ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда) ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
	|			ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
	|			ИЛИ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,	
	|	НДСЗаписиКнигиПродаж.КодВидаОперации,
	
	//*********************************
	//*********************************
	//*********************************
	|	ВЫБОР КОГДА НДСЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ПлатежноеПоручениеВходящее ИЛИ НДСЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ДокументРасчетовСКонтрагентом ТОГДА
	|		ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДокументОплаты.НомерВходящегоДокумента,"""")
	|	ИНАЧЕ 
	|		ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДокументОплаты.Номер,"""") КОНЕЦ, 
	|	ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДокументОплаты.Дата,""""),
	//*********************************
	//*********************************
	//*********************************
	
	|	НДСЗаписиКнигиПродаж.Покупатель	
	|";
	
	//Если СтруктураПараметров.ЗаполнениеДокумента 
	//	ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда
	//	
	//	// Учитывается как корректируемый период, так и дата оформления дополнительного листа
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
	//	"ЗаписьДополнительногоЛиста = ИСТИНА 
	//	|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоНалоговогоПериода 
	//	|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецНалоговогоПериода");
	//	
	//КонецЕсли;	
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период МЕЖДУ &НачалоПериода И &КонецПериода", "Период >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
		"ЗаписьДополнительногоЛиста = ИСТИНА 
		|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоНалоговогоПериода 
		|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецНалоговогоПериода");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	//	ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос);
	ПолучитьСчетаФактурыДокументы(Запрос);
	Запрос.УстановитьПараметр("ВалютаПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	//|		ЗаписиКнигиПродаж.СчетФактура.Контрагент 
	//|	ИНАЧЕ
	|	     ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный) ТОГДА
	|	   	 	 ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	|	   		       ПОДСТРОКА(ЗаписиКнигиПродаж.СчетФактура.ДокументОснование.Контрагент.НаименованиеПолное, 1, 250)
	|	  	 	  КОНЕЦ
	//	|	   	  КОНЕЦ
	|	КОНЕЦ КАК Посредник, 
	//|	ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	//|		ЗаписиКнигиПродаж.СчетФактура.Контрагент.ИНН 
	//|	ИНАЧЕ
	|	     ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный) ТОГДА
	|	   	 	 ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	|	   		       ЗаписиКнигиПродаж.СчетФактура.ДокументОснование.Контрагент.ИНН
	|	  	 	  КОНЕЦ
	//|	   	  КОНЕЦ
	|	КОНЕЦ КАК ПосредникИНН, 
	//|	ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	//|		ЗаписиКнигиПродаж.СчетФактура.Контрагент.ИНН 
	//|	ИНАЧЕ
	|	     ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный) ТОГДА
	|	   	 	 ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	|	   		       ЗаписиКнигиПродаж.СчетФактура.ДокументОснование.Контрагент.ИНН
	|	  	 	  КОНЕЦ
	//|	   	  КОНЕЦ
	|	КОНЕЦ КАК ПосредникКПП, 
	|   ВЫБОР КОГДА ЗаписиКнигиПродаж.КодВидаОперации="""" ТОГДА
	|		ЕСТЬNULL(ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации, ЗаписиКнигиПродаж.СчетФактура.КодВидаОперации),"""") 
	|	ИНАЧЕ 
	|		ЗаписиКнигиПродаж.КодВидаОперации 
	|	КОНЕЦ КАК КодВидаОперации,
	//	|   ЕСТЬNULL(ЕСТЬNULL(ЗаписиКнигиПродаж.КодВидаОперации, ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации, ЗаписиКнигиПродаж.СчетФактура.КодВидаОперации)),"""") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПродаж.ВсегоПродаж
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.СчетФактура.Дата КАК СчетФактураДата,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	
	//|	ЕСТЬNULL(ВЫБОР
	//|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	//|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	//|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	//|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	//|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	//|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	
	|	ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.Контрагент КАК Контрагент,
	|	ЗаписиКнигиПродаж.Контрагент.ИНН КАК ПокупательИНН,
	|	ЗаписиКнигиПродаж.Контрагент.КПП КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
	|			ТОГДА ""Розничная продажа""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ЗаписиКнигиПродаж.Контрагент.Наименование
	|				ИНАЧЕ ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.КорректируемыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|				И ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) =  &ВалютаПоУмолчанию
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(-ЗаписиКнигиПродаж.ВсегоПродаж,0)
	|					ИНАЧЕ ЕСТЬNULL(ЗаписиКнигиПродаж.ВсегоПродаж,0)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА (ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу) И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""33"" И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""34""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПродаж.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА (ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу) И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""33"" И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""34"" 
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.Период КАК ДатаОформления,
	//|	ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	////|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	////|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	////|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	////|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	////|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	////|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	////|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	////|	ВЫБОР
	////|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	////|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	////|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	////|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	////|			ТОГДА ИСТИНА
	////|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ)
	////|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	
	
	//*********************************
	//*********************************
	//*********************************
	|	ВЫБОР КОГДА ЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ПлатежноеПоручениеВходящее ИЛИ ЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ДокументРасчетовСКонтрагентом ТОГДА
	|		ЕСТЬNULL(ЗаписиКнигиПродаж.ДокументОплаты.НомерВходящегоДокумента,"""")
	|	ИНАЧЕ 
	|		ЕСТЬNULL(ЗаписиКнигиПродаж.ДокументОплаты.Номер,"""") КОНЕЦ КАК НомерДокументаОплаты, 
	|	ЕСТЬNULL(ЗаписиКнигиПродаж.ДокументОплаты.Дата,"""") КАК ДатаДокументаОплаты,
	//*********************************
	//*********************************
	//*********************************
	
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия
	////|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	////|	ВЫБОР
	////|		КОГДА ЗаписиКнигиПродаж.КодВидаОперации <> """"
	////|			ТОГДА ЗаписиКнигиПродаж.КодВидаОперации
	////|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"")
	////|	КОНЕЦ КАК КодВидаОперации,
	////|	ВЫБОР
	////|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	////|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	////|		ИНАЧЕ """"
	////|	КОНЕЦ КАК Валюта,
	////|	ВЫБОР
	////|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	////|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	////|		ИНАЧЕ """"
	////|	КОНЕЦ КАК ВалютаКод,
	////|	ВЫБОР
	////|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	////|			ТОГДА ВЫБОР
	////|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	////|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	////|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	////|				КОНЕЦ
	////|		ИНАЧЕ 0
	////|	КОНЕЦ КАК ВсегоПродажВВалюте,
	////|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	////|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	////|	ТаблицаСчетаФактурыДокументы.Посредник,
	////|	ТаблицаСчетаФактурыДокументы.ПосредникИНН,
	////|	ТаблицаСчетаФактурыДокументы.ПосредникКПП,
	////|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКомиссионный, ЛОЖЬ) КАК СводныйКомиссионный
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|			ПО ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	//|		ПО (ВЫБОР
	//|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	//|					ТОГДА ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактураДокумент
	//|				ИНАЧЕ ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	//|			КОНЕЦ)
	|			И ЗаписиКнигиПродаж.ДоговорКонтрагента = Приоритеты.ДоговорКонтрагента
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура
	//|		ПО (ВЫБОР
	//|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	//|					ТОГДА Приоритеты.СчетФактураДокумент = ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	//|				ИНАЧЕ Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура
	//|			КОНЕЦ)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорКонтрагента = ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА 
	//|						ВЫБОР
	//|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	//|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	//|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	//|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	//|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	//|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	//|						ИНАЧЕ ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|						ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	//|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДата,
	//	|	СторнирующаяЗаписьДопЛиста УБЫВ,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА МАКСИМУМ(ВсегоПродаж)
	|		ИНАЧЕ СУММА(ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС20),
	|	СУММА(НДС20),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС)
	//|	МАКСИМУМ(СводныйКорректировочный),
	//|	МАКСИМУМ(НомерДокументаОплаты),
	//|	МАКСИМУМ(ДатаДокументаОплаты),
	//|	МАКСИМУМ(СводныйКомиссионный)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактура,
	|	ДоговорКонтрагента";
	//|	СторнирующаяЗаписьДопЛиста";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
		|	НалоговыйПериод,
		|	ДатаОформления,", "ПО
		|	НалоговыйПериод,
		|	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеДопЛистовКнигиПродаж(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДопЛисты,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод
	//|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод
	//|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&НачалоПериода
	//|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И КорректируемыйПериод >= &НачалоПериода
	|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС
	//|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация"	, СтруктураПараметров.СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьИтогиЗаПериодКнигаПродаж(СтруктураПараметров)
	
	// Создаем общий запрос                                       
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.ВсегоПродаж), 0) КАК ВсегоПродаж,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС20), 0) КАК СуммаБезНДС20,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС20), 0) КАК НДС20,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|	ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"" 
	|			ТОГДА 0 
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|		КОНЕЦ КАК ВсегоПродаж,
//	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ВсегоПродаж,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20) И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			КОГДА (НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродажОбороты.ПериодДень)>2018
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС20,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС20,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18) И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			КОГДА (НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродажОбороты.ПериодДень)<2019
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
//			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС И НЕ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" И НЕ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"" 
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			Организация В (&Организация)
	|			    И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)) КАК НДСЗаписиКнигиПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
//	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"" 
	|			ТОГДА 0 
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|		КОНЕЦ,
	//|		ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20) И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	//|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	//|			ИНАЧЕ 0
	//|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20) И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			КОГДА (НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродажОбороты.ПериодДень)>2018
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	//|		ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	//|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	//|			ИНАЧЕ 0
	//|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18) И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			КОГДА (НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродажОбороты.ПериодДень)<2019
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс))
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	//|		ВЫБОР
	//|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	//|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	//|			ИНАЧЕ 0
	//|		КОНЕЦ
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС И НЕ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" И НЕ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"" 
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&МоментФормированияДопЛиста,
	|			Авто,
	|			Организация В (&Организация)
	|			    И (ЗаписьДополнительногоЛиста = ИСТИНА
	|			        И КорректируемыйПериод >= &НачалоПериода
	|			        И КорректируемыйПериод <= &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК ЗаписиКнигиПродаж";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста),ВидГраницы.Исключая));
	
	СтавкиНДС20 = новый массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"		, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);
	
	ВидыЦенностей_Аванс = новый массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//*** ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	// Для итогов авансы можно учитывать вместе с выделенными суммовыми разницами - методика отражения в книге одинаковая
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		Возврат ИтогЗаПериод.Выгрузить()[0];
	КонецЕсли;
	
	ИтогЗаПериод = Новый Структура;
	ИтогЗаПериод.Вставить("ВсегоПродаж", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("СуммаБезНДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("НДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Возврат ИтогЗаПериод;
КонецФункции

&НаСервере
Процедура ВывестиШапкуДопЛиста(ТабДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста)
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");	
		ТабДокумент.Вывести(Секция);	
	КонецЕсли;	
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
	
	СведенияОбОрганизации = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(Организация);
	
	НазваниеОрганизации = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");;
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент " + ?(СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа, "в группе ", "= ") + СтруктураПараметров.КонтрагентДляОтбора;
	КонецЕсли;
	
	ТабДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИменаДокументовСДаннымиСФ()
	
	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если УправлениеМетаданными.ЕстьРеквизит("ПредъявленСчетФактура", Документ) Тогда
			ИменаДокументов.Добавить(Документ.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаДокументов;
	
КонецФункции

&НаСервере
Процедура ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос)
	СчетФактураПоРозничнымПродажам=Ложь;
	
	Запрос.УстановитьПараметр("СчетаФактура_НаАванс", Перечисления.НДСВидСчетаФактуры.НаАванс);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыДокументы.СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорКонтрагента Как ДоговорАванса,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.Приоритет
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+?(СчетФактураПоРозничнымПродажам,"
	|			ВЫБРАТЬ
	|			ПриходныйКассовыйОрдер.Ссылка КАК СчетФактура,
	|			ПриходныйКассовыйОрдер.Номер КАК НомерСчетаФактуры,
	|			ПриходныйКассовыйОрдер.Дата КАК ДатаСчетаФактуры,
	|			ПриходныйКассовыйОрдер.Ссылка КАК СчетФактураДокумент,
	|			ЛОЖЬ КАК НаАванс,
	|			НЕОПРЕДЕЛЕНО КАК СтавкаНДСАванса,
	|			НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|			2 КАК Приоритет
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ГДЕ
	|			ПриходныйКассовыйОрдер.Проведен
	|			И (НЕ ПриходныйКассовыйОрдер.ПометкаУдаления)
	|			И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
	|			И ПриходныйКассовыйОрдер.Организация =&Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ "," ВЫБРАТЬ
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактура,
	|			ОтчетОРозничныхПродажах.Номер КАК НомерСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Дата КАК ДатаСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактураДокумент,
	|			ЛОЖЬ КАК НаАванс,
	|			НЕОПРЕДЕЛЕНО КАК СтавкаНДСАванса,
	|			НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|			6 КАК Приоритет
	|		ИЗ
	|			Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ГДЕ
	|			ОтчетОРозничныхПродажах.Проведен
	|			И (НЕ ОтчетОРозничныхПродажах.ПометкаУдаления)
	|			И ОтчетОРозничныхПродажах.Организация =&Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ПриходныйКассовыйОрдер.Номер,
	|			ПриходныйКассовыйОрдер.Дата,
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			2
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ГДЕ
	|			ПриходныйКассовыйОрдер.Проведен
	|			И (НЕ ПриходныйКассовыйОрдер.ПометкаУдаления)
	|			И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
	|			И ПриходныйКассовыйОрдер.Организация=&Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ ")+"
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданный.ДокументОснование,
	|			СчетФактураВыданный.Ссылка.Номер,
	|			СчетФактураВыданный.Ссылка.Дата,
	|			СчетФактураВыданный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ВЫБОР
	|						КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			3
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И (НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления)
	|			И СчетФактураВыданный.Ссылка.Организация=&Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураПолученный.ДокументОснование,
	|			СчетФактураПолученный.Ссылка.Номер,
	|			СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента,
	|			СчетФактураПолученный.Ссылка,
	|			СчетФактураПолученный.Ссылка.ВидСчетаФактуры,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			4
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураПолученный.Ссылка.Проведен
	|			И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	|			И СчетФактураПолученный.Ссылка.Организация=&Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			5
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И (НЕ ГТДИмпорт.ПометкаУдаления)
	|			И ГТДИмпорт.Организация=&Организация) КАК СчетаФактурыДокументы
	|		ПО ЗаписиКнигиПродаж.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|";
	
	//|			И (ВЫБОР
	//|				КОГДА ЗаписиКнигиПродаж.НаАванс
	//|					ТОГДА СчетаФактурыДокументы.НаАванс = &СчетаФактура_НаАванс
	//|							И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	//|							И ЗаписиКнигиПродаж.ДоговорКонтрагента = СчетаФактурыДокументы.ДоговорКонтрагента
	//|				ИНАЧЕ (НЕ СчетаФактурыДокументы.НаАванс= &СчетаФактура_НаАванс)
	//|			КОНЕЦ)";
	
	
	Запрос.Выполнить();
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода"	, СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПродавцовПоАвансам", СтруктураПараметров.ВыводитьПродавцовПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета",		Константы.ВалютаРегламентированногоУчета.Получить());
	
	ДатаПроверкиПараметровУчета ='00010101';
	
	Если СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда 
		//И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;
	Иначе
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;
	КонецЕсли;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаПроверкиПараметровУчета, Ложь, СтруктураПараметров.Организация);
	ПрименяетсяОсвобождениеОтУплатыНДС = Ложь; // Коля УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ПравилаПостановления735", Истина);
	ОтражатьРеализацииБезНДС = ДатаПроверкиПараметровУчета < '20141001' ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ОтражатьРеализацииБезНДС", ОтражатьРеализацииБезНДС);
	
	СтавкиНДС20 = Новый Массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20", СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0", СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	//	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	//	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ", ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//*** ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс", ВидыЦенностей_Аванс);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//**** ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные", ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_СуммоваяРазница = Новый Массив;
	ВидыЦенностей_СуммоваяРазница.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница", ВидыЦенностей_СуммоваяРазница);
	////////Запрос.УстановитьПараметр("ПКО_РозничнаяВыручка", Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
КонецПроцедуры

&НаСервере
Процедура ПолучитьСчетаФактурыДокументы(Запрос)
	СчетФактураПоРозничнымПродажам=Ложь; //Коля
	
	Запрос.УстановитьПараметр("СчетаФактура_НаАванс", Перечисления.НДСВидСчетаФактуры.НаАванс);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыДокументы.СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорКонтрагента,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.Приоритет
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ("+?(СчетФактураПоРозничнымПродажам,"
	|			ВЫБРАТЬ
	|			ПриходныйКассовыйОрдер.Ссылка КАК СчетФактура,
	|			ПриходныйКассовыйОрдер.Номер КАК НомерСчетаФактуры,
	|			ПриходныйКассовыйОрдер.Дата КАК ДатаСчетаФактуры,
	|			ПриходныйКассовыйОрдер.Ссылка КАК СчетФактураДокумент,
	|			ЛОЖЬ КАК НаАванс,
	|			НЕОПРЕДЕЛЕНО КАК СтавкаНДСАванса,
	|			НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|			2 КАК Приоритет
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ГДЕ
	|			ПриходныйКассовыйОрдер.Проведен
	|			И (НЕ ПриходныйКассовыйОрдер.ПометкаУдаления)
	|			И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
	|			И ПриходныйКассовыйОрдер.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ "," ВЫБРАТЬ
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактура,
	|			ОтчетОРозничныхПродажах.Номер КАК НомерСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Дата КАК ДатаСчетаФактуры,
	|			ОтчетОРозничныхПродажах.Ссылка КАК СчетФактураДокумент,
	|			ЛОЖЬ КАК НаАванс,
	|			НЕОПРЕДЕЛЕНО КАК СтавкаНДСАванса,
	|			НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|			6 КАК Приоритет
	|		ИЗ
	|			Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ГДЕ
	|			ОтчетОРозничныхПродажах.Проведен
	|			И (НЕ ОтчетОРозничныхПродажах.ПометкаУдаления)
	|			И ОтчетОРозничныхПродажах.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ПриходныйКассовыйОрдер.Номер,
	|			ПриходныйКассовыйОрдер.Дата,
	|			ПриходныйКассовыйОрдер.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			2
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ГДЕ
	|			ПриходныйКассовыйОрдер.Проведен
	|			И (НЕ ПриходныйКассовыйОрдер.ПометкаУдаления)
	|			И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
	|			И ПриходныйКассовыйОрдер.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ ")+"
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданный.ДокументОснование,
	|			СчетФактураВыданный.Ссылка.Номер,
	|			СчетФактураВыданный.Ссылка.Дата,
	|			СчетФактураВыданный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ВЫБОР
	|						КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			3
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И (НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления)
	|			И СчетФактураВыданный.Ссылка.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураПолученный.ДокументОснование,
	|			СчетФактураПолученный.Ссылка.Номер,
	|			СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента,
	|			СчетФактураПолученный.Ссылка,
	|			СчетФактураПолученный.Ссылка.ВидСчетаФактуры,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			4
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураПолученный.Ссылка.Проведен
	|			И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	|			И СчетФактураПолученный.Ссылка.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			5
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И (НЕ ГТДИмпорт.ПометкаУдаления)
	|			И ГТДИмпорт.Организация = &Организация) КАК СчетаФактурыДокументы
	|		ПО ЗаписиКнигиПродаж.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|";
	
	//|			И (ВЫБОР
	//|				КОГДА ЗаписиКнигиПродаж.НаАванс
	//|					ТОГДА СчетаФактурыДокументы.НаАванс = &СчетаФактура_НаАванс
	//|							И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	//|							И ЗаписиКнигиПродаж.ДоговорКонтрагента = СчетаФактурыДокументы.ДоговорКонтрагента
	//|				ИНАЧЕ (НЕ СчетаФактурыДокументы.НаАванс= &СчетаФактура_НаАванс)
	//|			КОНЕЦ)";
	
	
	Запрос.Выполнить();
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаписиКнигиПродаж(СписокСчетовФактур, СтруктураПараметров)
	Периодичность=Перечисления.Периодичность.Квартал;
	НаАванс=Ложь;
	
	НачалоПериода=СтруктураПараметров.НачалоПериода;
	КонецПериода=СтруктураПараметров.КонецПериода;
	Организация=СтруктураПараметров.Организация;
	СформироватьОтчетПоСтандартнойФорме=СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме;
	КонтрагентДляОтбора=СтруктураПараметров.КонтрагентДляОтбора;
	ОтбиратьПоКонтрагенту=СтруктураПараметров.ОтбиратьПоКонтрагенту;
	ГруппироватьПоКонтрагентам=СтруктураПараметров.ГруппироватьПоКонтрагентам;
	
	// Создаем запрос по счетам-фактурам
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", КонтрагентДляОтбора);
	
	СтавкиНДС20 = Новый Массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"	, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	//	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	//	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	//	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные) 
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
	//|			ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ТОГДА НДСЗаписиКнигиПродажОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродажОбороты.Период КАК Период,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	//	|	СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР 
	|			КОГДА НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"" 
	|				ТОГДА 0 
	|			ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот 
	|		КОНЕЦ) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			КОГДА (НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродажОбороты.Период)>2018 
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			КОГДА (НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34"") И ГОД(НДСЗаписиКнигиПродажОбороты.Период)<2019 
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС И НЕ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""33"" И НЕ НДСЗаписиКнигиПродажОбороты.КодВидаОперации=""34""
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродажОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.КодВидаОперации КАК КодВидаОперации,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Организация = &Организация
	|				И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)
	|				И ВЫБОР
	|					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|						ТОГДА Покупатель = &КонтрагентДляОтбора
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.Организация,
	|	НДСЗаписиКнигиПродажОбороты.Период,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
	//|			ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда) ИЛИ НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ИЛИ НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ТОГДА НДСЗаписиКнигиПродажОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродажОбороты.КодВидаОперации,
	
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура.Дата";
	
	Если Периодичность = Перечисления.Периодичность.Квартал Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "Квартал");
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументы(Запрос);
	
	Запрос.УстановитьПараметр("ВалютаПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Создаем общий запрос                                    
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	//|		ЗаписиКнигиПродаж.СчетФактура.Контрагент 
	//|	ИНАЧЕ
	|	     ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный) ТОГДА
	|	   	 	 ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	|	   		       ПОДСТРОКА(ЗаписиКнигиПродаж.СчетФактура.ДокументОснование.Контрагент.НаименованиеПолное, 1, 250)
	|	  	 	  КОНЕЦ
	//	|	   	  КОНЕЦ
	|	КОНЕЦ КАК Посредник, 
	//|	ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	//|		ЗаписиКнигиПродаж.СчетФактура.Контрагент.ИНН 
	//|	ИНАЧЕ
	|	     ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный) ТОГДА
	|	   	 	 ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	|	   		       ЗаписиКнигиПродаж.СчетФактура.ДокументОснование.Контрагент.ИНН
	|	  	 	  КОНЕЦ
	//|	   	  КОНЕЦ
	|	КОНЕЦ КАК ПосредникИНН, 
	//|	ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	//|		ЗаписиКнигиПродаж.СчетФактура.Контрагент.КПП 
	//|	ИНАЧЕ
	|	     ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ИЛИ (ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный) ТОГДА
	|	   	 	 ВЫБОР КОГДА (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ИЛИ (ЗаписиКнигиПродаж.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомитенту) ТОГДА
	|	   		       ЗаписиКнигиПродаж.СчетФактура.ДокументОснование.Контрагент.КПП
	|	  	 	  КОНЕЦ
	//|	   	  КОНЕЦ
	|	КОНЕЦ КАК ПосредникКПП, 
	|   ВЫБОР КОГДА ЗаписиКнигиПродаж.КодВидаОперации="""" ТОГДА
	|		ЕСТЬNULL(ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации, ЗаписиКнигиПродаж.СчетФактура.КодВидаОперации),"""") 
	|	ИНАЧЕ 
	|		ЗаписиКнигиПродаж.КодВидаОперации 
	|	КОНЕЦ КАК КодВидаОперации,
	//|   ЕСТЬNULL(ЕСТЬNULL(ЗаписиКнигиПродаж.КодВидаОперации, ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации, ЗаписиКнигиПродаж.СчетФактура.КодВидаОперации)),"""") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПродаж.ВсегоПродаж
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	ЗаписиКнигиПродаж.Период КАК НалоговыйПериод,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.Дата, &КонецПериода) >= ДАТАВРЕМЯ(2006, 1, 1)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке)
	|				ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаОрганизаций.МоментОпределенияНалоговойБазыНДС, ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке))
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.ДатаОплаты, ДЕНЬ)
	|	КОНЕЦ КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.СчетФактураДата КАК СчетФактураДата,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.Контрагент,
	|	ЗаписиКнигиПродаж.Контрагент.ИНН КАК ПокупательИНН,
	|	ЗаписиКнигиПродаж.Контрагент.КПП КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
	|			ТОГДА ""Розничная продажа""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА ЗаписиКнигиПродаж.Контрагент.Наименование
	|				ИНАЧЕ ПОДСТРОКА(ЗаписиКнигиПродаж.Контрагент.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Покупатель,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ВЫБОР КОГДА ЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ПлатежноеПоручениеВходящее ИЛИ ЗаписиКнигиПродаж.ДокументОплаты ССЫЛКА Документ.ДокументРасчетовСКонтрагентом ТОГДА
	|		ЕСТЬNULL(ЗаписиКнигиПродаж.ДокументОплаты.НомерВходящегоДокумента,"""")
	|	ИНАЧЕ 
	|		ЕСТЬNULL(ЗаписиКнигиПродаж.ДокументОплаты.Номер,"""") КОНЕЦ КАК НомерДокументаОплаты, 
	|	ЕСТЬNULL(ЗаписиКнигиПродаж.ДокументОплаты.Дата,"""") КАК ДатаДокументаОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	ЗаписиКнигиПродаж.ВсегоПродаж КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""33"" И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""34""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПродаж.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""33"" И НЕ ЗаписиКнигиПродаж.КодВидаОперации=""34""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.Дата, &КонецПериода) >= ДАТАВРЕМЯ(2006, 1, 1)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке)
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаОрганизаций.МоментОпределенияНалоговойБазыНДС, ЗНАЧЕНИЕ(Перечисление.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке))
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|		ПО ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПродаж.ДоговорКонтрагента = Приоритеты.ДоговорКонтрагента
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорКонтрагента = ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаОрганизаций
	|		ПО (УчетнаяПолитикаОрганизаций.Организация = ЗаписиКнигиПродаж.Организация)
	|			И (УчетнаяПолитикаОрганизаций.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаОрганизаций
	|				ГДЕ
	|					ЕСТЬNULL(ЗаписиКнигиПродаж.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаОрганизаций.Период
	|					И УчетнаяПолитикаОрганизаций.Организация = ЗаписиКнигиПродаж.Организация))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДата,
	|	СчетФактура,
	|	ДатаОплаты
	|ИТОГИ
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	СУММА(ВсегоПродаж),
	|	СУММА(СуммаБезНДС20),
	|	СУММА(НДС20),
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС)
	|ПО
	|	Организация,
	|	НалоговыйПериод,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДокумент,
	|	ДоговорКонтрагента";
	
	Если ГруппироватьПоКонтрагентам И Не СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
		|	Организация,", "ПО
		|	Организация, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;				   
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Процедура ПроверитьСчетФактурыНаДубли(СтруктураПараметров)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	1 КАК Мощность,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И СчетФактураВыданный.Проведен = ИСТИНА
	|	И СчетФактураВыданный.Организация = &Организация";
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(СтруктураПараметров.НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКонца",КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация",СтруктураПараметров.Организация);
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзДанные.Свернуть("ДокументОснование","Мощность");
	Для Каждого СтрокаТз ИЗ тзДанные Цикл
		Если СтрокаТз.Мощность=1 Тогда Продолжить; КонецЕсли;
		Сообщить("По документу "+СокрЛП(СтрокаТз.ДокументОснование)+" введено более одной счет-фактуры.");
	КонецЦикла;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////
// Обработчики команд

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="Сформировать" Тогда
		Если Не ЗначениеЗаполнено(Отчет.Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизит <<Организация>>!",,"Отчет.Организация"); Возврат;
		ИначеЕсли НЕ ПроверкаПериода() Тогда
			Возврат;
		КонецЕсли;
		
		СписокСообщений=СформироватьОтчет();
		Для Каждого Сообщение Из СписокСообщений Цикл
			Сообщить(Сообщение.Значение);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПериода()
	ПроверкаПройдена=Истина;
	Если Отчет.НачалоПериода > Отчет.КонецПериода Тогда
		ПоказатьПредупреждение(,"Неправильно задан период формирования отчета!"+Символы.ПС+"Дата начала больше даты окончания периода.");
		ПроверкаПройдена=Ложь;
	ИначеЕсли Отчет.НачалоПериода='00010101' Тогда
		ПоказатьПредупреждение(, "Не указана дата начала отчета");
		ПроверкаПройдена=Ложь;
	ИначеЕсли Отчет.КонецПериода='00010101' Тогда
		ПоказатьПредупреждение(, "Не указана дата конца отчета");
		ПроверкаПройдена=Ложь;
	КонецЕсли;
	Возврат ПроверкаПройдена;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ДополнительныеЛистыЗаТекущийПериод.Доступность = Отчет.ФормироватьДополнительныеЛисты;
	Элементы.ВыводитьТолькоДопЛисты.Доступность = Отчет.ФормироватьДополнительныеЛисты;
	Элементы.ВключаяОбособленныеПодразделения.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ОтбиратьПоКонтрагенту.Доступность = Не Отчет.СформироватьОтчетПоСтандартнойФорме;
	Элементы.КонтрагентДляОтбора.Доступность = Отчет.ОтбиратьПоКонтрагенту И Не Отчет.СформироватьОтчетПоСтандартнойФорме;
	Элементы.ГруппироватьПоКонтрагентам.Доступность = Не Отчет.СформироватьОтчетПоСтандартнойФорме;
	Элементы.ВыводитьПродавцовПоАвансам.Доступность = Не Отчет.СформироватьОтчетПоСтандартнойФорме;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	
	Если Элемент.Имя="ФормироватьДополнительныеЛисты" Тогда
		Если Не Отчет.ФормироватьДополнительныеЛисты И Отчет.ВыводитьТолькоДопЛисты Тогда
			Отчет.ВыводитьТолькоДопЛисты = Ложь;
		КонецЕсли;
		УстановитьВидимость();
		
	ИначеЕсли Элемент.Имя="СформироватьОтчетПоСтандартнойФорме" Тогда
		Отчет.СформироватьОтчетПоСтандартнойФорме=СформироватьОтчетПоСтандартнойФорме;
		Если Отчет.СформироватьОтчетПоСтандартнойФорме Тогда
			Если Отчет.ОтбиратьПоКонтрагенту Тогда
				Отчет.ОтбиратьПоКонтрагенту = Ложь;
			КонецЕсли;
			Если Отчет.ГруппироватьПоКонтрагентам Тогда
				Отчет.ГруппироватьПоКонтрагентам = Ложь;
			КонецЕсли;
			Если Отчет.ВыводитьПродавцовПоАвансам Тогда
				Отчет.ВыводитьПродавцовПоАвансам = Ложь;
			КонецЕсли;
		КонецЕсли;
		УстановитьВидимостьДоступность();
		
	ИначеЕсли Элемент.Имя="ОтбиратьПоКонтрагенту" Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Отчет.НачалоПериода = НачалоКвартала(ТекущаяДата());
	Отчет.КонецПериода = КонецКвартала(ТекущаяДата());
	Отчет.СкрытьКолонкиПоСтавке20 = Истина;
	СформироватьОтчетПоСтандартнойФорме=1;
	УстановитьВидимость();
	Атрибут_ПриИзменении(Элементы.СформироватьОтчетПоСтандартнойФорме);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отчет.Организация=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
КонецПроцедуры
