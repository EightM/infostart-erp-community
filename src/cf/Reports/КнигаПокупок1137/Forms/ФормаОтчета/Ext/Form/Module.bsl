

////////////////////////////////////////////////////////////////
// Процедуры формирования отчета

&НаСервере
Функция СформироватьОтчет()
	//ПанельРазделовКниги = ЭлементыФормы.ПанельРазделовКниги;
	//ОсновнойРаздел = ПанельРазделовКниги.Страницы.ОсновнойРаздел;
	//КоличествоОтображаемыхРазделов = Элементы.Страницы.ПодчиненныеЭлементы.Количество()-1;
	//
	//Для НомерСтраницы = 1 по КоличествоОтображаемыхРазделов Цикл
	//	Если ПанельРазделовКниги.Страницы[КоличествоОтображаемыхРазделов - НомерСтраницы] = ОсновнойРаздел Тогда
	//		Продолжить;
	//	КонецЕсли; 
	//	ПанельРазделовКниги.Страницы.Удалить(КоличествоОтображаемыхРазделов - НомерСтраницы);
	//КонецЦикла;
	
	Элементы.Страницы.ПодчиненныеЭлементы["ОсновнойРаздел"].Видимость = НЕ (Отчет.ФормироватьДополнительныеЛисты И Отчет.ВыводитьТолькоДопЛисты);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",                        Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода",                      Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",                       Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ФормироватьДополнительныеЛисты",     Отчет.ФормироватьДополнительныеЛисты);
	ПараметрыОтчета.Вставить("ДополнительныеЛистыЗаТекущийПериод", Отчет.ДополнительныеЛистыЗаТекущийПериод);
	ПараметрыОтчета.Вставить("ГруппироватьПоКонтрагентам",         Отчет.ГруппироватьПоКонтрагентам);
	ПараметрыОтчета.Вставить("КонтрагентДляОтбора",                Отчет.КонтрагентДляОтбора);
	ПараметрыОтчета.Вставить("ВыводитьТолькоДопЛисты",             Отчет.ВыводитьТолькоДопЛисты);
	ПараметрыОтчета.Вставить("ВыводитьПокупателейПоАвансам",       Отчет.ВыводитьПокупателейПоАвансам);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения",  Отчет.ВключаяОбособленныеПодразделения);
	//ПараметрыОтчета.Вставить("СписокСформированныхЛистов",         СписокСформированныхЛистов);
	ПараметрыОтчета.Вставить("ЗаполнениеДокумента",                Ложь);
	ПараметрыОтчета.Вставить("ЗаполнениеДекларации",               Ложь);
	ПараметрыОтчета.Вставить("ЕстьЗаписиПоКолонке20",              Ложь);
	ПараметрыОтчета.Вставить("ОтбиратьПоКонтрагенту",              ЗначениеЗаполнено(Отчет.КонтрагентДляОтбора));
	ПараметрыОтчета.Вставить("СформироватьОтчетПоСтандартнойФорме");
	ПараметрыОтчета.Вставить("СписокОрганизаций");
	ПараметрыОтчета.Вставить("ДатаФормированияДопЛиста");
	
	//АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	//Отчеты.КнигаПокупок1137.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	ПолучитьДанные(ПараметрыОтчета);
	Возврат ЗагрузитьПодготовленныеДанные(ПараметрыОтчета);
КонецФункции

&НаСервере
Процедура ПолучитьДанные(СтруктураПараметров);
	Если ЗначениеЗаполнено(СтруктураПараметров.КонтрагентДляОтбора)
		ИЛИ СтруктураПараметров.ВыводитьПокупателейПоАвансам
		ИЛИ СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СтандартнаяФорма = Ложь;
	Иначе
		СтандартнаяФорма = Истина;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СформироватьОтчетПоСтандартнойФорме", СтандартнаяФорма);
	
	Если НЕ СтруктураПараметров.ВключатьОбособленныеПодразделения Тогда
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(СтруктураПараметров.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделений(
		СтруктураПараметров.Организация);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураПараметров.Вставить("ЗаписьДополнительногоЛиста", Ложь);
	СтруктураПараметров.Вставить("ВерсияПостановленияНДС1137", ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериода));
	
	ПрефиксыРИБиОрганизации = ОбщегоНазначения.ПолучитьМассивПрефиксовРИБ();
	Если НЕ ПрефиксыРИБиОрганизации.Количество()=0 Тогда
		#Если Клиент Тогда
			Ответ=Вопрос("Выводить префиксы в номерах?", РежимДиалогаВопрос.ДаНет);
			Если Ответ=КодВозвратаДиалога.Да Тогда
				СтруктураПараметров.Вставить("ВыводитьПрефиксы");
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	ИнициализироватьТаблицыДляДекларацииПоНДС(СтруктураПараметров);
	
	СписокСформированныхЛистов.Очистить();
	СписокСообщений = Новый СписокЗначений();
	Если НЕ (СтруктураПараметров.ВыводитьТолькоДопЛисты И СтруктураПараметров.ФормироватьДополнительныеЛисты) Тогда
		
		СписокСчетовФактур = Неопределено;
		Результат = ПолучитьЗаписиКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
		
		СформироватьОсновнойРаздел(СтруктураПараметров, Результат, СписокСчетовФактур);
		
	КонецЕсли;
	
	// Проверка наличия дополнительных листов за текущий период
	СтруктураПараметров = ПроверитьНаличиеДопЛистовКнигиПокупок(СтруктураПараметров);
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод ИЛИ НЕ СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
			|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
			|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период""'"));
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И НЕ СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
			|Построение дополнительных листов за текущий налоговый период не требуется'"));
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод ИЛИ НЕ СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
			|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
			|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за текущий период""!'"));
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И НЕ СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
			|Построение дополнительных листов за корректируемый налоговый период не требуется'"));
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		
		СписокСчетовФактур = Неопределено;
		СтруктураПараметров.ЗаписьДополнительногоЛиста = Истина;
		
		// Получение записей дополнительных листов
		Результат = ПолучитьЗаписиДополнительныхЛистовКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
		СформироватьДополнительныеЛисты(СтруктураПараметров, Результат, СписокСчетовФактур);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СписокСообщений", СписокСообщений);
	//Результат = Новый Структура("СписокСформированныхЛистов,СписокСообщений,
	//|ТаблицаРаздел8,ТаблицаРаздел81,ТабличныйДокументРаздел81,ИтогиРаздел8,ИтогиРаздел81",
	//СтруктураПараметров.СписокСформированныхЛистов,
	//СписокСообщений,
	//СтруктураПараметров.ТаблицаРаздел8,
	//СтруктураПараметров.ТаблицаРаздел81,
	//СтруктураПараметров.ТабличныйДокументРаздел81,
	//СтруктураПараметров.ИтогиРаздел8,
	//СтруктураПараметров.ИтогиРаздел81);
	
	//ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные(РезультатВыполнения)
	Перем ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента;
	
	//РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	//Если РезультатВыполнения.Свойство("СписокСформированныхЛистов") Тогда
		//СписокСформированныхЛистов = РезультатВыполнения.СписокСформированныхЛистов;
		ОпределитьИндексОсновногоРаздела();
		Если ЕстьОсновнойРаздел Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.ОсновнойРаздел;
			СформированныйЛист = СписокСформированныхЛистов.Получить(ИндексОсновногоРаздела).Значение;
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.АвтоМасштаб=Истина;
			ТабличныйДокумент.Вывести(СформированныйЛист);
			ТекущийЭлемент = Элементы.ТабличныйДокумент;
		КонецЕсли;
		
		Если СписокСформированныхЛистов.Количество() <> 0 Тогда
			НомерОтображаемогоПериода = 0;
			Для Каждого Лист Из СписокСформированныхЛистов Цикл
				Если Лист.Представление <> "Основной раздел" Тогда
					НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
					// Вывод дополнительных листов
					//ПанельРазделовКниги = ЭлементыФормы.ПанельРазделовКниги;
					//НоваяСтраница = ПанельРазделовКниги.Страницы.Добавить("ДопЛист" + НомерОтображаемогоПериода, Лист.Представление);
					//НоваяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Добавить("ДопЛист" + НомерОтображаемогоПериода, Лист.Представление);
					НоваяСтраница = Элементы.Добавить("ДопЛист" + НомерОтображаемогоПериода, Тип("ГруппаФормы"), Элементы.Страницы);
					НоваяСтраница.Заголовок=Лист.Представление;
					Элементы.Страницы.ТекущаяСтраница=НоваяСтраница;
					//ПанельРазделовКниги.ТекущаяСтраница = НоваяСтраница;
					
					//ТабличныйДокументДопЛист = Элементы.Добавить(Тип("ПолеТабличногоДокумента"), "ТД_ДопЛист" + НомерОтображаемогоПериода, Истина, ПанельРазделовКниги);
					ТабличныйДокументДопЛист = Элементы.Добавить("ТД_ДопЛист" + НомерОтображаемогоПериода, Тип("ПолеТабличногоДокумента"), НоваяСтраница);
					//ТабличныйДокументДопЛист.Лево = ЭлементыФормы.ТабличныйДокумент.Лево;
					//ТабличныйДокументДопЛист.Верх = ЭлементыФормы.ТабличныйДокумент.Верх;
					//ТабличныйДокументДопЛист.Высота = ЭлементыФормы.ТабличныйДокумент.Высота;
					//ТабличныйДокументДопЛист.Ширина = ЭлементыФормы.ТабличныйДокумент.Ширина;
					//ТабличныйДокументДопЛист.Очистить();
					//ТабличныйДокументДопЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
					//ТабличныйДокументДопЛист.АвтоМасштаб = Истина;
					//ТабличныйДокументДопЛист.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупокДопЛист";
					
					//ЭлементыФормы.ТабличныйДокумент.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
					//ТабличныйДокументДопЛист.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
					//ЭлементыФормы.ТабличныйДокумент.ПолучитьПривязку(ГраницаЭлементаУправления.Право, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
					//ТабличныйДокументДопЛист.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
					//ТабличныйДокументДопЛист.ТолькоПросмотр = Истина;
					ТабличныйДокументДопЛист.Вывести(Лист.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	//КонецЕсли;
	
	Если РезультатВыполнения.Свойство("СписокСообщений") Тогда
		Возврат РезультатВыполнения.СписокСообщений;
	КонецЕсли;
	Возврат Новый СписокЗначений();
КонецФункции

&НаСервере
Процедура ОпределитьИндексОсновногоРаздела()

	Индекс = ПолучитьИндексСформированногоЛиста("Основной раздел");
	
	Если Индекс = Неопределено Тогда
		ИндексОсновногоРаздела = 0;
		ЕстьОсновнойРаздел     = Ложь;
	Иначе
		ИндексОсновногоРаздела = Индекс;
		ЕстьОсновнойРаздел     = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексСформированногоЛиста(ИмяЛиста)

	Если ИмяЛиста = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Для Каждого Лист Из СписокСформированныхЛистов Цикл
		Если Лист.Представление = ИмяЛиста Тогда
			Возврат СписокСформированныхЛистов.Индекс(Лист);
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

////////////////////////////////////////////////////////////////
// Вспомогательные процедуры формирования отчета

&НаСервере
Процедура СформироватьОсновнойРаздел(СтруктураПараметров, Результат, СписокСчетовФактур);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.Очистить();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупок";
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ЧерноБелаяПечать = Истина;
	Если СтруктураПараметров.ВерсияПостановленияНДС1137 = 4 Тогда
		Макет = Отчеты.КнигаПокупок1137.ПолучитьМакет("КнигаПокупок981");
	Иначе
		Макет = Отчеты.КнигаПокупок1137.ПолучитьМакет("КнигаПокупок735");
	КонецЕсли;
	СтруктураСекций = Новый Структура();
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		СтруктураСекций.Вставить("ШапкаРаздел8", Макет.ПолучитьОбласть("ШапкаРаздел8"));
		СтруктураСекций.Вставить("СтрокиДляПовтора", Макет.ПолучитьОбласть("СтрокиДляПовтора"));
		ТабДокумент.Вывести(СтруктураСекций.ШапкаРаздел8);
		ТабДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
	Иначе
		
		Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
			ТабДокумент.Вывести(Секция);
		КонецЕсли;
		
		СведенияОбОрганизации = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(СтруктураПараметров.Организация);
		НазваниеОрганизации = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
		
		Секция = Макет.ПолучитьОбласть("Шапка");
		Секция.Параметры.УстановленныйОтбор = "";
		Секция.Параметры.НачалоПериода = Формат(СтруктураПараметров.НачалоПериода, "ДФ=dd.MM.yyyy");
		Секция.Параметры.КонецПериода = Формат(СтруктураПараметров.КонецПериода, "ДФ=dd.MM.yyyy");
		Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		Секция.Параметры.ИННКППОрганизации = "" + СтруктураПараметров.Организация.ИНН 
		+ ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация.КПП), "", ("/" + СтруктураПараметров.Организация.КПП));
		
		Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
			Если СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа Тогда
				НадписьОтбор = НСтр("ru='Отбор: Контрагент в группе %1'");
			Иначе
				НадписьОтбор = НСтр("ru='Отбор: Контрагент = %1'");
			КонецЕсли;
			Секция.Параметры.УстановленныйОтбор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НадписьОтбор, СтруктураПараметров.КонтрагентДляОтбора);
		КонецЕсли;
		
		ТабДокумент.Вывести(Секция);
		
	КонецЕсли;
	
	Если Результат.Количество()=0 Тогда
		
		Секция = Макет.ПолучитьОбласть("Всего");
		ТабДокумент.Вывести(Секция);
		
		Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
			И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
			ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет);
		КонецЕсли;
		
		//УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
		
		СписокСформированныхЛистов.Добавить(ТабДокумент, Нстр("ru='Основной раздел'"));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураСекций.Вставить("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
	//СтруктураСекций = Новый Структура("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
	ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
		СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
	КонецЕсли;
	
	ИтогПоОрганизации = 0;
	
	ПреобразоватьЗаписиКнигиПокупок(
	СтруктураПараметров, Результат, ТабДокумент,
	СписокСчетовФактур, ИтогПоОрганизации, ПараметрыСтроки,
	СтруктураПараметров.ТаблицаРаздел8, СтруктураСекций);
	
	// Вывод всего
	
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(Результат[0]);
	Секция.Параметры.НДС=Результат.Итог("НДС18")+Результат.Итог("НДС10")+Результат.Итог("НДС20");
	ТабДокумент.Вывести(Секция);
	
	Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
		ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет);
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		Если СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> 0
			И СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
			
			ПерваяСтрокаСегмента = СтруктураПараметров.Счетчик - СтруктураПараметров.СчетчикСтрокТекущегоСегмента + 1;
			
			РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел8",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел8);
			
			РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел8",
			ПерваяСтрокаСегмента,
			ТабДокумент);
			
		КонецЕсли;
		
		ИтогиРаздел8 = Новый Структура("СумНДСВсКПк");
		ИтогиРаздел8.СумНДСВсКПк = Результат.Итог("НДС0")+Результат.Итог("НДС10")+Результат.Итог("НДС18")+Результат.Итог("НДС20");
		
		РО.ЗаписатьИтогиРазделаДекларацииНДС(
		СтруктураПараметров.СсылкаНаДекларацию,
		"Раздел8",
		ИтогиРаздел8);
		
	КонецЕсли;
	
	//ИтогиРаздел8 = Новый Структура("СумНДСВсКПк");
	//ИтогиРаздел8.СумНДСВсКПк = Результат.Итог("НДС0")+Результат.Итог("НДС10")+Результат.Итог("НДС18")+Результат.Итог("НДС20");
	//СтруктураПараметров.ИтогиРаздел8 = ИтогиРаздел8;
	
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("СтрокиДляПовтора");
	
	//УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
	
	СписокСформированныхЛистов.Добавить(ТабДокумент, Нстр("ru='Основной раздел'"));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДополнительныеЛисты(СтруктураПараметров, Результат, СписокСчетовФактур)
	
	Перем ТабДокумент;
	
	/// **** Если Результат.Пустой() Тогда
	//	Возврат;
	//КонецЕсли;
	Если Результат.Количество()=0 Тогда Возврат; КонецЕсли;
	
	НомерОтображаемогоПериода = 0;
	
	//		ДеревоЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СчетчикСтрокДопЛиста", 0);
	
	ИтогиРаздел81 = Новый Структура("СумНДСИтКПк,СумНДСИтП1Р8");
	СтруктураПараметров.Вставить("СчетчикСтрокДопЛиста", 0);
	СтруктураПараметров.Вставить("СчетчикСтрокТекущегоСегмента", 0);
	
	
	ПараметрыПолученияИтогов = Новый Структура;
	ПараметрыПолученияИтогов.Вставить("НалоговыйПериод", НачалоКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("КонецНалоговогоПериода", КонецКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("ДатаФормированияДопЛиста", КонецКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("СписокОрганизаций", СтруктураПараметров.СписокОрганизаций);
	
	ИтогПоКнигеПокупок = ПолучитьИтогиЗаПериодКнигаПокупок(ПараметрыПолученияИтогов);
	ИтогиРаздел81.СумНДСИтКПк = ИтогПоКнигеПокупок.НДС;
	
	тзИтогПоПериодам=Результат.Скопировать(,"КонецНалоговогоПериода,НалоговыйПериод");
	тзИтогПоПериодам.Свернуть("КонецНалоговогоПериода,НалоговыйПериод","");
	
	//Для Каждого ИтогПоПериодам ИЗ ДеревоЗаписей.Строки Цикл;
	
	тзДанные=Результат.СкопироватьКолонки();
	тзДанные1=Результат.СкопироватьКолонки();
	Для Каждого ИтогПоПериодам ИЗ тзИтогПоПериодам Цикл;
		тзДанные1.Очистить();
		НомерЛиста = 0;
		
		// Добавление новой страницы панели разделов для вывода доп. листа
		НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
		НалоговыйПериод = ПредставлениеПериода(ИтогПоПериодам.НалоговыйПериод, КонецДня(ИтогПоПериодам.КонецНалоговогоПериода), "ФП = Истина");
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.АвтоМасштаб = Истина;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупокДопЛист";
		МассивДатаОформления=Результат.НайтиСтроки(Новый Структура("КонецНалоговогоПериода,НалоговыйПериод",ИтогПоПериодам.КонецНалоговогоПериода, ИтогПоПериодам.НалоговыйПериод));
		Для Каждого СтрокаМ ИЗ МассивДатаОформления Цикл
			ЗаполнитьЗначенияСвойств(тзДанные1.Добавить(),СтрокаМ);
		КонецЦикла;
		тзДанные1.Свернуть("КонецНалоговогоПериода,НалоговыйПериод,ДатаОформления","");
		
		Для Каждого ИтогПоПериодамКорректировки ИЗ тзДанные1 Цикл
			//Для Каждого ИтогПоПериодамКорректировки ИЗ ИтогПоПериодам.Строки Цикл
			Если СтруктураПараметров.ВерсияПостановленияНДС1137 = 4 Тогда
				Макет = Отчеты.КнигаПокупок1137.ПолучитьМакет("ДополнительныйЛистКнигиПокупок981");
			Иначе
				Макет = Отчеты.КнигаПокупок1137.ПолучитьМакет("ДополнительныйЛистКнигиПокупок735");
			КонецЕсли;
			
			Секция = Макет.ПолучитьОбласть("Строка");
			СтрокаИтого = Макет.ПолучитьОбласть("Итого");
			СтрокаВсего = Макет.ПолучитьОбласть("Всего");
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
				СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
			КонецЕсли;
			// Формирование шапки доп. листа
			ОкончаниеПредыдущегоРаздела = ТабДокумент.ВысотаТаблицы;
			НомерЛиста = НомерЛиста + 1;
			
			СтруктураПараметров.Вставить("НалоговыйПериод", ИтогПоПериодамКорректировки.НалоговыйПериод);
			//СтруктураПараметров.Вставить("НалоговыйПериод", ИтогПоПериодамКорректировки.НалоговыйПериод);
			//СтруктураПараметров.Вставить("КонецНалоговогоПериода", КонецКвартала(ИтогПоПериодамКорректировки.КонецНалоговогоПериода));
			СтруктураПараметров.Вставить("КонецНалоговогоПериода", КонецКвартала(ИтогПоПериодамКорректировки.КонецНалоговогоПериода));
			СтруктураПараметров.Вставить("ДатаОформления", ИтогПоПериодамКорректировки.ДатаОформления);
			
			Если СтруктураПараметров.ЗаполнениеДекларации Тогда
				ВывестиШапкуРаздела81Декларации(ТабДокумент, Макет, СтруктураПараметров, НомерЛиста);
			Иначе
				ВывестиШапкуДопЛиста(ТабДокумент, Макет, СтруктураПараметров, НомерЛиста);
			КонецЕсли;
			
			СтруктураПараметров.ДатаФормированияДопЛиста = ИтогПоПериодамКорректировки.ДатаОформления;
			
			ИтогЗаПериод = ПолучитьИтогиЗаПериодКнигаПокупок(СтруктураПараметров);
			
			СтрокаИтого.Параметры.Заполнить(ИтогЗаПериод);
			
			ТабДокумент.Вывести(СтрокаИтого);
			
			СтруктураСекций = Новый Структура("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
			ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
				СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
			КонецЕсли;
			
			//ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
			//СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, 
			//ТабДокумент, СписокСчетовФактур, ПараметрыСтроки, 
			//СтруктураПараметров.ТаблицаРаздел81, СтруктураСекций);
			тзДанные.Очистить();
			МассивСтрок=Результат.НайтиСтроки(Новый Структура("КонецНалоговогоПериода,ДатаОформления",ИтогПоПериодам.КонецНалоговогоПериода,ИтогПоПериодамКорректировки.ДатаОформления));
			Для Каждого СтрокаМ ИЗ МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(тзДанные.Добавить(),СтрокаМ);
			КонецЦикла;	
			ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
			СтруктураПараметров, тзДанные, ИтогЗаПериод, 
			ТабДокумент, СписокСчетовФактур, ПараметрыСтроки, 
			СтруктураПараметров.ТаблицаРаздел81, СтруктураСекций);
			
			СтрокаВсего.Параметры.Заполнить(ИтогЗаПериод);
			ТабДокумент.Вывести(СтрокаВсего);
			
			Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
				И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
				ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет);
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		СписокСформированныхЛистов.Добавить(ТабДокумент, Нстр("ru='Доп.листы за'") + " " + НалоговыйПериод);
		
	КонецЦикла;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		// Запишем последний сегмент
		
		Если СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> 0
			И СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
			
			// Записать сегменты
			ПерваяСтрокаСегмента = СтруктураПараметров.СчетчикСтрокДопЛиста - СтруктураПараметров.СчетчикСтрокТекущегоСегмента + 1;
			
			РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел8_Прил1",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел81);
			
			РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СсылкаНаДекларацию,
			"Раздел8_Прил1",
			ПерваяСтрокаСегмента,
			ТабДокумент);
			
		КонецЕсли;
		
		ИтогиРаздел81.СумНДСИтП1Р8 = ИтогЗаПериод.НДС; // Итог с учетом всех дополнительных листов за налоговый период
		
		РО.ЗаписатьИтогиРазделаДекларацииНДС(
		СтруктураПараметров.СсылкаНаДекларацию,
		"Раздел8_Прил1",
		ИтогиРаздел81);
		
	КонецЕсли;
	
	
	//ИтогиРаздел81.СумНДСИтП1Р8 = ИтогЗаПериод.НДС; // Итог с учетом всех дополнительных листов за налоговый период
	//
	//СтруктураПараметров.ИтогиРаздел81 = ИтогиРаздел81;
	//СтруктураПараметров.ТабДокументРаздел81 = ТабДокумент;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиШапкуРаздела81Декларации(ТабДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста)
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Если НомерДополнительногоЛиста = 1 Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаРаздел81");
		ТабДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("ШапкаРаздел81НомерЛиста");
	Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("СтрокиДляПовтора");
	ТабДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПодвал(СтруктураПараметров, ТабДокумент, Макет)
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("ФИОРук");
	СписокПоказателей.Добавить("ФИО");
	
	СведенияОбОрганизации = РО.ПолучитьСведенияОбОрганизации(
	СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода, СписокПоказателей);
	СведенияОЮрФизЛице  = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(
	СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
	
	Если РО.ЭтоПБОЮЛ(СтруктураПараметров.Организация) Тогда
		ИмяРук = "";
		ИмяОрг = СведенияОбОрганизации.ФИО;
		Свидетельство = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство,");
	Иначе
		ИмяРук = СведенияОбОрганизации.ФИОРук;
		ИмяОрг = "";
		Свидетельство = "";
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяРук        = ИмяРук;
	Секция.Параметры.ИмяОрг        = ИмяОрг;
	Секция.Параметры.Свидетельство = Свидетельство;
	
	ТабДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицыДляДекларацииПоНДС(СтруктураПараметров)
	
	Раздел8 = Новый ТаблицаЗначений;
	
	Раздел8.Колонки.Добавить("НомерПор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0)));
	
	Раздел8.Колонки.Добавить("НомСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Раздел8.Колонки.Добавить("ДатаСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	
	Раздел8.Колонки.Добавить("НомИспрСчФ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
	Раздел8.Колонки.Добавить("ДатаИспрСчФ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	
	Раздел8.Колонки.Добавить("НомКСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Раздел8.Колонки.Добавить("ДатаКСчФПрод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	
	Раздел8.Колонки.Добавить("НомИспрКСчФ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
	Раздел8.Колонки.Добавить("ДатаИспрКСчФ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		Если СтруктураПараметров.ПравилаЗаполнения = "2015Кв1" Тогда
			Раздел8.Колонки.Добавить("НомТД", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
		ИначеЕсли СтруктураПараметров.ПравилаЗаполнения = "2017Кв1" ИЛИ СтруктураПараметров.ПравилаЗаполнения = "2019Кв1" Тогда
			Раздел8.Колонки.Добавить("РегНомТД", Новый ОписаниеТипов("Массив"));
		КонецЕсли;
	КонецЕсли;
	
	Раздел8.Колонки.Добавить("ОКВ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	
	Раздел8.Колонки.Добавить("СтоимПокупВ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
	Раздел8.Колонки.Добавить("СумНДСВыч", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 2)));
	
	Раздел8.Колонки.Добавить("КодВидОпер", Новый ОписаниеТипов("Массив"));
	
	Раздел8.Колонки.Добавить("ДокПдтвУпл", Новый ОписаниеТипов("Массив"));
	Раздел8.Колонки.Добавить("ДатаУчТов", Новый ОписаниеТипов("Массив"));
	
	Раздел8.Колонки.Добавить("СвПрод", Новый ОписаниеТипов("Массив"));
	Раздел8.Колонки.Добавить("СвПос"); // Тип не задается
	
	Раздел81 = Раздел8.СкопироватьКолонки();
	Раздел81.Колонки.СумНДСВыч.Имя = "СумНДС";
	
	СтруктураПараметров.Вставить("ТаблицаРаздел8", Раздел8);
	СтруктураПараметров.Вставить("ТаблицаРаздел81", Раздел81);
	СтруктураПараметров.Вставить("ТабличныйДокументРаздел81");
	
	ИтогиРаздел8 = Новый Структура("СумНДСВсКПк");
	ИтогиРаздел81 = Новый Структура("СумНДСИтКПк,СумНДСИтП1Р8");
	
	СтруктураПараметров.Вставить("ИтогиРаздел8", ИтогиРаздел8);
	СтруктураПараметров.Вставить("ИтогиРаздел81", ИтогиРаздел81);
	
	
КонецПроцедуры

&НаСервере
Функция ВерсияПостановленияНДС1137(Период)
	
	Если Период >= '20171001' Тогда      // Постановление № 981 вступает в силу с 1 октября 2017 года.
		Возврат 4;
	ИначеЕсли Период >= '20141001' Тогда // Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат 3;
	ИначеЕсли Период >= '20131106' Тогда // Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат 2;
	Иначе
		Возврат 1;                       // Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПолучитьСчетаФактурыДокументы(Запрос)
	Запрос.УстановитьПараметр("СчетаФактура_НаАванс", Перечисления.НДСВидСчетаФактуры.НаАванс);
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыДокументы.СчетФактура,
	|	СчетаФактурыДокументы.ДатаСчетаФактуры,
	|	СчетаФактурыДокументы.НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	СчетаФактурыДокументы.ДоговорКонтрагента,
	|	СчетаФактурыДокументы.СтавкаНДСАванса,
	|	СчетаФактурыДокументы.Приоритет,
	|	СчетаФактурыДокументы.УдалятьЛидирующиеНули
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураПолученный.ДокументОснование КАК СчетФактура,
	|			СчетФактураПолученный.Ссылка.Номер КАК НомерСчетаФактуры,
	|			СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
	|			СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
	|			СчетФактураПолученный.Ссылка.ВидСчетаФактуры КАК НаАванс,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК СтавкаНДСАванса,
	
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК ДоговорКонтрагента,
	|			1 КАК Приоритет,
	|			ЛОЖЬ КАК УдалятьЛидирующиеНули
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураПолученный.Ссылка.Проведен
	|			И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	|			И СчетФактураПолученный.Ссылка.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетФактураВыданный.ДокументОснование,
	|			СчетФактураВыданный.Ссылка.Номер,
	|			СчетФактураВыданный.Ссылка.Дата,
	|			СчетФактураВыданный.Ссылка,
	
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА ВЫБОР
	|						КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = &СчетаФактура_НаАванс
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			2,
	|			ИСТИНА
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И (НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления)
	|			И СчетФактураВыданный.Ссылка.Организация = &Организация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			3,
	|			ИСТИНА
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И (НЕ ГТДИмпорт.ПометкаУдаления)
	|			И ГТДИмпорт.Организация = &Организация) КАК СчетаФактурыДокументы
	|		ПО ЗаписиКнигиПокупок.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|";
	
	
	//   |			И ((НЕ ЗаписиКнигиПокупок.НаАванс)
	//|				ИЛИ СчетаФактурыДокументы.НаАванс = &СчетаФактура_НаАванс
	//|					И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	//|					И ЗаписиКнигиПокупок.ДоговорКонтрагента = СчетаФактурыДокументы.ДоговорКонтрагента)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
	СтруктураПараметров, тзДанные, ИтогЗаПериод,
	ТабДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено,
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено)
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		Счетчик = СтруктураПараметров.СчетчикСтрокДопЛиста;
		СчетчикСтрокТекущегоСегмента = СтруктураПараметров.СчетчикСтрокТекущегоСегмента;
	Иначе
		Счетчик = 0;
		СчетчикСтрокТекущегоСегмента = 0;
	КонецЕсли; 
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли; 
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		
		стрСтрокаСветркиЧисло="";
		Для Каждого СтрКолонка ИЗ тзДанные.Колонки Цикл
			Если СтрКолонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				стрСтрокаСветркиЧисло=стрСтрокаСветркиЧисло+?(стрСтрокаСветркиЧисло="","",",")+СтрКолонка.Имя;
			КонецЕсли;
		КонецЦикла;	
		
		тзПоКонтрагентам=тзДанные.Скопировать();
		тзПоКонтрагентам.Свернуть("Продавец",стрСтрокаСветркиЧисло);
		Для Каждого ИтогПоКонтрагенту Из тзПоКонтрагентам Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабДокумент.НачатьГруппуСтрок();
			МассивСтрокПоКонтрагенту=тзДанные.НайтиСтроки(Новый Структура("Продавец",ИтогПоКонтрагенту.Продавец));
			Для Каждого ЗаписьКниги Из МассивСтрокПоКонтрагенту Цикл
				
				Счетчик = Счетчик + 1;
				ПараметрыСтроки.Ном = Счетчик;
				
				ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
				
				ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
				
				ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
				ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
				ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
				ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
				ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
				ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
				ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС18;
				ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
				ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
				ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
			КонецЦикла; 
			ТабДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.НДС=ИтогПоКонтрагенту.НДС10+ИтогПоКонтрагенту.НДС18+ИтогПоКонтрагенту.НДС20;
			ТабДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		Для каждого ЗаписьКниги Из тзДанные Цикл
			
			Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
				ПараметрыСтроки = ТаблицаДокумента.Добавить();
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
			
			ПараметрыСтроки.Ном = Счетчик;
			
			ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
			
			Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
				ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
			КонецЕсли;
			Если СтруктураПараметров.ЗаполнениеДекларации 
				И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
				
				// Запишем сегмент
				ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
				
				РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
				СтруктураПараметров.СсылкаНаДекларацию,
				"Раздел8_Прил1",
				ПерваяСтрокаСегмента,
				СтруктураПараметров.ТаблицаРаздел81);
				
				РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
				СтруктураПараметров.СсылкаНаДекларацию,
				"Раздел8_Прил1",
				ПерваяСтрокаСегмента,
				ТабДокумент);
				
				// Очистим табличный документ и таблицу
				ТабДокумент.Очистить();
				ТабДокумент.Вывести(СтруктураСекций.ШапкаРаздел81);
				ТабДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
				
				СтруктураПараметров.ТаблицаРаздел81.Очистить();
				
				// Обнулим счетчик текущего сегмента
				СчетчикСтрокТекущегоСегмента = 0;
				
			КонецЕсли;
			
			
			ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
			ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
			ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
			ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
			ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
			ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
			
			ИтогЗаПериод.НДС=ИтогЗаПериод.НДС+ЗаписьКниги.НДС0+ЗаписьКниги.НДС10+ЗаписьКниги.НДС18+ЗаписьКниги.НДС20; //ИтогЗаПериод.НДС0+ИтогЗаПериод.НДС10+ИтогЗаПериод.НДС18+ИтогЗаПериод.НДС20 + 
			
			ИтогЗаПериод.СуммаБезНДС20 = ИтогЗаПериод.СуммаБезНДС20 + ЗаписьКниги.СуммаБезНДС20;
			ИтогЗаПериод.НДС20 = ИтогЗаПериод.НДС20 + ЗаписьКниги.НДС20;
			ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;					
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		СтруктураПараметров.СчетчикСтрокДопЛиста = Счетчик;
		СтруктураПараметров.СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИтогиЗаПериодКнигаПокупок(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.ВсегоПокупок), 0) КАК ВсегоПокупок,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС20), 0) КАК СуммаБезНДС20,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС20), 0) КАК НДС20,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС), 0) КАК НДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ВсегоПокупок,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС20,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС20,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС,
	|		НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК НДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|			    И НЕ ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&МоментФормированияДопЛиста,
	|			Период,
	|			Организация В (&Организация)
	|			    И ЗаписьДополнительногоЛиста
	|			    И КорректируемыйПериод >= &НачалоПериода
	|			    И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты) КАК ИтогиКнигиПокупок";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация"	, СтруктураПараметров.СписокОрганизаций);
	
	СтавкиНДС20 = Новый Массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20", СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0", СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_Авансы = Новый Массив;
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Авансы", ВидыЦенностей_Авансы);
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПокупок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС20", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ИтогЗаПериод.Вставить("НДС",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));		
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВывестиШапкуДопЛиста(ТабДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста)
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");	
		ТабДокумент.Вывести(Секция);	
	КонецЕсли;	
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
	
	СведенияОбОрганизации = КонтактнаяИнформацияСервер.СведенияОЮрФизЛице(Организация);
	
	НазваниеОрганизации = ПечатныеФормыСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = "Отбор: Контрагент " + ?(СтруктураПараметров.КонтрагентДляОтбора.ЭтоГруппа, "в группе ", "= ") + СтруктураПараметров.КонтрагентДляОтбора;
	КонецЕсли;
	
	ТабДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРеквизитовКонтрагента(текКонтрагент, ИНН, КПП)
	
	СтруктураРеквизитовКонтрагента = Новый Структура();
	СтруктураРеквизитовКонтрагента.Вставить("Контрагент", текКонтрагент);
	
	Если СтрДлина(ИНН) > 10 Тогда
		СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", ИНН);
	Иначе
		СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", ИНН);
		СтруктураРеквизитовКонтрагента.Вставить("КПП", КПП);
	КонецЕсли;
	
	Возврат СтруктураРеквизитовКонтрагента;
	
КонецФункции

&НаСервере
Функция ОпределитьДатуИНомерСФКорректировки(ЗаписьКниги, Организация,СтруктураПараметров)
	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("НомерДатаИсправления", "");	
	СтруктураВозврата.Вставить("НомерОтДатаИсправленный", "");	
	
	СтруктураВозврата.Вставить("НомерДатаКорректировки", "");
	СтруктураВозврата.Вставить("НомерОтДатаКорректировочный", "");
	
	СтруктураВозврата.Вставить("НомерДатаИсправленияКорректировки", "");
	СтруктураВозврата.Вставить("НомерОтДатаИсправленныйКорректировочный", "");
	
	СтруктураВозврата.Вставить("НомерИсправления", "");	
	СтруктураВозврата.Вставить("НомерКорректировки", "");
	СтруктураВозврата.Вставить("НомерИсправленияКорректировки", "");	
	
	СтруктураВозврата.Вставить("ДатаИсправления", "");	
	СтруктураВозврата.Вставить("ДатаКорректировки", "");
	СтруктураВозврата.Вставить("ДатаИсправленияКорректировки", "");
	
	НомерДатаИсправления="";
	НомерОтДатаИсправленный="";
	НомерДатаКорректировки="";
	НомерОтДатаКорректировочный="";
	НомерДатаИсправленияКорректировки="";
	НомерОтДатаИсправленныйКорректировочный="";
	
	НомерИсправления="";	
	НомерКорректировки="";
	НомерИсправленияКорректировки="";
	
	ДатаИсправления="";	
	ДатаКорректировки="";
	ДатаИсправленияКорректировки="";
	
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Если ЗаписьКниги.СчетФактураДокумент.Исправление Тогда
				//Если ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Исправительный Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
					Оригинал2=Оригинал.ДокументОснованиеКорректировка;
					ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал2.Номер);
					НомерДатаИсправления = "";
					НомерОтДатаИсправленный="";
					НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
					НомерОтДатаКорректировочный= "" + СокрЛП(Оригинал.Номер) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
					НомерОтДатаИсправленныйКорректировочный="" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерКорректировки = СокрЛП(Оригинал.Номер);
					НомерИсправленияКорректировки = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
					ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					ДатаИсправленияКорректировки = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				Иначе
					ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
					НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					НомерОтДатаИсправленный="" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					ДатаИсправления = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерДатаКорректировки = "";
					НомерОтДатаКорректировочный="";
					НомерДатаИсправленияКорректировки ="";
					НомерОтДатаИсправленныйКорректировочный="";
				КонецЕсли;
			ИначеЕсли ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный="";
				НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
				НомерОтДатаКорректировочный="" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерКорректировки = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
				ДатаКорректировки = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
			КонецЕсли;	
		КонецЕсли; 
		
		Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если ЗаписьКниги.СчетФактураДокумент.Исправление Тогда
				//			Если ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Исправительный Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
					Оригинал2=Оригинал.ДокументОснованиеКорректировка;
					ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
					?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал2.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал2, ПрефиксыРИБиОрганизации));
					НомерДатаИсправления = "";
					НомерОтДатаИсправленный="";
					НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
					?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
					НомерОтДатаКорректировочный="" + ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
					?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации));
					НомерОтДатаИсправленныйКорректировочный="" + 
					?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерКорректировки =?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
					НомерИсправленияКорректировки =?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации));
					ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
					ДатаИсправленияКорректировки =Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				Иначе
					ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
					?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
					НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					НомерОтДатаИсправленный="" + СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактураДокумент.НомерИсправления);
					ДатаИсправления = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
					НомерДатаКорректировки = "";
					НомерОтДатаКорректировочный="";
					НомерДатаИсправленияКорректировки ="";
					НомерОтДатаИсправленныйКорректировочный="";
				КонецЕсли;
			ИначеЕсли ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал=ЗаписьКниги.СчетФактураДокумент.ДокументОснованиеКорректировка;
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный="";
				НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy") + ", №" + ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации);
				НомерОтДатаКорректировочный="" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент,ПрефиксыРИБиОрганизации));
				ДатаКорректировки = Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
			КонецЕсли;	
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если ЗаписьКниги.СчетФактура.Исправление Тогда
			//Если ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Исправительный Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал2=Оригинал.ДокументОснованиеКорректировка;
				ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал2.Номер);
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный="";
				НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
				НомерОтДатаКорректировочный= "" + СокрЛП(Оригинал.Номер) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.Номер);
				НомерОтДатаИсправленныйКорректировочный="" + СокрЛП(ЗаписьКниги.СчетФактура.Номер) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерКорректировки = СокрЛП(Оригинал.Номер);
				НомерИсправленияКорректировки = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
				ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				ДатаИсправленияКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				
			Иначе
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
				НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				НомерОтДатаИсправленный="" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				ДатаИсправления = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаКорректировки = "";
				НомерОтДатаКорректировочный="";
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
			КонецЕсли;
		ИначеЕсли ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(Оригинал.Номер);
			НомерДатаИсправления = "";
			НомерОтДатаИсправленный="";
			НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.Номер);
			НомерОтДатаКорректировочный="" + СокрЛП(ЗаписьКниги.СчетФактура.Номер) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерКорректировки = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
			ДатаКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерДатаИсправленияКорректировки ="";
			НомерОтДатаИсправленныйКорректировочный="";
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ЗаписьКниги.СчетФактура.Исправление Тогда
			//		Если ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Исправительный Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			Если Оригинал.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
				Оригинал2=Оригинал.ДокументОснованиеКорректировка;
				ДатаНомер = "" + Формат(Оригинал2.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал2.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал2,ПрефиксыРИБиОрганизации));
				НомерДатаИсправления = "";
				НомерОтДатаИсправленный="";
				НомерДатаКорректировки = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
				НомерОтДатаКорректировочный="" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации)) + " от " + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаИсправленияКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации));
				НомерОтДатаИсправленныйКорректировочный="" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
				НомерИсправленияКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации));
				ДатаКорректировки = Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
				ДатаИсправленияКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				
			Иначе
				ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
				?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
				НомерДатаИсправления = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				НомерОтДатаИсправленный="" + СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерИсправления = СокрЛП(ЗаписьКниги.СчетФактура.НомерИсправления);
				ДатаИсправления = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
				НомерДатаКорректировки = "";
				НомерОтДатаКорректировочный="";
				НомерДатаИсправленияКорректировки ="";
				НомерОтДатаИсправленныйКорректировочный="";
			КонецЕсли;
		ИначеЕсли ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ЗаписьКниги.СчетФактура.ДокументОснованиеКорректировка;
			ДатаНомер = "" + Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
			?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал,ПрефиксыРИБиОрганизации));
			НомерДатаИсправления = "";
			НомерОтДатаИсправленный="";
			НомерДатаКорректировки = "" + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy") + ", №" + 
			?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Дата),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации));
			НомерОтДатаКорректировочный="" + 
			?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации)) + " от " + Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерКорректировки = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Дата),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура,ПрефиксыРИБиОрганизации));
			ДатаКорректировки = Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерДатаИсправленияКорректировки ="";
			НомерОтДатаИсправленныйКорректировочный="";
		КонецЕсли;
		
	КонецЕсли;	
	
	СтруктураВозврата.НомерДатаИсправления=НомерДатаИсправления;
	СтруктураВозврата.НомерОтДатаИсправленный=НомерОтДатаИсправленный;
	
	СтруктураВозврата.НомерДатаКорректировки=НомерДатаКорректировки;
	СтруктураВозврата.НомерОтДатаКорректировочный=НомерОтДатаКорректировочный;
	
	СтруктураВозврата.НомерДатаИсправленияКорректировки=НомерДатаИсправленияКорректировки;
	СтруктураВозврата.НомерОтДатаИсправленныйКорректировочный=НомерОтДатаИсправленныйКорректировочный;
	
	СтруктураВозврата.НомерИсправления=НомерИсправления;	
	СтруктураВозврата.НомерКорректировки=НомерКорректировки;
	СтруктураВозврата.НомерИсправленияКорректировки=НомерИсправленияКорректировки;
	
	СтруктураВозврата.ДатаИсправления=ДатаИсправления;	
	СтруктураВозврата.ДатаКорректировки=ДатаКорректировки;
	СтруктураВозврата.ДатаИсправленияКорректировки=ДатаИсправленияКорректировки;
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Функция ПолучитьОригиналСчетаФактуры(ИсправительныйСчетФактура)
	Если ИсправительныйСчетФактура=ИсправительныйСчетФактура.ДокументОснованиеКорректировка Тогда
		Сообщить("В корректировочном счет-фактуре "+СокрЛП(ИсправительныйСчетФактура)+" неверно выбран документ основание.");
		Возврат ИсправительныйСчетФактура;
	КонецЕсли;	
	//Если ИсправительныйСчетФактура.ДокументОснованиеКорректировка.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Исправительный ИЛИ ИсправительныйСчетФактура.ДокументОснованиеКорректировка.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
	Если ИсправительныйСчетФактура.ДокументОснованиеКорректировка.Исправление ИЛИ ИсправительныйСчетФактура.ДокументОснованиеКорректировка.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
		ПолучитьОригиналСчетаФактуры(ИсправительныйСчетФактура.ДокументОснованиеКорректировка);
	КонецЕсли;	
	Возврат ИсправительныйСчетФактура.ДокументОснованиеКорректировка;
КонецФункции	

&НаСервере
Функция ОпределитьДатуИНомерСФ(ЗаписьКниги, СтруктураПараметров)
	
	ПрефиксыРИБиОрганизации = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(СтруктураПараметров.Организация);
	
	ВариантыПредставленияСчетаФактуры = Новый Структура("ДатаНомер,НомерДата,НомерОтДата,Дата,Номер", "", "", "", "");
	
	Если НЕ ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		Возврат ВариантыПредставленияСчетаФактуры;
	КонецЕсли;
	
	ДатаНомер = "";
	Если ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		//Если ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Исправительный ИЛИ ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
		
		Если ЗаписьКниги.СчетФактураДокумент.Исправление ИЛИ ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактураДокумент);
			ДатаСФ 	= Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер) ,ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
		Иначе	
			ДатаСФ 	= Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактураДокумент, ПрефиксыРИБиОрганизации));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Если ЗаписьКниги.СчетФактура.Исправление ИЛИ ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактура);
			ДатаСФ 	= Формат(Оригинал.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(Оригинал.Номер),ОбщегоНазначенияСервер.НомерНаПечать(Оригинал, ПрефиксыРИБиОрганизации));
		Иначе	
			ДатаСФ 	= Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ?(СтруктураПараметров.Свойство("ВыводитьПрефиксы"), СокрЛП(ЗаписьКниги.СчетФактура.Номер),ОбщегоНазначенияСервер.НомерНаПечать(ЗаписьКниги.СчетФактура, ПрефиксыРИБиОрганизации));
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если ЗаписьКниги.СчетФактураДокумент.Исправление ИЛИ ЗаписьКниги.СчетФактураДокумент.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактураДокумент);
			ДатаСФ 	= Формат(Оригинал.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(Оригинал.Номер);
		Иначе
			ДатаСФ 	= Формат(ЗаписьКниги.СчетФактураДокумент.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если ЗаписьКниги.СчетФактура.Исправление ИЛИ ЗаписьКниги.СчетФактура.ВидСчетаФактуры=Перечисления.НДСВидСчетаФактуры.Корректировочный Тогда
			Оригинал=ПолучитьОригиналСчетаФактуры(ЗаписьКниги.СчетФактура);
			ДатаСФ 	= Формат(Оригинал.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(Оригинал.Номер);
		Иначе
			ДатаСФ 	= Формат(ЗаписьКниги.СчетФактура.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
			НомерСФ = СокрЛП(ЗаписьКниги.СчетФактура.Номер);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		ДатаСФ	= Формат(ЗаписьКниги.СчетФактура.Дата, "ДФ=dd.MM.yyyy");
		НомерСФ = СокрЛП(ЗаписьКниги.СчетФактура.НомерГТД);
	Иначе
		ДатаСФ	= Формат(ЗаписьКниги.СчетФактураДокумент.Дата, "ДФ=dd.MM.yyyy");
		НомерСФ = СокрЛП(ЗаписьКниги.СчетФактураДокумент.Номер);
	КонецЕсли;
	//КонецЕсли;
	
	ВариантыПредставленияСчетаФактуры.ДатаНомер = "" + ДатаСФ + ?(ЗначениеЗаполнено(ДатаСФ), ";", "") + НомерСФ;
	ВариантыПредставленияСчетаФактуры.НомерДата = "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), ";", "") + ДатаСФ;
	ВариантыПредставленияСчетаФактуры.НомерОтДата = "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), " от ", "") + ДатаСФ;
	
	
	ВариантыПредставленияСчетаФактуры.Номер = НомерСФ;
	ВариантыПредставленияСчетаФактуры.Дата = ДатаСФ;
	
	Возврат ВариантыПредставленияСчетаФактуры;	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)
	
	ПараметрыЗаполнения = ЗаписьКниги;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	
	ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения, СтруктураПараметров);
	
	Графа10 = Строка(ПараметрыЗаполнения.ПродавецИНН)+?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" , "")+Строка(ПараметрыЗаполнения.ПродавецКПП);
	
	// Универсальная структура для заполнения книги по разным версиям постановления
	СоставСтроки=Новый Структура;
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.КодВидаОперации) Тогда
		КодОперации="01";
		Если ТипЗнч(ПараметрыЗаполнения.СчетФактураДокумент)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ ТипЗнч(ПараметрыЗаполнения.СчетФактура)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			КодОперации="01";
		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент)=Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			КодОперации="23";	
		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент)=Тип("ДокументСсылка.ГТДИмпорт") Тогда
			КодОперации="20";	
		ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент)=Тип("ДокументСсылка.ВосстановлениеНДС") Тогда
			КодОперации="25";	
		КонецЕсли;	
		СоставСтроки.Вставить("КодОперации", КодОперации);
	ИначеЕсли ПараметрыЗаполнения.КодВидаОперации="02" Тогда
		Если  ТипЗнч(ПараметрыЗаполнения.СчетФактураДокумент)=Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			СоставСтроки.Вставить("КодОперации", "22");
		Иначе
			СоставСтроки.Вставить("КодОперации", ПараметрыЗаполнения.КодВидаОперации);
		КонецЕсли;	
	Иначе
		КодОперации=ПараметрыЗаполнения.КодВидаОперации;
		СоставСтроки.Вставить("КодОперации", КодОперации);
	КонецЕсли;	
	СоставСтроки.Вставить("ПродавецИНН", ПараметрыЗаполнения.ПродавецИНН);
	СоставСтроки.Вставить("ПродавецКПП", ПараметрыЗаполнения.ПродавецКПП);
	СоставСтроки.Вставить("Валюта", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта), "" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод, ""));
	СоставСтроки.Вставить("ВсегоПокупок",      ЗаписьКниги.ВсегоПокупок);
	СоставСтроки.Вставить("СуммаБезНДС20",     ЗаписьКниги.СуммаБезНДС20);
	СоставСтроки.Вставить("НДС20",             ЗаписьКниги.НДС20);
	СоставСтроки.Вставить("СуммаБезНДС18",     ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",             ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",     ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",             ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0",              ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("НДС",               ЗаписьКниги.НДС0+ЗаписьКниги.НДС10+ЗаписьКниги.НДС18+ЗаписьКниги.НДС20);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", ЗаписьКниги.СуммаСовсемБезНДС);
	СоставСтроки.Вставить("ДатаНомер",         ВариантыПредставленияСФ.ДатаНомер);
	СоставСтроки.Вставить("НомерДата",         ВариантыПредставленияСФ.НомерДата);
	СоставСтроки.Вставить("НомерОтДата",         ВариантыПредставленияСФ.НомерОтДата);
	СоставСтроки.Вставить("ДатаОприходования", Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.СчетФактураДокумент);
	
	Если НЕ СтруктураПараметров.ЕстьЗаписиПоКолонке20 И НЕ (ЗаписьКниги.СуммаБезНДС20 = 0 И ЗаписьКниги.НДС20 = 0) Тогда
		СтруктураПараметров.ЕстьЗаписиПоКолонке20 = Истина;
	КонецЕсли; 
	
	СтруктураНомераДаты=ОпределитьДатуИНомерСФКорректировки(ЗаписьКниги, ЗаписьКниги.Организация,СтруктураПараметров);
	
	СоставСтроки.Вставить("НомерДатаИсправления", СтруктураНомераДаты.НомерДатаИсправления);	
	СоставСтроки.Вставить("НомерДатаКорректировки", СтруктураНомераДаты.НомерДатаКорректировки);
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", СтруктураНомераДаты.НомерДатаИсправленияКорректировки);	
	СоставСтроки.Вставить("НомерОтДатаИсправленный", СтруктураНомераДаты.НомерОтДатаИсправленный);	
	СоставСтроки.Вставить("НомерОтДатаКорректировочный", СтруктураНомераДаты.НомерОтДатаКорректировочный);
	СоставСтроки.Вставить("НомерОтДатаИсправленныйКорректировочный", СтруктураНомераДаты.НомерОтДатаИсправленныйКорректировочный);	
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	
	ТекстОплатыСНомером = "";
	ТекстНомерОтДатаОплаты="";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	
	МассивДокПдтвУпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	
	// Массив регистрационных номеров таможенных деклараций для декларации с 1 кв 2017 года.
	МассивРегНомТД = Новый Массив();
	
	
	ТекстНомерГТД = "";
	ТекстСтранаНомерГТД = "";
	
	ТекстГрафа7 = "";
	ТекстГрафа9 = "";
	ТекстГрафа10 = "";
	МассивСвПрод = Новый Массив();
	
	
	Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
		Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
			ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
			СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда    /// Коля
		НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
		НомерОтДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + " от " + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
		Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
			
			ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) + НомерДатаОплаты;
			ТекстНомерОтДатаОплаты = ТекстНомерОтДатаОплаты + ?(НЕ ЗначениеЗаполнено(ТекстНомерОтДатаОплаты), "", ";" + Символы.ПС) + НомерОтДатаОплаты;
			
			СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
			
			СтруктураДокПдтвУпл = Новый Структура("НомДокПдтвУпл,ДатаДокПдтвУпл");
			СтруктураДокПдтвУпл.НомДокПдтвУпл = ЗаписьКниги.НомерДокументаОплаты;
			СтруктураДокПдтвУпл.ДатаДокПдтвУпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			МассивДокПдтвУпл.Добавить(СтруктураДокПдтвУпл);
			
		КонецЕсли;
	КонецЕсли; 
	
	СоставСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокумент;
	
	// ГТД и страна происхождения
	//СчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ЗаписьКниги.ВыгрузитьКолонку("СчетФактура"));
	СчетФактура=ЗаписьКниги.СчетФактураДокумент;
	//	Для Каждого СчетФактура Из СчетаФактуры Цикл
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		СтрокаДополнительнойИнформации=СоответствиеСтрокиДопИнформацииПоСчетуФактуре.НайтиСтроки(Новый Структура("СчетФактураДокумент",СчетФактура));
	Иначе
		СтрокаДополнительнойИнформации = Неопределено;
	КонецЕсли;
	
	Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
		Для Каждого СтрокаМ ИЗ СтрокаДополнительнойИнформации Цикл
			
			Если СокрЛП(СтрокаМ.ГТДиСтрана) <> "" Тогда
				ТекстСтранаНомерГТД = ТекстСтранаНомерГТД + ?(ТекстСтранаНомерГТД = "", "", ", ") 
				+ СокрЛП(СтрокаМ.ГТДиСтрана);
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") 
				+ СокрЛП(СтрокаМ.ГТД);
			КонецЕсли;
			
			// Проверим наличие дополнительных дат оплат
			Если ТипЗнч(СтрокаМ.ДатыОплаты) = Тип("Массив") Тогда
				Для Каждого ТекущаяДатаОплаты Из СтрокаМ.ДатыОплаты Цикл
					Если СписокДатОплат.НайтиПоЗначению(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
						ТекстОплаты = ТекстОплаты + ?(ПустаяСтрока(ТекстОплаты), "", ","+Символы.ПС) + Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy");
						СписокДатОплат.Добавить(Формат(ТекущаяДатаОплаты, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СокрЛП(СтрокаМ.Графа7)) Тогда
				ТекстГрафа7 = ТекстГрафа7 + ?(ПустаяСтрока(ТекстГрафа7), "", ", ")
				+ СтрокаМ.Графа7;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СокрЛП(СтрокаМ.Графа9)) Тогда
				ТекстГрафа9 = ТекстГрафа9 + ?(ПустаяСтрока(ТекстГрафа9), "", ", ")
				+ СтрокаМ.Строки.Графа9;
				ТекстГрафа10 = ТекстГрафа10 + ?(ПустаяСтрока(ТекстГрафа10), "", ", ")
				+ СтрокаМ.Строки.Графа10;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//	КонецЦикла;
	
	СоставСтроки.Вставить("НомерГТД",  ТекстСтранаНомерГТД);
	СоставСтроки.Вставить("НомерГТД_", ТекстНомерГТД);
	
	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты); // Постановление 1137 до редакции 735
	СоставСтроки.Вставить("НомерДатаОплаты", ?(ПустаяСтрока(ТекстГрафа7), ТекстОплатыСНомером, ТекстГрафа7)); // Постановление в редакции 735/1279
	СоставСтроки.Вставить("НомерОтДатаОплаты", ТекстНомерОтДатаОплаты);
	
	СоставСтроки.Вставить("Продавец",        ?(ПустаяСтрока(ТекстГрафа9), ПараметрыЗаполнения.Продавец, ТекстГрафа9));
	СоставСтроки.Вставить("Графа10",         ?(ПустаяСтрока(ТекстГрафа9), Графа10, ТекстГрафа10));
	
	Если НЕ ПустаяСтрока(ТекстГрафа9) Тогда
		Посредник        = ПараметрыЗаполнения.Продавец;
		ПосредникИНН     = ПараметрыЗаполнения.ПродавецИНН;
		ПосредникКПП     = ПараметрыЗаполнения.ПродавецКПП;
		ПосредникИНН_КПП = Строка(ПараметрыЗаполнения.ПродавецИНН)+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" + Строка(ПараметрыЗаполнения.ПродавецКПП), "");
		СоставСтроки.Вставить("Контрагент", ТекстГрафа9);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаполнения.Посредник) Тогда 
		Посредник        = ПараметрыЗаполнения.Посредник.НаименованиеПолное;
		ПосредникИНН     = ПараметрыЗаполнения.Посредник.ИНН;
		ПосредникКПП     = ПараметрыЗаполнения.Посредник.КПП;
		//ПосредникИНН_КПП = Строка(ПараметрыЗаполнения.ПосредникИНН)+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПосредникКПП), "/" + Строка(ПараметрыЗаполнения.ПосредникКПП), "");
		ПосредникИНН_КПП = Строка(ПосредникИНН)+ ?(ЗначениеЗаполнено(ПосредникКПП), "/" + Строка(ПосредникКПП), "");
	Иначе
		Посредник = "";
		ПосредникИНН_КПП = "";
		ПосредникИНН = "";
		ПосредникКПП = "";
	КонецЕсли;
	
	СоставСтроки.Вставить("Посредник", Посредник);
	СоставСтроки.Вставить("ПосредникИНН_КПП", ПосредникИНН_КПП);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", ПараметрыСтроки.Ном);
		
		СоставСтроки.Вставить("НомСчФПрод", ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ", СтруктураНомераДаты.НомерИсправления);
		СоставСтроки.Вставить("ДатаИспрСчФ", СтруктураНомераДаты.ДатаИсправления);
		
		СоставСтроки.Вставить("НомКСчФПрод", СтруктураНомераДаты.НомерКорректировки);
		СоставСтроки.Вставить("ДатаКСчФПрод", СтруктураНомераДаты.ДатаКорректировки);
		
		СоставСтроки.Вставить("НомИспрКСчФ", СтруктураНомераДаты.НомерИсправленияКорректировки);
		СоставСтроки.Вставить("ДатаИспрКСчФ", СтруктураНомераДаты.ДатаИсправленияКорректировки);
		
		Если СтруктураПараметров.ПравилаЗаполнения = "2015Кв1" Тогда
			СоставСтроки.Вставить("НомТД", ТекстНомерГТД);
		ИначеЕсли СтруктураПараметров.ПравилаЗаполнения = "2017Кв1" ИЛИ СтруктураПараметров.ПравилаЗаполнения = "2019Кв1" Тогда
			Если ЗначениеЗаполнено(ТекстНомерГТД) Тогда
				РегНомТДНеуникальные = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстНомерГТД, ";");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРегНомТД, РегНомТДНеуникальные, Истина);
			КонецЕсли;
			СоставСтроки.Вставить("РегНомТД", МассивРегНомТД);
		КонецЕсли;
		
		//СоставСтроки.Вставить("НомТД", ТекстНомерГТД);
		СоставСтроки.Вставить("ОКВ", Строка(ПараметрыЗаполнения.ВалютаКод));
		
		СоставСтроки.Вставить("СтоимПокупВ", СоставСтроки.ВсегоПокупок);
		СоставСтроки.Вставить("СумНДСВыч", СоставСтроки.НДС);
		СоставСтроки.Вставить("СумНДС", СоставСтроки.НДС); // Для раздела 8.1
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.КодВидаОперации) Тогда
			КодОперации="01";
			Если ТипЗнч(ПараметрыЗаполнения.СчетФактура)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ ТипЗнч(ПараметрыЗаполнения.СчетФактура)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				КодОперации="01";
			ИначеЕсли ТипЗнч(ПараметрыЗаполнения.СчетФактура)=Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				КодОперации="23";	
			ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактура)=Тип("ДокументСсылка.ГТДИмпорт") Тогда
				КодОперации="20";	
			ИначеЕсли ТипЗнч(ЗаписьКниги.СчетФактураДокумент)=Тип("ДокументСсылка.ВосстановлениеНДС") Тогда
				КодОперации="25";	
			КонецЕсли;	
			МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодОперации, ";");
		ИначеЕсли ПараметрыЗаполнения.КодВидаОперации="02" Тогда
			Если  ТипЗнч(ПараметрыЗаполнения.СчетФактураДокумент)=Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("22", ";");
			Иначе
				МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыЗаполнения.КодВидаОперации, ";");
			КонецЕсли;	
		Иначе
			КодОперации=ПараметрыЗаполнения.КодВидаОперации;
			МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодОперации, ";");
		КонецЕсли;
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		МассивДатаУчТов = Новый Массив();
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОприходования) Тогда
			МассивДатаУчТов.Добавить(Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
		КонецЕсли; 
		
		СоставСтроки.Вставить("ДатаУчТов", МассивДатаУчТов);
		
		СоставСтроки.Вставить("ДокПдтвУпл", МассивДокПдтвУпл);
		
		Если МассивСвПрод.Количество() = 0
			И НЕ ПустаяСтрока(ПараметрыЗаполнения.ПродавецИНН) Тогда
			МассивСвПрод.Добавить(ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.Контрагент, ПараметрыЗаполнения.ПродавецИНН, ПараметрыЗаполнения.ПродавецКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СвПрод", МассивСвПрод);
		
		Если НЕ ПустаяСтрока(ПосредникИНН) Тогда
			СоставСтроки.Вставить("СвПос", ПолучитьСтруктуруРеквизитовКонтрагента(Посредник, ПосредникИНН, ПосредникКПП));
		КонецЕсли;
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел81.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел8.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров)
	
	// Определить частичные оплаты
	// Определяем полную сумму по СФ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	СУММА(НДСПредъявленныйОбороты.СуммаБезНДСПриход + НДСПредъявленныйОбороты.НДСПриход) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И (НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты)))) КАК НДСПредъявленныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//*** ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый ТаблицаЗначений;
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("ГТДиСтрана", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("ГТД", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("Графа7");
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("Графа9");
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("Графа10");
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("СчетФактура");
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("СчетФактураДокумент");
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("СуммаСНДС");
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Колонки.Добавить("ДатыОплаты");
	
	//	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
			НоваяСтрока=СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИнформации);
			НоваяСтрока.IDСчетФактура=Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор())
		КонецЕсли; 
	КонецЦикла; 
	//ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТДиСтрана", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	//ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТД", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	//ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа7");
	//ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа9");
	//ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа10");
	
	// Дополнение по ГТД и стране происхождения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Ссылка КАК СчетФактура,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	СУММА(1) КАК КоличествоЭлементов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровУслугНДС.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.Ссылка.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.Ссылка.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.СчетФактура В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаТоваров.СерияНоменклатуры.НомерГТД,
	|	ТаблицаТоваров.СерияНоменклатуры.СтранаПроисхождения.Код
	|ИТОГИ
	|	СУММА(КоличествоЭлементов)
	|ПО
	|	СчетФактура,
	|	СтранаПроисхождения";
	
	Запрос.УстановитьПараметр("СписокСФ", СписокСчетовФактур);
	
	ГТДпоСФ =  Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ГТДпоСФ.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИнформацииСФ = СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		Если СтрокаИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяСтрокаИнформацииСФ.IDСчетФактура=Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()); 
			
			СтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ;
		КонецЕсли; 
		
		СтрокаИнформации = "";
		СтрокаИнформацииГТД = "";
		
		Для Каждого СтрокаСтраныПроисхождения Из СтрокаСФ.Строки Цикл
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", Символы.ПС) + СокрЛП(СтрокаСтраныПроисхождения.СтранаПроисхождения);
			ГТДРез = "";
			Для каждого СтрокаНомерГТД Из СтрокаСтраныПроисхождения.Строки Цикл
				ГТДРез = ГТДРез + ?(ГТДРез = "","",", ") + СокрЛП(СтрокаНомерГТД.НомерГТД)
			КонецЦикла; 
			СтрокаИнформации = СтрокаИнформации + ?(СтрокаИнформации = "","",?(ГТДРез = "","",";")) + ГТДРез;
			СтрокаИнформацииГТД = СтрокаИнформацииГТД + ?(СтрокаИнформацииГТД = "","",?(ГТДРез = "","",";")) + ГТДРез;
		КонецЦикла; 
		
		//Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
		СтрокаИнформацииСФ.ГТДиСтрана = СтрокаИнформации;
		СтрокаИнформацииСФ.ГТД		  = СтрокаИнформацииГТД;
		//КонецЦикла; 
		
		СтрокаГрафа7 ="";
		Если ТипЗнч(СтрокаСФ.СчетФактура)=Тип("ДокументСсылка.ГТДИмпорт") Тогда
			Для Каждого СтрокаДок ИЗ СтрокаСФ.СчетФактура.ДатаНомерДокументовОплаты Цикл
				СтрокаГрафа7 = ?(ПустаяСтрока(СтрокаГрафа7), "", СтрокаГрафа7 + "," + Символы.ПС) 
				+ СтрокаДок.НомерПлатежноРасчетногоДокумента 
				+ ";" + Формат(СтрокаДок.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
			КонецЦИкла;	
			СтрокаИнформацииСФ.Графа7  = СтрокаГрафа7;
		КонецЕсли;	
	КонецЦикла; 
	
	// дополняем информацию датами оплаты,
	// отраженными в регистре записей книг отдельно от сумм
	//	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Организация В (&Организация)
	|	И ВЫБОР
	|			КОГДА &ЗаписьДополнительногоЛиста
	|					И &ДополнительныеЛистыЗаТекущийПериод
	|				ТОГДА НДСЗаписиКнигиПокупок.Период >= &НачалоПериода
	|						И (НДСЗаписиКнигиПокупок.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ИНАЧЕ НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И НДСЗаписиКнигиПокупок.СчетФактура В(&СписокСчетовФактур)
	|	И НДСЗаписиКнигиПокупок.СуммаБезНДС = 0
	|	И НДСЗаписиКнигиПокупок.НДС = 0
	|	И (НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", СтруктураПараметров.ЗаписьДополнительногоЛиста);
	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИнформацииСФ = СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		
		Если СтрокаИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяСтрокаИнформацииСФ.IDСчетФактура=Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()); 
			СтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ;
		КонецЕсли; 
		
		СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
	КонецЦикла; 
	
	Возврат СоответствиеСтрокиДопИнформацииПоСчетуФактуре; //*********************** Дописать работу с коммисионерами *********************************** 
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ТаблицаПродавцы.Продавец.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ТаблицаПродавцы.Продавец.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ТаблицаПродавцы.Продавец.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Продавец,
	|	ТаблицаПродавцы.Продавец.ИНН КАК ИНН,
	|	ТаблицаПродавцы.Продавец.КПП КАК КПП,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерПлатежногоДокумента,
	|	СУММА(1) КАК КоличествоЭлементов,
	|	ТаблицаПродавцы.Продавец.ЮрФизЛицо КАК ЮридическоеФизическоеЛицо
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Продавцы КАК ТаблицаПродавцы
	|		ПО (ТаблицаПродавцы.Ссылка = СчетФактураПолученный.Ссылка)
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокСчетовФактур)
	//***|	И СчетФактураПолученный.СводныйКомиссионный
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродавцы.Продавец,
	|	СчетФактураПолученный.Ссылка,
	|	ТаблицаПродавцы.Продавец.ИНН,
	|	ТаблицаПродавцы.Продавец.КПП,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ТаблицаПродавцы.Продавец.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ТаблицаПродавцы.Продавец.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ТаблицаПродавцы.Продавец.НаименованиеПолное, 1, 250)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	NULL,
	|	NULL,
	|	ТаблицаПлатежноРасчетныеДокументы.ДатаДокумента,
	|	ТаблицаПлатежноРасчетныеДокументы.НомерДокумента,
	|	СУММА(1),
	|	NULL
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ПлатежноРасчетныеДокументы КАК ТаблицаПлатежноРасчетныеДокументы
	|		ПО (ТаблицаПлатежноРасчетныеДокументы.Ссылка = СчетФактураПолученный.Ссылка)
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокСчетовФактур)
	//***** |	И СчетФактураПолученный.СводныйКомиссионный
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПлатежноРасчетныеДокументы.ДатаДокумента,
	|	ТаблицаПлатежноРасчетныеДокументы.НомерДокумента,
	|	СчетФактураПолученный.Ссылка
	|ИТОГИ
	|	СУММА(КоличествоЭлементов)
	|ПО
	|	СчетФактураДокумент";
	
	ИнформацияПоСводномуСчетуФактуре=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("Графа7");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("Графа9");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("Графа10");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("МассивСвПрод"); // Массив сведений о продавцах для декларации с 1 кв 2015 г.
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("ГТДиСтрана");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("ГТД");
	
	Для каждого СтрокаСФ Из ИнформацияПоСводномуСчетуФактуре.Строки Цикл
		СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактураДокумент.УникальныйИдентификатор()), СтрокаСФ);
	КонецЦикла;
	
	Для каждого СтрокаСФ Из ИнформацияПоСводномуСчетуФактуре.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСФ.СчетФактураДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГрафа7 = "";
		СтрокаГрафа9 = "";
		СтрокаГрафа10 = "";
		МассивСвПрод = Новый Массив();
		
		Для каждого СтрокаДетальнойИнформации Из СтрокаСФ.Строки Цикл 
			
			Если ЗначениеЗаполнено(СтрокаДетальнойИнформации.ДатаПлатежногоДокумента) Тогда
				СтрокаГрафа7 = ?(ПустаяСтрока(СтрокаГрафа7), "", СтрокаГрафа7 + "," + Символы.ПС) 
				+ СтрокаДетальнойИнформации.НомерПлатежногоДокумента 
				+ ";" + Формат(СтрокаДетальнойИнформации.ДатаПлатежногоДокумента, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СтрокаДетальнойИнформации.Продавец) Тогда
				СтрокаГрафа9 = ?(ПустаяСтрока(СтрокаГрафа9), "", СтрокаГрафа9 + ";" + Символы.ПС) 
				+ СокрЛП(СтрокаДетальнойИнформации.Продавец);
				
				СтрокаГрафа10 = ?(ПустаяСтрока(СтрокаГрафа10), "", СтрокаГрафа10 + ";" + Символы.ПС) 
				+ СокрЛП(СтрокаДетальнойИнформации.ИНН) 
				+ ?(ПустаяСтрока(СтрокаДетальнойИнформации.КПП), "", "/" + СокрЛП(СтрокаДетальнойИнформации.КПП));
				СтруктураРеквизитовКонтрагента = Новый Структура();
				
				Если СтрокаДетальнойИнформации.ЮридическоеФизическоеЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", СтрокаДетальнойИнформации.ИНН);
					МассивСвПрод.Добавить(СтруктураРеквизитовКонтрагента);
				Иначе
					СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", СтрокаДетальнойИнформации.ИНН);
					СтруктураРеквизитовКонтрагента.Вставить("КПП", СтрокаДетальнойИнформации.КПП);
					МассивСвПрод.Добавить(СтруктураРеквизитовКонтрагента);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаСФ.Графа7  = СтрокаГрафа7;
		СтрокаСФ.Графа9  = СтрокаГрафа9;
		СтрокаСФ.Графа10 = СтрокаГрафа10;
		СтрокаСФ.МассивСвПрод = МассивСвПрод;
		
	КонецЦикла;
	
	Возврат СоответствиеСтрокиДопИнформацииПоСчетуФактуре;	
КонецФункции

&НаСервере
Процедура ПреобразоватьЗаписиКнигиПокупок(СтруктураПараметров, НаборЗаписей, ТабДокумент = Неопределено,
	СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено,
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено)
	
	
	СтруктураПараметров.ЗаписьДополнительногоЛиста = Ложь;
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
	Для Каждого СтрокаН ИЗ НаборЗаписей Цикл
		текСтрока=СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Найти(СтрокаН.СчетФактура,"СчетФактура");
		Если НЕ текСтрока=Неопределено Тогда
			текСтрока.СчетФактураДокумент=СтрокаН.СчетФактураДокумент;
		Конецесли;	
		СтрокаН.СчетФактура=СтрокаН.СчетФактураДокумент;
		//		СтрокаН.ДатаОприходования=СтрокаН.СчетФактураДокумент.Дата;
		СтрокаН.СчетФактураДата=СтрокаН.СчетФактураДокумент.Дата;
	КонецЦикла;	
	
	стрСтрокаСветрки="";
	стрСтрокаСветркиЧисло="";
	Для Каждого СтрКолонка ИЗ НаборЗаписей.Колонки Цикл
		Если СтрКолонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			стрСтрокаСветркиЧисло=стрСтрокаСветркиЧисло+?(стрСтрокаСветркиЧисло="","",",")+СтрКолонка.Имя;
		Иначе	
			стрСтрокаСветрки=стрСтрокаСветрки+?(стрСтрокаСветрки="","",",")+СтрКолонка.Имя;
		КонецЕсли;
	КонецЦикла;	
	НаборЗаписей.Свернуть(стрСтрокаСветрки,стрСтрокаСветркиЧисло);
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		НаборЗаписей.Сортировать("Продавец Возр, НалоговыйПериод Возр, ПорядокОтраженияПоДатам Возр, СчетФактураДата Возр, ДатаОплаты Возр");
	Иначе
		НаборЗаписей.Сортировать("НалоговыйПериод Возр, ПорядокОтраженияПоДатам Возр, СчетФактураДата Возр, ДатаОплаты Возр");
	КонецЕсли;				   
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли; 
	
	Счетчик = 0; // Счетчик строк книги покупок
	СчетчикСтрокТекущегоСегмента = 0; // Используется для сегментирования разделов декларации по НДС
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		тзПоКонтрагентам=НаборЗаписей.Скопировать();
		тзПоКонтрагентам.Свернуть("Продавец",стрСтрокаСветркиЧисло);
		Для Каждого ИтогПоКонтрагенту Из тзПоКонтрагентам Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабДокумент.НачатьГруппуСтрок();
			
			МассивСтрокК=НаборЗаписей.НайтиСтроки(Новый Структура("Продавец",ИтогПоКонтрагенту.Продавец));
			Для Каждого ЗаписьКниги Из МассивСтрокК Цикл
				Счетчик = Счетчик + 1;
				ПараметрыСтроки.Ном = Счетчик;
				
				ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
				
				ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
			КонецЦикла; 
			
			ТабДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.НДС=ИтогПоКонтрагенту.НДС10+ИтогПоКонтрагенту.НДС18+ИтогПоКонтрагенту.НДС20;
			ТабДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		Для каждого ЗаписьКниги Из НаборЗаписей Цикл
			Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
				ПараметрыСтроки = ТаблицаДокумента.Добавить();
			КонецЕсли;	
			
			Счетчик = Счетчик + 1;
			СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
			ПараметрыСтроки.Ном = Счетчик;
			
			ЗаполнитьСтрокуКнигиПокупок(ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
			
			Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
				СтруктураСекций.СекцияСтрока.Область(1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + ПараметрыСтроки.Ном;
				ТабДокумент.Вывести(СтруктураСекций.СекцияСтрока);
			КонецЕсли;
			
			Если СтруктураПараметров.ЗаполнениеДекларации 
				И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
				
				// Запишем сегмент
				ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
				
				РО.ЗаписатьСегментДанныхРазделаДекларацииНДС(
				СтруктураПараметров.СсылкаНаДекларацию,
				"Раздел8",
				ПерваяСтрокаСегмента,
				СтруктураПараметров.ТаблицаРаздел8);
				
				РО.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
				СтруктураПараметров.СсылкаНаДекларацию,
				"Раздел8",
				ПерваяСтрокаСегмента,
				ТабДокумент);
				
				// Очистим табличный документ и таблицу
				ТабДокумент.Очистить();
				ТабДокумент.Вывести(СтруктураСекций.ШапкаРаздел8);
				ТабДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
				
				СтруктураПараметров.ТаблицаРаздел8.Очистить();
				
				// Обнулим счетчик текущего сегмента
				СчетчикСтрокТекущегоСегмента = 0;
				
			КонецЕсли;
		КонецЦикла;
		Если СтруктураПараметров.ЗаполнениеДекларации Тогда
			СтруктураПараметров.Вставить("СчетчикСтрокТекущегоСегмента", СчетчикСтрокТекущегоСегмента);
			СтруктураПараметров.Вставить("Счетчик",                      Счетчик);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьИменаДокументовСДаннымиСФ()
	
	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если УправлениеМетаданными.ЕстьРеквизит("ПредъявленСчетФактура", Документ) Тогда
			ИменаДокументов.Добавить(Документ.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаДокументов;
	
КонецФункции

&НаСервере
Функция ВидыЦенностейНалоговыйАгент(ТолькоПодлежащиеВычету = Истина)
	
	МассивВидовЦенности = Новый Массив;
	МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Если Не ТолькоПодлежащиеВычету Тогда
		МассивВидовЦенности.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	КонецЕсли;   
	
	Возврат МассивВидовЦенности; 
	
КонецФункции

&НаСервере
Функция ВидыЦенностиНалоговыйАгентПоступление()
	
	Возврат ВидыЦенностейНалоговыйАгент(Истина);
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПокупателейПоАвансам", СтруктураПараметров.ВыводитьПокупателейПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета",		Константы.ВалютаРегламентированногоУчета.Получить());
	
	ДатаПроверкиПараметровУчета ='00010101';
	Если СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации 
		И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		// Параметры для заполнения документа "Дополнительный лист книги покупок
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;
	Иначе
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПравилаПостановления735", Истина);	
	
	СтавкиНДС20 = Новый Массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20", СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0", СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_АвансыПолученные = Новый Массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	//ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыВыданные", Перечисления.ВидыЦенностей.АвансыВыданные);
	
	ВидыЦенностей_СуммовыеРазницы = Новый Массив;
	ВидыЦенностей_СуммовыеРазницы.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница", ВидыЦенностей_СуммовыеРазницы);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	//*** ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);	
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностиНалоговыйАгентПоступление());
	
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаписиКнигиПокупок(СписокСчетовФактур, СтруктураПараметров)
	
	Организация=СтруктураПараметров.Организация;
	НачалоПериода=СтруктураПараметров.НачалоПериода;
	КонецПериода=СтруктураПараметров.КонецПериода;
	СформироватьОтчетПоСтандартнойФорме=СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме;
	ОтбиратьПоКонтрагенту=СтруктураПараметров.ОтбиратьПоКонтрагенту;
	КонтрагентДляОтбора=СтруктураПараметров.КонтрагентДляОтбора;
	ГруппироватьПоКонтрагентам=СтруктураПараметров.ГруппироватьПоКонтрагентам;
	
	НаАванс=Ложь;
	
	// Создаем запрос по счетам-фактурам
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", КонтрагентДляОтбора);
	
	СтавкиНДС20 = новый массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"		, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = новый массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);  
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_АвансыПолученные = новый массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	
	ВидыЦенностей_АвансыПолученные1 = новый массив;
	ВидыЦенностей_АвансыПолученные1.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные1.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученныеДатаОприходования", ВидыЦенностей_АвансыПолученные1);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	Запрос.УстановитьПараметр("ПустойКонтрагент",Справочники.Контрагенты.ПустаяСсылка());
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаписиКнигиПокупокОбороты.КодВидаОперации КАК КодВидаОперации,
	|	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.Период КАК Период,
	|	НДСЗаписиКнигиПокупокОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ТОГДА
	|			НДСЗаписиКнигиПокупокОбороты.Организация
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ТОГДА
	|			НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец.ИНН
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ТОГДА
	|			НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец.КПП
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, Квартал)
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты > НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|							ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|						ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|					КОНЕЦ
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, Квартал)
	|		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	//|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК ВсегоПокупок,
	|	СУММА(ВЫБОР 
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""34"" 
	|				ТОГДА 0 
	|			ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот 
	|		КОНЕЦ) КАК ВсегоПокупок,
	
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""34"" И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС И НЕ НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""33"" И НЕ НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""34""
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ) ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат) 
	//|					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.Наименование
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец.НаименованиеПолное, 1, 250)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Продавец,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученныеДатаОприходования)
	|			ТОГДА """"
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Квартал,
	|			Организация = &Организация
	|				И (НЕ ЗаписьДополнительногоЛиста = ИСТИНА)
	|				И ВЫБОР
	|					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|						ТОГДА Поставщик = &КонтрагентДляОтбора
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.КодВидаОперации,
	|	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Период,
	|	НДСЗаписиКнигиПокупокОбороты.Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученныеДатаОприходования)
	|			ТОГДА """"
	//	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, Квартал)
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты > НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|							ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|						ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|					КОНЕЦ
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, Квартал)
	|		КОНЕЦ, ДЕНЬ),
	|	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ) ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|				ИЛИ НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат) 
	//|					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.Наименование
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	//	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец.НаименованиеПолное, 1, 250)
	
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ТОГДА
	|			НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец.КПП
	
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ТОГДА
	|			НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	//	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец.ИНН
	
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ТОГДА
	|			НДСЗаписиКнигиПокупокОбороты.Организация
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный И НЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец=&ПустойКонтрагент ТОГДА
	//|			НДСЗаписиКнигиПокупокОбороты.СчетФактура.Продавец
	
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	//***Запрос.Текст = СтрЗаменить(Запрос.Текст,"Месяц,", "Квартал,");
	
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументы(Запрос);
	Запрос.УстановитьПараметр("ВалютаПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаКодПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить().Код);
	Запрос.УстановитьПараметр("ВалютаКодПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить().Код);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	     	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|			   	  ВЫБОР 
	|	   		     	  КОГДА (ЗаписиКнигиПокупок.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ТОГДА
	|	   		     	  		ЗаписиКнигиПокупок.СчетФактура.ДокументОснование.Контрагент
	|	   		     	  КОГДА (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		     	 		 ЗаписиКнигиПокупок.СчетФактура.Контрагент
	|	   			  КОНЕЦ
	|	    	КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|		   	  ВЫБОР 
	|	   	     	  КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ТОГДА
	|	   	     	  ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.ДокументОснование.Контрагент
	|	   	     	  КОГДА (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   	     	  ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент
	|	   		  КОНЕЦ
	|	    КОНЕЦ
	|	КОНЕЦ КАК Посредник,  
	|   
	|   ВЫБОР КОГДА ЗаписиКнигиПокупок.КодВидаОперации="""" ТОГДА
	|		ЕСТЬNULL(ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации, ЗаписиКнигиПокупок.СчетФактура.КодВидаОперации),"""") 
	|	ИНАЧЕ 
	|		ЗаписиКнигиПокупок.КодВидаОперации 
	|	КОНЕЦ КАК КодВидаОперации,
	|	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.Период КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Продавец
	|	  	 КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ГТДИмпорт) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Поставщик=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Поставщик
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.Контрагент 
	|		КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.ГТДИмпорт) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент 
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.Контрагент 
	|	    КОНЕЦ
	|	КОНЕЦ КАК Контрагент,  
	
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Продавец.ИНН
	|	  	 КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ГТДИмпорт) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Поставщик=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Поставщик.ИНН
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.ПродавецИНН 
	|		КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец.ИНН
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.ГТДИмпорт) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик.ИНН
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.ИНН 
	|			ИНАЧЕ 
	|				ЗаписиКнигиПокупок.ПродавецИНН 
	|	    	КОНЕЦ
	|	КОНЕЦ КАК ПродавецИНН,  
	
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Продавец.КПП
	|	  	 КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ГТДИмпорт) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Поставщик=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Поставщик.КПП
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.ПродавецКПП 
	|		КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец.КПП
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.ГТДИмпорт) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик.КПП
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.КПП 
	|			ИНАЧЕ 
	|				ЗаписиКнигиПокупок.ПродавецКПП 
	|	    	КОНЕЦ
	|	КОНЕЦ КАК ПродавецКПП,  
	
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ПОДСТРОКА(ЗаписиКнигиПокупок.СчетФактура.Продавец.НаименованиеПолное, 1, 250)
	|	  	 КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ГТДИмпорт) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Поставщик=&ПустойКонтрагент) ТОГДА
	|	        ПОДСТРОКА(ЗаписиКнигиПокупок.СчетФактура.Поставщик.НаименованиеПолное, 1, 250)
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.Продавец 
	|		КОНЕЦ
	|	ИНАЧЕ    
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец.НаименованиеПолное, 1, 250)
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.ГТДИмпорт) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик=&ПустойКонтрагент) ТОГДА
	|	   		   ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Поставщик.НаименованиеПолное, 1, 250)
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.НаименованиеПолное, 1, 250) 
	|			ИНАЧЕ 
	|				ЗаписиКнигиПокупок.Продавец 
	|	    	КОНЕЦ
	|	КОНЕЦ КАК Продавец,  
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	//	|	ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.Номер,"""") КАК НомерДокументаОплаты, 
	|	ВЫБОР КОГДА ЗаписиКнигиПокупок.ДокументОплаты ССЫЛКА Документ.ПлатежноеПоручениеВходящее ИЛИ ЗаписиКнигиПокупок.ДокументОплаты ССЫЛКА Документ.ДокументРасчетовСКонтрагентом ТОГДА
	|		ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.НомерВходящегоДокумента,"""")
	|	ИНАЧЕ 
	|		ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.Номер,"""") КОНЕЦ КАК НомерДокументаОплаты, 
	|	ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.Дата,"""") КАК ДатаДокументаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.Номер
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули, ЛОЖЬ) КАК УдалятьЛидирующиеНули,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|	   ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура.РучнаяКорректировка) ТОГДА
	|	       ЗаписиКнигиПокупок.СчетФактура.СуммаДокумента
	|		ИНАЧЕ
	|			ЗаписиКнигиПокупок.ВсегоПокупок 
	|	    КОНЕЦ
	|	 ИНАЧЕ
	|	   ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|		   ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.РучнаяКорректировка) ТОГДА
	|	   	    	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.СуммаДокумента
	|			ИНАЧЕ
	|				ЗаписиКнигиПокупок.ВсегоПокупок 
	|	   		 КОНЕЦ
	|		ИНАЧЕ
	|			ЗаписиКнигиПокупок.ВсегоПокупок 
	|	   	КОНЕЦ
	|	   	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПокупок.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс И НЕ ЗаписиКнигиПокупок.КодВидаОперации=""33"" И НЕ ЗаписиКнигиПокупок.КодВидаОперации=""34""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|		ПО ЗаписиКнигиПокупок.СчетФактура = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорКонтрагента = Приоритеты.ДоговорКонтрагента
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорКонтрагента = ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДата,
	|	ДатаОплаты
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеДопЛистовКнигиПокупок(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДопЛисты,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупокОбороты.Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&НачалоПериода
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И КорректируемыйПериод >= &НачалоПериода
	|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.Период";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьЗаписиДополнительныхЛистовКнигиПокупок(СписокСчетовФактур, СтруктураПараметров)
	Организация=СтруктураПараметров.Организация;
	НачалоПериода=СтруктураПараметров.НачалоПериода;
	КонецПериода=СтруктураПараметров.КонецПериода;
	//НДСНалоговыйПериод=УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, КонецПериода);
	СформироватьОтчетПоСтандартнойФорме=СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме;
	ОтбиратьПоКонтрагенту=СтруктураПараметров.ОтбиратьПоКонтрагенту;
	ДополнительныеЛистыЗаТекущийПериод=СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод;
	ГруппироватьПоКонтрагентам=СтруктураПараметров.ГруппироватьПоКонтрагентам;
	КонтрагентДляОтбора=СтруктураПараметров.КонтрагентДляОтбора;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"	, КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("НалоговыйПериодМесяц", Перечисления.Периодичность.Месяц);
	Запрос.УстановитьПараметр("НалоговыйПериодКвартал", Перечисления.Периодичность.Квартал);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", Не СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", КонтрагентДляОтбора);
	Если СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Иначе
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецПериода));
	КонецЕсли;
	
	
	СтавкиНДС20 = новый массив();
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20);
	СтавкиНДС20.Добавить(Перечисления.СтавкиНДС.НДС20_120);
	
	СтавкиНДС18 = новый массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = новый массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС20"	, СтавкиНДС20);
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"	, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС"	, СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = новый массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные); 
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_АвансыПолученные = Новый массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	
	ВидыЦенностей_АвансыПолученные1 = Новый массив;
	ВидыЦенностей_АвансыПолученные1.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные1.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученныеДатаОприходования", ВидыЦенностей_АвансыПолученные);
	
	
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя 
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	|	КОНЕЦ КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	|	КОНЕЦ КАК ПродавецКПП,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	|		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)) КАК ВсегоПокупок,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС20)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС20,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""33"" ИЛИ НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""34"" И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И (НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	//	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС И НЕ НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""33"" И НЕ НДСЗаписиКнигиПокупокОбороты.КодВидаОперации=""34""
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПокупокОбороты.Организация КАК Организация,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
	//|					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.Наименование
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ КАК Продавец,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученныеДатаОприходования)
	|			ТОГДА """"
	//	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	|						ТОГДА &НалоговыйПериодМесяц
	|					ИНАЧЕ &НалоговыйПериодКвартал
	|				КОНЕЦ) = &НалоговыйПериодКвартал
	|			ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	|						ТОГДА &НалоговыйПериодМесяц
	|					ИНАЧЕ &НалоговыйПериодКвартал
	|				КОНЕЦ) = &НалоговыйПериодКвартал
	|			ТОГДА КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|	КОНЕЦ КАК КонецНалоговогоПериода,
	|	НДСЗаписиКнигиПокупокОбороты.Период КАК ДатаОформления,
	|	НДСЗаписиКнигиПокупокОбороты.КодВидаОперации КАК КодВидаОперации
	//|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод КАК КорректируемыйПериод
	|ПОМЕСТИТЬ ЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация = &Организация
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И ВЫБОР
	|					КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|						ТОГДА Поставщик = &КонтрагентДляОтбора
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО (УчетнаяПолитика.Организация = НДСЗаписиКнигиПокупокОбороты.Организация)
	|			И (УчетнаяПолитика.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|				ГДЕ
	|					НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод >= УчетнаяПолитика.Период
	|					И УчетнаяПолитика.Организация = НДСЗаписиКнигиПокупокОбороты.Организация))
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ДокументОплаты,
	|	НДСЗаписиКнигиПокупокОбороты.Событие,
	|	НДСЗаписиКнигиПокупокОбороты.Организация,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата,
	|	НДСЗаписиКнигиПокупокОбороты.Период,
	|	НДСЗаписиКнигиПокупокОбороты.КодВидаОперации,
	//|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|					ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаСобытия
	|			КОГДА (НЕ НДСЗаписиКнигиПокупокОбороты.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1))
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата, МЕСЯЦ)
	|		КОНЕЦ, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученныеДатаОприходования)
	|			ТОГДА """"
	//	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДатаОплаты
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураВыданный).ДокументОснование.Дата
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.СчетФактураПолученный).ДокументОснование.Дата
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.СчетФактура.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	|						ТОГДА &НалоговыйПериодМесяц
	|					ИНАЧЕ &НалоговыйПериодКвартал
	|				КОНЕЦ) = &НалоговыйПериодКвартал
	|			ТОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитика.НДСНалоговыйПериод, ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
	|						ТОГДА &НалоговыйПериодМесяц
	|					ИНАЧЕ &НалоговыйПериодКвартал
	|				КОНЕЦ) = &НалоговыйПериодКвартал
	|			ТОГДА КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод, КВАРТАЛ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.ИНН
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.ИНН
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	//|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	//|				И ((НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	//|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.КПП
	|		ИНАЧЕ НДСЗаписиКнигиПокупокОбороты.Поставщик.КПП
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя ИЛИ НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
	//|					И (НЕ(НДСЗаписиКнигиПокупокОбороты.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	//|							И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат))
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА НДСЗаписиКнигиПокупокОбороты.Организация.Наименование
	|					ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Организация.НаименованиеПолное, 1, 250)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА НДСЗаписиКнигиПокупокОбороты.Поставщик.Наименование
	|				ИНАЧЕ ПОДСТРОКА(НДСЗаписиКнигиПокупокОбороты.Поставщик.НаименованиеПолное, 1, 250)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	
	Если ДополнительныеЛистыЗаТекущийПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонецПериода", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
		"ЗаписьДополнительногоЛиста = ИСТИНА 
		|И КорректируемыйПериод >= &НачалоНалоговогоПериода 
		|И КорректируемыйПериод <= &КонецНалоговогоПериода");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументы(Запрос);
	
	Запрос.УстановитьПараметр("ВалютаПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаКодПоУмолчанию",Константы.ВалютаРегламентированногоУчета.Получить().Код);
	Запрос.УстановитьПараметр("ПустойКонтрагент",Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	     	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|			   	  ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ТОГДА
	|	   		     	  ЗаписиКнигиПокупок.СчетФактура.ДокументОснование.Контрагент
	|	   		     	 КОГДА (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		     	 	 ЗаписиКнигиПокупок.СчетФактура.Контрагент
	|	   			  КОНЕЦ
	|	    	КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|		   	  ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.ДокументОснование ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера) ТОГДА
	|	   	     	  ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.ДокументОснование.Контрагент
	|	   	     	 КОГДА (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   	     	  ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент
	|	   		  КОНЕЦ
	|	    КОНЕЦ
	|	КОНЕЦ КАК Посредник, 
	|   ВЫБОР КОГДА ЗаписиКнигиПокупок.КодВидаОперации="""" ТОГДА
	|		ЕСТЬNULL(ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации, ЗаписиКнигиПокупок.СчетФактура.КодВидаОперации),"""") 
	|	ИНАЧЕ 
	|		ЗаписиКнигиПокупок.КодВидаОперации 
	|	КОНЕЦ КАК КодВидаОперации,
	//|   ЕСТЬNULL(ЕСТЬNULL(ЗаписиКнигиПокупок.КодВидаОперации, ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.КодВидаОперации, ЗаписиКнигиПокупок.СчетФактура.КодВидаОперации)),"""") КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента, &ВалютаПоУмолчанию) <> &ВалютаПоУмолчанию
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ВалютаДокумента.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.НалоговыйПериод КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Продавец
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.Контрагент 
	|		КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент 
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.Контрагент 
	|	    КОНЕЦ
	|	КОНЕЦ КАК Контрагент, 
	
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Продавец.ИНН
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.ПродавецИНН 
	|		КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец.ИНН
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.ИНН 
	|			ИНАЧЕ 
	|				ЗаписиКнигиПокупок.ПродавецИНН 
	|	    	КОНЕЦ
	|	КОНЕЦ КАК ПродавецИНН,  
	
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ЗаписиКнигиПокупок.СчетФактура.Продавец.КПП
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.ПродавецКПП 
	|		КОНЕЦ
	|	ИНАЧЕ 
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец.КПП
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.КПП 
	|			ИНАЧЕ 
	|				ЗаписиКнигиПокупок.ПродавецКПП 
	|	    	КОНЕЦ
	|	КОНЕЦ КАК ПродавецКПП,  
	
	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Продавец=&ПустойКонтрагент) ТОГДА
	|	        ПОДСТРОКА(ЗаписиКнигиПокупок.СчетФактура.Продавец.НаименованиеПолное, 1, 250)
	|		ИНАЧЕ 
	|			ЗаписиКнигиПокупок.Продавец 
	|		КОНЕЦ
	|	ИНАЧЕ    
	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец=&ПустойКонтрагент) ТОГДА
	|	   		   ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Продавец.НаименованиеПолное, 1, 250)
	|	     КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя) ТОГДА
	|	     	ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.НаименованиеПолное, 1, 250) 
	|			ИНАЧЕ 
	|				ЗаписиКнигиПокупок.Продавец 
	|	    	КОНЕЦ
	|	КОНЕЦ КАК Продавец,  
	
	
	//	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	//	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Контрагент=&ПустойКонтрагент) ТОГДА
	//	//|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Контрагент=&ПустойКонтрагент) И (НЕ ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат) ТОГДА
	//	|	        ЗаписиКнигиПокупок.СчетФактура.Контрагент.ИНН
	//	|		ИНАЧЕ 
	//	|			ЗаписиКнигиПокупок.ПродавецИНН 
	//	|		КОНЕЦ
	//	|	ИНАЧЕ 
	//	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент=&ПустойКонтрагент) ТОГДА
	//	//|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент=&ПустойКонтрагент) И (НЕ ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат) ТОГДА
	//	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.ИНН
	//	|			ИНАЧЕ 
	//	|				ЗаписиКнигиПокупок.ПродавецИНН 
	//	|	    	КОНЕЦ
	//	|	КОНЕЦ КАК ПродавецИНН,  
	//	
	//	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	//	//|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Контрагент=&ПустойКонтрагент) И (НЕ ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат) ТОГДА
	//	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Контрагент=&ПустойКонтрагент) ТОГДА
	//	|	        ЗаписиКнигиПокупок.СчетФактура.Контрагент.КПП
	//	|		ИНАЧЕ 
	//	|			ЗаписиКнигиПокупок.ПродавецКПП 
	//	|		КОНЕЦ
	//	|	ИНАЧЕ 
	//	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент=&ПустойКонтрагент) ТОГДА
	//	//|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент=&ПустойКонтрагент) И (НЕ ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат) ТОГДА
	//	|	   		   ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.КПП
	//	|			ИНАЧЕ 
	//	|				ЗаписиКнигиПокупок.ПродавецКПП 
	//	|	    	КОНЕЦ
	//	|	КОНЕЦ КАК ПродавецКПП,  
	//	
	//	|	ВЫБОР КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL ТОГДА
	//	|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Контрагент=&ПустойКонтрагент) ТОГДА
	//	//|	  	 ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ЗаписиКнигиПокупок.СчетФактура.Контрагент=&ПустойКонтрагент) И (НЕ ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат) ТОГДА
	//	|	        ПОДСТРОКА(ЗаписиКнигиПокупок.СчетФактура.Контрагент.НаименованиеПолное, 1, 250)
	//	|		ИНАЧЕ 
	//	|			ЗаписиКнигиПокупок.Продавец 
	//	|		КОНЕЦ
	//	|	ИНАЧЕ 
	//	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент=&ПустойКонтрагент) ТОГДА
	////	|	     ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) И (НЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент=&ПустойКонтрагент) И (НЕ ВЫРАЗИТЬ(ЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат) ТОГДА
	//	|	   		   ПОДСТРОКА(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.Контрагент.НаименованиеПолное, 1, 250)
	//	|			ИНАЧЕ 
	//	|				ЗаписиКнигиПокупок.Продавец 
	//	|	    	КОНЕЦ
	//	|	КОНЕЦ КАК Продавец,  
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	
	|	ВЫБОР КОГДА ЗаписиКнигиПокупок.ДокументОплаты ССЫЛКА Документ.ПлатежноеПоручениеВходящее ИЛИ ЗаписиКнигиПокупок.ДокументОплаты ССЫЛКА Документ.ДокументРасчетовСКонтрагентом ТОГДА
	|		ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.НомерВходящегоДокумента,"""")
	|	ИНАЧЕ 
	|		ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.Номер,"""") КОНЕЦ КАК НомерДокументаОплаты, 
	//	|	ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.Номер,"""") КАК НомерДокументаОплаты,  
	|	ЕСТЬNULL(ЗаписиКнигиПокупок.ДокументОплаты.Дата,"""") КАК ДатаДокументаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.Номер
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактура.ДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.УдалятьЛидирующиеНули, ЛОЖЬ) КАК УдалятьЛидирующиеНули,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|	   ВЫБОР КОГДА (ЗаписиКнигиПокупок.СчетФактура.РучнаяКорректировка) ТОГДА
	|	       ЗаписиКнигиПокупок.СчетФактура.СуммаДокумента
	|		ИНАЧЕ
	|			ЗаписиКнигиПокупок.ВсегоПокупок 
	|	    КОНЕЦ
	|	 ИНАЧЕ
	|	   ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ССЫЛКА Документ.СчетФактураПолученный) ТОГДА
	|		   ВЫБОР КОГДА (ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.РучнаяКорректировка) ТОГДА
	|	   	    	ТаблицаСчетаФактурыДокументы.СчетФактураДокумент.СуммаДокумента
	|			ИНАЧЕ
	|				ЗаписиКнигиПокупок.ВсегоПокупок 
	|	   		 КОНЕЦ
	|		ИНАЧЕ
	|			ЗаписиКнигиПокупок.ВсегоПокупок 
	|	   	КОНЕЦ
	|	   	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС20
	|	КОНЕЦ КАК СуммаБезНДС20,
	|	ЗаписиКнигиПокупок.НДС20 КАК НДС20,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс И НЕ ЗаписиКнигиПокупок.КодВидаОперации=""33"" И НЕ ЗаписиКнигиПокупок.КодВидаОперации=""34""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПокупок.ДатаОформления КАК ДатаОформления,
	|	ЗаписиКнигиПокупок.КонецНалоговогоПериода КАК КонецНалоговогоПериода
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса) КАК Приоритеты
	|		ПО ЗаписиКнигиПокупок.СчетФактура = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорКонтрагента = Приоритеты.ДоговорКонтрагента
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорКонтрагента = ТаблицаСчетаФактурыДокументы.ДоговорКонтрагента)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	ПорядокОтраженияПоДатам,
	|	СчетФактураДата,
	|	ДатаОплаты";
	
	Если ГруппироватьПоКонтрагентам И Не СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
		|	НалоговыйПериод,
		|	ДатаОформления,", "ПО
		|	НалоговыйПериод,
		|	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;				   
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос)
	
	МассивДокументовСДаннымиСФ = ПолучитьИменаДокументовСДаннымиСФ();
	
	ТекстЗапросаПоДокументамСДаннымиСФ = "";
	
	Если МассивДокументовСДаннымиСФ.Количество() <> 0 Тогда
		
		Для Каждого ИмяДокумента Из МассивДокументовСДаннымиСФ Цикл
			ТекстЗапросаПоДокументамСДаннымиСФ = ТекстЗапросаПоДокументамСДаннымиСФ + 
			"
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	ДокументСДаннымиСФ.Ссылка,
			|	ДокументСДаннымиСФ.НомерВходящегоСчетаФактуры,
			|	ДокументСДаннымиСФ.ДатаВходящегоСчетаФактуры,
			|	ДокументСДаннымиСФ.Ссылка,
			|	ЛОЖЬ,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ДокументСДаннымиСФ.Ссылка,
			|	ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
			|	ЛОЖЬ,
			|	ДокументСДаннымиСФ.Контрагент,
			|	ЛОЖЬ,
			|	1,
			|	ЛОЖЬ,
			|	ЛОЖЬ
			|ИЗ
			|	Документ." + ИмяДокумента + " КАК ДокументСДаннымиСФ
			|ГДЕ
			|	ДокументСДаннымиСФ.ПредъявленСчетФактура 
			|	И ДокументСДаннымиСФ.Проведен
			|	И (НЕ ДокументСДаннымиСФ.ПометкаУдаления)
			|	И ДокументСДаннымиСФ.Организация В (&Организация)";
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧПокупатели.СчетФактура
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера
	|ИЗ
	|	Документ.КомиссияОтчетПродажиКомиссионера.Покупатели КАК ТЧПокупатели
	|ГДЕ
	|	ТЧПокупатели.Ссылка.Проведен
	|	И НЕ ТЧПокупатели.Ссылка.ПометкаУдаления
	|	И ТЧПокупатели.Ссылка.Организация В(&Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТЧПокупатели.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СчетаФактурыДокументы.СчетФактура, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактура,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДатаСчетаФактуры, ДанныеПервичныхДокументов.Дата) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактурыДокументы.НомерСчетаФактуры, ДанныеПервичныхДокументов.Номер) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДоговорАванса, НЕОПРЕДЕЛЕНО) КАК ДоговорАванса,
	|	ЕСТЬNULL(СчетаФактурыДокументы.СтавкаНДСАванса, НЕОПРЕДЕЛЕНО) КАК СтавкаНДСАванса,
	|	СчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокументРасшифровка,
	|	СчетаФактурыДокументы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ВидСчетаФактуры, ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)) КАК ВидСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактурыДокументы.Исправление, ЛОЖЬ) КАК Исправление,
	|	СчетаФактурыДокументы.НомерСтроки,
	|	СчетаФактурыДокументы.СводныйКорректировочный,
	|	СчетаФактурыДокументы.СводныйКомиссионный,
	|	ЕСТЬNULL(СчетаФактурыДокументы.Контрагент, ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре) КАК Контрагент,
	|	ВЫБОР
	|		КОГДА СчетаФактурыДокументы.СчетФактура ЕСТЬ NULL 
	|			ТОГДА ""26""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументыПредварительная
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.Исправление
	|						И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка
	|				ИНАЧЕ СчетФактураПолученный.ДокументОснование
	|			КОНЕЦ КАК СчетФактура,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|			КОНЕЦ КАК НомерСчетаФактуры,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|					ТОГДА СчетФактураПолученный.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|			КОНЕЦ КАК ДатаСчетаФактуры,
	|			СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК НаАванс,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК СтавкаНДСАванса,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|					ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ КАК ДоговорАванса,
	|			СчетФактураПолученный.Ссылка КАК Ссылка,
	|			СчетФактураПолученный.Ссылка.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|			СчетФактураПолученный.Ссылка.Исправление КАК Исправление,
	|			СчетФактураПолученный.Ссылка.Контрагент КАК Контрагент,
	|			ЛОЖЬ КАК ЭтоСчетФактураВыданныйПокупателюПоОтчетуКомиссионера,
	|			ВЫБОР
	|				КОГДА СчетФактураПолученный.Ссылка.СводныйКомиссионный
	|					ТОГДА 0
	|				ИНАЧЕ СчетФактураПолученный.НомерСтроки
	|			КОНЕЦ КАК НомерСтроки,
	|			СчетФактураПолученный.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
	|			СчетФактураПолученный.Ссылка.СводныйКомиссионный КАК СводныйКомиссионный
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|				ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|		ГДЕ
	|			СчетФактураПолученный.Ссылка.Проведен
	|			И НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|			И СчетФактураПолученный.Ссылка.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.Исправление
	|						И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|							ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
	|					ТОГДА СчетФактураВыданный.Ссылка
	|				ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.НомерИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|					ТОГДА СчетФактураВыданный.Ссылка.ДатаИсходногоДокумента
	|				ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|			КОНЕЦ,
	|			СчетФактураВыданный.Ссылка,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|						ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент)
	|					ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ,
	|			СчетФактураВыданный.Ссылка,
	|			СчетФактураВыданный.Ссылка.ВидСчетаФактуры,
	|			СчетФактураВыданный.Ссылка.Исправление,
	|			СчетФактураВыданный.Ссылка.Контрагент,
	|			ВЫБОР
	|				КОГДА НЕ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера.СчетФактура ЕСТЬ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ,
	|			СчетФактураВыданный.НомерСтроки,
	|			СчетФактураВыданный.Ссылка.СводныйКорректировочный,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|				ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера КАК ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера
	|				ПО СчетФактураВыданный.Ссылка = ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера.СчетФактура
	|		ГДЕ
	|			СчетФактураВыданный.Ссылка.Проведен
	|			И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|			И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГТДИмпорт.Ссылка,
	|			ГТДИмпорт.НомерГТД,
	|			ГТДИмпорт.Дата,
	|			ГТДИмпорт.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			ГТДИмпорт.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|			ЛОЖЬ,
	|			ГТДИмпорт.Контрагент,
	|			ЛОЖЬ,
	|			0,
	|			ЛОЖЬ,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ГДЕ
	|			ГТДИмпорт.Проведен
	|			И НЕ ГТДИмпорт.ПометкаУдаления
	|			И ГТДИмпорт.Организация В(&Организация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера,
	|			ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера,
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ЛОЖЬ,
	|			НЕОПРЕДЕЛЕНО,
	|			НЕОПРЕДЕЛЕНО,
	|			ВозвратТоваровОтПокупателя.Ссылка,
	|			ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|			ЛОЖЬ,
	|			ВозвратТоваровОтПокупателя.Контрагент,
	|			ЛОЖЬ,
	|			0,
	|			ЛОЖЬ,
	|			ЛОЖЬ
	|		ИЗ
	|			Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ГДЕ
	|			ВозвратТоваровОтПокупателя.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			И ВозвратТоваровОтПокупателя.Проведен
	|			И НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления
	|			И ВозвратТоваровОтПокупателя.Организация В(&Организация)) КАК СчетаФактурыДокументы
	|		ПО (ЗаписиКнигиПокупок.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|				ИЛИ ЗаписиКнигиПокупок.ДокументОплаты = СчетаФактурыДокументы.СчетФактура)
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = СчетаФактурыДокументы.Контрагент
	|			И ЗаписиКнигиПокупок.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (НЕ ЗаписиКнигиПокупок.НаАванс
	|				ИЛИ СчетаФактурыДокументы.НаАванс
	|					И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ЗаписиКнигиПокупок.СчетФактура = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	НЕ(ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КомиссияОтчетПродажиКомиссионера
	|				И СчетаФактурыДокументы.ЭтоСчетФактураВыданныйПокупателюПоОтчетуКомиссионера)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыДокументы.Контрагент КАК СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	МАКСИМУМ(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументы.СводныйКомиссионный,
	|	ТаблицаСчетаФактурыДокументы.КодВидаОперации
	|ПОМЕСТИТЬ ВТ_ОбъединениеСФ
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСчетаФактурыДокументы.СчетФактура,
	|	ТаблицаСчетаФактурыДокументы.Контрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументы.СводныйКомиссионный,
	|	ТаблицаСчетаФактурыДокументы.КодВидаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактураДокументКонтрагент,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДатаСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСчетаФактуры,
	|	ВТ_ОбъединениеСФ.СчетФактураДокумент,
	|	ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СтавкаНДСАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокументРасшифровка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.Ссылка КАК Ссылка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСтроки,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СводныйКомиссионный,
	|	ТаблицаСчетаФактурыДокументыПредварительная.КодВидаОперации
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументыПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъединениеСФ КАК ВТ_ОбъединениеСФ
	|		ПО ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса = ВТ_ОбъединениеСФ.ДоговорАванса
	|			И ТаблицаСчетаФактурыДокументыПредварительная.ВидСчетаФактуры = ВТ_ОбъединениеСФ.ВидСчетаФактуры
	|			И ТаблицаСчетаФактурыДокументыПредварительная.Исправление = ВТ_ОбъединениеСФ.Исправление
	|			И ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокумент.Контрагент = ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент
	|			И ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура = ВТ_ОбъединениеСФ.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировки,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПродавецДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.ИНН
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ИНН
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ИННПродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец.КПП
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.КППКонтрагента
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КПППродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Посредник,
	|	ЖурналУчетаСчетовФактур.НомерСтроки,
	|	ЖурналУчетаСчетовФактур.Валюта,
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК ВсегоПокупокВВалюте,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации
	|ПОМЕСТИТЬ ВТ_РегистрацияСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|			ИЗ
	|				ВТ_ТаблицаСчетаФактурыДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.НомерСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ВТ_ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка КАК СчетФактураДокументРасшифровка,
	|	ВТ_РегистрацияСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировки,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РегистрацияСчетовФактур.СчетФактура ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ПродавецДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент) КАК ПродавецДляПечати,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ИННПродавцаДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент.ИНН) КАК ИННПродавцаДляПечати,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.КПППродавцаДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент.КПП) КАК КПППродавцаДляПечати,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент КАК КонтрагентПоСчетуФактуре,
	|	ВТ_РегистрацияСчетовФактур.Валюта,
	|	ВТ_РегистрацияСчетовФактур.ВалютаНаименованиеПолное,
	|	ВТ_РегистрацияСчетовФактур.ВсегоПокупокВВалюте КАК ВсегоПокупокВВалюте,
	|	ВТ_РегистрацияСчетовФактур.ВалютаКод,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.КодВидаОперации, ВТ_ТаблицаСчетаФактурыДокументы.КодВидаОперации) КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ВТ_РегистрацияСчетовФактур.Посредник.НаименованиеПолное, 1, 250) = """"
	|			ТОГДА ВТ_РегистрацияСчетовФактур.Посредник.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ВТ_РегистрацияСчетовФактур.Посредник.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК Посредник,
	|	ВТ_РегистрацияСчетовФактур.Посредник.ИНН КАК ПосредникИНН,
	|	ВТ_РегистрацияСчетовФактур.Посредник.КПП КАК ПосредникКПП
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ВТ_ТаблицаСчетаФактурыДокументы КАК ВТ_ТаблицаСчетаФактурыДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацияСчетовФактур КАК ВТ_РегистрацияСчетовФактур
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ВТ_РегистрацияСчетовФактур.СчетФактура
	|			И (ВЫБОР
	|				КОГДА ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный
	|						ИЛИ ВТ_ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|					ТОГДА ВТ_ТаблицаСчетаФактурыДокументы.НомерСтроки = ВТ_РегистрацияСчетовФактур.НомерСтроки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)";
	
	Если ТекстЗапросаПоДокументамСДаннымиСФ <> "" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ") КАК СчетаФактурыДокументы", ТекстЗапросаПоДокументамСДаннымиСФ + ") КАК СчетаФактурыДокументы");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////
// Обработчики команд

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="Сформировать" Тогда
		Если Не ЗначениеЗаполнено(Отчет.Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить реквизит <<Организация>>!",,"Отчет.Организация"); Возврат;
		ИначеЕсли НЕ ПроверкаПериода() Тогда
			Возврат;
		КонецЕсли;
		
		СписокСообщений=СформироватьОтчет();
		Для Каждого Сообщение Из СписокСообщений Цикл
			Сообщить(Сообщение.Значение);
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПериода()
	ПроверкаПройдена=Истина;
	Если Отчет.НачалоПериода > Отчет.КонецПериода Тогда
		ПоказатьПредупреждение(,"Неправильно задан период формирования отчета!"+Символы.ПС+"Дата начала больше даты окончания периода.");
		ПроверкаПройдена=Ложь;
	ИначеЕсли Отчет.НачалоПериода='00010101' Тогда
		ПоказатьПредупреждение(, "Не указана дата начала отчета");
		ПроверкаПройдена=Ложь;
	ИначеЕсли Отчет.КонецПериода='00010101' Тогда
		ПоказатьПредупреждение(, "Не указана дата конца отчета");
		ПроверкаПройдена=Ложь;
	КонецЕсли;
	Возврат ПроверкаПройдена;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ДополнительныеЛистыЗаТекущийПериод.Доступность = Отчет.ФормироватьДополнительныеЛисты;
	Элементы.ВыводитьТолькоДопЛисты.Доступность = Отчет.ФормироватьДополнительныеЛисты;
	Элементы.ВключаяОбособленныеПодразделения.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ОтбиратьПоКонтрагенту.Доступность = Не Отчет.СформироватьОтчетПоСтандартнойФорме;
	Элементы.КонтрагентДляОтбора.Доступность = Отчет.ОтбиратьПоКонтрагенту И Не Отчет.СформироватьОтчетПоСтандартнойФорме;
	Элементы.ГруппироватьПоКонтрагентам.Доступность = Не Отчет.СформироватьОтчетПоСтандартнойФорме;
	Элементы.ВыводитьПокупателейПоАвансам.Доступность = Не Отчет.СформироватьОтчетПоСтандартнойФорме;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	
	Если Элемент.Имя="ФормироватьДополнительныеЛисты" Тогда
		Если Не Отчет.ФормироватьДополнительныеЛисты И Отчет.ВыводитьТолькоДопЛисты Тогда
			Отчет.ВыводитьТолькоДопЛисты = Ложь;
		КонецЕсли;
		УстановитьВидимость();
		
	ИначеЕсли Элемент.Имя="СформироватьОтчетПоСтандартнойФорме" Тогда
		Отчет.СформироватьОтчетПоСтандартнойФорме=СформироватьОтчетПоСтандартнойФорме;
		Если Отчет.СформироватьОтчетПоСтандартнойФорме Тогда
			Если Отчет.ОтбиратьПоКонтрагенту Тогда
				Отчет.ОтбиратьПоКонтрагенту = Ложь;
			КонецЕсли;
			Если Отчет.ГруппироватьПоКонтрагентам Тогда
				Отчет.ГруппироватьПоКонтрагентам = Ложь;
			КонецЕсли;
			Если Отчет.ВыводитьПокупателейПоАвансам Тогда
				Отчет.ВыводитьПокупателейПоАвансам = Ложь;
			КонецЕсли;
		КонецЕсли;
		УстановитьВидимостьДоступность();
		
	ИначеЕсли Элемент.Имя="ОтбиратьПоКонтрагенту" Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Отчет.НачалоПериода = НачалоКвартала(ТекущаяДата());
	Отчет.КонецПериода = КонецКвартала(ТекущаяДата());
	Отчет.СкрытьКолонкиПоСтавке20 = Истина;
	СформироватьОтчетПоСтандартнойФорме=1;
	УстановитьВидимость();
	Атрибут_ПриИзменении(Элементы.СформироватьОтчетПоСтандартнойФорме);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отчет.Организация=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
КонецПроцедуры
