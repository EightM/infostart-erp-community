&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="СформироватьАктВзаимозачета" Тогда
		СформироватьАктВзаимозачета();

	ИначеЕсли Команда.Имя="ЗаполнитьПоУмолчаниюПараметрыФормирования" Тогда
		ЗаполнитьПоУмолчаниюПараметрыФормирования();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюПараметрыФормирования()
	Выборка=Справочники.ТиповыеОперации.Выбрать(,Справочники.ИдентификаторыОбъектовМетаданных.Документ_АктВзаимозачета);
	Пока Выборка.Следующий() Цикл
		ПроводкиБУ=Выборка.ПроводкиБУ;
		Если ПроводкиБУ.Количество()=0 Тогда Возврат; КонецЕсли; 
		НоваяСтрока=Объект.ПараметрыФормирования.Добавить();
		НоваяСтрока.СчетПоставщика=ПроводкиБУ[0].СчетДебет;
		НоваяСтрока.СчетПокупателя=ПроводкиБУ[0].СчетКредит;
		НоваяСтрока.ТОП=Выборка.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатЗапроса(СчетПоставщика, СчетПокупателя)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаПокупателя,
	|	0 КАК СуммаПоставщика
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет = &СчетПокупателя,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|				
	|ОБЪЕДИНИТЬ ВСЕ				
	|				
	|				
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	0,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет = &СчетПоставщика,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(Объект.НаДату),ВидГраницы.Включая)); 			 
	Запрос.УстановитьПараметр("СчетПокупателя", СчетПокупателя);
	Запрос.УстановитьПараметр("СчетПоставщика", СчетПоставщика);
	Запрос.УстановитьПараметр("Организация", Объект.Организация); 
	тзДанные=Запрос.Выполнить().Выгрузить();
	тзДанные.Свернуть("Контрагент,Договор","СуммаПокупателя,СуммаПоставщика");
	
	Возврат тзДанные;
КонецФункции

&НаСервере
Функция ПолучитьРезультатЗапросаПоДокументам62(СчетПокупателя, Контрагент, Договор)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКонца", Новый Граница(КонецДня(Объект.НаДату),ВидГраницы.Включая)); 			 
	Запрос.УстановитьПараметр("СчетПокупателя", СчетПокупателя);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 500
	|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаПокупателя,
	|	0 КАК СуммаПоставщика,
	|	ХозрасчетныйОбороты.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&ДатаКонца,
	|			Регистратор,
	|			Счет = &СчетПокупателя,
	|			,
	|			Организация = &Организация И Субконто1 = &Контрагент И Субконто2 = &Договор,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	тзРегистратор62=Запрос.Выполнить().Выгрузить();
	тзРегистратор62.Сортировать("Дата Убыв");
	
	Возврат тзРегистратор62;
КонецФункции	

&НаСервере
Функция ПолучитьРезультатЗапросаПоДокументам60(СчетПоставщика, Контрагент, Договор)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКонца", Новый Граница(КонецДня(Объект.НаДату),ВидГраницы.Включая)); 			 
	Запрос.УстановитьПараметр("СчетПоставщика", СчетПоставщика);
	Запрос.УстановитьПараметр("Организация", Объект.Организация); 
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	0 КАК СуммаПокупателя,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаПоставщика,
	|	ХозрасчетныйОбороты.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(,&ДатаКонца, Регистратор, Счет = &СчетПоставщика,,
	|			Организация = &Организация И Субконто1 = &Контрагент И Субконто2 = &Договор,,
	|			) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|";
	тзРегистратор60=Запрос.Выполнить().Выгрузить();
	тзРегистратор60.Сортировать("Дата Убыв");
	
	Возврат тзРегистратор60;
КонецФункции	

&НаСервере
Процедура СформироватьАктВзаимозачета()
	//Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
	//	ПоказатьПредупреждение(, "Не заполнен реквизит <организация> !", 10);
	//	Возврат;
	//КонецЕсли;
	
	ВалютаБух=МодульВалютногоУчета.ПолучитьВалюту("Бух");
	СтруктураКурса=МодульВалютногоУчета.КурсВалюты(ВалютаБух, КонецДня(Объект.НаДату));
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПараметрыФормирования Цикл
		тзДанные=ПолучитьРезультатЗапроса(СтрокаТабличнойЧасти.СчетПоставщика, СтрокаТабличнойЧасти.СчетПокупателя);
		Если тзДанные.Количество()=0 Тогда Продолжить; КонецЕсли;
		тзКонтрагенты=тзДанные.Скопировать(, "Контрагент");
		тзКонтрагенты.Свернуть("Контрагент", "");
		
		Для Каждого СтрокаКоллекции Из тзКонтрагенты Цикл
			СтруктураОтбора=Новый Структура("Контрагент", СтрокаКоллекции.Контрагент);
			МассивСтрок=тзДанные.НайтиСтроки(СтруктураОтбора);
			тзДанныеКонтрагента=тзДанные.Скопировать(МассивСтрок);
			Если тзДанныеКонтрагента.Итог("СуммаПокупателя")=0 ИЛИ тзДанныеКонтрагента.Итог("СуммаПоставщика")=0 Тогда Продолжить; КонецЕсли;
			
			//Создаем документ "Акт взаимозачета"
			Док=Документы.АктВзаимозачета.СоздатьДокумент();
			Док.ВалютаДокумента=ВалютаБух;
			Док.КурсДокумента=СтруктураКурса.Курс;
			Док.КратностьДокумента=СтруктураКурса.Кратность;
			Док.Дата=КонецДня(Объект.НаДату);
			Док.Организация=Объект.Организация;
			Док.Ответственный=ПараметрыСеанса.ТекущийПользователь;
			Док.ТОП=СтрокаТабличнойЧасти.ТОП;
			Док.КонтрагентКредитор=СтрокаКоллекции.Контрагент;
			Док.КонтрагентДебитор=СтрокаКоллекции.Контрагент;
			Док.Комментарий="Документ сформирован автоматически";
			
			тзДолгКредитора=Док.ДолгКредитора.ВыгрузитьКолонки();
			тзДолгКредитора.Колонки.Добавить("Дата");
			тзДолгДебитора=Док.ДолгДебитора.ВыгрузитьКолонки();
			тзДолгДебитора.Колонки.Добавить("Дата");
			
			Для Каждого СтрокаДоговора ИЗ тзДанныеКонтрагента Цикл
				тзРегистратор62=ПолучитьРезультатЗапросаПоДокументам62(СтрокаТабличнойЧасти.СчетПокупателя,СтрокаДоговора.Контрагент,СтрокаДоговора.Договор);
				тзРегистратор60=ПолучитьРезультатЗапросаПоДокументам60(СтрокаТабличнойЧасти.СчетПоставщика,СтрокаДоговора.Контрагент,СтрокаДоговора.Договор);
				
				СуммаПоставщика=СтрокаДоговора.СуммаПоставщика;
				Для КАждого СтрокаМ ИЗ тзРегистратор60 Цикл
					Если СтрокаМ.СуммаПоставщика<=0 Тогда Продолжить; КонецЕсли;
					Если СуммаПоставщика=0 Тогда Прервать; КонецЕсли;
					НоваяСтрока=тзДолгКредитора.Добавить();
					текВалюта=СтрокаМ.Договор.ВалютаВзаиморасчетов;
					СтруктураКурса=МодульВалютногоУчета.КурсВалюты(текВалюта, КонецДня(Объект.НаДату));
					
					НоваяСтрока.КурсВзаиморасчетов=СтруктураКурса.Курс;
					НоваяСтрока.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
					НоваяСтрока.ДоговорКонтрагента=СтрокаМ.Договор;
					НоваяСтрока.Дата=СтрокаМ.Дата;
					Если СуммаПоставщика<СтрокаМ.СуммаПоставщика Тогда
						НоваяСтрока.СуммаРегл=СуммаПоставщика;
						НоваяСтрока.СуммаНДС=?(Док.КонтрагентКредитор.УчетБезНДС,0,НоваяСтрока.СуммаРегл*18/118);
						НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
						СуммаПоставщика=0;
						Док.ПересчитатьСуммуПоСтроке(НоваяСтрока);
						Продолжить;
					КонецЕсли;	
					Если СуммаПоставщика>=СтрокаМ.СуммаПоставщика Тогда
						НоваяСтрока.СуммаРегл=СтрокаМ.СуммаПоставщика;
						НоваяСтрока.СуммаНДС=?(Док.КонтрагентКредитор.УчетБезНДС,0,НоваяСтрока.СуммаРегл*18/118);
						НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
						СуммаПоставщика=СуммаПоставщика-СтрокаМ.СуммаПоставщика;
						Док.ПересчитатьСуммуПоСтроке(НоваяСтрока);
						Продолжить;
					КонецЕсли;	
				КонецЦикла;	
				Если НЕ СуммаПоставщика=0 Тогда 
					НоваяСтрока=тзДолгКредитора.Добавить();
					текВалюта=СтрокаДоговора.Договор.ВалютаВзаиморасчетов;
					СтруктураКурса=МодульВалютногоУчета.КурсВалюты(текВалюта, КонецДня(Объект.НаДату));
					
					НоваяСтрока.КурсВзаиморасчетов=СтруктураКурса.Курс;
					НоваяСтрока.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
					НоваяСтрока.ДоговорКонтрагента=СтрокаДоговора.Договор;
					НоваяСтрока.СуммаРегл=СуммаПоставщика;
					НоваяСтрока.СуммаНДС=?(Док.КонтрагентКредитор.УчетБезНДС,0,НоваяСтрока.СуммаРегл*18/118);
					Док.ПересчитатьСуммуПоСтроке(НоваяСтрока);
				КонецЕсли;
				
				СуммаПокупателя=СтрокаДоговора.СуммаПокупателя;
				Для КАждого СтрокаМ ИЗ тзРегистратор62 Цикл
					Если СтрокаМ.СуммаПокупателя<=0 Тогда Продолжить; КонецЕсли;
					Если СуммаПокупателя=0 Тогда Прервать; КонецЕсли;
					НоваяСтрока=тзДолгДебитора.Добавить();
					текВалюта=СтрокаМ.Договор.ВалютаВзаиморасчетов;
					СтруктураКурса=МодульВалютногоУчета.КурсВалюты(текВалюта, КонецДня(Объект.НаДату));
					
					НоваяСтрока.КурсВзаиморасчетов=СтруктураКурса.Курс;
					НоваяСтрока.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
					
					НоваяСтрока.ДоговорКонтрагента=СтрокаМ.Договор;
					НоваяСтрока.Дата=СтрокаМ.Дата;
					Если СуммаПокупателя<СтрокаМ.СуммаПокупателя Тогда
						НоваяСтрока.СуммаРегл=СуммаПокупателя;
						НоваяСтрока.СуммаНДС=?(Док.КонтрагентДебитор.УчетБезНДС,0,НоваяСтрока.СуммаРегл*18/118);
						НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
						СуммаПокупателя=0;
						Док.ПересчитатьСуммуПоСтроке(НоваяСтрока);
						Продолжить;
					КонецЕсли;	
					Если СуммаПокупателя>=СтрокаМ.СуммаПокупателя Тогда
						НоваяСтрока.СуммаРегл=СтрокаМ.СуммаПокупателя;
						НоваяСтрока.СуммаНДС=?(Док.КонтрагентДебитор.УчетБезНДС,0,НоваяСтрока.СуммаРегл*18/118);
						НоваяСтрока.ДокументРасчетовСКонтрагентом=СтрокаМ.Документ;
						СуммаПокупателя=СуммаПокупателя-СтрокаМ.СуммаПокупателя;
						Док.ПересчитатьСуммуПоСтроке(НоваяСтрока);
						Продолжить;
					КонецЕсли;	
				КонецЦикла;
				Если НЕ СуммаПокупателя=0 Тогда 
					НоваяСтрока=тзДолгДебитора.Добавить();
					текВалюта=СтрокаДоговора.Договор.ВалютаВзаиморасчетов;
					СтруктураКурса=МодульВалютногоУчета.КурсВалюты(текВалюта, КонецДня(Объект.НаДату));
					
					НоваяСтрока.КурсВзаиморасчетов=СтруктураКурса.Курс;
					НоваяСтрока.КратностьВзаиморасчетов=СтруктураКурса.Кратность;
					НоваяСтрока.ДоговорКонтрагента=СтрокаДоговора.Договор;
					НоваяСтрока.СуммаРегл=СуммаПокупателя;
					НоваяСтрока.СуммаНДС=?(Док.КонтрагентДебитор.УчетБезНДС,0,НоваяСтрока.СуммаРегл*18/118);
					Док.ПересчитатьСуммуПоСтроке(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;	
			тзДолгКредитора.Сортировать("Дата Возр");
			Док.ДолгКредитора.Загрузить(тзДолгКредитора);
			тзДолгДебитора.Сортировать("Дата Возр");
			Док.ДолгДебитора.Загрузить(тзДолгДебитора);
			
			Итого_ДолгКредитора=Док.ДолгКредитора.Итог("СуммаРегл");
			Итого_ДолгДебитора=Док.ДолгДебитора.Итог("СуммаРегл");
			Если Итого_ДолгКредитора=0 ИЛИ Итого_ДолгДебитора=0 Тогда Продолжить; КонецЕсли; 				
			
			Док.СуммаДокумента=Мин(Итого_ДолгКредитора, Итого_ДолгДебитора);
			Док.Упаковать(Док.ДолгКредитора);
			Док.Упаковать(Док.ДолгДебитора);
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление настройками

&НаСервере
Процедура НастройкиВосстановить()
	УстановитьПривилегированныйРежим(Истина);
	Настройки=ХранилищеОбщихНастроек.Загрузить("ФормированиеАктовВзаимозачета", "ФормированиеАктовВзаимозачета",,ПараметрыСеанса.ТекущийПользователь); 
	УстановитьПривилегированныйРежим(Ложь);

	Если ТипЗнч(Настройки)=Тип("Структура") Тогда
		Настройки.Свойство("Организация", Объект.Организация);
		Для каждого СтрокаКоллекции Из Настройки.ПараметрыФормирования Цикл
			ЗаполнитьЗначенияСвойств(Объект.ПараметрыФормирования.Добавить(), СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкиСохранить()
	УстановитьПривилегированныйРежим(Истина);

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыФормирования", Объект.ПараметрыФормирования.Выгрузить());
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	ХранилищеОбщихНастроек.Сохранить("ФормированиеАктовВзаимозачета", "ФормированиеАктовВзаимозачета", СтруктураПараметров,,ПараметрыСеанса.ТекущийПользователь);

	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.НаДату=КонецМесяца(ТекущаяДата());
	НастройкиВосстановить();
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗавершениеРаботы Тогда
		НастройкиСохранить();
	КонецЕсли;	 
КонецПроцедуры
