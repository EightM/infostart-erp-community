&НаСервере
Функция Инициализация()
	спМеню=ВыборРегистраУчета_Сервер();
	Если НЕ спМеню.Количество()=0 Тогда
		ЗначениеВыбора=спМеню[0];
		Элементы.ВыборРегистраУчета.Заголовок=ЗначениеВыбора.Представление;
		ПоказатьДвиженияРегистра(ЗначениеВыбора.Значение);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещения_ВыборРегистраУчета(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	Элементы.ВыборРегистраУчета.Заголовок=Параметр1.Представление;
	ПоказатьДвиженияРегистра(Параметр1.Значение);		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий "Движения документа по регистрам"

&НаКлиенте
Процедура ВыборРегистраУчета_Клиент(Команда)
	спМеню=ВыборРегистраУчета_Сервер();
	Если спМеню.Количество()=0 Тогда Возврат; КонецЕсли;
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборРегистраУчета", ЭтотОбъект), спМеню, Элементы.ВыборРегистраУчета);
КонецПроцедуры

&НаСервере
Функция ВыборРегистраУчета_Сервер()
	спМеню=Новый СписокЗначений;

	тзДвижения=ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(Объект.ДокументСсылка);
	Для Каждого СтрокаКоллекции Из тзДвижения Цикл
		//*** Если НЕ ПравоДоступа("Чтение", СвойстваОбъекта) Тогда Продолжить; КонецЕсли;
		мдОбъект=УправлениеМетаданными.ОбъектМетаданных(СтрокаКоллекции.Имя);
		Если мдОбъект=Неопределено Тогда Продолжить; КонецЕсли;
		спМеню.Добавить(СтрокаКоллекции.Имя, мдОбъект.Представление());
	КонецЦикла;

	Возврат спМеню;	
КонецФункции

&НаСервере
Процедура КонтрольПроводок(стрВидРегистра, ДокументСсылка)
	мдДвижения=ДокументСсылка.Метаданные().Движения; мдРегистрыБухгалтерии=Метаданные.РегистрыБухгалтерии;
	
	стрВидРегистра=СтрЗаменить(стрВидРегистра, "РегистрБухгалтерии.", "");
	Если НЕ мдДвижения.Содержит(мдРегистрыБухгалтерии[стрВидРегистра]) Тогда Возврат; КонецЕсли;

	тпДвиженияПоРегистру=ЭтаФорма.тдДвиженияРегистра;
	тпДвиженияПоРегистру.Очистить();

	Запрос=Новый Запрос;
	Запрос.Параметры.Вставить("Регистратор", ДокументСсылка);
	//*** Запрос.Параметры.Вставить("СчетаИсключения", УправлениеОтчетами.ПолучитьМассивСчетовИсключения(ДокументСсылка.Организация));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	*
	|ИЗ
	//|	РегистрБухгалтерии."+стрВидРегистра+".ДвиженияССубконто(, , Регистратор = &Регистратор И (СчетДт НЕ В Иерархии (&СчетаИсключения) И СчетКт НЕ В Иерархии (&СчетаИсключения)) ) КАК ИсточникДанных
	|	РегистрБухгалтерии."+стрВидРегистра+".ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ИсточникДанных
	|";
	тзПроводки=Запрос.Выполнить().Выгрузить();
	Если тзПроводки.Количество()=0 Тогда Возврат; КонецЕсли; 

	//Сводные проводки
	Макет=Обработки.ДвиженияДокументаПоРегистрам.ПолучитьМакет("КонтрольПроводок"+стрВидРегистра);
	ОбластьМакета=Макет.ПолучитьОбласть("ШапкаСводной");
	тпДвиженияПоРегистру.Вывести(ОбластьМакета);

	стрРесурсы="Сумма,Количество";
	Если стрВидРегистра="Хозрасчетный" Тогда 
		стрРесурсы=стрРесурсы+",СуммаНУДт,СуммаВРДт,СуммаПРДт,СуммаНУКт,СуммаВРКт,СуммаПРКт";		
	КонецЕсли;

	тзСводныеПроводки=тзПроводки.Скопировать();
	тзСводныеПроводки.Колонки.Добавить("Количество");
	Для Каждого СтрокаКоллекции Из тзСводныеПроводки Цикл
		СтрокаКоллекции.Количество=?(ЗначениеЗаполнено(СтрокаКоллекции.КоличествоДт), СтрокаКоллекции.КоличествоДт, СтрокаКоллекции.КоличествоКт);
	КонецЦикла;	
	тзСводныеПроводки.Свернуть("СчетДт,СчетКт", стрРесурсы);

	Для каждого СтрокаКоллекции Из тзСводныеПроводки Цикл
		ОбластьМакета=Макет.ПолучитьОбласть("СтрокаСводной");
		ОбластьМакета.Параметры.СчетДебет=СтрокаКоллекции.СчетДт;
		ОбластьМакета.Параметры.СчетКредит=СтрокаКоллекции.СчетКт;
		ОбластьМакета.Параметры.Сумма=СтрокаКоллекции.Сумма;
		ОбластьМакета.Параметры.Количество=СтрокаКоллекции.Количество;
		Если стрВидРегистра="Хозрасчетный" Тогда
			ОбластьМакета.Параметры.СуммаНУДт=СтрокаКоллекции.СуммаНУДт;
			ОбластьМакета.Параметры.СуммаВРДт=СтрокаКоллекции.СуммаВРДт;
			ОбластьМакета.Параметры.СуммаПРДт=СтрокаКоллекции.СуммаПРДт;
			ОбластьМакета.Параметры.СуммаНУКт=СтрокаКоллекции.СуммаНУКт;
			ОбластьМакета.Параметры.СуммаВРКт=СтрокаКоллекции.СуммаВРКт;
			ОбластьМакета.Параметры.СуммаПРКт=СтрокаКоллекции.СуммаПРКт;			
		КонецЕсли;
		тпДвиженияПоРегистру.Вывести(ОбластьМакета);
	КонецЦикла; 
	ОбластьМакета=Макет.ПолучитьОбласть("ПодвалСводной");
	ОбластьМакета.Параметры.Сумма=тзСводныеПроводки.Итог("Сумма");
	ОбластьМакета.Параметры.Количество=тзСводныеПроводки.Итог("Количество");
	Если стрВидРегистра="Хозрасчетный" Тогда 
		ОбластьМакета.Параметры.СуммаНУДт=тзСводныеПроводки.Итог("СуммаНУДт")+тзСводныеПроводки.Итог("СуммаВРДт")+тзСводныеПроводки.Итог("СуммаПРДт");
		ОбластьМакета.Параметры.СуммаНУКт=тзСводныеПроводки.Итог("СуммаНУКт")+тзСводныеПроводки.Итог("СуммаВРКт")+тзСводныеПроводки.Итог("СуммаПРКт");		
	КонецЕсли;	
	тпДвиженияПоРегистру.Вывести(ОбластьМакета);
	
	//Проводки
	ОбластьМакета=Макет.ПолучитьОбласть("Шапка");
	тпДвиженияПоРегистру.Вывести(ОбластьМакета);
//	тпДвиженияПоРегистру.ФиксацияСверху=тпДвиженияПоРегистру.ВысотаТаблицы;
	Для каждого СтрокаКоллекции Из тзПроводки Цикл
		ОбластьМакета=Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.СчетДебет=СтрокаКоллекции.СчетДт;
		ОбластьМакета.Параметры.СчетКредит=СтрокаКоллекции.СчетКт;
		ОбластьМакета.Параметры.Сумма=СтрокаКоллекции.Сумма;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ВалютнаяСуммаДт) Тогда
			ОбластьМакета.Параметры.Сумма=СокрЛП(СтрокаКоллекции.Сумма)+" ("+МодульВалютногоУчета.ПолучитьВалюту("Бух")+")"+Символы.ПС+СокрЛП(СтрокаКоллекции.ВалютнаяСуммаДт)+" ("+СтрокаКоллекции.ВалютаДт+")";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКоллекции.ВалютнаяСуммаКт) Тогда
			ОбластьМакета.Параметры.Сумма=СокрЛП(СтрокаКоллекции.Сумма)+" ("+МодульВалютногоУчета.ПолучитьВалюту("Бух")+")"+Символы.ПС+СокрЛП(СтрокаКоллекции.ВалютнаяСуммаКт)+" ("+СтрокаКоллекции.ВалютаКт+")";
		КонецЕсли;
		Если стрВидРегистра="Хозрасчетный" Тогда
			ОбластьМакета.Параметры.СуммаНУДт=СтрокаКоллекции.СуммаНУДт;
			ОбластьМакета.Параметры.СуммаВРДт=СтрокаКоллекции.СуммаВРДт;
			ОбластьМакета.Параметры.СуммаПРДт=СтрокаКоллекции.СуммаПРДт;
			ОбластьМакета.Параметры.СуммаНУКт=СтрокаКоллекции.СуммаНУКт;
			ОбластьМакета.Параметры.СуммаВРКт=СтрокаКоллекции.СуммаВРКт;
			ОбластьМакета.Параметры.СуммаПРКт=СтрокаКоллекции.СуммаПРКт;
			ОбластьМакета.Параметры.Количество=?(Не ЗначениеЗаполнено(СтрокаКоллекции.КоличествоДт), СтрокаКоллекции.КоличествоКт, СтрокаКоллекции.КоличествоДт);

			ОбластьМакета.Параметры.ПодразделениеДт=СтрокаКоллекции.ПодразделениеДт;
			ОбластьМакета.Параметры.ПодразделениеКт=СтрокаКоллекции.ПодразделениеКт;			

		ИначеЕсли стрВидРегистра="Финансовый" Тогда
			ОбластьМакета.Параметры.ЦФОДт=СтрокаКоллекции.ЦФОДт;
			ОбластьМакета.Параметры.ЦФОКт=СтрокаКоллекции.ЦФОКт;
		КонецЕсли;		
		Для Каждого КоллекцияСубконтоСчета Из СтрокаКоллекции.СчетДт.ВидыСубконто Цикл
			ИндексСубконто=КоллекцияСубконтоСчета.НомерСтроки;
			ОбластьМакета.Параметры["СубконтоДт"+ИндексСубконто]=СтрокаКоллекции["СубконтоДт"+ИндексСубконто];
		КонецЦикла; 
		
		Для Каждого КоллекцияСубконтоСчета Из СтрокаКоллекции.СчетКт.ВидыСубконто Цикл
			ИндексСубконто=КоллекцияСубконтоСчета.НомерСтроки;
			ОбластьМакета.Параметры["СубконтоКт"+ИндексСубконто]=СтрокаКоллекции["СубконтоКт"+ИндексСубконто];
		КонецЦикла;
		
		тпДвиженияПоРегистру.Вывести(ОбластьМакета);
	КонецЦикла; 
	
	тпДвиженияПоРегистру.ТолькоПросмотр=Истина;
КонецПроцедуры

&НаСервере
Процедура ПоказатьДвиженияРегистра(стрРегистр)
	ДокументСсылка=Объект.ДокументСсылка;

	Если Найти(стрРегистр, "РегистрБухгалтерии") > 0 Тогда
		Элементы.тдДвиженияРегистра.Видимость=Истина;
		Элементы.тпДвиженияРегистра.Видимость=Ложь;
		КонтрольПроводок(стрРегистр, ДокументСсылка); Возврат;
	КонецЕсли; 
	
	Если НЕ Элементы.Найти("тдДвиженияРегистра")=Неопределено Тогда
		Элементы.тдДвиженияРегистра.Видимость=Ложь;
	КонецЕсли; 
	Элементы.тпДвиженияРегистра.Видимость=Истина;
	
	//Устанавливаем отбор по регистратору
	ЭлементОтбора=Неопределено; ПолеРегистратор=Новый ПолеКомпоновкиДанных("Регистратор");
	Для каждого СтрокаКоллекции Из тпДвиженияРегистра.Отбор.Элементы Цикл
		Если СтрокаКоллекции.ЛевоеЗначение=ПолеРегистратор Тогда
			ЭлементОтбора=СтрокаКоллекции; Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЭлементОтбора=Неопределено Тогда
		ЭлементОтбора=тпДвиженияРегистра.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение=ПолеРегистратор;
		ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование=Истина;
		//ЭлементОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	ЭлементОтбора.ПравоеЗначение=ДокументСсылка;

	//Устанавливаем основную таблица регистра
	тпДвиженияРегистра.ОсновнаяТаблица=стрРегистр;
	тпДвиженияРегистра.КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
	тпДвиженияРегистра.Порядок.Элементы.Очистить();
	тпДвиженияРегистра.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Элементы.Очистить();
	
	//Удаляем старые элементы таблицы
	МассивЭлементов=Новый Массив;
	Для каждого СтрокаКоллекции Из Элементы.тпДвиженияРегистра.ПодчиненныеЭлементы Цикл
		МассивЭлементов.Добавить(СтрокаКоллекции);		
	КонецЦикла;
	Для каждого СтрокаКоллекции Из МассивЭлементов Цикл
		Элементы.Удалить(СтрокаКоллекции);
	КонецЦикла;

	//Добавляем новые элементы таблицы
	МассивИсключений=Новый Массив;
	МассивИсключений.Добавить("Активность");
	МассивИсключений.Добавить("Регистратор");
	МассивИсключений.Добавить("НомерСтроки");

	мдОбъект=УправлениеМетаданными.ОбъектМетаданных(стрРегистр);
	Для каждого СтрокаКоллекции Из мдОбъект.СтандартныеРеквизиты Цикл
		Если НЕ МассивИсключений.Найти(СтрокаКоллекции.Имя)=Неопределено Тогда Продолжить; КонецЕсли; 
		ЭлементФормы=Элементы.Добавить("тпДвиженияРегистра_"+СтрокаКоллекции.Имя, Тип("ПолеФормы"), Элементы.тпДвиженияРегистра);
		ЭлементФормы.ПутьКДанным="тпДвиженияРегистра."+СтрокаКоллекции.Имя;
	КонецЦикла; 
	Для каждого СтрокаКоллекции Из мдОбъект.Измерения Цикл
		ЭлементФормы=Элементы.Добавить("тпДвиженияРегистра_"+СтрокаКоллекции.Имя, Тип("ПолеФормы"), Элементы.тпДвиженияРегистра);
		ЭлементФормы.ПутьКДанным="тпДвиженияРегистра."+СтрокаКоллекции.Имя;
	КонецЦикла;
	Для каждого СтрокаКоллекции Из мдОбъект.Ресурсы Цикл
		ЭлементФормы=Элементы.Добавить("тпДвиженияРегистра_"+СтрокаКоллекции.Имя, Тип("ПолеФормы"), Элементы.тпДвиженияРегистра);
		ЭлементФормы.ПутьКДанным="тпДвиженияРегистра."+СтрокаКоллекции.Имя;	
	КонецЦикла;
	Для каждого СтрокаКоллекции Из мдОбъект.Реквизиты Цикл
		ЭлементФормы=Элементы.Добавить("тпДвиженияРегистра_"+СтрокаКоллекции.Имя, Тип("ПолеФормы"), Элементы.тпДвиженияРегистра);
		ЭлементФормы.ПутьКДанным="тпДвиженияРегистра."+СтрокаКоллекции.Имя;	
	КонецЦикла;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов формы

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="ДокументСсылка" Тогда		
		Инициализация();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Очистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="ДокументСсылка" Тогда		
		СтандартнаяОбработка=Ложь;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ДокументСсылка", Объект.ДокументСсылка);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ Инициализация() Тогда
		Отказ=Истина; ПоказатьПредупреждение(, "У документа отсутствуют движения по регистрам!", 20, "Внимание");
	КонецЕсли;	
КонецПроцедуры
