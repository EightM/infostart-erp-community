&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	стрИмя=?(ТипЗнч(Команда)=Тип("Строка"), Команда, Команда.Имя);

	Если стрИмя="Обновить" Тогда
		тпДанные_Сформировать();

		ЭлементыКоллекции=тпДанные.ПолучитьЭлементы();
		Для каждого СтрокаКоллекции Из ЭлементыКоллекции Цикл
			Элементы.тпДанные.Развернуть(СтрокаКоллекции.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	ИначеЕсли стрИмя="НастройкаРазворотов" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработкаОповещения_НастройкаГруппировок", ЭтотОбъект);
		
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Группировки разворота");
		ПараметрыФормы.Вставить("Пометка", Истина);
		ПараметрыФормы.Вставить("Картинка", Ложь);
		ПараметрыФормы.Вставить("ИзменятьСоставСтрок", Ложь);
		ПараметрыФормы.Вставить("СписокЗначений", спГруппировки.Скопировать());
		
		ОткрытьФорму("ОбщаяФорма.СписокЗначений", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="ВариантФормирования" Тогда
		тпДанные_Инициализация();
	КонецЕсли; 	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработкаОповещения_НастройкаГруппировок(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	спГруппировки.Очистить();
	стрПредставление="Организация\Склад";
	Если ТипЗнч(Параметр1)=Тип("СписокЗначений") Тогда
		стрПредставление="";
		Для каждого СтрокаКоллекции Из Параметр1 Цикл
			спГруппировки.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление, СтрокаКоллекции.Пометка, СтрокаКоллекции.Картинка);
			Если СтрокаКоллекции.Пометка Тогда
				стрПредставление=стрПредставление+?(ПустаяСтрока(стрПредставление), "", "\")+СтрокаКоллекции.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы.тпДанныеПредставление.Заголовок=стрПредставление;
	тпДанные_Инициализация();

	ВыполнитьДействие(Команды.Обновить);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблично поля "Данные"

&НаКлиенте
Процедура тпДанные_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные=тпДанные.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("Дата", ТекущиеДанные.Дата);
	ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
	ПараметрыФормы.Вставить("СчетОрганизации", ТекущиеДанные.БанковскийСчет);
	ОткрытьФорму("Обработка.ВыпискаБанка.Форма.ОсновнаяФорма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаСервере
Процедура тпДанные_Инициализация()
	СхемаКомпоновкиДанных=Обработки.ВыпискиБанка.ПолучитьМакет("СКД_"+?(ВариантФормирования=0, "БУХ", "УПР"));
	URLСхемы=ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
КонецПроцедуры

&НаСервере
Процедура тпДанные_Сформировать()
	дзДанные=Новый ДеревоЗначений;
	тпДанные.ПолучитьЭлементы().Очистить();

	СхемаКомпоновкиДанных=Обработки.ВыпискиБанка.ПолучитьМакет("СКД_"+?(ВариантФормирования=0, "БУХ", "УПР"));

	МассивГруппировок=Новый Массив;
	Для каждого СтрокаКоллекции Из спГруппировки Цикл
		Если НЕ СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли; 
		МассивГруппировок.Добавить(СтрокаКоллекции.Значение);
	КонецЦикла;

	Элементы.тпДанныеДата.Видимость=МассивГруппировок.Найти("Дата")=Неопределено;
	Элементы.тпДанныеОрганизация.Видимость=МассивГруппировок.Найти("Организация")=Неопределено;
	Элементы.тпДанныеБанковскийСчет.Видимость=МассивГруппировок.Найти("БанковскийСчет")=Неопределено;
	Элементы.тпДанныеВалютаДенежныхСредств.Видимость=ВариантФормирования=0;
	Элементы.тпДанныеПредставление.Видимость=НЕ МассивГруппировок.Количество()=0;

	Если НЕ МассивГруппировок.Количество()=0 Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ЭлементСтруктуры=КомпоновщикНастроек.Настройки;
		Для каждого СтрокаКоллекции Из МассивГруппировок Цикл
			ЭлементСтруктуры=ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

			ПолеГруппировки=ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование=Истина;
			ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных(СтрокаКоллекции);			
		КонецЦикла; 
	КонецЕсли;

	спОрганизации=Новый СписокЗначений;
	спБанковскиеСчета=Новый СписокЗначений;
	Для каждого СтрокаКоллекции Из Объект.ПараметрыОтбора Цикл
		Если НЕ СтрокаКоллекции.Организация.Пустая() Тогда
			спОрганизации.Добавить(СтрокаКоллекции.Организация);
		КонецЕсли;
		Если НЕ СтрокаКоллекции.БанковскийСчет.Пустая() Тогда
			спБанковскиеСчета.Добавить(СтрокаКоллекции.БанковскийСчет);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ спОрганизации.Количество()=0 Тогда
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораКоллекции(КомпоновщикНастроек.Настройки.Отбор.Элементы, "Организация", спОрганизации, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли; 
	
	Если НЕ спБанковскиеСчета.Количество()=0 Тогда
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораКоллекции(КомпоновщикНастроек.Настройки.Отбор.Элементы, "БанковскийСчет", спБанковскиеСчета, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;

	Если ВариантФормирования=0 Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВалютаБухУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидСубконтоБанковскиеСчета", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	КонецЕсли;

	ОтчетыСервер.УстановитьПараметрыПериода(КомпоновщикНастроек, ДатаНачала, ДатаКонца);

	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(дзДанные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Если дзДанные.Строки.Количество()=0 Тогда Возврат; КонецЕсли;
	
	тпДанные_Заполнить(дзДанные.Строки, тпДанные.ПолучитьЭлементы(), МассивГруппировок, 0);	
КонецПроцедуры

&НаСервере
Процедура тпДанные_Заполнить(Источник, Приемник, МассивГруппировок, ИндексМассиваИзмерений)
	Для каждого СтрокаКоллекции Из Источник Цикл
		НоваяСтрока=Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		Если МассивГруппировок.Количество()=0 Тогда Продолжить; КонецЕсли;
		НоваяСтрока.Представление=СтрокаКоллекции[МассивГруппировок[ИндексМассиваИзмерений]];
		тпДанные_Заполнить(СтрокаКоллекции.Строки, Приемник[Источник.Индекс(СтрокаКоллекции)].ПолучитьЭлементы(), МассивГруппировок, ИндексМассиваИзмерений+1);		
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НоваСтрока=Объект.ПараметрыОтбора.Добавить();
	НоваСтрока.Организация=НастройкиПользователяСервер.ЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(НоваСтрока.Организация) Тогда
		НоваСтрока.БанковскийСчет=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(НоваСтрока.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;

	Если ДатаКонца='00010101' Тогда
		ДатаКонца=ТекущаяДата();
	КонецЕсли;

	Если ДатаНачала='00010101' Тогда
		ДатаНачала=НачалоМесяца(ДатаКонца);
	КонецЕсли;

	//ВидимостьКолонок();
	спГруппировки.Добавить("Дата", "Дата", Ложь);
	спГруппировки.Добавить("Организация", "Организация", Ложь);
	спГруппировки.Добавить("БанковскийСчет", "Банковский счет", Ложь);

	тпДанные_Инициализация();
	тпДанные_Сформировать();
КонецПроцедуры
