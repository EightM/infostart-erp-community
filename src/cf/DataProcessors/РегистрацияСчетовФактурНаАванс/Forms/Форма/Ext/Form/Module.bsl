&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	СообщениеОбОшибке = "Регистрация не выполнена.";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана организация";
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата начала заполнения";
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата окончания заполнения";
		Отказ = Истина;
	КонецЕсли;
	Если Объект.НачалоПериода > Объект.КонецПериода Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - дата начала заполнения больше даты окончния";
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить(СообщениеОбОшибке); Возврат;
	КонецЕсли; 
	
	Если Объект.Список.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Заполнить", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьДокумент();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполненияТабличнойЧасти(Отказ)
	//Ключ - название реквизита, значение - останавливать обработку, если значение не заполнено 
	СтруктураОбязательныхПолей = новый структура("Контрагент, ДоговорКонтрагента, ДокументОснование, Сумма, СтавкаНДС, ВалютаДокумента, ВалютнаяСумма");
	КолонкиСписка = РеквизитФормыВЗначение("Объект").Список.ВыгрузитьКолонки();
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из Объект.Список Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер "+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " : ";
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если Не ЗначениеЗаполнено(Значение) Тогда
				ПредставлениеРеквизита = КолонкиСписка.Колонки[КлючЗначение.Ключ].Заголовок;
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				
				Если КлючЗначение.Ключ = "ВалютаДокумента" Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
						Если ТипЗнч(СтрокаТаблицы.ДокументОснование)= Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
							ВалютаДокумента = ВалютаРегламентированногоУчета;
						Иначе
							ВалютаДокумента  = ОпределитьВалютуДокумента(СтрокаТаблицы.ДокументОснование);
						КонецЕсли;
						СтрокаСообщения = СтрокаСообщения+Символы.ПС+"Установлена валюта из документа основания ("+ВалютаДокумента+").";
						СтрокаТаблицы.ВалютаДокумента = ВалютаДокумента;
					КонецЕсли; 
				ИначеЕсли  КлючЗначение.Ключ = "ВалютнаяСумма" Тогда
					Если СтрокаТаблицы.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
						СтрокаТаблицы.ВалютнаяСумма = СтрокаТаблицы.Сумма;
						//Можно правильно установить валютную сумму, остатновка обработки не требуется.
						Продолжить;
					КонецЕсли; 
				КонецЕсли; 
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСервер()
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	Отказ=Ложь; ПроверкаЗаполненияТабличнойЧасти(Отказ);
	
	Если Отказ Тогда
		ПоказатьПредупреждение(, "Некорректно заполнен список авансов для формирования счетов-фактур. Обработка остановлена");
		Для Каждого Строка Из Объект.Список Цикл
			Строка.СФсформирован = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод();
	
	Если НеиспользуемыеСчетаФактуры.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Выполнить", ЭтотОбъект), "По организации обнаружены счета-фактуры на аванс за обрабатываемый период,
		|которые не используются в списке счетов-фактур к регистрации (значение поля ""Счет-фактура"" по строке).
		|Номера найденных документов могут быть использованы для тех строк, у которых не установлен соответствующий
		|строке счет-фактура. 
		|Использовать номера ранее зарегистрированных счетов-фактур?
		| 
		|Да - Использовать номера обнаруженных счетов-фактур, неиспользованные пометить на удаление
		|Нет - Оставить обнаруженные счета-фактуры без изменений, продолжить процедуру регистрации
		|Отмена - Отменить формирование счетов-фактур на аванс", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
	Иначе
		ЕстьОшибки = ложь;
		СформироватьСчетаФактуры(ЕстьОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьСчетаФактуры(ЕстьОшибки = ложь) Экспорт
	
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);
	
	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Объект.Список.Выгрузить(,"СчетФактура").ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	
	МассивДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Объект.Список.Выгрузить(,"ДокументОснование").ВыгрузитьКолонку("ДокументОснование"));
	МассивДоговоров = Новый Массив;
	
	Если Объект.СводныеСчетаФактуры Тогда /// nik
		СтруктураОтбораДокумент = Новый Структура("ДоговорКонтрагента");
		СтруктураОтбораДоговор = Новый Структура("ДоговорКонтрагента");
	Иначе
		СтруктураОтбораДокумент = Новый Структура("ДокументОснование");
		СтруктураОтбораДоговор = Новый Структура("ДокументОснование, ДоговорКонтрагента");
	КонецЕсли;
	
	Ответственный = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");			
		
	Для Каждого Документ Из МассивДокументов Цикл
		Если Объект.СводныеСчетаФактуры Тогда /// nik
			Если УправлениеМетаданными.ЕстьТабличнаяЧасть("РасшифровкаПлатежа", Документ.Метаданные()) Тогда
				СтруктураОтбораДокумент.ДоговорКонтрагента=Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента; //***
			Иначе
				СтруктураОтбораДокумент.ДоговорКонтрагента=Документ.ДоговорКонтрагента; //***
			КонецЕсли;
		Иначе
			СтруктураОтбораДокумент.ДокументОснование = Документ;
        КонецЕсли;

		СтрокиПоДокументу = Объект.Список.НайтиСтроки(СтруктураОтбораДокумент);
		
		МассивДоговоров.Очистить();
		Для Каждого СтрокаОтбора Из СтрокиПоДокументу Цикл
			МассивДоговоров.Добавить(СтрокаОтбора.ДоговорКонтрагента);
		КонецЦикла;
		МассивДоговоров = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
		ТЧАвансыСтарые = Новый Соответствие;
		
		Для Каждого Договор Из МассивДоговоров Цикл
			СтруктураОтбораДоговор.ДоговорКонтрагента = Договор;
			Если НЕ Объект.СводныеСчетаФактуры Тогда /// nik
				СтруктураОтбораДоговор.ДокументОснование = Документ;
			КонецЕсли;
			
			СтрокиПоДоговору = Объект.Список.НайтиСтроки(СтруктураОтбораДоговор);
			
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			
			ОшибкаФормирования = Ложь;
			
			Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
				
				Если СчФ = Неопределено Тогда
					// Создать/использовать Счет-фактуру
					Если не СтрокаОтбораДоговор.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ=СтрокаОтбораДоговор.СчетФактура.ПолучитьОбъект();
						Если ТЧАвансыСтарые[СчФ]=Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы тогда
						МассивСтрок=НеиспользуемыеСчетаФактуры.НайтиСтроки(Новый Структура("Использован", Ложь));
						Если МассивСтрок.Количество()=0 Тогда
							ИспользоватьРанееОбнаруженныеДокументы=Ложь;
							СчФ=Документы.СчетФактураВыданный.СоздатьДокумент();
						Иначе
							НайденнаяСтрока=МассивСтрок[0];
							НайденнаяСтрока.Использован=Истина;
							СчФ=НайденнаяСтрока.Ссылка.ПолучитьОбъект();
						КонецЕсли; 
					Иначе
						СчФ=Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный=Ответственный;
					КонецЕсли; 
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаОтбораДоговор);
					СчФ.Организация = Объект.Организация;
					СчФ.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					
					СчФ.ДокументыОснования.Очистить();
					
					НоваяСтрокаТабличнойЧасти=СчФ.ДокументыОснования.Добавить();
					НоваяСтрокаТабличнойЧасти.ДокументОснование = СтрокаОтбораДоговор.ДокументОснование;
					
					СчФ.СуммаДокумента = СтрокаОтбораДоговор.ВалютнаяСумма;
					
					СчФ.Авансы.Очистить();
					
					СчФ.ПометкаУдаления = Ложь;
					
					СчФ.Дата = КонецДня(СчФ.Дата);
					
					ТипОснования = ТипЗнч(СтрокаОтбораДоговор.ДокументОснование);
					
					СчФ.ДатаНомерДокументовОплаты.Очистить();
					
					Если ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
						или ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = СчФ.ДокументОснование.НомерВходящегоДокумента;
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.ДатаВходящегоДокумента;
						
					ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = ОбщегоНазначенияСервер.НомерНаПечать(СчФ.ДокументОснование);
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.Дата;
					Иначе
						СчФ.НомерПлатежноРасчетногоДокумента = "";
						СчФ.ДатаПлатежноРасчетногоДокумента =  Неопределено;
					КонецЕсли;
					
					СтрокаПРД = СчФ.ДатаНомерДокументовОплаты.Добавить();
					СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= СчФ.ДатаПлатежноРасчетногоДокумента;
					СтрокаПРД.НомерПлатежноРасчетногоДокумента	= СчФ.НомерПлатежноРасчетногоДокумента;
				Иначе
					НоваяСтрокаТабличнойЧасти=СчФ.ДокументыОснования.Добавить();//***
					НоваяСтрокаТабличнойЧасти.ДокументОснование = СтрокаОтбораДоговор.ДокументОснование; //***
					
					СчФ.Сумма = СчФ.Сумма + СтрокаОтбораДоговор.Сумма;
					СчФ.СуммаНДС = СчФ.СуммаНДС + СтрокаОтбораДоговор.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаОтбораДоговор.ВалютнаяСумма;
				КонецЕсли;
				
				СуммаПоСтроке = СтрокаОтбораДоговор.Сумма;
				СуммаНДСПоСтроке = СтрокаОтбораДоговор.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаОтбораДоговор.СтавкаНДС;
				Если ЗначениеЗаполнено(СтрокаОтбораДоговор.СчетНаОплату) Тогда
					ТаблицаАвансов = СчФ.ПолучитьТаблицуАвансовПоСчетуНаОплату(СуммаПоСтроке, СуммаНДСПоСтроке, СтавкаНДСПоСтроке, СтрокаОтбораДоговор.СчетНаОплату);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, СчФ.Авансы);
				Иначе
					Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
						Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
							Если СуммаПоСтроке = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаСтарая.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если СтрокаОтбораДоговор.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
								НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
								НоваяСтрокаПоСуммам.ДокументОснование=СтрокаОтбораДоговор.ДокументОснование; /// nik
								НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
								НоваяСтрокаПоСуммам.Содержание = СтрокаСтарая.Содержание;
								НоваяСтрокаПоСуммам.Сумма = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
								НоваяСтрокаПоСуммам.СуммаНДС = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
								НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
								СуммаПоСтроке = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
								СуммаНДСПоСтроке = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
								СтрокаСтарая.Сумма = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
								СтрокаСтарая.СуммаНДС = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;								
							КонецЕсли;
						КонецЦикла;
						Если СуммаПоСтроке <> 0 Тогда
							НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.ДокументОснование=СтрокаОтбораДоговор.ДокументОснование; /// nik
							НоваяСтрокаПоСуммам.Сумма = СуммаПоСтроке;
							НоваяСтрокаПоСуммам.СуммаНДС = СуммаНДСПоСтроке;
							НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
							НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
						КонецЕсли;
					Иначе
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаОтбораДоговор);
						НоваяСтрокаПоСуммам.ДокументОснование=СтрокаОтбораДоговор.ДокументОснование; /// nik
						НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					КонецЕсли;					
				КонецЕсли;
				
			КонецЦикла;
			
			СообщениеОбОшибке = СчФ.ПроверитьВозможностьЗаписиСФ(ОшибкаФормирования);
			Если ОшибкаФормирования Тогда
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке("Строка "+Строка(СтрокаОтбораДоговор.НомерСтроки)+", не выписан счет-фактура на аванс."+Символы.ПС+СообщениеОбОшибке);
					СтрокаОтбораДоговор.СФсформирован = ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли; 
				
			Попытка
				НовыйСФ = СчФ.ЭтоНовый();
				СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					Сообщить(?(НовыйСФ,"Выписан","Обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаОтбораДоговор.НомерСтроки)+" № " + СчФ.Номер + " от " + СчФ.Дата);
					СтрокаОтбораДоговор.СФсформирован = истина;
					СтрокаОтбораДоговор.СчетФактура = СчФ.Ссылка;
				КонецЦикла;
			Исключение
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке(?(НовыйСФ,"Не выписан","Не обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаОтбораДоговор.НомерСтроки));
					СтрокаОтбораДоговор.СФсформирован = ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
			КонецПопытки;
			
		КонецЦикла;   		
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация = &Организация
	|	И (НЕ СчетФактураВыданный.Ссылка В (&СФдляОбновления))
	|	И (НЕ СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Дата,
	|	СчетФактураВыданный.Ссылка.Номер";

	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("СФдляОбновления", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Объект.Список.Выгрузить(,"СчетФактура").ВыгрузитьКолонку("СчетФактура"),Истина));

	НеиспользуемыеСчетаФактуры.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДокумента()
	//Структура_ТипыДокументовАванса = Новый Структура();
	мКонецНалоговогоПериода = УчетНалоговСервер.КонецПериодаПоУчетнойПолитике(Объект.Организация, Объект.КонецПериода);
	КонецНалоговогоПериодаПоДатам.Вставить(Формат(КонецМесяца(Объект.КонецПериода), "ДФ=_yyyyMMddHHmmss"), мКонецНалоговогоПериода);
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	
	// По ставке НДС 0% СФ на аванс выписывается по расчетной ставке 18/118
	Если Объект.НачалоПериода>'20051231' Тогда
		// Регистрация авансов по реализации на экспорт не производится
	Иначе
		Если Год(Объект.НачалоПериода)>2018 Тогда
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС20_120);
		Иначе
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
		КонецЕсли;
	КонецЕсли; 
	
	ТаблицаАвансов = Неопределено;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("ТекущийПорядокРегистрацииСчетовФактурНаАванс", ПорядокРегистрацииСФНаАванс);
	Запрос.УстановитьПараметр("КонецНалоговогоПериода", УчетНалоговСервер.КонецПериодаПоУчетнойПолитике(Объект.Организация, Объект.КонецПериода));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	БУ = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	ВестиРасчетыПоДокументам = Не (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено);

	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(Объект.КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Объект.НачалоПериода));
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	
	УпрощенныйУчетНДС=Ложь;
	Если Не УпрощенныйУчетНДС Или ВестиРасчетыПоДокументам Тогда
		Запрос.Текст="ВЫБРАТЬ
		|	Расчеты.Период КАК Период,
		|	Расчеты.Организация,
		|	Расчеты.Контрагент,
		|	Расчеты.ДоговорКонтрагента,
		|	Расчеты.ТипДоговораКонтрагента,
		|	Расчеты.ДокументОснование,
		|	Расчеты.СуммаАванса,
		|	Расчеты.КонечныйОстаток,
		|	Расчеты.НачальныйОстаток,
		|	Расчеты.ВалютнаяСуммаАванса,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДокументАвансаДата,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВыписки,
		|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс,
		|	Расчеты.КонецНалоговогоПериода
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСРасчетыСПокупателямиОстатки.Период КАК Период,
		|		НДСРасчетыСПокупателямиОстатки.Организация КАК Организация,
		|		НДСРасчетыСПокупателямиОстатки.Покупатель КАК Контрагент,
		|		НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		НДСРасчетыСПокупателямиОстатки.ТипДоговораКонтрагента,
		|		НДСРасчетыСПокупателямиОстатки.Документ КАК ДокументОснование,
		|		-1 * ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток = 0
		|				ТОГДА НДСРасчетыСПокупателямиОстатки.СуммаНачальныйОстаток
		|			ИНАЧЕ НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток
		|		КОНЕЦ КАК СуммаАванса,
		|		-1 * НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток КАК КонечныйОстаток,
		|		-1 * НДСРасчетыСПокупателямиОстатки.СуммаНачальныйОстаток КАК НачальныйОстаток,
		|		-1 * ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток = 0
		|				ТОГДА НДСРасчетыСПокупателямиОстатки.СуммаНачальныйОстаток
		|			ИНАЧЕ НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток
		|		КОНЕЦ КАК ВалютнаяСуммаАванса,
		|		ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.ПорядокРегистрацииСчетовФактурНаАванс, &ТекущийПорядокРегистрацииСчетовФактурНаАванс)
		|			ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору
		|		КОНЕЦ КАК ПорядокРегистрацииСчетовФактурНаАванс,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСНалоговыйПериод, ВЫБОР
		|						КОГДА НДСРасчетыСПокупателямиОстатки.Период < ДАТАВРЕМЯ(2008, 1, 1)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|					КОНЕЦ) = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА КОНЕЦПЕРИОДА(НДСРасчетыСПокупателямиОстатки.Период, КВАРТАЛ)
		|			ИНАЧЕ КОНЕЦПЕРИОДА(НДСРасчетыСПокупателямиОстатки.Период, МЕСЯЦ)
		|		КОНЕЦ КАК КонецНалоговогоПериода
		|	ИЗ
		|		РегистрНакопления.НДСРасчетыСПокупателями.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День,,
		|				Организация = &Организация
		|					И ВЫБОР
		|						КОГДА ЕСТЬNULL(Документ, НЕОПРЕДЕЛЕНО) ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|							ТОГДА Документ.ДокументОснование = ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатков.ПустаяСсылка)
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ) КАК НДСРасчетыСПокупателямиОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаОрганизаций
		|			ПО (УчетнаяПолитикаОрганизаций.Организация = НДСРасчетыСПокупателямиОстатки.Организация)
		|				И (УчетнаяПолитикаОрганизаций.Период В
		|					(ВЫБРАТЬ
		|						МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период
		|					ИЗ
		|						РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитикаОрганизаций
		|					ГДЕ
		|						НДСРасчетыСПокупателямиОстатки.Период >= УчетнаяПолитикаОрганизаций.Период
		|						И УчетнаяПолитикаОрганизаций.Организация = НДСРасчетыСПокупателямиОстатки.Организация))
		|	ГДЕ
		|		(НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток < 0
		|				ИЛИ НДСРасчетыСПокупателямиОстатки.СуммаНачальныйОстаток < 0)) КАК Расчеты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НеРегистрироватьСчетаФактурыНаАвансы)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|";

		//Если Структура_ТипыДокументовАванса.Количество()>0 Тогда
		//	ОграничениеТиповДокументов = "";
		//	Для Каждого ТипДокументовАванса Из Структура_ТипыДокументовАванса Цикл
		//		ОграничениеТиповДокументов = ОграничениеТиповДокументов+?(ПустаяСтрока(ОграничениеТиповДокументов)," И ( "," ИЛИ ")+ "Документ"+" ССЫЛКА Документ." + ТипДокументовАванса.Ключ;
		//	КонецЦикла; 
		//	ОграничениеТиповДокументов = ОграничениеТиповДокументов+") ";
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация", "Организация = &Организация" + ОграничениеТиповДокументов);
		//КонецЕсли; 
		
		ТаблицаАвансовТекущая = Запрос.Выполнить().Выгрузить();
		ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаАвансовТекущая,"ДокументОснование","ДокументАвансаДата");
		
		Авансы = ТаблицаАвансовТекущая.Скопировать(, "ДокументОснование, ДоговорКонтрагента");
		Авансы.Свернуть("ДокументОснование, ДоговорКонтрагента");
		
		ТаблицаАвансовТекущая.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
		ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансовТекущая);
		
		ТаблицаАвансовТекущая.Индексы.Добавить("ДокументОснование");
		ТаблицаАвансов = ТаблицаАвансовТекущая.СкопироватьКолонки();
		
		ПоискПартии = Новый Структура("ДокументОснование, ДоговорКонтрагента");
		
		Для	Каждого Аванс из Авансы Цикл
			
			ЗаполнитьЗначенияСвойств(ПоискПартии, Аванс);
			Таблица = ТаблицаАвансовТекущая.НайтиСтроки(ПоискПартии);
			
			ПорядокРегистрацииСФНаАванс = Таблица[0].ПорядокРегистрацииСчетовФактурНаАванс;
			ДатаПоступленияАванса = Таблица[0].ДокументАвансаДата;
			//Вычислим крайнюю дату зачета аванса
			Если ПорядокРегистрацииСФНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
				Если КонецДня(ДатаПоступленияАванса+345600) > КонецКвартала(ДатаПоступленияАванса) Тогда
					ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
				Иначе
					ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса+345600);
				КонецЕсли;
			ИначеЕсли ПорядокРегистрацииСФНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда
				ДатаЗачетаАванса = КонецМесяца(ДатаПоступленияАванса);
			ИначеЕсли ПорядокРегистрацииСФНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда
				ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
			ИначеЕсли ПорядокРегистрацииСФНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы Тогда
				ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
			Иначе
				ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
			КонецЕсли;				
			
			Если ДатаЗачетаАванса < Объект.НачалоПериода Тогда
				ДатаЗачетаАванса = Объект.НачалоПериода;
			КонецЕсли;
			
			Для	Каждого Строка из Таблица Цикл
				Если ДатаЗачетаАванса > КонецДня(Строка.Период) Тогда
					Продолжить;
				ИначеЕсли КонецДня(ДатаЗачетаАванса) = КонецДня(Строка.Период) 
					И Строка.КонечныйОстаток = 0 Тогда
					Продолжить;
				ИначеЕсли Строка.СуммаАванса > 0 Тогда
					Если Строка.ДатаВыписки = '00010101' Тогда
						Если ДатаЗачетаАванса > Строка.Период Тогда
							Строка.ДатаВыписки = Строка.Период;
						Иначе
							Строка.ДатаВыписки = ДатаЗачетаАванса;
						КонецЕсли;
					КонецЕсли;
					Строка.КонецНалоговогоПериода = КонецКвартала(Строка.ДокументАвансаДата);
					
					Если Не ЗначениеЗаполнено(Строка.СчетФактура) 
						Или НачалоДня(Строка.ДатаВыписки) >= НачалоДня(Объект.НачалоПериода) Тогда
						НоваяСтрока = ТаблицаАвансов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЕсли;
					Прервать;
				КонецЕсли
			КонецЦикла;
			
		КонецЦикла;
					
	Иначе
		// При упрощенном учете НДС при отсутствии аналитики по документам расчетов определяются все авансы за период
		// заполнения обработки кроме закрытых в тот же день
		Запрос.Текст="
		|ВЫБРАТЬ
		|	Расчеты.Период КАК Период,
		|	Расчеты.Организация,
		|	Расчеты.Контрагент,
		|	Расчеты.ДоговорКонтрагента,
		|	Расчеты.ДокументОснование,
		//|	Расчеты.ВалютаРасчетов,
		|	Расчеты.СуммаАванса,
		|	Расчеты.ВалютнаяСуммаАванса,
		|	Расчеты.Период КАК ДокументАвансаДата,
		|	Расчеты.Период КАК ДатаВыписки,
		|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс,
		|	&КонецНалоговогоПериода КАК КонецНалоговогоПериода
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОНЕЦПЕРИОДА(ХозрасчетныйОстатки.Период, ДЕНЬ) КАК Период,
		|		ХозрасчетныйОстатки.Организация КАК Организация,
		|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|		ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
		|		ХозрасчетныйОстатки.Регистратор КАК ДокументОснование,
		////|		ВЫБОР
		////|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
		////|					И (НЕ ХозрасчетныйОстатки.ВалютнаяСуммаОборотКт ЕСТЬ NULL )
		////|				ТОГДА ХозрасчетныйОстатки.Валюта
		////|			ИНАЧЕ &ВалютаРегламентированногоУчета
		////|		КОНЕЦ КАК ВалютаРасчетов,
		|		ХозрасчетныйОстатки.СуммаОборотКт КАК СуммаАванса,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
		|					И ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОборотКт, 0) <> 0
		|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОборотКт
		|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОборотКт
		|		КОНЕЦ КАК ВалютнаяСуммаАванса,
		|		ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы) КАК ПорядокРегистрацииСчетовФактурНаАванс
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор,
		|				Счет В
		|					(ВЫБРАТЬ
		|						Хозрасчетный.Ссылка
		|					ИЗ
		|						ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|					ГДЕ
		|						Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)),
		|				&СубконтоСчетаРасчетов_НетДР,
		|				Организация = &Организация,
		|				,
		|				) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|					&НачалоПериода,
		|					&КонецПериода,
		|					День,
		|					,
		|					Счет В
		|						(ВЫБРАТЬ
		|							Хозрасчетный.Ссылка
		|						ИЗ
		|							ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|						ГДЕ
		|							Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)),
		|					&СубконтоСчетаРасчетов_НетДР,
		|					Организация = &Организация) КАК ХозрасчетныйОстаткиДень
		|			ПО ХозрасчетныйОстатки.Период = ХозрасчетныйОстаткиДень.Период
		|				И ХозрасчетныйОстатки.Субконто1 = ХозрасчетныйОстаткиДень.Субконто1
		|				И ХозрасчетныйОстатки.Субконто2 = ХозрасчетныйОстаткиДень.Субконто2
		|	ГДЕ
		|		ХозрасчетныйОстатки.СуммаОборотКт > 0) КАК Расчеты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|";
		ТаблицаАвансовТекущая = Запрос.Выполнить().Выгрузить();
		ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаАвансовТекущая, "ДокументОснование", "ДокументАвансаДата");
		ТаблицаАвансовТекущая.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
		ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансовТекущая);
		
		ТаблицаАвансов = ТаблицаАвансовТекущая.СкопироватьКолонки();
		
		Запрос.Текст="
		|ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(ХозрасчетныйОстаткиДень.Период, ДЕНЬ) КАК Период,
		|	ХозрасчетныйОстаткиДень.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстаткиДень.Субконто2 КАК ДоговорКонтрагента,
		|	-1 * ХозрасчетныйОстаткиДень.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
		|	-1 * ХозрасчетныйОстаткиДень.ВалютнаяСуммаКонечныйОстаток КАК ВалютнаяСуммаКонечныйОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День,,
		|			Счет В
		|				(ВЫБРАТЬ
		|					Хозрасчетный.Ссылка
		|				ИЗ
		|					ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|				ГДЕ
		|					Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)),
		|			&СубконтоСчетаРасчетов_НетДР,
		|			Организация = &Организация) КАК ХозрасчетныйОстаткиДень
		|";
		ТаблицаОстатковПоДням = Запрос.Выполнить().Выгрузить();
		
		СтруктураОтбора = Новый Структура("Период, Контрагент, ДоговорКонтрагента");
		
		Для	Каждого Строка из ТаблицаАвансовТекущая Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			СтрокиПоДню = ТаблицаОстатковПоДням.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиПоДню.Количество()=0 Или СтрокиПоДню[0].СуммаКонечныйОстаток=0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаАванса = Мин(Строка.СуммаАванса, СтрокиПоДню[0].СуммаКонечныйОстаток);
			Строка.СуммаАванса = СуммаАванса;
			СтрокиПоДню[0].СуммаКонечныйОстаток = СтрокиПоДню[0].СуммаКонечныйОстаток - СуммаАванса;
			ВалютнаяСуммаАванса = Мин(Строка.ВалютнаяСуммаАванса, СтрокиПоДню[0].ВалютнаяСуммаКонечныйОстаток);
			Строка.ВалютнаяСуммаАванса = ВалютнаяСуммаАванса;
			СтрокиПоДню[0].ВалютнаяСуммаКонечныйОстаток = СтрокиПоДню[0].СуммаКонечныйОстаток - СуммаАванса;
			
			НоваяСтрока = ТаблицаАвансов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
		
	НомерСтроки = 1;
	
	Если ТаблицаАвансов <> Неопределено И ТаблицаАвансов.Количество() <> 0 Тогда
		ТаблицаАвансов.Сортировать("ДокументАвансаДата Возр");
		Для Каждого Выборка Из ТаблицаАвансов Цикл
			КонецНалоговогоПериодаПоДатам.Вставить(Формат(КонецМесяца(Выборка.ДокументАвансаДата), "ДФ=_yyyyMMddHHmmss"), Выборка.КонецНалоговогоПериода);
			
			ДокАванса = Выборка.ДокументОснование;
			ДокАвансаМетаданные = ДокАванса.Метаданные();
			
			ВалютаДокумента = ВалютаРегламентированногоУчета;	

			Если ЗначениеЗаполнено(ДокАванса) 
				И (ДокАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено
					Или ТипЗнч(ДокАванса) = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера")) Тогда
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
				
				Если ТипЗнч(ДокАванса) = Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
					
					Для Каждого СтрПлатежа Из ДокАванса.ДенежныеСредства Цикл
						Если СтрПлатежа.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.Сумма;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.Сумма;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					ЕстьСчетНаОплату = ДокАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетНаОплату") <> Неопределено;
					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
							
							Если ЕстьСчетНаОплату Тогда
								СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.СчетНаОплату;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма,ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = ВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						// НДС с авансов под экспортные поставки не начисляется с 2006 года
						Продолжить;
					ИначеЕсли СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
						Продолжить;
					КонецЕсли;
					
					СтрокаТП = Объект.Список.Добавить();
					СтрокаТП.Дата				= Выборка.ДатаВыписки;
					СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
					СтрокаТП.КонецНалоговогоПериода=ПолучитьКонецНалоговогоПериодаПоДате(СтрокаТП.ДатаДокументаОснования);
					СтрокаТП.Контрагент			= Выборка.Контрагент;
					СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
					СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;
					СтрокаТП.СчетНаОплату		= СтрокаПоСтавке.СчетНаОплату;					
					СтрокаТП.ВалютаДокумента	= ВалютаДокумента;					
					СтрокаТП.Сумма				= СтрокаПоСтавке.Сумма;
					СтрокаТП.ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
					СтрокаТП.СтавкаНДС			= СтрокаПоСтавке.СтавкаНДС;
					СтрокаТП.СчетФактура		= Выборка.СчетФактура;
					СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
					
					ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
					ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
			Иначе // Если ДокАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
				
				СтрокаТП = Объект.Список.Добавить();
				СтрокаТП.Дата				= Выборка.ДатаВыписки;
				СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
				СтрокаТП.КонецНалоговогоПериода=ПолучитьКонецНалоговогоПериодаПоДате(СтрокаТП.ДатаДокументаОснования);
				СтрокаТП.Контрагент			= Выборка.Контрагент;
				СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
				СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;				
				СтрокаТП.ВалютаДокумента	= ВалютаДокумента;				
				СтрокаТП.Сумма				= Выборка.СуммаАванса;
				//СтрокаТП.СтавкаНДС			= ПараметрыСеанса.НастройкиПользователя.ОсновнаяСтавкаНДС;
				Если НЕ ЗначениеЗаполнено(СтрокаТП.СтавкаНДС) Тогда
					Если Год(Объект.НачалоПериода)>2018 Тогда
						СтрокаТП.СтавкаНДС			= Перечисления.СтавкиНДС.НДС20_120;
	   	             Иначе
						СтрокаТП.СтавкаНДС			= Перечисления.СтавкиНДС.НДС18_118;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = ВалютаРегламентированногоУчета Тогда
					СтрокаТП.ВалютнаяСумма	= СтрокаТП.Сумма;
				Иначе
					СтрокаТП.ВалютнаяСумма	= Выборка.ВалютнаяСуммаАванса;
				КонецЕсли;
				СтрокаТП.СчетФактура		= Выборка.СчетФактура;
				СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
				Если ТипЗнч(Выборка.ДокументОснование)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					Если ЗначениеЗаполнено(Выборка.ДокументОснование.Подвид) Тогда
						Если СокрЛП(Выборка.ДокументОснование.Подвид.ИмяПредопределеного)="Корректировка" Тогда
							Если Год(Выборка.ДокументОснование.Сделка.Дата)<2019 Тогда
								СтрокаТП.СтавкаНДС	= Перечисления.СтавкиНДС.НДС18_118;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
				ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
				
				НомерСтроки = НомерСтроки + 1;

			КонецЕсли; //Если ДокАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
		КонецЦикла; // Пока Выборка.Следующий() Цикл
	КонецЕсли;
	
	ОпределитьНаличиеНереализованныхОтгрузок();
			
КонецПроцедуры

&НаСервере
Функция ПолучитьКонецНалоговогоПериодаПоДате(ДатаПериода)
	Ключ=Формат(КонецМесяца(ДатаПериода), "ДФ=_yyyyMMddHHmmss");
	Если КонецНалоговогоПериодаПоДатам.Свойство(Ключ) Тогда
		КонецНалоговогоПериодаПоДатам.Вставить(Ключ, УчетНалоговСервер.КонецПериодаПоУчетнойПолитике(Объект.Организация, ДатаПериода));
	КонецЕсли;	
	Возврат КонецНалоговогоПериодаПоДатам[Ключ];	
КонецФункции

&НаСервере
Процедура ПроверитьДатуВыпискиПоСтроке(СтрокаТаблицы)
	
	КонецНалоговогоПериода = ПолучитьКонецНалоговогоПериодаПоДате(СтрокаТаблицы.ДатаДокументаОснования);
	
	Если СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы 
		И (СтрокаТаблицы.Дата > КонецНалоговогоПериода
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		
		Сообщить("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(?(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400 > КонецНалоговогоПериода, КонецНалоговогоПериода, СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400), "ДФ=dd.MM.yyyy"));
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней 
		И (КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода)
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		Сообщить("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + ?(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400) > КонецМесяца(КонецНалоговогоПериода), 
																																							Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"), Формат(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400, "ДФ=dd.MM.yyyy")));
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования) Тогда
		Сообщить("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования), "ДФ=dd.MM.yyyy"));
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода) Тогда
		Сообщить("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеНереализованныхОтгрузок()
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Объект.КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокПокупателей", Объект.Список.Выгрузить(,"Контрагент").ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("СписокДоговоров", Объект.Список.Выгрузить(,"ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента"));	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ИсточникДанных.Покупатель,
	|	ИсточникДанных.ДоговорКонтрагента,
	|	ИсточникДанных.ТипДоговораКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(&Период,
	|			Организация = &Организация
	|		    И Покупатель В (&СписокПокупателей)
	|		    И ДоговорКонтрагента В (&СписокДоговоров)
	|		    И Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|		    ) КАК ИсточникДанных
	|";
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;

	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	
	Сообщить("По данным контрагентам одновременно висит предоплата и неоплаченная отгрузка.
			|Проверить можно отчетом ""Ведомость по расчетам с покупателями"".
			|Возможно необходимо переформировать документ ""Регистрация оплаты от покупателей"":", СтатусСообщения.Важное);

	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		Сообщить("Контрагент <" + СтрокаРезультата.Покупатель + ">, договор <" + СтрокаРезультата.ДоговорКонтрагента + ">", СтатусСообщения.Важное);
	КонецЦикла;		
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансов)
	
	Если ТаблицаАвансов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.Ссылка.Дата КАК ДатаВыписки,
			|	СчетФактураВыданный.Ссылка.ДоговорКонтрагента,
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
			|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
			|	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументыОснования", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаАвансов.ВыгрузитьКолонку("ДокументОснование"), Истина));
		
		СФПоДокументам = Запрос.Выполнить().Выгрузить();
		
		Если СФПоДокументам.Количество()>0 Тогда
			
			СтруктураОтбора = Новый Структура("ДокументОснование, ДоговорКонтрагента");
			Для Каждого СФ Из СФПоДокументам Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СФ);
				СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
					СтрокаОтбора.СчетФактура = СФ.СчетФактура;
					СтрокаОтбора.ДатаВыписки = СФ.ДатаВыписки;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетНДСиВалютнойСуммыПоСтроке(ТД)
	ТД.СуммаНДС = 0;
	
	Если ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 120;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 110;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 118;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетНДС(ТД)
	ТД.СуммаНДС = 0;
	
	Если ТД.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 100;
	ИначеЕсли ТД.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10") Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 100;
	ИначеЕсли ТД.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 100;
	ИначеЕсли ТД.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 120;
	ИначеЕсли ТД.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 110;
	ИначеЕсли ТД.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 118;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДобавитьДатуДокументаКРезультатуЗапроса(Результат,КолонкаДокумента,КолонкаСДатой)

	КэшПоТипам = Новый Соответствие;

		Для каждого СтрокаТаблицы из Результат Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
				Продолжить;
			КонецЕсли;
			
			ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = новый запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;

		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);

		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		для каждого строка из НайденныеСтроки цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		Конеццикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ДобавитьДатуДокументаКРезультатуЗапроса()

&НаСервере
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "")
	//ТаблицаРезультатов = Объект.Список.ВыгрузитьКолонки();
	ЗаполнитьСтрокиДокумента(); //(ТаблицаРезультатов);
	//Объект.Список.Загрузить(ТаблицаРезультатов);
	Если Не (Объект.Список.Количество() > 0) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - авансы не обнаружены"
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Регистрация счетов-фактур на аванс не требуется:"+СтрокаСообщения, , , СтатусСообщения.Информация);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент()

&НаСервере
Функция ОпределитьВалютуДокумента(Ссылка)
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	Если УправлениеМетаданными.ЕстьРеквизит("ВалютаДокумента", Ссылка.Метаданные()) тогда
		Если ЗначениеЗаполнено(Ссылка.ВалютаДокумента) Тогда
			ВалютаПоДокументу = Ссылка.ВалютаДокумента;
		Иначе
			//Незаполненное значение приравнивается к валюте регл. учета
			ВалютаПоДокументу = ВалютаРегламентированногоУчета;	
		КонецЕсли; 
	Иначе
		ВалютаПоДокументу = ВалютаРегламентированногоУчета;
	КонецЕсли;
	Возврат ВалютаПоДокументу;
КонецФункции

&НаСервере
Процедура ПометитьНаУдалениеСФ()
	Для каждого Документ Из НеиспользуемыеСчетаФактуры Цикл
		Если не Документ.ПометкаУдаления тогда
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_Заполнить(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Список.Очистить();
		ЗаполнитьДокумент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ОчиститьСостав(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Список.Очистить();
	Иначе
		Параметры.СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Выполнить(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Сообщить("Регистрация счетов-фактур на аванс отменена пользователем.", СтатусСообщения.Информация);
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		// В текущем цикле помечаем документы на удаление. Использование документов 
		// будет выполняться далее, непосредственно в процессе регистрации счетов-фактур
		ПометитьНаУдалениеСФ();
	Иначе
		НеиспользуемыеСчетаФактуры.Очистить();
	КонецЕсли;
	ЕстьОшибки = ложь;
	СформироватьСчетаФактуры(ЕстьОшибки);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" ИЛИ (Элемент.Имя="НачалоПериода" И Объект.НачалоПериода > Объект.КонецПериода) Тогда
		ПриИзмененииПериодаОрганизации();

	ИначеЕсли Элемент.Имя="КонецПериода" Тогда
		Если Объект.КонецПериода < Объект.НачалоПериода Тогда
			Объект.НачалоПериода = Объект.КонецПериода;
		КонецЕсли;
		ПриИзмененииПериодаОрганизации();
	КонецЕсли;
КонецПроцедуры		
		
&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если Элемент.Имя="Организация" И Объект.Список.Количество() > 0 Тогда
	//	ТекстВопроса = "При смене организации необходимо очистить табличную часть. Очистить?";
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ОчиститьСостав", ЭтотОбъект, Новый Структура("СтандартнаяОбработка", СтандартнаяОбработка)), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаОрганизации()
	УчетнаяПолитика=ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Объект.КонецПериода, Ложь, Объект.Организация);
	ПорядокРегистрацииСФНаАванс= УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс;
	КонецНалоговогоПериода = УчетНалоговСервер.КонецПериодаПоУчетнойПолитике(Объект.Организация, Объект.КонецПериода);
	КонецНалоговогоПериодаПоДатам.Вставить(Формат(КонецМесяца(Объект.КонецПериода), "ДФ=_yyyyMMddHHmmss"), КонецНалоговогоПериода);
	
	Элементы.ПорядокРегистрацииСчетовФактурНаАванс.Заголовок=?(ПорядокРегистрацииСФНаАванс.Пустая(), "Порядок регистрации счетов фактур на аванс не определен", ПорядокРегистрацииСФНаАванс);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Список"

&НаКлиенте
Процедура тпСписок_ПриИзменении(Элемент)
	ИмяЭлемента=СтрЗаменить(Элемент.Имя, "Список", "");
	ТекущиеДанные=Элементы.Список.ТекущиеДанные;
	
	Если ИмяЭлемента="ДоговорКонтрагента" Тогда
		ВалютаДоговора=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если Не ЗначениеЗаполнено(ВалютаДоговора) тогда
			ТекущиеДанные.ВалютаДокумента=ВалютаРегламентированногоУчета;
		Иначе
			ТекущиеДанные.ВалютаДокумента=ВалютаДоговора;
		КонецЕсли;
		ПересчетНДС(ТекущиеДанные);
		
	ИначеЕсли ИмяЭлемента="ДокументОснование" Тогда
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Дата) И ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
			ТекущиеДанные.Дата=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументОснование, "Дата");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
			ТекущиеДанные.ДатаДокументаОснования=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументОснование, "Дата");
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные.ДокументОснование)= Тип("ДокументСсылка.КомиссияОтчетПродажиКомиссионера") Тогда
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента  = ОпределитьВалютуДокумента(ТекущиеДанные.ДокументОснование);
		КонецЕсли;
		
		Если не ВалютаДокумента = ТекущиеДанные.ВалютаДокумента Тогда
			Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
				ТекущиеДанные.ВалютнаяСумма = ТекущиеДанные.Сумма;
			Иначе	
				ТекущиеДанные.ВалютнаяСумма = 0;
			КонецЕсли; 
		КонецЕсли; 
		ТекущиеДанные.ВалютаДокумента = ВалютаДокумента;
		
	ИначеЕсли ИмяЭлемента="Сумма" ИЛИ ИмяЭлемента="СтавкаНДС" Тогда
		ПересчетНДС(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСписок_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.СчетФактура = Неопределено;
		Элемент.ТекущиеДанные.СФсформирован = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпСписок_КолонкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя="СписокСчетФактура" Тогда
		СтандартнаяОбработка=Ложь;
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.НДСВидСчетаФактуры.НаАванс"));
		СтруктураОтбора.Вставить("Организация", Объект.Организация);

		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Документ.СчетФактураВыданный.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
	Массив_ТипыДокументовАванса = Метаданные.РегистрыНакопления.НДСсАвансов.Измерения.СчетФактура.Тип.Типы();
	ОписаниеТипов_ДокументыРасчетовСПокупателями = Метаданные.РегистрыНакопления.НДСРасчетыСПокупателями.Измерения.Документ.Тип;
	Структура_ТипыДокументовАванса = Новый Структура();
	Для Каждого ТипДокументаАванса Из Массив_ТипыДокументовАванса Цикл
		Если ОписаниеТипов_ДокументыРасчетовСПокупателями.СодержитТип(ТипДокументаАванса) Тогда
			Структура_ТипыДокументовАванса.Вставить(Метаданные.НайтиПоТипу(ТипДокументаАванса).Имя,ТипДокументаАванса);
		КонецЕсли; 
	КонецЦикла;
	КонецНалоговогоПериодаПоДатам=Новый Структура;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Объект.НачалоПериода = ТекущаяДата();
	Объект.КонецПериода  = ТекущаяДата();
	ПриИзмененииПериодаОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры
