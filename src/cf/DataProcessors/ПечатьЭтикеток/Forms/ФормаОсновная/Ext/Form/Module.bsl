&НаСервере
Процедура ЗаполнитьТовары(Результат)
	тзДанные=ЗначениеИзСтрокиВнутр(Результат);
	Объект.Товары.Загрузить(тзДанные);
	Для каждого СтрокаКоллекции Из Объект.Товары Цикл
		СтрокаКоллекции.Количество=1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="кпТоварыЗаполнить" Тогда
		тпТовары_ЗаполнитьШтрихКод();

	ИначеЕсли Команда.Имя="кпТоварыЗаполнитьПоНастройке" Тогда
		ОткрытьФорму("Обработка.ПечатьЭтикеток.Форма.ФормаЗаполнения",, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбработчикОповещения_ЗаполнитьПоНастройке", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли Команда.Имя="ШрифтEAN13" Тогда
		УстановитьШрифт("EAN13");

	ИначеЕсли Команда.Имя="ВывестиНаПечать" Тогда	
		ВывестиНаПечатьСервер(ТабличныйДокумент);
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		ТабличныйДокумент.АвтоМасштаб = Ложь;
		ТабличныйДокумент.ПолеСверху=Объект.СтраницаПолеСверху;
		ТабличныйДокумент.ПолеСлева=Объект.СтраницаПолеСлева;
		ТабличныйДокумент.ПолеСнизу=0;
		ТабличныйДокумент.ПолеСправа=0;
		ТабличныйДокумент.РазборПоКопиям=Истина;
		ТабличныйДокумент.ТочностьПечати=ТочностьПечати.Точная;
		ТабличныйДокумент.ЭкземпляровНаСтранице=0;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаРезультат;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьШрифт(Имя)
	Макет=Обработки.ПечатьЭтикеток.ПолучитьМакет("Шрифт"+Имя);
	Макет.Записать(КаталогВременныхФайлов()+"Шрифт"+Имя+".ttf");
	ЗапуститьПриложение(КаталогВременныхФайлов()+"Шрифт"+Имя+".ttf");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШтрихКод(Владелец, ЕдиницаИзмерения = Неопределено, ХарактеристикаНоменклатуры = Неопределено, СерияНоменклатуры = Неопределено, Качество = Неопределено) Экспорт
	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;

	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	Если СерияНоменклатуры = Неопределено Тогда
		СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	Если Качество = Неопределено Тогда
		Качество = Справочники.Качество.ПустаяСсылка();
	КонецЕсли;

	текТипШтрихкода=Неопределено;
	Если ТипЗнч(Владелец)=Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		текТипШтрихкода=Владелец.ТипШтрихКода;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"                  , Владелец);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СерияНоменклатуры"         , СерияНоменклатуры);
	Запрос.УстановитьПараметр("Качество"                  , Качество);
	Запрос.УстановитьПараметр("ТипШтрихкода"			  , текТипШтрихкода);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникДанных.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Владелец = &Владелец
	|	И ИсточникДанных.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И ИсточникДанных.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И ИсточникДанных.СерияНоменклатуры = &СерияНоменклатуры
	|	И ИсточникДанных.Качество = &Качество
	|	"+?(НЕ текТипШтрихкода=Неопределено, "И ИсточникДанных.ТипШтрихкода = &ТипШтрихкода", "")+"
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Штрихкод, Неопределено);
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПостроитьДеревоДоступныхРеквизитов()
	ДревоРеквизитыДокумента.ПолучитьЭлементы().Очистить();
	СписокСправочников=Новый СписокЗначений;
	МетаТовары=РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти.Товары;
	Для Каждого Реквизит Из МетаТовары.Реквизиты Цикл 
		//дерево вне зависимости от синонимов!
		Массив=Реквизит.Тип.Типы();
		Для Каждого ЭлементМассива Из Массив Цикл 
			Если Справочники.ТипВсеСсылки().СодержитТип(ЭлементМассива) Тогда 
				СсылкаМета=Новый(ЭлементМассива);
				ПримитивныйТип=Ложь;
			Иначе
				ПримитивныйТип=Истина;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		//ОбъектМетаданных=Метаданные.Справочники.Найти(Реквизит.Тип);
		Если ПримитивныйТип Тогда 
			ОбъектМетаданных=Неопределено;
			//ОбъектМетаданных=Метаданные.Справочники.Найти(Реквизит.Тип);
		Иначе
			ОбъектМетаданных=Метаданные.Справочники.Найти(СсылкаМета.Метаданные().Имя);
		КонецЕсли;
		Если НЕ ОбъектМетаданных=Неопределено Тогда 
			СписокСправочников.Добавить(ОбъектМетаданных.ПолноеИмя(),ВРег(Реквизит.Имя));
		Иначе
			Если НЕ ВРег(Реквизит.Имя)="КОЛИЧЕСТВО" Тогда 
				СписокСправочников.Добавить(Реквизит.Имя,ВРег(Реквизит.Синоним));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Инд=0;
	Для Каждого ЭлементСписка Из СписокСправочников Цикл 
		ДеревоРеквизитов = РеквизитФормыВЗначение("ДревоРеквизитыДокумента");
		ТекСтрокаДеревоРеквизитов = ДеревоРеквизитов;
		Инд=Инд+1;
		НоваяСтрока = ТекСтрокаДеревоРеквизитов.Строки.Добавить();
		НоваяСтрока.РеквизитДокумента = ЭлементСписка.Представление;
		НоваяСтрока.РеквизитДокументаИмя = ЭлементСписка.Значение;
		СтрокаРодителя="";
		НоваяСтрока.РодительСтрока = "";
		НоваяСтрока.СлужебныйНомерСтроки = Инд*1000;
		ЗначениеВРеквизитФормы(ДеревоРеквизитов,"ДревоРеквизитыДокумента");
		ВыбратьРеквизиты(ЭлементСписка.Значение,ЭлементСписка.Представление,НоваяСтрока.СлужебныйНомерСтроки);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КартинкаПоТипуЗначений(ТипЗначения)
	Если ТипЗначения = "Строка" ИЛИ ТипЗначения = "НеогрСтрока" Тогда
		Возврат БиблиотекаКартинок.ТипЗначенияСтрока;
	ИначеЕсли ТипЗначения = "Дата" Тогда
		Возврат БиблиотекаКартинок.Календарь;
	ИначеЕсли ТипЗначения = "Справочник" Тогда
		Возврат БиблиотекаКартинок.Справочник;
	ИначеЕсли ТипЗначения = "Число" Тогда
		Возврат БиблиотекаКартинок.ТипЗначенияЧисло;
	ИначеЕсли ТипЗначения = "Документ" Тогда
		Возврат БиблиотекаКартинок.Документ;
	ИначеЕсли ТипЗначения = "Перечисление" Тогда
		Возврат БиблиотекаКартинок.Перечисление;
	ИначеЕсли ТипЗначения = "Табличная часть" Тогда
		Возврат БиблиотекаКартинок.ЗафиксироватьТаблицу;
	ИначеЕсли ТипЗначения = "Составной" Тогда
		Возврат БиблиотекаКартинок.СнятьФлажки;
	ИначеЕсли ТипЗначения = "ПланСчетов" Тогда
		Возврат БиблиотекаКартинок.ДебетКредит;
	ИначеЕсли ТипЗначения = "Булево" Тогда
		Возврат БиблиотекаКартинок.ЗаписатьИЗакрыть;
	ИначеЕсли ТипЗначения = "РаскрытьРеквизит" Тогда 
		Возврат БиблиотекаКартинок.ВыбратьЗначение;
	ИначеЕсли ТипЗначения = "ХранилищеЗначения" Тогда 
		Возврат БиблиотекаКартинок.ХранилищеНастроек;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитПоОпциямДоступен(ТаблицаФункциональныхОпций,Реквизит)
	РеквизитПоОпцииДоступен=Истина;
	Для Каждого СтрокаТаблицы Из ТаблицаФункциональныхОпций Цикл 
		ФО=СтрокаТаблицы.ФО;
		Если НЕ ФО.Состав.Найти(Реквизит)=Неопределено Тогда 
			Возврат СтрокаТаблицы.ОпцияДоступна;
		КонецЕсли;
	КонецЦикла;
	Возврат РеквизитПоОпцииДоступен;
КонецФункции

&НаСервере
Функция ПолучитьТаблицуФункциональныхОпций()
	Таблица=Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФО");
	Таблица.Колонки.Добавить("ОпцияДоступна");
	Для Каждого ФО Из Метаданные.ФункциональныеОпции Цикл 
		НоваяСтрока=Таблица.Добавить();
		НоваяСтрока.ФО=ФО;
		Если ФО.Хранение.Тип.СодержитТип(Тип("Булево")) Тогда 
			НоваяСтрока.ОпцияДоступна=ПолучитьФункциональнуюОпцию(ФО.Имя);
		Иначе
			НоваяСтрока.ОпцияДоступна=Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Таблица;
КонецФункции

&НаСервере 
Функция ТипОбъектаМетаданных(НеПонятноЧтоЭто, ВозвратИмениКакВКонфигураторе=0)
	Если ТипЗнч(НеПонятноЧтоЭто) = Тип("ОписаниеТипов") Тогда
		Если НеПонятноЧтоЭто.Типы().Количество() > 1 Тогда Возврат "Составной";	КонецЕсли; 
		НеПонятноЧтоСУточнеммымТипом = НеПонятноЧтоЭто.Типы()[0];
	Иначе
		НеПонятноЧтоСУточнеммымТипом = НеПонятноЧтоЭто;
	КонецЕсли; 
	
	//Если простой тип, тогда возвращаем его сразу
	Если НеПонятноЧтоСУточнеммымТипом = Тип("Число") Тогда
		Возврат "Число";
	ИначеЕсли НеПонятноЧтоСУточнеммымТипом = Тип("Строка") Тогда
		Если НеПонятноЧтоЭто.КвалификаторыСтроки.Длина = 0 Тогда
			Возврат "НеогрСтрока";  //с неограниченой длинной обращаться надо по особому
		Иначе
			Возврат "Строка";
		КонецЕсли; 
	ИначеЕсли НеПонятноЧтоСУточнеммымТипом = Тип("Дата") Тогда
		Возврат "Дата";
	ИначеЕсли НеПонятноЧтоСУточнеммымТипом = Тип("Булево") Тогда
		Возврат "Булево";
	ИначеЕсли НеПонятноЧтоСУточнеммымТипом = Тип("УникальныйИдентификатор") Тогда
		Возврат "УникальныйИдентификатор";
	ИначеЕсли НеПонятноЧтоСУточнеммымТипом = Тип("ХранилищеЗначения") Тогда
		Возврат "ХранилищеЗначения";
	КонецЕсли;         
	
	ВсеПонятно = Метаданные.НайтиПоТипу(НеПонятноЧтоСУточнеммымТипом).ПолноеИмя();
	Если ВозвратИмениКакВКонфигураторе = 1 Тогда Возврат ВсеПонятно; КонецЕсли;

	// тут получим что это "справочник", "документ" .... в виде текстовотой строки
	СимволТочки = Найти(ВсеПонятно,".");
	Если СимволТочки = 0 Тогда Возврат ВсеПонятно;КонецЕсли; 

	Возврат Лев(ВсеПонятно,СимволТочки-1);
КонецФункции

&НаСервере
Процедура ЗаписатьНовуюСтроку(НоваяСтрока,ТекРеквизит,СлужебныйНомерСтроки)
	ТекТипСтрока = ТипОбъектаМетаданных(ТекРеквизит.Тип);
	
	НоваяСтрока.ТипЗначения = ТекТипСтрока;
	НоваяСтрока.РеквизитДокумента = ТекРеквизит.Синоним;
	НоваяСтрока.РеквизитДокументаИмя = ТекРеквизит.Имя;
	НоваяСтрока.ОписаниеТиповРеквизита = ТекРеквизит.Тип;
	НоваяСтрока.ТипЗначенияКартинка = КартинкаПоТипуЗначений(ТекТипСтрока);
	НоваяСтрока.СлужебныйНомерСтроки = СлужебныйНомерСтроки;
	
	Если ТекТипСтрока="Справочник" ИЛИ ТекТипСтрока="Документ" ИЛИ ТекТипСтрока="Составной" Тогда
		НоваяСтрока.ФлМожноРазвернуть=Истина;
	КонецЕсли; 
	
	СлужебныйНомерСтроки = СлужебныйНомерСтроки + 1;
КонецПроцедуры

&НаСервере
Процедура ВыбратьРеквизиты(ОписаниеТипа,РеквизитДокументаИмя = Неопределено,Родитель = 0);
	Если НЕ ЗначениеЗаполнено(ОписаниеТипа) Тогда Возврат; КонецЕсли;
	
	СписокФункциональныхОпций=ПолучитьТаблицуФункциональныхОпций();
	СлужебныйНомерСтроки = 1;
	
	ДеревоРеквизитов = РеквизитФормыВЗначение("ДревоРеквизитыДокумента");
	
	Если РеквизитДокументаИмя <> Неопределено Тогда
		
		//Если реквизит находится в табличной части, тогда ищем там
		Если Родитель <> 0 Тогда
			МассивСтрок = ДеревоРеквизитов.Строки.НайтиСтроки(Новый Структура("СлужебныйНомерСтроки",Родитель),Истина);
			ТекСтрокаДеревоРеквизитов = МассивСтрок[0];
		Иначе
			ТекСтрокаДеревоРеквизитов = ДеревоРеквизитов.Строки.Найти(РеквизитДокументаИмя,"РеквизитДокументаИмя",Истина);
		КонецЕсли; 
		
		Сч = 1;
		Пока ДеревоРеквизитов.Строки.НайтиСтроки(Новый Структура("СлужебныйНомерСтроки",Сч),Истина).Количество() <> 0  Цикл
			Сч = Сч + 1;	
		КонецЦикла; 
		
		СлужебныйНомерСтроки = Сч;
		
		СтрокаРодителя = ТекСтрокаДеревоРеквизитов.РодительСтрока;
		Если НЕ ПустаяСтрока(СтрокаРодителя) Тогда
			СтрокаРодителя = СтрокаРодителя + ".";
		КонецЕсли; 
	Иначе
		ТекСтрокаДеревоРеквизитов = ДеревоРеквизитов;
		СтрокаРодителя = "";
	КонецЕсли; 
	
	ТекТип = Метаданные.НайтиПоПолномуИмени(ОписаниеТипа);
	
	Если НЕ ТекТип=Неопределено Тогда 
		Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
		
		КС = Новый КвалификаторыСтроки(20);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
		
		КД = Новый КвалификаторыДаты();
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповД = Новый ОписаниеТипов(Массив, , КД);
		
		//Ссылка
		Массив = Новый Массив;
		МассивВыборкиРеквизитов=Новый Массив;
		
		ТипЗначения = Лев(ОписаниеТипа,Найти(ОписаниеТипа,".")-1);
		
		Если Найти(ВРег(ТипЗначения),"РЕГИСТР")=0 Тогда 
			Массив.Добавить(Тип(ТипЗначения+"Ссылка."+ТекТип.Имя));
			МассивВыборкиРеквизитов.Добавить("Реквизиты");
			
			НоваяСтрока = ТекСтрокаДеревоРеквизитов.Строки.Добавить();
			НоваяСтрока.ТипЗначения = ТипЗначения;
			ОписаниеТипов = Новый ОписаниеТипов(Массив);
			НоваяСтрока.ОписаниеТиповРеквизита = ОписаниеТипов; 
			НоваяСтрока.РеквизитДокумента = "Ссылка";
			НоваяСтрока.РеквизитДокументаИмя = "Ссылка";
			НоваяСтрока.ТипЗначенияКартинка = КартинкаПоТипуЗначений(НоваяСтрока.ТипЗначения);
			НоваяСтрока.РодительСтрока = СтрокаРодителя + РеквизитДокументаИмя;
			НоваяСтрока.СлужебныйНомерСтроки = СлужебныйНомерСтроки;
			
			СлужебныйНомерСтроки = СлужебныйНомерСтроки + 1;
			
			//Номер или Код, смотря что это за объект
			Если Лев(ОписаниеТипа,Найти(ОписаниеТипа,".")-1) = "Документ" Тогда
				Реквизит = "Номер";
			Иначе
				Реквизит = "Код";
			КонецЕсли; 
			
			НоваяСтрока = ТекСтрокаДеревоРеквизитов.Строки.Добавить();
			НоваяСтрока.ТипЗначения = "Строка";
			НоваяСтрока.РеквизитДокумента = Реквизит;
			НоваяСтрока.РеквизитДокументаИмя = Реквизит;
			НоваяСтрока.ОписаниеТиповРеквизита = ОписаниеТиповС; 
			НоваяСтрока.ТипЗначенияКартинка = КартинкаПоТипуЗначений(НоваяСтрока.ТипЗначения);
			НоваяСтрока.РодительСтрока = СтрокаРодителя + РеквизитДокументаИмя;	
			НоваяСтрока.СлужебныйНомерСтроки = СлужебныйНомерСтроки;
			
			СлужебныйНомерСтроки = СлужебныйНомерСтроки + 1;
			
			НоваяСтрока = ТекСтрокаДеревоРеквизитов.Строки.Добавить();
			НоваяСтрока.ТипЗначения = "Строка";
			НоваяСтрока.РеквизитДокумента = "Наименование";
			НоваяСтрока.РеквизитДокументаИмя = "Наименование";
			НоваяСтрока.ОписаниеТиповРеквизита = ОписаниеТиповС; 
			НоваяСтрока.ТипЗначенияКартинка = КартинкаПоТипуЗначений(НоваяСтрока.ТипЗначения);
			НоваяСтрока.РодительСтрока = СтрокаРодителя + РеквизитДокументаИмя;	
			НоваяСтрока.СлужебныйНомерСтроки = СлужебныйНомерСтроки;
			
			СлужебныйНомерСтроки = СлужебныйНомерСтроки + 1;
			
		Иначе
			Массив.Добавить(Метаданные["РегистрыСведений"]["Цены"]);
			МассивВыборкиРеквизитов.Добавить("Измерения");
			МассивВыборкиРеквизитов.Добавить("Ресурсы");
			МассивВыборкиРеквизитов.Добавить("Реквизиты");
		КонецЕсли;
		
		//Дата
		Если Лев(ОписаниеТипа,Найти(ОписаниеТипа,".")-1) = "Документ" Тогда
			НоваяСтрока = ТекСтрокаДеревоРеквизитов.Строки.Добавить();
			НоваяСтрока.ТипЗначения = "Дата";
			НоваяСтрока.РеквизитДокумента = "Дата";
			НоваяСтрока.РеквизитДокументаИмя = "Дата";
			НоваяСтрока.ОписаниеТиповРеквизита = ОписаниеТиповД; 
			НоваяСтрока.ТипЗначенияКартинка = КартинкаПоТипуЗначений(НоваяСтрока.ТипЗначения);
			НоваяСтрока.РодительСтрока = СтрокаРодителя + РеквизитДокументаИмя;
			НоваяСтрока.СлужебныйНомерСтроки = СлужебныйНомерСтроки;
			
			СлужебныйНомерСтроки = СлужебныйНомерСтроки + 1;
		КонецЕсли; 
		
		//Ну и общие реквизиты реквизиты
		Для каждого ТекРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			НашНайденныйОбъект = ТекРеквизит.Состав.Найти(ТекТип);
			Если НашНайденныйОбъект.Использование = Использовать  Тогда
				//Если реквизит используется в документе, тогда записываем его в дерево
				Если НЕ ТекРеквизит.ИспользованиеРазделенияДанных=Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				Если ПравоДоступа("Просмотр",ТекРеквизит) Тогда 
					Если РеквизитПоОпциямДоступен(СписокФункциональныхОпций,ТекРеквизит) Тогда 
						НоваяСтрока = ТекСтрокаДеревоРеквизитов.Строки.Добавить();
						НоваяСтрока.РодительСтрока = СтрокаРодителя + РеквизитДокументаИмя;
						ЗаписатьНовуюСтроку(НоваяСтрока,ТекРеквизит,СлужебныйНомерСтроки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
		
		//Выбираем для выбранного документа все реквизиты и заполняем наше дерево реквизитов
		для Каждого ТипРеквизита Из МассивВыборкиРеквизитов Цикл 
			Для каждого ТекРеквизит Из ТекТип[ТипРеквизита] Цикл
				//ТекТипСтрока = ТипОбъектаМетаданных(ТекРеквизит.Тип);
				Если ПравоДоступа("Просмотр",ТекРеквизит) Тогда 
					Если РеквизитПоОпциямДоступен(СписокФункциональныхОпций,ТекРеквизит) Тогда 
						НоваяСтрока = ТекСтрокаДеревоРеквизитов.Строки.Добавить();
						НоваяСтрока.РодительСтрока = СтрокаРодителя + РеквизитДокументаИмя;	
						
						ЗаписатьНовуюСтроку(НоваяСтрока,ТекРеквизит,СлужебныйНомерСтроки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//ТАБЛИЧНЫЕ ЧАСТИ игнорируем
	КонецЕсли;

	//Нежно засовываем реквизит обратно в форму
	ЭтаФорма.ДревоРеквизитыДокумента.ПолучитьЭлементы().Очистить();
	ЗначениеВРеквизитФормы(ДеревоРеквизитов,"ДревоРеквизитыДокумента");
КонецПроцедуры

&НаКлиенте
Процедура ДревоРеквизитыДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.КонтекстноеМеню.Имя = "ДревоРеквизитыДокументаСортировкаКонтекстноеМеню" Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные.СортировкаЧисло = 0 Тогда
			ТекДанные.Сортировка = БиблиотекаКартинок.ПереместитьВниз;
			ТекДанные.СортировкаЧисло = 1;
		ИначеЕсли ТекДанные.СортировкаЧисло = 1 Тогда  
			ТекДанные.Сортировка = БиблиотекаКартинок.ПереместитьВверх;
			ТекДанные.СортировкаЧисло = 2;
		Иначе
			ТекДанные.Сортировка = Новый Картинка;
			ТекДанные.СортировкаЧисло = 0;
		КонецЕсли;
	ИначеЕсли Поле.КонтекстноеМеню.Имя = "ДревоРеквизитыДокументаРеквизитДокументаКонтекстноеМеню" Тогда 
		Если Элемент.ТекущиеДанные.ФлМожноРазвернуть Тогда
			Развернуть("");
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	ТекущаяСтрокаДерева=Элементы.ДревоРеквизитыДокумента.ТекущаяСтрока;	
	ТекущиеДанные = Элементы.ДревоРеквизитыДокумента.ТекущиеДанные;
	ТекущиеДанные.ФлМожноРазвернуть = Ложь;
	ОписаниеТипаСтрока = ТипОбъектаМетаданных(ТекущиеДанные.ОписаниеТиповРеквизита,1);
	
	ИндексПервойСтрокиДо = ЭтаФорма.ДревоРеквизитыДокумента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Если ОписаниеТипаСтрока = "Составной" Тогда
		//делаем список значений, для выбора типа
		СписокДляВыбора = Новый СписокЗначений;
		Для каждого ТекТип Из ТекущиеДанные.ОписаниеТиповРеквизита.Типы() Цикл
			ОписаниеТипаСтрока = ТипОбъектаМетаданных(ТекТип,1);
			СимволТочки = Найти(ОписаниеТипаСтрока,".");
			Если СимволТочки <> 0 Тогда
				ОписаниеТипаНазвание = Сред(ОписаниеТипаСтрока,СимволТочки + 1);
			Иначе
				ОписаниеТипаНазвание = ОписаниеТипаСтрока;
			КонецЕсли; 
			СписокДляВыбора.Добавить(ОписаниеТипаСтрока,ОписаниеТипаНазвание);
		КонецЦикла; 
		
		//Выбираем тип
		ВыбранныйТип = СписокДляВыбора.ВыбратьЭлемент("Выберите тип значения");
		Если ВыбранныйТип = Неопределено Тогда Возврат КонецЕсли; 
		ВыбратьРеквизиты(ВыбранныйТип.Значение,ТекущиеДанные.РеквизитДокументаИмя,ТекущиеДанные.СлужебныйНомерСтроки);
	Иначе
		ВыбратьРеквизиты(ОписаниеТипаСтрока,ТекущиеДанные.РеквизитДокументаИмя,ТекущиеДанные.СлужебныйНомерСтроки);
	КонецЕсли;
	ИндексПервойСтрокиПосле = ЭтаФорма.ДревоРеквизитыДокумента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Элементы.ДревоРеквизитыДокумента.ТекущаяСтрока = ТекущаяСтрокаДерева+ИндексПервойСтрокиПосле-ИндексПервойСтрокиДо;
КонецПроцедуры

&НаКлиенте
Процедура ДревоРеквизитыДокументаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДревоРеквизитыДокументаПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоГоризонтальПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВертикальПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПолеСлеваПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПолеСправаПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПолеСверхуПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПолеСнизуПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура РазмерЭтикеткиШиринаММПриИзменении(Элемент)
	РасчитатьПоля();
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура РазмерЭтикеткиВысотаММПриИзменении(Элемент)
	РасчитатьПоля();
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьПоля()
	ОбщаяШиринаЭтикеток=Объект.РазмерЭтикеткиШиринаММ*Объект.КоличествоГоризонталь;
	ОбщаяВысотаЭтикеток=Объект.РазмерЭтикеткиВысотаММ*Объект.КоличествоВертикаль;
	ПоляВертикаль=(Объект.ФорматБумагиШирина-ОбщаяШиринаЭтикеток)/2;
	ПоляГоризонт=(Объект.ФорматБумагиВысота-ОбщаяВысотаЭтикеток)/2;
	Объект.СтраницаПолеСверху=Макс(ПоляГоризонт,1);
	Объект.СтраницаПолеСнизу=Макс(ПоляГоризонт,1);
	Объект.СтраницаПолеСправа=ПоляВертикаль;
	Объект.СтраницаПолеСлева=ПоляВертикаль;
КонецПроцедуры

&НаКлиенте
Процедура ФорматБумагиШиринаПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура ФорматБумагиВысотаПриИзменении(Элемент)
	ОтрисоватьШаблонЛиста(МакетЭтикетки);
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьШаблонЛиста(ТабДокЭтикетки, ПоМакетуЭтикетки=Неопределено)
	ОтрисоватьШаблонЭтикетки(ТабДокЭтикетки,ПоМакетуЭтикетки);
	ОтрисоватьПримерЭтикетки(ПримерЭтикетки);
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьШаблонЭтикетки(ТабДок,текущийМакет=Неопределено)
	ВсегоЭтикеток=Объект.КоличествоВертикаль*Объект.КоличествоГоризонталь;
	
	ТабДок.Очистить();
	
	ВысотаЭтикетки=(Объект.ФорматБумагиВысота-(Объект.СтраницаПолеСверху+Объект.СтраницаПолеСнизу))/Объект.КоличествоВертикаль;
	Объект.РазмерЭтикеткиВысотаММ=ВысотаЭтикетки;
	ШиринаЭтикетки=(Объект.ФорматБумагиШирина-(Объект.СтраницаПолеСлева+Объект.СтраницаПолеСправа))/Объект.КоличествоГоризонталь;
	Объект.РазмерЭтикеткиШиринаММ=ШиринаЭтикетки;
	
	Если текущийМакет=Неопределено Тогда 
		МакетПустышка=РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетЭтикеткиКонструктор");
	Иначе
		МакетПустышка=текущийМакет;
	КонецЕсли;
	
	Если НЕ текущийМакет=Неопределено Тогда 
		ЛевоВерх=текущийМакет.Область(1,1,1,1);
		СеткиШаблонаВысотаПТ=ЛевоВерх.ВысотаСтроки;
		СеткиШаблонаШиринаПТ=ЛевоВерх.ШиринаКолонки;
	КонецЕсли;
	
	Если текущийМакет=Неопределено Тогда 
		тмпИмяОбласти="Лист";
	Иначе
		тмпИмяОбласти="Этикетка";
	КонецЕсли;
	
	ОбластьВесьЛист=МакетПустышка.ПолучитьОбласть(тмпИмяОбласти);
	
	ВысотаСтрокиПТ=СеткиШаблонаВысотаПТ;
	ШиринаКолонкиПТ=СеткиШаблонаШиринаПТ;
	ОбластьВесьЛист.Области[тмпИмяОбласти].ВысотаСтроки=ВысотаСтрокиПТ;//5;
	ОбластьВесьЛист.Области[тмпИмяОбласти].ШиринаКолонки=ШиринаКолонкиПТ;//1;

	ТабДок=ОбластьВесьЛист;
	
	Если ТабДок.Области.Найти("Этикетка")=Неопределено И текущийМакет=Неопределено Тогда 
		ЭтикеткаКолонок=Окр(ШиринаЭтикетки/(_1пт_ширина_мм*ШиринаКолонкиПТ),0)-1;
		ЭтикеткаСтрок=Окр(ВысотаЭтикетки/(_1пт_высота_мм*ВысотаСтрокиПТ),0);
		
		МинимальныйШагПтШирина=0.125;
		РеальнаяШирина_мм=(ЭтикеткаКолонок+1)*_1пт_ширина_мм*ШиринаКолонкиПТ;
		НужноДобавить_мм=ШиринаЭтикетки-РеальнаяШирина_мм;
		НужноДобавить_пт=((НужноДобавить_мм/_1пт_ширина_мм)-(НужноДобавить_мм/_1пт_ширина_мм)%МинимальныйШагПтШирина);

		МинимальныйШагПтВысота=0.125*5;
		РеальнаяВысота_мм=(ЭтикеткаСтрок)*_1пт_высота_мм*ВысотаСтрокиПТ;
		НужноДобавить_мм_высота=ВысотаЭтикетки-РеальнаяВысота_мм;
		НужноДобавить_пт_высота=((НужноДобавить_мм_высота/_1пт_высота_мм)-(НужноДобавить_мм_высота/_1пт_высота_мм)%МинимальныйШагПтВысота);
		
		ЭтикеткаЛево	=5;
		ЭтикеткаВерх	=5;
		ЭтикеткаНиз=ЭтикеткаВерх+ЭтикеткаСтрок-1;
		ЭтикеткаПраво=ЭтикеткаЛево+ЭтикеткаКолонок;
		
		//Скорректируем последнюю колонку
		ТабДок.область("C"+ЭтикеткаПраво).ШиринаКолонки=ТабДок.область("C"+ЭтикеткаПраво).ШиринаКолонки+НужноДобавить_пт;
		ТабДок.область("R"+ЭтикеткаНиз).ВысотаСтроки=ТабДок.область("R"+ЭтикеткаНиз).ВысотаСтроки+НужноДобавить_пт_высота;
		
		АдресОбласти="R"+ЭтикеткаВерх+"C"+ЭтикеткаЛево+":"+"R"+(ЭтикеткаНиз)+"C"+(ЭтикеткаПраво);
		
		ЛинияОбводки=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1,Ложь);
		НетЛинии=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,1,Ложь);
		
		ТабДок.Область(ЭтикеткаВерх,ЭтикеткаЛево-1,ЭтикеткаНиз,ЭтикеткаЛево-1).Обвести(НетЛинии,НетЛинии,ЛинияОбводки,НетЛинии);//обводим левый борт снаружи справа
		ТабДок.Область(ЭтикеткаВерх-1,ЭтикеткаЛево,ЭтикеткаВерх-1,ЭтикеткаПраво).Обвести(НетЛинии,НетЛинии,НетЛинии,ЛинияОбводки);//обводим снизу
		ТабДок.Область(ЭтикеткаВерх,ЭтикеткаПраво+1,ЭтикеткаНиз,ЭтикеткаПраво+1).Обвести(ЛинияОбводки,НетЛинии,НетЛинии,НетЛинии);//обводим слева
		ТабДок.Область(ЭтикеткаНиз+1,ЭтикеткаЛево,ЭтикеткаНиз+1,ЭтикеткаПраво).Обвести(НетЛинии,ЛинияОбводки,НетЛинии,НетЛинии);//обводим сверху
		ТабДок.Область(АдресОбласти).Имя="Этикетка";
	КонецЕсли;
	МакетЭтикетки=ТабДок;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьПримерЭтикетки(ТабДок)
	ТабДок.Очистить();
	Если МакетЭтикетки.Области.Количество()=0 Тогда Возврат; КонецЕсли;

	ЛинияОбводки=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, Ложь);

	ОбластьЭтикетки=МакетЭтикетки.ПолучитьОбласть("Этикетка");	
	ОбластьЭтикетки.Область("Этикетка").Обвести(ЛинияОбводки, ЛинияОбводки, ЛинияОбводки, ЛинияОбводки);

	ПараметрыОбласти=ПолучитьПараметрыОбласти(ОбластьЭтикетки);

	ИмяОбластиШтрихКода=ИмяОбластиШтрихКода(ОбластьЭтикетки.Области);
	Если ЗначениеЗаполнено(ИмяОбластиШтрихКода) Тогда 
		ОбластьШтрихКода=ОбластьЭтикетки.Области.Найти(ИмяОбластиШтрихКода);
		СтандарныйШрифт=ОбластьШтрихКода.Шрифт;
	КонецЕсли;
	
	Для Каждого Область Из ОбластьЭтикетки.Области Цикл 
		Область.Примечание.Текст="";
	КонецЦикла;

	ЗначенияПараметровСоответствие=ВернутьЗначенияПараметров(ПараметрыОбласти);
	
	Для Каждого текСоответствие из ЗначенияПараметровСоответствие Цикл 
		Если ЗначениеЗаполнено(ИмяОбластиШтрихКода) Тогда 
			Если текСоответствие.ТипШтрихкода=ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда 
				ОбластьШтрихКода.Шрифт=Новый Шрифт(ОбластьШтрихКода.Шрифт, "Code128", СтандарныйШрифт.Размер-6);
			ИначеЕсли НЕ СтандарныйШрифт=Неопределено Тогда 
				ОбластьШтрихКода.Шрифт=Новый Шрифт(СтандарныйШрифт);
			КонецЕсли;
		КонецЕсли;		
		ОбластьЭтикетки.Параметры.Заполнить(текСоответствие);
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЭтикетки);	
КонецПроцедуры

&НаСервере
Функция ВернутьЗначенияПараметров(массивПараметров)
	Если массивПараметров.Количество()=0 Тогда Возврат Новый Соответствие; КонецЕсли;
	массивПараметров.Вставить(0,Новый Структура("ИмяПараметра,ИмяПараметраДляЗапроса,ИсточникЗначения","НомерСтроки","НомерСтроки",""));
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Объект.Товары.Выгрузить());
	
	Выборка1="";Выборка2="";Выборка3="";КлючиПараметров="";
	МассивСсылочныхТипов=Новый Массив;
	МетаТовары=РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти.Товары;
	Для Каждого РеквизитТЧ Из МетаТовары.Реквизиты Цикл 
		ЭтоСсылочныйТип=Ложь;
		Для Каждого ТипРеквизита Из РеквизитТЧ.Тип.Типы() Цикл 
			ЭтоСсылочныйТип=ОбщегоНазначения.ЭтоСсылка(ТипРеквизита);
			Если ЭтоСсылочныйТип И Тип("СправочникСсылка.Номенклатура")=ТипРеквизита Тогда 
				МассивСсылочныхТипов.Добавить(?(Тип("СправочникСсылка.Номенклатура")=ТипРеквизита,ВРег(РеквизитТЧ.Имя),РеквизитТЧ.Имя));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоСсылочныйТип Тогда 
			ТипПолный = Метаданные.НайтиПоТипу(ТипРеквизита).ПолноеИмя();
			ТипБазовый = Лев(ТипПолный,Найти(ТипПолный,".")-1);

			СсылкаМета=Новый(ТипРеквизита);
			//Выборка1=Выборка1+?(ЗначениеЗаполнено(Выборка1),","+Символы.ПС,"")+"Выразить (ТабличнаяЧасть."+РеквизитТЧ.Имя+" КАК Справочник."+ТипРеквизита+") КАК "+РеквизитТЧ.Имя;
			Выборка1=Выборка1+?(ЗначениеЗаполнено(Выборка1),","+Символы.ПС,"")+"Выразить (ТабличнаяЧасть."+РеквизитТЧ.Имя+" КАК "+ТипБазовый+"."+СсылкаМета.Метаданные().Имя+") КАК "+РеквизитТЧ.Имя;
		Иначе
			Выборка1=Выборка1+?(ЗначениеЗаполнено(Выборка1),","+Символы.ПС,"")+"ТабличнаяЧасть."+РеквизитТЧ.Имя+" КАК "+РеквизитТЧ.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМассива Из массивПараметров Цикл 
		Если НЕ Найти(Выборка2,СтрЗаменить(ЭлементМассива.ИмяПараметраДляЗапроса,".","_"))=0 Тогда 
			//если параметр повторяется, то игнорируем его
			Продолжить;
		КонецЕсли;
		Выборка2=Выборка2+?(ЗначениеЗаполнено(Выборка2),","+Символы.ПС,"")+"ДанныеТЧ"+"."+СтрЗаменить(ЭлементМассива.ИмяПараметраДляЗапроса,"_",".")+" КАК "+СтрЗаменить(ЭлементМассива.ИмяПараметраДляЗапроса,".","_");
		КлючиПараметров=КлючиПараметров+?(ЗначениеЗаполнено(КлючиПараметров),", ","")+СтрЗаменить(ЭлементМассива.ИмяПараметраДляЗапроса,".","_");
	КонецЦикла;
	КлючиПараметров=КлючиПараметров+?(ЗначениеЗаполнено(КлючиПараметров),", ","")+"Количество";
	КлючиПараметров=КлючиПараметров+?(ЗначениеЗаполнено(КлючиПараметров),", ","")+"ТипШтрихкода";
	сч=0;КлючСтруктураТекст="";
	Для Каждого ЭлементМассива Из МассивСсылочныхТипов Цикл 
		сч=сч+1;
		Выборка3=Выборка3+?(ЗначениеЗаполнено(Выборка3),","+Символы.ПС,"")+"ДанныеТЧ."+ЭлементМассива+".Ссылка КАК Ссылка"+сч+
		?(ЭлементМассива=ВРег(ЭлементМассива),"",ЭлементМассива);
	КонецЦикла;
	Выборка3=Выборка3+?(ЗначениеЗаполнено(Выборка3),","+Символы.ПС,"")+"ДанныеТЧ.Количество"+" КАК Количество";
	Выборка3=Выборка3+?(ЗначениеЗаполнено(Выборка3),","+Символы.ПС,"")+"ДанныеТЧ.ТипШтрихкода"+" КАК ТипШтрихкода";
	
	ТекстЗапроса1="ВЫБРАТЬ ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,"+Символы.ПС+Выборка1+" ПОМЕСТИТЬ ДанныеТЧ"+" ИЗ "+"&ТабличнаяЧасть КАК ТабличнаяЧасть;";
	ТекстЗапроса2="ВЫБРАТЬ "+Выборка2+Символы.ПС+?(ЗначениеЗаполнено(Выборка3),","+Символы.ПС,"")+Выборка3+" ИЗ ДанныеТЧ КАК ДанныеТЧ";

	Запрос.Текст=ТекстЗапроса1+Символы.ПС+ТекстЗапроса2;
	Запрос.Текст=Запрос.Текст+Символы.ПС+"УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	МассивСтруктурыПараметров=Новый Массив;

	Выборка=Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтруктураПараметров=Новый Структура(КлючиПараметров);
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		МассивСтруктурыПараметров.Добавить(СтруктураПараметров);
	КонецЦикла;
	Возврат МассивСтруктурыПараметров;
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьСтрокуШаблонаЯчейки(ТекстШаблона)
	СтрокаШаблона=СтрЗаменить(СокрЛП(ТекстШаблона),";"," ");
	СтрокаШаблона=СтрЗаменить(СокрЛП(СтрокаШаблона),"[","");
	СтрокаШаблона=СтрЗаменить(СокрЛП(СтрокаШаблона),"]",";");
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаШаблона,";",Истина);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОбласти(текОбласть)
	МассивПараметров=Новый Массив;
	Для Каждого Область Из текОбласть.Области Цикл 
		ЭтоШаблон=Найти(СокрЛП(Область.Текст),"[")=1 И Сред(СокрЛП(Область.Текст),СтрДлина(СокрЛП(Область.Текст)),1)="]";
		Если НЕ Область.Параметр=Неопределено Или ЭтоШаблон Тогда 
			СтруктураПараметров=Новый Структура;
			ИмяОбласти=Область.Имя;
			Источник=Область.Примечание.Текст;
			Если НЕ ЭтоШаблон Тогда 
				ИмяПараметра=Область.Параметр;
				СтруктураПараметров.Вставить("ИмяПараметра",СтрЗаменить(ИмяПараметра,"_",""));
				СтруктураПараметров.Вставить("ИмяПараметраДляЗапроса",СтрЗаменить(ИмяПараметра,"_","."));
				СтруктураПараметров.Вставить("ИсточникЗначения",""+Источник);
				МассивПараметров.Добавить(СтруктураПараметров);
			Иначе
				МассивПараметровИзШаблона=РазобратьСтрокуШаблонаЯчейки(Область.Текст);
				//ИмяПараметра=СтрЗаменить(СокрЛП(Область.Текст),"[","");
				//ИмяПараметра=СтрЗаменить(СокрЛП(ИмяПараметра),"]","");
				Для Каждого ЭлементМассива Из МассивПараметровИзШаблона Цикл 
					СтруктураПараметров=Новый Структура;
					ИмяПараметра=СокрЛП(ЭлементМассива);
					СтруктураПараметров.Вставить("ИмяПараметра",СтрЗаменить(ИмяПараметра,"_",""));
					СтруктураПараметров.Вставить("ИмяПараметраДляЗапроса",СтрЗаменить(ИмяПараметра,"_","."));
					СтруктураПараметров.Вставить("ИсточникЗначения",""+Источник);
					МассивПараметров.Добавить(СтруктураПараметров);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивПараметров;
КонецФункции

&НаКлиенте
Функция ВернутьРодительскуюОбласть(ТабДок,Потомок)
	Области=ТабДок.Области;
	Для Каждого Область Из Области Цикл 
		Если Найти(НРег(Область.Имя),"лист")=0 И Найти(НРег(Область.Имя),"этикетка")=0 Тогда 
			Если Потомок.Лево>=Область.Лево И Потомок.Верх>=Область.Верх 
				И Потомок.Право<=Область.Право И Потомок.Низ<=Область.Низ Тогда 
				Возврат Область;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Потомок;
КонецФункции

&НаКлиенте
Процедура ДревоРеквизитыДокументаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДревоРеквизитыДокументаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиПриИзменении(Элемент)
	ОтрисоватьПримерЭтикетки(ПримерЭтикетки);
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиОбъеденитьЯчейки(Команда)
	Если НЕ ТипЗнч(Команда)=Тип("Структура") Тогда 
		ВыделенныхОбластей=МакетЭтикетки.ВыделенныеОбласти.Количество();
		Если ВыделенныхОбластей=0 Тогда Возврат; КонецЕсли;

		//ЛинияОбводки=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная,1,Ложь);
		ЛинияОбводки=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,1,Ложь);
		Для ъ=0 По ВыделенныхОбластей-1 Цикл 
			Область=МакетЭтикетки.ВыделенныеОбласти.Получить(ъ);
			Если Область.Лево<ЭтикеткаЛево Или Область.Право>ЭтикеткаПраво Или Область.Верх<ЭтикеткаВерх Или Область.Низ>ЭтикеткаНиз Тогда 
				//объеденяем только ту область, которая входит в этикетку
				Область=МакетЭтикетки.Область(Макс(Область.Верх,ЭтикеткаВерх),Макс(Область.Лево,ЭтикеткаЛево),Мин(Область.Низ,ЭтикеткаНиз),Мин(Область.Право,ЭтикеткаПраво));
				//если выделенная область вся за пределами этикетки, то ничего не делаем
				Если Область.Лево<ЭтикеткаЛево Или Область.Право>ЭтикеткаПраво Или Область.Верх<ЭтикеткаВерх Или Область.Низ>ЭтикеткаНиз Тогда 
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Область.Объединить();
			сч=1;
			ИмяОбласти="Область"+(МакетЭтикетки.Области.Количество()+сч);
			Пока НЕ МакетЭтикетки.Области.Найти(ИмяОбласти)=Неопределено Цикл 
				сч=сч+1;
				ИмяОбласти="Область"+(МакетЭтикетки.Области.Количество()+сч);
			КонецЦикла;
			Область.Имя=ИмяОбласти;
			Область.Обвести(ЛинияОбводки,ЛинияОбводки,ЛинияОбводки,ЛинияОбводки);
		КонецЦикла;
	Иначе
		Область=МакетЭтикетки.Область(Команда.Верх,Команда.Лево,Команда.Низ,Команда.Право);
		Область.Объединить();
		Область.Имя="Область"+(МакетЭтикетки.Области.Количество()+1);
		Область.Обвести(ЛинияОбводки,ЛинияОбводки,ЛинияОбводки,ЛинияОбводки);
	КонецЕсли;
	Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
	ЭтаФорма.Модифицированность=Истина;
	ОтрисоватьПримерЭтикетки(ПримерЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиРазбитьЯчейки(Команда)
	ВыделенныхОбластей=МакетЭтикетки.ВыделенныеОбласти.Количество();
	Если ВыделенныхОбластей=0 Тогда Возврат; КонецЕсли;

	ЭтаФорма.Модифицированность=Истина;
	ЛинияОбводки=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии,1,Ложь);
	Для ъ=0 По ВыделенныхОбластей-1 Цикл 
		Область=МакетЭтикетки.ВыделенныеОбласти.Получить(ъ);
		Если Найти(НРег(Область.Имя),"область")=0 Тогда 
			Продолжить;
		КонецЕсли;
		Область.Очистить();
		Область.Разъединить();
		Область.Имя="";
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка=Ложь;
	//Проверяем, возможна ли вставка в область, над которой находится курсор
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбластьЭтикеткиСКлиента(МакетЭтикетки,ИмяОбласти)
	Возврат МакетЭтикетки.ПолучитьОбласть(ИмяОбласти);
КонецФункции

&НаКлиенте
Процедура МакетЭтикеткиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка=Ложь;
	Сцепить=ПараметрыПеретаскивания.ДопустимыеДействия=ДопустимыеДействияПеретаскивания.Копирование;
	текЗначение=ПараметрыПеретаскивания.Значение;
	Если текЗначение.Количество()=0 Тогда Возврат; КонецЕсли;

	ЭлементМассива=текЗначение[0];
	РеквизитСправочника=?(ЗначениеЗаполнено(ЭлементМассива.РеквизитДокументаИмя),ЭлементМассива.РеквизитДокументаИмя,ЭлементМассива.РеквизитДокумента);
	
	Если Область.Лево<ЭтикеткаЛево Или Область.Право>ЭтикеткаПраво Или Область.Верх<ЭтикеткаВерх Или Область.Низ>ЭтикеткаНиз Тогда 
		ПоказатьПредупреждение(,"нельзя выходить за пределы этикетки!",,"ВНИМАНИЕ");
		Возврат;
	КонецЕсли;
	
	Если НЕ Найти(ПараметрыПеретаскивания.Значение[0].РеквизитДокументаИмя,".")=0 Тогда 
		Возврат;
	КонецЕсли;

	ОбластьРодитель=ВернутьРодительскуюОбласть(МакетЭтикетки,Область);
	Если Найти(НРег(ОбластьРодитель.Имя),"область")=0 Тогда 
		КоординатыСтруктура=Новый Структура("Лево,Верх,Право,Низ",Область.Лево,Область.Верх,Область.Право,Область.Низ);
		МакетЭтикеткиОбъеденитьЯчейки(КоординатыСтруктура);
		ОбластьРодитель=ВернутьРодительскуюОбласть(МакетЭтикетки,Область);
	КонецЕсли;
	
	МестоНовогоРасположения=ОбластьРодитель.Имя;
	
	МакетЭтикетки.Область(МестоНовогоРасположения).Примечание.Текст=ЭлементМассива.РодительСтрока;//источник данных
	МакетЭтикетки.Область(МестоНовогоРасположения).РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ИмяПараметраВставки=СтрЗаменить(ЭлементМассива.РодительСтрока,".","_")+?(ЗначениеЗаполнено(ЭлементМассива.РодительСтрока),"_","")+?(ЗначениеЗаполнено(ЭлементМассива.РеквизитДокументаИмя),ЭлементМассива.РеквизитДокументаИмя,РеквизитСправочника);
	Если Не Сцепить Тогда 
		МакетЭтикетки.Область(МестоНовогоРасположения).Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетЭтикетки.Область(МестоНовогоРасположения).Параметр=ИмяПараметраВставки;
	Иначе
		МакетЭтикетки.Область(МестоНовогоРасположения).Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		Если ЗначениеЗаполнено(МакетЭтикетки.Область(МестоНовогоРасположения).Текст) Тогда 
			Если Найти(МакетЭтикетки.Область(МестоНовогоРасположения).Текст,"]")=0 Тогда 
				МакетЭтикетки.Область(МестоНовогоРасположения).Текст="["+СокрЛП(МакетЭтикетки.Область(МестоНовогоРасположения).Текст)+"]";
			КонецЕсли;
			МакетЭтикетки.Область(МестоНовогоРасположения).Текст=СокрЛП(МакетЭтикетки.Область(МестоНовогоРасположения).Текст)+" "+"["+ИмяПараметраВставки+"]";
		Иначе
			МакетЭтикетки.Область(МестоНовогоРасположения).Текст="["+ИмяПараметраВставки+"]";
		КонецЕсли;
	КонецЕсли;
	Если Найти(ВРег(МакетЭтикетки.Область(МестоНовогоРасположения).Параметр),"ЦЕНА")=0 Тогда 
		МакетЭтикетки.Область(МестоНовогоРасположения).Формат="ЧН=Ноль; ДФ=dd.MM.yyyy";
	Иначе
		МакетЭтикетки.Область(МестоНовогоРасположения).Формат="ЧДЦ=2; ЧН=Ноль";
		МакетЭтикетки.Область(МестоНовогоРасположения).РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Забивать;
		
		Если НЕ Найти(ВРег(МакетЭтикетки.Область(МестоНовогоРасположения).Параметр),"СТАРАЯ")=0 Тогда 
			Шрифт=Новый Шрифт(МакетЭтикетки.Область(МестоНовогоРасположения).Шрифт,,,,,,Истина);
			МакетЭтикетки.Область(МестоНовогоРасположения).Шрифт=Шрифт;
		КонецЕсли;
		
	КонецЕсли;
	Если НЕ найти(ВРег(МакетЭтикетки.Область(МестоНовогоРасположения).Шрифт.Имя),"EAN")=0 И НЕ ВРег(РеквизитСправочника)="ШТРИХКОД" Тогда 
		ШрифтШК=Новый Шрифт("Arial",8);
		МакетЭтикетки.Область(МестоНовогоРасположения).Шрифт=ШрифтШК;
		МакетЭтикетки.Область(МестоНовогоРасположения).РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
	Если ВРег(РеквизитСправочника)="ШТРИХКОД" Тогда 
		ШрифтШК=Новый Шрифт("EanBwrP36Tt",24); //EanBwrP36xTt, EanP36Tt, EanP36xTt
		МакетЭтикетки.Область(МестоНовогоРасположения).Шрифт=ШрифтШК;
		МакетЭтикетки.Область(МестоНовогоРасположения).РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Забивать;
	КонецЕсли;
	ЭтаФорма.Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ШрифтВыравниваниеВерх(Команда)
	Для Каждого Область Из МакетЭтикетки.ВыделенныеОбласти Цикл 
		Область.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	ОтрисоватьПримерЭтикетки(ПримерЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура ШрифтВыравниваниеНиз(Команда)
	Для Каждого Область Из МакетЭтикетки.ВыделенныеОбласти Цикл 
		Область.ВертикальноеПоложение=ВертикальноеПоложение.Низ;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	ОтрисоватьПримерЭтикетки(ПримерЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура ШрифтВыравниваниеЦентр(Команда)
	Для Каждого Область Из МакетЭтикетки.ВыделенныеОбласти Цикл 
		Область.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
	КонецЦикла;
	ЭтаФорма.Модифицированность=Истина;
	ОтрисоватьПримерЭтикетки(ПримерЭтикетки);
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиПриИзмененииСодержимогоОбласти(Элемент, Область)
	й=1;
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	й=1;
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиПриАктивизацииОбласти(Элемент)
	ТекОбласть=Элемент.ТекущаяОбласть;
	_Высота_Строк=ТекОбласть.Низ-ТекОбласть.Верх+1; //строк
	_Ширина_Строк=ТекОбласть.Право-ТекОбласть.Лево+1;
	
	ПлюсШиринаДополнительнойКолонки=0;
	Если _ШиринаПТ=ТекОбласть.ШиринаКолонки Или _ШиринаПТ=0 Тогда 
		_ШиринаПТ=ТекОбласть.ШиринаКолонки;
	Иначе
		ПлюсШиринаДополнительнойКолонки=ТекОбласть.ШиринаКолонки-_ШиринаПТ;
	КонецЕсли;
	ПлюсВысотаДополнительнойСтроки=0;
	Если _ВысотаПТ=ТекОбласть.ВысотаСтроки Или _ВысотаПТ=0 Тогда 
		_ВысотаПТ=ТекОбласть.ВысотаСтроки;;
	Иначе
		ПлюсВысотаДополнительнойСтроки=ТекОбласть.ВысотаСтроки-_ВысотаПТ;
	КонецЕсли;
	
	РазмерВыделеннойОбластиВысота=(_Высота_Строк*_ВысотаПТ+ПлюсВысотаДополнительнойСтроки)*(_1пт_высота_мм);
	РазмерВыделеннойОбластиШирина=(_Ширина_Строк*_ШиринаПТ+ПлюсШиринаДополнительнойКолонки)*(_1пт_ширина_мм);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРазмерЯчейки(ИзменениеШирины)
	Если СеткиШаблонаШиринаПТ+ИзменениеШирины>2.25 Или СеткиШаблонаШиринаПТ+ИзменениеШирины<=0.375 Тогда
		Возврат;
	КонецЕсли;
	_ВысотаПТ=0;
	_ШиринаПТ=0;
	
	СеткиШаблонаШиринаПТ=СеткиШаблонаШиринаПТ+ИзменениеШирины;
	СеткиШаблонаВысотаПТ=СеткиШаблонаВысотаПТ+ИзменениеШирины*5;
	ОтрисоватьШаблонЭтикетки(МакетЭтикетки);
	СеткиШаблонаШиринаПТ=МакетЭтикетки.ТекущаяОбласть.ШиринаКолонки;
КонецПроцедуры

&НаКлиенте
Процедура СеткаЯчейкаУвеличить(Команда)
	ИзменениеШирины=0.125;
	ИзменитьРазмерЯчейки(ИзменениеШирины);
КонецПроцедуры

&НаКлиенте
Процедура СеткаЯчейкаУменьшить(Команда)
	ИзменениеШирины=-0.125;
	ИзменитьРазмерЯчейки(ИзменениеШирины);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьТаблицыСимволов_Code128()
	Возврат ГенераторШтрихкодовПовтИсп.ИнициализироватьТаблицыСимволов();
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьШК_Code128(СЗ_СимволыБарКода, ТЗ_НаборCodeC, ТЗ_НаборCodeB, Знач ВзялСтрокуДляШК)
	Возврат ГенераторШтрихкодов.ВернутьШК_Code128(СЗ_СимволыБарКода, ТЗ_НаборCodeC, ТЗ_НаборCodeB, ВзялСтрокуДляШК);
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьТаблицыСимволов_Code128_И_ВернутьШК_Code128(Знач ВзялСтрокуДляШК)
	таблицыДляРаботыШК=ИнициализироватьТаблицыСимволов_Code128();
	Возврат ГенераторШтрихкодов.ВернутьШК_Code128(таблицыДляРаботыШК.СЗ_СимволыБарКода,таблицыДляРаботыШК.ТЗ_НаборCodeC,таблицыДляРаботыШК.ТЗ_НаборCodeB,Строка(ВзялСтрокуДляШК));
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКонтрольнуюЦифру(Штрих)
	Штрих1=СокрЛП(Штрих);
	Если НЕ СтрДлина(Штрих1)=13 И НЕ СтрДлина(Штрих1)=8 Тогда
		Возврат "" 
	КонецЕсли; 
	
	Если СтрДлина(Штрих1)=13 Тогда 
		Четн = 0;
		Для Инд = 1 По 6 Цикл
			Четн = Четн + Сред(Штрих1,2*Инд,1);
		КонецЦикла;
		Четн = Четн * 3;
		
		Нечетн = 0;
		Для Инд = 1 По 6 Цикл
			Нечетн = Нечетн + Сред(Штрих1,2*Инд-1,1);
		КонецЦикла;
		
		КонтЦифра=(Четн+Нечетн)/10-Цел((Четн+Нечетн)/10);
		КонтЦифра=10-Цел(КонтЦифра*10);
		Если КонтЦифра = 10 Тогда
			КонтЦифра = 0;
		КонецЕсли;
	Иначе
		Четн = 0;
		Для Инд = 1 По 3 Цикл
			Четн = Четн + Число(Сред(Штрих1,2*Инд,1));
		КонецЦикла;
		
		Нечетн = 0;
		Для Инд = 1 По 4 Цикл
			Нечетн = Нечетн + Сред(Штрих1,2*Инд-1,1);
		КонецЦикла;
		Нечетн = Нечетн * 3;
		
		КонтЦифра=(Четн+Нечетн)/10-Цел((Четн+Нечетн)/10);
		КонтЦифра=10-Цел(КонтЦифра*10);
		Если КонтЦифра = 10	Тогда
			КонтЦифра = 0;
		КонецЕсли;
	КонецЕсли;
	Возврат  Строка(КонтЦифра) ;
КонецФункции

&НаСервереБезКонтекста
Функция NumberToUpperChar(Num)
	UpperCharSet = "ABCDEFGHIJ";
	Num = Число(Прав(Num,1));
	Стр = Сред(UpperCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция NumberToLowerChar(Num)
	LowerCharSet = "abcdefghij";
	Num = Число(Прав(Num,1));
	Стр = Сред(LowerCharSet, Num + 1, 1);
	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция EAN13CodeGenerate(код)
	Если НЕ ЗначениеЗаполнено(Код) Тогда Возврат ""; КонецЕсли;

	ПервыйФлаг = Число(Сред(код,1,1));
	левстр     = Сред(код,2,6);
	правстр    = Сред(код,8,6);
	
	правкод = "";
	Для Поз = 1 По 6 Цикл
		правкод = правкод + NumberToLowerChar(Сред(правстр,Поз,1));
	КонецЦикла;
	
	//  Формирование левой части кода зависит от значениа ПервыйФлаг
	Если ПервыйФлаг = 0 Тогда
		//    0           A  A  A  A  A
		левкод = "#!" + Лев(левстр,1)
		+ Сред(левстр,2,1)
		+ Сред(левстр,3,1)
		+ Сред(левстр,4,1)
		+ Сред(левстр,5,1)
		+ Сред(левстр,6,1);
	ИначеЕсли ПервыйФлаг = 1 Тогда
		//    1           A  A  B  A  B  B
		левкод = "$!"
		+ Лев(левстр,1)
		+ Сред(левстр,2,1)
		+ NumberToUpperChar(Сред(левстр,3,1))
		+ Сред(левстр,4,1)
		+ NumberToUpperChar(Сред(левстр,5,1))
		+ NumberToUpperChar(Сред(левстр,6,1));

	ИначеЕсли ПервыйФлаг = 2 Тогда
		//    2           A  A  B  B  A  B
		левкод = "%!"
		+ Лев(левстр,1)
		+ Сред(левстр,2,1)
		+ NumberToUpperChar(Сред(левстр,3,1))
		+ NumberToUpperChar(Сред(левстр,4,1))
		+ Сред(левстр,5,1)
		+ NumberToUpperChar(Сред(левстр,6,1));

	ИначеЕсли ПервыйФлаг = 3 Тогда
		//    3           A  A  B  B  B  A
		левкод = "&!"
		+ Лев(левстр,1)
		+ Сред(левстр,2,1)
		+ NumberToUpperChar(Сред(левстр,3,1))
		+ NumberToUpperChar(Сред(левстр,4,1))
		+ NumberToUpperChar(Сред(левстр,5,1))
		+ Сред(левстр,6,1);

	ИначеЕсли ПервыйФлаг = 4 Тогда
		//    4           A  B  A  A  B  B
		левкод = "'!"
		+ Лев(левстр,1)
		+ NumberToUpperChar(Сред(левстр,2,1))
		+ Сред(левстр,3,1)
		+ Сред(левстр,4,1)
		+ NumberToUpperChar(Сред(левстр,5,1))
		+ NumberToUpperChar(Сред(левстр,6,1));

	ИначеЕсли ПервыйФлаг = 5 Тогда
		//    5           A  B  B  A  A  B
		левкод = "(!"
		+ Лев(левстр,1)
		+ NumberToUpperChar(Сред(левстр,2,1))
		+ NumberToUpperChar(Сред(левстр,3,1))
		+ Сред(левстр,4,1)
		+ Сред(левстр,5,1)
		+ NumberToUpperChar(Сред(левстр,6,1));

	ИначеЕсли ПервыйФлаг = 6 Тогда
		//    6           A  B  B  B  A  A
		левкод = ")!"
		+ Лев(левстр,1)
		+ NumberToUpperChar(Сред(левстр,2,1))
		+ NumberToUpperChar(Сред(левстр,3,1))
		+ NumberToUpperChar(Сред(левстр,4,1))
		+ Сред(левстр,5,1)
		+ Сред(левстр,6,1);

	ИначеЕсли ПервыйФлаг = 7 Тогда
		//    7           A  B  A  B  A  B
		левкод = "*!"
		+ Лев(левстр,1)
		+ NumberToUpperChar(Сред(левстр,2,1))
		+ Сред(левстр,3,1)
		+ NumberToUpperChar(Сред(левстр,4,1))
		+ Сред(левстр,5,1)
		+ NumberToUpperChar(Сред(левстр,6,1));

	ИначеЕсли ПервыйФлаг = 8 Тогда
		//    8           A  B  A  B  B  A
		левкод = "+!"
		+ Лев(левстр,1)
		+ NumberToUpperChar(Сред(левстр,2,1))
		+ Сред(левстр,3,1)
		+ NumberToUpperChar(Сред(левстр,4,1))
		+ NumberToUpperChar(Сред(левстр,5,1))
		+ Сред(левстр,6,1);

	ИначеЕсли ПервыйФлаг = 9 Тогда
		//    9           A  B  B  A  B  A
		левкод = ",!"
		+ Лев(левстр,1)
		+ NumberToUpperChar(Сред(левстр,2,1))
		+ NumberToUpperChar(Сред(левстр,3,1))
		+ Сред(левстр,4,1)
		+ NumberToUpperChar(Сред(левстр,5,1))
		+ Сред(левстр,6,1);
	КонецЕсли;

	// Получение строки - результата
	Возврат левкод + "-" + правкод + "!";
КонецФункции

&НаСервереБезКонтекста
Функция EAN8CodeGenerate(код)
	Если НЕ ЗначениеЗаполнено(Код) Тогда Возврат ""; КонецЕсли;

	правстр    = Сред(код,1,4);
	левстр    = Сред(код,5,8);
	
	правкод = "";
	Для Поз = 1 По 4 Цикл
		правкод = правкод + NumberToLowerChar(Сред(левстр,Поз,1));
	КонецЦикла;
	
	левкод="";
	Для Поз = 1 По 4 Цикл
		левкод = левкод + (Сред(правстр,Поз,1));
	КонецЦикла;
	
	// Получение строки - результата
	Возврат "!"+левкод + "-" + правкод + "!";
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьСервер(ТабДок)
	ТабДок.Очистить();
	Если МакетЭтикетки.Области.Количество()=0 Тогда Возврат; КонецЕсли;
	
	ОбластьЭтикетки=МакетЭтикетки.ПолучитьОбласть("Этикетка");
	ЛинияОбводки=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная,1,Ложь);
	ОбластьЭтикетки.Область("Этикетка").Обвести(ЛинияОбводки,ЛинияОбводки,ЛинияОбводки,ЛинияОбводки);
	ПараметрыОбласти=ПолучитьПараметрыОбласти(ОбластьЭтикетки);
	Для Каждого Область Из ОбластьЭтикетки.Области Цикл 
		Область.Примечание.Текст="";
	КонецЦикла;
	
	ЗначенияПараметровСоответствие=ВернутьЗначенияПараметров(ПараметрыОбласти);
	счКолонок=0;счСтрок=0;
	
	ИмяОбластиШтрихКода=ИмяОбластиШтрихКода(ОбластьЭтикетки.Области);
	Если ЗначениеЗаполнено(ИмяОбластиШтрихКода) Тогда 
		ОбластьШтрихКода=ОбластьЭтикетки.Области.Найти(ИмяОбластиШтрихКода);
		СтандарныйШрифт=ОбластьШтрихКода.Шрифт;
	КонецЕсли;
	
	
	Для Каждого текСоответствие из ЗначенияПараметровСоответствие Цикл 
		Если ЗначениеЗаполнено(ИмяОбластиШтрихКода) Тогда 
			Если текСоответствие.ТипШтрихкода=ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда 
				ОбластьШтрихКода.Шрифт=Новый Шрифт(ОбластьШтрихКода.Шрифт,"Code128",СтандарныйШрифт.Размер-6);
			ИначеЕсли НЕ СтандарныйШрифт=Неопределено Тогда 
				ОбластьШтрихКода.Шрифт=Новый Шрифт(СтандарныйШрифт);
			КонецЕсли;
		КонецЕсли;
		
		ОбластьЭтикетки.Параметры.Заполнить(текСоответствие);
		Для ъ=1 По текСоответствие.Количество Цикл 
			Если счКолонок%(Объект.КоличествоГоризонталь)=0 Тогда 
				счСтрок=счСтрок+1;
				Если (счСтрок)%(Объект.КоличествоВертикаль+1)=0 Тогда 
					ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
					счСтрок=1;
				КонецЕсли;
				ТабДок.Вывести(ОбластьЭтикетки);
			Иначе
				ТабДок.Присоединить(ОбластьЭтикетки);
			КонецЕсли;
			счКолонок=счКолонок+1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ИмяОбластиШтрихКода(ОбластиТабличногоДокумента)
	Для Каждого текОбласть Из ОбластиТабличногоДокумента Цикл 
		Если НЕ Найти("_"+ВРег(текОбласть.Параметр)+"_","_ШТРИХКОД_")=0 Тогда 
			Возврат текОбласть.Имя;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ШаблонЭтикеткиСохранить(Команда)
	Позиция=Найти(ВРег(Объект.ШаблонЭтикеткиИмя),"_ПРЕДОПРЕДЕЛЕННЫЙ");
	Если НЕ Позиция=0 Тогда 
		Объект.ШаблонЭтикеткиИмя=Лев(Объект.ШаблонЭтикеткиИмя,Позиция-1);
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(Объект.ШаблонЭтикеткиИмя))>40 Тогда 
		ПоказатьПредупреждение(,"Не могу сохранить шаблон. Слишком длинное имя!", 10 ,"В Н И М А Н И Е");
		Возврат;
	КонецЕсли;
		
	ТекущиеПараметры=Новый Структура("РазмерЭтикеткиШиринаММ,РазмерЭтикеткиВысотаММ,ФорматБумагиШирина,ФорматБумагиВысота,КоличествоГоризонталь,КоличествоВертикаль,СтраницаПолеСлева,СтраницаПолеСправа,СтраницаПолеСверху,СтраницаПолеСнизу");
	ЗаполнитьЗначенияСвойств(ТекущиеПараметры,Объект);
	Если НЕ ШаблонЭтикеткиСохранитьНаСервере(ТекущиеПараметры, МакетЭтикетки, Объект.ШаблонЭтикеткиИмя) Тогда 
		ПараметрыПродолжения=Новый Структура;
		ПараметрыПродолжения.Вставить("ТекущиеПараметры",ТекущиеПараметры);
		ПараметрыПродолжения.Вставить("МакетЭтикетки",МакетЭтикетки);
		ПараметрыПродолжения.Вставить("ШаблонЭтикеткиИмя",Объект.ШаблонЭтикеткиИмя);
		
		ОписаниеОповещения=Новый ОписаниеОповещения("ШаблонЭтикеткиСохранить_Продолжение",ЭтаФорма,ПараметрыПродолжения);
		ПоказатьВопрос(ОписаниеОповещения,"Шаблон с именем "+Объект.ШаблонЭтикеткиИмя+" уже существует. Перезаписать?",РежимДиалогаВопрос.ДаНетОтмена,5,КодВозвратаДиалога.Нет,"Подтверждение действия",КодВозвратаДиалога.Отмена);
	Иначе
		ЭтаФорма.Модифицированность=Ложь;
		ПоказатьПредупреждение(,"Шаблон ["+Объект.ШаблонЭтикеткиИмя+"] успешно сохранен ",4,"ОК");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиСохранить_Продолжение(Результат,ПараметрыПродолжения) Экспорт 
	Если НЕ Результат=КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	ШаблонЭтикеткиСохранитьНаСервере(ПараметрыПродолжения.ТекущиеПараметры,ПараметрыПродолжения.МакетЭтикетки,ПараметрыПродолжения.ШаблонЭтикеткиИмя,Истина);
	ПоказатьПредупреждение(,"Шаблон "+Объект.ШаблонЭтикеткиИмя+" успешно сохранен ",4,"ОК");
	ЭтаФорма.Модифицированность=Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШаблонЭтикеткиСохранитьНаСервере(ПараметрыШаблона,МакетЭтикетки,ИмяШаблона,Перезаписывать=Ложь)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ИмяШаблона", СокрЛП(ИмяШаблона));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ШаблоныЦенников.ИмяШаблона
	|ИЗ
	|	РегистрСведений.ШаблоныЦенников КАК ШаблоныЦенников
	|ГДЕ
	|	ШаблоныЦенников.ИмяШаблона ПОДОБНО &ИмяШаблона
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() И НЕ Перезаписывать Тогда Возврат Ложь; КонецЕсли;

	НоваяЗапись=РегистрыСведений.ШаблоныЦенников.СоздатьМенеджерЗаписи();
	НоваяЗапись.ИмяШаблона=СокрЛП(ИмяШаблона);
	ЗаполнитьЗначенияСвойств(НоваяЗапись,ПараметрыШаблона);
	НоваяЗапись.ШаблонЭтикетки=Новый ХранилищеЗначения(МакетЭтикетки,Новый СжатиеДанных(9));
	НоваяЗапись.Записать(Истина);

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ШаблонЭтикеткиОткрыть(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонЭтикеткиИмя) Тогда Возврат; КонецЕсли;

	ПараметрыЭтикетки=ШаблонЭтикеткиОткрытьНаСервере(Объект.ШаблонЭтикеткиИмя);
	ЗаполнитьЗначенияСвойств(Объект,ПараметрыЭтикетки);
	ОтрисоватьШаблонЛиста(МакетЭтикетки,ПараметрыЭтикетки.ШаблонЭтикетки);
	
	структураОтвета=ПолучитьГраницыЭтикетки(МакетЭтикетки);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма,структураОтвета);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГраницыЭтикетки(МакетЭтикетки)
	НайденнаяОбласть=МакетЭтикетки.Области.Найти("Этикетка");
	CтруктураОтвета=Новый Структура("ЭтикеткаВерх,ЭтикеткаНиз, ЭтикеткаЛево, ЭтикеткаПраво",0,0,0,0);
	Если НайденнаяОбласть=Неопределено Тогда Возврат CтруктураОтвета; КонецЕсли;

	CтруктураОтвета.ЭтикеткаЛево=НайденнаяОбласть.Лево;
	CтруктураОтвета.ЭтикеткаВерх=НайденнаяОбласть.Верх;
	CтруктураОтвета.ЭтикеткаНиз=НайденнаяОбласть.Низ;
	CтруктураОтвета.ЭтикеткаПраво=НайденнаяОбласть.Право;

	Возврат CтруктураОтвета;
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонЭтикеткиОткрытьНаСервере(ИмяШаблона)
	ТекущиеПараметры=Новый Структура("ШаблонЭтикетки,РазмерЭтикеткиШиринаММ,РазмерЭтикеткиВысотаММ,ФорматБумагиШирина,ФорматБумагиВысота,КоличествоГоризонталь,КоличествоВертикаль,СтраницаПолеСлева,СтраницаПолеСправа,СтраницаПолеСверху,СтраницаПолеСнизу");
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ИмяШаблона", СокрЛП(ИмяШаблона));
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ШаблоныЦенников.ШаблонЭтикетки,
	|	ШаблоныЦенников.РазмерЭтикеткиШиринаММ,
	|	ШаблоныЦенников.РазмерЭтикеткиВысотаММ,
	|	ШаблоныЦенников.ФорматБумагиШирина,
	|	ШаблоныЦенников.ФорматБумагиВысота,
	|	ШаблоныЦенников.КоличествоГоризонталь,
	|	ШаблоныЦенников.КоличествоВертикаль,
	|	ШаблоныЦенников.СтраницаПолеСлева,
	|	ШаблоныЦенников.СтраницаПолеСправа,
	|	ШаблоныЦенников.СтраницаПолеСверху,
	|	ШаблоныЦенников.СтраницаПолеСнизу
	|ИЗ
	|	РегистрСведений.ШаблоныЦенников КАК ШаблоныЦенников
	|ГДЕ
	|	ШаблоныЦенников.ИмяШаблона ПОДОБНО &ИмяШаблона
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ТекущиеПараметры,Выборка);
		МакетЭтикетки=ТекущиеПараметры.ШаблонЭтикетки.Получить();
		ТекущиеПараметры.ШаблонЭтикетки=МакетЭтикетки;		
	КонецЕсли;

	Возврат ТекущиеПараметры;
КонецФункции

&НаКлиенте
Процедура ШаблонЭтикеткиИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора=ШаблонЭтикеткиИмяАвтоПодборНаСервере(Текст);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШаблонЭтикеткиИмяАвтоПодборНаСервере(ТекстПодбора, Автоподбор=Истина)
	Если Автоподбор И СтрДлина(СокрЛП(ТекстПодбора))<3 Тогда Возврат ""; КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ТекстПодбора", ТекстПодбора);
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ШаблоныЦенников.ИмяШаблона
	|ИЗ
	|	РегистрСведений.ШаблоныЦенников КАК ШаблоныЦенников
	|ГДЕ
	|	ШаблоныЦенников.ИмяШаблона ПОДОБНО ""%"" + &ТекстПодбора + ""%""
	|";
	МассивИмен=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяШаблона");

	СписокИмен=Новый СписокЗначений;
	СписокИмен.ЗагрузитьЗначения(МассивИмен);
	
	////ПредопределенныеМакеты=Метаданные.РегистрыСведений.ШаблоныЦенников.Макеты;
	////Для Каждого _Макет Из ПредопределенныеМакеты Цикл 
	////	СписокИмен.Вставить(0,_Макет.Имя+"_ПРЕДОПРЕДЕЛЕННЫЙ",_Макет.Синоним+" (ПРЕДОПРЕДЕЛЕННЫЙ)")
	////КонецЦикла;
	
	Возврат СписокИмен;
КонецФункции

&НаКлиенте
Процедура ШаблонЭтикеткиИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора=ШаблонЭтикеткиИмяАвтоПодборНаСервере("",Ложь);
КонецПроцедуры

&НаКлиенте
Процедура МакетЭтикеткиОчистить(Команда)
	МакетЭтикеткиОчиститьНаСервере(МакетЭтикетки);
	СеткиШаблонаВысотаПТ=5;
	СеткиШаблонаШиринаПТ=1;
	ОтрисоватьШаблонЭтикетки(МакетЭтикетки);
	
	_ШиринаПТ=МакетЭтикетки.ТекущаяОбласть.ШиринаКолонки;
	_ВысотаПТ=МакетЭтикетки.ТекущаяОбласть.ВысотаСтроки;;
	
	ОтрисоватьПримерЭтикетки(ПримерЭтикетки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура МакетЭтикеткиОчиститьНаСервере(МакетЭтикетки)
	МакетЭтикетки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиУдалить(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонЭтикеткиИмя) Тогда 
		ПоказатьПредупреждение(,"Для удаления макета нужно ввести (или выбрать) его имя...",5,"Внимание...");
		Возврат;
	КонецЕсли;
	
	Если Найти(ВРег(Объект.ШаблонЭтикеткиИмя),"_ПРЕДОПРЕДЕЛЕННЫЙ")>0 Тогда 
		ПоказатьПредупреждение(,"Предопределенный макет не может быть удален...",5,"Внимание");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения=Новый ОписаниеОповещения("ШаблонЭтикеткиУдалить_Продолжение",ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения,"Вы действительно хотите удалить макет с именем "+Объект.ШаблонЭтикеткиИмя+"?",РежимДиалогаВопрос.ДаНетОтмена,5,КодВозвратаДиалога.Да,"Подтверждение действия",КодВозвратаДиалога.Отмена);
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиУдалить_Продолжение(Результат, Параметры) Экспорт 
	Если Результат=КодВозвратаДиалога.Да Тогда 
		результатОК=ШаблонЭтикеткиУдалитьНаСервере(Объект.ШаблонЭтикеткиИмя);
		Если результатОК Тогда 
			ПоказатьПредупреждение(,"Макет с именем "+Объект.ШаблонЭтикеткиИмя+" успешно удален...",5,"Информация");
			Объект.ШаблонЭтикеткиИмя="";
		Иначе
			ПоказатьПредупреждение(,"Макет с именем "+Объект.ШаблонЭтикеткиИмя+" не был найден. Удаление не произведено...",5,"Информация");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШаблонЭтикеткиУдалитьНаСервере(ИмяШаблонаЭтикетки)
	МЗаписи=РегистрыСведений.ШаблоныЦенников.СоздатьНаборЗаписей();
	МЗаписи.Отбор.ИмяШаблона.Установить(ИмяШаблонаЭтикетки);
	МЗаписи.Прочитать();
	Если МЗаписи.Количество()>0 Тогда 
		МЗаписи.Очистить();
		МЗаписи.Записать();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_ЗаполнитьПоНастройке(Результат, ДополнительныеПараметры) Экспорт
	Если Результат=Неопределено Тогда Возврат; КонецЕсли;
	ЗаполнитьТовары(Результат);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблиного поля "Товары"

&НаКлиенте
Процедура тпТовары_УстановитьДанныеШтрихКода(ТекущиеДанные)
	ШтрихКодЦифры=ШтрихКод(ТекущиеДанные.Номенклатура, ТекущиеДанные.ЕдиницаИзмерения, ТекущиеДанные.ХарактеристикаНоменклатуры, ТекущиеДанные.СерияНоменклатуры, ПредопределенноеЗначение("Справочник.Качество.Новый"));
	Если ШтрихКодЦифры=Неопределено Тогда Возврат; КонецЕсли; 

	ТекущиеДанные.ШтрихкодЦифры=ШтрихКодЦифры;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШтрихкодЦифры) Тогда Возврат; КонецЕсли;

	КонтрольнаяЦифра=ВернутьКонтрольнуюЦифру(ТекущиеДанные.ШтрихкодЦифры);
	ТекущаяКонтрольнаяЦифра=Прав(ТекущиеДанные.ШтрихкодЦифры, 1);
	Если СтрДлина(СокрЛП(ТекущиеДанные.ШтрихкодЦифры))=13  И КонтрольнаяЦифра=ТекущаяКонтрольнаяЦифра Тогда
		ТекущиеДанные.Штрихкод=EAN13CodeGenerate(ТекущиеДанные.ШтрихкодЦифры);
		ТекущиеДанные.ТипШтрихКода=ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13"); //EAN13
	ИначеЕсли СтрДлина(СокрЛП(ТекущиеДанные.ШтрихкодЦифры))=8  И КонтрольнаяЦифра=ТекущаяКонтрольнаяЦифра Тогда 
		ТекущиеДанные.Штрихкод=EAN8CodeGenerate(ТекущиеДанные.ШтрихкодЦифры);
		ТекущиеДанные.ТипШтрихКода=ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN8");
	Иначе
		ТекущиеДанные.Штрихкод=ИнициализироватьТаблицыСимволов_Code128_И_ВернутьШК_Code128(ТекущиеДанные.ШтрихкодЦифры);
		ТекущиеДанные.ТипШтрихКода=ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.Code128");
	КонецЕсли;	
КонецПроцедуры
 
&НаКлиенте
Процедура тпТовары_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	ТекущиеДанные=Элемент.Родитель.ТекущиеДанные;
	Если стрКолонка="Номенклатура" Тогда
		ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");	
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦены, Объект.Дата, ТекущиеДанные.ЕдиницаИзмерения, Объект.Валюта);
		тпТовары_УстановитьДанныеШтрихКода(ТекущиеДанные);

	ИначеЕсли стрКолонка="ХарактеристикаНоменклатуры" Тогда
		Номенклатура=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ХарактеристикаНоменклатуры, "Владелец");
		Если НЕ Номенклатура=ТекущиеДанные.Номенклатура Тогда
			ТекущиеДанные.Номенклатура=Номенклатура;
			ТекущиеДанные.ЕдиницаИзмерения=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		ТекущиеДанные.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(ТекущиеДанные.Номенклатура, ТекущиеДанные.ХарактеристикаНоменклатуры, Объект.ТипЦены, Объект.Дата, ТекущиеДанные.ЕдиницаИзмерения, Объект.Валюта);
		тпТовары_УстановитьДанныеШтрихКода(ТекущиеДанные);		

	ИначеЕсли стрКолонка="ЕдиницаИзмерения" Тогда
		тпТовары_УстановитьДанныеШтрихКода(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпТовары_ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		Элемент.ТекущиеДанные.Количество=1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура тпТовары_ЗаполнитьШтрихКод()
	таблицыДляРаботыШК=Неопределено;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.ШтрихкодЦифры) Тогда 
			КонтрольнаяЦифра=ВернутьКонтрольнуюЦифру(СтрокаТовары.ШтрихкодЦифры);
			ТекущаяКонтрольнаяЦифра=Прав(СтрокаТовары.ШтрихкодЦифры,1);
			Если СтрДлина(СокрЛП(СтрокаТовары.ШтрихкодЦифры))=13 И КонтрольнаяЦифра=ТекущаяКонтрольнаяЦифра Тогда 
				СтрокаТовары.Штрихкод=EAN13CodeGenerate(СтрокаТовары.ШтрихкодЦифры);
				СтрокаТовары.ТипШтрихкода=ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
			ИначеЕсли СтрДлина(СокрЛП(СтрокаТовары.ШтрихкодЦифры))=8 И КонтрольнаяЦифра=ТекущаяКонтрольнаяЦифра Тогда 
				СтрокаТовары.Штрихкод=EAN8CodeGenerate(СтрокаТовары.ШтрихкодЦифры);
				СтрокаТовары.ТипШтрихкода=ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
			Иначе
				Если таблицыДляРаботыШК=Неопределено Тогда 
					таблицыДляРаботыШК=ИнициализироватьТаблицыСимволов_Code128();
				КонецЕсли;
				СтрокаТовары.Штрихкод=ВернутьШК_Code128(таблицыДляРаботыШК.СЗ_СимволыБарКода,таблицыДляРаботыШК.ТЗ_НаборCodeC,таблицыДляРаботыШК.ТЗ_НаборCodeB,Строка(СтрокаТовары.ШтрихкодЦифры));
				СтрокаТовары.ТипШтрихкода=ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.КоличествоГоризонталь=4;
	Объект.КоличествоВертикаль=11;
	Объект.СтраницаПолеСверху=5;
	Объект.СтраницаПолеСнизу=5;
	Объект.СтраницаПолеСлева=5;
	Объект.СтраницаПолеСправа=5;
	Объект.ФорматБумагиШирина=210;
	Объект.ФорматБумагиВысота=297;
	
	_1пт_ширина_мм=1.83;
	_1пт_высота_мм=0.35;

	СеткиШаблонаВысотаПТ=5;
	СеткиШаблонаШиринаПТ=1;
	
	ПостроитьДеревоДоступныхРеквизитов();
	
	Если Параметры.Свойство("ТипЦены") Тогда
		Объект.ТипЦены=Параметры.ТипЦены;
	КонецЕсли;
	Если Параметры.Свойство("Дата") Тогда
		Объект.Дата=Параметры.Дата;
	КонецЕсли;
	Если Параметры.Свойство("Валюта") Тогда
		Объект.Валюта=Параметры.Валюта;
	КонецЕсли;
	Если Параметры.Свойство("Товары") Тогда
		Для каждого СтрокаКоллекции Из Параметры.Товары Цикл
			НоваяСтрока=Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			Если НЕ Объект.ТипЦены.Пустая() И НоваяСтрока.Цена=0 Тогда
				НоваяСтрока.Цена=ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.ХарактеристикаНоменклатуры, Объект.ТипЦены, Объект.Дата, НоваяСтрока.ЕдиницаИзмерения, Объект.Валюта);
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда 
		Объект.Дата=ТекущаяДата();
	КонецЕсли;
	Для каждого СтрокаКоллекции Из Объект.Товары Цикл
		тпТовары_УстановитьДанныеШтрихКода(СтрокаКоллекции);
	КонецЦикла; 

	Массив=ШаблонЭтикеткиИмяАвтоПодборНаСервере("", Ложь);
	Если НЕ Массив.Количество()=0 Тогда
		Объект.ШаблонЭтикеткиИмя=Массив[0].Значение;
		ШаблонЭтикеткиОткрыть("1");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
КонецПроцедуры

//7622210501240