&НаСервере
Функция ЭтоГруппаТовара(ВыбраннаяСтрока)
	Возврат ВыбраннаяСтрока.ЭтоГруппа;
КонецФункции

&НаСервере
Функция ЭтоВесовойТовар(ВыбраннаяСтрока)
	Возврат ВыбраннаяСтрока.Весовой;
КонецФункции

&НаСервере
Функция ОбработатьВведенныйШтрихкод(Штрихкод)
	мПрефиксВесовогоТовара=Константы.ПрефиксВесовогоТовара.Получить();
	мДлинаКодаВесовогоТовара=Константы.ДлинаКодаВесовогоТовара.Получить();

	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("Номенклатура");
	СтруктураВозврата.Вставить("ХарактеристикаНоменклатуры");
	СтруктураВозврата.Вставить("СерияНоменклатуры");
	СтруктураВозврата.Вставить("Качество");
	СтруктураВозврата.Вставить("ЕдиницаИзмерения");
	СтруктураВозврата.Вставить("Количество");	

	стрТипШК="EAN13";
	МодульМенеджерОборудованияВызовСервера=ОбщегоНазначенияСервер.ОбщийМодуль("МенеджерОборудованияВызовСервера");
	Если НЕ МодульМенеджерОборудованияВызовСервера=Неопределено Тогда
		стрТипШК=МодульМенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	КонецЕсли;	

	Если ЗначениеЗаполнено(мПрефиксВесовогоТовара) И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара) И стрТипШК="EAN13" Тогда
		 //*** И Лев(Штрихкод, 2) = "2" + мПрефиксВесовогоТовара Тогда
		КодТовара        = Сред(Штрихкод, 3, мДлинаКодаВесовогоТовара);
		КоличествоТовара = Сред(Штрихкод, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);

		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", Справочники.Качество.ПустаяСсылка());
		Запрос.УстановитьПараметр("КачествоНовый",        Справочники.Качество.Новый);
		Запрос.УстановитьПараметр("Код",                  Число(КодТовара));
		Запрос.УстановитьПараметр("Коэф", ?(Лев(Штрихкод, 2) = "2" + мПрефиксВесовогоТовара, 1000, 1));
		Запрос.Текст="
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегКВТ.Номенклатура                         КАК Номенклатура,
		|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|    " + КоличествоТовара + " / &Коэф            КАК Количество,
		|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегКВТ.Качество
		|    КОНЕЦ                                       КАК Качество
		|ИЗ
		|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		|ГДЕ
		|    РегКВТ.Код = &Код
		|";
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;

	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Номенклатура,
	|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    РегШК.Качество                   КАК Качество
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Штрихкод = &Штрихкод
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		Иначе // Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура")
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	стрИмя=?(ТипЗнч(Команда)=Тип("Строка"), Команда, Команда.Имя);

	Если стрИмя="НайтиПоШтрихКоду" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработкаОповещения_ВвестиШтрихкод", ЭтотОбъект);
		ПоказатьВводСтроки(ОписаниеОповещения, , "Введите штрихкод");

	ИначеЕсли стрИмя="ПоискТовараЗакрыть" Тогда
		ЭтаФорма.Закрыть();
		
	ИначеЕсли стрИмя="Остатки_Обновить" Тогда
		дзОстатки_Сформировать(Элементы.тпНоменклатура.ТекущаяСтрока);

		ЭлементыКоллекции=дзОстатки.ПолучитьЭлементы();
		Для каждого СтрокаКоллекции Из ЭлементыКоллекции Цикл
			Элементы.дзОстатки.Развернуть(СтрокаКоллекции.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	ИначеЕсли стрИмя="Остатки_НастройкаРазворотов" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработкаОповещения_НастройкаГруппировок", ЭтотОбъект);
		
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Группировки разворота");
		ПараметрыФормы.Вставить("Пометка", Истина);
		ПараметрыФормы.Вставить("Картинка", Ложь);
		ПараметрыФормы.Вставить("ИзменятьСоставСтрок", Ложь);
		ПараметрыФормы.Вставить("СписокЗначений", спОстаткиГруппировки.Скопировать());
		
		ОткрытьФорму("ОбщаяФорма.СписокЗначений", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли стрИмя="Остатки_Видимость" Тогда	
		Элементы.ГруппаРасшифровкаОстатков.Видимость=Не Элементы.ГруппаРасшифровкаОстатков.Видимость;		
		
	ИначеЕсли стрИмя="ОткрытьНастройки" Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_Настройки", ЭтаФорма);

		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("ЗапрашиватьКоличествоВесовогоТовара", ЗапрашиватьКоличествоВесовогоТовара);
		ПараметрыФормы.Вставить("ЗапрашиватьКоличествоОбычногоТовара", ЗапрашиватьКоличествоОбычногоТовара);
		//*** ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", ЗакрыватьПриВыборе);
		ПараметрыФормы.Вставить("ПоказыватьЦены", ПоказыватьЦены);
		ПараметрыФормы.Вставить("ПоказыватьОстатки", ПоказыватьОстатки);
		ПараметрыФормы.Вставить("ПоказыватьПотребности", ПоказыватьПотребности);
		ПараметрыФормы.Вставить("ПоказыватьРезервы", ПоказыватьРезервы);

		ОткрытьФорму("Обработка.ПодборТовара.Форма.ФормаНастройки", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	стрГруппировки="";
	Для каждого СтрокаКоллекции Из спОстаткиГруппировки Цикл
		Если НЕ СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли;
		стрГруппировки=стрГруппировки+?(ПустаяСтрока(стрГруппировки), "", ",")+СтрокаКоллекции.Значение;
	КонецЦикла;
	Настройки=Новый Структура;
	Настройки.Вставить("ПоказатьРасшифровкуОстатка", Элементы.ГруппаРасшифровкаОстатков.Видимость);
	Настройки.Вставить("ГруппировкиРасшифровкиОстатка", стрГруппировки);
	ХранилищеНастроекДанныхФорм.Сохранить("ПодборТМЦ", "Подбор", Настройки,,ПараметрыСеанса.ТекущийПользователь);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	Настройки=ХранилищеНастроекДанныхФорм.Загрузить("ПодборТМЦ", "Подбор",,ПараметрыСеанса.ТекущийПользователь);
	Если НЕ ТипЗнч(Настройки)=Тип("Структура") Тогда Возврат; КонецЕсли;
	
	Если Настройки.Свойство("ПоказатьРасшифровкуОстатка") Тогда
		Элементы.ГруппаРасшифровкаОстатков.Видимость=Настройки.ПоказатьРасшифровкуОстатка;
	КонецЕсли;
	
	Если Настройки.Свойство("ГруппировкиРасшифровкиОстатка") Тогда
		стрПредставление=""; НомерСтроки=0;
		МассивСтрок=СтрРазделить(Настройки.ГруппировкиРасшифровкиОстатка, ",");		
		Для каждого Группировки Из МассивСтрок Цикл
			ЭлементСписка=спОстаткиГруппировки.НайтиПоЗначению(Группировки); 
			Если ЭлементСписка=Неопределено Тогда Продолжить; КонецЕсли;
			ЭлементСписка.Пометка=Истина;
			спОстаткиГруппировки.Сдвинуть(ЭлементСписка, -(спОстаткиГруппировки.Индекс(ЭлементСписка)-НомерСтроки));
			стрПредставление=стрПредставление+?(ПустаяСтрока(стрПредставление), "", "\")+ЭлементСписка.Представление;
			НомерСтроки=НомерСтроки+1;
		КонецЦикла;
		Элементы.дзОстаткиПредставление.Заголовок=стрПредставление;
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработкаОповещения_ВводКоличества(Количество, ПараметрыДоп) Экспорт
	Если Количество=Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыДоп.Вставить("Количество", Количество);
	ПараметрыДоп.Вставить("ПодборТовара", Истина);
	
	ОповеститьОВыборе(ПараметрыДоп);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения_ВвестиШтрихкод(Штрихкод, ПараметрыДоп) Экспорт
	Если ПустаяСтрока(Штрихкод) Тогда Возврат; КонецЕсли;

	СтруктураВозврата=ОбработатьВведенныйШтрихкод(Штрихкод);
	Если ЗначениеЗаполнено(СтруктураВозврата.Номенклатура) Тогда
		СтруктураВозврата.Вставить("ПодборТовара", Истина);
		ОповеститьОВыборе(СтруктураВозврата);
	Иначе
		ПоказатьПредупреждение(,"штрих код не найден!", 10);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения_НастройкаГруппировок(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	спОстаткиГруппировки.Очистить();
	стрПредставление="Организация\Склад";
	Если ТипЗнч(Параметр1)=Тип("СписокЗначений") Тогда
		стрПредставление="";
		Для каждого СтрокаКоллекции Из Параметр1 Цикл
			спОстаткиГруппировки.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление, СтрокаКоллекции.Пометка, СтрокаКоллекции.Картинка);
			Если СтрокаКоллекции.Пометка Тогда
				стрПредставление=стрПредставление+?(ПустаяСтрока(стрПредставление), "", "\")+СтрокаКоллекции.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы.дзОстаткиПредставление.Заголовок=стрПредставление;

	ВыполнитьДействие(Команды.Остатки_Обновить);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_Настройки(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметр1);
	тпНоменклатура_Инициализация();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Товары"

&НаСервере
Процедура тпНоменклатура_Инициализация()
	стрЗапрос="
	|ВЫБРАТЬ
	|	ИсточникДанных1.Ссылка КАК Ссылка,
	|	ИсточникДанных1.ПометкаУдаления КАК ПометкаУдаления,
	|	ИсточникДанных1.Родитель КАК Родитель,
	|	ИсточникДанных1.ЭтоГруппа КАК ЭтоГруппа,
	|	ИсточникДанных1.Код КАК Код,
	|	ИсточникДанных1.Наименование КАК Наименование,
	|	ИсточникДанных1.Артикул КАК Артикул
	|	,"+?(ПоказыватьЦены, "ИсточникДанных2.Цена", "0")+" КАК Цена
	|	,"+?(ПоказыватьОстатки, "ИсточникДанных3.КоличествоОстаток", "0")+" КАК Остаток
	|	,"+?(ПоказыватьПотребности, "ИсточникДанных4.КоличествоОстаток", "0")+" КАК Потребность
	|	,"+?(ПоказыватьРезервы, "ИсточникДанных5.КоличествоОстаток", "0")+" КАК Резерв
	|ИЗ
	|	Справочник.Номенклатура КАК ИсточникДанных1
	|";
	
	Если ПоказыватьЦены Тогда
		стрЗапрос=стрЗапрос+"
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&НаДату, ТипЦен = &ТипЦены) КАК ИсточникДанных2
		|ПО (ИсточникДанных2.Номенклатура = ИсточникДанных1.Ссылка)
		|";		
	КонецЕсли;

	Если ПоказыватьОстатки Тогда
		стрЗапрос=стрЗапрос+"
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&НаДату) КАК ИсточникДанных3
		|ПО (ИсточникДанных3.Номенклатура = ИсточникДанных1.Ссылка)
		|";
	КонецЕсли;

	Если ПоказыватьПотребности Тогда
		стрЗапрос=стрЗапрос+"
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетПотребностей.Остатки(&НаДату) КАК ИсточникДанных4
		|	ПО (ИсточникДанных4.Номенклатура = ИсточникДанных1.Ссылка)
		|";
	КонецЕсли; 
	
	Если ПоказыватьРезервы Тогда
		стрЗапрос=стрЗапрос+"
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетРезервовТМЦ.Остатки(&НаДату) КАК ИсточникДанных5
		|	ПО (ИсточникДанных5.Номенклатура = ИсточникДанных1.Ссылка)
		|";
	КонецЕсли;
	
	тпНоменклатура.ТекстЗапроса=стрЗапрос;

	ПараметрыДанных=тпНоменклатура.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	Если НЕ ПараметрыДанных.Элементы.Найти("НаДату")=Неопределено Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("НаДату", ТекущаяДата());	
	КонецЕсли;
	Если НЕ ПараметрыДанных.Элементы.Найти("ТипЦены")=Неопределено Тогда
		тпНоменклатура.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипЦены", ТипЦен);
	КонецЕсли;

	Элементы.тпНоменклатураЦена.Видимость=ПоказыватьЦены;
	Элементы.тпНоменклатураОстаток.Видимость=ПоказыватьОстатки;
	Элементы.тпНоменклатураПотребность.Видимость=ПоказыватьПотребности;
	Элементы.тпНоменклатураРезерв.Видимость=ПоказыватьРезервы;	
КонецПроцедуры
 
&НаКлиенте
Процедура тпНоменклатура_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если ЭтоГруппаТовара(ВыбраннаяСтрока) Тогда Возврат; КонецЕсли; 

	ПараметрыДоп=Новый Структура("Номенклатура", ВыбраннаяСтрока);
	
	ЗапрашиватьКоличество=Ложь;
	Если ЗапрашиватьКоличествоВесовогоТовара И ЗапрашиватьКоличествоОбычногоТовара Тогда
		ЗапрашиватьКоличество=Истина;
	ИначеЕсли ЗапрашиватьКоличествоВесовогоТовара И ЭтоВесовойТовар(ВыбраннаяСтрока) Тогда
		ЗапрашиватьКоличество=Истина;
	ИначеЕсли ЗапрашиватьКоличествоОбычногоТовара И НЕ ЭтоВесовойТовар(ВыбраннаяСтрока) Тогда
		ЗапрашиватьКоличество=Истина;
	КонецЕсли;
	
	Если ЗапрашиватьКоличество Тогда
		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработкаОповещения_ВводКоличества", ЭтотОбъект, ПараметрыДоп);
		ВведенноеЗначение=1; ПоказатьВводЧисла(ОписаниеОповещения, ВведенноеЗначение, "Введите количество", 15, 3);	
	Иначе
		ОбработкаОповещения_ВводКоличества(1, Новый Структура("Номенклатура", ВыбраннаяСтрока));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпНоменклатура_ПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("дзОстатки_Обновить", 0.1, Истина);	
	Если Не Элементы.тпНоменклатура.ТекущаяСтрока=Неопределено Тогда
		КартинкаТовара=ПолучитьНавигационнуюСсылку(Элементы.тпНоменклатура.ТекущаяСтрока, "ОсновноеИзображение");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура тпНоменклатура_УстановитьЗначенияОтбораПользовательскойНастройки()
	Если НЕ ТипЗнч(СтруктураОтбораПользовательскихНастроек)=Тип("Структура") Тогда Возврат; КонецЕсли; 

    Для Каждого ЭлементНастройки Из тпНоменклатура.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки)=Тип("ОтборКомпоновкиДанных") Тогда
			Для каждого СтрокаКоллекции Из СтруктураОтбораПользовательскихНастроек Цикл
				ЭлементНайден=Ложь;
				ПолеОтбора=Новый ПолеКомпоновкиДанных(СтрокаКоллекции.Ключ);
				Для каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение=ПолеОтбора Тогда
						ЭлементОтбора.ПравоеЗначение=СтрокаКоллекции.Значение;
						ЭлементНайден=Истина; Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ЭлементНайден Тогда
					ЭлементОтбора=ЭлементНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение=ПолеОтбора;
					ЭлементОтбора.ПравоеЗначение=СтрокаКоллекции.Значение;
					ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.Использование=Истина;
					ЭлементОтбора.ПредставлениеПользовательскойНастройки=СокрЛП(ПолеОтбора);
					ЭлементОтбора.ИдентификаторПользовательскойНастройки=СтрокаКоллекции.Ключ;
				КонецЕсли;
			КонецЦикла;
			Прервать;
        КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Остатки"

&НаСервере
Процедура дзОстатки_Сформировать(Номенклатура)
	дзДанные=Новый ДеревоЗначений;
	дзОстатки.ПолучитьЭлементы().Очистить();

	СхемаКомпоновкиДанных=Обработки.ПодборТовара.ПолучитьМакет("РасшифровкаОстатков");

	МассивГруппировок=Новый Массив;
	Для каждого СтрокаКоллекции Из спОстаткиГруппировки Цикл
		Если НЕ СтрокаКоллекции.Пометка Тогда Продолжить; КонецЕсли; 
		МассивГруппировок.Добавить(СтрокаКоллекции.Значение);
	КонецЦикла;

	Если НЕ МассивГруппировок.Количество()=0 Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ЭлементСтруктуры=КомпоновщикНастроек.Настройки;
		Для каждого СтрокаКоллекции Из МассивГруппировок Цикл
			ЭлементСтруктуры=ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

			ПолеГруппировки=ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование=Истина;
			ПолеГруппировки.Поле=Новый ПолеКомпоновкиДанных(СтрокаКоллекции);			
		КонецЦикла; 
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);

	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(дзДанные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Если дзДанные.Строки.Количество()=0 Тогда Возврат; КонецЕсли;
	
	дзОстатки_Заполнить(дзДанные.Строки, дзОстатки.ПолучитьЭлементы(), МассивГруппировок, 0);
	
	МассивСтрок=дзОстатки.ПолучитьЭлементы();
	Если МассивСтрок.Количество()=1 Тогда Возврат; КонецЕсли;
	МассивСтрок[МассивСтрок.Количество()-1].Представление="Итого:";
КонецПроцедуры

&НаКлиенте
Процедура дзОстатки_Обновить()
	ОтключитьОбработчикОжидания("дзОстатки_Обновить");
	дзОстатки_Сформировать(Элементы.тпНоменклатура.ТекущаяСтрока);

	//Развернуть все уровни дерева
	МассивСтрок=дзОстатки.ПолучитьЭлементы();
	Для каждого СтрокаКоллекции Из МассивСтрок Цикл
		Элементы.дзОстатки.Развернуть(СтрокаКоллекции.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	
КонецПроцедуры
 
&НаСервере
Процедура дзОстатки_Заполнить(Источник, Приемник, МассивГруппировок, ИндексМассиваИзмерений)
	Для каждого СтрокаКоллекции Из Источник Цикл
		НоваяСтрока=Приемник.Добавить();
		НоваяСтрока.Представление=СтрокаКоллекции[МассивГруппировок[ИндексМассиваИзмерений]];
		НоваяСтрока.Количество=СтрокаКоллекции.Количество;

		дзОстатки_Заполнить(СтрокаКоллекции.Строки, Приемник[Источник.Индекс(СтрокаКоллекции)].ПолучитьЭлементы(), МассивГруппировок, ИндексМассиваИзмерений+1);		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура дзОстатки_Инициализация()
	СхемаКомпоновкиДанных=Обработки.ПодборТовара.ПолучитьМакет("РасшифровкаОстатков");
	URLСхемы=ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	спОстаткиГруппировки.Добавить("Организация", "Организация", Истина);
	спОстаткиГруппировки.Добавить("Склад", "Склад", Истина);
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
		спОстаткиГруппировки.Добавить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры", Ложь);
	КонецЕсли; 
	Если Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
		спОстаткиГруппировки.Добавить("СерияНоменклатуры", "Серия номенклатуры", Ложь);
	КонецЕсли; 
	спОстаткиГруппировки.Добавить("Качество", "Качество");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ЗапрашиватьКоличествоВесовогоТовара", ЗапрашиватьКоличествоВесовогоТовара);
	Параметры.Свойство("ЗапрашиватьКоличествоОбычногоТовара", ЗапрашиватьКоличествоОбычногоТовара);
	Параметры.Свойство("ЗакрыватьПриВыборе", ЗакрыватьПриВыборе);
	Параметры.Свойство("Склад", Склад);
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("ТипЦен", ТипЦен);	
	Параметры.Свойство("ПоказыватьЦены", ПоказыватьЦены);
	Параметры.Свойство("ПоказыватьОстатки", ПоказыватьОстатки);
	Параметры.Свойство("ПоказыватьПотребности", ПоказыватьПотребности);
	Параметры.Свойство("ПоказыватьРезервы", ПоказыватьРезервы);

	ЗагрузитьНастройки();

	СтруктураОтбораПользовательскихНастроек=Новый Структура;
	СтруктураОтбораПользовательскихНастроек.Вставить("Склад", Склад);
	СтруктураОтбораПользовательскихНастроек.Вставить("Организация", Организация);

	тпНоменклатура_Инициализация();
		
	дзОстатки_Инициализация();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    ЗакрыватьПриЗакрытииВладельца=Истина;
	тпНоменклатура_УстановитьЗначенияОтбораПользовательскойНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли; 
КонецПроцедуры
