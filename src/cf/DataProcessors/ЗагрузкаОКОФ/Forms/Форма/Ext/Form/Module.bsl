#Область ПеременныеМодуля

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	xmlnsXML                = "http://www.w3.org/XML/1998/namespace";
	xmlnsV8XDTO             = "http://v8.1c.ru/8.1/xdto";
	xmlnsОписанияТиповКлассификаторов = "urn:uuid:101fa9a0-ea86-11dc-afc4-0002a5d5c51b";
	xmlnsКлассификатор      = "urn:uuid:be515360-d4a7-11dc-8abf-0002a5d5c51b";
	
	Предупреждение = "В указанном файле не найдено данных для загрузки"; 
	
	Объект.ДопустимыеТипыКлассификаторов.ЗагрузитьЗначения(Параметры.ТипыКлассификаторов.ВыгрузитьЗначения());

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьИПрочитатьФайл(Команда)
	
	АдресВременногоХранилища = Неопределено;
	
	ОчиститьСообщения();
	
	Попытка
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ОткрытьИПрочитатьФайлЗавершение", ЭтотОбъект), АдресВременногоХранилища, ИмяФайлаПоУмолчанию, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При чтении файла возникла ошибка
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
        Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Если НЕ Объект.Загружать Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаданиеВыполнено = ВыполнитьЗагрузку();

	Если ЗаданиеВыполнено Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресХранилищаРезультат);
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Результат);
			Элементы.ГруппаРезультат.Видимость = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	//ПараметрыОбработчикаОжидания = Новый Структура(
	//"МинимальныйИнтервал,
	//|МаксимальныйИнтервал,
	//|ТекущийИнтервал,
	//|КоэффициентУвеличенияИнтервала", 
	//1, 15, 1, 1.4);
	//ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);

	//ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьИПрочитатьФайлЗавершение(Результат, Адрес, ИмяВыбранногоФайла, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат Тогда
        Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Выполняется считывание данных классификатора %1 из файла '");
    Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.ИдентификаторКлассификатора));
	
	АдресВременногоХранилища = Адрес;
	
	ИмяФайла = ИмяВыбранногоФайла;
    
    ПрочитатьВыбранныйФайл();

    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуКлассификатора(Данные, ИдентификаторКлассификатора, АдресХранилищаРезультат) Экспорт
	
	АдресХранения = ПоместитьВоВременноеХранилище(Данные);
	
	ОбработкаОбъект = Обработки.ЗагрузкаОКОФ.Создать();
	
	ОбработкаОбъект.ИдентификаторКлассификатора = ИдентификаторКлассификатора;
	ОбработкаОбъект.ДобавитьНовыйКлассификатор(Неопределено, АдресХранения, Неопределено);
	ОбработкаОбъект.ЗаписатьКлассификаторы(, АдресХранилищаРезультат);
	
КонецПроцедуры

Функция ВыполнитьЗагрузку()
	
	ЗаданиеВыполнено = Истина;	
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка классификатора из файла %1'"), ИмяФайла);
	
	АдресХранилищаРезультат = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);

	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	ПараметрыЭкспортнойПроцедуры.Добавить(Объект.ИдентификаторКлассификатора);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаРезультат);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	ВыполнитьЗагрузкуКлассификатора(ПараметрыЭкспортнойПроцедуры[0], УникальныйИдентификатор, НаименованиеЗадания);
	//Задание = ФоновыеЗадания.Выполнить("ВыполнитьЗагрузкуКлассификатора",
	//	ПараметрыЭкспортнойПроцедуры, УникальныйИдентификатор, НаименованиеЗадания);
	//	
	//Попытка
	//	Задание.ОжидатьЗавершения(ВремяОжидания);
	//Исключение		
	//	// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	//КонецПопытки;
	//	
	//ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	//
	//Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
	//	ЗаданиеВыполнено = Истина; 
	//КонецЕсли;	
	//
	Возврат ЗаданиеВыполнено;
	//
КонецФункции	

//&НаКлиенте
//Процедура Подключаемый_ПроверитьВыполнениеЗадания()
//	
//	Попытка
//		Если ПроверитьВыполнениеФоновогоЗаданияНаСервере(ИдентификаторЗадания) Тогда
//			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
//			
//			Результат = ПолучитьИзВременногоХранилища(АдресХранилищаРезультат);
//			Если ТипЗнч(Результат) = Тип("Структура") Тогда
//				ЗаполнитьЗначенияСвойств(Объект, Результат);
//				Элементы.ГруппаРезультат.Видимость = Истина;
//			КонецЕсли;
//			
//			Оповестить("ВыполненаЗагрузкаОКОФ");
//			
//			Возврат;
//			
//		КонецЕсли;

//	Исключение
//		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
//	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
//		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
//	КонецЕсли;
//	ПодключитьОбработчикОжидания(
//		"Подключаемый_ПроверитьВыполнениеЗадания", 
//		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
//		Истина);
//		
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция ПроверитьВыполнениеФоновогоЗаданияНаСервере(ФоновоеЗаданиеИдентификатор)
//	Возврат ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
//КонецФункции


&НаСервере
Процедура ПрочитатьПомещенныйФайлНаСервере(Знач ПомещенныйФайл)
	
	Перем ДиспетчерОбновлений;
	
	ДиспетчерОбновлений = РеквизитФормыВЗначение("Объект");
	ДиспетчерОбновлений.ДобавитьНовыйКлассификатор(ПомещенныйФайл.Имя, ПомещенныйФайл.Хранение, УникальныйИдентификатор);
		
	ЗначениеВРеквизитФормы(ДиспетчерОбновлений, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьВыбранныйФайл()
	
	ОписаниеПереданногоФайла = Новый Структура("Имя, Хранение");
	ОписаниеПереданногоФайла.Имя = ИмяФайла;
	ОписаниеПереданногоФайла.Хранение = АдресВременногоХранилища;
	
	ПрочитатьПомещенныйФайлНаСервере(ОписаниеПереданногоФайла);
	
	Если Объект.Загружать Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СраницаКлассификатор;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПредупреждение;
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти
