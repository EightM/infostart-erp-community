&НаСервере
Процедура ЗаполнитьСтрокиДокумента()
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	
	ВидыСубконто=Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СчетаИсключения=Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОснование,
	|"+?(Год(Объект.НачалоПериода)>2018," ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120) КАК СтавкаНДС,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот + ХозрасчетныйОборотыДтКт.СуммаОборот * 0.20) КАК Сумма,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот * 0.20) КАК СуммаНДС,"
	," ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118) КАК СтавкаНДС,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот + ХозрасчетныйОборотыДтКт.СуммаОборот * 0.18) КАК Сумма,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот * 0.18) КАК СуммаНДС,")+"
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОборотыДтКт.Регистратор.Дата КАК Дата,
	|	ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО) КАК СчетФактура
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Регистратор,
	|			(НЕ СчетДт В (&СчетаИсключения)),
	|			&ВидыСубконто,
	|			(НЕ СчетКт.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт2.УчетАгентскогоНДС
	|				И СубконтоДт2.НалоговыйАгентПоОплате) КАК ХозрасчетныйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ПО ХозрасчетныйОборотыДтКт.Регистратор = СчетФактураВыданный.ДокументОснование
	|			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|			И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НалоговыйАгент))
	|			И (СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2,
	|	ХозрасчетныйОборотыДтКт.Регистратор.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|";
	Объект.Список.Загрузить(Запрос.Выполнить().Выгрузить());
	// В результате содержатся строки, соответсвующие начислению НДС при поступлении,
	// тип значение в колонке ДокументОснование не соответствует разрешенным. Такие строки надо удалить
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Список Цикл
		Если Не Метаданные.Обработки.РегистрацияСчетовФактурНалоговогоАгента.ТабличныеЧасти.Список.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(СтрокаТаблицы.ДокументОснование)) Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.Список.Удалить(СтрокаКУдалению);		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьСчетаФактуры(ЕстьОшибки = Ложь)
	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Объект.Список.Выгрузить(,"СчетФактура").ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	
	МассивДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Объект.Список.Выгрузить(,"ДокументОснование").ВыгрузитьКолонку("ДокументОснование"));
	МассивДоговоров = Новый Массив;
	
	СтруктураОтбораДокумент = Новый Структура("ДокументОснование");
	СтруктураОтбораДоговор = Новый Структура("ДокументОснование, ДоговорКонтрагента");
	Ответственный = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
		
	Для Каждого Документ Из МассивДокументов Цикл
		СтруктураОтбораДокумент.ДокументОснование = Документ;
		СтрокиПоДокументу = Объект.Список.НайтиСтроки(СтруктураОтбораДокумент);
		
		МассивДоговоров.Очистить();
		Для Каждого СтрокаОтбора Из СтрокиПоДокументу Цикл
			МассивДоговоров.Добавить(СтрокаОтбора.ДоговорКонтрагента);
		КонецЦикла;
		МассивДоговоров = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
		ТЧАвансыСтарые = Новый Соответствие;
		
		Для Каждого Договор Из МассивДоговоров Цикл
			СтруктураОтбораДоговор.ДокументОснование = Документ;
			СтруктураОтбораДоговор.ДоговорКонтрагента = Договор;
			СтрокиПоДоговору = Объект.Список.НайтиСтроки(СтруктураОтбораДоговор);
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			ОшибкаФормирования = Ложь;
			Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
				Если СчФ = Неопределено Тогда
					// Создать/использовать Счет-фактуру
					Если Не СтрокаОтбораДоговор.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ = СтрокаОтбораДоговор.СчетФактура.ПолучитьОбъект();
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаОтбораДоговор);
					
					СчФ.Дата = КонецДня(СчФ.Дата);
					СчФ.ПометкаУдаления = Ложь;
					СчФ.Организация = Объект.Организация;
					СчФ.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					СчФ.ВалютаДокумента = ВалютаРегламентированногоУчета;
					СчФ.СуммаДокумента = СтрокаОтбораДоговор.Сумма;
					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаОтбораДоговор.ДокументОснование;
					СчФ.Авансы.Очистить();
				Иначе
					НоваяСтрокаТабличнойЧасти=СчФ.ДокументыОснования.Добавить();//***
					НоваяСтрокаТабличнойЧасти.ДокументОснование = СтрокаОтбораДоговор.ДокументОснование; //***
					СчФ.Сумма = СчФ.Сумма + СтрокаОтбораДоговор.Сумма;
					СчФ.СуммаНДС = СчФ.СуммаНДС + СтрокаОтбораДоговор.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаОтбораДоговор.ВалютнаяСумма;
				КонецЕсли;                             
				
				СчФ.ДатаНомерДокументовОплаты.Очистить();
				Если ТипЗнч(СтрокаОтбораДоговор.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
					СчФ.НомерПлатежноРасчетногоДокумента = СтрокаОтбораДоговор.ДокументОснование.Номер;
					СчФ.ДатаПлатежноРасчетногоДокумента =  СтрокаОтбораДоговор.ДокументОснование.Дата;
				Иначе
					СчФ.НомерПлатежноРасчетногоДокумента = ОбщегоНазначенияСервер.НомерНаПечать(СтрокаОтбораДоговор.ДокументОснование);
					СчФ.ДатаПлатежноРасчетногоДокумента = СтрокаОтбораДоговор.ДокументОснование.Дата;
				КонецЕсли;
		
				СтрокаПРД = СчФ.ДатаНомерДокументовОплаты.Добавить();
				СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= СчФ.ДатаПлатежноРасчетногоДокумента;
				СтрокаПРД.НомерПлатежноРасчетногоДокумента	= СчФ.НомерПлатежноРасчетногоДокумента;
				
				СуммаПоСтроке = СтрокаОтбораДоговор.Сумма;
				СуммаНДСПоСтроке = СтрокаОтбораДоговор.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаОтбораДоговор.СтавкаНДС;
				Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
					Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
						Если СуммаПоСтроке = 0 Тогда Прервать;
						ИначеЕсли СтрокаСтарая.Сумма = 0 Тогда Продолжить; КонецЕсли;
					
						Если СтрокаОтбораДоговор.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
							НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
							НоваяСтрокаПоСуммам.Содержание = СтрокаСтарая.Содержание;
							НоваяСтрокаПоСуммам.Сумма = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
							НоваяСтрокаПоСуммам.СуммаНДС = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
							НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
							СуммаПоСтроке = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
							СуммаНДСПоСтроке = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
							СтрокаСтарая.Сумма = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
							СтрокаСтарая.СуммаНДС = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;								
						КонецЕсли;
					КонецЦикла;
					
					Если СуммаПоСтроке <> 0 Тогда
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						НоваяСтрокаПоСуммам.Сумма = СуммаПоСтроке;
						НоваяСтрокаПоСуммам.СуммаНДС = СуммаНДСПоСтроке;
						НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
						НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					КонецЕсли;
				Иначе
					НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаОтбораДоговор);
					НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					Если НоваяСтрокаПоСуммам.Номенклатура.Услуга Тогда
						НоваяСтрокаПоСуммам.Содержание = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс.НаименованиеПолное;
					КонецЕсли;
				КонецЕсли;
				
				СчФ.Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
			КонецЦикла;
			
			СообщениеОбОшибке = СчФ.ПроверитьВозможностьЗаписиСФ(ОшибкаФормирования);
			Если ОшибкаФормирования Тогда
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке("Строка "+Строка(СтрокаОтбораДоговор.НомерСтроки)+", не выписан счет-фактура налогового агента."+Символы.ПС+СообщениеОбОшибке);
					СтрокаОтбораДоговор.СчетФактураСформирован = Ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли; 
				
			Попытка
				НовыйСФ = СчФ.ЭтоНовый();
				СчФ.КодВидаОперации="06";
				СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					Сообщить(?(НовыйСФ,"Выписан", "Обновлен") + " счет-фактура налогового агента по строке " + Строка(СтрокаОтбораДоговор.НомерСтроки) + " № " + СчФ.Номер + " от " + СчФ.Дата);
					СтрокаОтбораДоговор.СчетФактураСформирован = Истина;
					СтрокаОтбораДоговор.СчетФактура = СчФ.Ссылка;
				КонецЦикла;
			Исключение
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке(?(НовыйСФ, "Не выписан", "Не обновлен") + " счет-фактура налогового агента по строке " + Строка(СтрокаОтбораДоговор.НомерСтроки));
					СтрокаОтбораДоговор.СчетФактураСформирован = Ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
			КонецПопытки;
		КонецЦикла;   		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "")
	ЗаполнитьСтрокиДокумента();
	Если Объект.Список.Количество()=0 Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - начисления не обнаружены"
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Регистрация счетов-фактур налогового агента не требуется:"+СтрокаСообщения, , , СтатусСообщения.Информация);
		КонецЕсли;
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверкаЗаполненияТабличнойЧасти(Отказ)
	СтруктураОбязательныхПолей = Новый структура("Контрагент, ДоговорКонтрагента, ДокументОснование, Сумма, СтавкаНДС, Дата");
	КолонкиСписка = РеквизитФормыВЗначение("Объект").Список.ВыгрузитьКолонки();
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из Объект.Список Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер "+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " : ";
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если Не ЗначениеЗаполнено(Значение) Тогда
				ПредставлениеРеквизита = КолонкиСписка.Колонки[КлючЗначение.Ключ].Заголовок;
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещения

&НаКлиенте
Процедура ОбработчикОповещения_Заполнить(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Список.Очистить();
		ЗаполнитьДокумент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_ОчиститьСостав(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Список.Очистить();
	Иначе
		Параметры.СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя="Организация" И Объект.Список.Количество() > 0 Тогда
		ТекстВопроса = "При смене организации необходимо очистить табличную часть. Очистить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_ОчиститьСостав", ЭтотОбъект, Новый Структура("СтандартнаяОбработка", СтандартнаяОбработка)), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличной части "Список"

&НаКлиенте
Процедура тпСписок_ПриИзменении(Элемент)
	ИмяЭлемента=СтрЗаменить(Элемент.Имя, "Список", "");
	ТекущиеДанные=Элементы.Список.ТекущиеДанные;
	
	Если (ИмяЭлемента="Сумма" ИЛИ ИмяЭлемента="СтавкаНДС") И ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) Тогда
		ТекущиеДанные.СуммаНДС = ЦенообразованиеСервер.РассчитатьСуммуНДС(ТекущиеДанные.Сумма, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Отказ = Ложь;
	СообщениеОбОшибке = "Регистрация не выполнена.";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана организация";
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата начала заполнения";
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата окончания заполнения";
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.НачалоПериода > Объект.КонецПериода Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - дата начала заполнения больше даты окончния";
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить(СообщениеОбОшибке);
		Возврат;
	КонецЕсли; 
	
	Если Объект.Список.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_Заполнить", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьДокумент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	Отказ = Ложь;
	ПроверкаЗаполненияТабличнойЧасти(Отказ);
	Если Отказ Тогда
		ПоказатьПредупреждение(, "Некорректно заполнен список авансов для формирования счетов-фактур. Обработка остановлена");
		Для Каждого СтрокаТаблицы Из Объект.Список Цикл
			СтрокаТаблицы.СчетФактураСформирован = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	СформироватьСчетаФактуры(ЕстьОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда 
		Объект.НачалоПериода = НачалоКвартала(ТекущаяДата());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда 
		Объект.КонецПериода = КонецКвартала(ТекущаяДата());
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
КонецПроцедуры

