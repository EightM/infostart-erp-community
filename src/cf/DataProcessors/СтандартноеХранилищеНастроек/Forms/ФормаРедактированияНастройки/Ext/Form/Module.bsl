Перем ТЗДоступныхТипов, ПроизвольноеЗначение экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьТЗДоступныехТипов();
	ВремТЗ = ТЗДоступныхТипов.Скопировать();
	ВремТЗ.Свернуть("ГруппаТипов");
	//МассивИменТипов = ТЗДоступныхТипов.ВыгрузитьКолонку("Представление");
	МассивИменТипов = ВремТЗ.ВыгрузитьКолонку("ГруппаТипов");
	СВ = Элементы.ТипДанныхСтрока.СписокВыбора;
	для каждого текТип из МассивИменТипов Цикл
		СВ.Добавить(текТип);
	КонецЦикла;
	ПроизвольноеЗначение = ПолучитьИзВременногоХранилища(Параметры.ПроизвольноеЗначениеВХ);
	НайденныеСтроки = ТЗДоступныхТипов.НайтиСтроки(Новый Структура("Тип",ТипЗнч(ПроизвольноеЗначение)));
	Если НайденныеСтроки.Количество() = 0 Тогда 
		ТипДанныхСтрока = "";
	Иначе
		ТипДанныхСтрока = НайденныеСтроки[0].ГруппаТипов;	
	КонецЕсли;
	ПоказатьЗначение1(Истина);
	//*** ЭтотОбъект.КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	ЭтаФорма.КлючСохраненияПоложенияОкна=Строка(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ПоказатьЗначение1(ПриОткрытии = Ложь)
	Если ПриОткрытии Тогда
		ПроизвольноеЗначение = ПолучитьИзВременногоХранилища(Параметры.ПроизвольноеЗначениеВХ);
		Если ТипДанныхСтрока = "ПростойТип" Тогда
			ЭтоПростойТипЗначений = Истина;
		Иначе
			ЭтоПростойТипЗначений = Ложь;
		КонецЕсли;
	Иначе 
		Если не ЭтоПростойТип Тогда
			ПроизвольноеЗначение = ТЗ.Выгрузить();
			ЭтоПростойТипЗначений = Ложь;
		Иначе
			ПроизвольноеЗначение = ПолеВвода;
			ЭтоПростойТипЗначений = Истина;
		КонецЕсли;
	КонецЕсли;
	//настоящий тип	
	ТипДанных = ТипЗнч(ПроизвольноеЗначение);
	ГруппаТипов = ТипДанныхСтрока;
	Если ГруппаТипов = "ПростойТип" Тогда
		Если ЭтоПростойТипЗначений Тогда
			ПоказатьПростойТип(ПроизвольноеЗначение);
		Иначе
			ПоказатьПростойТип(Неопределено);
		КонецЕсли;
	ИначеЕсли ГруппаТипов = "ТаблицаЗначений" Тогда
		НоваяТЗ = ПреобразоватьТипКТЗ(ГруппаТипов,ПроизвольноеЗначение);
		ПоказатьТЗ(НоваяТЗ);	
	ИначеЕсли ГруппаТипов = "Соответствие" Тогда
		НоваяТЗ = ПреобразоватьТипКТЗ(ГруппаТипов,ПроизвольноеЗначение);
		ПоказатьТЗ(НоваяТЗ);
	ИначеЕсли ГруппаТипов = "СписокЗначений" или ГруппаТипов = "Массив" Тогда
		НоваяТЗ = ПреобразоватьТипКТЗ(ГруппаТипов,ПроизвольноеЗначение);
		ПоказатьТЗ(НоваяТЗ);
	ИначеЕсли ГруппаТипов = "Структура" Тогда
		НоваяТЗ = ПреобразоватьТипКТЗ(ГруппаТипов,ПроизвольноеЗначение);
		ПоказатьТЗ(НоваяТЗ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьПростойТип(зн)
	Элементы.ПолеВвода.Видимость = Истина;	
	Элементы.ТЗ.Видимость = Ложь;
	ЭтоПростойТип = Истина;
	ПолеВвода = зн;
КонецПроцедуры

&НаСервере
Процедура ПоказатьТЗ(НоваяТЗ)
	Элементы.ПолеВвода.Видимость = Ложь;	
	Элементы.ТЗ.Видимость = Истина;
	ЭтоПростойТип = Ложь;
	ВывестиТаблицуНаФорму(ЭтаФорма,"ТЗ",НоваяТЗ,Ложь);
КонецПроцедуры

&НаСервере
Функция ПреобразоватьТипКТЗ(ТипЧто,Значение)
	ТипЗначения = ТипЗнч(Значение);
	Если  ТипЧто = "Соответствие" или ТипЧто = "Структура" Тогда
		Табл = новый ТаблицаЗначений;
		Табл.Колонки.Добавить("Ключ",новый ОписаниеТипов("Строка"),"Ключ");
		Табл.Колонки.Добавить("Значение",,"Значение");
		//заполнить Данные
		Если ТипЗначения = Тип("Соответствие") или ТипЗначения = Тип("Структура") Тогда
			для каждого соотв из Значение Цикл
				новстрТЗ = Табл.Добавить();
				//>>
				Если ТипЗнч(соотв.Значение)=Тип("ТаблицаЗначений") ИЛИ ТипЗнч(соотв.Значение)=Тип("ДеревоЗначений") Тогда //проверить
					Если соотв.Значение.Колонки.Найти("Ключ")<>Неопределено Тогда 
						новстрТЗ.Ключ = соотв.Ключ;
					КонецЕсли;
					Если соотв.Значение.Колонки.Найти("Значение")<>Неопределено Тогда 
						новстрТЗ.Значение = соотв.Значение;
					КонецЕсли;
				Иначе
				//<<
					новстрТЗ.Ключ = соотв.Ключ;
					новстрТЗ.Значение = соотв.Значение;
				//>>
				КонецЕсли;
				//<<
			КонецЦикла;
		ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений")  Тогда
			для каждого СтрокаЗначения из Значение Цикл
				новстрТЗ = Табл.Добавить();
				Если Значение.Колонки.Найти("Ключ")<>Неопределено Тогда 
					новстрТЗ.Ключ = СтрокаЗначения.Ключ;
				КонецЕсли;
				Если Значение.Колонки.Найти("Значение")<>Неопределено Тогда 
					новстрТЗ.Значение = СтрокаЗначения.Значение;
				КонецЕсли;
			КонецЦикла;	
		Иначе
			//не преобразовываем
		КонецЕсли;
		Возврат Табл;
	ИначеЕсли ТипЧто = "ТаблицаЗначений" Тогда
		Если ТипЗначения = Тип("ТаблицаЗначений") Тогда
			Возврат Значение;
		Иначе
			Возврат новый ТаблицаЗначений;
		КонецЕсли;
	ИначеЕсли ТипЧто = "Массив" ТОгда
		Табл = новый ТаблицаЗначений;
		Табл.Колонки.Добавить("Значение",,"Значение");
		//заполнить Данные
		Если ТипЗначения = Тип("СписокЗначений") или  ТипЗначения = Тип("Массив") Тогда
			для каждого эл из Значение Цикл
				НовСтрокаТабл = Табл.Добавить();
				НовСтрокаТабл.Значение = эл;
			КонецЦикла;
		ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") и значение.Колонки.Количество()>0 Тогда
			для каждого стрЗначения из Значение Цикл
				НовСтрокаТабл = Табл.Добавить();
				Если значение.Колонки.Найти("Значение")<>неопределено Тогда
					НовСтрокаТабл.Значение = стрЗначения.Значение;
				Иначе 
					НовСтрокаТабл.Значение = стрЗначения[0];
				КонецЕсли;
			КонецЦикла;						
		Иначе
			//не преобразовываем
		КонецЕсли;
		Возврат Табл;
	ИначеЕсли ТипЧто = "СписокЗначений" ТОгда
		Табл = новый ТаблицаЗначений;
		Табл.Колонки.Добавить("Значение",,"Значение");
		Табл.Колонки.Добавить("Представление",новый ОписаниеТипов("Строка"),"Представление");
		Табл.Колонки.Добавить("Пометка",новый ОписаниеТипов("Булево"),"Пометка");
		//заполнить Данные 
		Если ТипЗначения = Тип("СписокЗначений") Тогда
			для каждого эл из Значение Цикл
				НовСтрокаТабл = Табл.Добавить();
				НовСтрокаТабл.Значение = эл.Значение;
				НовСтрокаТабл.Представление = эл.Представление;
				НовСтрокаТабл.Пометка = эл.Пометка;
			КонецЦикла;	
		ИначеЕсли  ТипЗначения = Тип("Массив") Тогда
			для каждого эл из Значение Цикл
				НовСтрокаТабл = Табл.Добавить();
				НовСтрокаТабл.Значение = эл;
			КонецЦикла;
		ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") и значение.Колонки.Найти("Значение")<>неопределено Тогда
			для каждого стрЗначения из Значение Цикл
				НовСтрокаТабл = Табл.Добавить();
				НовСтрокаТабл.Значение = стрЗначения.Значение;
				Если значение.Колонки.Найти("Представление")<>неопределено Тогда
					//НовСтрокаТабл.Значение = стрЗначения.Значение;	
					//>>
					НовСтрокаТабл.Представление = стрЗначения.Представление;
					//<<
				КонецЕсли;
				Если значение.Колонки.Найти("Пометка")<>неопределено Тогда
					НовСтрокаТабл.Значение = стрЗначения.Пометка;	
				КонецЕсли;
			КонецЦикла;						
		Иначе
			//не преобразовываем
		КонецЕсли;
		Возврат Табл;
	Иначе 
		//Сообщить("Преобразование к ТЗ не удалось");
		Возврат новый ТаблицаЗначений;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПреобразоватьТЗКТипу()
	ТаблицаДанных = ТЗ.Выгрузить();
	ГруппаТипов = ТипДанныхСтрока;
	Если  ГруппаТипов = "ТаблицаЗначений" Тогда
		Возврат ТаблицаДанных;
	ИначеЕсли  ГруппаТипов = "Соответствие" Тогда
		//показать как соответствие
		ЗначениеВозврата = новый Соответствие;
		Для каждого стрТЗ из ТаблицаДанных Цикл
			ЗначениеВозврата.Вставить(стрТЗ.Ключ,стрТЗ.Значение);
		КонецЦикла;
		Возврат ЗначениеВозврата;
	ИначеЕсли ГруппаТипов = "Структура" Тогда
		ЗначениеВозврата = новый Структура;
		Для каждого стрТЗ из ТаблицаДанных Цикл
			ЗначениеВозврата.Вставить(стрТЗ.Ключ,стрТЗ.Значение);
		КонецЦикла;
		Возврат ЗначениеВозврата;
	ИначеЕсли ГруппаТипов = "Массив" Тогда
		ЗначениеВозврата = новый Массив;
		Для каждого стрТЗ из ТаблицаДанных Цикл
			ЗначениеВозврата.Добавить(стрТЗ[0]);
		КонецЦикла;
		Возврат ЗначениеВозврата;
	ИначеЕсли ГруппаТипов = "СписокЗначений" Тогда
		ЗначениеВозврата = новый СписокЗначений;
		Для каждого стрТЗ из ТаблицаДанных Цикл
			ЗначениеВозврата.Добавить(стрТЗ.Значение,стрТЗ.Представление,стрТЗ.Пометка);
		КонецЦикла;	
		Возврат ЗначениеВозврата;
	Иначе 
		//Сообщить("Преобразование не выполнено!");
		Возврат ТаблицаДанных;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЗаполнитьТЗДоступныехТипов() 
	//ТЗДоступныхТипов.Очистить();
	ТЗДоступныхТипов = новый ТаблицаЗначений;
	ТЗДоступныхТипов.Колонки.Добавить("Тип");
	ТЗДоступныхТипов.Колонки.Добавить("Представление");
	ТЗДоступныхТипов.Колонки.Добавить("ГруппаТипов");
	//простые
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("Строка");
	НовСтр.Представление = "Строка";
	НовСтр.ГруппаТипов = "ПростойТип";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("Число");
	НовСтр.Представление = "Число";
	НовСтр.ГруппаТипов = "ПростойТип";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("Булево");
	НовСтр.Представление = "Булево";
	НовСтр.ГруппаТипов = "ПростойТип";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("Дата");
	НовСтр.Представление = "Дата";
	НовСтр.ГруппаТипов = "ПростойТип";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("ТаблицаЗначений");
	НовСтр.Представление = "ТаблицаЗначений";
	НовСтр.ГруппаТипов = "ТаблицаЗначений";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("Массив");
	НовСтр.Представление = "Массив";
	НовСтр.ГруппаТипов = "Массив";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("СписокЗначений");
	НовСтр.Представление = "СписокЗначений";
	НовСтр.ГруппаТипов = "СписокЗначений";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("Соответствие");
	НовСтр.Представление = "Соответствие";
	НовСтр.ГруппаТипов = "Соответствие";
	НовСтр = ТЗДоступныхТипов.Добавить();
	НовСтр.тип = Тип("Структура");
	НовСтр.Представление = "Структура";
	НовСтр.ГруппаТипов = "Структура";
	//ссылочные
	ПредставлениеНач = "Справочник.";
	Для каждого ПростойТип из Справочники.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "Перечисление.";
	Для каждого ПростойТип из Перечисления.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "Документ.";
	Для каждого ПростойТип из Документы.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "ПланВидовХарактеристик.";
	Для каждого ПростойТип из ПланыВидовХарактеристик.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "ПланСчетов.";
	Для каждого ПростойТип из ПланыСчетов.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "ПланВидовРасчета";
	Для каждого ПростойТип из ПланыВидовРасчета.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "ПланОбмена";
	Для каждого ПростойТип из ПланыОбмена.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "БизнесПроцесс";
	Для каждого ПростойТип из БизнесПроцессы.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
	ПредставлениеНач = "Задача";
	Для каждого ПростойТип из Задачи.ТипВсеСсылки().Типы() Цикл
		НовСтр = ТЗДоступныхТипов.Добавить();
		НовСтр.тип = ПростойТип;
		НовСтр.Представление = ПредставлениеНач+Строка(ПростойТип);
		НовСтр.ГруппаТипов = "ПростойТип";
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ТипДанныхСтрокаПриИзменении(Элемент)
	ПоказатьЗначение1();
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуНаФорму(УФ,ИмяТЗНаФорме,НовТЗ,ТолькоПросмотр = Ложь, ТЗОбработчиковСобытий = Неопределено) Экспорт
	//1. Удалить реквизиты
	МассивУдаляемыхРеквизитов = УФ.ПолучитьРеквизиты(ИмяТЗНаФорме);
	МассивИменУдаляемыхРеквизитов = Новый Массив;
	Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
	    МассивИменУдаляемыхРеквизитов.Добавить(ИмяТЗНаФорме + "." + Элемент.Имя);
	КонецЦикла;
	УФ.ИзменитьРеквизиты(,МассивИменУдаляемыхРеквизитов);	
	//1.5. Удалить элементы формы
	Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
	    УдаляемыйЭлемент = УФ.Элементы.Найти(ИмяТЗНаФорме + Элемент.Имя);
	    УФ.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
   //2. Добавить реквизиты
    МассивДобавляемыхРеквизитов = Новый Массив; 
    МассивДобавленныхКолонокТЗ = новый массив;
	Для Каждого Колонка Из НовТЗ.Колонки Цикл
		//вычитаем NULL из типов
		типЗначения = новый ОписаниеТипов(Колонка.ТипЗначения,,"NULL");
	    МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, типЗначения,ИмяТЗНаФорме ,Колонка.Заголовок));
		МассивДобавленныхКолонокТЗ.Добавить(Колонка);
    КонецЦикла;                                         
    УФ.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов,); 
   //2.5. Добавление элементов формы
	Для Каждого Колонка Из МассивДобавленныхКолонокТЗ Цикл
        НоваяКолонка = УФ.Элементы.Добавить(ИмяТЗНаФорме + Колонка.Имя, Тип("ПолеФормы"), УФ.Элементы[ИмяТЗНаФорме]); 
        НоваяКолонка.Заголовок = Колонка.Заголовок; 
        НоваяКолонка.ПутьКДанным = ИмяТЗНаФорме + "." + Колонка.Имя;
        НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
        НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 
		НоваяКолонка.ТолькоПросмотр = ТолькоПросмотр;
	КонецЦикла;
    УФ[ИмяТЗНаФорме].Загрузить(НовТЗ);
   //5. Привязка обработчиков событий
    Если ТЗОбработчиковСобытий = Неопределено Тогда
        Возврат;
    КонецЕсли;     
    Для Каждого Строка Из ТЗОбработчиковСобытий Цикл
        УФ.Элементы[Строка.ИмяЭлемента].УстановитьДействие(Строка.ИмяСобытия, Строка.ИмяЭлемента + Строка.ИмяСобытия); 
    КонецЦикла;    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВНовойФорме(Команда)
	Если Не ЭтоПростойТип Тогда
		//тз
		ТекДанные = Элементы.ТЗ.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда		
			СтруктураНастроек = ПолучитьПараметрыЗначенияРедактирования();
			ВХРедактируемоеЗначение = СтруктураНастроек.ВХРедактируемоеЗначение;
		Иначе
			Возврат;	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	//для открыти формы
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("ПроизвольноеЗначениеВХ",ВХРедактируемоеЗначение);
	ОписаниеОповещения = новый ОписаниеОповещения("РезультатОткрытияФормыПроизвольногоЗначения",ЭтаФорма,СтруктураНастроек);
	ОткрытьФорму("ВнешняяОбработка.ZhokhovM_СтандартноеХранилищеНастроек.Форма.ФормаРедактированияНастройки",ПараметрыФормы,ЭтаФорма,Строка(новый УникальныйИдентификатор()),,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыЗначенияРедактирования()
	ИмяСвойства = Элементы.ТЗ.ТекущийЭлемент.ПутьКДанным;
	ИмяСвойства = Сред(ИмяСвойства,4); //ТЗ.
	ЗначениеРедактирования = ТЗ.Найтипоидентификатору(Элементы.ТЗ.ТекущаяСтрока)[ИмяСвойства];
	ВХРедактируемоеЗначение = ПоместитьВоВременноеХранилище(ЗначениеРедактирования,ЭтаФорма.УникальныйИдентификатор);
	Возврат новый структура("ВХРедактируемоеЗначение,ИдентификаторСтроки,ИмяСвойства",ВХРедактируемоеЗначение,Элементы.ТЗ.ТекущаяСтрока,ИмяСвойства);
КонецФункции

&НаКлиенте
Процедура РезультатОткрытияФормыПроизвольногоЗначения(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьРезультатРедактирования(Результат,ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере
Процедура УстановитьРезультатРедактирования(Результат,СтруктураНастроек)
	Если Результат.ЭтоВХ Тогда
		НовЗнач = ПолучитьИзВременногоХранилища(Результат.Значение);
		УдалитьИзВременногоХранилища(Результат.Значение);
	Иначе
		НовЗнач = Результат.Значение;
	КонецЕсли;
	ТЗ.НайтиПоИдентификатору(СтруктураНастроек.ИдентификаторСтроки)[СтруктураНастроек.ИмяСвойства] = НовЗнач;
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьКолонкуТЗ(Команда)
	НовоеИмяКолонки = "";
	Если ЭтоПростойТип Тогда Возврат; КонецЕсли;

	Если ВвестиЗначение(НовоеИмяКолонки,"Имя колонки",тип("Строка")) Тогда
		Если ТипЗнч(НовоеИмяКолонки)=Тип("Массив") Тогда НовоеИмяКолонки=НовоеИмяКолонки[0]; КонецЕсли;
		
		Если ЗначениеЗаполнено(НовоеИмяКолонки) и Найти(НовоеИмяКолонки," ") = 0 и Найти(НовоеИмяКолонки,".") = 0 Тогда
			ДобавитьКолонкуТЗНаСервере(НовоеИмяКолонки);
		Иначе
			Сообщить("Некорректное имя колонки");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкуТЗНаСервере(НовоеИмяКолонки)
	ИмяТЗНаФорме = "ТЗ";
	//Добавить реквизиты
	МассивДобавляемыхРеквизитов = Новый Массив; 
	типЗначения = новый ОписаниеТипов("");
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НовоеИмяКолонки, типЗначения,ИмяТЗНаФорме,НовоеИмяКолонки));
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов,); 
	//Добавление элементов формы
	НоваяКолонка = Элементы.Добавить(ИмяТЗНаФорме + НовоеИмяКолонки, Тип("ПолеФормы"), ЭтаФорма.Элементы[ИмяТЗНаФорме]); 
	НоваяКолонка.Заголовок = НовоеИмяКолонки; 
	НоваяКолонка.ПутьКДанным = ИмяТЗНаФорме + "." + НовоеИмяКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 
	НоваяКолонка.ТолькоПросмотр = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура Сохранить(Команда)
	Закрыть(ПолучитьСтруктуруВозвратаФормы());
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруВозвратаФормы()
	Если не ЭтоПростойТип Тогда
		Возврат Новый структура("Значение, ЭтоВХ", ПоместитьВоВременноеХранилище(ПреобразоватьТЗКТипу(), новый УникальныйИдентификатор), Истина);	
	Иначе
		Возврат Новый структура("Значение, ЭтоВХ", ПолеВвода, Ложь);
	КонецЕсли;
КонецФункции
