&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="РасширениеСкачатьУстановить" Тогда
		Если Не МожноУстановитьРасширение() Тогда Возврат; КонецЕсли; 
		РежимРаботыРасширения="СкачатьУстановить";
		ПрочитатьДанные("ПрочитатьФайлРасширения");

	ИначеЕсли Команда.Имя="РасширениеСкачать" Тогда
		РежимРаботыРасширения="Скачать";
		ПрочитатьДанные("ПрочитатьФайлРасширения");

	ИначеЕсли Команда.Имя="РасширениеУстановить" Тогда
		стрИмя=СокрЛП(?(ПустаяСтрока(Идентификатор), Наименование, Идентификатор));
		Файл=Новый Файл(КаталогРасширений+"\"+стрИмя+".cfe");
		Если Не Файл.Существует() Тогда
			Сообщить("Фай расширения {"+Файл.ПолноеИмя+"} отсутствует!");
			Возврат;
		КонецЕсли;
		УстановитьРасширениеНаСервере(Новый ДвоичныеДанные(Файл.ПолноеИмя));

	ИначеЕсли Команда.Имя="ОтправитьСообщение" Тогда
		ОтправитьКомментарий();

	ИначеЕсли Команда.Имя="ОписаниеЗаписать" Тогда
		ОтправитьОписание();

	ИначеЕсли Команда.Имя="ОбновитьПубликацию" Тогда
		ОбновитьПубликацию();
		
	ИначеЕсли Команда.Имя="УдалитьПубликацию" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОповещения_УдалитьПубликацию", ЭтотОбъект), "Публикация будет удалена из магазина, продолжить?", РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет, "Внимание", КодВозвратаДиалога.Нет);

	ИначеЕсли Команда.Имя="ПрочитатьКомментарии" Тогда
		ПрочитатьДанные(Команда.Имя);

	ИначеЕсли Команда.Имя="ПрочитатьОплату" Тогда
		ПрочитатьДанные(Команда.Имя);
		
	ИначеЕсли Команда.Имя="ПрочитатьСкачивания" Тогда
		ПрочитатьДанные(Команда.Имя);
		
	ИначеЕсли Команда.Имя="ПрочитатьОценки" Тогда
		ПрочитатьДанные(Команда.Имя);

	ИначеЕсли Лев(Команда.Имя, 6)="Оценка" Тогда
		Оценка=Прав(Команда.Имя, 1); ОтправитьОценку();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие назначения

&НаСервере
Функция ДанныеУпаковать(Данные)
	СтрокаBase64=СериализаторXDTO.XMLСтрока(Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9)));
	Возврат Base64Значение(СтрокаBase64); //Возвращаем сжатые двоичные данные
КонецФункции

&НаСервере
Функция ДанныеРаспаковать(Данные)
	СтрокаBase64=Base64Строка(Данные);
    Возврат СериализаторXDTO.XMLЗначение(Тип("ХранилищеЗначения"), СтрокаBase64).Получить();
КонецФункции

&НаКлиенте
Функция СоединениеHTTP()
	Возврат Новый HTTPСоединение("84.201.247.51", 8181, "Пользователь", "1",, 600); //Новый ЗащищенноеСоединениеOpenSSL
КонецФункции

&НаСервере
Процедура ВывестиИндикатор(ЗначениеИндикатора)
	Индикатор=ЗначениеИндикатора;
КонецПроцедуры

&НаСервере
Функция МожноУстановитьРасширение()
	РезультатПоиска=тзСведения_НайтиЗначение("МонопольныйРежим");
	Если НЕ РезультатПоиска=Неопределено И РезультатПоиска=Истина Тогда
		Если НЕ МонопольныйРежим() Тогда
			МонопольныйРежим=Истина;
			Попытка УстановитьМонопольныйРежим(Истина);
			Исключение МонопольныйРежим=Ложь;
			КонецПопытки; 
			Если НЕ МонопольныйРежим Тогда
				Сообщить("Для установки расширения требуется монопольный режим!");
				Возврат Ложь;
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции	 

&НаКлиенте
Процедура ПоказатьДанныеПользователя(стрПользователь)
	Если ПустаяСтрока(стрПользователь) Тогда Возврат; КонецЕсли; 
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Логин", Логин);
	СтруктураПараметров.Вставить("Пароль", Пароль);
	СтруктураПараметров.Вставить("Пользователь", стрПользователь);

	ОткрытьФорму(стрЗаменить(ЭтотОбъект.ИмяФормы, "ФормаПубликации", "ФормаДанныеПользователя"), СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление страницами

&НаКлиенте
Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если НомерПубликации=0 Тогда Возврат; КонецЕсли; 
	Если ТекущаяСтраница.Имя="СтраницаОписание" Тогда
		Если ПустаяСтрока(Описание.ПолучитьТекст()) Тогда
			ПрочитатьДанные("ПрочитатьОписание");
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя="СтраницаКомментарии" Тогда
		Если ПустаяСтрока(Комментарии) Тогда
			ПрочитатьДанные("ПрочитатьКомментарии");
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя="СтраницаОплата" Тогда
		Если тзОплата.Количество()=0 Тогда
			ПрочитатьДанные("ПрочитатьОплату");
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя="СтраницаСкачивания" Тогда
		Если тзСкачивания.Количество()=0 Тогда
			ПрочитатьДанные("ПрочитатьСкачивания");
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя="СтраницаОценки" Тогда
		Если тзОценки.Количество()=0 Тогда
			ПрочитатьДанные("ПрочитатьОценки");
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ОбработчикОповещения_ВыборКартинки(Параметр1, Параметр2) Экспорт
	Если НЕ ТипЗнч(Параметр1)=Тип("Массив") Тогда Возврат; КонецЕсли;
	АдресКартинки=ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Параметр1[0]), УникальныйИдентификатор);
КонецПроцедуры	 

&НаСервере
Процедура ОбработчикОповещения_ВыборФайла(Параметр1, Параметр2) Экспорт
	Если ТипЗнч(Параметр1)=Тип("Массив") Тогда
		ПутьКФайлу=Параметр1[0];
	КонецЕсли;
КонецПроцедуры	 

&НаКлиенте
Процедура ОбработчикОповещения_ЧтениеДанных(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;

	Если Параметр2.КоличествоПрочитанныхБайт < Параметр2.Поток.Размер() Тогда
		Параметр2.Индекс=Параметр2.КоличествоПрочитанныхБайт;

		ОсталосьПрочитатьБайт=Параметр2.Поток.Размер()-Параметр2.КоличествоПрочитанныхБайт;
		ПрочитатьКоличествоБайт=?(ОсталосьПрочитатьБайт < РазмерПакета, ОсталосьПрочитатьБайт, РазмерПакета);

		Параметр2.КоличествоПрочитанныхБайт=Параметр2.КоличествоПрочитанныхБайт+ПрочитатьКоличествоБайт;

		ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ЧтениеДанных", ЭтотОбъект, Параметр2);
		Параметр2.Поток.НачатьЧтение(ОписаниеОповещения, Параметр2.БуферДвоичныхДанных, Параметр2.Индекс, ПрочитатьКоличествоБайт);

		ВывестиИндикатор(Цел(100/Параметр2.Поток.Размер()*Параметр2.Индекс));
	Иначе
		ВывестиИндикатор(100);

		ПотокВПамяти=Новый ПотокВПамяти(Параметр2.БуферДвоичныхДанных);
		Данные=ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
		Если Параметр2.ИмяЗапроса="ПрочитатьФайлРасширения" Тогда
			УстановитьРасширение(Данные);
		ИначеЕсли Параметр2.ИмяЗапроса="ПрочитатьОписание" Тогда
			ОбновитьДанныеРеквизита(Данные, "Описание");
		ИначеЕсли Параметр2.ИмяЗапроса="ПрочитатьКомментарии" Тогда
			ОбновитьДанныеРеквизита(Данные, "Комментарии");
		ИначеЕсли Параметр2.ИмяЗапроса="ПрочитатьОплату" Тогда
			ОбновитьДанныеТаблицы(Данные, "тзОплата")
		ИначеЕсли Параметр2.ИмяЗапроса="ПрочитатьСкачивания" Тогда
			ОбновитьДанныеТаблицы(Данные, "тзСкачивания")
		ИначеЕсли Параметр2.ИмяЗапроса="ПрочитатьОценки" Тогда
			ОбновитьДанныеТаблицы(Данные, "тзОценки");
			тзОценки_ОбновитьПредставление();
		КонецЕсли;
		Элементы["Индикатор"].Видимость=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещения_УдалитьПубликацию(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;

	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("Логин", Логин);
	СтруктураДанных.Вставить("Пароль", Пароль);
	СтруктураДанных.Вставить("НомерПубликации", НомерПубликации);

	//ExtStoreHTTP
	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/УдалитьПубликацию");
	Запрос.УстановитьТелоИзДвоичныхДанных(ДанныеУпаковать(СтруктураДанных));

	Ответ=СоединениеHTTP().Записать(Запрос);
	Если НЕ Ответ.КодСостояния=200 Тогда
		Сообщить("Удаление публикации, ошибка: "+Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Возврат;
	КонецЕсли;

	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("Действие", "УдалитьПубликацию");
	СтруктураВозврата.Вставить("НомерПубликации", НомерПубликации);

	ОповеститьОВыборе(СтруктураВозврата);
КонецПроцедуры	 

////////////////////////////////////////////////////////////////////////////////
// Редактирование публикации

&НаСервере
Функция УпаковатьСтруктуруДанных(Вид="Описание", СтруктураДанных=Неопределено)
	Если СтруктураДанных=Неопределено Тогда
		СтруктураДанных=Новый Структура;
	КонецЕсли;
	СтруктураДанных.Вставить("Логин", СокрЛП(Логин));
	СтруктураДанных.Вставить("Пароль", СокрЛП(Пароль));
	СтруктураДанных.Вставить("НомерПубликации", НомерПубликации);
	Если Вид="Описание" Тогда
		СтруктураДанных.Вставить(Вид, Описание);
	ИначеЕсли Вид="Комментарий" Тогда
		СтруктураДанных.Вставить(Вид, Сообщение);
	ИначеЕсли Вид="Оценка" Тогда
		СтруктураДанных.Вставить(Вид, Оценка);
	КонецЕсли;
	Возврат ДанныеУпаковать(СтруктураДанных);
КонецФункции

&НаКлиенте
Процедура ОтправитьОписание()
	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/ОбновитьОписание");
	Запрос.УстановитьТелоИзДвоичныхДанных(УпаковатьСтруктуруДанных("Описание"));
	Ответ=СоединениеHTTP().Записать(Запрос);
	стрСообщение=?(Ответ.КодСостояния=200, "", " Обновление описания, ошибка: ");
	Сообщить(стрСообщение+Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПубликацию()
	Файл=Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда		
		Сообщить("Укажите файл расширения!");
		Возврат;
	КонецЕсли; 

	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("Наименование", Наименование);
	СтруктураДанных.Вставить("Идентификатор", Идентификатор);
	СтруктураДанных.Вставить("ИдентификаторКлиента", тзСведения_НайтиЗначение("ИдентификаторКлиента"));
	СтруктураДанных.Вставить("Версия", Версия);
	СтруктураДанных.Вставить("Платформа", Платформа);
	СтруктураДанных.Вставить("Конфигурация", Конфигурация);
	СтруктураДанных.Вставить("Анонс", Анонс);
	СтруктураДанных.Вставить("МонопольныйРежим", тзСведения_НайтиЗначение("МонопольныйРежим"));
	СтруктураДанных.Вставить("ЗакрытыйКод", тзСведения_НайтиЗначение("ЗакрытыйКод"));
	СтруктураДанных.Вставить("Стоимость", тзСведения_НайтиЗначение("Стоимость"));
	СтруктураДанных.Вставить("Активность", тзСведения_НайтиЗначение("Активность"));
	СтруктураДанных.Вставить("Файл", Новый ДвоичныеДанные(ПутьКФайлу));
	Если ЗначениеЗаполнено(АдресКартинки) И ЭтоАдресВременногоХранилища(АдресКартинки) Тогда
		СтруктураДанных.Вставить("Картинка", ПолучитьИзВременногоХранилища(АдресКартинки));
	КонецЕсли;
	
	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/ОбновитьПубликацию");
	Запрос.УстановитьТелоИзДвоичныхДанных(УпаковатьСтруктуруДанных("Описание", СтруктураДанных));

	Ответ=СоединениеHTTP().Записать(Запрос);
	Если НЕ Ответ.КодСостояния=200 Тогда
		Сообщить("Публикация расширения, ошибка: "+Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Возврат;
	КонецЕсли;

	Сообщить("Публикация успешно обновлена!");
	Если НомерПубликации=0 Тогда
		НомерПубликации=Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКомментарий()
	Если НомерПубликации=0 Тогда
		Сообщить("Необходимо опубликовать расширение!");
		Возврат;
	КонецЕсли; 

	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/КомментарийНаПубликацию");
	Запрос.УстановитьТелоИзДвоичныхДанных(УпаковатьСтруктуруДанных("Комментарий"));

	Ответ=СоединениеHTTP().Записать(Запрос);
	Если НЕ Ответ.КодСостояния=200 Тогда
		Сообщить("Отправка комментария, ошибка: "+Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Возврат;
	КонецЕсли;

	Сообщение=""; ПрочитатьДанные("ПрочитатьКомментарии");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОценку()
	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/УстановитьОценку");
	Запрос.УстановитьТелоИзДвоичныхДанных(УпаковатьСтруктуруДанных("Оценка"));
	Ответ=СоединениеHTTP().Записать(Запрос);
	стрСообщение=?(Ответ.КодСостояния=200, "", " Оценка расширения, ошибка: ");
	ПоказатьОповещениеПользователя(стрСообщение+Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	//*** Элементы.Оценка.Заголовок="Моя оценка: ("+СокрЛП(Оценка)+")";
	ПрочитатьДанные("ПрочитатьОценки");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Расширение

&НаКлиенте
Процедура УстановитьРасширение(Данные)
	ДвоичныеДанные=ДанныеРаспаковать(Данные);
	Если НЕ ТипЗнч(ДвоичныеДанные)=Тип("ДвоичныеДанные") Тогда Возврат; КонецЕсли;

	стрИмя=СокрЛП(?(ПустаяСтрока(Идентификатор), Наименование, Идентификатор));
	ДвоичныеДанные.Записать(КаталогРасширений+"\"+стрИмя+".cfe");

	Если РежимРаботыРасширения="Скачать" Тогда
		НачатьЗапускПриложения(, КаталогРасширений);
		
	ИначеЕсли РежимРаботыРасширения="СкачатьУстановить" Тогда
		УстановитьРасширениеНаСервере(ДвоичныеДанные);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьРасширениеНаСервере(ДвоичныеДанные)
	МассивСтрок=РасширенияКонфигурации.Получить(Новый Структура("Имя", СокрЛП(Идентификатор)));
	Если МассивСтрок.Количество()=1 Тогда
		ОбъектРасширение=МассивСтрок[0];		
	Иначе
		ОбъектРасширение=РасширенияКонфигурации.Создать();
	КонецЕсли;
	ОбъектРасширение.БезопасныйРежим=Ложь;
	//ОбъектРасширение.ИспользуетсяВРаспределеннойИнформационнойБазе=Ложь;

	Если НЕ ОбъектРасширение.ПроверитьВозможностьПрименения(ДвоичныеДанные, Ложь) Тогда
		Сообщить("Проверка возможности применения расширения не пройдена!"); Возврат;
	КонецЕсли; 

	ОбъектРасширение.Записать(ДвоичныеДанные);	
	Если МассивСтрок.Количество()=1 Тогда
		Сообщить("Расширение обновлено!");
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Чтение данных

&НаКлиенте
Процедура ЧтениеДанных(Поток, ИмяЗапроса)
	БуферДвоичныхДанных=Новый БуферДвоичныхДанных(Поток.Размер(), ПорядокБайтов.LittleEndian);	

	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Поток", Поток);
	СтруктураПараметров.Вставить("БуферДвоичныхДанных", БуферДвоичныхДанных);
	СтруктураПараметров.Вставить("Индекс", 0);
	СтруктураПараметров.Вставить("ИмяЗапроса", ИмяЗапроса);
	СтруктураПараметров.Вставить("КоличествоПрочитанныхБайт", ?(Поток.Размер()>РазмерПакета, РазмерПакета, Поток.Размер()));
	
	РазмерПакета=Цел(Поток.Размер()/5);

	ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповещения_ЧтениеДанных", ЭтотОбъект, СтруктураПараметров);
	Поток.НачатьЧтение(ОписаниеОповещения, БуферДвоичныхДанных, СтруктураПараметров.Индекс, СтруктураПараметров.КоличествоПрочитанныхБайт);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанные(ИмяМетода) 
	Если НомерПубликации=0 Тогда Возврат; КонецЕсли; 
	Индикатор=0; Элементы.Индикатор.Видимость=Истина;

	стрПараметры="?Логин="+СокрЛП(Логин)+"&Пароль="+СокрЛП(Пароль)+"&НомерПубликации="+стрЗаменить(Строка(НомерПубликации), Символы.НПП, "");
	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/"+ИмяМетода+"/"+стрПараметры);

	Ответ=СоединениеHTTP().ВызватьHTTPМетод("GET", Запрос);
	Если НЕ Ответ.КодСостояния=200 Тогда
		Сообщить(Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Элементы.Индикатор.Видимость=Ложь; Возврат;
	КонецЕсли;
	
	ЧтениеДанных(Ответ.ПолучитьТелоКакПоток(), ИмяМетода);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицы(Данные, стрРеквизит)
	тзБуфер=ДанныеРаспаковать(Данные);
	Если ТипЗнч(тзБуфер)=Тип("ТаблицаЗначений") Тогда
		ЗначениеВРеквизитФормы(тзБуфер, стрРеквизит);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРеквизита(Данные, стрРеквизит)
	ЭтаФорма[стрРеквизит]=ДанныеРаспаковать(Данные);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов шапки

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя="Файл" Тогда
		ДиалогОткрытияФайла=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла="";
		//ДиалогОткрытияФайла.Каталог=Каталог;
		ДиалогОткрытияФайла.Фильтр="Все расширения |*.cfe;";
		ДиалогОткрытияФайла.Заголовок="Выберите файл расширения";
		ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборФайла", ЭтотОбъект));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Нажатие(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="Картинка" Тогда
		СтандартнаяОбработка=Ложь;
		Если НЕ РежимРедактирования Тогда Возврат; КонецЕсли; 

		ДиалогОткрытияФайла=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла="";
		//ДиалогОткрытияФайла.Каталог=Каталог;
			//Если Фильтр="Картинки" Тогда
			//	Фильтр="Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
			//	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
			//	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
			//	+ "Формат TIFF (*.tif)|*.tif|"
			//	+ "Формат GIF (*.gif)|*.gif|"
			//	+ "Формат PNG (*.png)|*.png|"
			//	+ "Формат icon (*.ico)|*.ico|"
			//	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";
			//КонецЕсли;		
			//ДиалогОткрытияФайла.Фильтр=Фильтр;
		//ДиалогОткрытияФайла.ИндексФильтра=ИндексФильтра;
		ДиалогОткрытияФайла.Заголовок="Выберите файл картинки";
		ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ОбработчикОповещения_ВыборКартинки", ЭтотОбъект));

	ИначеЕсли Элемент.Имя="Каталог" Тогда	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Сведения"

&НаКлиенте
Процедура тзСведения_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если НЕ РежимРедактирования Тогда СтандартнаяОбработка=Ложь; Возврат; КонецЕсли; 
	Значение=Элемент.ТекущиеДанные.Значение;
	Если ТипЗнч(Значение)=Тип("Булево") Тогда
		СтандартнаяОбработка=Ложь;
		Элемент.ТекущиеДанные.Значение=Не Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тзСведения_ПередНачаломИзменения(Элемент, Отказ)
	Если НЕ РежимРедактирования Тогда Отказ=Ложь; Возврат; КонецЕсли; 
	Если Элемент.ТекущиеДанные.Идентификатор="Стоимость" ИЛИ Элемент.ТекущиеДанные.Идентификатор="ИдентификаторКлиента" Тогда Возврат; КонецЕсли; 
	Отказ=НЕ ТипЗнч(Элемент.ТекущиеДанные.Значение)=Тип("Булево")
КонецПроцедуры

&НаСервере
Процедура тзСведения_ДобавитьСтроку(Идентификатор, Представление, Значение=Неопределено)
	НоваяСтрока=тзСведения.Добавить();
	НоваяСтрока.Идентификатор=Идентификатор;
	НоваяСтрока.Представление=Представление;
	Если Параметры.Свойство(Идентификатор) Тогда
		НоваяСтрока.Значение=Параметры[Идентификатор];
	Иначе
		НоваяСтрока.Значение=Значение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура тзСведения_Инициализация()
	тзСведения_ДобавитьСтроку("ДатаПубликации", "Дата публикации");
	тзСведения_ДобавитьСтроку("ДатаОбновления", "Дата обновления");
	тзСведения_ДобавитьСтроку("Стоимость", "Стоимость", 0);
	тзСведения_ДобавитьСтроку("ЗакрытыйКод", "Закрытый код", Ложь);	
	тзСведения_ДобавитьСтроку("МонопольныйРежим", "Требуется монопольный режим", Истина);
	Если РежимРедактирования Тогда
		тзСведения_ДобавитьСтроку("Активность", "Активность", Истина);
		тзСведения_ДобавитьСтроку("ИдентификаторКлиента", "Идентификатор клиента", "");
	КонецЕсли;
	тзСведения_ДобавитьСтроку("Автор", "Автор", Логин);	
КонецПроцедуры	 

&НаСервере
Функция тзСведения_НайтиЗначение(стрИмя)
	МассивСтрок=тзСведения.НайтиСтроки(Новый Структура("Идентификатор", стрИмя));
	Если МассивСтрок.Количество()=0 Тогда Возврат Неопределено; КонецЕсли;
	Возврат МассивСтрок[0].Значение;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Оплата"

&НаКлиенте
Процедура тзОплата_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=НомерПубликации=0;
КонецПроцедуры

&НаКлиенте
Процедура тзОплата_ПередНачаломИзменения(Элемент, Отказ)
	Отказ=ЗначениеЗаполнено(Элемент.ТекущиеДанные.Дата);
	Если Отказ Тогда ПоказатьДанныеПользователя(Элемент.ТекущиеДанные.Логин); КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тзОплата_ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Отказ=Истина; Если НЕ НоваяСтрока Тогда ОтменаРедактирования=Истина; КонецЕсли;
	Если ОтменаРедактирования Тогда Отказ=Ложь; Возврат; КонецЕсли;

	Если ПустаяСтрока(Элемент.ТекущиеДанные.Логин) Тогда
		Сообщить("Ошибка: укажите имя пользователя!");
		Возврат;
	КонецЕсли;

	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("Логин", Логин);
	СтруктураДанных.Вставить("Пароль", Пароль);
	СтруктураДанных.Вставить("НомерПубликации", НомерПубликации);
	СтруктураДанных.Вставить("Пользователь", Элемент.ТекущиеДанные.Логин);

	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/ДобавитьОплату");
	Запрос.УстановитьТелоИзДвоичныхДанных(ДанныеУпаковать(СтруктураДанных));

	Ответ=СоединениеHTTP().Записать(Запрос);
	Если НЕ Ответ.КодСостояния=200 Тогда
		Сообщить("Добавление оплаты, ошибка: "+Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.ФИО=Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Элемент.ТекущиеДанные.Дата=ТекущаяДата();

	Отказ=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура тзОплата_ПередУдалением(Элемент, Отказ)
	Отказ=Истина; Если НомерПубликации=0 Тогда Возврат; КонецЕсли; 

	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("Логин", Логин);
	СтруктураДанных.Вставить("Пароль", Пароль);
	СтруктураДанных.Вставить("НомерПубликации", НомерПубликации);
	СтруктураДанных.Вставить("Пользователь", Элемент.ТекущиеДанные.Логин);

	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/УдалитьОплату");
	Запрос.УстановитьТелоИзДвоичныхДанных(ДанныеУпаковать(СтруктураДанных));

	Ответ=СоединениеHTTP().Записать(Запрос);
	Если НЕ Ответ.КодСостояния=200 Тогда
		Сообщить("Удаление оплаты, ошибка: "+Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Возврат;
	КонецЕсли;

	Отказ=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура тзОплата_Логин_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ Элемент.СписокВыбора.Количество()=0 Тогда Возврат; КонецЕсли;

	Запрос=Новый HTTPЗапрос("HTTP/hs/ExtStore/СписокПользователей?Логин="+СокрЛП(Логин)+"&Пароль="+СокрЛП(Пароль));

	Ответ=СоединениеHTTP().ВызватьHTTPМетод("GET", Запрос);
	Если НЕ Ответ.КодСостояния=200 Тогда
		Сообщить("Чтение данных списка пользователей, ошибка: "+Ответ.КодСостояния);
		Возврат; 
	КонецЕсли;

	сзДанные=ДанныеРаспаковать(Ответ.ПолучитьТелоКакДвоичныеДанные());
	Если НЕ ТипЗнч(сзДанные)=Тип("СписокЗначений") Тогда
		Сообщить("Чтение списка пользователей, ошибка структуры возвращаемых данных...");
		Возврат;
	КонецЕсли;

	Для каждого СтрокаКоллекции Из сзДанные Цикл
		Элемент.СписокВыбора.Добавить(СтрокаКоллекции.Значение, СтрокаКоллекции.Представление);
	КонецЦикла;	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Скачивания"

&НаКлиенте
Процедура тзСкачивания_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьДанныеПользователя(Элемент.ТекущиеДанные.Логин);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Комментарии"

&НаКлиенте
Процедура Комментарии_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если ДанныеСобытия.Anchor=Неопределено Тогда Возврат; КонецЕсли;
	ПоказатьДанныеПользователя(ДанныеСобытия.Anchor.nameProp);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Оценки"

&НаСервере
Процедура тзОценки_ОбновитьПредставление()
	СтруктураОценок=Новый Соответствие;
	СтруктураОценок.Вставить(1, 0);
	СтруктураОценок.Вставить(2, 0);
	СтруктураОценок.Вставить(3, 0);
	СтруктураОценок.Вставить(4, 0);
	СтруктураОценок.Вставить(5, 0);
	Для каждого СтрокаКоллекции Из тзОценки Цикл
		СтруктураОценок.Вставить(СтрокаКоллекции.Оценка, СтруктураОценок[СтрокаКоллекции.Оценка]+1);
	КонецЦикла;

	СредняяОценка=0; ВсегоГолосов=тзОценки.Количество(); Индекс=0;
	Для каждого СтрокаКоллекции Из СтруктураОценок Цикл
		Индекс=Индекс+(СтрокаКоллекции.Ключ*СтрокаКоллекции.Значение);
		стрИндекс=Строка(СтрокаКоллекции.Ключ);
		Если ВсегоГолосов=0 Тогда
			ЭтаФорма["Оценка"+стрИндекс]=0;
			Элементы["Оценка"+стрИндекс].Заголовок=стрИндекс+" (0)";
		Иначе
			ЭтаФорма["Оценка"+стрИндекс]=СтрокаКоллекции.Значение*100/ВсегоГолосов;
			Элементы["Оценка"+стрИндекс].Заголовок=стрИндекс+" ("+Строка(СтрокаКоллекции.Значение)+")";
		КонецЕсли;
	КонецЦикла;
	Если НЕ Индекс=0 И НЕ ВсегоГолосов=0 Тогда
		СредняяОценка=Окр(Индекс/ВсегоГолосов, 2);
	КонецЕсли;
	
	//Всего голосов
	ЧастиСтроки=Новый Массив;
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока("Всего голосов"));
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(ВсегоГолосов), Новый Шрифт(,18,Истина), Новый Цвет(0, 0, 255)));
	Элементы.ДекорацияВсегоОценок.Заголовок=Новый ФорматированнаяСтрока(ЧастиСтроки);
	
	//Средняя оценка
	ЧастиСтроки=Новый Массив;
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока("Средняя оценка"));
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Строка(СредняяОценка), Новый Шрифт(,18,Истина), Новый Цвет(0, 0, 255)));
	Элементы.ДекорацияСредняяОценка.Заголовок=Новый ФорматированнаяСтрока(ЧастиСтроки);	

	//Моя оценка
	МассивСтрок=тзОценки.НайтиСтроки(Новый Структура("Логин", Логин));
	Если НЕ МассивСтрок.Количество()=0 Тогда
		Элементы.Оценка.Заголовок="Моя оценка: ("+СокрЛП(МассивСтрок[0].Оценка)+")";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тзОценки_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьДанныеПользователя(Элемент.ТекущиеДанные.Логин);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("РежимРедактирования", РежимРедактирования);
	Параметры.Свойство("НоваяПубликация", НоваяПубликация);
	Параметры.Свойство("КаталогРасширений", КаталогРасширений);

	Если ПустаяСтрока(КаталогРасширений) Тогда
		КаталогРасширений=КаталогВременныхФайлов();
	КонецЕсли; 
	
	стрПоля=?(НоваяПубликация, "", ",Наименование,Версия,НомерПубликации,Идентификатор,Анонс,Конфигурация,Платформа");
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Логин,Пароль"+стрПоля);	

	Элементы.кпОписание.Видимость=РежимРедактирования;
	Элементы.Описание.ТолькоПросмотр=НЕ РежимРедактирования;
	Элементы.тзСведенияЗначение.ТолькоПросмотр=НЕ РежимРедактирования;
	Элементы.СтраницаОбщиеСведения.ТолькоПросмотр=НЕ РежимРедактирования;
	Элементы.Файл.Доступность=РежимРедактирования;
	Элементы.ОбновитьПубликацию.Видимость=РежимРедактирования;
	Элементы.УдалитьПубликацию.Видимость=РежимРедактирования;
	Элементы.СтраницаОплата.Видимость=РежимРедактирования;
	Элементы.СтраницаСкачивания.Видимость=РежимРедактирования;	

	тзСведения_Инициализация();
	
	Элементы.Индикатор.Видимость=Ложь;
	
	Если НомерПубликации=0 Тогда
		Заголовок="Создание публикации";
	КонецЕсли;

	Если Параметры.Свойство("Картинка") Тогда
		АдресКартинки=ПоместитьВоВременноеХранилище(Параметры.Картинка, УникальныйИдентификатор);
	КонецЕсли; 

	Конфигурация="АЛЬФА";
	
	тзОценки_ОбновитьПредставление();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
КонецПроцедуры
