&НаСервере
Процедура ВыгрузитьСервер()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Выгрузить(Элементы.ДокументыНаЭкспорт);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыНаИмпортСервер()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ДеревоФормы=РеквизитФормыВЗначение("ТаблицаКонтрагентов");
	ОбработкаОбъект.ЗаполнитьДокументыНаИмпорт(ДокументыКИмпорту, Элементы.ДокументыКИмпорту, ДеревоФормы);
	ЗначениеВРеквизитФормы(ДеревоФормы,"ТаблицаКонтрагентов");
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайла()
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьДокументыНаИмпортСервер();
	
	Если ДокументыКИмпорту.Количество()=0 Тогда
		Элементы.СтатуснаяСтрокаПриЗагрузке.ЦветТекста=Новый Цвет(0, 0, 255);
		Элементы.СтатуснаяСтрокаПриЗагрузке.Заголовок="Список документов для загрузки пуст.";
	Иначе
		Элементы.СтатуснаяСтрокаПриЗагрузке.Заголовок="";
	КонецЕсли;
	
	Элементы.ДокументыКИмпортуСоздатьКотрагентов.Доступность=(ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
	
	Элементы.ДокументыКИмпортуЗагружать.ТекстПодвала=ДокументыКИмпорту.Количество();
	Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала=Формат(ДокументыКИмпорту.Итог("СуммаПоступило"),"ЧЦ=12; ЧДЦ=2");
	Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала=Формат(ДокументыКИмпорту.Итог("СуммаСписано"),"ЧЦ=12; ЧДЦ=2");
	КоманднаяПанельДокументыДляИмпортаУстановитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповешения_ОтветНаВопрос(Параметр1, Параметр2) Экспорт
	Если НЕ Параметр1=КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
	ВыгрузитьСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповешения_ОтветНаВопросБанковскийСчет(Параметр1, Параметр2) Экспорт
	Если Параметр1=КодВозвратаДиалога.Да Тогда
		ПараметрыЗаполнения=Новый Структура();
		ПараметрыЗаполнения.Вставить("Организация",Объект.Организация);
		ПараметрыЗаполнения.Вставить("СчетОрганизации",Объект.БанковскийСчет);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения",ПараметрыЗаполнения, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		Объект.Программа="";
		Объект.Кодировка="";
		Объект.ФайлВыгрузки="";
		Объект.ФайлЗагрузки="";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповешения_ВыборТипаДокумента(Параметр1, Параметр2) Экспорт
	Если Параметр1=Неопределено Тогда Возврат; КонецЕсли;
	
	ПараметрыЗаполнения=Новый Структура();
	ПараметрыЗаполнения.Вставить("Организация",Объект.Организация);
	ПараметрыЗаполнения.Вставить("СчетОрганизации",Объект.БанковскийСчет);
	ПараметрыЗаполнения.Вставить("Оплачено",Истина);
	
	ПараметрыФормы=Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполнения);
	ОткрытьФорму("Документ."+Параметр1.Значение+".ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДокументов()
	Макет=Обработки.КлиентБанк.ПолучитьМакет("ВидыДокументов");
	ОбластьДокументов=Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота=ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
		  
		Стр=Объект.ТаблицаДокументов.Добавить();
		Стр.Пометка        =Истина;
		Стр.Документ       =ВидДокумента;
		Стр.Название       =Название;
		Стр.Корреспондент  =Корреспондент;
		Стр.ДокументКратко =Кратко;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПриИзмененииФлажка()
	Сумма=0;
	Количество=0;
	Для Каждого Строка Из Объект.ПлатежныеДокументы Цикл
		Если Строка.Выгружать Тогда
			Сумма=Сумма+Строка.СуммаДокумента;
			Количество=Количество+1;
		КонецЕсли;
	КонецЦикла;
	Элементы.ПлатежныеДокументыВыгружать.ТекстПодвала=Количество;
	Элементы.ПлатежныеДокументыСуммаДокумента.ТекстПодвала=Формат(Сумма,"ЧДЦ=2");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	Если Команда.Имя="Выгрузить" Тогда
		Если Объект.ПлатежныеДокументы.Количество()>0 Тогда
			Для каждого СтрокаДокумента Из Объект.ПлатежныеДокументы Цикл
				Если Не Элементы.ДокументыНаЭкспорт.ПроверитьСтроку(СтрокаДокумента) Тогда
					Если СтрокаДокумента.Выгружать Тогда
						ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповешения_ОтветНаВопрос", ЭтотОбъект);
						стрВопрос="Будут выгружены документы, помеченые на выгрузку, но не попавшие в отбор."+Символы.ПС+"Продолжить выгрузку?";
						ПоказатьВопрос(ОписаниеОповещения, стрВопрос, РежимДиалогаВопрос.ДаНет, 0,,"Внимание!");
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПоказатьПредупреждение(,"Список документов для выгрузки пуст."+Символы.ПС+"Проверьте правильность указанного банковского счета и периода выгрузки.");
		КонецЕсли;

	ИначеЕсли Команда.Имя="Загрузить" Тогда
		Если ДокументыКИмпорту.Количество() > 0 Тогда
			ЗагрузитьСервер();
		Иначе
			ПоказатьПредупреждение(,"Список документов для загрузки пуст."+Символы.ПС+"Необходимо прочитать данные из файла.");
		КонецЕсли;

		
	ИначеЕсли Команда.Имя="Обновить" Тогда
		ЗаполнитьДокументыНаЭкспортСервер();
		ДокументыНаЭкспортПриИзмененииФлажка();
		Если Объект.ПлатежныеДокументы.Количество()=0 Тогда
			Элементы.СтатуснаяСтрокаПриВыгрузке.ЦветТекста=Новый Цвет(0, 0, 255);
			Элементы.СтатуснаяСтрокаПриВыгрузке.Заголовок="Список документов для выгрузки пуст.";
		Иначе
			Элементы.СтатуснаяСтрокаПриВыгрузке.Заголовок="";		
		КонецЕсли;
		
	ИначеЕсли Команда.Имя="ОбновитьДляИмпорта" Тогда
		ПрочитатьДанныеИзФайла();

	ИначеЕсли Команда.Имя="ОтчетОВыгрузке" Тогда
		ПолеОтчета=ОтчетСервер();
		ПолеОтчета.Показать("Отчет о выгруженных платежных документах");
		
	ИначеЕсли Команда.Имя="ОтчетОЗагрузке" Тогда
		ОтчетЗагрузкиСервер();
		
	ИначеЕсли Команда.Имя="УстановитьФлажки" ИЛИ Команда.Имя="СнятьФлажки" Тогда
		УстановитьФлажки(Истина);
		
		
	ИначеЕсли Команда.Имя="УстановитьФлажкиИмпорта" Тогда
		КоманднаяПанельДокументыДляИмпортаУстановитьФлажки(Истина);
		
	ИначеЕсли Команда.Имя="СнятьФлажкиИмпорта" Тогда
		КоманднаяПанельДокументыДляИмпортаУстановитьФлажки(Ложь);
		
	ИначеЕсли Команда.Имя="Настройка" Тогда
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ПоказатьПредупреждение(,"Не указаны организация и банковский счет.");
			Возврат;
		КонецЕсли;
		ПараметрыЗаполнения=Новый Структура();
		ПараметрыЗаполнения.Вставить("Организация",Объект.Организация);
		ПараметрыЗаполнения.Вставить("СчетОрганизации",Объект.БанковскийСчет);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения",ПараметрыЗаполнения, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Команда.Имя="ПрочитатьДанныеИзФайла" Тогда
		ПрочитатьДанныеИзФайла();
		
	ИначеЕсли Команда.Имя="СоздатьКотрагентов" Тогда
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаКонтрагентов",, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЗначениРеквизитаРасшифровкаПлатежа(ИмяКолонки)
	Возврат Элементы.ДокументыКИмпорту.ТекущиеДанные.Документ.РасшифровкаПлатежа[0][ИмяКолонки];
КонецФункции

&НаСервере
Функция ИмяДокументаМетаданных(СсылкаНаДокумент)
	Возврат СсылкаНаДокумент.Метаданные().Имя;
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаРегУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура Атрибут_ПриИзменении(Элемент)
	Если Элемент.Имя="Организация" Тогда
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ВыборкаОрганизаций=ВыборкаОрганизации();
			Если ВыборкаОрганизаций.Следующий() Тогда
				Объект.Организация=ВыборкаОрганизаций.Организация;
			КонецЕсли;
		КонецЕсли;
		
		ОсновнойБанковскийСчет=ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация,"ОсновнойБанковскийСчет");
		Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
			Объект.БанковскийСчет=ОсновнойБанковскийСчет;		
			Атрибут_ПриИзменении(Элементы.СчетОрганизации1);		
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя="СчетОрганизации1" Тогда
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Возврат;
		КонецЕсли;
		
		РезультатЗагрузки=ЗагрузитьНастройкиПрограммыКлиентаБанка();
		Если Не РезультатЗагрузки Тогда
			Если БылаПроверка Тогда
				ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповешения_ОтветНаВопросБанковскийСчет", ЭтотОбъект);
				стрВопрос="Для выбранного счета не настроены параметры обмена данными."+Символы.ПС+"Настроить?";
				ПоказатьВопрос(ОписаниеОповещения, стрВопрос, РежимДиалогаВопрос.ДаНет, 0,,"Внимание!");
			КонецЕсли;
		КонецЕсли; 
		
		Если Элементы.Страницы.ТекущаяСтраница.Заголовок="Выгрузка" Тогда
			КоманднаяПанельДокументыНаЭкспортОбновить();
		Иначе
			ДокументыКИмпорту.Очистить();
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя="ФайлЗагрузки" Тогда
		СтандартнаяОбработка=Ложь;
		ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогФыбораФайла.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
		ДиалогФыбораФайла.Заголовок                   = "Выберите файл для загрузки данных из клиента банка";
		ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
		ДиалогФыбораФайла.Расширение                  = "txt";
		ДиалогФыбораФайла.ИндексФильтра               = 0;
		ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Имя;
		ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Ложь;
		
		Если ДиалогФыбораФайла.Выбрать() Тогда
			Объект.ФайлЗагрузки=ДиалогФыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя="ФайлВыгрузки" Тогда
		СтандартнаяОбработка=Ложь;
		ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		ДиалогФыбораФайла.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
		ДиалогФыбораФайла.Заголовок                   = "Выберите файл для выгрузки данных из клиента банка";
		ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
		ДиалогФыбораФайла.Расширение                  = "txt";
		ДиалогФыбораФайла.ИндексФильтра               = 0;
		ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Имя;
		ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Ложь;
		
		Если ДиалогФыбораФайла.Выбрать() Тогда
			Объект.ФайлВыгрузки=ДиалогФыбораФайла.ПолноеИмяФайла;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Атрибут_Открытие(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя="ФайлЗагрузки" ИЛИ Элемент.Имя="ФайлВыгрузки" Тогда
		СтандартнаяОбработка=Ложь;
		ФайлНаДиске=Новый Файл(Объект[Элемент.Имя]);
		Если Не ФайлНаДиске.Существует() Тогда
			ПоказатьПредупреждение(,"Не найден файл!");
			Возврат;
		КонецЕсли;
		
		Текст=Новый ТекстовыйДокумент();
		Если Объект.Кодировка="DOS" Тогда
			Кодир=КодировкаТекста.OEM;
		ИначеЕсли Объект.Кодировка="ANSI" Тогда
			Кодир=КодировкаТекста.ANSI;
		ИначеЕсли Объект.Кодировка="Windows" Тогда
			Кодир=КодировкаТекста.UTF8;
		Иначе
			Кодир=КодировкаТекста.Системная;
		Конецесли;
		Текст.Прочитать(Объект[Элемент.Имя], Кодир);
		Текст.Показать(Заголовок,Объект[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ДокументыНаЭкспорт"

&НаКлиенте
Процедура тпДокументыНаЭкспорт_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные=Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
	
	Если Элемент.Имя="Выгружать" Тогда
		ТекущиеДанные.Выгружать=НЕ (ТекущиеДанные.Выгружать);
		
	ИначеЕсли Элемент.Имя="ОписаниеОшибок" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекущиеДанные.ОписаниеОшибок);
	
	ИначеЕсли Элемент.Имя="НазначениеПлатежа" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекущиеДанные.НазначениеПлатежа);
		
	Иначе
		ПараметрыФормы=Новый Структура("Ключ",ТекущиеДанные.Документ);
		ОткрытьФорму("Документ."+СокрЛП(ИмяДокументаМетаданных(ТекущиеДанные.Документ))+".ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыНаЭкспорт_ПриАктивизацииСтроки(Элемент)
	ДанныеСтроки=Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
	Если Не ДанныеСтроки=Неопределено Тогда
		Если ДанныеСтроки.Готовность>0 Тогда
			Элементы.СтатуснаяСтрокаПриВыгрузке.ЦветТекста=Новый Цвет(255, 0, 0);
			Элементы.СтатуснаяСтрокаПриВыгрузке.Заголовок="Ошибка: "+ДанныеСтроки.ОписаниеОшибок;
		Иначе
			Элементы.СтатуснаяСтрокаПриВыгрузке.ЦветТекста=Новый Цвет(0, 0, 255);
			Элементы.СтатуснаяСтрокаПриВыгрузке.Заголовок="Документ готов к выгрузке!";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыНаЭкспорт_ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
	
	Если Копирование Тогда
		ВыбраннаяСтрока=Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда Возврат; КонецЕсли;
		НовыйДокумент=ВыбраннаяСтрока.Документ.Скопировать();
		
		ПараметрыФормы=Новый Структура("Ключ",НовыйДокумент);
		ОткрытьФорму("Документ."+СокрЛП(ИмяДокументаМетаданных(НовыйДокумент))+".ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		СписокВыбораТипаНовогоДокумента=Новый СписокЗначений;
		Для каждого Документа из Объект.ТаблицаДокументов Цикл
			Если Документа.Пометка Тогда
				СписокВыбораТипаНовогоДокумента.Добавить(Документа.Документ,Документа.Название);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокВыбораТипаНовогоДокумента.Количество()=1 Тогда
			ВыбранныйТипДокумента=СписокВыбораТипаНовогоДокумента[0];
		Иначе
			ОписаниеОповещения=Новый ОписаниеОповещения("ОбработчикОповешения_ВыборТипаДокумента", ЭтотОбъект);
			СписокВыбораТипаНовогоДокумента.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выбор типа документа");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыНаЭкспорт_ПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные=Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
	Если Не Элемент.Имя="Выгружать" Тогда
		Отказ=Истина;
		ПараметрыФормы=Новый Структура("Ключ",ТекущиеДанные.Документ);
		ОткрытьФорму("Документ."+СокрЛП(ИмяДокументаМетаданных(ТекущиеДанные.Документ))+".ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыНаЭкспорт_ПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыНаЭкспорт_Колонка_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ПлатежныеДокументы", "");
	ТекущиеДанные=Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "ДокументыКИмпорту"

&НаКлиенте
Процедура тпДокументыКИмпорту_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные=Элементы.ДокументыКИмпорту.ТекущиеДанные;

	Если Элемент.Имя="Загружать" Тогда
		ТекущиеДанные.Загружать=НЕ (ТекущиеДанные.Загружать);
		
	ИначеЕсли Элемент.Имя="ОписаниеОшибок" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекущиеДанные.ОписаниеОшибок);
	
	ИначеЕсли Элемент.Имя="НазначениеПлатежа" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекущиеДанные.НазначениеПлатежа);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда 
		СчетКонтрагентДокумент=ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Документ,"Контрагент,СчетКонтрагента");
		
		Если (Элемент.Имя="НомерСтроки" или Элемент.Имя="Номер" или Элемент.Имя="Дата" или Элемент.Имя="Списано" или Элемент.Имя="Поступило" или Элемент.Имя="ВидОперации" или Элемент.Имя="ИмяДокумента")
			ИЛИ (Элемент.Имя="Контрагент" И ЗначениеЗаполнено(СчетКонтрагентДокумент.Контрагент))
			ИЛИ (Элемент.Имя="СчетКонтрагента" И ЗначениеЗаполнено(СчетКонтрагентДокумент.СчетКонтрагента)) 
			ИЛИ (Элемент.Имя="СтатьяДДС" И ЗначениеЗаполнено(ЗначениРеквизитаРасшифровкаПлатежа("СтатьяДвиженияДенежныхСредств"))) 
			ИЛИ (Элемент.Имя="Договор" И ЗначениеЗаполнено(ЗначениРеквизитаРасшифровкаПлатежа("ДоговорКонтрагента"))) Тогда
			
			СтандартнаяОбработка=Ложь;
			ПараметрыФормы=Новый Структура("Ключ",ТекущиеДанные.Документ);
			ОткрытьФорму("Документ."+СокрЛП(ИмяДокументаМетаданных(ТекущиеДанные.Документ))+".ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыКИмпорту_ПриАктивизацииСтроки(Элемент)
	ДанныеСтроки=Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если Не ДанныеСтроки=Неопределено Тогда
		Если ДанныеСтроки.Готовность>0 Тогда
			Элементы.СтатуснаяСтрокаПриЗагрузке.ЦветТекста=Новый Цвет(255, 0, 0);
			Элементы.СтатуснаяСтрокаПриЗагрузке.Заголовок="Ошибка: "+ДанныеСтроки.ОписаниеОшибок;
		Иначе
			Элементы.СтатуснаяСтрокаПриЗагрузке.ЦветТекста=Новый Цвет(0, 0, 255);
			Элементы.СтатуснаяСтрокаПриЗагрузке.Заголовок="Документ готов к загрузке!";
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыКИмпорту_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	стрКолонка=стрЗаменить(Элемент.Имя, "ДокументыКИмпорту", "");
	ТекущиеДанные=Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если стрКолонка="СчетОрганизации" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		Если НЕ Объект.Организация.Пустая() Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
		КонецЕсли;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли стрКолонка="Договор" Тогда

	ИначеЕсли стрКолонка="СчетКонтрагента" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		Если Не ТипЗнч(ТекущиеДанные.Контрагент)=Тип("Строка")
			И НЕ ТекущиеДанные.Контрагент.Пустая() Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ТекущиеДанные.Контрагент));
		КонецЕсли;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли стрКолонка="ВидОперации" Тогда
		МассивВидовОпераций=Новый СписокЗначений;
		Если ТекущиеДанные.ВидДокумента="ПлатежноеПоручениеВходящее" Тогда
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты"));
			
		ИначеЕсли ТекущиеДанные.ВидДокумента="ПлатежноеПоручениеИсходящее" Тогда
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПереводНаДругойСчет"));		
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами"));
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами"));
			
		ИначеЕсли ТекущиеДанные.ВидДокумента="ПлатежноеТребованиеВыставленное" Тогда
			МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя"));
		КонецЕсли;
		
		Элемент.ДоступныеЗначения=МассивВидовОпераций;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпДокументыКИмпорту_ПриИзменении(Элемент)
	стрКолонка=стрЗаменить(Элемент.Имя, "ДокументыКИмпорту", "");
	ТекущиеДанные=Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если стрКолонка="ВидОперации" Тогда
		Если ТекущиеДанные.ВидДокумента="ПлатежноеПоручениеВходящее" Тогда
			стрВидДоговора="СПокупателем,СКомиссионером";
		ИначеЕсли ТекущиеДанные.ВидДокумента="ПлатежноеПоручениеИсходящее" Тогда
			стрВидДоговора="СПоставщиком,СКомитентом";
		КонецЕсли;
		СтруктураПраметров=Новый Структура;
		СтруктураПраметров.Вставить("Организация", Объект.Организация);
		СтруктураПраметров.Вставить("Контрагент", ТекущиеДанные.Контрагент);
		СтруктураПраметров.Вставить("ВидДоговора", стрВидДоговора);
	    ТекущиеДанные.Договор=УправлениеДиалогамиСервер.ДоступныеДоговорыКонтрагента(СтруктураПраметров, Истина);				

		ПараметрыЗаполнения=Новый Структура();
		ПараметрыЗаполнения.Вставить("Организация",Объект.Организация);
		ПараметрыЗаполнения.Вставить("ВидОперации",ТекущиеДанные.ВидОперации);
		
		ПараметрыФормы=Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполнения);
		ОткрытьФорму("Документ."+ТекущиеДанные.ВидДокумента.Имя+".ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли стрКолонка="СтатьяДДС" Тогда
		ПараметрыЗаполнения=Новый Структура();
		ПараметрыЗаполнения.Вставить("Организация",Объект.Организация);
		ПараметрыЗаполнения.Вставить("ВидОперации",ТекущиеДанные.ВидОперации);
		
		ПараметрыФормы=Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполнения);
		ОткрытьФорму("Документ."+ТекущиеДанные.ВидДокумента.Имя+".ФормаОбъекта",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура УстановитьФлажки(Флаг)
	Количество = 0;
	Сумма = 0;
	Для каждого СтрокаДокумента из Объект.ПлатежныеДокументы Цикл
		Если Элементы.ДокументыНаЭкспорт.ПроверитьСтроку(СтрокаДокумента) Тогда
			СтрокаДокумента.Выгружать=Флаг;
		КонецЕсли;
		
		Если СтрокаДокумента.Выгружать Тогда
			Количество=Количество+1;
			Сумма=Сумма+СтрокаДокумента.СуммаДокумента;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПлатежныеДокументыВыгружать.ТекстПодвала=Количество;
	Элементы.ПлатежныеДокументыСуммаДокумента.ТекстПодвала=Формат(Сумма,"ЧДЦ=2");
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиПрограммыКлиентаБанка()
	Запрос=Новый запрос;
	Запрос.УстановитьПараметр("Счет",Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);	
	Запрос.Текст="
	|ВЫБРАТЬ
	|	НастройкиОбменаСКлиентомБанка.Программа,
	|	НастройкиОбменаСКлиентомБанка.Кодировка,
	|	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки,
	|	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки,
	|	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСКлиентомБанка КАК НастройкиОбменаСКлиентомБанка
	|Где
	|	НастройкиОбменаСКлиентомБанка.БанковскийСчет = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Организация = &Организация
	|";
	Выборка=Запрос.Выполнить().Выгрузить();	   
	Если Не Выборка.Количество()=0 Тогда
		Программа = Выборка[0].Программа;
		Кодировка = Выборка[0].Кодировка;
		ФайлВыгрузки = Выборка[0].ФайлВыгрузки;
		ФайлЗагрузки = Выборка[0].ФайлЗагрузки;
		Таб=ЗначениеИзСтрокиВнутр(Выборка[0].ВидыВыгружаемыхПлатДокументов);
		Если НЕ Таб=Неопределено Тогда
			Для каждого СтрокаДокумента из Таб Цикл
				МассивСтрок=Объект.ТаблицаДокументов.НайтиСтроки(Новый Структура("Название", СтрокаДокумента.Документ));
				Если Не МассивСтрок.Количество()=0 Тогда
					МассивСтрок[0].Пометка=СтрокаДокумента.Пометка; 
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;	
КонецФункции

&НаКлиенте
Процедура КоманднаяПанельДокументыДляИмпортаУстановитьФлажки(Флаг)
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать=Флаг;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельДокументыНаЭкспортОбновить()
	
	ЗаполнитьДокументыНаЭкспортСервер();
	ДокументыНаЭкспортПриИзмененииФлажка();
	Если Объект.ПлатежныеДокументы.Количество()=0 Тогда
		Элементы.СтатуснаяСтрокаПриВыгрузке.ЦветТекста=Новый Цвет(0, 0, 255);
		Элементы.СтатуснаяСтрокаПриВыгрузке.Заголовок="Список документов для выгрузки пуст.";
	Иначе
		Элементы.СтатуснаяСтрокаПриВыгрузке.Заголовок="";		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруТаблицыИмпорта()
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	Т_Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
	Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Т_Документ  = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеИсходящее,ДокументСсылка.ПлатежноеПоручениеВходящее,ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств,ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств");
	Т_ПлОрдер   = Новый ОписаниеТипов("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств");
	Т_Контрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.Организации, Строка");
	Т_БанкСчет   = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка");
	Т_ВидыОпераций  = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийППИсходящее,ПеречислениеСсылка.ВидыОперацийСписаниеБезналичныхДенежныхСредств,ПеречислениеСсылка.ВидыОперацийПоступлениеБезналичныхДенежныхСредств");
	Т_Договоры   = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов, Строка");
	Т_СтатьяДДС  = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	Т_ТОП   	 = Новый ОписаниеТипов("СправочникСсылка.ТиповыеОперации");
	Т_Куратор	 = Новый ОписаниеТипов("СправочникСсылка.Пользователи");

	  //Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	МассивРеквизитов=Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Проведен",  			  Т_Булево, "ДокументыКИмпорту","Проведен"));
	  
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Готовность",           Т_Число1, "ДокументыКИмпорту", "Готовность"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Номер",                Т_Строка, "ДокументыКИмпорту", "Номер"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Дата",                 Т_Строка, "ДокументыКИмпорту", "Дата (из файла)"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Сумма",                Т_Строка, "ДокументыКИмпорту", "Сумма (из файла)"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КвитанцияДата",        Т_Строка, "ДокументыКИмпорту", "Дата форм. квитанции"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КвитанцияВремя",       Т_Строка, "ДокументыКИмпорту", "Время форм. квитанции"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КвитанцияСодержание",  Т_Строка, "ДокументыКИмпорту", "Содержание квитанции"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Списано",              Т_Дата,   "ДокументыКИмпорту", "Списано"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Поступило",            Т_Дата,   "ДокументыКИмпорту", "Поступило"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДатаСписано",          Т_Строка, "ДокументыКИмпорту", "Списано"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДатаПоступило",        Т_Строка, "ДокументыКИмпорту", "Поступило"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикСчет",       Т_Строка20, "ДокументыКИмпорту", "Расчетный счет плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Плательщик",           Т_Строка, "ДокументыКИмпорту", "Плательщик"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикИНН",        Т_Строка12, "ДокументыКИмпорту", "ИНН плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Плательщик1",          Т_Строка, "ДокументыКИмпорту", "Наименование плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Плательщик2",          Т_Строка20, "ДокументыКИмпорту", "Расчетный счет плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Плательщик3",          Т_Строка, "ДокументыКИмпорту", "Банк плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Плательщик4",          Т_Строка, "ДокументыКИмпорту", "Город банка плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикРасчСчет",   Т_Строка20, "ДокументыКИмпорту", "Корсчет банка плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикБанк1",      Т_Строка, "ДокументыКИмпорту", "РЦ банка плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикБанк2",      Т_Строка, "ДокументыКИмпорту", "Город РЦ банка плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикБИК",        Т_Строка09, "ДокументыКИмпорту", "БИК РЦ банка плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикКорсчет",    Т_Строка20, "ДокументыКИмпорту", "Корсчет РЦ банка плат."));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательСчет",       Т_Строка20, "ДокументыКИмпорту", "Расчетный счет получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Получатель",           Т_Строка, "ДокументыКИмпорту", "Получатель"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательИНН",        Т_Строка12, "ДокументыКИмпорту", "ИНН получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Получатель1",          Т_Строка, "ДокументыКИмпорту", "Наименование получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Получатель2",          Т_Строка20, "ДокументыКИмпорту", "Расчетный счет получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Получатель3",          Т_Строка, "ДокументыКИмпорту", "Банк получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Получатель4",          Т_Строка, "ДокументыКИмпорту", "Город банка получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательРасчСчет",   Т_Строка20, "ДокументыКИмпорту", "Корсчет банка получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательБанк1",      Т_Строка, "ДокументыКИмпорту", "РЦ банка получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательБанк2",      Т_Строка, "ДокументыКИмпорту", "Город РЦ банка получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательБИК",        Т_Строка09, "ДокументыКИмпорту", "БИК РЦ банка получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательКорсчет",    Т_Строка20,"ДокументыКИмпорту", "Корсчет РЦ банка пол."));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидПлатежа",           Т_Строка, "ДокументыКИмпорту", "Вид платежа"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидОплаты",            Т_Строка02, "ДокументыКИмпорту", "Вид оплаты"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СтатусСоставителя",    Т_Строка02, "ДокументыКИмпорту", "Статус составителя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлательщикКПП",        Т_Строка09, "ДокументыКИмпорту", "КПП плательщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПолучательКПП",        Т_Строка09, "ДокументыКИмпорту", "КПП получателя"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПоказательКБК",        Т_Строка20, "ДокументыКИмпорту", "Показатель КБК"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ОКАТО",                Т_Строка11, "ДокументыКИмпорту", "ОКАТО"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПоказательОснования",  Т_Строка02, "ДокументыКИмпорту", "Пок. основания"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПоказательПериода",    Т_Строка10, "ДокументыКИмпорту", "Пок. нал. периода"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПоказательНомера",     Т_Строка, "ДокументыКИмпорту", "Пок. номера док."));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПоказательДатыДок",    Т_Дата, "ДокументыКИмпорту", "Пок. даты док."));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПоказательДаты",       Т_Строка, "ДокументыКИмпорту", "Пок. даты"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПоказательТипа",       Т_Строка02, "ДокументыКИмпорту", "Пок. типа платежа"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Код",                  Т_Строка20, "ДокументыКИмпорту", "УИН"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СрокПлатежаДок",       Т_Дата, "ДокументыКИмпорту", "Срок действия акк."));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СрокПлатежа",          Т_Строка, "ДокументыКИмпорту", "Срок действия аккредитива"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Очередность",          Т_Строка02, "ДокументыКИмпорту", "Очередность (из файла)"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ОчередностьПлатежа",   Т_Число1, "ДокументыКИмпорту", "Очередность"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НазначениеПлатежа1",   Т_Строка, "ДокументыКИмпорту", "Назначение платежа, стр. 1"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НазначениеПлатежа2",   Т_Строка, "ДокументыКИмпорту", "Назначение платежа, стр. 2"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НазначениеПлатежа3",   Т_Строка, "ДокументыКИмпорту", "Назначение платежа, стр. 3"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НазначениеПлатежа4",   Т_Строка, "ДокументыКИмпорту", "Назначение платежа, стр. 4"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НазначениеПлатежа5",   Т_Строка, "ДокументыКИмпорту", "Назначение платежа, стр. 5"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НазначениеПлатежа6",   Т_Строка, "ДокументыКИмпорту", "Назначение платежа, стр. 6"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СрокАкцептаДок",       Т_Число10, "ДокументыКИмпорту", "Срок акцепта"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СрокАкцепта",          Т_Строка, "ДокументыКИмпорту", "Срок акцепта (из файла)"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидАккредитива",       Т_Строка, "ДокументыКИмпорту", "Вид аккредитива"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("УсловиеОплаты1",       Т_Строка, "ДокументыКИмпорту", "Условие оплаты, стр. 1"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("УсловиеОплаты2",       Т_Строка, "ДокументыКИмпорту", "Условие оплаты, стр. 2"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("УсловиеОплаты3",       Т_Строка, "ДокументыКИмпорту", "Условие оплаты, стр. 3"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлатежПоПредст",       Т_Строка, "ДокументыКИмпорту", "Платеж по представлению"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДополнУсловия",        Т_Строка, "ДокументыКИмпорту", "Дополнительные условия"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НомерСчетаПоставщика", Т_Строка, "ДокументыКИмпорту", "№ счета поставщика"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДатаОтсылки",          Т_Дата, "ДокументыКИмпорту", "Дата отсылки"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДатаОтсылкиДок",       Т_Строка, "ДокументыКИмпорту", "Дата отсылки документов"));
	//
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Документ",             Т_Документ, "ДокументыКИмпорту", "Источник"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ПлатежныйОрдер",       Т_ПлОрдер, "ДокументыКИмпорту", "Ордер"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СекцияДокумент",       Т_Строка, "ДокументыКИмпорту", "Выгрузка"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипДокумента",         Т_Число10, "ДокументыКИмпорту", "Тип пл. документа"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидДокумента",         Т_Строка, "ДокументыКИмпорту", "Вид документа"));
	
	ИзменитьРеквизиты(МассивРеквизитов);
КонецПроцедуры

&НаСервере
Функция СоздатьКолонкуВТаблице(РабочаяТаблица, ТабПоле, Имя, ТипКолонки = Неопределено, Заголовок = "", СоответсвиеХарактеристик)
	Если ПустаяСтрока(Имя) Тогда Возврат Ложь; КонецЕсли;

	ШиринаКолонки = (СоответсвиеХарактеристик["Ширина"]);
	Если ТипЗнч(ШиринаКолонки) <> Тип("Число") Тогда
		ШиринаКолонки =  0;
	КонецЕсли;

	Если ТипЗнч(ТипКолонки) = Тип("ОписаниеТипов") Тогда
		РабочаяТаблица.Колонки.Добавить(Имя, ТипКолонки, Заголовок, ШиринаКолонки);
	Иначе
		РабочаяТаблица.Колонки.Добавить(Имя, , Заголовок, ШиринаКолонки);
	КонецЕсли;

	Возврат Истина;	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыНаЭкспортСервер()
	Объект.ПлатежныеДокументы.Очистить();

	тзДокументов=Объект.ТаблицаДокументов.Выгрузить();
	ВыгружатьПлатПоручения  = тзДокументов.Найти("Платежное поручение", "Название").Пометка;
	ВыгружатьПлатТребования = тзДокументов.Найти("Платежное требование", "Название").Пометка;

	Если НЕ ВыгружатьПлатПоручения И НЕ ВыгружатьПлатТребования Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо отметить хотя бы один из видов платежных документов.");
		Возврат;
	КонецЕсли;

	Если не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо выбрать банковский счет.");
		Возврат;
	КонецЕсли;

	ТекстЗапроса=" 
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ПлатежноеПоручениеИсходящее.Ссылка КАК Документ,
	|	ПлатежноеПоручениеИсходящее.Проведен,
	|	ПлатежноеПоручениеИсходящее.Номер,
	|	ПлатежноеПоручениеИсходящее.ДатаОплаты КАК Дата,
	|	ПлатежноеПоручениеИсходящее.ВидПлатежа,
	|	ПлатежноеПоручениеИсходящее.ОчередностьПлатежа,
	|	ПлатежноеПоручениеИсходящее.НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	|	0 как СуммаНаПриход,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента как СуммаНаРасход,
	|	ПлатежноеПоручениеИсходящее.ТекстПлательщика,
	|	ПлатежноеПоручениеИсходящее.ТекстПолучателя,
	|	ПлатежноеПоручениеИсходящее.ИННПлательщика,
	|	ПлатежноеПоручениеИсходящее.КПППлательщика,
	|	ПлатежноеПоручениеИсходящее.ИННПолучателя,
	|	ПлатежноеПоручениеИсходящее.КПППолучателя,
	|	ПлатежноеПоручениеИсходящее.КодБК,
	|	ПлатежноеПоручениеИсходящее.КодОКАТО,
	|	ПлатежноеПоручениеИсходящее.ПоказательДаты,
	|	ПлатежноеПоручениеИсходящее.ПоказательНомера,
	|	ПлатежноеПоручениеИсходящее.ПоказательОснования,
	|	ПлатежноеПоручениеИсходящее.ПоказательТипа,
	|	ПлатежноеПоручениеИсходящее.ПоказательПериода,
	|	ПлатежноеПоручениеИсходящее.СтатусСоставителя,
	|	ПлатежноеПоручениеИсходящее.УИН КАК  ИдентификаторПлатежа,
	|	ПлатежноеПоручениеИсходящее.Организация.НаименованиеПолное КАК Организация,
	|	ПлатежноеПоручениеИсходящее.Организация.Наименование КАК ОрганизацияКратко,
	|	ПлатежноеПоручениеИсходящее.Организация.НаименованиеПлательщикаПриПеречисленииНалогов КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручениеИсходящее.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручениеИсходящее.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов.Наименование КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстКорреспондента КАК ОрганизацияТекстКорреспондента,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстНазначения КАК ОрганизацияТекстНазначения,
	|	ВЫБОР 
	|		КОГДА 
	|			ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.НаименованиеПолное ЕСТЬ NULL
	|		ТОГДА 
	|			ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.Наименование
	|		ИНАЧЕ
	|			ПОДСТРОКА(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.НаименованиеПолное, 1, 1000) 
	|	КОНЕЦ КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.ИНН КАК КонтрагентИНН,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов.Наименование КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстКорреспондента КАК КонтрагентТекстКорреспондента,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстНазначения КАК КонтрагентТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.ВидОперации,
	|	"""" КАК СрокАкцепта,
	|	"""" КАК УсловиеОплаты1,
	|	"""" КАК ДатаОтсылкиДок,
	|	"""" КАК ОписаниеОшибок,
	|	"""" КАК Готовность
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И (НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления)
	|	И (НЕ ПлатежноеПоручениеИсходящее.Оплачено)
	|	И ПлатежноеПоручениеИсходящее.СчетОрганизации =&Счет
	|	И &ВыгружатьПлатПоручения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	Дата,
	|	Документ
	|";
	
	ЗапросПоДокументам=Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",    НачалоДня(Объект.НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(Объект.КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",  Объект.БанковскийСчет);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатПоручения",  ВыгружатьПлатПоручения);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", ВыгружатьПлатТребования);
	ЗапросПоДокументам.УстановитьПараметр("САкцептом",Перечисления.УсловияОплатыРасчетныхДокументов.САкцептом);
	
	ВыборкаДляЭкспорта=ЗапросПоДокументам.Выполнить().Выгрузить();
	Объект.ПлатежныеДокументы.Загрузить(ВыборкаДляЭкспорта);
	
	КоллекцияСвойств=Объект.ПлатежныеДокументы.Выгрузить().Колонки;
	Для каждого СтрокаДокумента из Объект.ПлатежныеДокументы Цикл
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента,КоллекцияСвойств);
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента,КоллекцияСвойств)
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;

	Если СтрокаДокумента.ВидДокумента = "Платежное поручение" Тогда
		ПеречислениеНалога          = (СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
		НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
		НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
		СтрокаДокумента.ТипДокумента= ?(ПеречислениеНалога, 1, 0) * 4 + ?(НепрямыеРасчетыУПолучателя, 1, 0) * 2 + ?(НепрямыеРасчетыУПлательщика, 1, 0) + 1;
		Плательщик =  "Организация";
		Получатель =  "Контрагент";
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик =  "Контрагент";
		Получатель =  "Организация";
	КонецЕсли;

	РеквизитыПлДокЭкс_Основные = "Номер,Дата,СуммаДокумента";                       
	РеквизитыПлДокЭкс_Плательщик = Плательщик + "Счет," + Плательщик + "," + Плательщик + "ИНН";      
	РеквизитыПлДокЭкс_ПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	РеквизитыПлДокЭкс_Получатель = Получатель + "Счет," + Получатель + "," + Получатель + "ИНН";
	РеквизитыПлДокЭкс_ПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";
	РеквизитыПлДокЭкс_БюджетПлатеж = "СтатусСоставителя,КПППлательщика,КПППолучателя,КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";

	Экспорт_НеПустые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДокЭкс_Основные + "," +
	РеквизитыПлДокЭкс_Плательщик + "," +
	?(НепрямыеРасчетыУПлательщика,РеквизитыПлДокЭкс_ПлательщикНПР + ",","")+
	РеквизитыПлДокЭкс_Получатель + "," +
	?(НепрямыеРасчетыУПолучателя,РеквизитыПлДокЭкс_ПолучательНПР + ",",""));

	
	Для каждого Свойство из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияСвойств.Найти(Свойство.Ключ).ТекстШапки);
	КонецЦикла;
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента);
	КонецЕсли;
	
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента);
	                           
КонецФункции

&НаСервере
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)

	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта)
	
	Ошибка = Новый СписокЗначений();
	
	П101 = СокрЛП(СтрокаЭкспорта.СтатусСоставителя );
	П104 = СокрЛП(СтрокаЭкспорта.КодБК );
	П105 = СокрЛП(СтрокаЭкспорта.КодОКАТО );
	П106 = СокрЛП(СтрокаЭкспорта.ПоказательОснования );
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода , ".", ""))) = 1, "", СтрокаЭкспорта.ПоказательПериода );
	П107 = ?(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода, ".", "")) = "0", "", СтрокаЭкспорта.ПоказательПериода );
	П108 = СокрЛП(СтрокаЭкспорта.ПоказательНомера );
	П109 = ?(НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПоказательДаты ), "0", Строка(СтрокаЭкспорта.ПоказательДаты ));
	П110 = СокрЛП(СтрокаЭкспорта.ПоказательТипа );
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15", П101) = 0) или
		(ПустаяСтрока(СокрЛП(П101))) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""Статус составителя"" на закладке ""Реквизиты для перечисления налогов"".");	УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") и (Найти("06,07", П101) = 0) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""КБК"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""Код ОКАТО"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	// Проверяем в зависимости от статуса составителя
	//Если П101 = "08" Тогда
	//	Если СтрЗаменить(П106, "0", "") <> "" Тогда 
	//		ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	//	КонецЕсли;
	//	Если СтрЗаменить(П107, "0", "") <> "" Тогда
	//		ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	//	КонецЕсли;
	//	Если СтрЗаменить(П108, "0", "") <> "" Тогда
	//		ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	//	КонецЕсли;
	//	Если СтрЗаменить(П109, "0", "") <> "" Тогда
	//		ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	//	КонецЕсли;
	//	Если СтрЗаменить(П110, "0", "") <> "" Тогда
	//		ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	//	КонецЕсли;
	//Иначе
		// Проверяем в зависимости от основания платежа
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 12)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 4)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 2)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)или
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Основание платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Тип платежа"" на закладке ""Реквизиты для перечисления налогов""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	//КонецЕсли;
	
	//Выводим список найденых ошибок
	Для Ном = 0 по Ошибка.Количество()-1 Цикл
		Сообщить(Ошибка.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // Проверить()

&НаСервере
Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта)
	
	Значение = СокрЛП(СтрокаЭкспорта.Номер);
	Если Число(Строка(Число(Прав(Значение, 3)))) = 0 Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, "Номер должен оканчиваться на три цифры и не на ""000""!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСервер()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Загрузить(ДокументыКИмпорту, ТаблицаКонтрагентов);
КонецПроцедуры

&НаСервере
Функция ОтчетСервер()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ПолеОтчета=Новый ТабличныйДокумент;
	ОбработкаОбъект.ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Объект.ПлатежныеДокументы);
	Возврат ПолеОтчета;
КонецФункции

&НаСервере
Процедура ОтчетЗагрузкиСервер()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ДокументыКИмпорту);
КонецПроцедуры

&НаСервере
Функция ВыборкаОрганизации()
	ЗапросПоОрганизациям=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|");
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьВидыДокументов();
	//ЗаполнитьНаименованиеПлатежныхОпераций();
	СформироватьСтруктуруТаблицыИмпорта();

	
	НачПериода=НачалоДня(ТекущаяДата());
	КонПериода=КонецДня(ТекущаяДата());
	
	ИмяОбработки=РеквизитФормыВЗначение("Объект").Метаданные().Имя;
	
	Попытка 
		ВременнаяТаб=ХранилищеНастроекДанныхФорм.Загрузить("НастройкаЗаполнения", "НастройкаЗаполнения");
		Если ВременнаяТаб.Количество()=0 Тогда
			ВременнаяТаб=ХранилищеОбщихНастроек.Загрузить(ИмяОбработки + "СтрокаНастроек");
			Если ВременнаяТаб.Количество()=0 или ВременнаяТаб.Количество()<>5 Тогда
				Объект.НастройкаЗаполнения.Добавить().Документ="Платежное поручение исходящее";
				Объект.НастройкаЗаполнения.Добавить().Документ="Платежное поручение входящее";
				Объект.НастройкаЗаполнения.Добавить().Документ="Платежный ордер на списание";
				Объект.НастройкаЗаполнения.Добавить().Документ="Платежный ордер на поступление";
				ИмяОбработки=РеквизитФормыВЗначение("Объект").Метаданные().Имя;
				ХранилищеНастроекДанныхФорм.Сохранить("НастройкаЗаполнения", "НастройкаЗаполнения", Объект.НастройкаЗаполнения.Выгрузить());
			Иначе
				Объект.НастройкаЗаполнения.Загрузить(ВременнаяТаб);
			КонецЕсли;
		Иначе
			Объект.НастройкаЗаполнения.Загрузить(ВременнаяТаб);
		КонецЕсли;
			Объект.ГруппаДляНовыхКонтрагентов=ХранилищеОбщихНастроек.Загрузить(ИмяОбработки + "КаталогКонтрагентов");
			Объект.Организация=ХранилищеОбщихНастроек.Загрузить(ИмяОбработки + "Организация");
			Объект.БанковскийСчет=ХранилищеОбщихНастроек.Загрузить(ИмяОбработки + "БанковскийСчет");

		ВременнаяТаб=ХранилищеНастроекДанныхФорм.Загрузить("НастройкаЗаполненияОтНазначенияПлатежа", "НастройкаЗаполненияОтНазначенияПлатежа");
		Объект.НастройкаЗаполненияОтНазначенияПлатежа.Загрузить(ВременнаяТаб);
	Исключение
			Объект.НастройкаЗаполнения.Добавить().Документ="Платежное поручение исходящее";
			Объект.НастройкаЗаполнения.Добавить().Документ="Платежное поручение входящее";
			Объект.НастройкаЗаполнения.Добавить().Документ="Платежный ордер на списание";
			Объект.НастройкаЗаполнения.Добавить().Документ="Платежный ордер на поступление";
	КонецПопытки;
	
	Попытка
		Если ХранилищеОбщихНастроек.Загрузить(ИмяОбработки + "РежимПоУмолчанию")="  Загрузка  " Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаЗагрузка;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация=УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
	Иначе
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &СсылкаНаОрганизацию";
		
		Запрос.УстановитьПараметр("СсылкаНаОрганизацию",Объект.Организация);
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() = 0 Тогда
			Объект.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
			Объект.Организация = УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.БанковскийСчет=Объект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Параметр = ЭтаФорма Тогда
		КоманднаяПанельДокументыНаЭкспортОбновить();
	КонецЕсли;
КонецПроцедуры
