//&НаКлиенте
//Процедура ВыполнитьДействие(Команда)
//	Если Команда.Имя="Заполнить" Тогда
//	
//		
//	
//	КонецЕсли; 
//КонецПроцедуры

//Процедура ЗаменаВыходного(п_ДатаВыходного, п_ДатаПраздника, п_Описание, п_Сообщать = Ложь)
//	л_НоваяЗаписьРегистра = РегистрыСведений.Календарь.СоздатьМенеджерЗаписи();
//	л_НоваяЗаписьРегистра.Дата = п_ДатаВыходного;
//	л_НоваяЗаписьРегистра.Прочитать();
//	Если п_Описание = "" Тогда
//		л_НоваяЗаписьРегистра.ВидДня = Перечисления.ВидыДнейКалендаря.Выходной;
//		л_НоваяЗаписьРегистраРабочийДень = РегистрыСведений.Календарь.СоздатьМенеджерЗаписи();
//		л_НоваяЗаписьРегистраРабочийДень.Дата = п_ДатаПраздника;
//		л_НоваяЗаписьРегистраРабочийДень.Прочитать();
//		л_НоваяЗаписьРегистраРабочийДень.ВидДня = Перечисления.ВидыДнейКалендаря.Рабочий;
//		л_НоваяЗаписьРегистраРабочийДень.Записать();
//		л_НоваяЗаписьРегистра.ВидДня = Перечисления.ВидыДнейКалендаря.Выходной;
//		Если п_Сообщать Тогда
//			Сообщить("   " + Формат(п_ДатаВыходного, "ДФ ='дд ММММ'") + " - перенос выходного на " + Формат(п_ДатаПраздника, "ДФ ='дд ММММ'") + " "+п_Описание);
//		КонецЕсли; 	
//	Иначе	
//		л_НоваяЗаписьРегистра.ВидДня = Перечисления.ВидыДнейКалендаря.ВыходнойВместоПраздника;
//		Если п_Сообщать Тогда
//			Сообщить("   " + Формат(п_ДатаВыходного, "ДФ ='дд ММММ'") + " - выходной вместо праздника " + Формат(п_ДатаПраздника, "ДФ ='дд ММММ'") + " ("+п_Описание+")");
//		КонецЕсли; 	
//	КонецЕсли; 	
//	л_НоваяЗаписьРегистра.Записать();	
//КонецПроцедуры	 

//Процедура ПервоначальноеЗаполнениеРегистра(КонтрольнаяДата) Экспорт
//	ЗаКакойГод = Год(КонтрольнаяДата);
//	
//	СписокПраздников=Новый СписокЗначений();
//	СписокПраздников.Добавить("0101", "Новый Год");
//	СписокПраздников.Добавить("0102", "Новый Год");
//	СписокПраздников.Добавить("0103", "Новый Год");
//	СписокПраздников.Добавить("0104", "Новый Год");
//	СписокПраздников.Добавить("0105", "Новый Год");
//	Если ЗаКакойГод >= 2013 Тогда
//		СписокПраздников.Добавить("0106", "Новый Год");
//		СписокПраздников.Добавить("0108", "Новый Год");
//	КонецЕсли;  	
//	СписокПраздников.Добавить("0107", "Рождество Христово");
//	СписокПраздников.Добавить("0223", "День защитника Отечества");
//	СписокПраздников.Добавить("0308", "Международный женский день");
//	СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
//	СписокПраздников.Добавить("0509", "День Победы");
//	СписокПраздников.Добавить("0612", "День России");
//	СписокПраздников.Добавить("1104", "День народного единства");

//	// Очистить таблицу значений регистра
//	тзКалендарь2.Очистить();
//	// Заполнение регистра за год
//	ПервоеЯнваря = НачалоГода(КонтрольнаяДата);
//	СписокПраздниковВВыходные = Новый СписокЗначений;
//	Для НомерДня = 1 По ДеньГода(КонецГода(КонтрольнаяДата)) Цикл
//		НоваяЗаписьРегистра = РегистрыСведений.Календарь.СоздатьМенеджерЗаписи();
//		ЗаписываемаяДата 	= ПервоеЯнваря + 86400 * (НомерДня - 1);
//		НоваяЗаписьРегистра.Дата = ЗаписываемаяДата;
//		ДеньМесяцЗаписываемаяДата = "" + Формат(ЗаписываемаяДата, "ДФ = 'ММ'") + Формат(ЗаписываемаяДата, "ДФ = 'дд'");
//		
//		ПраздничныйДень = СписокПраздников.НайтиПоЗначению(ДеньМесяцЗаписываемаяДата);
//			
//		Если ПраздничныйДень <> Неопределено Тогда
//			НоваяЗаписьРегистра.ВидДня = Перечисления.ВидыДнейКалендаря.Праздник;
//			Если ДеньНедели(ЗаписываемаяДата) > 5 Тогда
//				СписокПраздниковВВыходные.Добавить(ЗаписываемаяДата, ПраздничныйДень);
//			КонецЕсли;
//			// Предпразничные дни
//			Если НомерДня > 1 Тогда
//				ПредпраздничныйДеньРегистр = РегистрыСведений.Календарь.СоздатьМенеджерЗаписи();
//				ПредпраздничныйДеньРегистр.Дата = ПервоеЯнваря + 86400 * (НомерДня - 2);
//				ПредпраздничныйДеньРегистр.Прочитать();
//				Если ПредпраздничныйДеньРегистр.ВидДня = Перечисления.ВидыДнейКалендаря.Рабочий Тогда
//					ПредпраздничныйДеньРегистр.ВидДня = Перечисления.ВидыДнейКалендаря.Предпраздничный;
//					ПредпраздничныйДеньРегистр.Записать();
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			Если ДеньНедели(ЗаписываемаяДата) > 5 Тогда
//				НоваяЗаписьРегистра.ВидДня = Перечисления.ВидыДнейКалендаря.Выходной;
//			Иначе
//				НоваяЗаписьРегистра.ВидДня = Перечисления.ВидыДнейКалендаря.Рабочий
//			КонецЕсли;
//		КонецЕсли;
//		НоваяЗаписьРегистра.Записать();
//		// Запишем в таблицу значений
//		НоваяСтрокаТаблицыРегиста=тзКалендарь2.Добавить();
//		НоваяСтрокаТаблицыРегиста.Дата = ЗаписываемаяДата;
//		НоваяСтрокаТаблицыРегиста.ВидДня = НоваяЗаписьРегистра.ВидДня;
//	КонецЦикла;
//	// 31 декабря предпраздничный день в регистре
//	НоваяЗаписьРегистра = РегистрыСведений.Календарь.СоздатьМенеджерЗаписи();
//	НоваяЗаписьРегистра.Дата = КонецГода(КонтрольнаяДата);
//	НоваяЗаписьРегистра.Прочитать();
//	НоваяЗаписьРегистра.ВидДня = Перечисления.ВидыДнейКалендаря.Предпраздничный;
//	НоваяЗаписьРегистра.Записать();
//	// 31 декабря предпраздничный день в таблице
//	СтрокаТаблицыЗначений=тзКалендарь2.Найти(ЗаписываемаяДата,);
//	СтрокаТаблицыЗначений.ВидДня=Перечисления.ВидыДнейКалендаря.Предпраздничный;
//	
//	Если ЗаКакойГод = 2014 Тогда
//		// календарь 2014
//		// 08.03 перенос на 10.03
//		ЗаменаВыходного(Дата(2014,3,10,0,0,0),Дата(2014,3,8,0,0,0), "8 марта");
//		// 04.01 перенос на 02.05
//		ЗаменаВыходного(Дата(2014,5,2,0,0,0),Дата(2014,1,4,0,0,0), "Новогодние каникулы");
//		// 05.01 перенос на 13.06
//		ЗаменаВыходного(Дата(2014,6,13,0,0,0),Дата(2014,1,5,0,0,0), "Новогодние каникулы");
//		// 24.02 перенос на 03.11
//		ЗаменаВыходного(Дата(2014,11,3,0,0,0),Дата(2014,2,24,0,0,0), "перенос выходного");	  
//	ИначеЕсли ЗаКакойГод = 2015 Тогда
//		// календарь 2015
//		// 03.01 перенос на 09.01
//		ЗаменаВыходного(Дата(2015,1,9,0,0,0),Дата(2015,1,3,0,0,0), "перенос выходного");
//		// 04.01 перенос на 04.05
//		ЗаменаВыходного(Дата(2015,5,4,0,0,0),Дата(2015,1,4,0,0,0), "перенос выходного");
//		// 08.03 перенос на 09.03
//		ЗаменаВыходного(Дата(2015,3,9,0,0,0),Дата(2015,3,8,0,0,0), "перенос выходного");
//		// 09.05 перенос на 11.05
//		ЗаменаВыходного(Дата(2015,5,11,0,0,0),Дата(2015,5,9,0,0,0), "перенос выходного");
//		
//	ИначеЕсли ЗаКакойГод = 2016 Тогда
//		// 02.01 перенос на 03.05
//		ЗаменаВыходного(Дата(2016,5,3,0,0,0),Дата(2016,1,2,0,0,0), "перенос выходного");
//		// 03.01 перенос на 07.03
//		ЗаменаВыходного(Дата(2016,3,7,0,0,0),Дата(2016,1,3,0,0,0), "перенос выходного");
//		// 20.02 перенос на 22.02
//		ЗаменаВыходного(Дата(2016,2,22,0,0,0),Дата(2016,2,20,0,0,0), "");
//		// 01.05 перенос на 02.05
//		ЗаменаВыходного(Дата(2016,5,2,0,0,0),Дата(2016,5,1,0,0,0), "перенос выходного");
//		// 12.06 перенос на 13.06
//		ЗаменаВыходного(Дата(2016,6,13,0,0,0),Дата(2016,6,12,0,0,0), "перенос выходного");
//		
//	ИначеЕсли ЗаКакойГод = 2017 Тогда
//		// календарь 2017
//		// 01.01 перенос на 24.02
//		ЗаменаВыходного(Дата(2017,2,24,0,0,0),Дата(2017,1,1,0,0,0), "перенос выходного");
//		// 07.01 перенос на 08.05
//		ЗаменаВыходного(Дата(2017,5,8,0,0,0),Дата(2017,1,7,0,0,0), "перенос выходного");
//		// 04.11 перенос на 06.11
//		ЗаменаВыходного(Дата(2017,11,6,0,0,0),Дата(2017,11,4,0,0,0), "перенос выходного");
//		
//	ИначеЕсли ЗаКакойГод  = 2019 Тогда
//		// календарь 2019
//		// 05.01 перенос на 02.05
//		ЗаменаВыходного(Дата(2019,1,5),Дата(2019,5,2), "перенос выходного");
//		// 06.01 перенос на 03.05
//		ЗаменаВыходного(Дата(2019,1,6),Дата(2019,5,3), "перенос выходного");
//		// 23.02 перенос на 10.05
//		ЗаменаВыходного(Дата(2019,2,23),Дата(2019,5,10), "перенос выходного");
//		
//	ИначеЕсли ЗаКакойГод  = 2018 Тогда
//		// календарь 2018
//		// 06.01 перенос на 09.03
//		ЗаменаВыходного(Дата(2018,1,6),Дата(2018,3,9), "перенос выходного");
//		// 07.01 перенос на 02.05
//		ЗаменаВыходного(Дата(2018,1,7),Дата(2018,5,2), "перенос выходного");
//		// 28.04 перенос на 30.04
//		ЗаменаВыходного(Дата(2018,4,28),Дата(2018,4,30), "");
//		// 09.06 перенос на 11.06
//		ЗаменаВыходного(Дата(2018,6,9),Дата(2018,6,11), "");
//		// 04.11 перенос на 05.11
//		ЗаменаВыходного(Дата(2018,11,4),Дата(2018,11,5), "перенос выходного");
//		// 29.12 перенос на 31.12
//		ЗаменаВыходного(Дата(2018,12,29),Дата(2018,12,31), "");
//	КонецЕсли; 

//	Если СписокПраздниковВВыходные.Количество() > 0 Тогда
//		Сообщить("При заполнении календаря на " + Формат(ЗаКакойГод,"ЧЦ=4; ЧГ=0") + " год обнаружены государственные праздники, попадающие на выходные дни:"); 
//		Для ъ=0 По СписокПраздниковВВыходные.Количество()-1 Цикл
//			Сообщить(Формат(СписокПраздниковВВыходные[ъ].Значение, "ДФ ='дд ММММ'")+" - "+СписокПраздниковВВыходные[ъ]);
//		КонецЦикла; 
//		Сообщить("Необходимо перенести эти выходные дни на следующий после праздничного рабочий день.", СтатусСообщения.Внимание);
//	КонецЕсли;
//КонецПроцедуры

