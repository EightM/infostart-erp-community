&НаКлиенте
Процедура ВыполнитьДействие(Команда)
КонецПроцедуры

&НаСервере
Функция ИмяОсновнойТаблицы()
	Возврат ?(Запись.ИсточникДанных.Пустая(), "", Запись.ИсточникДанных.ПолноеИмя);
КонецФункции

&НаКлиенте
Процедура НастройкаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя="СтраницаПравила" Тогда
		Если ОбновитьСтруктуруПравил Тогда
			тзПравила_Инициализация(Ложь);
			ОбновитьСтруктуруПравил=Ложь;
		КонецЕсли;
	Иначе
		Если Запись.ИсточникДанных.Пустая() Тогда
			Элементы.Настройка.ТекущаяСтраница=Элементы.СтраницаПравила;
			Сообщение=Новый СообщениеПользователю;
			Сообщение.Текст="Необходимо указать источник данных";
			Сообщение.Поле="ИсточникДанных";
			//Сообщение.УстановитьДанные("Запись");
			//общение.КлючДанных="Запись";
			Сообщение.Сообщить(); 
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов

&НаКлиенте
Процедура АтрибутФормы_ПриИзменении(Элемент)
	АтрибутФормы_ПриИзмененииНаСервере(Элемент.Имя);	
КонецПроцедуры

&НаСервере
Процедура АтрибутФормы_ПриИзмененииНаСервере(стрИмя)	
	Если стрИмя="ИсточникДанных" Тогда		
		ДинамическийСписок_ИнициализацияНастроек();		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов таблицы формы "Динамический список"

&НаСервере
Процедура ДинамическийСписок_ОбновитьЭлементы()
	//Удалим все элементы из динамического списка
	МассивЭлементов=Новый Массив;
	Для каждого СтрокаКоллекции Из Элементы.ДинамическийСписок.ПодчиненныеЭлементы Цикл
		МассивЭлементов.Добавить(СтрокаКоллекции);		
	КонецЦикла;
	Для каждого СтрокаКоллекции Из МассивЭлементов Цикл
		Элементы.Удалить(СтрокаКоллекции);
	КонецЦикла;

	//Добавим выбранные элементы в динамический список
	Для каждого СтрокаКоллекции Из тзЭлементы Цикл
		Элемент=Элементы.Добавить(СтрЗаменить(СтрокаКоллекции.Идентификатор, ".", "_"), Тип("ПолеФормы"), ЭтаФорма.Элементы.ДинамическийСписок); 
		Элемент.Вид=ВидПоляФормы.ПолеВвода; 
		Элемент.ПутьКДанным="ДинамическийСписок."+СтрокаКоллекции.Идентификатор;
		Элемент.Заголовок=СтрокаКоллекции.Представление;
	КонецЦикла;		
КонецПроцедуры
 
&НаСервере
Процедура ДинамическийСписок_ИнициализацияНастроек()
	Попытка
		СхемаКомпоновкиДанных=Новый СхемаКомпоновкиДанных;
		ИсточникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
		ИсточникДанных.Имя="ИсточникДанных1";
		ИсточникДанных.ТипИсточникаДанных="Local";

		НаборДанныхЗапрос=СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанныхЗапрос.Имя="НаборДанных";
		НаборДанныхЗапрос.ИсточникДанных="ИсточникДанных1";
		НаборДанныхЗапрос.Запрос="
		|ВЫБРАТЬ
		| *
		|ИЗ
		|	"+ИмяОсновнойТаблицы()+" КАК ИсточникДанных
		|";
		ДинамическийСписок.ПроизвольныйЗапрос=Истина;
		ДинамическийСписок.ОсновнаяТаблица=ИмяОсновнойТаблицы();
		ДинамическийСписок.ТекстЗапроса=НаборДанныхЗапрос.Запрос;
		ДинамическийСписок.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		ДинамическийСписок.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));

		ДинамическийСписок_ОбновитьЭлементы();
	Исключение
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий атрибутов таблицы формы "Элементы"

&НаКлиенте
Процедура тзЭлементы_Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Не ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Массив") Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из ПараметрыПеретаскивания.Значение Цикл
		НоваяСтрока=тзЭлементы.Добавить();
		НоваяСтрока.Идентификатор=СокрЛП(СтрокаКоллекции.Поле);
		НоваяСтрока.Представление=СокрЛП(СтрокаКоллекции.Заголовок);
		НоваяСтрока.ТипЗначения=СтрокаКоллекции.ТипЗначения;
	КонецЦикла;

	ОбновитьСтруктуруПравил=Истина;
КонецПроцедуры

&НаКлиенте
Процедура тзЭлементы_ПередУдалением(Элемент, Отказ)
	ОбновитьСтруктуруПравил=Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий табличного поля "Правила"

&НаСервере
Процедура тзПравила_Инициализация(ОбновитьИзХранилища)
	Если ОбновитьИзХранилища Тогда
		тзПравилаХранилище=РеквизитФормыВЗначение("Запись").Правила.Получить();
	Иначе
		тзПравилаХранилище=РеквизитФормыВЗначение("тзПравила").Скопировать();
		тзПравила.Очистить();

		ДобавляемыеРеквизиты=Новый Массив;
		Для каждого СтрокаКоллекции Из тзПравилаХранилище.Колонки Цикл
			ДобавляемыеРеквизиты.Добавить("тзПравила."+СтрокаКоллекции.Имя);

			//Удаляем ранее добавленные элементы
			Результат=Элементы.тзПравила.ПодчиненныеЭлементы.Найти(СтрокаКоллекции.Имя);
			Если НЕ Результат=Неопределено Тогда Элементы.Удалить(Результат); КонецЕсли;			
		КонецЦикла;
		ИзменитьРеквизиты(, ДобавляемыеРеквизиты);
	КонецЕсли;
	
	ДобавляемыеРеквизиты=Новый Массив;

	//Создаем колонки (измерения)
	Для каждого СтрокаКоллекции Из тзЭлементы Цикл
		стрИмя=стрЗаменить(СокрЛП(СтрокаКоллекции.Идентификатор), ".", "_");
		Реквизит=Новый РеквизитФормы(стрИмя, СтрокаКоллекции.ТипЗначения, "тзПравила", СокрЛП(СтрокаКоллекции.Представление));
		ДобавляемыеРеквизиты.Добавить(Реквизит);		
	КонецЦикла;

	//Создаем колонки (ресурсы)
	Реквизит=Новый РеквизитФормы("Префикс", Новый ОписаниеТипов("Строка"), "тзПравила", "Префикс");
	ДобавляемыеРеквизиты.Добавить(Реквизит);	

	Реквизит=Новый РеквизитФормы("ПрефиксРИБ", Новый ОписаниеТипов("Булево"), "тзПравила", "Префикс РИБ");
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит=Новый РеквизитФормы("ПрефиксПериод", Новый ОписаниеТипов("Строка"), "тзПравила", "Префикс периода");
	ДобавляемыеРеквизиты.Добавить(Реквизит);

	Реквизит=Новый РеквизитФормы("ПрефиксШаблон", Новый ОписаниеТипов("Строка"), "тзПравила", "Префикс (шаблон)");
	ДобавляемыеРеквизиты.Добавить(Реквизит);

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	//Создаем колонки на форме табличного поля "тзПравила"
	Для каждого СтрокаКоллекции Из ДобавляемыеРеквизиты Цикл
		Элемент=Элементы.Добавить(СтрокаКоллекции.Имя, Тип("ПолеФормы"), Элементы.тзПравила);
		Элемент.ПутьКДанным="тзПравила."+СтрокаКоллекции.Имя;
		Элемент.Вид=ВидПоляФормы.ПолеВвода;
		//Элемент.УстановитьДействие("ПриИзменении", "тпПравила_ПриИзменении_Клиент");
		//Элемент.УстановитьДействие("НачалоВыбора", "тпПравила_НачалоВыбора_Клиент");
		Элемент.УстановитьДействие("ОбработкаВыбора", "тпПравила_ОбработкаВыбора_Клиент");
		//Элемент.ВыборГруппИЭлементов=ГруппыИЭлементы.ГруппыИЭлементы;

		Если СтрокаКоллекции.Имя="ПрефиксПериод" Тогда
			Элемент.СписокВыбора.Добавить("", "Не задан");
			Элемент.СписокВыбора.Добавить("НомерДняГода", "Номер дня (с начала года)");
			Элемент.СписокВыбора.Добавить("НомерНедели", "Номер недели");
			Элемент.СписокВыбора.Добавить("НомерМесяца", "Номер месяца");
			Элемент.СписокВыбора.Добавить("НомерКвартала", "Номер квартала");
			Элемент.СписокВыбора.Добавить("НомерГода", "Номер года (2 цифры)");
			Элемент.СписокВыбора.Добавить("НомерДняМесяца", "Номер дня и месяца");
			Элемент.СписокВыбора.Добавить("НомерГодаМесяца", "Номер года и месяца");
			Элемент.СписокВыбора.Добавить("НомерГодаМесяцаДня", "Номер года, месяца и дня");

			Элемент.РедактированиеТекста=Ложь;
			Элемент.КнопкаВыпадающегоСписка=Истина;
		КонецЕсли;
		Если СтрокаКоллекции.Имя="ПрефиксШаблон" Тогда
			Элемент.СписокВыбора.Добавить("");
			Элемент.СписокВыбора.Добавить("-");
			Элемент.СписокВыбора.Добавить("[РИБ]");
			Элемент.СписокВыбора.Добавить("[ПЕРИОД]");
			Элемент.СписокВыбора.Добавить("[ПРЕФИКС]");

			//Элемент.СписокВыбора.Добавить("[РИБ][ПРЕФИКС][ПЕРИОД]-");
			//Элемент.СписокВыбора.Добавить("[ПЕРИОД][РИБ]-[ПРЕФИКС]");
			Элемент.РедактированиеТекста=Ложь;
			Элемент.КнопкаВыпадающегоСписка=Истина;
		КонецЕсли;
	КонецЦикла;
	
	//Заполним созднанную таблицу значениями их хранилища правил
	Если НЕ тзПравилаХранилище=Неопределено Тогда
		Для каждого СтрокаКоллекции Из тзПравилаХранилище Цикл
			ЗаполнитьЗначенияСвойств(тзПравила.Добавить(), СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура тпПравила_ОбработкаВыбора_Клиент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Элемент.Имя="ПрефиксШаблон" Тогда
		СтандартнаяОбработка=Ложь;
		Если ПустаяСтрока(ВыбранноеЗначение) Тогда
			Элемент.Родитель.ТекущиеДанные.ПрефиксШаблон="";
		Иначе
			Элемент.Родитель.ТекущиеДанные.ПрефиксШаблон=Элемент.Родитель.ТекущиеДанные.ПрефиксШаблон+ВыбранноеЗначение;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	тзПравила_Инициализация(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗаписьСуществует Тогда
		ДинамическийСписок_ИнициализацияНастроек();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	тзБуфер=ТекущийОбъект.Элементы.Получить();
	Если ТипЗнч(тзБуфер)=Тип("ТаблицаЗначений") Тогда
		тзЭлементы.Загрузить(тзБуфер);
	КонецЕсли;
	ДинамическийСписок_ИнициализацияНастроек(); ЗаписьСуществует=Истина;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Элементы=?(тзЭлементы.Количество()=0, Неопределено, Новый ХранилищеЗначения(РеквизитФормыВЗначение("тзЭлементы", Тип("ТаблицаЗначений"))));
	ТекущийОбъект.Правила=?(тзПравила.Количество()=0, Неопределено, Новый ХранилищеЗначения(РеквизитФормыВЗначение("тзПравила", Тип("ТаблицаЗначений"))));
КонецПроцедуры