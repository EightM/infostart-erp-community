////////////////////////////////////////////////////////////////////////////////
// Общие универсальные функции

Функция СтруктураОбъекта(ИмяФормы) Экспорт
	стрПуть=СтрЗаменить(ИмяФормы, "_", ".");
	стрПуть=СтрЗаменить(стрПуть, ".", Символы.ПС);
	
	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("Тип", СтрПолучитьСтроку(стрПуть, 1));
	СтруктураВозврата.Вставить("Вид", СтрПолучитьСтроку(стрПуть, 2));

	Если СтруктураВозврата.Тип="Документ" Тогда
	    СтруктураВозврата.Вставить("ЭтоОбъект", НЕ Метаданные.Документы.Найти(СтруктураВозврата.Вид)=Неопределено);
	ИначеЕсли СтруктураВозврата.Тип="Справочник" Тогда
		СтруктураВозврата.Вставить("ЭтоОбъект", НЕ Метаданные.Справочники.Найти(СтруктураВозврата.Вид)=Неопределено);
	КонецЕсли;

	Возврат СтруктураВозврата;
КонецФункции

Функция ЗначениеРеквизитаПоСсылке(Ссылка, Путь)
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст="
	|ВЫБРАТЬ
	|"+Путь+" Как Реквизит
	|ИЗ
	|	"+Ссылка.Метаданные().ПолноеИмя()+" КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка = &Ссылка
	|";
	Выборка=Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Реквизит, Неопределено); 
КонецФункции

Процедура СоздатьЭлементОтбора(ЭлементыОтбора, ЭлементОтбораИсточник, РежимОтображения="Недоступный") Экспорт
    НовыйЭлементОтбора=ЭлементыОтбора.Добавить(Тип(ЭлементОтбораИсточник));
    ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбораИсточник);
	НовыйЭлементОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных[РежимОтображения];
	Если Тип(ЭлементОтбораИсточник)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбораИсточник.Элементы.Количество() > 0 Тогда
        Для Каждого ЭлементОтбора Из ЭлементОтбораИсточник.Элементы Цикл
            СоздатьЭлементОтбора(НовыйЭлементОтбора.Элементы, ЭлементОтбора)
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры

Функция ИндексПользователя(Иерархический, ТекущийПользователь, ВыборкаПользователь)
	Если НЕ ЗначениеЗаполнено(ВыборкаПользователь) Тогда Возврат 0; КонецЕсли;
	Если Иерархический И ВыборкаПользователь.ЭтоГруппа И ТекущийПользователь.Пользователь.ПринадлежитЭлементу(ВыборкаПользователь) Тогда
		Возврат ВыборкаПользователь.Уровень();
	ИначеЕсли ВыборкаПользователь=ТекущийПользователь Тогда
		Возврат 1000;
	КонецЕсли;
	Возврат Неопределено; 
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// Настройка форма объекта
 
Функция НайтиНастройкиПоСобытию(ИсточникДанных, Событие) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.Текст="
	|ВЫБРАТЬ 
	|	Действие,Настройка,Пользователь,Порядок
	|ИЗ
	|	РегистрСведений.НастройкиФормыОбъекта КАК Настройки
	|ГДЕ
	|	Настройки.ИсточникДанных = &ИсточникДанных И Настройки.Событие = &Событие
	|";
	Выборка=Запрос.Выполнить().Выбрать();

	Иерархический=Метаданные.Справочники.Пользователи.Иерархический;

	тзПравила=Новый ТаблицаЗначений;
	тзПравила.Колонки.Добавить("ИндексПользователя");
	тзПравила.Колонки.Добавить("Действие");
	тзПравила.Колонки.Добавить("Настройка");
	тзПравила.Колонки.Добавить("Порядок");
	Пока Выборка.Следующий() Цикл
		ИндексПользователя=ИндексПользователя(Иерархический, ПараметрыСеанса.ТекущийПользователь, Выборка.Пользователь);
		Если ИндексПользователя=Неопределено Тогда Продолжить;	КонецЕсли;

		РезультатПоиска=тзПравила.Найти(Выборка.Действие, "Действие");
		Если РезультатПоиска=Неопределено Тогда
			НоваяСтрока=тзПравила.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ИндексПользователя=ИндексПользователя;
		Иначе
			Если ИндексПользователя > РезультатПоиска.ИндексПользователя Тогда
				ЗаполнитьЗначенияСвойств(РезультатПоиска, Выборка);
				РезультатПоиска.ИндексПользователя=ИндексПользователя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	тзПравила.Сортировать("Порядок Возр");

	СтруктураВозврата=Новый Структура;
	Для каждого СтрокаКоллекции Из тзПравила Цикл
		СтруктураВозврата.Вставить(СтрокаКоллекции.Действие, СтрокаКоллекции.Настройка);
	КонецЦикла; 

	Возврат СтруктураВозврата;
КонецФункции

Функция НайтиНастройкиПоДействию(ИсточникДанных, Действие) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.Текст="
	|ВЫБРАТЬ 
	|	Событие,Настройка,Пользователь,Порядок
	|ИЗ
	|	РегистрСведений.НастройкиФормыОбъекта КАК Настройки
	|ГДЕ
	|	Настройки.ИсточникДанных = &ИсточникДанных И Настройки.Действие = &Действие
	|";
	Выборка=Запрос.Выполнить().Выбрать();

	Иерархический=Метаданные.Справочники.Пользователи.Иерархический;

	тзПравила=Новый ТаблицаЗначений;
	тзПравила.Колонки.Добавить("ИндексПользователя");
	тзПравила.Колонки.Добавить("Событие");
	тзПравила.Колонки.Добавить("Настройка");
	тзПравила.Колонки.Добавить("Порядок");
	Пока Выборка.Следующий() Цикл
		ИндексПользователя=ИндексПользователя(Иерархический, ПараметрыСеанса.ТекущийПользователь, Выборка.Пользователь);
		Если ИндексПользователя=Неопределено Тогда Продолжить;	КонецЕсли;

		РезультатПоиска=тзПравила.Найти(Выборка.Событие, "Событие");
		Если РезультатПоиска=Неопределено Тогда
			НоваяСтрока=тзПравила.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ИндексПользователя=ИндексПользователя;
		Иначе
			Если ИндексПользователя > РезультатПоиска.ИндексПользователя Тогда
				ЗаполнитьЗначенияСвойств(РезультатПоиска, Выборка);
				РезультатПоиска.ИндексПользователя=ИндексПользователя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	тзПравила.Сортировать("Порядок Возр");

	СтруктураВозврата=Новый Структура;
	Для каждого СтрокаКоллекции Из тзПравила Цикл
		ИндексЗначенияПеречисления=Перечисления.СобытияСистемы.Индекс(СтрокаКоллекции.Событие);
		стрИмя=Метаданные.Перечисления.СобытияСистемы.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		СтруктураВозврата.Вставить(стрИмя, СтрокаКоллекции.Настройка.Получить());
	КонецЦикла;

	Возврат СтруктураВозврата;
КонецФункции

Процедура ВыполнитьНастройку(Событие, Форма, Объект, СтруктураПараметров=Неопределено) Экспорт
	СтруктураОбъекта=Неопределено;
	Если НЕ СтруктураПараметров=Неопределено Тогда
		СтруктураПараметров.Свойство("СтруктураОбъекта", СтруктураОбъекта);
	КонецЕсли;
	Если СтруктураОбъекта=Неопределено Тогда
		СтруктураОбъекта=СтруктураОбъекта(Форма.ИмяФормы);
	КонецЕсли;

	ОбъектМетаданныхСсылка=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(СтруктураОбъекта.Тип+"."+СтруктураОбъекта.Вид);
	СтруктураНастроек=НайтиНастройкиПоСобытию(ОбъектМетаданныхСсылка, Перечисления.СобытияСистемы[Событие]);
	Если СтруктураНастроек.Количество()=0 Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураНастроек Цикл
		СтруктураНастройки=СтрокаКоллекции.Значение.Получить();
		
		Если СтрокаКоллекции.Ключ="ВыполняемыйМодуль" Тогда
			Для каждого СтрокаПараметра Из СтруктураНастройки.Параметры Цикл
				СтруктураНастройки.ВыполняемыйМодуль=СтрЗаменить(СтруктураНастройки.ВыполняемыйМодуль, "{"+СтрокаПараметра.Ключ+"}", "СтруктураНастройки.Параметры["""+СтрокаПараметра.Ключ+"""]");
			КонецЦикла;
			Выполнить(СтруктураНастройки.ВыполняемыйМодуль);

		ИначеЕсли СтрокаКоллекции.Ключ="УсловноеОформление" Тогда
			УстановитьУсловноеОформление(Форма, СтруктураНастройки.УсловноеОформление);
			
		ИначеЕсли СтрокаКоллекции.Ключ="ЗаполнениеРеквизитов" Тогда
			ЗаполнениеРеквизитовПоНастройке(Форма, Объект, СтруктураНастройки.ЗаполнениеРеквизитов, СтруктураНастройки.Параметры);

		ИначеЕсли СтрокаКоллекции.Ключ="ПроверкаЗаполнения" Тогда
			Если НЕ Форма=Неопределено И НЕ Форма.Модифицированность Тогда
				УсловиеВыполнено=УправлениеКонфигурациейСервер.УсловиеВыполненоПоСсылке(Объект.Ссылка, СтруктураНастройки.ПроверкаЗаполнения);
			Иначе
				УсловиеВыполнено=УправлениеКонфигурациейСервер.УсловиеВыполненоПоОбъекту(Форма, СтруктураНастройки.ПроверкаЗаполнения);
			КонецЕсли;
			Если НЕ УсловиеВыполнено И СтруктураНастройки.Свойство("Действия") Тогда
				тзДействия=СтруктураНастройки.Действия;

				Если ТипЗнч(СтруктураПараметров)=Тип("Структура") Тогда
					Для каждого СтрокаКоллекции Из СтруктураПараметров Цикл
						РезультатПоиска=тзДействия.Найти(СтрокаКоллекции.Ключ, "Имя");
						Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
						СтруктураПараметров.Вставить(СтрокаКоллекции.Ключ, РезультатПоиска.Значение);
					КонецЦикла;
				КонецЕсли;
				
				Для каждого СтрокаКоллекции Из тзДействия Цикл
					Если СтрокаКоллекции.Имя="Сообщение" Тогда
						Сообщить(СтрокаКоллекции.Значение);
					ИначеЕсли СтрокаКоллекции.Имя="ТолькоПросмотр" Тогда
						Форма.ТолькоПросмотр=СтрокаКоллекции.Значение;
					ИначеЕсли СтрокаКоллекции.Имя="Алгоритм" Тогда
						Для каждого СтрокаПараметра Из СтруктураНастройки.Параметры Цикл
							СтрокаКоллекции.Значение=СтрЗаменить(СтрокаКоллекции.Значение, "{"+СтрокаПараметра.Ключ+"}", "СтруктураНастройки.Параметры["""+СтрокаПараметра.Ключ+"""]");
						КонецЦикла;
						Выполнить(СтрокаКоллекции.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ____ВыполнитьНастройку(Форма, Объект, Событие, СтруктураПараметров=Неопределено) Экспорт
	СтруктураОбъекта=Неопределено;
	Если НЕ СтруктураПараметров=Неопределено Тогда
		СтруктураПараметров.Свойство("СтруктураОбъекта", СтруктураОбъекта);
	КонецЕсли;
	Если СтруктураОбъекта=Неопределено Тогда
		СтруктураОбъекта=СтруктураОбъекта(Форма.ИмяФормы);
	КонецЕсли;

	ОбъектМетаданныхСсылка=УправлениеКонфигурациейСервер.ИдентификаторОбъектовМетаданныхСсылка(СтруктураОбъекта.Тип+"."+СтруктураОбъекта.Вид);
	СтруктураНастроек=НайтиНастройкиПоСобытию(ОбъектМетаданныхСсылка, Перечисления.СобытияСистемы[Событие]);
	Если СтруктураНастроек.Количество()=0 Тогда Возврат; КонецЕсли;

	Для каждого СтрокаКоллекции Из СтруктураНастроек Цикл
		СтруктураНастройки=СтрокаКоллекции.Значение.Получить();
		
		Если СтрокаКоллекции.Ключ="ВыполняемыйМодуль" Тогда
			Для каждого СтрокаПараметра Из СтруктураНастройки.Параметры Цикл
				СтруктураНастройки.ВыполняемыйМодуль=СтрЗаменить(СтруктураНастройки.ВыполняемыйМодуль, "{"+СтрокаПараметра.Ключ+"}", "СтруктураНастройки.Параметры["""+СтрокаПараметра.Ключ+"""]");
			КонецЦикла;
			Выполнить(СтруктураНастройки.ВыполняемыйМодуль);

		ИначеЕсли СтрокаКоллекции.Ключ="УсловноеОформление" Тогда
			УстановитьУсловноеОформление(Форма, СтруктураНастройки.УсловноеОформление);
			
		ИначеЕсли СтрокаКоллекции.Ключ="ЗаполнениеРеквизитов" Тогда
			текОбъект=?(СтруктураПараметров.Свойство("ТекущийОбъект"), СтруктураПараметров.ТекущийОбъект, Объект);
			ЗаполнениеРеквизитовПоНастройке(Форма, текОбъект, СтруктураНастройки.ЗаполнениеРеквизитов, СтруктураНастройки.Параметры);

		ИначеЕсли СтрокаКоллекции.Ключ="ПроверкаЗаполнения" Тогда
			Если НЕ Форма=Неопределено И НЕ Форма.Модифицированность Тогда //Форма.Объект.Ссылка.ВерсияДанных=Форма.Объект.ВерсияДанных
				УсловиеВыполнено=УправлениеКонфигурациейСервер.УсловиеВыполненоПоСсылке(Объект.Ссылка, СтруктураНастройки.ПроверкаЗаполнения);
			Иначе
				УсловиеВыполнено=УправлениеКонфигурациейСервер.УсловиеВыполненоПоОбъекту(Форма, СтруктураНастройки.ПроверкаЗаполнения);
			КонецЕсли;
			Если УсловиеВыполнено И СтруктураНастройки.Свойство("Действия") Тогда
				тзДействия=СтруктураНастройки.Действия;

				Если ТипЗнч(СтруктураПараметров)=Тип("Структура") Тогда
					Для каждого СтрокаКоллекции Из СтруктураПараметров Цикл
						РезультатПоиска=тзДействия.Найти(СтрокаКоллекции.Ключ, "Имя");
						Если РезультатПоиска=Неопределено Тогда Продолжить; КонецЕсли;
						СтруктураПараметров.Вставить(СтрокаКоллекции.Ключ, РезультатПоиска.Значение);
					КонецЦикла;
				КонецЕсли;
				
				Для каждого СтрокаКоллекции Из тзДействия Цикл
					Если СтрокаКоллекции.Имя="Сообщение" Тогда
						Сообщить(СтрокаКоллекции.Значение);
					ИначеЕсли СтрокаКоллекции.Имя="ТолькоПросмотр" Тогда
						Форма.ТолькоПросмотр=СтрокаКоллекции.Значение;
					ИначеЕсли СтрокаКоллекции.Имя="Алгоритм" Тогда
						Для каждого СтрокаПараметра Из СтруктураНастройки.Параметры Цикл
							СтрокаКоллекции.Значение=СтрЗаменить(СтрокаКоллекции.Значение, "{"+СтрокаПараметра.Ключ+"}", "СтруктураНастройки.Параметры["""+СтрокаПараметра.Ключ+"""]");
						КонецЦикла;
						Выполнить(СтрокаКоллекции.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция ЗаполнениеРеквизитов_ПроверкаУсловия(ЗначениеРеквизита, ТипУсловия, ЗначениеУсловия )
	Если ТипУсловия=ВидСравнения.Равно Тогда
		Если ЗначениеРеквизита=ЗначениеУсловия Тогда Возврат Истина; КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.НеРавно Тогда
		Если НЕ ЗначениеРеквизита=ЗначениеУсловия Тогда Возврат Истина; КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.Больше Тогда
		Если ЗначениеРеквизита > ЗначениеУсловия Тогда Возврат Истина; КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.БольшеИлиРавно Тогда
		Если ЗначениеРеквизита >= ЗначениеУсловия Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.Меньше Тогда
		Если ЗначениеРеквизита < ЗначениеУсловия Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.МеньшеИлиРавно Тогда
		Если ЗначениеРеквизита <= ЗначениеУсловия Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.Содержит Тогда
		Если Найти(ЗначениеРеквизита, ЗначениеУсловия) > 0 Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.НеСодержит Тогда
		Если Найти(ЗначениеРеквизита, ЗначениеУсловия) = 0 Тогда Возврат Истина КонецЕсли;
	ИначеЕсли ТипУсловия=ВидСравнения.ВИерархии Тогда
		Возврат ЗначениеРеквизита.ПринадлежитЭлементу();
	ИначеЕсли ТипУсловия=ВидСравнения.НЕВИерархии Тогда
		Возврат НЕ ЗначениеРеквизита.ПринадлежитЭлементу();
	КонецЕсли;
	Возврат Ложь;
КонецФункции
 
Функция ЗаполнениеРеквизитов_УсловиеВыполнено(Объект, КоллекцияЭлементов, СтрокаТабличнойЧасти=Неопределено)
	Если КоллекцияЭлементов.Строки.Количество()=0 Тогда Возврат Истина; КонецЕсли; //Нет условий

	Для каждого СтрокаКоллекции1 Из КоллекцияЭлементов.Строки[0].Строки Цикл
		ИмяРеквизита=СтрокаКоллекции1.Идентификатор;
		ЗначениеУсловия=СтрокаКоллекции1.Значение;
		
		МассивСтрок=СтрРазделить(ИмяРеквизита, ".");
		Если Объект.Ссылка.Метаданные().ТабличныеЧасти.Найти(МассивСтрок[0])=Неопределено Тогда
			Если НЕ ЗаполнениеРеквизитов_ПроверкаУсловия(Вычислить("Объект."+ИмяРеквизита), СтрокаКоллекции1.ТипУсловия, ЗначениеУсловия) Тогда Возврат Ложь; КонецЕсли;
		Иначе
			стрПуть=СтрЗаменить(ИмяРеквизита, МассивСтрок[0]+".", "");			
			Если СтрокаТабличнойЧасти=Неопределено Тогда //По всей табличной части
				Для каждого СтрокаКоллекции2 Из Объект[МассивСтрок[0]] Цикл
					Если НЕ ЗаполнениеРеквизитов_ПроверкаУсловия(Вычислить("СтрокаКоллекции2."+стрПуть), СтрокаКоллекции1.ТипУсловия, ЗначениеУсловия) Тогда Возврат Ложь; КонецЕсли;
				КонецЦикла;
			Иначе
				Если НЕ ЗаполнениеРеквизитов_ПроверкаУсловия(Вычислить("СтрокаТабличнойЧасти."+стрПуть), СтрокаКоллекции1.ТипУсловия, ЗначениеУсловия) Тогда Возврат Ложь; КонецЕсли;
			КонецЕсли;
		КонецЕсли; 

		////МассивСтрок=СтрРазделить(ИмяРеквизита, ".");
		////Если МассивСтрок.Количество()=1 Тогда //Реквизит шапки
		////	Если НЕ ЗаполнениеРеквизитов_ПроверкаУсловия(Объект[ИмяРеквизита], СтрокаКоллекции1.ТипУсловия, ЗначениеУсловия) Тогда Возврат Ложь; КонецЕсли;
		////Иначе
		////	ИмяРеквизита=МассивСтрок[1];
		////	ИмяТабличнойЧасти=МассивСтрок[0];
		////	Если СтрокаТабличнойЧасти=Неопределено Тогда //По всей табличной части
		////		Для каждого СтрокаКоллекции2 Из Объект[ИмяТабличнойЧасти] Цикл
		////			Если НЕ ЗаполнениеРеквизитов_ПроверкаУсловия(СтрокаКоллекции2[ИмяРеквизита], СтрокаКоллекции1.ТипУсловия, ЗначениеУсловия) Тогда Возврат Ложь; КонецЕсли;
		////		КонецЦикла;
		////	Иначе
		////		Если НЕ ЗаполнениеРеквизитов_ПроверкаУсловия(СтрокаТабличнойЧасти[ИмяРеквизита], СтрокаКоллекции1.ТипУсловия, ЗначениеУсловия) Тогда Возврат Ложь; КонецЕсли;
		////	КонецЕсли;
		////КонецЕсли;
	КонецЦикла; 
	
	Возврат Истина; 
КонецФункции
 
Процедура ЗаполнениеРеквизитовПоНастройке(Форма, Объект, дзЗаполнениеРеквизитов, СтруктураПараметров)
	МассивРеквизитов=Новый Массив;
	Для каждого СтрокаКоллекции1 Из дзЗаполнениеРеквизитов.Строки Цикл
		ИмяРеквизита=СтрокаКоллекции1.Идентификатор;
		Значение=СтрокаКоллекции1.Значение;

		МассивСтрок=СтрРазделить(ИмяРеквизита, ".");
		Если МассивСтрок.Количество()=1 Тогда //Реквизит шапки
			Если НЕ ЗаполнениеРеквизитов_УсловиеВыполнено(Объект, СтрокаКоллекции1) Тогда Продолжить; КонецЕсли;
						
			Если СтрокаКоллекции1.ТипУсловия="Путь" Тогда
				стрРевизитПуть=СтрРазделить(СтрокаКоллекции1.Значение, ".")[1];
				стрПуть=стрЗаменить(Значение, "Ссылка."+стрРевизитПуть+".", "");
				Значение=ЗначениеРеквизитаПоСсылке(Объект[стрРевизитПуть], стрПуть);
			ИначеЕсли СтрокаКоллекции1.ТипУсловия="Алгоритм" Тогда	
				Для каждого СтрокаПараметра Из СтруктураПараметров Цикл
					СтрокаКоллекции1.Значение=СтрЗаменить(СтрокаКоллекции1.Значение, "{"+СтрокаПараметра.Ключ+"}", "СтруктураПараметров["""+СтрокаПараметра.Ключ+"""]");
				КонецЦикла;
				Выполнить(СтрокаКоллекции1.Значение);
			КонецЕсли;

			Объект[ИмяРеквизита]=Значение;			
			МассивРеквизитов.Добавить(ИмяРеквизита); //Вызов события "При изменении"
		Иначе //Реквизит табличной части
			ИмяРеквизита=МассивСтрок[1];
			ИмяТабличнойЧасти=МассивСтрок[0];
			Если СтрокаКоллекции1.ТипУсловия="Путь" Тогда
				стрРевизитПуть=СтрРазделить(СтрокаКоллекции1.Значение, ".")[1];
				стрПуть=стрЗаменить(Значение, "Ссылка."+ИмяТабличнойЧасти+"."+стрРевизитПуть+".", "");
			КонецЕсли;	
			Для каждого СтрокаКоллекции Из Объект[ИмяТабличнойЧасти] Цикл
				Если НЕ ЗаполнениеРеквизитов_УсловиеВыполнено(Объект, СтрокаКоллекции1, СтрокаКоллекции) Тогда Продолжить; КонецЕсли;

				Если СтрокаКоллекции1.ТипУсловия="Путь" Тогда
					Значение=ЗначениеРеквизитаПоСсылке(СтрокаКоллекции[стрРевизитПуть], стрПуть);
				ИначеЕсли СтрокаКоллекции1.ТипУсловия="Алгоритм" Тогда	
					Для каждого СтрокаПараметра Из СтруктураПараметров Цикл
						СтрокаКоллекции1.Значение=СтрЗаменить(СтрокаКоллекции1.Значение, "{"+СтрокаПараметра.Ключ+"}", "СтруктураПараметров["""+СтрокаПараметра.Ключ+"""]");
					КонецЦикла;
					Выполнить(СтрокаКоллекции1.Значение); //Выполнить("Значение="+СтрокаКоллекции1.Значение);
				КонецЕсли;

				СтрокаКоллекции[ИмяРеквизита]=Значение;
				МассивРеквизитов.Добавить(ИмяТабличнойЧасти+"."+ИмяРеквизита); //Вызов события "При изменении"
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	//АдресХранилища=ПоместитьВоВременноеХранилище(МассивРеквизитов, Форма.УникальныйИдентификатор);
	//Форма.КлючСохраненияПоложенияОкна=АдресХранилища;
	//Форма.НавигационнаяСсылка=АдресХранилища;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условное оформление формы объекта

Процедура УстановитьУсловноеОформление(Форма, УсловноеОформление)
	Если УсловноеОформление.Элементы.Количество()=0 Тогда Возврат; КонецЕсли; //Индекс=0;
	Для каждого СтрокаКоллекции Из УсловноеОформление.Элементы Цикл
		НовыйЭлемент=Форма.УсловноеОформление.Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаКоллекции);
		Для каждого СтрокаКоллекции1 Из СтрокаКоллекции.Оформление.Элементы Цикл
			ЗаполнитьЗначенияСвойств(НовыйЭлемент.Оформление.Элементы.Найти(СтрокаКоллекции1.Параметр), СтрокаКоллекции1);
		КонецЦикла;
		Для каждого СтрокаКоллекции1 Из СтрокаКоллекции.Отбор.Элементы Цикл
			Элемент=НовыйЭлемент.Отбор.Элементы.Добавить(Тип(СтрокаКоллекции1));
			ЗаполнитьЗначенияСвойств(Элемент, СтрокаКоллекции1);
			Элемент.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Объект."+СокрЛП(Элемент.ЛевоеЗначение));
		КонецЦикла;
		Для каждого СтрокаКоллекции1 Из СтрокаКоллекции.Поля.Элементы Цикл
			Элемент=НовыйЭлемент.Поля.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(Элемент, СтрокаКоллекции1);
			Элемент.Поле=Новый ПолеКомпоновкиДанных(стрЗаменить(СокрЛП(Элемент.Поле), ".", ""));
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры